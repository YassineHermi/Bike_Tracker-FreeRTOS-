
Test_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08010580  08010580  00020580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d3c  08010d3c  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08010d3c  08010d3c  00020d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d44  08010d44  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d44  08010d44  00020d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d48  08010d48  00020d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08010d4c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006540  20000258  08010fa4  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006798  08010fa4  00036798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a95  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e1  00000000  00000000  00050d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00055200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  00056ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae37  00000000  00000000  00058618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e5fe  00000000  00000000  0008344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001033ef  00000000  00000000  000a1a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a4e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b64  00000000  00000000  001a4e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010568 	.word	0x08010568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08010568 	.word	0x08010568

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <send_data>:
	return HAL_GPIO_ReadPin(GPIOD,BLE_STATE_GPIO_PIN);
}

//function to send data when connected
void send_data(uint8_t * send_data_buffer)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	 if(strcmp((char *)send_data_test_buffer,(char *)send_data_buffer)!=0)
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	480a      	ldr	r0, [pc, #40]	; (800104c <send_data+0x34>)
 8001024:	f7ff f8d4 	bl	80001d0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <send_data+0x2a>
	    {
	        HAL_UART_Transmit(&huart1, send_data_buffer, 13, 100);
 800102e:	2364      	movs	r3, #100	; 0x64
 8001030:	220d      	movs	r2, #13
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <send_data+0x38>)
 8001036:	f004 fc67 	bl	8005908 <HAL_UART_Transmit>
	        strcpy((char *)send_data_test_buffer,(char *)send_data_buffer);
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <send_data+0x34>)
 800103e:	f00a fe35 	bl	800bcac <strcpy>
	    }
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000030c 	.word	0x2000030c
 8001050:	20000274 	.word	0x20000274

08001054 <MX_USART1_UART_Init>:

//function to config usart1
static void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART1_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001098:	f004 fbe8 	bl	800586c <HAL_UART_Init>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000274 	.word	0x20000274
 80010a4:	40013800 	.word	0x40013800

080010a8 <BLE_State_Pin_Init>:
  HAL_UART_Init(&huart2);
}*/


static void BLE_State_Pin_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /*Configure BLE STATE GPIO PIN (PD0) */
  GPIO_InitStruct.Pin = BLE_STATE_GPIO_PIN ;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <BLE_State_Pin_Init+0x24>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <BLE_State_Pin_Init+0x24>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <BLE_State_Pin_Init+0x24>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010be:	4903      	ldr	r1, [pc, #12]	; (80010cc <BLE_State_Pin_Init+0x24>)
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <BLE_State_Pin_Init+0x28>)
 80010c2:	f001 fe25 	bl	8002d10 <HAL_GPIO_Init>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002f8 	.word	0x200002f8
 80010d0:	48000c00 	.word	0x48000c00

080010d4 <BLE_Init>:

void BLE_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 80010d8:	f7ff ffbc 	bl	8001054 <MX_USART1_UART_Init>
	//MX_USART2_UART_Init();
	BLE_State_Pin_Init();
 80010dc:	f7ff ffe4 	bl	80010a8 <BLE_State_Pin_Init>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Memory_Init>:
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
*/

void Memory_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <Memory_Init+0x80>)
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <Memory_Init+0x84>)
 80010ee:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  HAL_QSPI_DeInit(&QSPIHandle);
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <Memory_Init+0x80>)
 80010f2:	f002 f985 	bl	8003400 <HAL_QSPI_DeInit>

  /* System level initialization */
  QSPI_MspInit();
 80010f6:	f000 f94b 	bl	8001390 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <Memory_Init+0x80>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <Memory_Init+0x80>)
 8001102:	2204      	movs	r2, #4
 8001104:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.FlashSize = 23;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <Memory_Init+0x80>)
 8001108:	2217      	movs	r2, #23
 800110a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <Memory_Init+0x80>)
 800110e:	2210      	movs	r2, #16
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <Memory_Init+0x4a>
  {
    return 32U;
 800112a:	2320      	movs	r3, #32
 800112c:	e003      	b.n	8001136 <Memory_Init+0x52>
  }
  return __builtin_clz(value);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001136:	3b01      	subs	r3, #1
 8001138:	461a      	mov	r2, r3
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <Memory_Init+0x80>)
 800113c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <Memory_Init+0x80>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <Memory_Init+0x80>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]

  HAL_QSPI_Init(&QSPIHandle);
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <Memory_Init+0x80>)
 800114c:	f002 f8e2 	bl	8003314 <HAL_QSPI_Init>

  /* QSPI memory reset */
  QSPI_ResetMemory(&QSPIHandle);
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <Memory_Init+0x80>)
 8001152:	f000 f969 	bl	8001428 <QSPI_ResetMemory>

  /* Configuration of the dummy cucles on QSPI memory side */
  QSPI_DummyCyclesCfg(&QSPIHandle);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <Memory_Init+0x80>)
 8001158:	f000 f9aa 	bl	80014b0 <QSPI_DummyCyclesCfg>

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000031c 	.word	0x2000031c
 8001168:	a0001000 	.word	0xa0001000

0800116c <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
void BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b092      	sub	sp, #72	; 0x48
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800117e:	23eb      	movs	r3, #235	; 0xeb
 8001180:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001182:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001196:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800119c:	230a      	movs	r3, #10
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011a8:	2300      	movs	r3, #0
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011ac:	2300      	movs	r3, #0
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <BSP_QSPI_Read+0x68>)
 80011bc:	f002 f944 	bl	8003448 <HAL_QSPI_Command>

  /* Reception of the data */
  HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <BSP_QSPI_Read+0x68>)
 80011c8:	f002 fa33 	bl	8003632 <HAL_QSPI_Receive>

  /* Data is read ==> Flag=0 */
  //Reset_Flag(ReadAddr);

}
 80011cc:	bf00      	nop
 80011ce:	3748      	adds	r7, #72	; 0x48
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000031c 	.word	0x2000031c

080011d8 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
void BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80011ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d901      	bls.n	80011fa <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001210:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001220:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800122e:	2300      	movs	r3, #0
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001232:	2300      	movs	r3, #0
 8001234:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001238:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    QSPI_WriteEnable(&QSPIHandle);
 800123e:	481a      	ldr	r0, [pc, #104]	; (80012a8 <BSP_QSPI_Write+0xd0>)
 8001240:	f000 f9b4 	bl	80015ac <QSPI_WriteEnable>

    /* Configure the command */
    HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4619      	mov	r1, r3
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <BSP_QSPI_Write+0xd0>)
 8001250:	f002 f8fa 	bl	8003448 <HAL_QSPI_Command>

    /* Transmission of the data */
    HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <BSP_QSPI_Write+0xd0>)
 800125c:	f002 f952 	bl	8003504 <HAL_QSPI_Transmit>

    /* Configure automatic polling mode to wait for end of program */
    QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001260:	f241 3188 	movw	r1, #5000	; 0x1388
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <BSP_QSPI_Write+0xd0>)
 8001266:	f000 f9ed 	bl	8001644 <QSPI_AutoPollingMemReady>

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800126a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800126c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126e:	4413      	add	r3, r2
 8001270:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800127a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800127c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001282:	429a      	cmp	r2, r3
 8001284:	d203      	bcs.n	800128e <BSP_QSPI_Write+0xb6>
 8001286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	e001      	b.n	8001292 <BSP_QSPI_Write+0xba>
 800128e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
  }
  while (current_addr < end_addr);
 8001294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001298:	429a      	cmp	r2, r3
 800129a:	d3cc      	bcc.n	8001236 <BSP_QSPI_Write+0x5e>

}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3758      	adds	r7, #88	; 0x58
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000031c 	.word	0x2000031c

080012ac <Store_Data>:
  * @brief  Stores an amount of data to the QSPI memory.
  * @param  pData: Pointer to data to be stored
  * @param  Size: Size of data to store
 */
void Store_Data(uint8_t *pData, int Size)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	if (store==1)
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <Store_Data+0x70>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12a      	bne.n	8001314 <Store_Data+0x68>
	{

		if (Mem_pleine(Size))
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f000 fa68 	bl	8001794 <Mem_pleine>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <Store_Data+0x26>
				{
				  Erase_Subsector(Size);
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f000 fb5c 	bl	8001988 <Erase_Subsector>
 80012d0:	e003      	b.n	80012da <Store_Data+0x2e>
				}
		else
				{
				  Write_Data(pData,Size);
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fac9 	bl	800186c <Write_Data>
				}

		// Reset du compteur :
		if ((comp==compteur_final)&&(Est_Vide(Hexadecimal(comp*Size),Size)==false))
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <Store_Data+0x74>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <Store_Data+0x78>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d116      	bne.n	8001314 <Store_Data+0x68>
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <Store_Data+0x74>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f9e1 	bl	80016b8 <Hexadecimal>
 80012f6:	4602      	mov	r2, r0
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f000 f9f5 	bl	80016ec <Est_Vide>
 8001302:	4603      	mov	r3, r0
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <Store_Data+0x68>
				{
				   comp=0;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <Store_Data+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
				}
	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000361 	.word	0x20000361
 8001320:	20000004 	.word	0x20000004
 8001324:	20000000 	.word	0x20000000

08001328 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
void BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001334:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8001336:	2320      	movs	r3, #32
 8001338:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800133a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800135e:	2300      	movs	r3, #0
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  QSPI_WriteEnable(&QSPIHandle);
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <BSP_QSPI_Erase_Block+0x64>)
 8001364:	f000 f922 	bl	80015ac <QSPI_WriteEnable>

  /* Send the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <BSP_QSPI_Erase_Block+0x64>)
 8001374:	f002 f868 	bl	8003448 <HAL_QSPI_Command>

  /* Configure automatic polling mode to wait for end of erase */
  QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME);
 8001378:	f44f 7148 	mov.w	r1, #800	; 0x320
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <BSP_QSPI_Erase_Block+0x64>)
 800137e:	f000 f961 	bl	8001644 <QSPI_AutoPollingMemReady>

}
 8001382:	bf00      	nop
 8001384:	3740      	adds	r7, #64	; 0x40
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000031c 	.word	0x2000031c

08001390 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <QSPI_MspInit+0x90>)
 8001398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <QSPI_MspInit+0x90>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6513      	str	r3, [r2, #80]	; 0x50
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <QSPI_MspInit+0x90>)
 80013a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <QSPI_MspInit+0x90>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <QSPI_MspInit+0x90>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <QSPI_MspInit+0x90>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <QSPI_MspInit+0x90>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <QSPI_MspInit+0x90>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <QSPI_MspInit+0x90>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <QSPI_MspInit+0x90>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 80013de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013f0:	230a      	movs	r3, #10
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	480a      	ldr	r0, [pc, #40]	; (8001424 <QSPI_MspInit+0x94>)
 80013fc:	f001 fc88 	bl	8002d10 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8001400:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <QSPI_MspInit+0x94>)
 8001412:	f001 fc7d 	bl	8002d10 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	48001000 	.word	0x48001000

08001428 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001436:	2366      	movs	r3, #102	; 0x66
 8001438:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800144e:	2300      	movs	r3, #0
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001452:	2300      	movs	r3, #0
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <QSPI_ResetMemory+0x84>)
 8001462:	f001 fff1 	bl	8003448 <HAL_QSPI_Command>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e019      	b.n	80014a4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001470:	2399      	movs	r3, #153	; 0x99
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4619      	mov	r1, r3
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <QSPI_ResetMemory+0x84>)
 8001480:	f001 ffe2 	bl	8003448 <HAL_QSPI_Command>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00a      	b.n	80014a4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800148e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <QSPI_ResetMemory+0x84>)
 8001494:	f000 f8d6 	bl	8001644 <QSPI_AutoPollingMemReady>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000031c 	.word	0x2000031c

080014b0 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80014b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80014be:	2385      	movs	r3, #133	; 0x85
 80014c0:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80014ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014dc:	2300      	movs	r3, #0
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4619      	mov	r1, r3
 80014ee:	482e      	ldr	r0, [pc, #184]	; (80015a8 <QSPI_DummyCyclesCfg+0xf8>)
 80014f0:	f001 ffaa 	bl	8003448 <HAL_QSPI_Command>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e04f      	b.n	800159e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014fe:	f107 030b 	add.w	r3, r7, #11
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4619      	mov	r1, r3
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <QSPI_DummyCyclesCfg+0xf8>)
 800150a:	f002 f892 	bl	8003632 <HAL_QSPI_Receive>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e042      	b.n	800159e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <QSPI_DummyCyclesCfg+0xf8>)
 800151a:	f000 f847 	bl	80015ac <QSPI_WriteEnable>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e03a      	b.n	800159e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001528:	2381      	movs	r3, #129	; 0x81
 800152a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	b25a      	sxtb	r2, r3
 8001536:	23f0      	movs	r3, #240	; 0xf0
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8001546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 800154c:	2320      	movs	r3, #32
 800154e:	e003      	b.n	8001558 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8001550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	230a      	movs	r3, #10
 800155c:	408b      	lsls	r3, r1
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <QSPI_DummyCyclesCfg+0xf8>)
 8001574:	f001 ff68 	bl	8003448 <HAL_QSPI_Command>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00d      	b.n	800159e <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001582:	f107 030b 	add.w	r3, r7, #11
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <QSPI_DummyCyclesCfg+0xf8>)
 800158e:	f001 ffb9 	bl	8003504 <HAL_QSPI_Transmit>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3750      	adds	r7, #80	; 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000031c 	.word	0x2000031c

080015ac <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	; 0x58
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80015b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80015ba:	2306      	movs	r3, #6
 80015bc:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015d2:	2300      	movs	r3, #0
 80015d4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015d6:	2300      	movs	r3, #0
 80015d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4619      	mov	r1, r3
 80015e4:	4816      	ldr	r0, [pc, #88]	; (8001640 <QSPI_WriteEnable+0x94>)
 80015e6:	f001 ff2f 	bl	8003448 <HAL_QSPI_Command>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e020      	b.n	8001636 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 80015f8:	2302      	movs	r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001604:	2310      	movs	r3, #16
 8001606:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800160e:	2305      	movs	r3, #5
 8001610:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001616:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	f107 0120 	add.w	r1, r7, #32
 8001620:	f241 3388 	movw	r3, #5000	; 0x1388
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <QSPI_WriteEnable+0x94>)
 8001626:	f002 f8a6 	bl	8003776 <HAL_QSPI_AutoPolling>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3758      	adds	r7, #88	; 0x58
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000031c 	.word	0x2000031c

08001644 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001654:	2305      	movs	r3, #5
 8001656:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800166e:	2300      	movs	r3, #0
 8001670:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001672:	2300      	movs	r3, #0
 8001674:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 800167a:	2301      	movs	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001686:	2310      	movs	r3, #16
 8001688:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800168a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168e:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001690:	f107 0208 	add.w	r2, r7, #8
 8001694:	f107 0120 	add.w	r1, r7, #32
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <QSPI_AutoPollingMemReady+0x70>)
 800169c:	f002 f86b 	bl	8003776 <HAL_QSPI_AutoPolling>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3758      	adds	r7, #88	; 0x58
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000031c 	.word	0x2000031c

080016b8 <Hexadecimal>:

/**
 * convert decimal to hexadecimal
 */
 static uint32_t Hexadecimal(int nombre)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	uint32_t Adresse;
	char Hexa[10];
	sprintf(Hexa,"%x",nombre);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <Hexadecimal+0x30>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a fa51 	bl	800bb70 <siprintf>
    Adresse = strtoul(Hexa,NULL,16);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2210      	movs	r2, #16
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fa26 	bl	800cb28 <strtoul>
 80016dc:	6178      	str	r0, [r7, #20]
    return Adresse;
 80016de:	697b      	ldr	r3, [r7, #20]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	08010580 	.word	0x08010580

080016ec <Est_Vide>:

/**
 * tester si le block d'adresse ADDR est vide ou nn
 */
static bool Est_Vide(uint32_t ADDR, uint32_t Size)
{
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f0:	b087      	sub	sp, #28
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
 80016f8:	466b      	mov	r3, sp
 80016fa:	461e      	mov	r6, r3
	uint8_t buffer[Size];
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	460b      	mov	r3, r1
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	2300      	movs	r3, #0
 8001706:	4688      	mov	r8, r1
 8001708:	4699      	mov	r9, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800171a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800171e:	2300      	movs	r3, #0
 8001720:	460c      	mov	r4, r1
 8001722:	461d      	mov	r5, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	00eb      	lsls	r3, r5, #3
 800172e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001732:	00e2      	lsls	r2, r4, #3
 8001734:	1dcb      	adds	r3, r1, #7
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	ebad 0d03 	sub.w	sp, sp, r3
 800173e:	466b      	mov	r3, sp
 8001740:	3300      	adds	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
	int i=0;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
	int nb=0;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
	BSP_QSPI_Read(buffer, ADDR, Size);
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	68b8      	ldr	r0, [r7, #8]
 8001752:	f7ff fd0b 	bl	800116c <BSP_QSPI_Read>
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001756:	e005      	b.n	8001764 <Est_Vide+0x78>
		{
			 nb++;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
		     i++;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3301      	adds	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2bff      	cmp	r3, #255	; 0xff
 800176e:	d103      	bne.n	8001778 <Est_Vide+0x8c>
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8ef      	bhi.n	8001758 <Est_Vide+0x6c>
		}
	if (nb==Size)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	d101      	bne.n	8001784 <Est_Vide+0x98>
		return true;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <Est_Vide+0x9a>
	else
		return false;
 8001784:	2300      	movs	r3, #0
 8001786:	46b5      	mov	sp, r6

}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001794 <Mem_pleine>:
/**
 * Tester si la mémoire est pleine ou non
 */

 static bool Mem_pleine(int Size)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	int nb_data_per_subsector=(int)(4096/Size);
 800179c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017a6:	60bb      	str	r3, [r7, #8]
	int i=nb_data_per_subsector-1;
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 80017ae:	e003      	b.n	80017b8 <Mem_pleine+0x24>
		{
		  i = i+ nb_data_per_subsector;
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <Mem_pleine+0x70>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dc12      	bgt.n	80017e8 <Mem_pleine+0x54>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff74 	bl	80016b8 <Hexadecimal>
 80017d0:	4602      	mov	r2, r0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff ff88 	bl	80016ec <Est_Vide>
 80017dc:	4603      	mov	r3, r0
 80017de:	f083 0301 	eor.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e3      	bne.n	80017b0 <Mem_pleine+0x1c>
		}
	if (i==(compteur_final+nb_data_per_subsector))
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <Mem_pleine+0x70>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d101      	bne.n	80017fa <Mem_pleine+0x66>
		return true;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <Mem_pleine+0x68>
	else
		return false;
 80017fa:	2300      	movs	r3, #0

}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000

08001808 <inversion_hex>:

 /**
  * la fonction ci-dessous permet d'inverser tableau de caractères hexadécimale de la façon suivante : "acbe12h5" ==> "h512beac"
  */
static void inversion_hex(char hex[8], char hexinv[8])
 {
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
     int k=0;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
     for(int i=6;i>=0;i=i-2)
 8001816:	2306      	movs	r3, #6
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e018      	b.n	800184e <inversion_hex+0x46>
     {
         for(int j=i;j<i+2;j++)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e00d      	b.n	800183e <inversion_hex+0x36>
         {
             hexinv[k]=hex[j];
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	441a      	add	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	440b      	add	r3, r1
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	701a      	strb	r2, [r3, #0]
             k++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
         for(int j=i;j<i+2;j++)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	3301      	adds	r3, #1
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	ddec      	ble.n	8001822 <inversion_hex+0x1a>
     for(int i=6;i>=0;i=i-2)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3b02      	subs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dae3      	bge.n	800181c <inversion_hex+0x14>
         }
     }
     hexinv[k]='\0';
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
 }
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <Write_Data>:

/**
 * la fonction ci-dessous permet de chercher une case vide dans la mémoire puis écrire les données
 */
static void Write_Data(uint8_t *pData, int Size)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	int nb_data_per_subsector = (int)(4096/Size);
 8001876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001880:	613b      	str	r3, [r7, #16]
	uint32_t ADDR = Hexadecimal(comp*Size);
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <Write_Data+0x110>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff13 	bl	80016b8 <Hexadecimal>
 8001892:	60f8      	str	r0, [r7, #12]
	if (Est_Vide(ADDR,Size)==true)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4619      	mov	r1, r3
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff ff27 	bl	80016ec <Est_Vide>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <Write_Data+0x4c>
		{
			a=true;
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <Write_Data+0x114>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			BSP_QSPI_Write(pData, ADDR, Size);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fc91 	bl	80011d8 <BSP_QSPI_Write>
					comp = j;
				}

			}
		}
}
 80018b6:	e05c      	b.n	8001972 <Write_Data+0x106>
			if ((comp%nb_data_per_subsector == 0)&&(a==false))
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <Write_Data+0x110>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	fb93 f2f2 	sdiv	r2, r3, r2
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	fb01 f202 	mul.w	r2, r1, r2
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d151      	bne.n	8001972 <Write_Data+0x106>
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <Write_Data+0x114>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d04a      	beq.n	8001972 <Write_Data+0x106>
				if ((Est_Vide(Hexadecimal((comp+(nb_data_per_subsector-1))*Size),Size)==false)&&((comp+(nb_data_per_subsector-1)) < compteur_final))
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <Write_Data+0x110>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fee3 	bl	80016b8 <Hexadecimal>
 80018f2:	4602      	mov	r2, r0
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff fef7 	bl	80016ec <Est_Vide>
 80018fe:	4603      	mov	r3, r0
 8001900:	f083 0301 	eor.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00f      	beq.n	800192a <Write_Data+0xbe>
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <Write_Data+0x110>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	441a      	add	r2, r3
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <Write_Data+0x118>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	da06      	bge.n	800192a <Write_Data+0xbe>
					comp = comp + nb_data_per_subsector;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <Write_Data+0x110>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4413      	add	r3, r2
 8001924:	4a15      	ldr	r2, [pc, #84]	; (800197c <Write_Data+0x110>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	e023      	b.n	8001972 <Write_Data+0x106>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <Write_Data+0x110>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e012      	b.n	800195a <Write_Data+0xee>
						  if (Est_Vide(Hexadecimal(j*Size),Size))
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff febb 	bl	80016b8 <Hexadecimal>
 8001942:	4602      	mov	r2, r0
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fecf 	bl	80016ec <Est_Vide>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <Write_Data+0xfe>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <Write_Data+0x110>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbe5      	blt.n	8001934 <Write_Data+0xc8>
 8001968:	e000      	b.n	800196c <Write_Data+0x100>
						  break;
 800196a:	bf00      	nop
					comp = j;
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <Write_Data+0x110>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000004 	.word	0x20000004
 8001980:	20000360 	.word	0x20000360
 8001984:	20000000 	.word	0x20000000

08001988 <Erase_Subsector>:
/**
 * la fonction ci dessous permet d'effacer un subsector de la mémoire de façon circulaire
 */
static void Erase_Subsector(int Size)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]

	    int nb_data_per_subsector = (int)(4096/Size); // = 256
 8001990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	fb92 f3f3 	sdiv	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
	    uint8_t buff1[4], buff2[4];
	    BSP_QSPI_Read(buff1,0,4);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2204      	movs	r2, #4
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fbe1 	bl	800116c <BSP_QSPI_Read>
	    sprintf(hex, "%02x%02x%02x%02x", buff1[0], buff1[1], buff1[2], buff1[3]);
 80019aa:	7c3b      	ldrb	r3, [r7, #16]
 80019ac:	4619      	mov	r1, r3
 80019ae:	7c7b      	ldrb	r3, [r7, #17]
 80019b0:	4618      	mov	r0, r3
 80019b2:	7cbb      	ldrb	r3, [r7, #18]
 80019b4:	7cfa      	ldrb	r2, [r7, #19]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <Erase_Subsector+0x100>)
 80019c0:	4832      	ldr	r0, [pc, #200]	; (8001a8c <Erase_Subsector+0x104>)
 80019c2:	f00a f8d5 	bl	800bb70 <siprintf>
	    inversion_hex(hex,hexinv);
 80019c6:	4932      	ldr	r1, [pc, #200]	; (8001a90 <Erase_Subsector+0x108>)
 80019c8:	4830      	ldr	r0, [pc, #192]	; (8001a8c <Erase_Subsector+0x104>)
 80019ca:	f7ff ff1d 	bl	8001808 <inversion_hex>
	    value = strtoul(hexinv,NULL,16);
 80019ce:	2210      	movs	r2, #16
 80019d0:	2100      	movs	r1, #0
 80019d2:	482f      	ldr	r0, [pc, #188]	; (8001a90 <Erase_Subsector+0x108>)
 80019d4:	f00b f8a8 	bl	800cb28 <strtoul>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <Erase_Subsector+0x10c>)
 80019dc:	6013      	str	r3, [r2, #0]
	    min = value;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <Erase_Subsector+0x10c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <Erase_Subsector+0x110>)
 80019e4:	6013      	str	r3, [r2, #0]
	    int j;
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	e035      	b.n	8001a58 <Erase_Subsector+0xd0>
	      	     {
	      	    	 BSP_QSPI_Read(buff2,Hexadecimal(i*16),4);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fe61 	bl	80016b8 <Hexadecimal>
 80019f6:	4601      	mov	r1, r0
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2204      	movs	r2, #4
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fbb4 	bl	800116c <BSP_QSPI_Read>
	      	         sprintf(hex2, "%02x%02x%02x%02x", buff2[0], buff2[1], buff2[2], buff2[3]);
 8001a04:	7b3b      	ldrb	r3, [r7, #12]
 8001a06:	4619      	mov	r1, r3
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	460a      	mov	r2, r1
 8001a18:	491b      	ldr	r1, [pc, #108]	; (8001a88 <Erase_Subsector+0x100>)
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <Erase_Subsector+0x114>)
 8001a1c:	f00a f8a8 	bl	800bb70 <siprintf>
	      	         inversion_hex(hex2,hex2inv);
 8001a20:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <Erase_Subsector+0x118>)
 8001a22:	481e      	ldr	r0, [pc, #120]	; (8001a9c <Erase_Subsector+0x114>)
 8001a24:	f7ff fef0 	bl	8001808 <inversion_hex>
	      	         value2 = strtoul(hex2inv,NULL,16);
 8001a28:	2210      	movs	r2, #16
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <Erase_Subsector+0x118>)
 8001a2e:	f00b f87b 	bl	800cb28 <strtoul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <Erase_Subsector+0x11c>)
 8001a36:	6013      	str	r3, [r2, #0]
	      	         if (value2 <= min)
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <Erase_Subsector+0x11c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <Erase_Subsector+0x110>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d805      	bhi.n	8001a50 <Erase_Subsector+0xc8>
	      	         {
	      	             min = value2;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <Erase_Subsector+0x11c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <Erase_Subsector+0x110>)
 8001a4a:	6013      	str	r3, [r2, #0]
	      	             j=i;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	61fb      	str	r3, [r7, #28]
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4413      	add	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <Erase_Subsector+0x120>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3bfe      	subs	r3, #254	; 0xfe
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbc3      	blt.n	80019ec <Erase_Subsector+0x64>
	      	         }
	      	     }
	    BSP_QSPI_Erase_Block(Hexadecimal(j*Size));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe23 	bl	80016b8 <Hexadecimal>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc57 	bl	8001328 <BSP_QSPI_Erase_Block>
	    comp= j;
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <Erase_Subsector+0x124>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	6013      	str	r3, [r2, #0]

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08010584 	.word	0x08010584
 8001a8c:	20000364 	.word	0x20000364
 8001a90:	20000370 	.word	0x20000370
 8001a94:	20000398 	.word	0x20000398
 8001a98:	20000394 	.word	0x20000394
 8001a9c:	2000037c 	.word	0x2000037c
 8001aa0:	20000388 	.word	0x20000388
 8001aa4:	2000039c 	.word	0x2000039c
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_UART_TxCpltCallback>:
/**
 * la fonction ci-dessous est appellé lorsqu'une donnée est prète à stocker dans la mémoire
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	store=1;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_UART_TxCpltCallback+0x24>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
	comp++;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_UART_TxCpltCallback+0x28>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_UART_TxCpltCallback+0x28>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20000361 	.word	0x20000361
 8001ad8:	20000004 	.word	0x20000004

08001adc <Get_Data>:


/* Exported Functions -----------------------------------------------------------------------------*/

void Get_Data(uint8_t buffer[13],uint8_t buff[13])
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]

	if (Flag != 0)
 8001ae6:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <Get_Data+0x114>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d07c      	beq.n	8001be8 <Get_Data+0x10c>
	  {

		// Extraction de la ligne GPRMC
		indice=0;
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <Get_Data+0x118>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)Rxdata);
 8001af4:	4940      	ldr	r1, [pc, #256]	; (8001bf8 <Get_Data+0x11c>)
 8001af6:	4841      	ldr	r0, [pc, #260]	; (8001bfc <Get_Data+0x120>)
 8001af8:	f00a f8d8 	bl	800bcac <strcpy>
		p= strstr(Txdata,"GPRMC");
 8001afc:	4940      	ldr	r1, [pc, #256]	; (8001c00 <Get_Data+0x124>)
 8001afe:	483f      	ldr	r0, [pc, #252]	; (8001bfc <Get_Data+0x120>)
 8001b00:	f00a f8dc 	bl	800bcbc <strstr>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <Get_Data+0x128>)
 8001b08:	6013      	str	r3, [r2, #0]
		// chercher l'indice de '\n'(retour à la ligne) dans la ligne de GPRMC
		x = strchr(p, '\n');
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <Get_Data+0x128>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	210a      	movs	r1, #10
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00a f8be 	bl	800bc92 <strchr>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <Get_Data+0x12c>)
 8001b1a:	6013      	str	r3, [r2, #0]
		ind = x - p;
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <Get_Data+0x12c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <Get_Data+0x128>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <Get_Data+0x130>)
 8001b28:	6013      	str	r3, [r2, #0]
		// continuer l'extraction
		if (*p == 'G')
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <Get_Data+0x128>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b47      	cmp	r3, #71	; 0x47
 8001b32:	d159      	bne.n	8001be8 <Get_Data+0x10c>
		 {
			for( indice =0;indice<=ind;indice++)
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <Get_Data+0x118>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e014      	b.n	8001b66 <Get_Data+0x8a>
			        {

				     	 Ligne_GPRMC[indice]=*p;
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <Get_Data+0x128>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <Get_Data+0x118>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	7811      	ldrb	r1, [r2, #0]
 8001b46:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <Get_Data+0x134>)
 8001b48:	54d1      	strb	r1, [r2, r3]
				     	 *p=*(p+indice);
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <Get_Data+0x128>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <Get_Data+0x118>)
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	441a      	add	r2, r3
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <Get_Data+0x128>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
			for( indice =0;indice<=ind;indice++)
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <Get_Data+0x118>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <Get_Data+0x118>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <Get_Data+0x118>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <Get_Data+0x130>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dde4      	ble.n	8001b3c <Get_Data+0x60>

			        }

			Ligne_GPRMC[indice]= '\0';
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <Get_Data+0x118>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <Get_Data+0x134>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	54d1      	strb	r1, [r2, r3]
		  // Extraction de chaque information dans la ligne
		  HAL_UART_Transmit(&huart2, (uint8_t*)Ligne_GPRMC, sizeof(Ligne_GPRMC), 100);
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	226e      	movs	r2, #110	; 0x6e
 8001b80:	4923      	ldr	r1, [pc, #140]	; (8001c10 <Get_Data+0x134>)
 8001b82:	4824      	ldr	r0, [pc, #144]	; (8001c14 <Get_Data+0x138>)
 8001b84:	f003 fec0 	bl	8005908 <HAL_UART_Transmit>
		  sscanf(Ligne_GPRMC,"GGPRMC,%f,A,%f,N,%f,E,%f,,%d",&Temps,&Latitude,&Longitude,&Vitesse,&Date);
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <Get_Data+0x13c>)
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <Get_Data+0x140>)
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <Get_Data+0x144>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <Get_Data+0x148>)
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <Get_Data+0x14c>)
 8001b98:	4924      	ldr	r1, [pc, #144]	; (8001c2c <Get_Data+0x150>)
 8001b9a:	481d      	ldr	r0, [pc, #116]	; (8001c10 <Get_Data+0x134>)
 8001b9c:	f00a f808 	bl	800bbb0 <siscanf>

          HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), 50);
 8001ba0:	2332      	movs	r3, #50	; 0x32
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4922      	ldr	r1, [pc, #136]	; (8001c30 <Get_Data+0x154>)
 8001ba6:	481b      	ldr	r0, [pc, #108]	; (8001c14 <Get_Data+0x138>)
 8001ba8:	f003 feae 	bl	8005908 <HAL_UART_Transmit>
		  // Format des données
		  Format_data(Date, Temps, Latitude, Longitude, Vitesse,buffer,buff);
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <Get_Data+0x13c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <Get_Data+0x14c>)
 8001bb2:	edd2 7a00 	vldr	s15, [r2]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <Get_Data+0x148>)
 8001bb8:	ed92 7a00 	vldr	s14, [r2]
 8001bbc:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <Get_Data+0x144>)
 8001bbe:	edd2 6a00 	vldr	s13, [r2]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <Get_Data+0x140>)
 8001bc4:	ed92 6a00 	vldr	s12, [r2]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	eef0 1a46 	vmov.f32	s3, s12
 8001bd0:	eeb0 1a66 	vmov.f32	s2, s13
 8001bd4:	eef0 0a47 	vmov.f32	s1, s14
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f85f 	bl	8001ca0 <Format_data>
		  Flag=0;
 8001be2:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <Get_Data+0x114>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]

		}
	  }
	//return (uint8_t *)buff;
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000af6 	.word	0x20000af6
 8001bf4:	20000af8 	.word	0x20000af8
 8001bf8:	200004a8 	.word	0x200004a8
 8001bfc:	20000798 	.word	0x20000798
 8001c00:	08010598 	.word	0x08010598
 8001c04:	20000afc 	.word	0x20000afc
 8001c08:	20000b30 	.word	0x20000b30
 8001c0c:	20000b34 	.word	0x20000b34
 8001c10:	20000a88 	.word	0x20000a88
 8001c14:	20000424 	.word	0x20000424
 8001c18:	20000b10 	.word	0x20000b10
 8001c1c:	20000b0c 	.word	0x20000b0c
 8001c20:	20000b04 	.word	0x20000b04
 8001c24:	20000b08 	.word	0x20000b08
 8001c28:	20000b00 	.word	0x20000b00
 8001c2c:	080105a0 	.word	0x080105a0
 8001c30:	080105c0 	.word	0x080105c0

08001c34 <GPS_Init>:

void GPS_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <GPS_Init+0x5c>)
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <GPS_Init+0x60>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <GPS_Init+0x5c>)
 8001c40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <GPS_Init+0x5c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <GPS_Init+0x5c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <GPS_Init+0x5c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <GPS_Init+0x5c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <GPS_Init+0x5c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <GPS_Init+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <GPS_Init+0x5c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <GPS_Init+0x5c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart4);
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <GPS_Init+0x5c>)
 8001c78:	f003 fdf8 	bl	800586c <HAL_UART_Init>

  USART2_UART_Init();
 8001c7c:	f000 f992 	bl	8001fa4 <USART2_UART_Init>
  HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 8001c80:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <GPS_Init+0x64>)
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <GPS_Init+0x5c>)
 8001c88:	f003 ff40 	bl	8005b0c <HAL_UART_Receive_IT>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200003a0 	.word	0x200003a0
 8001c94:	40004c00 	.word	0x40004c00
 8001c98:	200004a8 	.word	0x200004a8
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <Format_data>:

/* Private Functions --------------------------------------------------------------------------*/

static void Format_data(int Date, float Temps, float Latitude, float Longitude, float Vitesse,uint8_t buffer[13],uint8_t buff[13])
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b090      	sub	sp, #64	; 0x40
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	61f8      	str	r0, [r7, #28]
 8001ca8:	ed87 0a06 	vstr	s0, [r7, #24]
 8001cac:	edc7 0a05 	vstr	s1, [r7, #20]
 8001cb0:	ed87 1a04 	vstr	s2, [r7, #16]
 8001cb4:	edc7 1a03 	vstr	s3, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  // Date  :  ddmmaa ==> dd/mm/aa

  Jour = (int)(Date/10000);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	; (8001ec0 <Format_data+0x220>)
 8001cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc4:	1312      	asrs	r2, r2, #12
 8001cc6:	17db      	asrs	r3, r3, #31
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <Format_data+0x224>)
 8001ccc:	6013      	str	r3, [r2, #0]
  Mois = (int)((Date-(Jour*10000))/100);
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <Format_data+0x224>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7d      	ldr	r2, [pc, #500]	; (8001ec8 <Format_data+0x228>)
 8001cd4:	fb03 f202 	mul.w	r2, r3, r2
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a7b      	ldr	r2, [pc, #492]	; (8001ecc <Format_data+0x22c>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	1152      	asrs	r2, r2, #5
 8001ce4:	17db      	asrs	r3, r3, #31
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a79      	ldr	r2, [pc, #484]	; (8001ed0 <Format_data+0x230>)
 8001cea:	6013      	str	r3, [r2, #0]
  Annee = (int)(Date-((Jour*10000)+(Mois*100)));
 8001cec:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <Format_data+0x224>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cf4:	fb03 f202 	mul.w	r2, r3, r2
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <Format_data+0x230>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2164      	movs	r1, #100	; 0x64
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <Format_data+0x234>)
 8001d0a:	6013      	str	r3, [r2, #0]

  // Temps :  hhmmss ==> hh:mm:ss
  Heures = (int)(Temps/10000);
 8001d0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d10:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001ed8 <Format_data+0x238>
 8001d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1c:	ee17 2a90 	vmov	r2, s15
 8001d20:	4b6e      	ldr	r3, [pc, #440]	; (8001edc <Format_data+0x23c>)
 8001d22:	601a      	str	r2, [r3, #0]
  Minutes = (int)((Temps-(Heures*10000))/100);
 8001d24:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <Format_data+0x23c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d40:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001ee0 <Format_data+0x240>
 8001d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4c:	ee17 2a90 	vmov	r2, s15
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <Format_data+0x244>)
 8001d52:	601a      	str	r2, [r3, #0]
  Secondes = (int)(Temps-((Heures*10000)+(Minutes*100)));
 8001d54:	4b61      	ldr	r3, [pc, #388]	; (8001edc <Format_data+0x23c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d5c:	fb03 f202 	mul.w	r2, r3, r2
 8001d60:	4b60      	ldr	r3, [pc, #384]	; (8001ee4 <Format_data+0x244>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2164      	movs	r1, #100	; 0x64
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d80:	ee17 2a90 	vmov	r2, s15
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <Format_data+0x248>)
 8001d86:	601a      	str	r2, [r3, #0]

  // Timestamp :

  Epoch_Time = Get_Epoch_Time(Jour,Mois,2000+Annee,Heures,Minutes,Secondes);
 8001d88:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <Format_data+0x224>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <Format_data+0x230>)
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <Format_data+0x234>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <Format_data+0x23c>)
 8001d9a:	681d      	ldr	r5, [r3, #0]
 8001d9c:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <Format_data+0x244>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <Format_data+0x248>)
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	462b      	mov	r3, r5
 8001daa:	4622      	mov	r2, r4
 8001dac:	f000 f8a6 	bl	8001efc <Get_Epoch_Time>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a4e      	ldr	r2, [pc, #312]	; (8001eec <Format_data+0x24c>)
 8001db4:	6013      	str	r3, [r2, #0]

  // Vitesse :  vitesse en noeuds ==> vitesse en km/h
  Vitesse = Vitesse * 1.852;
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe fbd6 	bl	8000568 <__aeabi_f2d>
 8001dbc:	a33e      	add	r3, pc, #248	; (adr r3, 8001eb8 <Format_data+0x218>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc29 	bl	8000618 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff1b 	bl	8000c08 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]

  // Latitude : ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_lat = (int)(Latitude/100);
 8001dd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dda:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001ee0 <Format_data+0x240>
 8001dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de6:	ee17 3a90 	vmov	r3, s15
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  Latitude = degre_lat + ((Latitude- (degre_lat*100))/60);
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	2264      	movs	r2, #100	; 0x64
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e0e:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8001ef0 <Format_data+0x250>
 8001e12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1a:	edc7 7a05 	vstr	s15, [r7, #20]

  // Longitude :   ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_long = (int)(Longitude/100);
 8001e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e22:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001ee0 <Format_data+0x240>
 8001e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	ee17 3a90 	vmov	r3, s15
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  Longitude = degre_long + ((Longitude- (degre_long*100))/60);
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	2264      	movs	r2, #100	; 0x64
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e56:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001ef0 <Format_data+0x250>
 8001e5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	edc7 7a04 	vstr	s15, [r7, #16]


	  Data_from_GPS mydata = {
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <Format_data+0x24c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7c:	edc7 7a00 	vstr	s15, [r7]
 8001e80:	783b      	ldrb	r3, [r7, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		  .longitude= Longitude,
		  .speed= Vitesse,
	  };


  memcpy(buffer, &mydata, sizeof(mydata));
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	461c      	mov	r4, r3
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e92:	6020      	str	r0, [r4, #0]
 8001e94:	6061      	str	r1, [r4, #4]
 8001e96:	60a2      	str	r2, [r4, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	7323      	strb	r3, [r4, #12]
  Inversion(buffer,buff);
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f000 f84f 	bl	8001f42 <Inversion>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"==> Ready to store\r\n",22);
 8001ea4:	2216      	movs	r2, #22
 8001ea6:	4913      	ldr	r1, [pc, #76]	; (8001ef4 <Format_data+0x254>)
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <Format_data+0x258>)
 8001eaa:	f003 fdc1 	bl	8005a30 <HAL_UART_Transmit_IT>

}
 8001eae:	bf00      	nop
 8001eb0:	3738      	adds	r7, #56	; 0x38
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	c083126f 	.word	0xc083126f
 8001ebc:	3ffda1ca 	.word	0x3ffda1ca
 8001ec0:	68db8bad 	.word	0x68db8bad
 8001ec4:	20000b14 	.word	0x20000b14
 8001ec8:	ffffd8f0 	.word	0xffffd8f0
 8001ecc:	51eb851f 	.word	0x51eb851f
 8001ed0:	20000b18 	.word	0x20000b18
 8001ed4:	20000b1c 	.word	0x20000b1c
 8001ed8:	461c4000 	.word	0x461c4000
 8001edc:	20000b20 	.word	0x20000b20
 8001ee0:	42c80000 	.word	0x42c80000
 8001ee4:	20000b24 	.word	0x20000b24
 8001ee8:	20000b28 	.word	0x20000b28
 8001eec:	20000b2c 	.word	0x20000b2c
 8001ef0:	42700000 	.word	0x42700000
 8001ef4:	080105c4 	.word	0x080105c4
 8001ef8:	20000424 	.word	0x20000424

08001efc <Get_Epoch_Time>:

/**
 * la fonction ci-dessous a pour but de convertir date et temps en une valeur en secondes (epoch_time)
 */
static uint32_t Get_Epoch_Time(int jour,int mois,int annee,int heures,int minutes,int secondes)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b090      	sub	sp, #64	; 0x40
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
	    struct tm t;
	    time_t t_of_day;

	    t.tm_year = annee-1900;  // Year - 1900
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
	    t.tm_mon = mois-1;           // Month, where 0 = jan
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
	    t.tm_mday = jour;          // Day of the month
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	623b      	str	r3, [r7, #32]
	    t.tm_hour = heures+1;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
	    t.tm_min = minutes;
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	61bb      	str	r3, [r7, #24]
	    t.tm_sec = secondes;
 8001f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f28:	617b      	str	r3, [r7, #20]
	    t_of_day = mktime(&t);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f008 fe04 	bl	800ab3c <mktime>
 8001f34:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	    return (t_of_day);
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3740      	adds	r7, #64	; 0x40
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <Inversion>:

/**
 * la fonction ci-dessous a pour but d'inverser le contenu d'un buffer de la façon suivante : "abcdefghijklp" ==> "dcbahgfelkjip"
 */
static void Inversion(uint8_t buffer[13],uint8_t buff[13])
{
 8001f42:	b480      	push	{r7}
 8001f44:	b087      	sub	sp, #28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
	int k =0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
	  for (int i=0; i<=8; i=i+4)
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e018      	b.n	8001f88 <Inversion+0x46>
	  {
	      for (int j =i+3; j>=i;j--)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	3303      	adds	r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e00d      	b.n	8001f7a <Inversion+0x38>
	      {
	          buff[k]=buffer[j];
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	441a      	add	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	440b      	add	r3, r1
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	701a      	strb	r2, [r3, #0]
	          k++;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
	      for (int j =i+3; j>=i;j--)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	daed      	bge.n	8001f5e <Inversion+0x1c>
	  for (int i=0; i<=8; i=i+4)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	3304      	adds	r3, #4
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	dde3      	ble.n	8001f56 <Inversion+0x14>
	      }
	  }

	  buff[12]=buffer[12];
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	7b12      	ldrb	r2, [r2, #12]
 8001f96:	701a      	strb	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <USART2_UART_Init>:

/**
 * la fonction ci-dessous permet d'initialiser l'usart2 de STLINK pour afficher des messages
 */
static void USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8001fe6:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <USART2_UART_Init+0x4c>)
 8001fe8:	f003 fc40 	bl	800586c <HAL_UART_Init>

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000424 	.word	0x20000424
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <HAL_UART_RxCpltCallback>:

/**
 * la fonction ci-dessous est appellé après la réception de chaque donnée du module GPS
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  Flag=1;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_UART_RxCpltCallback+0x24>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 8002006:	f240 22ee 	movw	r2, #750	; 0x2ee
 800200a:	4905      	ldr	r1, [pc, #20]	; (8002020 <HAL_UART_RxCpltCallback+0x28>)
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <HAL_UART_RxCpltCallback+0x2c>)
 800200e:	f003 fd7d 	bl	8005b0c <HAL_UART_Receive_IT>

}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000af6 	.word	0x20000af6
 8002020:	200004a8 	.word	0x200004a8
 8002024:	200003a0 	.word	0x200003a0

08002028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800202c:	f000 fcd5 	bl	80029da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002030:	f000 f874 	bl	800211c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  GPIO_Init();
 8002034:	f000 f8c4 	bl	80021c0 <GPIO_Init>
  BLE_Init();
 8002038:	f7ff f84c 	bl	80010d4 <BLE_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800203c:	f7ff fdfa 	bl	8001c34 <GPS_Init>
  Memory_Init();
 8002040:	f7ff f850 	bl	80010e4 <Memory_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002044:	f005 f8f0 	bl	8007228 <osKernelInitialize>

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <main+0xa8>)
 800204a:	2100      	movs	r1, #0
 800204c:	2001      	movs	r0, #1
 800204e:	f005 f9c7 	bl	80073e0 <osSemaphoreNew>
 8002052:	4603      	mov	r3, r0
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <main+0xac>)
 8002056:	6013      	str	r3, [r2, #0]

  /* creation of semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <main+0xb0>)
 800205a:	2100      	movs	r1, #0
 800205c:	2001      	movs	r0, #1
 800205e:	f005 f9bf 	bl	80073e0 <osSemaphoreNew>
 8002062:	4603      	mov	r3, r0
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <main+0xb4>)
 8002066:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore3 */
  Semaphore3Handle = osSemaphoreNew(1, 1, &Semaphore3_attributes);
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <main+0xb8>)
 800206a:	2101      	movs	r1, #1
 800206c:	2001      	movs	r0, #1
 800206e:	f005 f9b7 	bl	80073e0 <osSemaphoreNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <main+0xbc>)
 8002076:	6013      	str	r3, [r2, #0]



  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (13, sizeof(uint8_t), &myQueue01_attributes);
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <main+0xc0>)
 800207a:	2101      	movs	r1, #1
 800207c:	200d      	movs	r0, #13
 800207e:	f005 facf 	bl	8007620 <osMessageQueueNew>
 8002082:	4603      	mov	r3, r0
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <main+0xc4>)
 8002086:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (13, sizeof(uint8_t), &myQueue02_attributes);
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <main+0xc8>)
 800208a:	2101      	movs	r1, #1
 800208c:	200d      	movs	r0, #13
 800208e:	f005 fac7 	bl	8007620 <osMessageQueueNew>
 8002092:	4603      	mov	r3, r0
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <main+0xcc>)
 8002096:	6013      	str	r3, [r2, #0]


  /* Create the thread(s) */
  /* creation of GPS_Get_Data */
  GPS_Get_DataHandle = osThreadNew(StartGPS_Get_Data, NULL, &GPS_Get_Data_attributes);
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <main+0xd0>)
 800209a:	2100      	movs	r1, #0
 800209c:	4817      	ldr	r0, [pc, #92]	; (80020fc <main+0xd4>)
 800209e:	f005 f90d 	bl	80072bc <osThreadNew>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <main+0xd8>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* creation of Mem_Store_Data */
  Mem_Store_DataHandle = osThreadNew(StartMem_Store_Data, NULL, &Mem_Store_Data_attributes);
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <main+0xdc>)
 80020aa:	2100      	movs	r1, #0
 80020ac:	4816      	ldr	r0, [pc, #88]	; (8002108 <main+0xe0>)
 80020ae:	f005 f905 	bl	80072bc <osThreadNew>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <main+0xe4>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* creation of BLE_Send_Data */
  BLE_Send_DataHandle = osThreadNew(StartBLE_Send_Data, NULL, &BLE_Send_Data_attributes);
 80020b8:	4a15      	ldr	r2, [pc, #84]	; (8002110 <main+0xe8>)
 80020ba:	2100      	movs	r1, #0
 80020bc:	4815      	ldr	r0, [pc, #84]	; (8002114 <main+0xec>)
 80020be:	f005 f8fd 	bl	80072bc <osThreadNew>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <main+0xf0>)
 80020c6:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80020c8:	f005 f8d2 	bl	8007270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <main+0xa4>
 80020ce:	bf00      	nop
 80020d0:	08010708 	.word	0x08010708
 80020d4:	20000b4c 	.word	0x20000b4c
 80020d8:	08010718 	.word	0x08010718
 80020dc:	20000b50 	.word	0x20000b50
 80020e0:	08010728 	.word	0x08010728
 80020e4:	20000b54 	.word	0x20000b54
 80020e8:	080106d8 	.word	0x080106d8
 80020ec:	20000b44 	.word	0x20000b44
 80020f0:	080106f0 	.word	0x080106f0
 80020f4:	20000b48 	.word	0x20000b48
 80020f8:	0801066c 	.word	0x0801066c
 80020fc:	08002251 	.word	0x08002251
 8002100:	20000b38 	.word	0x20000b38
 8002104:	08010690 	.word	0x08010690
 8002108:	080022c9 	.word	0x080022c9
 800210c:	20000b3c 	.word	0x20000b3c
 8002110:	080106b4 	.word	0x080106b4
 8002114:	08002335 	.word	0x08002335
 8002118:	20000b40 	.word	0x20000b40

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b096      	sub	sp, #88	; 0x58
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2244      	movs	r2, #68	; 0x44
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f008 fc26 	bl	800a97c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800213e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002142:	f001 f891 	bl	8003268 <HAL_PWREx_ControlVoltageScaling>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800214c:	f000 f934 	bl	80023b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002150:	2310      	movs	r3, #16
 8002152:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002154:	2301      	movs	r3, #1
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800215c:	2360      	movs	r3, #96	; 0x60
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002160:	2302      	movs	r3, #2
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002164:	2301      	movs	r3, #1
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800216c:	2328      	movs	r3, #40	; 0x28
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002170:	2307      	movs	r3, #7
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002174:	2302      	movs	r3, #2
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002178:	2302      	movs	r3, #2
 800217a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f001 fdb3 	bl	8003cec <HAL_RCC_OscConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800218c:	f000 f914 	bl	80023b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002190:	230f      	movs	r3, #15
 8002192:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002194:	2303      	movs	r3, #3
 8002196:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2104      	movs	r1, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 f97b 	bl	80044a4 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021b4:	f000 f900 	bl	80023b8 <Error_Handler>
  }
}
 80021b8:	bf00      	nop
 80021ba:	3758      	adds	r7, #88	; 0x58
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void GPIO_Init(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <GPIO_Init+0x8c>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <GPIO_Init+0x8c>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <GPIO_Init+0x8c>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <GPIO_Init+0x8c>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <GPIO_Init+0x8c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <GPIO_Init+0x8c>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <GPIO_Init+0x8c>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <GPIO_Init+0x8c>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <GPIO_Init+0x8c>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <GPIO_Init+0x8c>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <GPIO_Init+0x8c>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <GPIO_Init+0x8c>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <GPIO_Init+0x8c>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <GPIO_Init+0x8c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <GPIO_Init+0x8c>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000

08002250 <StartGPS_Get_Data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS_Get_Data */
void StartGPS_Get_Data(void *argument)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <StartGPS_Get_Data+0x60>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	4618      	mov	r0, r3
 8002262:	f005 f947 	bl	80074f4 <osSemaphoreAcquire>

	  Get_Data(GPS_Data, BLE_Data);
 8002266:	4913      	ldr	r1, [pc, #76]	; (80022b4 <StartGPS_Get_Data+0x64>)
 8002268:	4813      	ldr	r0, [pc, #76]	; (80022b8 <StartGPS_Get_Data+0x68>)
 800226a:	f7ff fc37 	bl	8001adc <Get_Data>
	  for (int j=0;j<13;j++)
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e014      	b.n	800229e <StartGPS_Get_Data+0x4e>

		  {
		    osMessageQueuePut(myQueue01Handle, &(GPS_Data[j]), sizeof(GPS_Data[j]), 100);
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <StartGPS_Get_Data+0x6c>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <StartGPS_Get_Data+0x68>)
 800227c:	1899      	adds	r1, r3, r2
 800227e:	2364      	movs	r3, #100	; 0x64
 8002280:	2201      	movs	r2, #1
 8002282:	f005 fa41 	bl	8007708 <osMessageQueuePut>
		    osMessageQueuePut(myQueue02Handle, &(BLE_Data[j]), sizeof(BLE_Data[j]), 100);
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <StartGPS_Get_Data+0x70>)
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <StartGPS_Get_Data+0x64>)
 800228e:	1899      	adds	r1, r3, r2
 8002290:	2364      	movs	r3, #100	; 0x64
 8002292:	2201      	movs	r2, #1
 8002294:	f005 fa38 	bl	8007708 <osMessageQueuePut>
	  for (int j=0;j<13;j++)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	dde7      	ble.n	8002274 <StartGPS_Get_Data+0x24>
		  }

	  osSemaphoreRelease(Semaphore1Handle);
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <StartGPS_Get_Data+0x74>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 f975 	bl	8007598 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 80022ae:	e7d3      	b.n	8002258 <StartGPS_Get_Data+0x8>
 80022b0:	20000b54 	.word	0x20000b54
 80022b4:	20000b68 	.word	0x20000b68
 80022b8:	20000b58 	.word	0x20000b58
 80022bc:	20000b44 	.word	0x20000b44
 80022c0:	20000b48 	.word	0x20000b48
 80022c4:	20000b4c 	.word	0x20000b4c

080022c8 <StartMem_Store_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMem_Store_Data */
void StartMem_Store_Data(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMem_Store_Data */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <StartMem_Store_Data+0x54>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 f90b 	bl	80074f4 <osSemaphoreAcquire>

	  for (int k=0;k<13;k++)
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e00b      	b.n	80022fc <StartMem_Store_Data+0x34>

	  		  {
	  		    osMessageQueueGet(myQueue01Handle, &(buffer[k]), &size, 100);
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <StartMem_Store_Data+0x58>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <StartMem_Store_Data+0x5c>)
 80022ec:	1899      	adds	r1, r3, r2
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <StartMem_Store_Data+0x60>)
 80022f2:	f005 fa69 	bl	80077c8 <osMessageQueueGet>
	  for (int k=0;k<13;k++)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	ddf0      	ble.n	80022e4 <StartMem_Store_Data+0x1c>
	  		  }

	  Store_Data(buffer,Data_size);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <StartMem_Store_Data+0x64>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <StartMem_Store_Data+0x5c>)
 800230a:	f7fe ffcf 	bl	80012ac <Store_Data>

	  osSemaphoreRelease(Semaphore2Handle);
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <StartMem_Store_Data+0x68>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f005 f940 	bl	8007598 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002318:	e7da      	b.n	80022d0 <StartMem_Store_Data+0x8>
 800231a:	bf00      	nop
 800231c:	20000b4c 	.word	0x20000b4c
 8002320:	20000b44 	.word	0x20000b44
 8002324:	20000b78 	.word	0x20000b78
 8002328:	20000b95 	.word	0x20000b95
 800232c:	20000008 	.word	0x20000008
 8002330:	20000b50 	.word	0x20000b50

08002334 <StartBLE_Send_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBLE_Send_Data */
void StartBLE_Send_Data(void *argument)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBLE_Send_Data */
  /* Infinite loop */
  for(;;)
  {
	      osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <StartBLE_Send_Data+0x4c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	4618      	mov	r0, r3
 8002346:	f005 f8d5 	bl	80074f4 <osSemaphoreAcquire>

	      for (int l=0;l<13;l++)
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e00b      	b.n	8002368 <StartBLE_Send_Data+0x34>

	  	  		  {
	  	  		    osMessageQueueGet(myQueue02Handle, &(buffer2[l]), &size, 100);
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <StartBLE_Send_Data+0x50>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <StartBLE_Send_Data+0x54>)
 8002358:	1899      	adds	r1, r3, r2
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <StartBLE_Send_Data+0x58>)
 800235e:	f005 fa33 	bl	80077c8 <osMessageQueueGet>
	      for (int l=0;l<13;l++)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	ddf0      	ble.n	8002350 <StartBLE_Send_Data+0x1c>
	  	  		  }

	  	  send_data(buffer2);
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <StartBLE_Send_Data+0x54>)
 8002370:	f7fe fe52 	bl	8001018 <send_data>

	  	  osSemaphoreRelease(Semaphore3Handle);
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <StartBLE_Send_Data+0x5c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f005 f90d 	bl	8007598 <osSemaphoreRelease>
	      osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 800237e:	e7dd      	b.n	800233c <StartBLE_Send_Data+0x8>
 8002380:	20000b50 	.word	0x20000b50
 8002384:	20000b48 	.word	0x20000b48
 8002388:	20000b88 	.word	0x20000b88
 800238c:	20000b95 	.word	0x20000b95
 8002390:	20000b54 	.word	0x20000b54

08002394 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023a6:	f000 fb31 	bl	8002a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40001000 	.word	0x40001000

080023b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023bc:	b672      	cpsid	i
}
 80023be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <Error_Handler+0x8>
	...

080023c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_MspInit+0x4c>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_MspInit+0x4c>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6613      	str	r3, [r2, #96]	; 0x60
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_MspInit+0x4c>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_MspInit+0x4c>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_MspInit+0x4c>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	210f      	movs	r1, #15
 80023fe:	f06f 0001 	mvn.w	r0, #1
 8002402:	f000 fbdb 	bl	8002bbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_QSPI_MspInit+0x7c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d128      	bne.n	8002488 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6513      	str	r3, [r2, #80]	; 0x50
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_QSPI_MspInit+0x80>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002466:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800246a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002478:	230a      	movs	r3, #10
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_QSPI_MspInit+0x84>)
 8002484:	f000 fc44 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	a0001000 	.word	0xa0001000
 8002494:	40021000 	.word	0x40021000
 8002498:	48001000 	.word	0x48001000

0800249c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_QSPI_MspDeInit+0x30>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10a      	bne.n	80024c4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_QSPI_MspDeInit+0x34>)
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_QSPI_MspDeInit+0x34>)
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80024ba:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_QSPI_MspDeInit+0x38>)
 80024c0:	f000 fdd0 	bl	8003064 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	a0001000 	.word	0xa0001000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48001000 	.word	0x48001000

080024d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0b0      	sub	sp, #192	; 0xc0
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	2288      	movs	r2, #136	; 0x88
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f008 fa3f 	bl	800a97c <memset>
  if(huart->Instance==UART4)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_UART_MspInit+0x1d4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d144      	bne.n	8002592 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002508:	2308      	movs	r3, #8
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800250c:	2300      	movs	r3, #0
 800250e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	4618      	mov	r0, r3
 8002516:	f002 fa1b 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002520:	f7ff ff4a 	bl	80023b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002524:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a61      	ldr	r2, [pc, #388]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 800252a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
 8002530:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	4a5b      	ldr	r2, [pc, #364]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002554:	2303      	movs	r3, #3
 8002556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800256c:	2308      	movs	r3, #8
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	f000 fbc8 	bl	8002d10 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2105      	movs	r1, #5
 8002584:	2034      	movs	r0, #52	; 0x34
 8002586:	f000 fb19 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800258a:	2034      	movs	r0, #52	; 0x34
 800258c:	f000 fb32 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002590:	e088      	b.n	80026a4 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a47      	ldr	r2, [pc, #284]	; (80026b4 <HAL_UART_MspInit+0x1dc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d13b      	bne.n	8002614 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800259c:	2301      	movs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025a0:	2300      	movs	r3, #0
 80025a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 f9d1 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80025b4:	f7ff ff00 	bl	80023b8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c2:	6613      	str	r3, [r2, #96]	; 0x60
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d0:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	4a36      	ldr	r2, [pc, #216]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025e8:	23c0      	movs	r3, #192	; 0xc0
 80025ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002600:	2307      	movs	r3, #7
 8002602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800260a:	4619      	mov	r1, r3
 800260c:	482a      	ldr	r0, [pc, #168]	; (80026b8 <HAL_UART_MspInit+0x1e0>)
 800260e:	f000 fb7f 	bl	8002d10 <HAL_GPIO_Init>
}
 8002612:	e047      	b.n	80026a4 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_UART_MspInit+0x1e4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d142      	bne.n	80026a4 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800261e:	2302      	movs	r3, #2
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002622:	2300      	movs	r3, #0
 8002624:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	4618      	mov	r0, r3
 800262c:	f002 f990 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_UART_MspInit+0x162>
      Error_Handler();
 8002636:	f7ff febf 	bl	80023b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_UART_MspInit+0x1d8>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800266a:	2360      	movs	r3, #96	; 0x60
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002682:	2307      	movs	r3, #7
 8002684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002688:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800268c:	4619      	mov	r1, r3
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <HAL_UART_MspInit+0x1e8>)
 8002690:	f000 fb3e 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2105      	movs	r1, #5
 8002698:	2026      	movs	r0, #38	; 0x26
 800269a:	f000 fa8f 	bl	8002bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800269e:	2026      	movs	r0, #38	; 0x26
 80026a0:	f000 faa8 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
}
 80026a4:	bf00      	nop
 80026a6:	37c0      	adds	r7, #192	; 0xc0
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40004c00 	.word	0x40004c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40013800 	.word	0x40013800
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40004400 	.word	0x40004400
 80026c0:	48000c00 	.word	0x48000c00

080026c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	2036      	movs	r0, #54	; 0x36
 80026da:	f000 fa6f 	bl	8002bbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026de:	2036      	movs	r0, #54	; 0x36
 80026e0:	f000 fa88 	bl	8002bf4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_InitTick+0x9c>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_InitTick+0x9c>)
 80026ea:	f043 0310 	orr.w	r3, r3, #16
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_InitTick+0x9c>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f002 f890 	bl	800482c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800270c:	f002 f862 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8002710:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_InitTick+0xa0>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	3b01      	subs	r3, #1
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_InitTick+0xa4>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_InitTick+0xa8>)
 8002724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_InitTick+0xa4>)
 8002728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_InitTick+0xa4>)
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_InitTick+0xa4>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_InitTick+0xa4>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <HAL_InitTick+0xa4>)
 8002742:	f002 fdc1 	bl	80052c8 <HAL_TIM_Base_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <HAL_InitTick+0xa4>)
 800274e:	f002 fe1d 	bl	800538c <HAL_TIM_Base_Start_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3730      	adds	r7, #48	; 0x30
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	431bde83 	.word	0x431bde83
 8002768:	20000b98 	.word	0x20000b98
 800276c:	40001000 	.word	0x40001000

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler+0x4>

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <USART2_IRQHandler+0x10>)
 80027a2:	f003 fa09 	bl	8005bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000424 	.word	0x20000424

080027b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <UART4_IRQHandler+0x10>)
 80027b6:	f003 f9ff 	bl	8005bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200003a0 	.word	0x200003a0

080027c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <TIM6_DAC_IRQHandler+0x10>)
 80027ca:	f002 fe4f 	bl	800546c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000b98 	.word	0x20000b98

080027d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	return 1;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_kill>:

int _kill(int pid, int sig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f2:	f008 f88b 	bl	800a90c <__errno>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2216      	movs	r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
	return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_exit>:

void _exit (int status)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffe7 	bl	80027e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800281a:	e7fe      	b.n	800281a <_exit+0x12>

0800281c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e00a      	b.n	8002844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800282e:	f3af 8000 	nop.w
 8002832:	4601      	mov	r1, r0
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	60ba      	str	r2, [r7, #8]
 800283a:	b2ca      	uxtb	r2, r1
 800283c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	dbf0      	blt.n	800282e <_read+0x12>
	}

return len;
 800284c:	687b      	ldr	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e009      	b.n	800287c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	60ba      	str	r2, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	dbf1      	blt.n	8002868 <_write+0x12>
	}
	return len;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_close>:

int _close(int file)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
	return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b6:	605a      	str	r2, [r3, #4]
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_isatty>:

int _isatty(int file)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f007 fff0 	bl	800a90c <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20018000 	.word	0x20018000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000be8 	.word	0x20000be8
 8002960:	20006798 	.word	0x20006798

08002964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800298c:	f7ff ffea 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002992:	490d      	ldr	r1, [pc, #52]	; (80029c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002994:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <LoopForever+0xe>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a8:	4c0a      	ldr	r4, [pc, #40]	; (80029d4 <LoopForever+0x16>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f007 ffaf 	bl	800a918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ba:	f7ff fb35 	bl	8002028 <main>

080029be <LoopForever>:

LoopForever:
    b LoopForever
 80029be:	e7fe      	b.n	80029be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80029cc:	08010d4c 	.word	0x08010d4c
  ldr r2, =_sbss
 80029d0:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80029d4:	20006798 	.word	0x20006798

080029d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC1_2_IRQHandler>

080029da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f8de 	bl	8002ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ea:	200f      	movs	r0, #15
 80029ec:	f7ff fe6a 	bl	80026c4 <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	e001      	b.n	8002a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029fc:	f7ff fce2 	bl	80023c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a00:	79fb      	ldrb	r3, [r7, #7]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000018 	.word	0x20000018
 8002a30:	20000bec 	.word	0x20000bec

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000bec 	.word	0x20000bec

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff4c 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bce:	f7ff ff61 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002bd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f7ff ffb1 	bl	8002b40 <NVIC_EncodePriority>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff80 	bl	8002aec <__NVIC_SetPriority>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff54 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 020e 	bic.w	r2, r2, #14
 8002c48:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 021c 	and.w	r2, r3, #28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d005      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e029      	b.n	8002d04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020e 	bic.w	r2, r2, #14
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f003 021c 	and.w	r2, r3, #28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
    }
  }
  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1e:	e17f      	b.n	8003020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8171 	beq.w	800301a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d005      	beq.n	8002d50 <HAL_GPIO_Init+0x40>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d130      	bne.n	8002db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d86:	2201      	movs	r2, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0201 	and.w	r2, r3, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d118      	bne.n	8002df0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	08db      	lsrs	r3, r3, #3
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80ac 	beq.w	800301a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ece:	4b5c      	ldr	r3, [pc, #368]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eda:	4a5a      	ldr	r2, [pc, #360]	; (8003044 <HAL_GPIO_Init+0x334>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f04:	d025      	beq.n	8002f52 <HAL_GPIO_Init+0x242>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x338>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01f      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4e      	ldr	r2, [pc, #312]	; (800304c <HAL_GPIO_Init+0x33c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_GPIO_Init+0x340>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x344>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_GPIO_Init+0x348>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_GPIO_Init+0x34c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00c      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e00a      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f3e:	2305      	movs	r3, #5
 8002f40:	e008      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x244>
 8002f52:	2300      	movs	r3, #0
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	f002 0203 	and.w	r2, r2, #3
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_GPIO_Init+0x334>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f96:	4a32      	ldr	r2, [pc, #200]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_GPIO_Init+0x350>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	f47f ae78 	bne.w	8002d20 <HAL_GPIO_Init+0x10>
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	40010000 	.word	0x40010000
 8003048:	48000400 	.word	0x48000400
 800304c:	48000800 	.word	0x48000800
 8003050:	48000c00 	.word	0x48000c00
 8003054:	48001000 	.word	0x48001000
 8003058:	48001400 	.word	0x48001400
 800305c:	48001800 	.word	0x48001800
 8003060:	40010400 	.word	0x40010400

08003064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003072:	e0cd      	b.n	8003210 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003074:	2201      	movs	r2, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80c0 	beq.w	800320a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800308a:	4a68      	ldr	r2, [pc, #416]	; (800322c <HAL_GPIO_DeInit+0x1c8>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030b2:	d025      	beq.n	8003100 <HAL_GPIO_DeInit+0x9c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a5e      	ldr	r2, [pc, #376]	; (8003230 <HAL_GPIO_DeInit+0x1cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01f      	beq.n	80030fc <HAL_GPIO_DeInit+0x98>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a5d      	ldr	r2, [pc, #372]	; (8003234 <HAL_GPIO_DeInit+0x1d0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d019      	beq.n	80030f8 <HAL_GPIO_DeInit+0x94>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_GPIO_DeInit+0x1d4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_GPIO_DeInit+0x90>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <HAL_GPIO_DeInit+0x1d8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00d      	beq.n	80030f0 <HAL_GPIO_DeInit+0x8c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a5a      	ldr	r2, [pc, #360]	; (8003240 <HAL_GPIO_DeInit+0x1dc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_GPIO_DeInit+0x88>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_GPIO_DeInit+0x1e0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_GPIO_DeInit+0x84>
 80030e4:	2306      	movs	r3, #6
 80030e6:	e00c      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030e8:	2307      	movs	r3, #7
 80030ea:	e00a      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030ec:	2305      	movs	r3, #5
 80030ee:	e008      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030f4:	2303      	movs	r3, #3
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_DeInit+0x9e>
 8003100:	2300      	movs	r3, #0
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	429a      	cmp	r2, r3
 8003110:	d132      	bne.n	8003178 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003112:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	494b      	ldr	r1, [pc, #300]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 800311c:	4013      	ands	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003120:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	4947      	ldr	r1, [pc, #284]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 800312a:	4013      	ands	r3, r2
 800312c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	4944      	ldr	r1, [pc, #272]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 8003138:	4013      	ands	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	4940      	ldr	r1, [pc, #256]	; (8003248 <HAL_GPIO_DeInit+0x1e4>)
 8003146:	4013      	ands	r3, r2
 8003148:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <HAL_GPIO_DeInit+0x1c8>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43da      	mvns	r2, r3
 800316a:	4830      	ldr	r0, [pc, #192]	; (800322c <HAL_GPIO_DeInit+0x1c8>)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	400a      	ands	r2, r1
 8003172:	3302      	adds	r3, #2
 8003174:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2103      	movs	r1, #3
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	08d2      	lsrs	r2, r2, #3
 80031ac:	4019      	ands	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2103      	movs	r1, #3
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2103      	movs	r1, #3
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	2101      	movs	r1, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	401a      	ands	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	3301      	adds	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f47f af2b 	bne.w	8003074 <HAL_GPIO_DeInit+0x10>
  }
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40010000 	.word	0x40010000
 8003230:	48000400 	.word	0x48000400
 8003234:	48000800 	.word	0x48000800
 8003238:	48000c00 	.word	0x48000c00
 800323c:	48001000 	.word	0x48001000
 8003240:	48001400 	.word	0x48001400
 8003244:	48001800 	.word	0x48001800
 8003248:	40010400 	.word	0x40010400

0800324c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_PWREx_GetVoltageRange+0x18>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d130      	bne.n	80032da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003284:	d038      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2232      	movs	r2, #50	; 0x32
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ac:	e002      	b.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d102      	bne.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f2      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	d110      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d007      	beq.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f0:	4a05      	ldr	r2, [pc, #20]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000
 800330c:	20000010 	.word	0x20000010
 8003310:	431bde83 	.word	0x431bde83

08003314 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800331c:	f7ff fb8a 	bl	8002a34 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e063      	b.n	80033f4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff f867 	bl	8002414 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003346:	f241 3188 	movw	r1, #5000	; 0x1388
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb03 	bl	8003956 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	3b01      	subs	r3, #1
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	2120      	movs	r1, #32
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fafb 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003380:	7afb      	ldrb	r3, [r7, #11]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d131      	bne.n	80033ea <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f023 0310 	bic.w	r3, r3, #16
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6852      	ldr	r2, [r2, #4]
 8003398:	0611      	lsls	r1, r2, #24
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68d2      	ldr	r2, [r2, #12]
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_QSPI_Init+0xe8>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6912      	ldr	r2, [r2, #16]
 80033b6:	0411      	lsls	r1, r2, #16
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6952      	ldr	r2, [r2, #20]
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6992      	ldr	r2, [r2, #24]
 80033c2:	4311      	orrs	r1, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	ffe0f8fe 	.word	0xffe0f8fe

08003400 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e016      	b.n	8003440 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff f83a 	bl	800249c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff faee 	bl	8002a34 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_QSPI_Command+0x22>
 8003466:	2302      	movs	r3, #2
 8003468:	e048      	b.n	80034fc <HAL_QSPI_Command+0xb4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d137      	bne.n	80034ee <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2200      	movs	r2, #0
 8003494:	2120      	movs	r1, #32
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fa6b 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d125      	bne.n	80034f2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80034a6:	2200      	movs	r2, #0
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa98 	bl	80039e0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2201      	movs	r2, #1
 80034c0:	2102      	movs	r1, #2
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fa55 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2202      	movs	r2, #2
 80034d8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80034e2:	e006      	b.n	80034f2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80034ec:	e001      	b.n	80034f2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff fa8e 	bl	8002a34 <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3320      	adds	r3, #32
 8003520:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_QSPI_Transmit+0x2e>
 800352e:	2302      	movs	r3, #2
 8003530:	e07b      	b.n	800362a <HAL_QSPI_Transmit+0x126>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d16a      	bne.n	800361c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d05b      	beq.n	800360a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2212      	movs	r2, #18
 8003556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003586:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003588:	e01b      	b.n	80035c2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2201      	movs	r2, #1
 8003592:	2104      	movs	r1, #4
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f9ec 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800359e:	7ffb      	ldrb	r3, [r7, #31]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d113      	bne.n	80035cc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1df      	bne.n	800358a <HAL_QSPI_Transmit+0x86>
 80035ca:	e000      	b.n	80035ce <HAL_QSPI_Transmit+0xca>
          break;
 80035cc:	bf00      	nop
      }

      if (status == HAL_OK)
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d115      	bne.n	8003600 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2201      	movs	r2, #1
 80035dc:	2102      	movs	r1, #2
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f9c7 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f934 	bl	8003864 <HAL_QSPI_Abort>
 80035fc:	4603      	mov	r3, r0
 80035fe:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003608:	e00a      	b.n	8003620 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	f043 0208 	orr.w	r2, r3, #8
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e001      	b.n	8003620 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003628:	7ffb      	ldrb	r3, [r7, #31]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b08a      	sub	sp, #40	; 0x28
 8003636:	af02      	add	r7, sp, #8
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003642:	f7ff f9f7 	bl	8002a34 <HAL_GetTick>
 8003646:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3320      	adds	r3, #32
 8003656:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_QSPI_Receive+0x36>
 8003664:	2302      	movs	r3, #2
 8003666:	e082      	b.n	800376e <HAL_QSPI_Receive+0x13c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d171      	bne.n	8003760 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d062      	beq.n	800374e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	; 0x22
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036c0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80036ca:	e01c      	b.n	8003706 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2201      	movs	r2, #1
 80036d4:	2106      	movs	r1, #6
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f94b 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d114      	bne.n	8003710 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1de      	bne.n	80036cc <HAL_QSPI_Receive+0x9a>
 800370e:	e000      	b.n	8003712 <HAL_QSPI_Receive+0xe0>
          break;
 8003710:	bf00      	nop
      }

      if (status == HAL_OK)
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2201      	movs	r2, #1
 8003720:	2102      	movs	r1, #2
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f925 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800372c:	7ffb      	ldrb	r3, [r7, #31]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2202      	movs	r2, #2
 8003738:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f892 	bl	8003864 <HAL_QSPI_Abort>
 8003740:	4603      	mov	r3, r0
 8003742:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800374c:	e00a      	b.n	8003764 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	f043 0208 	orr.w	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e001      	b.n	8003764 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003760:	2302      	movs	r3, #2
 8003762:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800376c:	7ffb      	ldrb	r3, [r7, #31]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af02      	add	r7, sp, #8
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff f956 	bl	8002a34 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_QSPI_AutoPolling+0x24>
 8003796:	2302      	movs	r3, #2
 8003798:	e060      	b.n	800385c <HAL_QSPI_AutoPolling+0xe6>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d14f      	bne.n	800384e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2242      	movs	r2, #66	; 0x42
 80037b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2120      	movs	r1, #32
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f8d3 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13d      	bne.n	8003852 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6852      	ldr	r2, [r2, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800380c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8003816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8df 	bl	80039e0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2201      	movs	r2, #1
 800382a:	2108      	movs	r1, #8
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f8a0 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800384c:	e001      	b.n	8003852 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800384e:	2302      	movs	r3, #2
 8003850:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff f8e0 	bl	8002a34 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d062      	beq.n	800394c <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f9ad 	bl	8002c10 <HAL_DMA_Abort>
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d034      	beq.n	8003944 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0202 	orr.w	r2, r2, #2
 80038e8:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2201      	movs	r2, #1
 80038f4:	2102      	movs	r1, #2
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f83b 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10e      	bne.n	8003924 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2202      	movs	r2, #2
 800390c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f829 	bl	8003972 <QSPI_WaitFlagStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d110      	bne.n	800394c <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003938:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003942:	e003      	b.n	800394c <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003982:	e01a      	b.n	80039ba <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d016      	beq.n	80039ba <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7ff f852 	bl	8002a34 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2204      	movs	r2, #4
 80039a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00e      	b.n	80039d8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d1d6      	bne.n	8003984 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <QSPI_Config+0x28>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039fa:	d005      	beq.n	8003a08 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3a01      	subs	r2, #1
 8003a06:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80b9 	beq.w	8003b84 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d05f      	beq.n	8003ada <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d031      	beq.n	8003a90 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	049b      	lsls	r3, r3, #18
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	ea42 0103 	orr.w	r1, r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003a80:	f000 812e 	beq.w	8003ce0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	6852      	ldr	r2, [r2, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8003a8e:	e127      	b.n	8003ce0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	049b      	lsls	r3, r3, #18
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	615a      	str	r2, [r3, #20]
}
 8003ad8:	e102      	b.n	8003ce0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d02e      	beq.n	8003b40 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	049b      	lsls	r3, r3, #18
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b30:	f000 80d6 	beq.w	8003ce0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	6852      	ldr	r2, [r2, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	e0cf      	b.n	8003ce0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	049b      	lsls	r3, r3, #18
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	ea42 0103 	orr.w	r1, r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	e0ad      	b.n	8003ce0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d058      	beq.n	8003c3e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02d      	beq.n	8003bfa <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	049b      	lsls	r3, r3, #18
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bec:	d078      	beq.n	8003ce0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	6852      	ldr	r2, [r2, #4]
 8003bf6:	619a      	str	r2, [r3, #24]
}
 8003bf8:	e072      	b.n	8003ce0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	049b      	lsls	r3, r3, #18
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	ea42 0103 	orr.w	r1, r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	615a      	str	r2, [r3, #20]
}
 8003c3c:	e050      	b.n	8003ce0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02a      	beq.n	8003c9c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	049b      	lsls	r3, r3, #18
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	ea42 0103 	orr.w	r1, r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c8e:	d027      	beq.n	8003ce0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	619a      	str	r2, [r3, #24]
}
 8003c9a:	e021      	b.n	8003ce0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01d      	beq.n	8003ce0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	049b      	lsls	r3, r3, #18
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	ea42 0103 	orr.w	r1, r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	615a      	str	r2, [r3, #20]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e3ca      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfe:	4b97      	ldr	r3, [pc, #604]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d08:	4b94      	ldr	r3, [pc, #592]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80e4 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4a>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	f040 808b 	bne.w	8003e44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 8087 	bne.w	8003e44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d36:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e3a2      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_RCC_OscConfig+0x7c>
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d66:	e005      	b.n	8003d74 <HAL_RCC_OscConfig+0x88>
 8003d68:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d223      	bcs.n	8003dc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fd87 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e383      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8c:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b70      	ldr	r3, [pc, #448]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	496d      	ldr	r1, [pc, #436]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003daa:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4968      	ldr	r1, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e025      	b.n	8003e0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc0:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b63      	ldr	r3, [pc, #396]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4960      	ldr	r1, [pc, #384]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dde:	4b5f      	ldr	r3, [pc, #380]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	495b      	ldr	r1, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fd47 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e343      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0c:	f000 fc4a 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b52      	ldr	r3, [pc, #328]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	4950      	ldr	r1, [pc, #320]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	4a4e      	ldr	r2, [pc, #312]	; (8003f64 <HAL_RCC_OscConfig+0x278>)
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e2c:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fc47 	bl	80026c4 <HAL_InitTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d052      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	e327      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d032      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e4c:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a42      	ldr	r2, [pc, #264]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e58:	f7fe fdec 	bl	8002a34 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e60:	f7fe fde8 	bl	8002a34 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e310      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7e:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a36      	ldr	r2, [pc, #216]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4931      	ldr	r1, [pc, #196]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	492c      	ldr	r1, [pc, #176]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	e01a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ebe:	f7fe fdb9 	bl	8002a34 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fdb5 	bl	8002a34 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e2dd      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x1da>
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d074      	beq.n	8003fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x21a>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d10e      	bne.n	8003f1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d064      	beq.n	8003fdc <HAL_RCC_OscConfig+0x2f0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d160      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e2ba      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x24a>
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	e026      	b.n	8003f84 <HAL_RCC_OscConfig+0x298>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3e:	d115      	bne.n	8003f6c <HAL_RCC_OscConfig+0x280>
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a02      	ldr	r2, [pc, #8]	; (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x298>
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08010738 	.word	0x08010738
 8003f64:	20000010 	.word	0x20000010
 8003f68:	20000014 	.word	0x20000014
 8003f6c:	4ba0      	ldr	r3, [pc, #640]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a9f      	ldr	r2, [pc, #636]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b9d      	ldr	r3, [pc, #628]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9c      	ldr	r2, [pc, #624]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fd52 	bl	8002a34 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fe fd4e 	bl	8002a34 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e276      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa6:	4b92      	ldr	r3, [pc, #584]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2a8>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fd3e 	bl	8002a34 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fd3a 	bl	8002a34 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e262      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fce:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d0>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d060      	beq.n	80040ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_OscConfig+0x310>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d119      	bne.n	800402a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	4b7c      	ldr	r3, [pc, #496]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_OscConfig+0x328>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e23f      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	4973      	ldr	r1, [pc, #460]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004028:	e040      	b.n	80040ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004032:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6e      	ldr	r2, [pc, #440]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe fcf9 	bl	8002a34 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004046:	f7fe fcf5 	bl	8002a34 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e21d      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004058:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b62      	ldr	r3, [pc, #392]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	495f      	ldr	r1, [pc, #380]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
 8004078:	e018      	b.n	80040ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fe fcd5 	bl	8002a34 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408e:	f7fe fcd1 	bl	8002a34 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1f9      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03c      	beq.n	8004132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c6:	4a4a      	ldr	r2, [pc, #296]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe fcb0 	bl	8002a34 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fe fcac 	bl	8002a34 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1d4      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCC_OscConfig+0x3ec>
 80040f8:	e01b      	b.n	8004132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fe fc93 	bl	8002a34 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe fc8f 	bl	8002a34 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1b7      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004124:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004144:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6593      	str	r3, [r2, #88]	; 0x58
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004168:	2301      	movs	r3, #1
 800416a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <HAL_RCC_OscConfig+0x508>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d118      	bne.n	80041aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCC_OscConfig+0x508>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_RCC_OscConfig+0x508>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004184:	f7fe fc56 	bl	8002a34 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fe fc52 	bl	8002a34 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e17a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_RCC_OscConfig+0x508>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d8>
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c2:	e029      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d115      	bne.n	80041f8 <HAL_RCC_OscConfig+0x50c>
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	4a03      	ldr	r2, [pc, #12]	; (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ec:	e014      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	4b9c      	ldr	r3, [pc, #624]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a9b      	ldr	r2, [pc, #620]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004208:	4b98      	ldr	r3, [pc, #608]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a97      	ldr	r2, [pc, #604]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d016      	beq.n	800424e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fc08 	bl	8002a34 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fe fc04 	bl	8002a34 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e12a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423e:	4b8b      	ldr	r3, [pc, #556]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ed      	beq.n	8004228 <HAL_RCC_OscConfig+0x53c>
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fe fbf1 	bl	8002a34 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe fbed 	bl	8002a34 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e113      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426c:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ed      	bne.n	8004256 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427a:	7ffb      	ldrb	r3, [r7, #31]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004280:	4b7a      	ldr	r3, [pc, #488]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	4a79      	ldr	r2, [pc, #484]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80fe 	beq.w	8004492 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	2b02      	cmp	r3, #2
 800429c:	f040 80d0 	bne.w	8004440 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042a0:	4b72      	ldr	r3, [pc, #456]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0203 	and.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d130      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	3b01      	subs	r3, #1
 80042c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d127      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11f      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e0:	2a07      	cmp	r2, #7
 80042e2:	bf14      	ite	ne
 80042e4:	2201      	movne	r2, #1
 80042e6:	2200      	moveq	r2, #0
 80042e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d113      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d109      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d06e      	beq.n	80043f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d069      	beq.n	80043f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0ad      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004338:	4b4c      	ldr	r3, [pc, #304]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4b      	ldr	r2, [pc, #300]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800433e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004344:	f7fe fb76 	bl	8002a34 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe fb72 	bl	8002a34 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e09a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800435e:	4b43      	ldr	r3, [pc, #268]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436a:	4b40      	ldr	r3, [pc, #256]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_RCC_OscConfig+0x784>)
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800437a:	3a01      	subs	r2, #1
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	4311      	orrs	r1, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004384:	0212      	lsls	r2, r2, #8
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800438c:	0852      	lsrs	r2, r2, #1
 800438e:	3a01      	subs	r2, #1
 8004390:	0552      	lsls	r2, r2, #21
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004398:	0852      	lsrs	r2, r2, #1
 800439a:	3a01      	subs	r2, #1
 800439c:	0652      	lsls	r2, r2, #25
 800439e:	4311      	orrs	r1, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a4:	0912      	lsrs	r2, r2, #4
 80043a6:	0452      	lsls	r2, r2, #17
 80043a8:	430a      	orrs	r2, r1
 80043aa:	4930      	ldr	r1, [pc, #192]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b0:	4b2e      	ldr	r3, [pc, #184]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043bc:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a2a      	ldr	r2, [pc, #168]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c8:	f7fe fb34 	bl	8002a34 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe fb30 	bl	8002a34 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e058      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ee:	e050      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04f      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_OscConfig+0x780>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d148      	bne.n	8004492 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a16      	ldr	r2, [pc, #88]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004418:	f7fe fb0c 	bl	8002a34 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe fb08 	bl	8002a34 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e030      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x734>
 800443e:	e028      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d023      	beq.n	800448e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_OscConfig+0x780>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a08      	ldr	r2, [pc, #32]	; (800446c <HAL_RCC_OscConfig+0x780>)
 800444c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe faef 	bl	8002a34 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004458:	e00c      	b.n	8004474 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fe faeb 	bl	8002a34 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d905      	bls.n	8004474 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e013      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
 800446c:	40021000 	.word	0x40021000
 8004470:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ec      	bne.n	800445a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4905      	ldr	r1, [pc, #20]	; (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x7b4>)
 8004488:	4013      	ands	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
 800448c:	e001      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	feeefffc 	.word	0xfeeefffc

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0e7      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b75      	ldr	r3, [pc, #468]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4970      	ldr	r1, [pc, #448]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b6e      	ldr	r3, [pc, #440]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0cf      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004500:	429a      	cmp	r2, r3
 8004502:	d908      	bls.n	8004516 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4960      	ldr	r1, [pc, #384]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04c      	beq.n	80045bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452a:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d121      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0a6      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	4b54      	ldr	r3, [pc, #336]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e09a      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455a:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e086      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b46      	ldr	r3, [pc, #280]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4943      	ldr	r1, [pc, #268]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fe fa52 	bl	8002a34 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fe fa4e 	bl	8002a34 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e06e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d208      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	492b      	ldr	r1, [pc, #172]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d210      	bcs.n	800461a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 0207 	bic.w	r2, r3, #7
 8004600:	4923      	ldr	r1, [pc, #140]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e036      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4918      	ldr	r1, [pc, #96]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004644:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4910      	ldr	r1, [pc, #64]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004658:	f000 f824 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	490b      	ldr	r1, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1fc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe f821 	bl	80026c4 <HAL_InitTick>
 8004682:	4603      	mov	r3, r0
 8004684:	72fb      	strb	r3, [r7, #11]

  return status;
 8004686:	7afb      	ldrb	r3, [r7, #11]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	08010738 	.word	0x08010738
 800469c:	20000010 	.word	0x20000010
 80046a0:	20000014 	.word	0x20000014

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046bc:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x34>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d121      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11e      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e005      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f4:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004700:	4a2b      	ldr	r2, [pc, #172]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004714:	e00a      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d102      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e004      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d101      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800472a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d134      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0xa6>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d003      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0xac>
 8004748:	e005      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800474c:	617b      	str	r3, [r7, #20]
      break;
 800474e:	e005      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004752:	617b      	str	r3, [r7, #20]
      break;
 8004754:	e002      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	617b      	str	r3, [r7, #20]
      break;
 800475a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	fb03 f202 	mul.w	r2, r3, r2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	0e5b      	lsrs	r3, r3, #25
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	3301      	adds	r3, #1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800479c:	69bb      	ldr	r3, [r7, #24]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08010750 	.word	0x08010750
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000010 	.word	0x20000010

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	08010748 	.word	0x08010748

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004804:	f7ff ffda 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	08010748 	.word	0x08010748

0800482c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	220f      	movs	r2, #15
 800483a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCC_GetClockConfig+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0207 	and.w	r2, r3, #7
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	40022000 	.word	0x40022000

08004890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a8:	f7fe fcd0 	bl	800324c <HAL_PWREx_GetVoltageRange>
 80048ac:	6178      	str	r0, [r7, #20]
 80048ae:	e014      	b.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b25      	ldr	r3, [pc, #148]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c8:	f7fe fcc0 	bl	800324c <HAL_PWREx_GetVoltageRange>
 80048cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d10b      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d919      	bls.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2ba0      	cmp	r3, #160	; 0xa0
 80048ec:	d902      	bls.n	80048f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ee:	2302      	movs	r3, #2
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e013      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f4:	2301      	movs	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e010      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b80      	cmp	r3, #128	; 0x80
 80048fe:	d902      	bls.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004900:	2303      	movs	r3, #3
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e00a      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d102      	bne.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800490c:	2302      	movs	r3, #2
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e004      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b70      	cmp	r3, #112	; 0x70
 8004916:	d101      	bne.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0207 	bic.w	r2, r3, #7
 8004924:	4909      	ldr	r1, [pc, #36]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2300      	movs	r3, #0
 800495e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	2b00      	cmp	r3, #0
 800496a:	d041      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004974:	d02a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800497a:	d824      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800497c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004980:	d008      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004986:	d81e      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800498c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004990:	d010      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004992:	e018      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004994:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a85      	ldr	r2, [pc, #532]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a0:	e015      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fabb 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b2:	e00c      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3320      	adds	r3, #32
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fba6 	bl	800510c <RCCEx_PLLSAI2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	74fb      	strb	r3, [r7, #19]
      break;
 80049ca:	e000      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d4:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e2:	4973      	ldr	r1, [pc, #460]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ea:	e001      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d041      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a04:	d02a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a0a:	d824      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a10:	d008      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a16:	d81e      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a20:	d010      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a22:	e018      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a24:	4b62      	ldr	r3, [pc, #392]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a61      	ldr	r2, [pc, #388]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa73 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3320      	adds	r3, #32
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb5e 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a64:	4b52      	ldr	r3, [pc, #328]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a72:	494f      	ldr	r1, [pc, #316]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a0 	beq.w	8004bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac4:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3a      	ldr	r2, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad0:	f7fd ffb0 	bl	8002a34 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad6:	e009      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fd ffac 	bl	8002a34 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d902      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	74fb      	strb	r3, [r7, #19]
        break;
 8004aea:	e005      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aec:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d15c      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004afe:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d019      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b28:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd ff6b 	bl	8002a34 <HAL_GetTick>
 8004b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b60:	e00b      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd ff67 	bl	8002a34 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d902      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	74fb      	strb	r3, [r7, #19]
            break;
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ec      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ba6:	e009      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbc:	7c7b      	ldrb	r3, [r7, #17]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d105      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4b9e      	ldr	r3, [pc, #632]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a9d      	ldr	r2, [pc, #628]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bda:	4b98      	ldr	r3, [pc, #608]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f023 0203 	bic.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	4994      	ldr	r1, [pc, #592]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfc:	4b8f      	ldr	r3, [pc, #572]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	498c      	ldr	r1, [pc, #560]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1e:	4b87      	ldr	r3, [pc, #540]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	4983      	ldr	r1, [pc, #524]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c40:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	497b      	ldr	r1, [pc, #492]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c70:	4972      	ldr	r1, [pc, #456]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c84:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	496a      	ldr	r1, [pc, #424]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	4961      	ldr	r1, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc8:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd6:	4959      	ldr	r1, [pc, #356]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	4950      	ldr	r1, [pc, #320]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	4948      	ldr	r1, [pc, #288]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d2e:	4b43      	ldr	r3, [pc, #268]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	493f      	ldr	r1, [pc, #252]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d028      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5e:	4937      	ldr	r1, [pc, #220]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]
 8004d7c:	e011      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f8c8 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d028      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	491f      	ldr	r1, [pc, #124]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd8:	60d3      	str	r3, [r2, #12]
 8004dda:	e011      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f899 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1a:	4908      	ldr	r1, [pc, #32]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a02      	ldr	r2, [pc, #8]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e36:	60d3      	str	r3, [r2, #12]
 8004e38:	e014      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f867 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e70:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7e:	4928      	ldr	r1, [pc, #160]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e8e:	d10d      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f844 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d014      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	74bb      	strb	r3, [r7, #18]
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3320      	adds	r3, #32
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f925 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eea:	490d      	ldr	r1, [pc, #52]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0e:	4904      	ldr	r1, [pc, #16]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000

08004f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f32:	4b75      	ldr	r3, [pc, #468]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f3e:	4b72      	ldr	r3, [pc, #456]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d10d      	bne.n	8004f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
       ||
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f56:	4b6c      	ldr	r3, [pc, #432]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
       ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d047      	beq.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e044      	b.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d018      	beq.n	8004faa <RCCEx_PLLSAI1_Config+0x86>
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d825      	bhi.n	8004fc8 <RCCEx_PLLSAI1_Config+0xa4>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d002      	beq.n	8004f86 <RCCEx_PLLSAI1_Config+0x62>
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d009      	beq.n	8004f98 <RCCEx_PLLSAI1_Config+0x74>
 8004f84:	e020      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f86:	4b60      	ldr	r3, [pc, #384]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11d      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f96:	e01a      	b.n	8004fce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f98:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa8:	e013      	b.n	8004fd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004faa:	4b57      	ldr	r3, [pc, #348]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb6:	4b54      	ldr	r3, [pc, #336]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e004      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fde:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	4944      	ldr	r1, [pc, #272]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d17d      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a40      	ldr	r2, [pc, #256]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500c:	f7fd fd12 	bl	8002a34 <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005012:	e009      	b.n	8005028 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005014:	f7fd fd0e 	bl	8002a34 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d902      	bls.n	8005028 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	73fb      	strb	r3, [r7, #15]
        break;
 8005026:	e005      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005028:	4b37      	ldr	r3, [pc, #220]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ef      	bne.n	8005014 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d160      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d111      	bne.n	8005064 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005040:	4b31      	ldr	r3, [pc, #196]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6892      	ldr	r2, [r2, #8]
 8005050:	0211      	lsls	r1, r2, #8
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	0912      	lsrs	r2, r2, #4
 8005058:	0452      	lsls	r2, r2, #17
 800505a:	430a      	orrs	r2, r1
 800505c:	492a      	ldr	r1, [pc, #168]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	610b      	str	r3, [r1, #16]
 8005062:	e027      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d112      	bne.n	8005090 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005072:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6892      	ldr	r2, [r2, #8]
 800507a:	0211      	lsls	r1, r2, #8
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6912      	ldr	r2, [r2, #16]
 8005080:	0852      	lsrs	r2, r2, #1
 8005082:	3a01      	subs	r2, #1
 8005084:	0552      	lsls	r2, r2, #21
 8005086:	430a      	orrs	r2, r1
 8005088:	491f      	ldr	r1, [pc, #124]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]
 800508e:	e011      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6892      	ldr	r2, [r2, #8]
 80050a0:	0211      	lsls	r1, r2, #8
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6952      	ldr	r2, [r2, #20]
 80050a6:	0852      	lsrs	r2, r2, #1
 80050a8:	3a01      	subs	r2, #1
 80050aa:	0652      	lsls	r2, r2, #25
 80050ac:	430a      	orrs	r2, r1
 80050ae:	4916      	ldr	r1, [pc, #88]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050b4:	4b14      	ldr	r3, [pc, #80]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fd fcb8 	bl	8002a34 <HAL_GetTick>
 80050c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c6:	e009      	b.n	80050dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c8:	f7fd fcb4 	bl	8002a34 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d902      	bls.n	80050dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	73fb      	strb	r3, [r7, #15]
          break;
 80050da:	e005      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005126:	4b67      	ldr	r3, [pc, #412]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800513e:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d047      	beq.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d018      	beq.n	8005192 <RCCEx_PLLSAI2_Config+0x86>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d825      	bhi.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <RCCEx_PLLSAI2_Config+0x62>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d009      	beq.n	8005180 <RCCEx_PLLSAI2_Config+0x74>
 800516c:	e020      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b55      	ldr	r3, [pc, #340]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e013      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800519e:	4b49      	ldr	r3, [pc, #292]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ae:	e006      	b.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e004      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051be:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	430b      	orrs	r3, r1
 80051dc:	4939      	ldr	r1, [pc, #228]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d167      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a35      	ldr	r2, [pc, #212]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fd fc1e 	bl	8002a34 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051fc:	f7fd fc1a 	bl	8002a34 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005210:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d14a      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d111      	bne.n	800524c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	0912      	lsrs	r2, r2, #4
 8005240:	0452      	lsls	r2, r2, #17
 8005242:	430a      	orrs	r2, r1
 8005244:	491f      	ldr	r1, [pc, #124]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	614b      	str	r3, [r1, #20]
 800524a:	e011      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005254:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6892      	ldr	r2, [r2, #8]
 800525c:	0211      	lsls	r1, r2, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6912      	ldr	r2, [r2, #16]
 8005262:	0852      	lsrs	r2, r2, #1
 8005264:	3a01      	subs	r2, #1
 8005266:	0652      	lsls	r2, r2, #25
 8005268:	430a      	orrs	r2, r1
 800526a:	4916      	ldr	r1, [pc, #88]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526c:	4313      	orrs	r3, r2
 800526e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fd fbda 	bl	8002a34 <HAL_GetTick>
 8005280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005282:	e009      	b.n	8005298 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005284:	f7fd fbd6 	bl	8002a34 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d902      	bls.n	8005298 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	73fb      	strb	r3, [r7, #15]
          break;
 8005296:	e005      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4904      	ldr	r1, [pc, #16]	; (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e049      	b.n	800536e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f841 	bl	8005376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 f9f8 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d001      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04f      	b.n	8005444 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a23      	ldr	r2, [pc, #140]	; (8005450 <HAL_TIM_Base_Start_IT+0xc4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d018      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <HAL_TIM_Base_Start_IT+0xc8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <HAL_TIM_Base_Start_IT+0xcc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	; (800545c <HAL_TIM_Base_Start_IT+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_TIM_Base_Start_IT+0xd4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0x76>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <HAL_TIM_Base_Start_IT+0xd8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d115      	bne.n	800542e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	4b17      	ldr	r3, [pc, #92]	; (8005468 <HAL_TIM_Base_Start_IT+0xdc>)
 800540a:	4013      	ands	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d015      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0xb4>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541a:	d011      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	e008      	b.n	8005440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e000      	b.n	8005442 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40014000 	.word	0x40014000
 8005468:	00010007 	.word	0x00010007

0800546c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b02      	cmp	r3, #2
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0202 	mvn.w	r2, #2
 8005498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f905 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8f7 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f908 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0204 	mvn.w	r2, #4
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8db 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8cd 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8de 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b08      	cmp	r3, #8
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0208 	mvn.w	r2, #8
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2204      	movs	r2, #4
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8b1 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8a3 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8b4 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b10      	cmp	r3, #16
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b10      	cmp	r3, #16
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0210 	mvn.w	r2, #16
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2208      	movs	r2, #8
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f887 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f879 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f88a 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0201 	mvn.w	r2, #1
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fed2 	bl	8002394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f914 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800562a:	d10e      	bne.n	800564a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d107      	bne.n	800564a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f907 	bl	8005858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d10e      	bne.n	8005676 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d107      	bne.n	8005676 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800566e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f838 	bl	80056e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b20      	cmp	r3, #32
 8005682:	d10e      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d107      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0220 	mvn.w	r2, #32
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8c7 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a40      	ldr	r2, [pc, #256]	; (8005810 <TIM_Base_SetConfig+0x114>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d00f      	beq.n	800573c <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3d      	ldr	r2, [pc, #244]	; (8005814 <TIM_Base_SetConfig+0x118>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3c      	ldr	r2, [pc, #240]	; (8005818 <TIM_Base_SetConfig+0x11c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3b      	ldr	r2, [pc, #236]	; (800581c <TIM_Base_SetConfig+0x120>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a3a      	ldr	r2, [pc, #232]	; (8005820 <TIM_Base_SetConfig+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d108      	bne.n	800574e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <TIM_Base_SetConfig+0x114>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01f      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d01b      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2c      	ldr	r2, [pc, #176]	; (8005814 <TIM_Base_SetConfig+0x118>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d017      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <TIM_Base_SetConfig+0x11c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2a      	ldr	r2, [pc, #168]	; (800581c <TIM_Base_SetConfig+0x120>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a29      	ldr	r2, [pc, #164]	; (8005820 <TIM_Base_SetConfig+0x124>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a28      	ldr	r2, [pc, #160]	; (8005824 <TIM_Base_SetConfig+0x128>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a27      	ldr	r2, [pc, #156]	; (8005828 <TIM_Base_SetConfig+0x12c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x9a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a26      	ldr	r2, [pc, #152]	; (800582c <TIM_Base_SetConfig+0x130>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <TIM_Base_SetConfig+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0xf8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <TIM_Base_SetConfig+0x124>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0xf8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a11      	ldr	r2, [pc, #68]	; (8005824 <TIM_Base_SetConfig+0x128>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <TIM_Base_SetConfig+0x12c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0xf8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a0f      	ldr	r2, [pc, #60]	; (800582c <TIM_Base_SetConfig+0x130>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d103      	bne.n	80057fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	615a      	str	r2, [r3, #20]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40013400 	.word	0x40013400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e040      	b.n	8005900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fe22 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc7c 	bl	80061a8 <UART_SetConfig>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e022      	b.n	8005900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 ff28 	bl	8006718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 ffaf 	bl	800685c <UART_CheckIdleState>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 8082 	bne.w	8005a26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_Transmit+0x26>
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07a      	b.n	8005a28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Transmit+0x38>
 800593c:	2302      	movs	r3, #2
 800593e:	e073      	b.n	8005a28 <HAL_UART_Transmit+0x120>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005956:	f7fd f86d 	bl	8002a34 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d108      	bne.n	8005988 <HAL_UART_Transmit+0x80>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e003      	b.n	8005990 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005998:	e02d      	b.n	80059f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2180      	movs	r1, #128	; 0x80
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 ffa2 	bl	80068ee <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e039      	b.n	8005a28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	881a      	ldrh	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c6:	b292      	uxth	r2, r2
 80059c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	3302      	adds	r3, #2
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e008      	b.n	80059e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b292      	uxth	r2, r2
 80059dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1cb      	bne.n	800599a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2140      	movs	r1, #64	; 0x40
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 ff6e 	bl	80068ee <UART_WaitOnFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e005      	b.n	8005a28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b08b      	sub	sp, #44	; 0x2c
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d156      	bne.n	8005af4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_UART_Transmit_IT+0x22>
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e04f      	b.n	8005af6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Transmit_IT+0x34>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e048      	b.n	8005af6 <HAL_UART_Transmit_IT+0xc6>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2221      	movs	r2, #33	; 0x21
 8005a94:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d107      	bne.n	8005ab0 <HAL_UART_Transmit_IT+0x80>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <HAL_UART_Transmit_IT+0xd4>)
 8005aac:	669a      	str	r2, [r3, #104]	; 0x68
 8005aae:	e002      	b.n	8005ab6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <HAL_UART_Transmit_IT+0xd8>)
 8005ab4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	613b      	str	r3, [r7, #16]
   return(result);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	e000      	b.n	8005af6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	372c      	adds	r7, #44	; 0x2c
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	08006db7 	.word	0x08006db7
 8005b08:	08006cff 	.word	0x08006cff

08005b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d142      	bne.n	8005ba8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_UART_Receive_IT+0x22>
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e03b      	b.n	8005baa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_UART_Receive_IT+0x34>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e034      	b.n	8005baa <HAL_UART_Receive_IT+0x9e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_UART_Receive_IT+0xa8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d01f      	beq.n	8005b98 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d018      	beq.n	8005b98 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	613b      	str	r3, [r7, #16]
   return(result);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 ff6a 	bl	8006a78 <UART_Start_Receive_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	e000      	b.n	8005baa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40008000 	.word	0x40008000

08005bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b0ba      	sub	sp, #232	; 0xe8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005be6:	4013      	ands	r3, r2
 8005be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00f      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 82a6 	beq.w	8006162 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
      }
      return;
 8005c1e:	e2a0      	b.n	8006162 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8117 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c3a:	4b85      	ldr	r3, [pc, #532]	; (8005e50 <HAL_UART_IRQHandler+0x298>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 810a 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
 8005c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2202      	movs	r2, #2
 8005c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9a:	f043 0204 	orr.w	r2, r3, #4
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cca:	f043 0202 	orr.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 820c 	beq.w	8006166 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d005      	beq.n	8005d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04f      	beq.n	8005e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 ff36 	bl	8006c0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d141      	bne.n	8005e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d9      	bne.n	8005dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_UART_IRQHandler+0x29c>)
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc ff3c 	bl	8002c8c <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e00f      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9a6 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00b      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9a2 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e007      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f99e 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e48:	e18d      	b.n	8006166 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4a:	bf00      	nop
    return;
 8005e4c:	e18b      	b.n	8006166 <HAL_UART_IRQHandler+0x5ae>
 8005e4e:	bf00      	nop
 8005e50:	04000120 	.word	0x04000120
 8005e54:	08006cd3 	.word	0x08006cd3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 8146 	bne.w	80060ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 813f 	beq.w	80060ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8138 	beq.w	80060ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	f040 80b4 	bne.w	8005ffe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 815f 	beq.w	800616a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	f080 8157 	bcs.w	800616a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 8085 	bne.w	8005fe2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1da      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e1      	bne.n	8005f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e3      	bne.n	8005f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fc fe17 	bl	8002c10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8ca 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffc:	e0b5      	b.n	800616a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600a:	b29b      	uxth	r3, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80a7 	beq.w	800616e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a2 	beq.w	800616e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
 800604e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006084:	633a      	str	r2, [r7, #48]	; 0x30
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f852 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ec:	e03f      	b.n	800616e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_UART_IRQHandler+0x560>
 80060fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800610e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f83a 	bl	800718a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006116:	e02d      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01c      	beq.n	8006172 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
    }
    return;
 8006140:	e017      	b.n	8006172 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_UART_IRQHandler+0x5bc>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fe8b 	bl	8006e76 <UART_EndTransmit_IT>
    return;
 8006160:	e008      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006172:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006174:	37e8      	adds	r7, #232	; 0xe8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ac:	b08a      	sub	sp, #40	; 0x28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	4ba4      	ldr	r3, [pc, #656]	; (8006468 <UART_SetConfig+0x2c0>)
 80061d8:	4013      	ands	r3, r2
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a99      	ldr	r2, [pc, #612]	; (800646c <UART_SetConfig+0x2c4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006210:	4313      	orrs	r3, r2
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a90      	ldr	r2, [pc, #576]	; (8006470 <UART_SetConfig+0x2c8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d126      	bne.n	8006280 <UART_SetConfig+0xd8>
 8006232:	4b90      	ldr	r3, [pc, #576]	; (8006474 <UART_SetConfig+0x2cc>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b03      	cmp	r3, #3
 800623e:	d81b      	bhi.n	8006278 <UART_SetConfig+0xd0>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0xa0>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006259 	.word	0x08006259
 800624c:	08006269 	.word	0x08006269
 8006250:	08006261 	.word	0x08006261
 8006254:	08006271 	.word	0x08006271
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e116      	b.n	800648e <UART_SetConfig+0x2e6>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e112      	b.n	800648e <UART_SetConfig+0x2e6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e10e      	b.n	800648e <UART_SetConfig+0x2e6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e10a      	b.n	800648e <UART_SetConfig+0x2e6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e106      	b.n	800648e <UART_SetConfig+0x2e6>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7c      	ldr	r2, [pc, #496]	; (8006478 <UART_SetConfig+0x2d0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d138      	bne.n	80062fc <UART_SetConfig+0x154>
 800628a:	4b7a      	ldr	r3, [pc, #488]	; (8006474 <UART_SetConfig+0x2cc>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f003 030c 	and.w	r3, r3, #12
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d82d      	bhi.n	80062f4 <UART_SetConfig+0x14c>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <UART_SetConfig+0xf8>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062d5 	.word	0x080062d5
 80062a4:	080062f5 	.word	0x080062f5
 80062a8:	080062f5 	.word	0x080062f5
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	080062e5 	.word	0x080062e5
 80062b4:	080062f5 	.word	0x080062f5
 80062b8:	080062f5 	.word	0x080062f5
 80062bc:	080062f5 	.word	0x080062f5
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e0d8      	b.n	800648e <UART_SetConfig+0x2e6>
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e0d4      	b.n	800648e <UART_SetConfig+0x2e6>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e0d0      	b.n	800648e <UART_SetConfig+0x2e6>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e0cc      	b.n	800648e <UART_SetConfig+0x2e6>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e0c8      	b.n	800648e <UART_SetConfig+0x2e6>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a5e      	ldr	r2, [pc, #376]	; (800647c <UART_SetConfig+0x2d4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d125      	bne.n	8006352 <UART_SetConfig+0x1aa>
 8006306:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <UART_SetConfig+0x2cc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d016      	beq.n	8006342 <UART_SetConfig+0x19a>
 8006314:	2b30      	cmp	r3, #48	; 0x30
 8006316:	d818      	bhi.n	800634a <UART_SetConfig+0x1a2>
 8006318:	2b20      	cmp	r3, #32
 800631a:	d00a      	beq.n	8006332 <UART_SetConfig+0x18a>
 800631c:	2b20      	cmp	r3, #32
 800631e:	d814      	bhi.n	800634a <UART_SetConfig+0x1a2>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <UART_SetConfig+0x182>
 8006324:	2b10      	cmp	r3, #16
 8006326:	d008      	beq.n	800633a <UART_SetConfig+0x192>
 8006328:	e00f      	b.n	800634a <UART_SetConfig+0x1a2>
 800632a:	2300      	movs	r3, #0
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006330:	e0ad      	b.n	800648e <UART_SetConfig+0x2e6>
 8006332:	2302      	movs	r3, #2
 8006334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006338:	e0a9      	b.n	800648e <UART_SetConfig+0x2e6>
 800633a:	2304      	movs	r3, #4
 800633c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006340:	e0a5      	b.n	800648e <UART_SetConfig+0x2e6>
 8006342:	2308      	movs	r3, #8
 8006344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006348:	e0a1      	b.n	800648e <UART_SetConfig+0x2e6>
 800634a:	2310      	movs	r3, #16
 800634c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006350:	e09d      	b.n	800648e <UART_SetConfig+0x2e6>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <UART_SetConfig+0x2d8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d125      	bne.n	80063a8 <UART_SetConfig+0x200>
 800635c:	4b45      	ldr	r3, [pc, #276]	; (8006474 <UART_SetConfig+0x2cc>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006366:	2bc0      	cmp	r3, #192	; 0xc0
 8006368:	d016      	beq.n	8006398 <UART_SetConfig+0x1f0>
 800636a:	2bc0      	cmp	r3, #192	; 0xc0
 800636c:	d818      	bhi.n	80063a0 <UART_SetConfig+0x1f8>
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d00a      	beq.n	8006388 <UART_SetConfig+0x1e0>
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d814      	bhi.n	80063a0 <UART_SetConfig+0x1f8>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <UART_SetConfig+0x1d8>
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d008      	beq.n	8006390 <UART_SetConfig+0x1e8>
 800637e:	e00f      	b.n	80063a0 <UART_SetConfig+0x1f8>
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e082      	b.n	800648e <UART_SetConfig+0x2e6>
 8006388:	2302      	movs	r3, #2
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e07e      	b.n	800648e <UART_SetConfig+0x2e6>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e07a      	b.n	800648e <UART_SetConfig+0x2e6>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	e076      	b.n	800648e <UART_SetConfig+0x2e6>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e072      	b.n	800648e <UART_SetConfig+0x2e6>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a35      	ldr	r2, [pc, #212]	; (8006484 <UART_SetConfig+0x2dc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12a      	bne.n	8006408 <UART_SetConfig+0x260>
 80063b2:	4b30      	ldr	r3, [pc, #192]	; (8006474 <UART_SetConfig+0x2cc>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c0:	d01a      	beq.n	80063f8 <UART_SetConfig+0x250>
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c6:	d81b      	bhi.n	8006400 <UART_SetConfig+0x258>
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d00c      	beq.n	80063e8 <UART_SetConfig+0x240>
 80063ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d2:	d815      	bhi.n	8006400 <UART_SetConfig+0x258>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <UART_SetConfig+0x238>
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063dc:	d008      	beq.n	80063f0 <UART_SetConfig+0x248>
 80063de:	e00f      	b.n	8006400 <UART_SetConfig+0x258>
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e6:	e052      	b.n	800648e <UART_SetConfig+0x2e6>
 80063e8:	2302      	movs	r3, #2
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ee:	e04e      	b.n	800648e <UART_SetConfig+0x2e6>
 80063f0:	2304      	movs	r3, #4
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f6:	e04a      	b.n	800648e <UART_SetConfig+0x2e6>
 80063f8:	2308      	movs	r3, #8
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fe:	e046      	b.n	800648e <UART_SetConfig+0x2e6>
 8006400:	2310      	movs	r3, #16
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006406:	e042      	b.n	800648e <UART_SetConfig+0x2e6>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a17      	ldr	r2, [pc, #92]	; (800646c <UART_SetConfig+0x2c4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d13a      	bne.n	8006488 <UART_SetConfig+0x2e0>
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <UART_SetConfig+0x2cc>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800641c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006420:	d01a      	beq.n	8006458 <UART_SetConfig+0x2b0>
 8006422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006426:	d81b      	bhi.n	8006460 <UART_SetConfig+0x2b8>
 8006428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642c:	d00c      	beq.n	8006448 <UART_SetConfig+0x2a0>
 800642e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006432:	d815      	bhi.n	8006460 <UART_SetConfig+0x2b8>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <UART_SetConfig+0x298>
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d008      	beq.n	8006450 <UART_SetConfig+0x2a8>
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x2b8>
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e022      	b.n	800648e <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e01e      	b.n	800648e <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006456:	e01a      	b.n	800648e <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645e:	e016      	b.n	800648e <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006466:	e012      	b.n	800648e <UART_SetConfig+0x2e6>
 8006468:	efff69f3 	.word	0xefff69f3
 800646c:	40008000 	.word	0x40008000
 8006470:	40013800 	.word	0x40013800
 8006474:	40021000 	.word	0x40021000
 8006478:	40004400 	.word	0x40004400
 800647c:	40004800 	.word	0x40004800
 8006480:	40004c00 	.word	0x40004c00
 8006484:	40005000 	.word	0x40005000
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a9f      	ldr	r2, [pc, #636]	; (8006710 <UART_SetConfig+0x568>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d17a      	bne.n	800658e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800649c:	2b08      	cmp	r3, #8
 800649e:	d824      	bhi.n	80064ea <UART_SetConfig+0x342>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0x300>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064eb 	.word	0x080064eb
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064eb 	.word	0x080064eb
 80064b8:	080064db 	.word	0x080064db
 80064bc:	080064eb 	.word	0x080064eb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064eb 	.word	0x080064eb
 80064c8:	080064e3 	.word	0x080064e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fe f982 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 80064d0:	61f8      	str	r0, [r7, #28]
        break;
 80064d2:	e010      	b.n	80064f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d4:	4b8f      	ldr	r3, [pc, #572]	; (8006714 <UART_SetConfig+0x56c>)
 80064d6:	61fb      	str	r3, [r7, #28]
        break;
 80064d8:	e00d      	b.n	80064f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064da:	f7fe f8e3 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80064de:	61f8      	str	r0, [r7, #28]
        break;
 80064e0:	e009      	b.n	80064f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e6:	61fb      	str	r3, [r7, #28]
        break;
 80064e8:	e005      	b.n	80064f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80fb 	beq.w	80066f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	4413      	add	r3, r2
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	429a      	cmp	r2, r3
 800650c:	d305      	bcc.n	800651a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	429a      	cmp	r2, r3
 8006518:	d903      	bls.n	8006522 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006520:	e0e8      	b.n	80066f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2200      	movs	r2, #0
 8006526:	461c      	mov	r4, r3
 8006528:	4615      	mov	r5, r2
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	022b      	lsls	r3, r5, #8
 8006534:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006538:	0222      	lsls	r2, r4, #8
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	6849      	ldr	r1, [r1, #4]
 800653e:	0849      	lsrs	r1, r1, #1
 8006540:	2000      	movs	r0, #0
 8006542:	4688      	mov	r8, r1
 8006544:	4681      	mov	r9, r0
 8006546:	eb12 0a08 	adds.w	sl, r2, r8
 800654a:	eb43 0b09 	adc.w	fp, r3, r9
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655c:	4650      	mov	r0, sl
 800655e:	4659      	mov	r1, fp
 8006560:	f7fa fba2 	bl	8000ca8 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4613      	mov	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006572:	d308      	bcc.n	8006586 <UART_SetConfig+0x3de>
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657a:	d204      	bcs.n	8006586 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	60da      	str	r2, [r3, #12]
 8006584:	e0b6      	b.n	80066f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800658c:	e0b2      	b.n	80066f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006596:	d15e      	bne.n	8006656 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800659c:	2b08      	cmp	r3, #8
 800659e:	d828      	bhi.n	80065f2 <UART_SetConfig+0x44a>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x400>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe f902 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 80065d0:	61f8      	str	r0, [r7, #28]
        break;
 80065d2:	e014      	b.n	80065fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe f914 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 80065d8:	61f8      	str	r0, [r7, #28]
        break;
 80065da:	e010      	b.n	80065fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b4d      	ldr	r3, [pc, #308]	; (8006714 <UART_SetConfig+0x56c>)
 80065de:	61fb      	str	r3, [r7, #28]
        break;
 80065e0:	e00d      	b.n	80065fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe f85f 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80065e6:	61f8      	str	r0, [r7, #28]
        break;
 80065e8:	e009      	b.n	80065fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ee:	61fb      	str	r3, [r7, #28]
        break;
 80065f0:	e005      	b.n	80065fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d077      	beq.n	80066f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	005a      	lsls	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	441a      	add	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b0f      	cmp	r3, #15
 800661e:	d916      	bls.n	800664e <UART_SetConfig+0x4a6>
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d212      	bcs.n	800664e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f023 030f 	bic.w	r3, r3, #15
 8006630:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	b29a      	uxth	r2, r3
 800663e:	8afb      	ldrh	r3, [r7, #22]
 8006640:	4313      	orrs	r3, r2
 8006642:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	8afa      	ldrh	r2, [r7, #22]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	e052      	b.n	80066f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006654:	e04e      	b.n	80066f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800665a:	2b08      	cmp	r3, #8
 800665c:	d827      	bhi.n	80066ae <UART_SetConfig+0x506>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x4bc>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	080066af 	.word	0x080066af
 8006674:	0800669f 	.word	0x0800669f
 8006678:	080066af 	.word	0x080066af
 800667c:	080066af 	.word	0x080066af
 8006680:	080066af 	.word	0x080066af
 8006684:	080066a7 	.word	0x080066a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fe f8a4 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 800668c:	61f8      	str	r0, [r7, #28]
        break;
 800668e:	e014      	b.n	80066ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7fe f8b6 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8006694:	61f8      	str	r0, [r7, #28]
        break;
 8006696:	e010      	b.n	80066ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b1e      	ldr	r3, [pc, #120]	; (8006714 <UART_SetConfig+0x56c>)
 800669a:	61fb      	str	r3, [r7, #28]
        break;
 800669c:	e00d      	b.n	80066ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fe f801 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80066a2:	61f8      	str	r0, [r7, #28]
        break;
 80066a4:	e009      	b.n	80066ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	61fb      	str	r3, [r7, #28]
        break;
 80066ac:	e005      	b.n	80066ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066b8:	bf00      	nop
    }

    if (pclk != 0U)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	085a      	lsrs	r2, r3, #1
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	441a      	add	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	d909      	bls.n	80066ee <UART_SetConfig+0x546>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d205      	bcs.n	80066ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60da      	str	r2, [r3, #12]
 80066ec:	e002      	b.n	80066f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006704:	4618      	mov	r0, r3
 8006706:	3728      	adds	r7, #40	; 0x28
 8006708:	46bd      	mov	sp, r7
 800670a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800670e:	bf00      	nop
 8006710:	40008000 	.word	0x40008000
 8006714:	00f42400 	.word	0x00f42400

08006718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01a      	beq.n	800682e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006816:	d10a      	bne.n	800682e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800686c:	f7fc f8e2 	bl	8002a34 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d10e      	bne.n	800689e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f82d 	bl	80068ee <UART_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e023      	b.n	80068e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d10e      	bne.n	80068ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f817 	bl	80068ee <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00d      	b.n	80068e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b09c      	sub	sp, #112	; 0x70
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fe:	e0a5      	b.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	f000 80a1 	beq.w	8006a4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7fc f893 	bl	8002a34 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <UART_WaitOnFlagUntilTimeout+0x32>
 800691a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800691c:	2b00      	cmp	r3, #0
 800691e:	d13e      	bne.n	800699e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006934:	667b      	str	r3, [r7, #100]	; 0x64
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006940:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800694c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e6      	bne.n	8006920 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	663b      	str	r3, [r7, #96]	; 0x60
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006972:	64ba      	str	r2, [r7, #72]	; 0x48
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e067      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04f      	beq.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ba:	d147      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
 80069e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e6      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a18:	623a      	str	r2, [r7, #32]
 8006a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69f9      	ldr	r1, [r7, #28]
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e5      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e010      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4013      	ands	r3, r2
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2301      	moveq	r3, #1
 8006a5e:	2300      	movne	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	f43f af4a 	beq.w	8006900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3770      	adds	r7, #112	; 0x70
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b097      	sub	sp, #92	; 0x5c
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aaa:	d10e      	bne.n	8006aca <UART_Start_Receive_IT+0x52>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <UART_Start_Receive_IT+0x48>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006abe:	e02d      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	22ff      	movs	r2, #255	; 0xff
 8006ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac8:	e028      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <UART_Start_Receive_IT+0x76>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <UART_Start_Receive_IT+0x6c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae2:	e01b      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	227f      	movs	r2, #127	; 0x7f
 8006ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aec:	e016      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af6:	d10d      	bne.n	8006b14 <UART_Start_Receive_IT+0x9c>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <UART_Start_Receive_IT+0x92>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	227f      	movs	r2, #127	; 0x7f
 8006b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b08:	e008      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	223f      	movs	r2, #63	; 0x3f
 8006b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b12:	e003      	b.n	8006b1c <UART_Start_Receive_IT+0xa4>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2222      	movs	r2, #34	; 0x22
 8006b28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	657b      	str	r3, [r7, #84]	; 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e5      	bne.n	8006b2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b66:	d107      	bne.n	8006b78 <UART_Start_Receive_IT+0x100>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <UART_Start_Receive_IT+0x18c>)
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64
 8006b76:	e002      	b.n	8006b7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <UART_Start_Receive_IT+0x190>)
 8006b7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d019      	beq.n	8006bc2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
 8006bae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e6      	bne.n	8006b8e <UART_Start_Receive_IT+0x116>
 8006bc0:	e018      	b.n	8006bf4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f043 0320 	orr.w	r3, r3, #32
 8006bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	69f9      	ldr	r1, [r7, #28]
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e6      	bne.n	8006bc2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	375c      	adds	r7, #92	; 0x5c
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	0800702b 	.word	0x0800702b
 8006c08:	08006ecb 	.word	0x08006ecb

08006c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b095      	sub	sp, #84	; 0x54
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c32:	643b      	str	r3, [r7, #64]	; 0x40
 8006c34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d118      	bne.n	8006cb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0310 	bic.w	r3, r3, #16
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	613b      	str	r3, [r7, #16]
   return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006cc6:	bf00      	nop
 8006cc8:	3754      	adds	r7, #84	; 0x54
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff fa43 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b08f      	sub	sp, #60	; 0x3c
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d0a:	2b21      	cmp	r3, #33	; 0x21
 8006d0c:	d14d      	bne.n	8006daa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d132      	bne.n	8006d80 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	613b      	str	r3, [r7, #16]
   return(result);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e6      	bne.n	8006d4c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d7e:	e014      	b.n	8006daa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006daa:	bf00      	nop
 8006dac:	373c      	adds	r7, #60	; 0x3c
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b091      	sub	sp, #68	; 0x44
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc2:	2b21      	cmp	r3, #33	; 0x21
 8006dc4:	d151      	bne.n	8006e6a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d132      	bne.n	8006e38 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	623b      	str	r3, [r7, #32]
   return(result);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
 8006df2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	69b9      	ldr	r1, [r7, #24]
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e6      	bne.n	8006e04 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e36:	e018      	b.n	8006e6a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	881a      	ldrh	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	1c9a      	adds	r2, r3, #2
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e6a:	bf00      	nop
 8006e6c:	3744      	adds	r7, #68	; 0x44
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b088      	sub	sp, #32
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa fdf7 	bl	8001ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec2:	bf00      	nop
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b096      	sub	sp, #88	; 0x58
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ed8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee0:	2b22      	cmp	r3, #34	; 0x22
 8006ee2:	f040 8094 	bne.w	800700e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006eec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ef0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ef4:	b2d9      	uxtb	r1, r3
 8006ef6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f00:	400a      	ands	r2, r1
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d179      	bne.n	8007022 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f42:	653b      	str	r3, [r7, #80]	; 0x50
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e6      	bne.n	8006f2e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f80:	633a      	str	r2, [r7, #48]	; 0x30
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d12e      	bne.n	8007006 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	69b9      	ldr	r1, [r7, #24]
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d103      	bne.n	8006ff6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff f8c6 	bl	8006190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007004:	e00d      	b.n	8007022 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa fff6 	bl	8001ff8 <HAL_UART_RxCpltCallback>
}
 800700c:	e009      	b.n	8007022 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	8b1b      	ldrh	r3, [r3, #24]
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0208 	orr.w	r2, r2, #8
 800701e:	b292      	uxth	r2, r2
 8007020:	831a      	strh	r2, [r3, #24]
}
 8007022:	bf00      	nop
 8007024:	3758      	adds	r7, #88	; 0x58
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b096      	sub	sp, #88	; 0x58
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007038:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007040:	2b22      	cmp	r3, #34	; 0x22
 8007042:	f040 8094 	bne.w	800716e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800704c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007056:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800705a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800705e:	4013      	ands	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007064:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	1c9a      	adds	r2, r3, #2
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d179      	bne.n	8007182 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ac:	643b      	str	r3, [r7, #64]	; 0x40
 80070ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e6      	bne.n	800708e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e5      	bne.n	80070c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007104:	2b01      	cmp	r3, #1
 8007106:	d12e      	bne.n	8007166 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	60bb      	str	r3, [r7, #8]
   return(result);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f023 0310 	bic.w	r3, r3, #16
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6979      	ldr	r1, [r7, #20]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	613b      	str	r3, [r7, #16]
   return(result);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b10      	cmp	r3, #16
 800714c:	d103      	bne.n	8007156 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2210      	movs	r2, #16
 8007154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff f816 	bl	8006190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007164:	e00d      	b.n	8007182 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa ff46 	bl	8001ff8 <HAL_UART_RxCpltCallback>
}
 800716c:	e009      	b.n	8007182 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	8b1b      	ldrh	r3, [r3, #24]
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	b292      	uxth	r2, r2
 8007180:	831a      	strh	r2, [r3, #24]
}
 8007182:	bf00      	nop
 8007184:	3758      	adds	r7, #88	; 0x58
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <__NVIC_SetPriority>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	db0a      	blt.n	80071ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	490c      	ldr	r1, [pc, #48]	; (80071ec <__NVIC_SetPriority+0x4c>)
 80071ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071be:	0112      	lsls	r2, r2, #4
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	440b      	add	r3, r1
 80071c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071c8:	e00a      	b.n	80071e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4908      	ldr	r1, [pc, #32]	; (80071f0 <__NVIC_SetPriority+0x50>)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	3b04      	subs	r3, #4
 80071d8:	0112      	lsls	r2, r2, #4
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	440b      	add	r3, r1
 80071de:	761a      	strb	r2, [r3, #24]
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	e000e100 	.word	0xe000e100
 80071f0:	e000ed00 	.word	0xe000ed00

080071f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <SysTick_Handler+0x1c>)
 80071fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071fc:	f002 fa22 	bl	8009644 <xTaskGetSchedulerState>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d001      	beq.n	800720a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007206:	f003 f907 	bl	800a418 <xPortSysTickHandler>
  }
}
 800720a:	bf00      	nop
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	e000e010 	.word	0xe000e010

08007214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007218:	2100      	movs	r1, #0
 800721a:	f06f 0004 	mvn.w	r0, #4
 800721e:	f7ff ffbf 	bl	80071a0 <__NVIC_SetPriority>
#endif
}
 8007222:	bf00      	nop
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800722e:	f3ef 8305 	mrs	r3, IPSR
 8007232:	603b      	str	r3, [r7, #0]
  return(result);
 8007234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800723a:	f06f 0305 	mvn.w	r3, #5
 800723e:	607b      	str	r3, [r7, #4]
 8007240:	e00c      	b.n	800725c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <osKernelInitialize+0x44>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800724a:	4b08      	ldr	r3, [pc, #32]	; (800726c <osKernelInitialize+0x44>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007250:	2300      	movs	r3, #0
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	e002      	b.n	800725c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295
 800725a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800725c:	687b      	ldr	r3, [r7, #4]
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000bf0 	.word	0x20000bf0

08007270 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007276:	f3ef 8305 	mrs	r3, IPSR
 800727a:	603b      	str	r3, [r7, #0]
  return(result);
 800727c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007282:	f06f 0305 	mvn.w	r3, #5
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	e010      	b.n	80072ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <osKernelStart+0x48>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d109      	bne.n	80072a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007292:	f7ff ffbf 	bl	8007214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <osKernelStart+0x48>)
 8007298:	2202      	movs	r2, #2
 800729a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800729c:	f001 fd8a 	bl	8008db4 <vTaskStartScheduler>
      stat = osOK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e002      	b.n	80072ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072a6:	f04f 33ff 	mov.w	r3, #4294967295
 80072aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072ac:	687b      	ldr	r3, [r7, #4]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000bf0 	.word	0x20000bf0

080072bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08e      	sub	sp, #56	; 0x38
 80072c0:	af04      	add	r7, sp, #16
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072cc:	f3ef 8305 	mrs	r3, IPSR
 80072d0:	617b      	str	r3, [r7, #20]
  return(result);
 80072d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d17e      	bne.n	80073d6 <osThreadNew+0x11a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d07b      	beq.n	80073d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072de:	2380      	movs	r3, #128	; 0x80
 80072e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072e2:	2318      	movs	r3, #24
 80072e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
 80072ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d045      	beq.n	8007382 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <osThreadNew+0x48>
        name = attr->name;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <osThreadNew+0x6e>
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b38      	cmp	r3, #56	; 0x38
 800731c:	d805      	bhi.n	800732a <osThreadNew+0x6e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <osThreadNew+0x72>
        return (NULL);
 800732a:	2300      	movs	r3, #0
 800732c:	e054      	b.n	80073d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <osThreadNew+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b5b      	cmp	r3, #91	; 0x5b
 800734c:	d90a      	bls.n	8007364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <osThreadNew+0xa8>
        mem = 1;
 800735e:	2301      	movs	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e010      	b.n	8007386 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <osThreadNew+0xca>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d108      	bne.n	8007386 <osThreadNew+0xca>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <osThreadNew+0xca>
          mem = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	e001      	b.n	8007386 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d110      	bne.n	80073ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007394:	9202      	str	r2, [sp, #8]
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f001 fb64 	bl	8008a70 <xTaskCreateStatic>
 80073a8:	4603      	mov	r3, r0
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	e013      	b.n	80073d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d110      	bne.n	80073d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f107 0310 	add.w	r3, r7, #16
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f001 fbaf 	bl	8008b2a <xTaskCreate>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d001      	beq.n	80073d6 <osThreadNew+0x11a>
            hTask = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073d6:	693b      	ldr	r3, [r7, #16]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3728      	adds	r7, #40	; 0x28
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f0:	f3ef 8305 	mrs	r3, IPSR
 80073f4:	613b      	str	r3, [r7, #16]
  return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d175      	bne.n	80074e8 <osSemaphoreNew+0x108>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d072      	beq.n	80074e8 <osSemaphoreNew+0x108>
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	429a      	cmp	r2, r3
 8007408:	d86e      	bhi.n	80074e8 <osSemaphoreNew+0x108>
    mem = -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d015      	beq.n	8007442 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <osSemaphoreNew+0x4c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b4f      	cmp	r3, #79	; 0x4f
 8007424:	d902      	bls.n	800742c <osSemaphoreNew+0x4c>
        mem = 1;
 8007426:	2301      	movs	r3, #1
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	e00c      	b.n	8007446 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <osSemaphoreNew+0x66>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <osSemaphoreNew+0x66>
          mem = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e001      	b.n	8007446 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d04c      	beq.n	80074e8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d128      	bne.n	80074a6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d10a      	bne.n	8007470 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2203      	movs	r2, #3
 8007460:	9200      	str	r2, [sp, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	2001      	movs	r0, #1
 8007468:	f000 fb5c 	bl	8007b24 <xQueueGenericCreateStatic>
 800746c:	61f8      	str	r0, [r7, #28]
 800746e:	e005      	b.n	800747c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007470:	2203      	movs	r2, #3
 8007472:	2100      	movs	r1, #0
 8007474:	2001      	movs	r0, #1
 8007476:	f000 fbcd 	bl	8007c14 <xQueueGenericCreate>
 800747a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d022      	beq.n	80074c8 <osSemaphoreNew+0xe8>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01f      	beq.n	80074c8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007488:	2300      	movs	r3, #0
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	69f8      	ldr	r0, [r7, #28]
 8007490:	f000 fc88 	bl	8007da4 <xQueueGenericSend>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d016      	beq.n	80074c8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800749a:	69f8      	ldr	r0, [r7, #28]
 800749c:	f001 f914 	bl	80086c8 <vQueueDelete>
            hSemaphore = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e010      	b.n	80074c8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d108      	bne.n	80074be <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	461a      	mov	r2, r3
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fc0a 	bl	8007cce <xQueueCreateCountingSemaphoreStatic>
 80074ba:	61f8      	str	r0, [r7, #28]
 80074bc:	e004      	b.n	80074c8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fc3b 	bl	8007d3c <xQueueCreateCountingSemaphore>
 80074c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00c      	beq.n	80074e8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <osSemaphoreNew+0xfc>
          name = attr->name;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e001      	b.n	80074e0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074e0:	6979      	ldr	r1, [r7, #20]
 80074e2:	69f8      	ldr	r0, [r7, #28]
 80074e4:	f001 fa3c 	bl	8008960 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074e8:	69fb      	ldr	r3, [r7, #28]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800750c:	f06f 0303 	mvn.w	r3, #3
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e039      	b.n	8007588 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007514:	f3ef 8305 	mrs	r3, IPSR
 8007518:	60fb      	str	r3, [r7, #12]
  return(result);
 800751a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800751c:	2b00      	cmp	r3, #0
 800751e:	d022      	beq.n	8007566 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007526:	f06f 0303 	mvn.w	r3, #3
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e02c      	b.n	8007588 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	461a      	mov	r2, r3
 8007538:	2100      	movs	r1, #0
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f001 f844 	bl	80085c8 <xQueueReceiveFromISR>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d003      	beq.n	800754e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007546:	f06f 0302 	mvn.w	r3, #2
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e01c      	b.n	8007588 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d019      	beq.n	8007588 <osSemaphoreAcquire+0x94>
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <osSemaphoreAcquire+0xa0>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	e010      	b.n	8007588 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6938      	ldr	r0, [r7, #16]
 800756a:	f000 ff21 	bl	80083b0 <xQueueSemaphoreTake>
 800756e:	4603      	mov	r3, r0
 8007570:	2b01      	cmp	r3, #1
 8007572:	d009      	beq.n	8007588 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800757a:	f06f 0301 	mvn.w	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e002      	b.n	8007588 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007582:	f06f 0302 	mvn.w	r3, #2
 8007586:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007588:	697b      	ldr	r3, [r7, #20]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80075ae:	f06f 0303 	mvn.w	r3, #3
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e02c      	b.n	8007610 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b6:	f3ef 8305 	mrs	r3, IPSR
 80075ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80075bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01a      	beq.n	80075f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	4619      	mov	r1, r3
 80075cc:	6938      	ldr	r0, [r7, #16]
 80075ce:	f000 fd82 	bl	80080d6 <xQueueGiveFromISR>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d003      	beq.n	80075e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80075d8:	f06f 0302 	mvn.w	r3, #2
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e017      	b.n	8007610 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d014      	beq.n	8007610 <osSemaphoreRelease+0x78>
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <osSemaphoreRelease+0x84>)
 80075e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	e00b      	b.n	8007610 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075f8:	2300      	movs	r3, #0
 80075fa:	2200      	movs	r2, #0
 80075fc:	2100      	movs	r1, #0
 80075fe:	6938      	ldr	r0, [r7, #16]
 8007600:	f000 fbd0 	bl	8007da4 <xQueueGenericSend>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d002      	beq.n	8007610 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800760a:	f06f 0302 	mvn.w	r3, #2
 800760e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007610:	697b      	ldr	r3, [r7, #20]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007630:	f3ef 8305 	mrs	r3, IPSR
 8007634:	613b      	str	r3, [r7, #16]
  return(result);
 8007636:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007638:	2b00      	cmp	r3, #0
 800763a:	d15f      	bne.n	80076fc <osMessageQueueNew+0xdc>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d05c      	beq.n	80076fc <osMessageQueueNew+0xdc>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d059      	beq.n	80076fc <osMessageQueueNew+0xdc>
    mem = -1;
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d029      	beq.n	80076a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d012      	beq.n	8007682 <osMessageQueueNew+0x62>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b4f      	cmp	r3, #79	; 0x4f
 8007662:	d90e      	bls.n	8007682 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	429a      	cmp	r2, r3
 800767a:	d302      	bcc.n	8007682 <osMessageQueueNew+0x62>
        mem = 1;
 800767c:	2301      	movs	r3, #1
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e014      	b.n	80076ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d110      	bne.n	80076ac <osMessageQueueNew+0x8c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10c      	bne.n	80076ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <osMessageQueueNew+0x8c>
          mem = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e001      	b.n	80076ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10b      	bne.n	80076ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2100      	movs	r1, #0
 80076bc:	9100      	str	r1, [sp, #0]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fa2f 	bl	8007b24 <xQueueGenericCreateStatic>
 80076c6:	61f8      	str	r0, [r7, #28]
 80076c8:	e008      	b.n	80076dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80076d0:	2200      	movs	r2, #0
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fa9d 	bl	8007c14 <xQueueGenericCreate>
 80076da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	e001      	b.n	80076f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	69f8      	ldr	r0, [r7, #28]
 80076f8:	f001 f932 	bl	8008960 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80076fc:	69fb      	ldr	r3, [r7, #28]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800771c:	2300      	movs	r3, #0
 800771e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007720:	f3ef 8305 	mrs	r3, IPSR
 8007724:	617b      	str	r3, [r7, #20]
  return(result);
 8007726:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007728:	2b00      	cmp	r3, #0
 800772a:	d028      	beq.n	800777e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <osMessageQueuePut+0x36>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <osMessageQueuePut+0x36>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800773e:	f06f 0303 	mvn.w	r3, #3
 8007742:	61fb      	str	r3, [r7, #28]
 8007744:	e038      	b.n	80077b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800774a:	f107 0210 	add.w	r2, r7, #16
 800774e:	2300      	movs	r3, #0
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	69b8      	ldr	r0, [r7, #24]
 8007754:	f000 fc24 	bl	8007fa0 <xQueueGenericSendFromISR>
 8007758:	4603      	mov	r3, r0
 800775a:	2b01      	cmp	r3, #1
 800775c:	d003      	beq.n	8007766 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800775e:	f06f 0302 	mvn.w	r3, #2
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e028      	b.n	80077b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d025      	beq.n	80077b8 <osMessageQueuePut+0xb0>
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <osMessageQueuePut+0xbc>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	e01c      	b.n	80077b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <osMessageQueuePut+0x82>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800778a:	f06f 0303 	mvn.w	r3, #3
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e012      	b.n	80077b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007792:	2300      	movs	r3, #0
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	69b8      	ldr	r0, [r7, #24]
 800779a:	f000 fb03 	bl	8007da4 <xQueueGenericSend>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d009      	beq.n	80077b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80077aa:	f06f 0301 	mvn.w	r3, #1
 80077ae:	61fb      	str	r3, [r7, #28]
 80077b0:	e002      	b.n	80077b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80077b2:	f06f 0302 	mvn.w	r3, #2
 80077b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077b8:	69fb      	ldr	r3, [r7, #28]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	e000ed04 	.word	0xe000ed04

080077c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077de:	f3ef 8305 	mrs	r3, IPSR
 80077e2:	617b      	str	r3, [r7, #20]
  return(result);
 80077e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d028      	beq.n	800783c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <osMessageQueueGet+0x34>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <osMessageQueueGet+0x34>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80077fc:	f06f 0303 	mvn.w	r3, #3
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e037      	b.n	8007874 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007808:	f107 0310 	add.w	r3, r7, #16
 800780c:	461a      	mov	r2, r3
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	69b8      	ldr	r0, [r7, #24]
 8007812:	f000 fed9 	bl	80085c8 <xQueueReceiveFromISR>
 8007816:	4603      	mov	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d003      	beq.n	8007824 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800781c:	f06f 0302 	mvn.w	r3, #2
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	e027      	b.n	8007874 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d024      	beq.n	8007874 <osMessageQueueGet+0xac>
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <osMessageQueueGet+0xb8>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	e01b      	b.n	8007874 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <osMessageQueueGet+0x80>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007848:	f06f 0303 	mvn.w	r3, #3
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	e011      	b.n	8007874 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	69b8      	ldr	r0, [r7, #24]
 8007856:	f000 fccb 	bl	80081f0 <xQueueReceive>
 800785a:	4603      	mov	r3, r0
 800785c:	2b01      	cmp	r3, #1
 800785e:	d009      	beq.n	8007874 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007866:	f06f 0301 	mvn.w	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e002      	b.n	8007874 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800786e:	f06f 0302 	mvn.w	r3, #2
 8007872:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007874:	69fb      	ldr	r3, [r7, #28]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <vApplicationGetIdleTaskMemory+0x30>)
 800789a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2280      	movs	r2, #128	; 0x80
 80078a0:	601a      	str	r2, [r3, #0]
}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000bf4 	.word	0x20000bf4
 80078b4:	20000c50 	.word	0x20000c50

080078b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80078c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4a06      	ldr	r2, [pc, #24]	; (80078e8 <vApplicationGetTimerTaskMemory+0x30>)
 80078ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078d6:	601a      	str	r2, [r3, #0]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	20000e50 	.word	0x20000e50
 80078e8:	20000eac 	.word	0x20000eac

080078ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f103 0208 	add.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f103 0208 	add.w	r2, r3, #8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f103 0208 	add.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d103      	bne.n	80079ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e00c      	b.n	80079c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3308      	adds	r3, #8
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <vListInsert+0x2e>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d2f6      	bcs.n	80079b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6892      	ldr	r2, [r2, #8]
 8007a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6852      	ldr	r2, [r2, #4]
 8007a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d103      	bne.n	8007a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a7e:	f002 fc39 	bl	800a2f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	441a      	add	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ab4:	fb01 f303 	mul.w	r3, r1, r3
 8007ab8:	441a      	add	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	22ff      	movs	r2, #255	; 0xff
 8007aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d114      	bne.n	8007afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01a      	beq.n	8007b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3310      	adds	r3, #16
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 fbf1 	bl	80092c8 <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <xQueueGenericReset+0xcc>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	e009      	b.n	8007b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3310      	adds	r3, #16
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fef2 	bl	80078ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff feed 	bl	80078ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b12:	f002 fc1f 	bl	800a354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b16:	2301      	movs	r3, #1
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <xQueueGenericCreateStatic+0x52>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <xQueueGenericCreateStatic+0x56>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <xQueueGenericCreateStatic+0x58>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	623b      	str	r3, [r7, #32]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <xQueueGenericCreateStatic+0x7e>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGenericCreateStatic+0x82>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericCreateStatic+0x84>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	61fb      	str	r3, [r7, #28]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bc2:	2350      	movs	r3, #80	; 0x50
 8007bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b50      	cmp	r3, #80	; 0x50
 8007bca:	d00a      	beq.n	8007be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	61bb      	str	r3, [r7, #24]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007be2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f83f 	bl	8007c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3730      	adds	r7, #48	; 0x30
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	fb02 f303 	mul.w	r3, r2, r3
 8007c46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3350      	adds	r3, #80	; 0x50
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f002 fc73 	bl	800a538 <pvPortMalloc>
 8007c52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	3350      	adds	r3, #80	; 0x50
 8007c62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c6c:	79fa      	ldrb	r2, [r7, #7]
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	4613      	mov	r3, r2
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f805 	bl	8007c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d103      	bne.n	8007ca4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e002      	b.n	8007caa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	69b8      	ldr	r0, [r7, #24]
 8007cba:	f7ff fecb 	bl	8007a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b08a      	sub	sp, #40	; 0x28
 8007cd2:	af02      	add	r7, sp, #8
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61bb      	str	r3, [r7, #24]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d90a      	bls.n	8007d14 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d14:	2302      	movs	r3, #2
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff00 	bl	8007b24 <xQueueGenericCreateStatic>
 8007d24:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d32:	69fb      	ldr	r3, [r7, #28]
	}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	613b      	str	r3, [r7, #16]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d90a      	bls.n	8007d80 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	60fb      	str	r3, [r7, #12]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d80:	2202      	movs	r2, #2
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff45 	bl	8007c14 <xQueueGenericCreate>
 8007d8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d98:	697b      	ldr	r3, [r7, #20]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <xQueueGenericSend+0x32>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <xQueueGenericSend+0x40>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <xQueueGenericSend+0x44>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <xQueueGenericSend+0x46>
 8007de8:	2300      	movs	r3, #0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <xQueueGenericSend+0x60>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d103      	bne.n	8007e12 <xQueueGenericSend+0x6e>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <xQueueGenericSend+0x72>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <xQueueGenericSend+0x74>
 8007e16:	2300      	movs	r3, #0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e32:	f001 fc07 	bl	8009644 <xTaskGetSchedulerState>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <xQueueGenericSend+0x9e>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <xQueueGenericSend+0xa2>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueGenericSend+0xa4>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61fb      	str	r3, [r7, #28]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e62:	f002 fa47 	bl	800a2f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d302      	bcc.n	8007e78 <xQueueGenericSend+0xd4>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d129      	bne.n	8007ecc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fc5e 	bl	800873e <prvCopyDataToQueue>
 8007e82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	3324      	adds	r3, #36	; 0x24
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fa19 	bl	80092c8 <xTaskRemoveFromEventList>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d013      	beq.n	8007ec4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e9c:	4b3f      	ldr	r3, [pc, #252]	; (8007f9c <xQueueGenericSend+0x1f8>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	e00a      	b.n	8007ec4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d007      	beq.n	8007ec4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eb4:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <xQueueGenericSend+0x1f8>)
 8007eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ec4:	f002 fa46 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e063      	b.n	8007f94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ed2:	f002 fa3f 	bl	800a354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e05c      	b.n	8007f94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ee0:	f107 0314 	add.w	r3, r7, #20
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 fa53 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eea:	2301      	movs	r3, #1
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eee:	f002 fa31 	bl	800a354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ef2:	f000 ffc5 	bl	8008e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef6:	f002 f9fd 	bl	800a2f4 <vPortEnterCritical>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f00:	b25b      	sxtb	r3, r3
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d103      	bne.n	8007f10 <xQueueGenericSend+0x16c>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d103      	bne.n	8007f26 <xQueueGenericSend+0x182>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f26:	f002 fa15 	bl	800a354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f2a:	1d3a      	adds	r2, r7, #4
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	4611      	mov	r1, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fa42 	bl	80093bc <xTaskCheckForTimeOut>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d124      	bne.n	8007f88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f40:	f000 fcf5 	bl	800892e <prvIsQueueFull>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 f968 	bl	8009228 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f5a:	f000 fc80 	bl	800885e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f5e:	f000 ff9d 	bl	8008e9c <xTaskResumeAll>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f af7c 	bne.w	8007e62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <xQueueGenericSend+0x1f8>)
 8007f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	e772      	b.n	8007e62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f7e:	f000 fc6e 	bl	800885e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f82:	f000 ff8b 	bl	8008e9c <xTaskResumeAll>
 8007f86:	e76c      	b.n	8007e62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8a:	f000 fc68 	bl	800885e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f8e:	f000 ff85 	bl	8008e9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3738      	adds	r7, #56	; 0x38
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b090      	sub	sp, #64	; 0x40
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fca:	bf00      	nop
 8007fcc:	e7fe      	b.n	8007fcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <xQueueGenericSendFromISR+0x3c>
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueGenericSendFromISR+0x40>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueGenericSendFromISR+0x42>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d103      	bne.n	800800a <xQueueGenericSendFromISR+0x6a>
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <xQueueGenericSendFromISR+0x6e>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueGenericSendFromISR+0x70>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	623b      	str	r3, [r7, #32]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800802a:	f002 fa45 	bl	800a4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800802e:	f3ef 8211 	mrs	r2, BASEPRI
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	61fa      	str	r2, [r7, #28]
 8008044:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008046:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	429a      	cmp	r2, r3
 8008054:	d302      	bcc.n	800805c <xQueueGenericSendFromISR+0xbc>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d12f      	bne.n	80080bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008072:	f000 fb64 	bl	800873e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008076:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d112      	bne.n	80080a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	d016      	beq.n	80080b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	3324      	adds	r3, #36	; 0x24
 800808c:	4618      	mov	r0, r3
 800808e:	f001 f91b 	bl	80092c8 <xTaskRemoveFromEventList>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00e      	beq.n	80080b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e007      	b.n	80080b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080aa:	3301      	adds	r3, #1
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	b25a      	sxtb	r2, r3
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080b6:	2301      	movs	r3, #1
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080ba:	e001      	b.n	80080c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3740      	adds	r7, #64	; 0x40
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b08e      	sub	sp, #56	; 0x38
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	623b      	str	r3, [r7, #32]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <xQueueGiveFromISR+0x48>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	61fb      	str	r3, [r7, #28]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <xQueueGiveFromISR+0x58>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <xQueueGiveFromISR+0x5c>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueGiveFromISR+0x5e>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	61bb      	str	r3, [r7, #24]
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800814e:	f002 f9b3 	bl	800a4b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008152:	f3ef 8211 	mrs	r2, BASEPRI
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	617a      	str	r2, [r7, #20]
 8008168:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800816a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817a:	429a      	cmp	r2, r3
 800817c:	d22b      	bcs.n	80081d6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d112      	bne.n	80081c0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d016      	beq.n	80081d0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	3324      	adds	r3, #36	; 0x24
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f88e 	bl	80092c8 <xTaskRemoveFromEventList>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00e      	beq.n	80081d0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e007      	b.n	80081d0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081c4:	3301      	adds	r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	b25a      	sxtb	r2, r3
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081d0:	2301      	movs	r3, #1
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
 80081d4:	e001      	b.n	80081da <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f383 8811 	msr	BASEPRI, r3
}
 80081e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3738      	adds	r7, #56	; 0x38
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081fc:	2300      	movs	r3, #0
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <xQueueReceive+0x30>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	623b      	str	r3, [r7, #32]
}
 800821c:	bf00      	nop
 800821e:	e7fe      	b.n	800821e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <xQueueReceive+0x3e>
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <xQueueReceive+0x42>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <xQueueReceive+0x44>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xQueueReceive+0x5e>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	61fb      	str	r3, [r7, #28]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800824e:	f001 f9f9 	bl	8009644 <xTaskGetSchedulerState>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <xQueueReceive+0x6e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <xQueueReceive+0x72>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <xQueueReceive+0x74>
 8008262:	2300      	movs	r3, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xQueueReceive+0x8e>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	61bb      	str	r3, [r7, #24]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800827e:	f002 f839 	bl	800a2f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01f      	beq.n	80082ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008292:	f000 fabe 	bl	8008812 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	1e5a      	subs	r2, r3, #1
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00f      	beq.n	80082c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	3310      	adds	r3, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f80c 	bl	80092c8 <xTaskRemoveFromEventList>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082b6:	4b3d      	ldr	r3, [pc, #244]	; (80083ac <xQueueReceive+0x1bc>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082c6:	f002 f845 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e069      	b.n	80083a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082d4:	f002 f83e 	bl	800a354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082d8:	2300      	movs	r3, #0
 80082da:	e062      	b.n	80083a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082e2:	f107 0310 	add.w	r3, r7, #16
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 f852 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082f0:	f002 f830 	bl	800a354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082f4:	f000 fdc4 	bl	8008e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082f8:	f001 fffc 	bl	800a2f4 <vPortEnterCritical>
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008302:	b25b      	sxtb	r3, r3
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d103      	bne.n	8008312 <xQueueReceive+0x122>
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008318:	b25b      	sxtb	r3, r3
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d103      	bne.n	8008328 <xQueueReceive+0x138>
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008328:	f002 f814 	bl	800a354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800832c:	1d3a      	adds	r2, r7, #4
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f001 f841 	bl	80093bc <xTaskCheckForTimeOut>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d123      	bne.n	8008388 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f000 fade 	bl	8008902 <prvIsQueueEmpty>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d017      	beq.n	800837c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f000 ff67 	bl	8009228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800835a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835c:	f000 fa7f 	bl	800885e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008360:	f000 fd9c 	bl	8008e9c <xTaskResumeAll>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d189      	bne.n	800827e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800836a:	4b10      	ldr	r3, [pc, #64]	; (80083ac <xQueueReceive+0x1bc>)
 800836c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	e780      	b.n	800827e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800837c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837e:	f000 fa6e 	bl	800885e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008382:	f000 fd8b 	bl	8008e9c <xTaskResumeAll>
 8008386:	e77a      	b.n	800827e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838a:	f000 fa68 	bl	800885e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800838e:	f000 fd85 	bl	8008e9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008394:	f000 fab5 	bl	8008902 <prvIsQueueEmpty>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	f43f af6f 	beq.w	800827e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3730      	adds	r7, #48	; 0x30
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	; 0x38
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083c2:	2300      	movs	r3, #0
 80083c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	623b      	str	r3, [r7, #32]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	61fb      	str	r3, [r7, #28]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008400:	f001 f920 	bl	8009644 <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xQueueSemaphoreTake+0x60>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <xQueueSemaphoreTake+0x64>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <xQueueSemaphoreTake+0x66>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61bb      	str	r3, [r7, #24]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008430:	f001 ff60 	bl	800a2f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d024      	beq.n	800848a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008450:	f001 fa6e 	bl	8009930 <pvTaskIncrementMutexHeldCount>
 8008454:	4602      	mov	r2, r0
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00f      	beq.n	8008482 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	3310      	adds	r3, #16
 8008466:	4618      	mov	r0, r3
 8008468:	f000 ff2e 	bl	80092c8 <xTaskRemoveFromEventList>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008472:	4b54      	ldr	r3, [pc, #336]	; (80085c4 <xQueueSemaphoreTake+0x214>)
 8008474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008482:	f001 ff67 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 8008486:	2301      	movs	r3, #1
 8008488:	e097      	b.n	80085ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d111      	bne.n	80084b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	617b      	str	r3, [r7, #20]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084ac:	f001 ff52 	bl	800a354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084b0:	2300      	movs	r3, #0
 80084b2:	e082      	b.n	80085ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084ba:	f107 030c 	add.w	r3, r7, #12
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 ff66 	bl	8009390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084c8:	f001 ff44 	bl	800a354 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084cc:	f000 fcd8 	bl	8008e80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084d0:	f001 ff10 	bl	800a2f4 <vPortEnterCritical>
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d103      	bne.n	80084ea <xQueueSemaphoreTake+0x13a>
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d103      	bne.n	8008500 <xQueueSemaphoreTake+0x150>
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008500:	f001 ff28 	bl	800a354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008504:	463a      	mov	r2, r7
 8008506:	f107 030c 	add.w	r3, r7, #12
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f000 ff55 	bl	80093bc <xTaskCheckForTimeOut>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d132      	bne.n	800857e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800851a:	f000 f9f2 	bl	8008902 <prvIsQueueEmpty>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d026      	beq.n	8008572 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d109      	bne.n	8008540 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800852c:	f001 fee2 	bl	800a2f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f001 f8a3 	bl	8009680 <xTaskPriorityInherit>
 800853a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800853c:	f001 ff0a 	bl	800a354 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	3324      	adds	r3, #36	; 0x24
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fe6d 	bl	8009228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800854e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008550:	f000 f985 	bl	800885e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008554:	f000 fca2 	bl	8008e9c <xTaskResumeAll>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	f47f af68 	bne.w	8008430 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008560:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <xQueueSemaphoreTake+0x214>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e75e      	b.n	8008430 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008574:	f000 f973 	bl	800885e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008578:	f000 fc90 	bl	8008e9c <xTaskResumeAll>
 800857c:	e758      	b.n	8008430 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800857e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008580:	f000 f96d 	bl	800885e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008584:	f000 fc8a 	bl	8008e9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800858a:	f000 f9ba 	bl	8008902 <prvIsQueueEmpty>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	f43f af4d 	beq.w	8008430 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00d      	beq.n	80085b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800859c:	f001 feaa 	bl	800a2f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80085a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085a2:	f000 f8b4 	bl	800870e <prvGetDisinheritPriorityAfterTimeout>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 f93c 	bl	800982c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085b4:	f001 fece 	bl	800a354 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3738      	adds	r7, #56	; 0x38
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08e      	sub	sp, #56	; 0x38
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	623b      	str	r3, [r7, #32]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <xQueueReceiveFromISR+0x3a>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <xQueueReceiveFromISR+0x3e>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xQueueReceiveFromISR+0x40>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	61fb      	str	r3, [r7, #28]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008622:	f001 ff49 	bl	800a4b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008626:	f3ef 8211 	mrs	r2, BASEPRI
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	61ba      	str	r2, [r7, #24]
 800863c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800863e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d02f      	beq.n	80086ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800865c:	f000 f8d9 	bl	8008812 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	1e5a      	subs	r2, r3, #1
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008668:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800866c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008670:	d112      	bne.n	8008698 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d016      	beq.n	80086a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	3310      	adds	r3, #16
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fe22 	bl	80092c8 <xTaskRemoveFromEventList>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e007      	b.n	80086a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800869c:	3301      	adds	r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	b25a      	sxtb	r2, r3
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80086a8:	2301      	movs	r3, #1
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
 80086ac:	e001      	b.n	80086b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f383 8811 	msr	BASEPRI, r3
}
 80086bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3738      	adds	r7, #56	; 0x38
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <vQueueDelete+0x28>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f95f 	bl	80089b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 ffe5 	bl	800a6d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d006      	beq.n	800872c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e001      	b.n	8008730 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008730:	68fb      	ldr	r3, [r7, #12]
	}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d14d      	bne.n	8008800 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fff1 	bl	8009750 <xTaskPriorityDisinherit>
 800876e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]
 8008776:	e043      	b.n	8008800 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d119      	bne.n	80087b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6858      	ldr	r0, [r3, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	461a      	mov	r2, r3
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	f002 f8e9 	bl	800a960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	441a      	add	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d32b      	bcc.n	8008800 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]
 80087b0:	e026      	b.n	8008800 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68d8      	ldr	r0, [r3, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	461a      	mov	r2, r3
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	f002 f8cf 	bl	800a960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	425b      	negs	r3, r3
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d207      	bcs.n	80087ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	425b      	negs	r3, r3
 80087e8:	441a      	add	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d105      	bne.n	8008800 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008808:	697b      	ldr	r3, [r7, #20]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d018      	beq.n	8008856 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	441a      	add	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d303      	bcc.n	8008846 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68d9      	ldr	r1, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	461a      	mov	r2, r3
 8008850:	6838      	ldr	r0, [r7, #0]
 8008852:	f002 f885 	bl	800a960 <memcpy>
	}
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008866:	f001 fd45 	bl	800a2f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008870:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008872:	e011      	b.n	8008898 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3324      	adds	r3, #36	; 0x24
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fd21 	bl	80092c8 <xTaskRemoveFromEventList>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800888c:	f000 fdf8 	bl	8009480 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	3b01      	subs	r3, #1
 8008894:	b2db      	uxtb	r3, r3
 8008896:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dce9      	bgt.n	8008874 <prvUnlockQueue+0x16>
 80088a0:	e000      	b.n	80088a4 <prvUnlockQueue+0x46>
					break;
 80088a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	22ff      	movs	r2, #255	; 0xff
 80088a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088ac:	f001 fd52 	bl	800a354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088b0:	f001 fd20 	bl	800a2f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088bc:	e011      	b.n	80088e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d012      	beq.n	80088ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3310      	adds	r3, #16
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fcfc 	bl	80092c8 <xTaskRemoveFromEventList>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088d6:	f000 fdd3 	bl	8009480 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	3b01      	subs	r3, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dce9      	bgt.n	80088be <prvUnlockQueue+0x60>
 80088ea:	e000      	b.n	80088ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088f6:	f001 fd2d 	bl	800a354 <vPortExitCritical>
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800890a:	f001 fcf3 	bl	800a2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	e001      	b.n	8008920 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008920:	f001 fd18 	bl	800a354 <vPortExitCritical>

	return xReturn;
 8008924:	68fb      	ldr	r3, [r7, #12]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008936:	f001 fcdd 	bl	800a2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	429a      	cmp	r2, r3
 8008944:	d102      	bne.n	800894c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008946:	2301      	movs	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e001      	b.n	8008950 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008950:	f001 fd00 	bl	800a354 <vPortExitCritical>

	return xReturn;
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e014      	b.n	800899a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008970:	4a0f      	ldr	r2, [pc, #60]	; (80089b0 <vQueueAddToRegistry+0x50>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10b      	bne.n	8008994 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800897c:	490c      	ldr	r1, [pc, #48]	; (80089b0 <vQueueAddToRegistry+0x50>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008986:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <vQueueAddToRegistry+0x50>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	4413      	add	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008992:	e006      	b.n	80089a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b07      	cmp	r3, #7
 800899e:	d9e7      	bls.n	8008970 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089a0:	bf00      	nop
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200012ac 	.word	0x200012ac

080089b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e016      	b.n	80089f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089c2:	4a10      	ldr	r2, [pc, #64]	; (8008a04 <vQueueUnregisterQueue+0x50>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4413      	add	r3, r2
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d10b      	bne.n	80089ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <vQueueUnregisterQueue+0x50>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2100      	movs	r1, #0
 80089d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089dc:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <vQueueUnregisterQueue+0x50>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	2200      	movs	r2, #0
 80089e6:	605a      	str	r2, [r3, #4]
				break;
 80089e8:	e006      	b.n	80089f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b07      	cmp	r3, #7
 80089f4:	d9e5      	bls.n	80089c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	200012ac 	.word	0x200012ac

08008a08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a18:	f001 fc6c 	bl	800a2f4 <vPortEnterCritical>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d103      	bne.n	8008a32 <vQueueWaitForMessageRestricted+0x2a>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d103      	bne.n	8008a48 <vQueueWaitForMessageRestricted+0x40>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a48:	f001 fc84 	bl	800a354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3324      	adds	r3, #36	; 0x24
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 fc07 	bl	8009270 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a62:	6978      	ldr	r0, [r7, #20]
 8008a64:	f7ff fefb 	bl	800885e <prvUnlockQueue>
	}
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	; 0x38
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	623b      	str	r3, [r7, #32]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	61fb      	str	r3, [r7, #28]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ab6:	235c      	movs	r3, #92	; 0x5c
 8008ab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b5c      	cmp	r3, #92	; 0x5c
 8008abe:	d00a      	beq.n	8008ad6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	61bb      	str	r3, [r7, #24]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ad6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01e      	beq.n	8008b1c <xTaskCreateStatic+0xac>
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01b      	beq.n	8008b1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2202      	movs	r2, #2
 8008af2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008af6:	2300      	movs	r3, #0
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f850 	bl	8008bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b16:	f000 f8dd 	bl	8008cd4 <prvAddNewTaskToReadyList>
 8008b1a:	e001      	b.n	8008b20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b20:	697b      	ldr	r3, [r7, #20]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	; 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b08c      	sub	sp, #48	; 0x30
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fcfa 	bl	800a538 <pvPortMalloc>
 8008b44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00e      	beq.n	8008b6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b4c:	205c      	movs	r0, #92	; 0x5c
 8008b4e:	f001 fcf3 	bl	800a538 <pvPortMalloc>
 8008b52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b60:	e005      	b.n	8008b6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f001 fdb4 	bl	800a6d0 <vPortFree>
 8008b68:	e001      	b.n	8008b6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d017      	beq.n	8008ba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b7c:	88fa      	ldrh	r2, [r7, #6]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f80e 	bl	8008bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b98:	69f8      	ldr	r0, [r7, #28]
 8008b9a:	f000 f89b 	bl	8008cd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e002      	b.n	8008baa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008baa:	69bb      	ldr	r3, [r7, #24]
	}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	461a      	mov	r2, r3
 8008bcc:	21a5      	movs	r1, #165	; 0xa5
 8008bce:	f001 fed5 	bl	800a97c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f023 0307 	bic.w	r3, r3, #7
 8008bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	617b      	str	r3, [r7, #20]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01f      	beq.n	8008c52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e012      	b.n	8008c3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	7819      	ldrb	r1, [r3, #0]
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	3334      	adds	r3, #52	; 0x34
 8008c28:	460a      	mov	r2, r1
 8008c2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2b0f      	cmp	r3, #15
 8008c42:	d9e9      	bls.n	8008c18 <prvInitialiseNewTask+0x64>
 8008c44:	e000      	b.n	8008c48 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c50:	e003      	b.n	8008c5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	2b37      	cmp	r3, #55	; 0x37
 8008c5e:	d901      	bls.n	8008c64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c60:	2337      	movs	r3, #55	; 0x37
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	2200      	movs	r2, #0
 8008c74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fe56 	bl	800792c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	3318      	adds	r3, #24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fe51 	bl	800792c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	68f9      	ldr	r1, [r7, #12]
 8008cb2:	69b8      	ldr	r0, [r7, #24]
 8008cb4:	f001 f9f2 	bl	800a09c <pxPortInitialiseStack>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cca:	bf00      	nop
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cdc:	f001 fb0a 	bl	800a2f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <prvAddNewTaskToReadyList+0xc4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	4a2c      	ldr	r2, [pc, #176]	; (8008d98 <prvAddNewTaskToReadyList+0xc4>)
 8008ce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cea:	4b2c      	ldr	r3, [pc, #176]	; (8008d9c <prvAddNewTaskToReadyList+0xc8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cf2:	4a2a      	ldr	r2, [pc, #168]	; (8008d9c <prvAddNewTaskToReadyList+0xc8>)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cf8:	4b27      	ldr	r3, [pc, #156]	; (8008d98 <prvAddNewTaskToReadyList+0xc4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d110      	bne.n	8008d22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d00:	f000 fbe2 	bl	80094c8 <prvInitialiseTaskLists>
 8008d04:	e00d      	b.n	8008d22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d06:	4b26      	ldr	r3, [pc, #152]	; (8008da0 <prvAddNewTaskToReadyList+0xcc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <prvAddNewTaskToReadyList+0xc8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d802      	bhi.n	8008d22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <prvAddNewTaskToReadyList+0xc8>)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d22:	4b20      	ldr	r3, [pc, #128]	; (8008da4 <prvAddNewTaskToReadyList+0xd0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3301      	adds	r3, #1
 8008d28:	4a1e      	ldr	r2, [pc, #120]	; (8008da4 <prvAddNewTaskToReadyList+0xd0>)
 8008d2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d2c:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <prvAddNewTaskToReadyList+0xd0>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d38:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <prvAddNewTaskToReadyList+0xd4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d903      	bls.n	8008d48 <prvAddNewTaskToReadyList+0x74>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <prvAddNewTaskToReadyList+0xd4>)
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4a15      	ldr	r2, [pc, #84]	; (8008dac <prvAddNewTaskToReadyList+0xd8>)
 8008d56:	441a      	add	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7fe fdf1 	bl	8007946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d64:	f001 faf6 	bl	800a354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <prvAddNewTaskToReadyList+0xcc>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00e      	beq.n	8008d8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <prvAddNewTaskToReadyList+0xc8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d207      	bcs.n	8008d8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d7e:	4b0c      	ldr	r3, [pc, #48]	; (8008db0 <prvAddNewTaskToReadyList+0xdc>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200017c0 	.word	0x200017c0
 8008d9c:	200012ec 	.word	0x200012ec
 8008da0:	200017cc 	.word	0x200017cc
 8008da4:	200017dc 	.word	0x200017dc
 8008da8:	200017c8 	.word	0x200017c8
 8008dac:	200012f0 	.word	0x200012f0
 8008db0:	e000ed04 	.word	0xe000ed04

08008db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	1d39      	adds	r1, r7, #4
 8008dc6:	f107 0308 	add.w	r3, r7, #8
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fd5a 	bl	8007884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	9202      	str	r2, [sp, #8]
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	2300      	movs	r3, #0
 8008de0:	460a      	mov	r2, r1
 8008de2:	4921      	ldr	r1, [pc, #132]	; (8008e68 <vTaskStartScheduler+0xb4>)
 8008de4:	4821      	ldr	r0, [pc, #132]	; (8008e6c <vTaskStartScheduler+0xb8>)
 8008de6:	f7ff fe43 	bl	8008a70 <xTaskCreateStatic>
 8008dea:	4603      	mov	r3, r0
 8008dec:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <vTaskStartScheduler+0xbc>)
 8008dee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008df0:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <vTaskStartScheduler+0xbc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e001      	b.n	8008e02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d102      	bne.n	8008e0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e08:	f000 fdfa 	bl	8009a00 <xTimerCreateTimerTask>
 8008e0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d116      	bne.n	8008e42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	613b      	str	r3, [r7, #16]
}
 8008e26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e28:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <vTaskStartScheduler+0xc0>)
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e30:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <vTaskStartScheduler+0xc4>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <vTaskStartScheduler+0xc8>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e3c:	f001 f9b8 	bl	800a1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e40:	e00e      	b.n	8008e60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d10a      	bne.n	8008e60 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	60fb      	str	r3, [r7, #12]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <vTaskStartScheduler+0xaa>
}
 8008e60:	bf00      	nop
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	08010648 	.word	0x08010648
 8008e6c:	08009499 	.word	0x08009499
 8008e70:	200017e4 	.word	0x200017e4
 8008e74:	200017e0 	.word	0x200017e0
 8008e78:	200017cc 	.word	0x200017cc
 8008e7c:	200017c4 	.word	0x200017c4

08008e80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <vTaskSuspendAll+0x18>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	4a03      	ldr	r2, [pc, #12]	; (8008e98 <vTaskSuspendAll+0x18>)
 8008e8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e8e:	bf00      	nop
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	200017e8 	.word	0x200017e8

08008e9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eaa:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <xTaskResumeAll+0x118>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	603b      	str	r3, [r7, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ec8:	f001 fa14 	bl	800a2f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ecc:	4b39      	ldr	r3, [pc, #228]	; (8008fb4 <xTaskResumeAll+0x118>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4a38      	ldr	r2, [pc, #224]	; (8008fb4 <xTaskResumeAll+0x118>)
 8008ed4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ed6:	4b37      	ldr	r3, [pc, #220]	; (8008fb4 <xTaskResumeAll+0x118>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d162      	bne.n	8008fa4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ede:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <xTaskResumeAll+0x11c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d05e      	beq.n	8008fa4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ee6:	e02f      	b.n	8008f48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee8:	4b34      	ldr	r3, [pc, #208]	; (8008fbc <xTaskResumeAll+0x120>)
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3318      	adds	r3, #24
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fd83 	bl	8007a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe fd7e 	bl	8007a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <xTaskResumeAll+0x124>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d903      	bls.n	8008f18 <xTaskResumeAll+0x7c>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	4a2a      	ldr	r2, [pc, #168]	; (8008fc0 <xTaskResumeAll+0x124>)
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <xTaskResumeAll+0x128>)
 8008f26:	441a      	add	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fe fd09 	bl	8007946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	4b23      	ldr	r3, [pc, #140]	; (8008fc8 <xTaskResumeAll+0x12c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d302      	bcc.n	8008f48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f42:	4b22      	ldr	r3, [pc, #136]	; (8008fcc <xTaskResumeAll+0x130>)
 8008f44:	2201      	movs	r2, #1
 8008f46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f48:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <xTaskResumeAll+0x120>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1cb      	bne.n	8008ee8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f56:	f000 fb55 	bl	8009604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f5a:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <xTaskResumeAll+0x134>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f66:	f000 f847 	bl	8008ff8 <xTaskIncrementTick>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f70:	4b16      	ldr	r3, [pc, #88]	; (8008fcc <xTaskResumeAll+0x130>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f1      	bne.n	8008f66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <xTaskResumeAll+0x134>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f88:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <xTaskResumeAll+0x130>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d009      	beq.n	8008fa4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f90:	2301      	movs	r3, #1
 8008f92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f94:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <xTaskResumeAll+0x138>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fa4:	f001 f9d6 	bl	800a354 <vPortExitCritical>

	return xAlreadyYielded;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200017e8 	.word	0x200017e8
 8008fb8:	200017c0 	.word	0x200017c0
 8008fbc:	20001780 	.word	0x20001780
 8008fc0:	200017c8 	.word	0x200017c8
 8008fc4:	200012f0 	.word	0x200012f0
 8008fc8:	200012ec 	.word	0x200012ec
 8008fcc:	200017d4 	.word	0x200017d4
 8008fd0:	200017d0 	.word	0x200017d0
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <xTaskGetTickCount+0x1c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fe4:	687b      	ldr	r3, [r7, #4]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200017c4 	.word	0x200017c4

08008ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009002:	4b4f      	ldr	r3, [pc, #316]	; (8009140 <xTaskIncrementTick+0x148>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f040 808f 	bne.w	800912a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800900c:	4b4d      	ldr	r3, [pc, #308]	; (8009144 <xTaskIncrementTick+0x14c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3301      	adds	r3, #1
 8009012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009014:	4a4b      	ldr	r2, [pc, #300]	; (8009144 <xTaskIncrementTick+0x14c>)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d120      	bne.n	8009062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009020:	4b49      	ldr	r3, [pc, #292]	; (8009148 <xTaskIncrementTick+0x150>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <xTaskIncrementTick+0x48>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <xTaskIncrementTick+0x46>
 8009040:	4b41      	ldr	r3, [pc, #260]	; (8009148 <xTaskIncrementTick+0x150>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	4b41      	ldr	r3, [pc, #260]	; (800914c <xTaskIncrementTick+0x154>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a3f      	ldr	r2, [pc, #252]	; (8009148 <xTaskIncrementTick+0x150>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	4a3f      	ldr	r2, [pc, #252]	; (800914c <xTaskIncrementTick+0x154>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	4b3e      	ldr	r3, [pc, #248]	; (8009150 <xTaskIncrementTick+0x158>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a3d      	ldr	r2, [pc, #244]	; (8009150 <xTaskIncrementTick+0x158>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	f000 fad1 	bl	8009604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009062:	4b3c      	ldr	r3, [pc, #240]	; (8009154 <xTaskIncrementTick+0x15c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	429a      	cmp	r2, r3
 800906a:	d349      	bcc.n	8009100 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800906c:	4b36      	ldr	r3, [pc, #216]	; (8009148 <xTaskIncrementTick+0x150>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009076:	4b37      	ldr	r3, [pc, #220]	; (8009154 <xTaskIncrementTick+0x15c>)
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	601a      	str	r2, [r3, #0]
					break;
 800907e:	e03f      	b.n	8009100 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009080:	4b31      	ldr	r3, [pc, #196]	; (8009148 <xTaskIncrementTick+0x150>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	d203      	bcs.n	80090a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009098:	4a2e      	ldr	r2, [pc, #184]	; (8009154 <xTaskIncrementTick+0x15c>)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800909e:	e02f      	b.n	8009100 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fcab 	bl	8007a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	3318      	adds	r3, #24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fca2 	bl	8007a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	4b25      	ldr	r3, [pc, #148]	; (8009158 <xTaskIncrementTick+0x160>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d903      	bls.n	80090d0 <xTaskIncrementTick+0xd8>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a22      	ldr	r2, [pc, #136]	; (8009158 <xTaskIncrementTick+0x160>)
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4a1f      	ldr	r2, [pc, #124]	; (800915c <xTaskIncrementTick+0x164>)
 80090de:	441a      	add	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	f7fe fc2d 	bl	8007946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <xTaskIncrementTick+0x168>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d3b8      	bcc.n	800906c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090fa:	2301      	movs	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fe:	e7b5      	b.n	800906c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009100:	4b17      	ldr	r3, [pc, #92]	; (8009160 <xTaskIncrementTick+0x168>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	4915      	ldr	r1, [pc, #84]	; (800915c <xTaskIncrementTick+0x164>)
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d901      	bls.n	800911c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800911c:	4b11      	ldr	r3, [pc, #68]	; (8009164 <xTaskIncrementTick+0x16c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e004      	b.n	8009134 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800912a:	4b0f      	ldr	r3, [pc, #60]	; (8009168 <xTaskIncrementTick+0x170>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3301      	adds	r3, #1
 8009130:	4a0d      	ldr	r2, [pc, #52]	; (8009168 <xTaskIncrementTick+0x170>)
 8009132:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009134:	697b      	ldr	r3, [r7, #20]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	200017e8 	.word	0x200017e8
 8009144:	200017c4 	.word	0x200017c4
 8009148:	20001778 	.word	0x20001778
 800914c:	2000177c 	.word	0x2000177c
 8009150:	200017d8 	.word	0x200017d8
 8009154:	200017e0 	.word	0x200017e0
 8009158:	200017c8 	.word	0x200017c8
 800915c:	200012f0 	.word	0x200012f0
 8009160:	200012ec 	.word	0x200012ec
 8009164:	200017d4 	.word	0x200017d4
 8009168:	200017d0 	.word	0x200017d0

0800916c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009172:	4b28      	ldr	r3, [pc, #160]	; (8009214 <vTaskSwitchContext+0xa8>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800917a:	4b27      	ldr	r3, [pc, #156]	; (8009218 <vTaskSwitchContext+0xac>)
 800917c:	2201      	movs	r2, #1
 800917e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009180:	e041      	b.n	8009206 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009182:	4b25      	ldr	r3, [pc, #148]	; (8009218 <vTaskSwitchContext+0xac>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009188:	4b24      	ldr	r3, [pc, #144]	; (800921c <vTaskSwitchContext+0xb0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	e010      	b.n	80091b2 <vTaskSwitchContext+0x46>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10a      	bne.n	80091ac <vTaskSwitchContext+0x40>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	607b      	str	r3, [r7, #4]
}
 80091a8:	bf00      	nop
 80091aa:	e7fe      	b.n	80091aa <vTaskSwitchContext+0x3e>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	491b      	ldr	r1, [pc, #108]	; (8009220 <vTaskSwitchContext+0xb4>)
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	440b      	add	r3, r1
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0e4      	beq.n	8009190 <vTaskSwitchContext+0x24>
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4a13      	ldr	r2, [pc, #76]	; (8009220 <vTaskSwitchContext+0xb4>)
 80091d2:	4413      	add	r3, r2
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	605a      	str	r2, [r3, #4]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3308      	adds	r3, #8
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d104      	bne.n	80091f6 <vTaskSwitchContext+0x8a>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	4a09      	ldr	r2, [pc, #36]	; (8009224 <vTaskSwitchContext+0xb8>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	4a06      	ldr	r2, [pc, #24]	; (800921c <vTaskSwitchContext+0xb0>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6013      	str	r3, [r2, #0]
}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	200017e8 	.word	0x200017e8
 8009218:	200017d4 	.word	0x200017d4
 800921c:	200017c8 	.word	0x200017c8
 8009220:	200012f0 	.word	0x200012f0
 8009224:	200012ec 	.word	0x200012ec

08009228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60fb      	str	r3, [r7, #12]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800924e:	4b07      	ldr	r3, [pc, #28]	; (800926c <vTaskPlaceOnEventList+0x44>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3318      	adds	r3, #24
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fe fb99 	bl	800798e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800925c:	2101      	movs	r1, #1
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	f000 fb7a 	bl	8009958 <prvAddCurrentTaskToDelayedList>
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200012ec 	.word	0x200012ec

08009270 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	617b      	str	r3, [r7, #20]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3318      	adds	r3, #24
 800929e:	4619      	mov	r1, r3
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7fe fb50 	bl	8007946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092ac:	f04f 33ff 	mov.w	r3, #4294967295
 80092b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	68b8      	ldr	r0, [r7, #8]
 80092b6:	f000 fb4f 	bl	8009958 <prvAddCurrentTaskToDelayedList>
	}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200012ec 	.word	0x200012ec

080092c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	3318      	adds	r3, #24
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe fb81 	bl	8007a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092fe:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <xTaskRemoveFromEventList+0xb0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d11d      	bne.n	8009342 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	3304      	adds	r3, #4
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fb78 	bl	8007a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4b19      	ldr	r3, [pc, #100]	; (800937c <xTaskRemoveFromEventList+0xb4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d903      	bls.n	8009324 <xTaskRemoveFromEventList+0x5c>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a16      	ldr	r2, [pc, #88]	; (800937c <xTaskRemoveFromEventList+0xb4>)
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4a13      	ldr	r2, [pc, #76]	; (8009380 <xTaskRemoveFromEventList+0xb8>)
 8009332:	441a      	add	r2, r3
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7fe fb03 	bl	8007946 <vListInsertEnd>
 8009340:	e005      	b.n	800934e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3318      	adds	r3, #24
 8009346:	4619      	mov	r1, r3
 8009348:	480e      	ldr	r0, [pc, #56]	; (8009384 <xTaskRemoveFromEventList+0xbc>)
 800934a:	f7fe fafc 	bl	8007946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <xTaskRemoveFromEventList+0xc0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	429a      	cmp	r2, r3
 800935a:	d905      	bls.n	8009368 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800935c:	2301      	movs	r3, #1
 800935e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <xTaskRemoveFromEventList+0xc4>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e001      	b.n	800936c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800936c:	697b      	ldr	r3, [r7, #20]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200017e8 	.word	0x200017e8
 800937c:	200017c8 	.word	0x200017c8
 8009380:	200012f0 	.word	0x200012f0
 8009384:	20001780 	.word	0x20001780
 8009388:	200012ec 	.word	0x200012ec
 800938c:	200017d4 	.word	0x200017d4

08009390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <vTaskInternalSetTimeOutState+0x24>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <vTaskInternalSetTimeOutState+0x28>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	200017d8 	.word	0x200017d8
 80093b8:	200017c4 	.word	0x200017c4

080093bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	613b      	str	r3, [r7, #16]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60fb      	str	r3, [r7, #12]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093fe:	f000 ff79 	bl	800a2f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009402:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <xTaskCheckForTimeOut+0xbc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941a:	d102      	bne.n	8009422 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e023      	b.n	800946a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4b15      	ldr	r3, [pc, #84]	; (800947c <xTaskCheckForTimeOut+0xc0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d007      	beq.n	800943e <xTaskCheckForTimeOut+0x82>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	429a      	cmp	r2, r3
 8009436:	d302      	bcc.n	800943e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	e015      	b.n	800946a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	429a      	cmp	r2, r3
 8009446:	d20b      	bcs.n	8009460 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ff9b 	bl	8009390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	61fb      	str	r3, [r7, #28]
 800945e:	e004      	b.n	800946a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009466:	2301      	movs	r3, #1
 8009468:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800946a:	f000 ff73 	bl	800a354 <vPortExitCritical>

	return xReturn;
 800946e:	69fb      	ldr	r3, [r7, #28]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	200017c4 	.word	0x200017c4
 800947c:	200017d8 	.word	0x200017d8

08009480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <vTaskMissedYield+0x14>)
 8009486:	2201      	movs	r2, #1
 8009488:	601a      	str	r2, [r3, #0]
}
 800948a:	bf00      	nop
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	200017d4 	.word	0x200017d4

08009498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094a0:	f000 f852 	bl	8009548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <prvIdleTask+0x28>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d9f9      	bls.n	80094a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <prvIdleTask+0x2c>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094bc:	e7f0      	b.n	80094a0 <prvIdleTask+0x8>
 80094be:	bf00      	nop
 80094c0:	200012f0 	.word	0x200012f0
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
 80094d2:	e00c      	b.n	80094ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4a12      	ldr	r2, [pc, #72]	; (8009528 <prvInitialiseTaskLists+0x60>)
 80094e0:	4413      	add	r3, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fa02 	bl	80078ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3301      	adds	r3, #1
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b37      	cmp	r3, #55	; 0x37
 80094f2:	d9ef      	bls.n	80094d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094f4:	480d      	ldr	r0, [pc, #52]	; (800952c <prvInitialiseTaskLists+0x64>)
 80094f6:	f7fe f9f9 	bl	80078ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094fa:	480d      	ldr	r0, [pc, #52]	; (8009530 <prvInitialiseTaskLists+0x68>)
 80094fc:	f7fe f9f6 	bl	80078ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009500:	480c      	ldr	r0, [pc, #48]	; (8009534 <prvInitialiseTaskLists+0x6c>)
 8009502:	f7fe f9f3 	bl	80078ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009506:	480c      	ldr	r0, [pc, #48]	; (8009538 <prvInitialiseTaskLists+0x70>)
 8009508:	f7fe f9f0 	bl	80078ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800950c:	480b      	ldr	r0, [pc, #44]	; (800953c <prvInitialiseTaskLists+0x74>)
 800950e:	f7fe f9ed 	bl	80078ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009512:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <prvInitialiseTaskLists+0x78>)
 8009514:	4a05      	ldr	r2, [pc, #20]	; (800952c <prvInitialiseTaskLists+0x64>)
 8009516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <prvInitialiseTaskLists+0x7c>)
 800951a:	4a05      	ldr	r2, [pc, #20]	; (8009530 <prvInitialiseTaskLists+0x68>)
 800951c:	601a      	str	r2, [r3, #0]
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	200012f0 	.word	0x200012f0
 800952c:	20001750 	.word	0x20001750
 8009530:	20001764 	.word	0x20001764
 8009534:	20001780 	.word	0x20001780
 8009538:	20001794 	.word	0x20001794
 800953c:	200017ac 	.word	0x200017ac
 8009540:	20001778 	.word	0x20001778
 8009544:	2000177c 	.word	0x2000177c

08009548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800954e:	e019      	b.n	8009584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009550:	f000 fed0 	bl	800a2f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <prvCheckTasksWaitingTermination+0x50>)
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3304      	adds	r3, #4
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fa4d 	bl	8007a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009566:	4b0d      	ldr	r3, [pc, #52]	; (800959c <prvCheckTasksWaitingTermination+0x54>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3b01      	subs	r3, #1
 800956c:	4a0b      	ldr	r2, [pc, #44]	; (800959c <prvCheckTasksWaitingTermination+0x54>)
 800956e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <prvCheckTasksWaitingTermination+0x58>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3b01      	subs	r3, #1
 8009576:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <prvCheckTasksWaitingTermination+0x58>)
 8009578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800957a:	f000 feeb 	bl	800a354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f810 	bl	80095a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009584:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <prvCheckTasksWaitingTermination+0x58>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e1      	bne.n	8009550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800958c:	bf00      	nop
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001794 	.word	0x20001794
 800959c:	200017c0 	.word	0x200017c0
 80095a0:	200017a8 	.word	0x200017a8

080095a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d108      	bne.n	80095c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f888 	bl	800a6d0 <vPortFree>
				vPortFree( pxTCB );
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f885 	bl	800a6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095c6:	e018      	b.n	80095fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d103      	bne.n	80095da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 f87c 	bl	800a6d0 <vPortFree>
	}
 80095d8:	e00f      	b.n	80095fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d00a      	beq.n	80095fa <prvDeleteTCB+0x56>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <prvDeleteTCB+0x54>
	}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <prvResetNextTaskUnblockTime+0x38>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <prvResetNextTaskUnblockTime+0x3c>)
 8009616:	f04f 32ff 	mov.w	r2, #4294967295
 800961a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800961c:	e008      	b.n	8009630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <prvResetNextTaskUnblockTime+0x38>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4a04      	ldr	r2, [pc, #16]	; (8009640 <prvResetNextTaskUnblockTime+0x3c>)
 800962e:	6013      	str	r3, [r2, #0]
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	20001778 	.word	0x20001778
 8009640:	200017e0 	.word	0x200017e0

08009644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800964a:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <xTaskGetSchedulerState+0x34>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009652:	2301      	movs	r3, #1
 8009654:	607b      	str	r3, [r7, #4]
 8009656:	e008      	b.n	800966a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <xTaskGetSchedulerState+0x38>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009660:	2302      	movs	r3, #2
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e001      	b.n	800966a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800966a:	687b      	ldr	r3, [r7, #4]
	}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	200017cc 	.word	0x200017cc
 800967c:	200017e8 	.word	0x200017e8

08009680 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800968c:	2300      	movs	r3, #0
 800968e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d051      	beq.n	800973a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969a:	4b2a      	ldr	r3, [pc, #168]	; (8009744 <xTaskPriorityInherit+0xc4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d241      	bcs.n	8009728 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	db06      	blt.n	80096ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ac:	4b25      	ldr	r3, [pc, #148]	; (8009744 <xTaskPriorityInherit+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6959      	ldr	r1, [r3, #20]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <xTaskPriorityInherit+0xc8>)
 80096cc:	4413      	add	r3, r2
 80096ce:	4299      	cmp	r1, r3
 80096d0:	d122      	bne.n	8009718 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f992 	bl	8007a00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096dc:	4b19      	ldr	r3, [pc, #100]	; (8009744 <xTaskPriorityInherit+0xc4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	4b18      	ldr	r3, [pc, #96]	; (800974c <xTaskPriorityInherit+0xcc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d903      	bls.n	80096fa <xTaskPriorityInherit+0x7a>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a15      	ldr	r2, [pc, #84]	; (800974c <xTaskPriorityInherit+0xcc>)
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4a10      	ldr	r2, [pc, #64]	; (8009748 <xTaskPriorityInherit+0xc8>)
 8009708:	441a      	add	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7fe f918 	bl	8007946 <vListInsertEnd>
 8009716:	e004      	b.n	8009722 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <xTaskPriorityInherit+0xc4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	e008      	b.n	800973a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <xTaskPriorityInherit+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	429a      	cmp	r2, r3
 8009734:	d201      	bcs.n	800973a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009736:	2301      	movs	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800973a:	68fb      	ldr	r3, [r7, #12]
	}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	200012ec 	.word	0x200012ec
 8009748:	200012f0 	.word	0x200012f0
 800974c:	200017c8 	.word	0x200017c8

08009750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d056      	beq.n	8009814 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009766:	4b2e      	ldr	r3, [pc, #184]	; (8009820 <xTaskPriorityDisinherit+0xd0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	429a      	cmp	r2, r3
 800976e:	d00a      	beq.n	8009786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60bb      	str	r3, [r7, #8]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	1e5a      	subs	r2, r3, #1
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d02c      	beq.n	8009814 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d128      	bne.n	8009814 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	3304      	adds	r3, #4
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe f91a 	bl	8007a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <xTaskPriorityDisinherit+0xd4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d903      	bls.n	80097f4 <xTaskPriorityDisinherit+0xa4>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	4a0c      	ldr	r2, [pc, #48]	; (8009824 <xTaskPriorityDisinherit+0xd4>)
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4a09      	ldr	r2, [pc, #36]	; (8009828 <xTaskPriorityDisinherit+0xd8>)
 8009802:	441a      	add	r2, r3
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fe f89b 	bl	8007946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009814:	697b      	ldr	r3, [r7, #20]
	}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	200012ec 	.word	0x200012ec
 8009824:	200017c8 	.word	0x200017c8
 8009828:	200012f0 	.word	0x200012f0

0800982c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800983a:	2301      	movs	r3, #1
 800983c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d06a      	beq.n	800991a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60fb      	str	r3, [r7, #12]
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d902      	bls.n	8009872 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	e002      	b.n	8009878 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009876:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	429a      	cmp	r2, r3
 8009880:	d04b      	beq.n	800991a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	429a      	cmp	r2, r3
 800988a:	d146      	bne.n	800991a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800988c:	4b25      	ldr	r3, [pc, #148]	; (8009924 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	429a      	cmp	r2, r3
 8009894:	d10a      	bne.n	80098ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	60bb      	str	r3, [r7, #8]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	db04      	blt.n	80098ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	6959      	ldr	r1, [r3, #20]
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4a13      	ldr	r2, [pc, #76]	; (8009928 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80098da:	4413      	add	r3, r2
 80098dc:	4299      	cmp	r1, r3
 80098de:	d11c      	bne.n	800991a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe f88b 	bl	8007a00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d903      	bls.n	80098fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fa:	4a0c      	ldr	r2, [pc, #48]	; (800992c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4a07      	ldr	r2, [pc, #28]	; (8009928 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800990c:	441a      	add	r2, r3
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	3304      	adds	r3, #4
 8009912:	4619      	mov	r1, r3
 8009914:	4610      	mov	r0, r2
 8009916:	f7fe f816 	bl	8007946 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800991a:	bf00      	nop
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200012ec 	.word	0x200012ec
 8009928:	200012f0 	.word	0x200012f0
 800992c:	200017c8 	.word	0x200017c8

08009930 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009934:	4b07      	ldr	r3, [pc, #28]	; (8009954 <pvTaskIncrementMutexHeldCount+0x24>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d004      	beq.n	8009946 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <pvTaskIncrementMutexHeldCount+0x24>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009942:	3201      	adds	r2, #1
 8009944:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009946:	4b03      	ldr	r3, [pc, #12]	; (8009954 <pvTaskIncrementMutexHeldCount+0x24>)
 8009948:	681b      	ldr	r3, [r3, #0]
	}
 800994a:	4618      	mov	r0, r3
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200012ec 	.word	0x200012ec

08009958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009962:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009968:	4b20      	ldr	r3, [pc, #128]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3304      	adds	r3, #4
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe f846 	bl	8007a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d10a      	bne.n	8009992 <prvAddCurrentTaskToDelayedList+0x3a>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009982:	4b1a      	ldr	r3, [pc, #104]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4819      	ldr	r0, [pc, #100]	; (80099f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800998c:	f7fd ffdb 	bl	8007946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009990:	e026      	b.n	80099e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800999a:	4b14      	ldr	r3, [pc, #80]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d209      	bcs.n	80099be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099aa:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fd ffe9 	bl	800798e <vListInsert>
}
 80099bc:	e010      	b.n	80099e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099be:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <prvAddCurrentTaskToDelayedList+0x94>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f7fd ffdf 	bl	800798e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d202      	bcs.n	80099e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099da:	4a08      	ldr	r2, [pc, #32]	; (80099fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	6013      	str	r3, [r2, #0]
}
 80099e0:	bf00      	nop
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	200017c4 	.word	0x200017c4
 80099ec:	200012ec 	.word	0x200012ec
 80099f0:	200017ac 	.word	0x200017ac
 80099f4:	2000177c 	.word	0x2000177c
 80099f8:	20001778 	.word	0x20001778
 80099fc:	200017e0 	.word	0x200017e0

08009a00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a0a:	f000 fb07 	bl	800a01c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a0e:	4b1c      	ldr	r3, [pc, #112]	; (8009a80 <xTimerCreateTimerTask+0x80>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d021      	beq.n	8009a5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a1e:	1d3a      	adds	r2, r7, #4
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	f107 030c 	add.w	r3, r7, #12
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd ff45 	bl	80078b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	9202      	str	r2, [sp, #8]
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	2302      	movs	r3, #2
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	460a      	mov	r2, r1
 8009a40:	4910      	ldr	r1, [pc, #64]	; (8009a84 <xTimerCreateTimerTask+0x84>)
 8009a42:	4811      	ldr	r0, [pc, #68]	; (8009a88 <xTimerCreateTimerTask+0x88>)
 8009a44:	f7ff f814 	bl	8008a70 <xTaskCreateStatic>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	4a10      	ldr	r2, [pc, #64]	; (8009a8c <xTimerCreateTimerTask+0x8c>)
 8009a4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <xTimerCreateTimerTask+0x8c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a56:	2301      	movs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	2000181c 	.word	0x2000181c
 8009a84:	08010650 	.word	0x08010650
 8009a88:	08009bc5 	.word	0x08009bc5
 8009a8c:	20001820 	.word	0x20001820

08009a90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	623b      	str	r3, [r7, #32]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009abe:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <xTimerGenericCommand+0x98>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d02a      	beq.n	8009b1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	dc18      	bgt.n	8009b0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ad8:	f7ff fdb4 	bl	8009644 <xTaskGetSchedulerState>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d109      	bne.n	8009af6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <xTimerGenericCommand+0x98>)
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	f107 0110 	add.w	r1, r7, #16
 8009aea:	2300      	movs	r3, #0
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	f7fe f959 	bl	8007da4 <xQueueGenericSend>
 8009af2:	6278      	str	r0, [r7, #36]	; 0x24
 8009af4:	e012      	b.n	8009b1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <xTimerGenericCommand+0x98>)
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f107 0110 	add.w	r1, r7, #16
 8009afe:	2300      	movs	r3, #0
 8009b00:	2200      	movs	r2, #0
 8009b02:	f7fe f94f 	bl	8007da4 <xQueueGenericSend>
 8009b06:	6278      	str	r0, [r7, #36]	; 0x24
 8009b08:	e008      	b.n	8009b1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b0a:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <xTimerGenericCommand+0x98>)
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f107 0110 	add.w	r1, r7, #16
 8009b12:	2300      	movs	r3, #0
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	f7fe fa43 	bl	8007fa0 <xQueueGenericSendFromISR>
 8009b1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3728      	adds	r7, #40	; 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	2000181c 	.word	0x2000181c

08009b2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <prvProcessExpiredTimer+0x94>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	3304      	adds	r3, #4
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd ff5b 	bl	8007a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d022      	beq.n	8009b9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	18d1      	adds	r1, r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	6978      	ldr	r0, [r7, #20]
 8009b66:	f000 f8d1 	bl	8009d0c <prvInsertTimerInActiveList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d01f      	beq.n	8009bb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6978      	ldr	r0, [r7, #20]
 8009b7c:	f7ff ff88 	bl	8009a90 <xTimerGenericCommand>
 8009b80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d113      	bne.n	8009bb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	6978      	ldr	r0, [r7, #20]
 8009bb6:	4798      	blx	r3
}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20001814 	.word	0x20001814

08009bc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f857 	bl	8009c84 <prvGetNextExpireTime>
 8009bd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f803 	bl	8009be8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009be2:	f000 f8d5 	bl	8009d90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009be6:	e7f1      	b.n	8009bcc <prvTimerTask+0x8>

08009be8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bf2:	f7ff f945 	bl	8008e80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bf6:	f107 0308 	add.w	r3, r7, #8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f866 	bl	8009ccc <prvSampleTimeNow>
 8009c00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d130      	bne.n	8009c6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d806      	bhi.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c16:	f7ff f941 	bl	8008e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff85 	bl	8009b2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c22:	e024      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <prvProcessTimerOrBlockTask+0x90>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <prvProcessTimerOrBlockTask+0x50>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <prvProcessTimerOrBlockTask+0x52>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <prvProcessTimerOrBlockTask+0x94>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7fe fedd 	bl	8008a08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c4e:	f7ff f925 	bl	8008e9c <xTaskResumeAll>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c58:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <prvProcessTimerOrBlockTask+0x98>)
 8009c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	f3bf 8f6f 	isb	sy
}
 8009c68:	e001      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c6a:	f7ff f917 	bl	8008e9c <xTaskResumeAll>
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20001818 	.word	0x20001818
 8009c7c:	2000181c 	.word	0x2000181c
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <prvGetNextExpireTime+0x44>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <prvGetNextExpireTime+0x16>
 8009c96:	2201      	movs	r2, #1
 8009c98:	e000      	b.n	8009c9c <prvGetNextExpireTime+0x18>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca8:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <prvGetNextExpireTime+0x44>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e001      	b.n	8009cb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20001814 	.word	0x20001814

08009ccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cd4:	f7ff f980 	bl	8008fd8 <xTaskGetTickCount>
 8009cd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <prvSampleTimeNow+0x3c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d205      	bcs.n	8009cf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ce4:	f000 f936 	bl	8009f54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e002      	b.n	8009cf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cf6:	4a04      	ldr	r2, [pc, #16]	; (8009d08 <prvSampleTimeNow+0x3c>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20001824 	.word	0x20001824

08009d0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d812      	bhi.n	8009d58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d302      	bcc.n	8009d46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e01b      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d46:	4b10      	ldr	r3, [pc, #64]	; (8009d88 <prvInsertTimerInActiveList+0x7c>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7fd fe1c 	bl	800798e <vListInsert>
 8009d56:	e012      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d206      	bcs.n	8009d6e <prvInsertTimerInActiveList+0x62>
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d302      	bcc.n	8009d6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e007      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvInsertTimerInActiveList+0x80>)
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fd fe08 	bl	800798e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20001818 	.word	0x20001818
 8009d8c:	20001814 	.word	0x20001814

08009d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08e      	sub	sp, #56	; 0x38
 8009d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d96:	e0ca      	b.n	8009f2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da18      	bge.n	8009dd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	3304      	adds	r3, #4
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	61fb      	str	r3, [r7, #28]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dc6:	6850      	ldr	r0, [r2, #4]
 8009dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dca:	6892      	ldr	r2, [r2, #8]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f2c0 80aa 	blt.w	8009f2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	3304      	adds	r3, #4
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fd fe09 	bl	8007a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dee:	463b      	mov	r3, r7
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff ff6b 	bl	8009ccc <prvSampleTimeNow>
 8009df6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	f200 8097 	bhi.w	8009f2e <prvProcessReceivedCommands+0x19e>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <prvProcessReceivedCommands+0x78>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009ea5 	.word	0x08009ea5
 8009e18:	08009eb9 	.word	0x08009eb9
 8009e1c:	08009f03 	.word	0x08009f03
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e31 	.word	0x08009e31
 8009e28:	08009ea5 	.word	0x08009ea5
 8009e2c:	08009eb9 	.word	0x08009eb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	18d1      	adds	r1, r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e50:	f7ff ff5c 	bl	8009d0c <prvInsertTimerInActiveList>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d069      	beq.n	8009f2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d05e      	beq.n	8009f2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	441a      	add	r2, r3
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e82:	f7ff fe05 	bl	8009a90 <xTimerGenericCommand>
 8009e86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d14f      	bne.n	8009f2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	61bb      	str	r3, [r7, #24]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eaa:	f023 0301 	bic.w	r3, r3, #1
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009eb6:	e03a      	b.n	8009f2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ebe:	f043 0301 	orr.w	r3, r3, #1
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10a      	bne.n	8009eee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	617b      	str	r3, [r7, #20]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	18d1      	adds	r1, r2, r3
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009efc:	f7ff ff06 	bl	8009d0c <prvInsertTimerInActiveList>
					break;
 8009f00:	e015      	b.n	8009f2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f12:	f000 fbdd 	bl	800a6d0 <vPortFree>
 8009f16:	e00a      	b.n	8009f2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f2a:	e000      	b.n	8009f2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f2e:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <prvProcessReceivedCommands+0x1c0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	1d39      	adds	r1, r7, #4
 8009f34:	2200      	movs	r2, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe f95a 	bl	80081f0 <xQueueReceive>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f47f af2a 	bne.w	8009d98 <prvProcessReceivedCommands+0x8>
	}
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	3730      	adds	r7, #48	; 0x30
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000181c 	.word	0x2000181c

08009f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f5a:	e048      	b.n	8009fee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f5c:	4b2d      	ldr	r3, [pc, #180]	; (800a014 <prvSwitchTimerLists+0xc0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f66:	4b2b      	ldr	r3, [pc, #172]	; (800a014 <prvSwitchTimerLists+0xc0>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd fd43 	bl	8007a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d02e      	beq.n	8009fee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4413      	add	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d90e      	bls.n	8009fc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <prvSwitchTimerLists+0xc0>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fd fce8 	bl	800798e <vListInsert>
 8009fbe:	e016      	b.n	8009fee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff fd60 	bl	8009a90 <xTimerGenericCommand>
 8009fd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	603b      	str	r3, [r7, #0]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <prvSwitchTimerLists+0xc0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1b1      	bne.n	8009f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <prvSwitchTimerLists+0xc0>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ffe:	4b06      	ldr	r3, [pc, #24]	; (800a018 <prvSwitchTimerLists+0xc4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a04      	ldr	r2, [pc, #16]	; (800a014 <prvSwitchTimerLists+0xc0>)
 800a004:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a006:	4a04      	ldr	r2, [pc, #16]	; (800a018 <prvSwitchTimerLists+0xc4>)
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	6013      	str	r3, [r2, #0]
}
 800a00c:	bf00      	nop
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20001814 	.word	0x20001814
 800a018:	20001818 	.word	0x20001818

0800a01c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a022:	f000 f967 	bl	800a2f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a026:	4b15      	ldr	r3, [pc, #84]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d120      	bne.n	800a070 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a02e:	4814      	ldr	r0, [pc, #80]	; (800a080 <prvCheckForValidListAndQueue+0x64>)
 800a030:	f7fd fc5c 	bl	80078ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a034:	4813      	ldr	r0, [pc, #76]	; (800a084 <prvCheckForValidListAndQueue+0x68>)
 800a036:	f7fd fc59 	bl	80078ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a03a:	4b13      	ldr	r3, [pc, #76]	; (800a088 <prvCheckForValidListAndQueue+0x6c>)
 800a03c:	4a10      	ldr	r2, [pc, #64]	; (800a080 <prvCheckForValidListAndQueue+0x64>)
 800a03e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <prvCheckForValidListAndQueue+0x70>)
 800a042:	4a10      	ldr	r2, [pc, #64]	; (800a084 <prvCheckForValidListAndQueue+0x68>)
 800a044:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a046:	2300      	movs	r3, #0
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4b11      	ldr	r3, [pc, #68]	; (800a090 <prvCheckForValidListAndQueue+0x74>)
 800a04c:	4a11      	ldr	r2, [pc, #68]	; (800a094 <prvCheckForValidListAndQueue+0x78>)
 800a04e:	2110      	movs	r1, #16
 800a050:	200a      	movs	r0, #10
 800a052:	f7fd fd67 	bl	8007b24 <xQueueGenericCreateStatic>
 800a056:	4603      	mov	r3, r0
 800a058:	4a08      	ldr	r2, [pc, #32]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a05a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	490b      	ldr	r1, [pc, #44]	; (800a098 <prvCheckForValidListAndQueue+0x7c>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fc78 	bl	8008960 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a070:	f000 f970 	bl	800a354 <vPortExitCritical>
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	2000181c 	.word	0x2000181c
 800a080:	200017ec 	.word	0x200017ec
 800a084:	20001800 	.word	0x20001800
 800a088:	20001814 	.word	0x20001814
 800a08c:	20001818 	.word	0x20001818
 800a090:	200018c8 	.word	0x200018c8
 800a094:	20001828 	.word	0x20001828
 800a098:	08010658 	.word	0x08010658

0800a09c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b04      	subs	r3, #4
 800a0ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f023 0201 	bic.w	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0cc:	4a0c      	ldr	r2, [pc, #48]	; (800a100 <pxPortInitialiseStack+0x64>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3b14      	subs	r3, #20
 800a0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b04      	subs	r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f06f 0202 	mvn.w	r2, #2
 800a0ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3b20      	subs	r3, #32
 800a0f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	0800a105 	.word	0x0800a105

0800a104 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a10e:	4b12      	ldr	r3, [pc, #72]	; (800a158 <prvTaskExitError+0x54>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d00a      	beq.n	800a12e <prvTaskExitError+0x2a>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	60fb      	str	r3, [r7, #12]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <prvTaskExitError+0x28>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	60bb      	str	r3, [r7, #8]
}
 800a140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a142:	bf00      	nop
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0fc      	beq.n	800a144 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a14a:	bf00      	nop
 800a14c:	bf00      	nop
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	2000001c 	.word	0x2000001c
 800a15c:	00000000 	.word	0x00000000

0800a160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a160:	4b07      	ldr	r3, [pc, #28]	; (800a180 <pxCurrentTCBConst2>)
 800a162:	6819      	ldr	r1, [r3, #0]
 800a164:	6808      	ldr	r0, [r1, #0]
 800a166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16a:	f380 8809 	msr	PSP, r0
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8811 	msr	BASEPRI, r0
 800a17a:	4770      	bx	lr
 800a17c:	f3af 8000 	nop.w

0800a180 <pxCurrentTCBConst2>:
 800a180:	200012ec 	.word	0x200012ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop

0800a188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a188:	4808      	ldr	r0, [pc, #32]	; (800a1ac <prvPortStartFirstTask+0x24>)
 800a18a:	6800      	ldr	r0, [r0, #0]
 800a18c:	6800      	ldr	r0, [r0, #0]
 800a18e:	f380 8808 	msr	MSP, r0
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8814 	msr	CONTROL, r0
 800a19a:	b662      	cpsie	i
 800a19c:	b661      	cpsie	f
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	df00      	svc	0
 800a1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1aa:	bf00      	nop
 800a1ac:	e000ed08 	.word	0xe000ed08

0800a1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1b6:	4b46      	ldr	r3, [pc, #280]	; (800a2d0 <xPortStartScheduler+0x120>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a46      	ldr	r2, [pc, #280]	; (800a2d4 <xPortStartScheduler+0x124>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d10a      	bne.n	800a1d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	613b      	str	r3, [r7, #16]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1d6:	4b3e      	ldr	r3, [pc, #248]	; (800a2d0 <xPortStartScheduler+0x120>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a3f      	ldr	r2, [pc, #252]	; (800a2d8 <xPortStartScheduler+0x128>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10a      	bne.n	800a1f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1f6:	4b39      	ldr	r3, [pc, #228]	; (800a2dc <xPortStartScheduler+0x12c>)
 800a1f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	22ff      	movs	r2, #255	; 0xff
 800a206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <xPortStartScheduler+0x130>)
 800a21c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a220:	2207      	movs	r2, #7
 800a222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a224:	e009      	b.n	800a23a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a226:	4b2f      	ldr	r3, [pc, #188]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4a2d      	ldr	r2, [pc, #180]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a22e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a242:	2b80      	cmp	r3, #128	; 0x80
 800a244:	d0ef      	beq.n	800a226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a246:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f1c3 0307 	rsb	r3, r3, #7
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d00a      	beq.n	800a268 <xPortStartScheduler+0xb8>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60bb      	str	r3, [r7, #8]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a272:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a27a:	4a1a      	ldr	r2, [pc, #104]	; (800a2e4 <xPortStartScheduler+0x134>)
 800a27c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a286:	4b18      	ldr	r3, [pc, #96]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a28c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a292:	4b15      	ldr	r3, [pc, #84]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <xPortStartScheduler+0x138>)
 800a298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a29c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a29e:	f000 f8dd 	bl	800a45c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2a2:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <xPortStartScheduler+0x13c>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2a8:	f000 f8fc 	bl	800a4a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2ac:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <xPortStartScheduler+0x140>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a0f      	ldr	r2, [pc, #60]	; (800a2f0 <xPortStartScheduler+0x140>)
 800a2b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2b8:	f7ff ff66 	bl	800a188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2bc:	f7fe ff56 	bl	800916c <vTaskSwitchContext>
	prvTaskExitError();
 800a2c0:	f7ff ff20 	bl	800a104 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	e000ed00 	.word	0xe000ed00
 800a2d4:	410fc271 	.word	0x410fc271
 800a2d8:	410fc270 	.word	0x410fc270
 800a2dc:	e000e400 	.word	0xe000e400
 800a2e0:	20001918 	.word	0x20001918
 800a2e4:	2000191c 	.word	0x2000191c
 800a2e8:	e000ed20 	.word	0xe000ed20
 800a2ec:	2000001c 	.word	0x2000001c
 800a2f0:	e000ef34 	.word	0xe000ef34

0800a2f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	607b      	str	r3, [r7, #4]
}
 800a30c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <vPortEnterCritical+0x58>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	4a0d      	ldr	r2, [pc, #52]	; (800a34c <vPortEnterCritical+0x58>)
 800a316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <vPortEnterCritical+0x58>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d10f      	bne.n	800a340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortEnterCritical+0x5c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <vPortEnterCritical+0x4c>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	603b      	str	r3, [r7, #0]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <vPortEnterCritical+0x4a>
	}
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	2000001c 	.word	0x2000001c
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a35a:	4b12      	ldr	r3, [pc, #72]	; (800a3a4 <vPortExitCritical+0x50>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <vPortExitCritical+0x24>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	607b      	str	r3, [r7, #4]
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <vPortExitCritical+0x50>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <vPortExitCritical+0x50>)
 800a380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <vPortExitCritical+0x50>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <vPortExitCritical+0x42>
 800a38a:	2300      	movs	r3, #0
 800a38c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	f383 8811 	msr	BASEPRI, r3
}
 800a394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	2000001c 	.word	0x2000001c
	...

0800a3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3b0:	f3ef 8009 	mrs	r0, PSP
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	4b15      	ldr	r3, [pc, #84]	; (800a410 <pxCurrentTCBConst>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	f01e 0f10 	tst.w	lr, #16
 800a3c0:	bf08      	it	eq
 800a3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ca:	6010      	str	r0, [r2, #0]
 800a3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a3d4:	f380 8811 	msr	BASEPRI, r0
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f7fe fec4 	bl	800916c <vTaskSwitchContext>
 800a3e4:	f04f 0000 	mov.w	r0, #0
 800a3e8:	f380 8811 	msr	BASEPRI, r0
 800a3ec:	bc09      	pop	{r0, r3}
 800a3ee:	6819      	ldr	r1, [r3, #0]
 800a3f0:	6808      	ldr	r0, [r1, #0]
 800a3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f6:	f01e 0f10 	tst.w	lr, #16
 800a3fa:	bf08      	it	eq
 800a3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a400:	f380 8809 	msr	PSP, r0
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	f3af 8000 	nop.w

0800a410 <pxCurrentTCBConst>:
 800a410:	200012ec 	.word	0x200012ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop

0800a418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a432:	f7fe fde1 	bl	8008ff8 <xTaskIncrementTick>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <xPortSysTickHandler+0x40>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f383 8811 	msr	BASEPRI, r3
}
 800a44e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <vPortSetupTimerInterrupt+0x34>)
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a466:	4b0b      	ldr	r3, [pc, #44]	; (800a494 <vPortSetupTimerInterrupt+0x38>)
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <vPortSetupTimerInterrupt+0x3c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <vPortSetupTimerInterrupt+0x40>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	099b      	lsrs	r3, r3, #6
 800a478:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <vPortSetupTimerInterrupt+0x44>)
 800a47a:	3b01      	subs	r3, #1
 800a47c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a47e:	4b04      	ldr	r3, [pc, #16]	; (800a490 <vPortSetupTimerInterrupt+0x34>)
 800a480:	2207      	movs	r2, #7
 800a482:	601a      	str	r2, [r3, #0]
}
 800a484:	bf00      	nop
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	e000e010 	.word	0xe000e010
 800a494:	e000e018 	.word	0xe000e018
 800a498:	20000010 	.word	0x20000010
 800a49c:	10624dd3 	.word	0x10624dd3
 800a4a0:	e000e014 	.word	0xe000e014

0800a4a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4b4 <vPortEnableVFP+0x10>
 800a4a8:	6801      	ldr	r1, [r0, #0]
 800a4aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ae:	6001      	str	r1, [r0, #0]
 800a4b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4b2:	bf00      	nop
 800a4b4:	e000ed88 	.word	0xe000ed88

0800a4b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4be:	f3ef 8305 	mrs	r3, IPSR
 800a4c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b0f      	cmp	r3, #15
 800a4c8:	d914      	bls.n	800a4f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ca:	4a17      	ldr	r2, [pc, #92]	; (800a528 <vPortValidateInterruptPriority+0x70>)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <vPortValidateInterruptPriority+0x74>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	7afa      	ldrb	r2, [r7, #11]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d20a      	bcs.n	800a4f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	607b      	str	r3, [r7, #4]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4f4:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <vPortValidateInterruptPriority+0x78>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <vPortValidateInterruptPriority+0x7c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d90a      	bls.n	800a51a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	603b      	str	r3, [r7, #0]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <vPortValidateInterruptPriority+0x60>
	}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	e000e3f0 	.word	0xe000e3f0
 800a52c:	20001918 	.word	0x20001918
 800a530:	e000ed0c 	.word	0xe000ed0c
 800a534:	2000191c 	.word	0x2000191c

0800a538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a544:	f7fe fc9c 	bl	8008e80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a548:	4b5b      	ldr	r3, [pc, #364]	; (800a6b8 <pvPortMalloc+0x180>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a550:	f000 f920 	bl	800a794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a554:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <pvPortMalloc+0x184>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8093 	bne.w	800a688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01d      	beq.n	800a5a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a568:	2208      	movs	r2, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	2b00      	cmp	r3, #0
 800a578:	d014      	beq.n	800a5a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f023 0307 	bic.w	r3, r3, #7
 800a580:	3308      	adds	r3, #8
 800a582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	617b      	str	r3, [r7, #20]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d06e      	beq.n	800a688 <pvPortMalloc+0x150>
 800a5aa:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <pvPortMalloc+0x188>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d869      	bhi.n	800a688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5b4:	4b43      	ldr	r3, [pc, #268]	; (800a6c4 <pvPortMalloc+0x18c>)
 800a5b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5b8:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <pvPortMalloc+0x18c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5be:	e004      	b.n	800a5ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d903      	bls.n	800a5dc <pvPortMalloc+0xa4>
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f1      	bne.n	800a5c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5dc:	4b36      	ldr	r3, [pc, #216]	; (800a6b8 <pvPortMalloc+0x180>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d050      	beq.n	800a688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2208      	movs	r2, #8
 800a5ec:	4413      	add	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	2308      	movs	r3, #8
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	429a      	cmp	r2, r3
 800a606:	d91f      	bls.n	800a648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <pvPortMalloc+0xf8>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	613b      	str	r3, [r7, #16]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a642:	69b8      	ldr	r0, [r7, #24]
 800a644:	f000 f908 	bl	800a858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a648:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <pvPortMalloc+0x188>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1b      	ldr	r2, [pc, #108]	; (800a6c0 <pvPortMalloc+0x188>)
 800a654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <pvPortMalloc+0x188>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b1b      	ldr	r3, [pc, #108]	; (800a6c8 <pvPortMalloc+0x190>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d203      	bcs.n	800a66a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a662:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <pvPortMalloc+0x188>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a18      	ldr	r2, [pc, #96]	; (800a6c8 <pvPortMalloc+0x190>)
 800a668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <pvPortMalloc+0x184>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	431a      	orrs	r2, r3
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <pvPortMalloc+0x194>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a11      	ldr	r2, [pc, #68]	; (800a6cc <pvPortMalloc+0x194>)
 800a686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a688:	f7fe fc08 	bl	8008e9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <pvPortMalloc+0x174>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <pvPortMalloc+0x172>
	return pvReturn;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3728      	adds	r7, #40	; 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20006748 	.word	0x20006748
 800a6bc:	2000675c 	.word	0x2000675c
 800a6c0:	2000674c 	.word	0x2000674c
 800a6c4:	20006740 	.word	0x20006740
 800a6c8:	20006750 	.word	0x20006750
 800a6cc:	20006754 	.word	0x20006754

0800a6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d04d      	beq.n	800a77e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6e2:	2308      	movs	r3, #8
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <vPortFree+0xb8>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <vPortFree+0x44>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	60fb      	str	r3, [r7, #12]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <vPortFree+0x62>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60bb      	str	r3, [r7, #8]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	4b14      	ldr	r3, [pc, #80]	; (800a788 <vPortFree+0xb8>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01e      	beq.n	800a77e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11a      	bne.n	800a77e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <vPortFree+0xb8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	43db      	mvns	r3, r3
 800a752:	401a      	ands	r2, r3
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a758:	f7fe fb92 	bl	8008e80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <vPortFree+0xbc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4413      	add	r3, r2
 800a766:	4a09      	ldr	r2, [pc, #36]	; (800a78c <vPortFree+0xbc>)
 800a768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f000 f874 	bl	800a858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <vPortFree+0xc0>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3301      	adds	r3, #1
 800a776:	4a06      	ldr	r2, [pc, #24]	; (800a790 <vPortFree+0xc0>)
 800a778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a77a:	f7fe fb8f 	bl	8008e9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	2000675c 	.word	0x2000675c
 800a78c:	2000674c 	.word	0x2000674c
 800a790:	20006758 	.word	0x20006758

0800a794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a79a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a79e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7a0:	4b27      	ldr	r3, [pc, #156]	; (800a840 <prvHeapInit+0xac>)
 800a7a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0307 	bic.w	r3, r3, #7
 800a7ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	4a1f      	ldr	r2, [pc, #124]	; (800a840 <prvHeapInit+0xac>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7cc:	4a1d      	ldr	r2, [pc, #116]	; (800a844 <prvHeapInit+0xb0>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <prvHeapInit+0xb0>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0307 	bic.w	r3, r3, #7
 800a7ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4a15      	ldr	r2, [pc, #84]	; (800a848 <prvHeapInit+0xb4>)
 800a7f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <prvHeapInit+0xb4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7fe:	4b12      	ldr	r3, [pc, #72]	; (800a848 <prvHeapInit+0xb4>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a814:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <prvHeapInit+0xb4>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4a0a      	ldr	r2, [pc, #40]	; (800a84c <prvHeapInit+0xb8>)
 800a822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	4a09      	ldr	r2, [pc, #36]	; (800a850 <prvHeapInit+0xbc>)
 800a82a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a82c:	4b09      	ldr	r3, [pc, #36]	; (800a854 <prvHeapInit+0xc0>)
 800a82e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a832:	601a      	str	r2, [r3, #0]
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20001920 	.word	0x20001920
 800a844:	20006740 	.word	0x20006740
 800a848:	20006748 	.word	0x20006748
 800a84c:	20006750 	.word	0x20006750
 800a850:	2000674c 	.word	0x2000674c
 800a854:	2000675c 	.word	0x2000675c

0800a858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a860:	4b28      	ldr	r3, [pc, #160]	; (800a904 <prvInsertBlockIntoFreeList+0xac>)
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <prvInsertBlockIntoFreeList+0x14>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d8f7      	bhi.n	800a866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	429a      	cmp	r2, r3
 800a886:	d108      	bne.n	800a89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d118      	bne.n	800a8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4b15      	ldr	r3, [pc, #84]	; (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d00d      	beq.n	800a8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e008      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <prvInsertBlockIntoFreeList+0xb0>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	e003      	b.n	800a8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d002      	beq.n	800a8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20006740 	.word	0x20006740
 800a908:	20006748 	.word	0x20006748

0800a90c <__errno>:
 800a90c:	4b01      	ldr	r3, [pc, #4]	; (800a914 <__errno+0x8>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20000020 	.word	0x20000020

0800a918 <__libc_init_array>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	4d0d      	ldr	r5, [pc, #52]	; (800a950 <__libc_init_array+0x38>)
 800a91c:	4c0d      	ldr	r4, [pc, #52]	; (800a954 <__libc_init_array+0x3c>)
 800a91e:	1b64      	subs	r4, r4, r5
 800a920:	10a4      	asrs	r4, r4, #2
 800a922:	2600      	movs	r6, #0
 800a924:	42a6      	cmp	r6, r4
 800a926:	d109      	bne.n	800a93c <__libc_init_array+0x24>
 800a928:	4d0b      	ldr	r5, [pc, #44]	; (800a958 <__libc_init_array+0x40>)
 800a92a:	4c0c      	ldr	r4, [pc, #48]	; (800a95c <__libc_init_array+0x44>)
 800a92c:	f005 fe1c 	bl	8010568 <_init>
 800a930:	1b64      	subs	r4, r4, r5
 800a932:	10a4      	asrs	r4, r4, #2
 800a934:	2600      	movs	r6, #0
 800a936:	42a6      	cmp	r6, r4
 800a938:	d105      	bne.n	800a946 <__libc_init_array+0x2e>
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a940:	4798      	blx	r3
 800a942:	3601      	adds	r6, #1
 800a944:	e7ee      	b.n	800a924 <__libc_init_array+0xc>
 800a946:	f855 3b04 	ldr.w	r3, [r5], #4
 800a94a:	4798      	blx	r3
 800a94c:	3601      	adds	r6, #1
 800a94e:	e7f2      	b.n	800a936 <__libc_init_array+0x1e>
 800a950:	08010d44 	.word	0x08010d44
 800a954:	08010d44 	.word	0x08010d44
 800a958:	08010d44 	.word	0x08010d44
 800a95c:	08010d48 	.word	0x08010d48

0800a960 <memcpy>:
 800a960:	440a      	add	r2, r1
 800a962:	4291      	cmp	r1, r2
 800a964:	f100 33ff 	add.w	r3, r0, #4294967295
 800a968:	d100      	bne.n	800a96c <memcpy+0xc>
 800a96a:	4770      	bx	lr
 800a96c:	b510      	push	{r4, lr}
 800a96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a972:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a976:	4291      	cmp	r1, r2
 800a978:	d1f9      	bne.n	800a96e <memcpy+0xe>
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <memset>:
 800a97c:	4402      	add	r2, r0
 800a97e:	4603      	mov	r3, r0
 800a980:	4293      	cmp	r3, r2
 800a982:	d100      	bne.n	800a986 <memset+0xa>
 800a984:	4770      	bx	lr
 800a986:	f803 1b01 	strb.w	r1, [r3], #1
 800a98a:	e7f9      	b.n	800a980 <memset+0x4>

0800a98c <validate_structure>:
 800a98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a98e:	6801      	ldr	r1, [r0, #0]
 800a990:	293b      	cmp	r1, #59	; 0x3b
 800a992:	4604      	mov	r4, r0
 800a994:	d911      	bls.n	800a9ba <validate_structure+0x2e>
 800a996:	223c      	movs	r2, #60	; 0x3c
 800a998:	4668      	mov	r0, sp
 800a99a:	f002 fb2d 	bl	800cff8 <div>
 800a99e:	9a01      	ldr	r2, [sp, #4]
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	9900      	ldr	r1, [sp, #0]
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	440b      	add	r3, r1
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bfbb      	ittet	lt
 800a9ac:	323c      	addlt	r2, #60	; 0x3c
 800a9ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a9b2:	6022      	strge	r2, [r4, #0]
 800a9b4:	6022      	strlt	r2, [r4, #0]
 800a9b6:	bfb8      	it	lt
 800a9b8:	6063      	strlt	r3, [r4, #4]
 800a9ba:	6861      	ldr	r1, [r4, #4]
 800a9bc:	293b      	cmp	r1, #59	; 0x3b
 800a9be:	d911      	bls.n	800a9e4 <validate_structure+0x58>
 800a9c0:	223c      	movs	r2, #60	; 0x3c
 800a9c2:	4668      	mov	r0, sp
 800a9c4:	f002 fb18 	bl	800cff8 <div>
 800a9c8:	9a01      	ldr	r2, [sp, #4]
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	9900      	ldr	r1, [sp, #0]
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	440b      	add	r3, r1
 800a9d2:	60a3      	str	r3, [r4, #8]
 800a9d4:	bfbb      	ittet	lt
 800a9d6:	323c      	addlt	r2, #60	; 0x3c
 800a9d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a9dc:	6062      	strge	r2, [r4, #4]
 800a9de:	6062      	strlt	r2, [r4, #4]
 800a9e0:	bfb8      	it	lt
 800a9e2:	60a3      	strlt	r3, [r4, #8]
 800a9e4:	68a1      	ldr	r1, [r4, #8]
 800a9e6:	2917      	cmp	r1, #23
 800a9e8:	d911      	bls.n	800aa0e <validate_structure+0x82>
 800a9ea:	2218      	movs	r2, #24
 800a9ec:	4668      	mov	r0, sp
 800a9ee:	f002 fb03 	bl	800cff8 <div>
 800a9f2:	9a01      	ldr	r2, [sp, #4]
 800a9f4:	68e3      	ldr	r3, [r4, #12]
 800a9f6:	9900      	ldr	r1, [sp, #0]
 800a9f8:	2a00      	cmp	r2, #0
 800a9fa:	440b      	add	r3, r1
 800a9fc:	60e3      	str	r3, [r4, #12]
 800a9fe:	bfbb      	ittet	lt
 800aa00:	3218      	addlt	r2, #24
 800aa02:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa06:	60a2      	strge	r2, [r4, #8]
 800aa08:	60a2      	strlt	r2, [r4, #8]
 800aa0a:	bfb8      	it	lt
 800aa0c:	60e3      	strlt	r3, [r4, #12]
 800aa0e:	6921      	ldr	r1, [r4, #16]
 800aa10:	290b      	cmp	r1, #11
 800aa12:	d911      	bls.n	800aa38 <validate_structure+0xac>
 800aa14:	220c      	movs	r2, #12
 800aa16:	4668      	mov	r0, sp
 800aa18:	f002 faee 	bl	800cff8 <div>
 800aa1c:	9a01      	ldr	r2, [sp, #4]
 800aa1e:	6963      	ldr	r3, [r4, #20]
 800aa20:	9900      	ldr	r1, [sp, #0]
 800aa22:	2a00      	cmp	r2, #0
 800aa24:	440b      	add	r3, r1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	bfbb      	ittet	lt
 800aa2a:	320c      	addlt	r2, #12
 800aa2c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa30:	6122      	strge	r2, [r4, #16]
 800aa32:	6122      	strlt	r2, [r4, #16]
 800aa34:	bfb8      	it	lt
 800aa36:	6163      	strlt	r3, [r4, #20]
 800aa38:	6963      	ldr	r3, [r4, #20]
 800aa3a:	0798      	lsls	r0, r3, #30
 800aa3c:	d120      	bne.n	800aa80 <validate_structure+0xf4>
 800aa3e:	2164      	movs	r1, #100	; 0x64
 800aa40:	fb93 f2f1 	sdiv	r2, r3, r1
 800aa44:	fb01 3212 	mls	r2, r1, r2, r3
 800aa48:	b9e2      	cbnz	r2, 800aa84 <validate_structure+0xf8>
 800aa4a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800aa4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aa52:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa56:	fb02 3311 	mls	r3, r2, r1, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bf14      	ite	ne
 800aa5e:	231c      	movne	r3, #28
 800aa60:	231d      	moveq	r3, #29
 800aa62:	68e2      	ldr	r2, [r4, #12]
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	dc0f      	bgt.n	800aa88 <validate_structure+0xfc>
 800aa68:	4f33      	ldr	r7, [pc, #204]	; (800ab38 <validate_structure+0x1ac>)
 800aa6a:	260b      	movs	r6, #11
 800aa6c:	2064      	movs	r0, #100	; 0x64
 800aa6e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800aa72:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800aa76:	f1bc 0f00 	cmp.w	ip, #0
 800aa7a:	dd31      	ble.n	800aae0 <validate_structure+0x154>
 800aa7c:	b003      	add	sp, #12
 800aa7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa80:	231c      	movs	r3, #28
 800aa82:	e7ee      	b.n	800aa62 <validate_structure+0xd6>
 800aa84:	231d      	movs	r3, #29
 800aa86:	e7ec      	b.n	800aa62 <validate_structure+0xd6>
 800aa88:	4e2b      	ldr	r6, [pc, #172]	; (800ab38 <validate_structure+0x1ac>)
 800aa8a:	2700      	movs	r7, #0
 800aa8c:	2064      	movs	r0, #100	; 0x64
 800aa8e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800aa92:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800aa96:	2a01      	cmp	r2, #1
 800aa98:	bf14      	ite	ne
 800aa9a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800aa9e:	469c      	moveq	ip, r3
 800aaa0:	4561      	cmp	r1, ip
 800aaa2:	ddeb      	ble.n	800aa7c <validate_structure+0xf0>
 800aaa4:	3201      	adds	r2, #1
 800aaa6:	eba1 010c 	sub.w	r1, r1, ip
 800aaaa:	2a0c      	cmp	r2, #12
 800aaac:	60e1      	str	r1, [r4, #12]
 800aaae:	6122      	str	r2, [r4, #16]
 800aab0:	d1ef      	bne.n	800aa92 <validate_structure+0x106>
 800aab2:	6963      	ldr	r3, [r4, #20]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	0791      	lsls	r1, r2, #30
 800aab8:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800aabc:	d137      	bne.n	800ab2e <validate_structure+0x1a2>
 800aabe:	fb92 f1f0 	sdiv	r1, r2, r0
 800aac2:	fb00 2211 	mls	r2, r0, r1, r2
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	d133      	bne.n	800ab32 <validate_structure+0x1a6>
 800aaca:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800aace:	fb93 f2f5 	sdiv	r2, r3, r5
 800aad2:	fb05 3312 	mls	r3, r5, r2, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	bf14      	ite	ne
 800aada:	231c      	movne	r3, #28
 800aadc:	231d      	moveq	r3, #29
 800aade:	e7d8      	b.n	800aa92 <validate_structure+0x106>
 800aae0:	6921      	ldr	r1, [r4, #16]
 800aae2:	3901      	subs	r1, #1
 800aae4:	6121      	str	r1, [r4, #16]
 800aae6:	3101      	adds	r1, #1
 800aae8:	d114      	bne.n	800ab14 <validate_structure+0x188>
 800aaea:	6963      	ldr	r3, [r4, #20]
 800aaec:	1e5a      	subs	r2, r3, #1
 800aaee:	0791      	lsls	r1, r2, #30
 800aaf0:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800aaf4:	d117      	bne.n	800ab26 <validate_structure+0x19a>
 800aaf6:	fb92 f1f0 	sdiv	r1, r2, r0
 800aafa:	fb00 2211 	mls	r2, r0, r1, r2
 800aafe:	b9a2      	cbnz	r2, 800ab2a <validate_structure+0x19e>
 800ab00:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800ab04:	fb93 f2f5 	sdiv	r2, r3, r5
 800ab08:	fb05 3312 	mls	r3, r5, r2, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bf14      	ite	ne
 800ab10:	231c      	movne	r3, #28
 800ab12:	231d      	moveq	r3, #29
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	2a01      	cmp	r2, #1
 800ab18:	bf14      	ite	ne
 800ab1a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800ab1e:	461a      	moveq	r2, r3
 800ab20:	4462      	add	r2, ip
 800ab22:	60e2      	str	r2, [r4, #12]
 800ab24:	e7a5      	b.n	800aa72 <validate_structure+0xe6>
 800ab26:	231c      	movs	r3, #28
 800ab28:	e7f4      	b.n	800ab14 <validate_structure+0x188>
 800ab2a:	231d      	movs	r3, #29
 800ab2c:	e7f2      	b.n	800ab14 <validate_structure+0x188>
 800ab2e:	231c      	movs	r3, #28
 800ab30:	e7af      	b.n	800aa92 <validate_structure+0x106>
 800ab32:	231d      	movs	r3, #29
 800ab34:	e7ad      	b.n	800aa92 <validate_structure+0x106>
 800ab36:	bf00      	nop
 800ab38:	08010784 	.word	0x08010784

0800ab3c <mktime>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	b085      	sub	sp, #20
 800ab42:	4607      	mov	r7, r0
 800ab44:	f003 fc9a 	bl	800e47c <__gettzinfo>
 800ab48:	4681      	mov	r9, r0
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7ff ff1e 	bl	800a98c <validate_structure>
 800ab50:	e9d7 4000 	ldrd	r4, r0, [r7]
 800ab54:	233c      	movs	r3, #60	; 0x3c
 800ab56:	fb03 4400 	mla	r4, r3, r0, r4
 800ab5a:	68b8      	ldr	r0, [r7, #8]
 800ab5c:	4abc      	ldr	r2, [pc, #752]	; (800ae50 <mktime+0x314>)
 800ab5e:	697e      	ldr	r6, [r7, #20]
 800ab60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ab64:	fb03 4400 	mla	r4, r3, r0, r4
 800ab68:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800ab6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab70:	3d01      	subs	r5, #1
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	4415      	add	r5, r2
 800ab76:	dd11      	ble.n	800ab9c <mktime+0x60>
 800ab78:	07b1      	lsls	r1, r6, #30
 800ab7a:	d10f      	bne.n	800ab9c <mktime+0x60>
 800ab7c:	2264      	movs	r2, #100	; 0x64
 800ab7e:	fb96 f3f2 	sdiv	r3, r6, r2
 800ab82:	fb02 6313 	mls	r3, r2, r3, r6
 800ab86:	b943      	cbnz	r3, 800ab9a <mktime+0x5e>
 800ab88:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800ab8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ab90:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab94:	fb02 3311 	mls	r3, r2, r1, r3
 800ab98:	b903      	cbnz	r3, 800ab9c <mktime+0x60>
 800ab9a:	3501      	adds	r5, #1
 800ab9c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800aba0:	3310      	adds	r3, #16
 800aba2:	f644 6220 	movw	r2, #20000	; 0x4e20
 800aba6:	4293      	cmp	r3, r2
 800aba8:	61fd      	str	r5, [r7, #28]
 800abaa:	f200 815d 	bhi.w	800ae68 <mktime+0x32c>
 800abae:	2e46      	cmp	r6, #70	; 0x46
 800abb0:	dd71      	ble.n	800ac96 <mktime+0x15a>
 800abb2:	2346      	movs	r3, #70	; 0x46
 800abb4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800abb8:	2164      	movs	r1, #100	; 0x64
 800abba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800abbe:	079a      	lsls	r2, r3, #30
 800abc0:	d163      	bne.n	800ac8a <mktime+0x14e>
 800abc2:	fb93 f2f1 	sdiv	r2, r3, r1
 800abc6:	fb01 3212 	mls	r2, r1, r2, r3
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d160      	bne.n	800ac90 <mktime+0x154>
 800abce:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800abd2:	fb92 fef0 	sdiv	lr, r2, r0
 800abd6:	fb00 221e 	mls	r2, r0, lr, r2
 800abda:	2a00      	cmp	r2, #0
 800abdc:	bf14      	ite	ne
 800abde:	4662      	movne	r2, ip
 800abe0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800abe4:	3301      	adds	r3, #1
 800abe6:	429e      	cmp	r6, r3
 800abe8:	4415      	add	r5, r2
 800abea:	d1e8      	bne.n	800abbe <mktime+0x82>
 800abec:	4b99      	ldr	r3, [pc, #612]	; (800ae54 <mktime+0x318>)
 800abee:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800abf2:	fbc5 4803 	smlal	r4, r8, r5, r3
 800abf6:	f002 f84b 	bl	800cc90 <__tz_lock>
 800abfa:	f002 f855 	bl	800cca8 <_tzset_unlocked>
 800abfe:	4b96      	ldr	r3, [pc, #600]	; (800ae58 <mktime+0x31c>)
 800ac00:	f8d3 b000 	ldr.w	fp, [r3]
 800ac04:	f1bb 0f00 	cmp.w	fp, #0
 800ac08:	d039      	beq.n	800ac7e <mktime+0x142>
 800ac0a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800ac0e:	6978      	ldr	r0, [r7, #20]
 800ac10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac14:	f1bb 0f01 	cmp.w	fp, #1
 800ac18:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ac1c:	46da      	mov	sl, fp
 800ac1e:	bfa8      	it	ge
 800ac20:	f04f 0a01 	movge.w	sl, #1
 800ac24:	4283      	cmp	r3, r0
 800ac26:	d178      	bne.n	800ad1a <mktime+0x1de>
 800ac28:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800ac2c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800ac30:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800ac34:	1a5b      	subs	r3, r3, r1
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800ac3c:	9303      	str	r3, [sp, #12]
 800ac3e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800ac42:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	ebb3 0c02 	subs.w	ip, r3, r2
 800ac4c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800ac50:	4564      	cmp	r4, ip
 800ac52:	eb78 0300 	sbcs.w	r3, r8, r0
 800ac56:	da66      	bge.n	800ad26 <mktime+0x1ea>
 800ac58:	f8d9 3000 	ldr.w	r3, [r9]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d06f      	beq.n	800ad40 <mktime+0x204>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	429c      	cmp	r4, r3
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	eb78 0303 	sbcs.w	r3, r8, r3
 800ac6a:	db03      	blt.n	800ac74 <mktime+0x138>
 800ac6c:	4564      	cmp	r4, ip
 800ac6e:	eb78 0300 	sbcs.w	r3, r8, r0
 800ac72:	db6b      	blt.n	800ad4c <mktime+0x210>
 800ac74:	f1bb 0f00 	cmp.w	fp, #0
 800ac78:	f04f 0b00 	mov.w	fp, #0
 800ac7c:	da6b      	bge.n	800ad56 <mktime+0x21a>
 800ac7e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800ac82:	190c      	adds	r4, r1, r4
 800ac84:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800ac88:	e0a9      	b.n	800adde <mktime+0x2a2>
 800ac8a:	f240 126d 	movw	r2, #365	; 0x16d
 800ac8e:	e7a9      	b.n	800abe4 <mktime+0xa8>
 800ac90:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ac94:	e7a6      	b.n	800abe4 <mktime+0xa8>
 800ac96:	d0a9      	beq.n	800abec <mktime+0xb0>
 800ac98:	2345      	movs	r3, #69	; 0x45
 800ac9a:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ac9e:	2164      	movs	r1, #100	; 0x64
 800aca0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800aca4:	e012      	b.n	800accc <mktime+0x190>
 800aca6:	bb62      	cbnz	r2, 800ad02 <mktime+0x1c6>
 800aca8:	fb93 f2f1 	sdiv	r2, r3, r1
 800acac:	fb01 3212 	mls	r2, r1, r2, r3
 800acb0:	bb52      	cbnz	r2, 800ad08 <mktime+0x1cc>
 800acb2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800acb6:	fb92 fef0 	sdiv	lr, r2, r0
 800acba:	fb00 221e 	mls	r2, r0, lr, r2
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	bf14      	ite	ne
 800acc2:	4662      	movne	r2, ip
 800acc4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800acc8:	1aad      	subs	r5, r5, r2
 800acca:	3b01      	subs	r3, #1
 800accc:	429e      	cmp	r6, r3
 800acce:	f003 0203 	and.w	r2, r3, #3
 800acd2:	dbe8      	blt.n	800aca6 <mktime+0x16a>
 800acd4:	b9da      	cbnz	r2, 800ad0e <mktime+0x1d2>
 800acd6:	2264      	movs	r2, #100	; 0x64
 800acd8:	fb96 f3f2 	sdiv	r3, r6, r2
 800acdc:	fb02 6313 	mls	r3, r2, r3, r6
 800ace0:	b9c3      	cbnz	r3, 800ad14 <mktime+0x1d8>
 800ace2:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800ace6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800acea:	fb93 f1f2 	sdiv	r1, r3, r2
 800acee:	fb02 3311 	mls	r3, r2, r1, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f240 136d 	movw	r3, #365	; 0x16d
 800acf8:	bf08      	it	eq
 800acfa:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800acfe:	1aed      	subs	r5, r5, r3
 800ad00:	e774      	b.n	800abec <mktime+0xb0>
 800ad02:	f240 126d 	movw	r2, #365	; 0x16d
 800ad06:	e7df      	b.n	800acc8 <mktime+0x18c>
 800ad08:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ad0c:	e7dc      	b.n	800acc8 <mktime+0x18c>
 800ad0e:	f240 136d 	movw	r3, #365	; 0x16d
 800ad12:	e7f4      	b.n	800acfe <mktime+0x1c2>
 800ad14:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ad18:	e7f1      	b.n	800acfe <mktime+0x1c2>
 800ad1a:	f001 ff0f 	bl	800cb3c <__tzcalc_limits>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d182      	bne.n	800ac28 <mktime+0xec>
 800ad22:	46d3      	mov	fp, sl
 800ad24:	e050      	b.n	800adc8 <mktime+0x28c>
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	1a5b      	subs	r3, r3, r1
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800ad30:	eb6e 0e03 	sbc.w	lr, lr, r3
 800ad34:	9b01      	ldr	r3, [sp, #4]
 800ad36:	429c      	cmp	r4, r3
 800ad38:	eb78 030e 	sbcs.w	r3, r8, lr
 800ad3c:	dbf1      	blt.n	800ad22 <mktime+0x1e6>
 800ad3e:	e78b      	b.n	800ac58 <mktime+0x11c>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	429c      	cmp	r4, r3
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	eb78 0303 	sbcs.w	r3, r8, r3
 800ad4a:	db8f      	blt.n	800ac6c <mktime+0x130>
 800ad4c:	f1bb 0f00 	cmp.w	fp, #0
 800ad50:	db3e      	blt.n	800add0 <mktime+0x294>
 800ad52:	f04f 0b01 	mov.w	fp, #1
 800ad56:	ea8a 0a0b 	eor.w	sl, sl, fp
 800ad5a:	f1ba 0f01 	cmp.w	sl, #1
 800ad5e:	d133      	bne.n	800adc8 <mktime+0x28c>
 800ad60:	f1bb 0f00 	cmp.w	fp, #0
 800ad64:	d04e      	beq.n	800ae04 <mktime+0x2c8>
 800ad66:	1a52      	subs	r2, r2, r1
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	1914      	adds	r4, r2, r4
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	4638      	mov	r0, r7
 800ad76:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800ad7a:	f7ff fe07 	bl	800a98c <validate_structure>
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	ebb2 020a 	subs.w	r2, r2, sl
 800ad84:	d020      	beq.n	800adc8 <mktime+0x28c>
 800ad86:	2a01      	cmp	r2, #1
 800ad88:	dc3e      	bgt.n	800ae08 <mktime+0x2cc>
 800ad8a:	1c90      	adds	r0, r2, #2
 800ad8c:	bfd8      	it	le
 800ad8e:	2201      	movle	r2, #1
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	18d3      	adds	r3, r2, r3
 800ad94:	4415      	add	r5, r2
 800ad96:	d540      	bpl.n	800ae1a <mktime+0x2de>
 800ad98:	1e73      	subs	r3, r6, #1
 800ad9a:	0799      	lsls	r1, r3, #30
 800ad9c:	d137      	bne.n	800ae0e <mktime+0x2d2>
 800ad9e:	2264      	movs	r2, #100	; 0x64
 800ada0:	fb93 f1f2 	sdiv	r1, r3, r2
 800ada4:	fb02 3311 	mls	r3, r2, r1, r3
 800ada8:	bba3      	cbnz	r3, 800ae14 <mktime+0x2d8>
 800adaa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800adae:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800adb2:	fb96 f2f3 	sdiv	r2, r6, r3
 800adb6:	fb03 6612 	mls	r6, r3, r2, r6
 800adba:	2e00      	cmp	r6, #0
 800adbc:	f240 136d 	movw	r3, #365	; 0x16d
 800adc0:	bf18      	it	ne
 800adc2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800adc6:	61fb      	str	r3, [r7, #28]
 800adc8:	f1bb 0f01 	cmp.w	fp, #1
 800adcc:	f47f af57 	bne.w	800ac7e <mktime+0x142>
 800add0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800add4:	190c      	adds	r4, r1, r4
 800add6:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800adda:	f04f 0b01 	mov.w	fp, #1
 800adde:	f001 ff5d 	bl	800cc9c <__tz_unlock>
 800ade2:	3504      	adds	r5, #4
 800ade4:	2307      	movs	r3, #7
 800ade6:	fb95 f3f3 	sdiv	r3, r5, r3
 800adea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800adee:	1aed      	subs	r5, r5, r3
 800adf0:	bf48      	it	mi
 800adf2:	3507      	addmi	r5, #7
 800adf4:	f8c7 b020 	str.w	fp, [r7, #32]
 800adf8:	61bd      	str	r5, [r7, #24]
 800adfa:	4620      	mov	r0, r4
 800adfc:	4641      	mov	r1, r8
 800adfe:	b005      	add	sp, #20
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	1a8a      	subs	r2, r1, r2
 800ae06:	e7af      	b.n	800ad68 <mktime+0x22c>
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0c:	e7c0      	b.n	800ad90 <mktime+0x254>
 800ae0e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800ae12:	e7d8      	b.n	800adc6 <mktime+0x28a>
 800ae14:	f240 136d 	movw	r3, #365	; 0x16d
 800ae18:	e7d5      	b.n	800adc6 <mktime+0x28a>
 800ae1a:	07b2      	lsls	r2, r6, #30
 800ae1c:	d11e      	bne.n	800ae5c <mktime+0x320>
 800ae1e:	2164      	movs	r1, #100	; 0x64
 800ae20:	fb96 f2f1 	sdiv	r2, r6, r1
 800ae24:	fb01 6212 	mls	r2, r1, r2, r6
 800ae28:	b9da      	cbnz	r2, 800ae62 <mktime+0x326>
 800ae2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ae2e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800ae32:	fb96 f1f2 	sdiv	r1, r6, r2
 800ae36:	fb02 6611 	mls	r6, r2, r1, r6
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	f240 126d 	movw	r2, #365	; 0x16d
 800ae40:	bf08      	it	eq
 800ae42:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800ae46:	4293      	cmp	r3, r2
 800ae48:	bfa8      	it	ge
 800ae4a:	1a9b      	subge	r3, r3, r2
 800ae4c:	e7bb      	b.n	800adc6 <mktime+0x28a>
 800ae4e:	bf00      	nop
 800ae50:	080107b4 	.word	0x080107b4
 800ae54:	00015180 	.word	0x00015180
 800ae58:	2000677c 	.word	0x2000677c
 800ae5c:	f240 126d 	movw	r2, #365	; 0x16d
 800ae60:	e7f1      	b.n	800ae46 <mktime+0x30a>
 800ae62:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ae66:	e7ee      	b.n	800ae46 <mktime+0x30a>
 800ae68:	f04f 34ff 	mov.w	r4, #4294967295
 800ae6c:	46a0      	mov	r8, r4
 800ae6e:	e7c4      	b.n	800adfa <mktime+0x2be>

0800ae70 <__cvt>:
 800ae70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae74:	ec55 4b10 	vmov	r4, r5, d0
 800ae78:	2d00      	cmp	r5, #0
 800ae7a:	460e      	mov	r6, r1
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	462b      	mov	r3, r5
 800ae80:	bfbb      	ittet	lt
 800ae82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae86:	461d      	movlt	r5, r3
 800ae88:	2300      	movge	r3, #0
 800ae8a:	232d      	movlt	r3, #45	; 0x2d
 800ae8c:	700b      	strb	r3, [r1, #0]
 800ae8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae94:	4691      	mov	r9, r2
 800ae96:	f023 0820 	bic.w	r8, r3, #32
 800ae9a:	bfbc      	itt	lt
 800ae9c:	4622      	movlt	r2, r4
 800ae9e:	4614      	movlt	r4, r2
 800aea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aea4:	d005      	beq.n	800aeb2 <__cvt+0x42>
 800aea6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aeaa:	d100      	bne.n	800aeae <__cvt+0x3e>
 800aeac:	3601      	adds	r6, #1
 800aeae:	2102      	movs	r1, #2
 800aeb0:	e000      	b.n	800aeb4 <__cvt+0x44>
 800aeb2:	2103      	movs	r1, #3
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	ab02      	add	r3, sp, #8
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	ec45 4b10 	vmov	d0, r4, r5
 800aec0:	4653      	mov	r3, sl
 800aec2:	4632      	mov	r2, r6
 800aec4:	f002 f938 	bl	800d138 <_dtoa_r>
 800aec8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aecc:	4607      	mov	r7, r0
 800aece:	d102      	bne.n	800aed6 <__cvt+0x66>
 800aed0:	f019 0f01 	tst.w	r9, #1
 800aed4:	d022      	beq.n	800af1c <__cvt+0xac>
 800aed6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeda:	eb07 0906 	add.w	r9, r7, r6
 800aede:	d110      	bne.n	800af02 <__cvt+0x92>
 800aee0:	783b      	ldrb	r3, [r7, #0]
 800aee2:	2b30      	cmp	r3, #48	; 0x30
 800aee4:	d10a      	bne.n	800aefc <__cvt+0x8c>
 800aee6:	2200      	movs	r2, #0
 800aee8:	2300      	movs	r3, #0
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 800aef2:	b918      	cbnz	r0, 800aefc <__cvt+0x8c>
 800aef4:	f1c6 0601 	rsb	r6, r6, #1
 800aef8:	f8ca 6000 	str.w	r6, [sl]
 800aefc:	f8da 3000 	ldr.w	r3, [sl]
 800af00:	4499      	add	r9, r3
 800af02:	2200      	movs	r2, #0
 800af04:	2300      	movs	r3, #0
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f7f5 fded 	bl	8000ae8 <__aeabi_dcmpeq>
 800af0e:	b108      	cbz	r0, 800af14 <__cvt+0xa4>
 800af10:	f8cd 900c 	str.w	r9, [sp, #12]
 800af14:	2230      	movs	r2, #48	; 0x30
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	454b      	cmp	r3, r9
 800af1a:	d307      	bcc.n	800af2c <__cvt+0xbc>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af20:	1bdb      	subs	r3, r3, r7
 800af22:	4638      	mov	r0, r7
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	b004      	add	sp, #16
 800af28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2c:	1c59      	adds	r1, r3, #1
 800af2e:	9103      	str	r1, [sp, #12]
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	e7f0      	b.n	800af16 <__cvt+0xa6>

0800af34 <__exponent>:
 800af34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af36:	4603      	mov	r3, r0
 800af38:	2900      	cmp	r1, #0
 800af3a:	bfb8      	it	lt
 800af3c:	4249      	neglt	r1, r1
 800af3e:	f803 2b02 	strb.w	r2, [r3], #2
 800af42:	bfb4      	ite	lt
 800af44:	222d      	movlt	r2, #45	; 0x2d
 800af46:	222b      	movge	r2, #43	; 0x2b
 800af48:	2909      	cmp	r1, #9
 800af4a:	7042      	strb	r2, [r0, #1]
 800af4c:	dd2a      	ble.n	800afa4 <__exponent+0x70>
 800af4e:	f10d 0407 	add.w	r4, sp, #7
 800af52:	46a4      	mov	ip, r4
 800af54:	270a      	movs	r7, #10
 800af56:	46a6      	mov	lr, r4
 800af58:	460a      	mov	r2, r1
 800af5a:	fb91 f6f7 	sdiv	r6, r1, r7
 800af5e:	fb07 1516 	mls	r5, r7, r6, r1
 800af62:	3530      	adds	r5, #48	; 0x30
 800af64:	2a63      	cmp	r2, #99	; 0x63
 800af66:	f104 34ff 	add.w	r4, r4, #4294967295
 800af6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af6e:	4631      	mov	r1, r6
 800af70:	dcf1      	bgt.n	800af56 <__exponent+0x22>
 800af72:	3130      	adds	r1, #48	; 0x30
 800af74:	f1ae 0502 	sub.w	r5, lr, #2
 800af78:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af7c:	1c44      	adds	r4, r0, #1
 800af7e:	4629      	mov	r1, r5
 800af80:	4561      	cmp	r1, ip
 800af82:	d30a      	bcc.n	800af9a <__exponent+0x66>
 800af84:	f10d 0209 	add.w	r2, sp, #9
 800af88:	eba2 020e 	sub.w	r2, r2, lr
 800af8c:	4565      	cmp	r5, ip
 800af8e:	bf88      	it	hi
 800af90:	2200      	movhi	r2, #0
 800af92:	4413      	add	r3, r2
 800af94:	1a18      	subs	r0, r3, r0
 800af96:	b003      	add	sp, #12
 800af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800afa2:	e7ed      	b.n	800af80 <__exponent+0x4c>
 800afa4:	2330      	movs	r3, #48	; 0x30
 800afa6:	3130      	adds	r1, #48	; 0x30
 800afa8:	7083      	strb	r3, [r0, #2]
 800afaa:	70c1      	strb	r1, [r0, #3]
 800afac:	1d03      	adds	r3, r0, #4
 800afae:	e7f1      	b.n	800af94 <__exponent+0x60>

0800afb0 <_printf_float>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	ed2d 8b02 	vpush	{d8}
 800afb8:	b08d      	sub	sp, #52	; 0x34
 800afba:	460c      	mov	r4, r1
 800afbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afc0:	4616      	mov	r6, r2
 800afc2:	461f      	mov	r7, r3
 800afc4:	4605      	mov	r5, r0
 800afc6:	f003 fa5d 	bl	800e484 <_localeconv_r>
 800afca:	f8d0 a000 	ldr.w	sl, [r0]
 800afce:	4650      	mov	r0, sl
 800afd0:	f7f5 f908 	bl	80001e4 <strlen>
 800afd4:	2300      	movs	r3, #0
 800afd6:	930a      	str	r3, [sp, #40]	; 0x28
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	f8d8 3000 	ldr.w	r3, [r8]
 800afe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afe4:	3307      	adds	r3, #7
 800afe6:	f023 0307 	bic.w	r3, r3, #7
 800afea:	f103 0208 	add.w	r2, r3, #8
 800afee:	f8c8 2000 	str.w	r2, [r8]
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800affa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800affe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b002:	9307      	str	r3, [sp, #28]
 800b004:	f8cd 8018 	str.w	r8, [sp, #24]
 800b008:	ee08 0a10 	vmov	s16, r0
 800b00c:	4b9f      	ldr	r3, [pc, #636]	; (800b28c <_printf_float+0x2dc>)
 800b00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b012:	f04f 32ff 	mov.w	r2, #4294967295
 800b016:	f7f5 fd99 	bl	8000b4c <__aeabi_dcmpun>
 800b01a:	bb88      	cbnz	r0, 800b080 <_printf_float+0xd0>
 800b01c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b020:	4b9a      	ldr	r3, [pc, #616]	; (800b28c <_printf_float+0x2dc>)
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	f7f5 fd73 	bl	8000b10 <__aeabi_dcmple>
 800b02a:	bb48      	cbnz	r0, 800b080 <_printf_float+0xd0>
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fd62 	bl	8000afc <__aeabi_dcmplt>
 800b038:	b110      	cbz	r0, 800b040 <_printf_float+0x90>
 800b03a:	232d      	movs	r3, #45	; 0x2d
 800b03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b040:	4b93      	ldr	r3, [pc, #588]	; (800b290 <_printf_float+0x2e0>)
 800b042:	4894      	ldr	r0, [pc, #592]	; (800b294 <_printf_float+0x2e4>)
 800b044:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b048:	bf94      	ite	ls
 800b04a:	4698      	movls	r8, r3
 800b04c:	4680      	movhi	r8, r0
 800b04e:	2303      	movs	r3, #3
 800b050:	6123      	str	r3, [r4, #16]
 800b052:	9b05      	ldr	r3, [sp, #20]
 800b054:	f023 0204 	bic.w	r2, r3, #4
 800b058:	6022      	str	r2, [r4, #0]
 800b05a:	f04f 0900 	mov.w	r9, #0
 800b05e:	9700      	str	r7, [sp, #0]
 800b060:	4633      	mov	r3, r6
 800b062:	aa0b      	add	r2, sp, #44	; 0x2c
 800b064:	4621      	mov	r1, r4
 800b066:	4628      	mov	r0, r5
 800b068:	f000 f9d8 	bl	800b41c <_printf_common>
 800b06c:	3001      	adds	r0, #1
 800b06e:	f040 8090 	bne.w	800b192 <_printf_float+0x1e2>
 800b072:	f04f 30ff 	mov.w	r0, #4294967295
 800b076:	b00d      	add	sp, #52	; 0x34
 800b078:	ecbd 8b02 	vpop	{d8}
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	4640      	mov	r0, r8
 800b086:	4649      	mov	r1, r9
 800b088:	f7f5 fd60 	bl	8000b4c <__aeabi_dcmpun>
 800b08c:	b140      	cbz	r0, 800b0a0 <_printf_float+0xf0>
 800b08e:	464b      	mov	r3, r9
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfbc      	itt	lt
 800b094:	232d      	movlt	r3, #45	; 0x2d
 800b096:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b09a:	487f      	ldr	r0, [pc, #508]	; (800b298 <_printf_float+0x2e8>)
 800b09c:	4b7f      	ldr	r3, [pc, #508]	; (800b29c <_printf_float+0x2ec>)
 800b09e:	e7d1      	b.n	800b044 <_printf_float+0x94>
 800b0a0:	6863      	ldr	r3, [r4, #4]
 800b0a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b0a6:	9206      	str	r2, [sp, #24]
 800b0a8:	1c5a      	adds	r2, r3, #1
 800b0aa:	d13f      	bne.n	800b12c <_printf_float+0x17c>
 800b0ac:	2306      	movs	r3, #6
 800b0ae:	6063      	str	r3, [r4, #4]
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	6861      	ldr	r1, [r4, #4]
 800b0b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	ab0a      	add	r3, sp, #40	; 0x28
 800b0be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0c2:	ab09      	add	r3, sp, #36	; 0x24
 800b0c4:	ec49 8b10 	vmov	d0, r8, r9
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	6022      	str	r2, [r4, #0]
 800b0cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7ff fecd 	bl	800ae70 <__cvt>
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0da:	2b47      	cmp	r3, #71	; 0x47
 800b0dc:	4680      	mov	r8, r0
 800b0de:	d108      	bne.n	800b0f2 <_printf_float+0x142>
 800b0e0:	1cc8      	adds	r0, r1, #3
 800b0e2:	db02      	blt.n	800b0ea <_printf_float+0x13a>
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	4299      	cmp	r1, r3
 800b0e8:	dd41      	ble.n	800b16e <_printf_float+0x1be>
 800b0ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0ee:	fa5f fb8b 	uxtb.w	fp, fp
 800b0f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0f6:	d820      	bhi.n	800b13a <_printf_float+0x18a>
 800b0f8:	3901      	subs	r1, #1
 800b0fa:	465a      	mov	r2, fp
 800b0fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b100:	9109      	str	r1, [sp, #36]	; 0x24
 800b102:	f7ff ff17 	bl	800af34 <__exponent>
 800b106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b108:	1813      	adds	r3, r2, r0
 800b10a:	2a01      	cmp	r2, #1
 800b10c:	4681      	mov	r9, r0
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	dc02      	bgt.n	800b118 <_printf_float+0x168>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	07d2      	lsls	r2, r2, #31
 800b116:	d501      	bpl.n	800b11c <_printf_float+0x16c>
 800b118:	3301      	adds	r3, #1
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b120:	2b00      	cmp	r3, #0
 800b122:	d09c      	beq.n	800b05e <_printf_float+0xae>
 800b124:	232d      	movs	r3, #45	; 0x2d
 800b126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12a:	e798      	b.n	800b05e <_printf_float+0xae>
 800b12c:	9a06      	ldr	r2, [sp, #24]
 800b12e:	2a47      	cmp	r2, #71	; 0x47
 800b130:	d1be      	bne.n	800b0b0 <_printf_float+0x100>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1bc      	bne.n	800b0b0 <_printf_float+0x100>
 800b136:	2301      	movs	r3, #1
 800b138:	e7b9      	b.n	800b0ae <_printf_float+0xfe>
 800b13a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b13e:	d118      	bne.n	800b172 <_printf_float+0x1c2>
 800b140:	2900      	cmp	r1, #0
 800b142:	6863      	ldr	r3, [r4, #4]
 800b144:	dd0b      	ble.n	800b15e <_printf_float+0x1ae>
 800b146:	6121      	str	r1, [r4, #16]
 800b148:	b913      	cbnz	r3, 800b150 <_printf_float+0x1a0>
 800b14a:	6822      	ldr	r2, [r4, #0]
 800b14c:	07d0      	lsls	r0, r2, #31
 800b14e:	d502      	bpl.n	800b156 <_printf_float+0x1a6>
 800b150:	3301      	adds	r3, #1
 800b152:	440b      	add	r3, r1
 800b154:	6123      	str	r3, [r4, #16]
 800b156:	65a1      	str	r1, [r4, #88]	; 0x58
 800b158:	f04f 0900 	mov.w	r9, #0
 800b15c:	e7de      	b.n	800b11c <_printf_float+0x16c>
 800b15e:	b913      	cbnz	r3, 800b166 <_printf_float+0x1b6>
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	07d2      	lsls	r2, r2, #31
 800b164:	d501      	bpl.n	800b16a <_printf_float+0x1ba>
 800b166:	3302      	adds	r3, #2
 800b168:	e7f4      	b.n	800b154 <_printf_float+0x1a4>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e7f2      	b.n	800b154 <_printf_float+0x1a4>
 800b16e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b174:	4299      	cmp	r1, r3
 800b176:	db05      	blt.n	800b184 <_printf_float+0x1d4>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	6121      	str	r1, [r4, #16]
 800b17c:	07d8      	lsls	r0, r3, #31
 800b17e:	d5ea      	bpl.n	800b156 <_printf_float+0x1a6>
 800b180:	1c4b      	adds	r3, r1, #1
 800b182:	e7e7      	b.n	800b154 <_printf_float+0x1a4>
 800b184:	2900      	cmp	r1, #0
 800b186:	bfd4      	ite	le
 800b188:	f1c1 0202 	rsble	r2, r1, #2
 800b18c:	2201      	movgt	r2, #1
 800b18e:	4413      	add	r3, r2
 800b190:	e7e0      	b.n	800b154 <_printf_float+0x1a4>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	055a      	lsls	r2, r3, #21
 800b196:	d407      	bmi.n	800b1a8 <_printf_float+0x1f8>
 800b198:	6923      	ldr	r3, [r4, #16]
 800b19a:	4642      	mov	r2, r8
 800b19c:	4631      	mov	r1, r6
 800b19e:	4628      	mov	r0, r5
 800b1a0:	47b8      	blx	r7
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d12c      	bne.n	800b200 <_printf_float+0x250>
 800b1a6:	e764      	b.n	800b072 <_printf_float+0xc2>
 800b1a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1ac:	f240 80e0 	bls.w	800b370 <_printf_float+0x3c0>
 800b1b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f7f5 fc96 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d034      	beq.n	800b22a <_printf_float+0x27a>
 800b1c0:	4a37      	ldr	r2, [pc, #220]	; (800b2a0 <_printf_float+0x2f0>)
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b8      	blx	r7
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	f43f af51 	beq.w	800b072 <_printf_float+0xc2>
 800b1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	db02      	blt.n	800b1de <_printf_float+0x22e>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	07d8      	lsls	r0, r3, #31
 800b1dc:	d510      	bpl.n	800b200 <_printf_float+0x250>
 800b1de:	ee18 3a10 	vmov	r3, s16
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f af41 	beq.w	800b072 <_printf_float+0xc2>
 800b1f0:	f04f 0800 	mov.w	r8, #0
 800b1f4:	f104 091a 	add.w	r9, r4, #26
 800b1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	4543      	cmp	r3, r8
 800b1fe:	dc09      	bgt.n	800b214 <_printf_float+0x264>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	079b      	lsls	r3, r3, #30
 800b204:	f100 8105 	bmi.w	800b412 <_printf_float+0x462>
 800b208:	68e0      	ldr	r0, [r4, #12]
 800b20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20c:	4298      	cmp	r0, r3
 800b20e:	bfb8      	it	lt
 800b210:	4618      	movlt	r0, r3
 800b212:	e730      	b.n	800b076 <_printf_float+0xc6>
 800b214:	2301      	movs	r3, #1
 800b216:	464a      	mov	r2, r9
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f43f af27 	beq.w	800b072 <_printf_float+0xc2>
 800b224:	f108 0801 	add.w	r8, r8, #1
 800b228:	e7e6      	b.n	800b1f8 <_printf_float+0x248>
 800b22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dc39      	bgt.n	800b2a4 <_printf_float+0x2f4>
 800b230:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <_printf_float+0x2f0>)
 800b232:	2301      	movs	r3, #1
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	47b8      	blx	r7
 800b23a:	3001      	adds	r0, #1
 800b23c:	f43f af19 	beq.w	800b072 <_printf_float+0xc2>
 800b240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b244:	4313      	orrs	r3, r2
 800b246:	d102      	bne.n	800b24e <_printf_float+0x29e>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	07d9      	lsls	r1, r3, #31
 800b24c:	d5d8      	bpl.n	800b200 <_printf_float+0x250>
 800b24e:	ee18 3a10 	vmov	r3, s16
 800b252:	4652      	mov	r2, sl
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	f43f af09 	beq.w	800b072 <_printf_float+0xc2>
 800b260:	f04f 0900 	mov.w	r9, #0
 800b264:	f104 0a1a 	add.w	sl, r4, #26
 800b268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26a:	425b      	negs	r3, r3
 800b26c:	454b      	cmp	r3, r9
 800b26e:	dc01      	bgt.n	800b274 <_printf_float+0x2c4>
 800b270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b272:	e792      	b.n	800b19a <_printf_float+0x1ea>
 800b274:	2301      	movs	r3, #1
 800b276:	4652      	mov	r2, sl
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f aef7 	beq.w	800b072 <_printf_float+0xc2>
 800b284:	f109 0901 	add.w	r9, r9, #1
 800b288:	e7ee      	b.n	800b268 <_printf_float+0x2b8>
 800b28a:	bf00      	nop
 800b28c:	7fefffff 	.word	0x7fefffff
 800b290:	080107e4 	.word	0x080107e4
 800b294:	080107e8 	.word	0x080107e8
 800b298:	080107f0 	.word	0x080107f0
 800b29c:	080107ec 	.word	0x080107ec
 800b2a0:	08010c89 	.word	0x08010c89
 800b2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	bfa8      	it	ge
 800b2ac:	461a      	movge	r2, r3
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	4691      	mov	r9, r2
 800b2b2:	dc37      	bgt.n	800b324 <_printf_float+0x374>
 800b2b4:	f04f 0b00 	mov.w	fp, #0
 800b2b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2bc:	f104 021a 	add.w	r2, r4, #26
 800b2c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2c2:	9305      	str	r3, [sp, #20]
 800b2c4:	eba3 0309 	sub.w	r3, r3, r9
 800b2c8:	455b      	cmp	r3, fp
 800b2ca:	dc33      	bgt.n	800b334 <_printf_float+0x384>
 800b2cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	db3b      	blt.n	800b34c <_printf_float+0x39c>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	07da      	lsls	r2, r3, #31
 800b2d8:	d438      	bmi.n	800b34c <_printf_float+0x39c>
 800b2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2dc:	9a05      	ldr	r2, [sp, #20]
 800b2de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2e0:	1a9a      	subs	r2, r3, r2
 800b2e2:	eba3 0901 	sub.w	r9, r3, r1
 800b2e6:	4591      	cmp	r9, r2
 800b2e8:	bfa8      	it	ge
 800b2ea:	4691      	movge	r9, r2
 800b2ec:	f1b9 0f00 	cmp.w	r9, #0
 800b2f0:	dc35      	bgt.n	800b35e <_printf_float+0x3ae>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2fa:	f104 0a1a 	add.w	sl, r4, #26
 800b2fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b302:	1a9b      	subs	r3, r3, r2
 800b304:	eba3 0309 	sub.w	r3, r3, r9
 800b308:	4543      	cmp	r3, r8
 800b30a:	f77f af79 	ble.w	800b200 <_printf_float+0x250>
 800b30e:	2301      	movs	r3, #1
 800b310:	4652      	mov	r2, sl
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f aeaa 	beq.w	800b072 <_printf_float+0xc2>
 800b31e:	f108 0801 	add.w	r8, r8, #1
 800b322:	e7ec      	b.n	800b2fe <_printf_float+0x34e>
 800b324:	4613      	mov	r3, r2
 800b326:	4631      	mov	r1, r6
 800b328:	4642      	mov	r2, r8
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	d1c0      	bne.n	800b2b4 <_printf_float+0x304>
 800b332:	e69e      	b.n	800b072 <_printf_float+0xc2>
 800b334:	2301      	movs	r3, #1
 800b336:	4631      	mov	r1, r6
 800b338:	4628      	mov	r0, r5
 800b33a:	9205      	str	r2, [sp, #20]
 800b33c:	47b8      	blx	r7
 800b33e:	3001      	adds	r0, #1
 800b340:	f43f ae97 	beq.w	800b072 <_printf_float+0xc2>
 800b344:	9a05      	ldr	r2, [sp, #20]
 800b346:	f10b 0b01 	add.w	fp, fp, #1
 800b34a:	e7b9      	b.n	800b2c0 <_printf_float+0x310>
 800b34c:	ee18 3a10 	vmov	r3, s16
 800b350:	4652      	mov	r2, sl
 800b352:	4631      	mov	r1, r6
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	d1be      	bne.n	800b2da <_printf_float+0x32a>
 800b35c:	e689      	b.n	800b072 <_printf_float+0xc2>
 800b35e:	9a05      	ldr	r2, [sp, #20]
 800b360:	464b      	mov	r3, r9
 800b362:	4442      	add	r2, r8
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	d1c1      	bne.n	800b2f2 <_printf_float+0x342>
 800b36e:	e680      	b.n	800b072 <_printf_float+0xc2>
 800b370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b372:	2a01      	cmp	r2, #1
 800b374:	dc01      	bgt.n	800b37a <_printf_float+0x3ca>
 800b376:	07db      	lsls	r3, r3, #31
 800b378:	d538      	bpl.n	800b3ec <_printf_float+0x43c>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4642      	mov	r2, r8
 800b37e:	4631      	mov	r1, r6
 800b380:	4628      	mov	r0, r5
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f ae74 	beq.w	800b072 <_printf_float+0xc2>
 800b38a:	ee18 3a10 	vmov	r3, s16
 800b38e:	4652      	mov	r2, sl
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	f43f ae6b 	beq.w	800b072 <_printf_float+0xc2>
 800b39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f7f5 fba0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3a8:	b9d8      	cbnz	r0, 800b3e2 <_printf_float+0x432>
 800b3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ac:	f108 0201 	add.w	r2, r8, #1
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b8      	blx	r7
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d10e      	bne.n	800b3da <_printf_float+0x42a>
 800b3bc:	e659      	b.n	800b072 <_printf_float+0xc2>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f43f ae52 	beq.w	800b072 <_printf_float+0xc2>
 800b3ce:	f108 0801 	add.w	r8, r8, #1
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	4543      	cmp	r3, r8
 800b3d8:	dcf1      	bgt.n	800b3be <_printf_float+0x40e>
 800b3da:	464b      	mov	r3, r9
 800b3dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3e0:	e6dc      	b.n	800b19c <_printf_float+0x1ec>
 800b3e2:	f04f 0800 	mov.w	r8, #0
 800b3e6:	f104 0a1a 	add.w	sl, r4, #26
 800b3ea:	e7f2      	b.n	800b3d2 <_printf_float+0x422>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	e7df      	b.n	800b3b2 <_printf_float+0x402>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	464a      	mov	r2, r9
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	47b8      	blx	r7
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	f43f ae38 	beq.w	800b072 <_printf_float+0xc2>
 800b402:	f108 0801 	add.w	r8, r8, #1
 800b406:	68e3      	ldr	r3, [r4, #12]
 800b408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b40a:	1a5b      	subs	r3, r3, r1
 800b40c:	4543      	cmp	r3, r8
 800b40e:	dcf0      	bgt.n	800b3f2 <_printf_float+0x442>
 800b410:	e6fa      	b.n	800b208 <_printf_float+0x258>
 800b412:	f04f 0800 	mov.w	r8, #0
 800b416:	f104 0919 	add.w	r9, r4, #25
 800b41a:	e7f4      	b.n	800b406 <_printf_float+0x456>

0800b41c <_printf_common>:
 800b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b420:	4616      	mov	r6, r2
 800b422:	4699      	mov	r9, r3
 800b424:	688a      	ldr	r2, [r1, #8]
 800b426:	690b      	ldr	r3, [r1, #16]
 800b428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b42c:	4293      	cmp	r3, r2
 800b42e:	bfb8      	it	lt
 800b430:	4613      	movlt	r3, r2
 800b432:	6033      	str	r3, [r6, #0]
 800b434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b438:	4607      	mov	r7, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b10a      	cbz	r2, 800b442 <_printf_common+0x26>
 800b43e:	3301      	adds	r3, #1
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	0699      	lsls	r1, r3, #26
 800b446:	bf42      	ittt	mi
 800b448:	6833      	ldrmi	r3, [r6, #0]
 800b44a:	3302      	addmi	r3, #2
 800b44c:	6033      	strmi	r3, [r6, #0]
 800b44e:	6825      	ldr	r5, [r4, #0]
 800b450:	f015 0506 	ands.w	r5, r5, #6
 800b454:	d106      	bne.n	800b464 <_printf_common+0x48>
 800b456:	f104 0a19 	add.w	sl, r4, #25
 800b45a:	68e3      	ldr	r3, [r4, #12]
 800b45c:	6832      	ldr	r2, [r6, #0]
 800b45e:	1a9b      	subs	r3, r3, r2
 800b460:	42ab      	cmp	r3, r5
 800b462:	dc26      	bgt.n	800b4b2 <_printf_common+0x96>
 800b464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b468:	1e13      	subs	r3, r2, #0
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	bf18      	it	ne
 800b46e:	2301      	movne	r3, #1
 800b470:	0692      	lsls	r2, r2, #26
 800b472:	d42b      	bmi.n	800b4cc <_printf_common+0xb0>
 800b474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b478:	4649      	mov	r1, r9
 800b47a:	4638      	mov	r0, r7
 800b47c:	47c0      	blx	r8
 800b47e:	3001      	adds	r0, #1
 800b480:	d01e      	beq.n	800b4c0 <_printf_common+0xa4>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	68e5      	ldr	r5, [r4, #12]
 800b486:	6832      	ldr	r2, [r6, #0]
 800b488:	f003 0306 	and.w	r3, r3, #6
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	bf08      	it	eq
 800b490:	1aad      	subeq	r5, r5, r2
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	6922      	ldr	r2, [r4, #16]
 800b496:	bf0c      	ite	eq
 800b498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b49c:	2500      	movne	r5, #0
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bfc4      	itt	gt
 800b4a2:	1a9b      	subgt	r3, r3, r2
 800b4a4:	18ed      	addgt	r5, r5, r3
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	341a      	adds	r4, #26
 800b4aa:	42b5      	cmp	r5, r6
 800b4ac:	d11a      	bne.n	800b4e4 <_printf_common+0xc8>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e008      	b.n	800b4c4 <_printf_common+0xa8>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	47c0      	blx	r8
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d103      	bne.n	800b4c8 <_printf_common+0xac>
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	e7c6      	b.n	800b45a <_printf_common+0x3e>
 800b4cc:	18e1      	adds	r1, r4, r3
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	2030      	movs	r0, #48	; 0x30
 800b4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4d6:	4422      	add	r2, r4
 800b4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	e7c7      	b.n	800b474 <_printf_common+0x58>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c0      	blx	r8
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d0e6      	beq.n	800b4c0 <_printf_common+0xa4>
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	e7d9      	b.n	800b4aa <_printf_common+0x8e>
	...

0800b4f8 <_printf_i>:
 800b4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	7e0f      	ldrb	r7, [r1, #24]
 800b4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b500:	2f78      	cmp	r7, #120	; 0x78
 800b502:	4691      	mov	r9, r2
 800b504:	4680      	mov	r8, r0
 800b506:	460c      	mov	r4, r1
 800b508:	469a      	mov	sl, r3
 800b50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b50e:	d807      	bhi.n	800b520 <_printf_i+0x28>
 800b510:	2f62      	cmp	r7, #98	; 0x62
 800b512:	d80a      	bhi.n	800b52a <_printf_i+0x32>
 800b514:	2f00      	cmp	r7, #0
 800b516:	f000 80d8 	beq.w	800b6ca <_printf_i+0x1d2>
 800b51a:	2f58      	cmp	r7, #88	; 0x58
 800b51c:	f000 80a3 	beq.w	800b666 <_printf_i+0x16e>
 800b520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b528:	e03a      	b.n	800b5a0 <_printf_i+0xa8>
 800b52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b52e:	2b15      	cmp	r3, #21
 800b530:	d8f6      	bhi.n	800b520 <_printf_i+0x28>
 800b532:	a101      	add	r1, pc, #4	; (adr r1, 800b538 <_printf_i+0x40>)
 800b534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b538:	0800b591 	.word	0x0800b591
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b521 	.word	0x0800b521
 800b544:	0800b521 	.word	0x0800b521
 800b548:	0800b521 	.word	0x0800b521
 800b54c:	0800b521 	.word	0x0800b521
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b521 	.word	0x0800b521
 800b558:	0800b521 	.word	0x0800b521
 800b55c:	0800b521 	.word	0x0800b521
 800b560:	0800b521 	.word	0x0800b521
 800b564:	0800b6b1 	.word	0x0800b6b1
 800b568:	0800b5d5 	.word	0x0800b5d5
 800b56c:	0800b693 	.word	0x0800b693
 800b570:	0800b521 	.word	0x0800b521
 800b574:	0800b521 	.word	0x0800b521
 800b578:	0800b6d3 	.word	0x0800b6d3
 800b57c:	0800b521 	.word	0x0800b521
 800b580:	0800b5d5 	.word	0x0800b5d5
 800b584:	0800b521 	.word	0x0800b521
 800b588:	0800b521 	.word	0x0800b521
 800b58c:	0800b69b 	.word	0x0800b69b
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	1d1a      	adds	r2, r3, #4
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e0a3      	b.n	800b6ec <_printf_i+0x1f4>
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	6829      	ldr	r1, [r5, #0]
 800b5a8:	0606      	lsls	r6, r0, #24
 800b5aa:	f101 0304 	add.w	r3, r1, #4
 800b5ae:	d50a      	bpl.n	800b5c6 <_printf_i+0xce>
 800b5b0:	680e      	ldr	r6, [r1, #0]
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	da03      	bge.n	800b5c0 <_printf_i+0xc8>
 800b5b8:	232d      	movs	r3, #45	; 0x2d
 800b5ba:	4276      	negs	r6, r6
 800b5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5c0:	485e      	ldr	r0, [pc, #376]	; (800b73c <_printf_i+0x244>)
 800b5c2:	230a      	movs	r3, #10
 800b5c4:	e019      	b.n	800b5fa <_printf_i+0x102>
 800b5c6:	680e      	ldr	r6, [r1, #0]
 800b5c8:	602b      	str	r3, [r5, #0]
 800b5ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5ce:	bf18      	it	ne
 800b5d0:	b236      	sxthne	r6, r6
 800b5d2:	e7ef      	b.n	800b5b4 <_printf_i+0xbc>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	1d19      	adds	r1, r3, #4
 800b5da:	6029      	str	r1, [r5, #0]
 800b5dc:	0601      	lsls	r1, r0, #24
 800b5de:	d501      	bpl.n	800b5e4 <_printf_i+0xec>
 800b5e0:	681e      	ldr	r6, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <_printf_i+0xf2>
 800b5e4:	0646      	lsls	r6, r0, #25
 800b5e6:	d5fb      	bpl.n	800b5e0 <_printf_i+0xe8>
 800b5e8:	881e      	ldrh	r6, [r3, #0]
 800b5ea:	4854      	ldr	r0, [pc, #336]	; (800b73c <_printf_i+0x244>)
 800b5ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2308      	moveq	r3, #8
 800b5f2:	230a      	movne	r3, #10
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5fa:	6865      	ldr	r5, [r4, #4]
 800b5fc:	60a5      	str	r5, [r4, #8]
 800b5fe:	2d00      	cmp	r5, #0
 800b600:	bfa2      	ittt	ge
 800b602:	6821      	ldrge	r1, [r4, #0]
 800b604:	f021 0104 	bicge.w	r1, r1, #4
 800b608:	6021      	strge	r1, [r4, #0]
 800b60a:	b90e      	cbnz	r6, 800b610 <_printf_i+0x118>
 800b60c:	2d00      	cmp	r5, #0
 800b60e:	d04d      	beq.n	800b6ac <_printf_i+0x1b4>
 800b610:	4615      	mov	r5, r2
 800b612:	fbb6 f1f3 	udiv	r1, r6, r3
 800b616:	fb03 6711 	mls	r7, r3, r1, r6
 800b61a:	5dc7      	ldrb	r7, [r0, r7]
 800b61c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b620:	4637      	mov	r7, r6
 800b622:	42bb      	cmp	r3, r7
 800b624:	460e      	mov	r6, r1
 800b626:	d9f4      	bls.n	800b612 <_printf_i+0x11a>
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d10b      	bne.n	800b644 <_printf_i+0x14c>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	07de      	lsls	r6, r3, #31
 800b630:	d508      	bpl.n	800b644 <_printf_i+0x14c>
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	6861      	ldr	r1, [r4, #4]
 800b636:	4299      	cmp	r1, r3
 800b638:	bfde      	ittt	le
 800b63a:	2330      	movle	r3, #48	; 0x30
 800b63c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b640:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b644:	1b52      	subs	r2, r2, r5
 800b646:	6122      	str	r2, [r4, #16]
 800b648:	f8cd a000 	str.w	sl, [sp]
 800b64c:	464b      	mov	r3, r9
 800b64e:	aa03      	add	r2, sp, #12
 800b650:	4621      	mov	r1, r4
 800b652:	4640      	mov	r0, r8
 800b654:	f7ff fee2 	bl	800b41c <_printf_common>
 800b658:	3001      	adds	r0, #1
 800b65a:	d14c      	bne.n	800b6f6 <_printf_i+0x1fe>
 800b65c:	f04f 30ff 	mov.w	r0, #4294967295
 800b660:	b004      	add	sp, #16
 800b662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b666:	4835      	ldr	r0, [pc, #212]	; (800b73c <_printf_i+0x244>)
 800b668:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b66c:	6829      	ldr	r1, [r5, #0]
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	f851 6b04 	ldr.w	r6, [r1], #4
 800b674:	6029      	str	r1, [r5, #0]
 800b676:	061d      	lsls	r5, r3, #24
 800b678:	d514      	bpl.n	800b6a4 <_printf_i+0x1ac>
 800b67a:	07df      	lsls	r7, r3, #31
 800b67c:	bf44      	itt	mi
 800b67e:	f043 0320 	orrmi.w	r3, r3, #32
 800b682:	6023      	strmi	r3, [r4, #0]
 800b684:	b91e      	cbnz	r6, 800b68e <_printf_i+0x196>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	f023 0320 	bic.w	r3, r3, #32
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	2310      	movs	r3, #16
 800b690:	e7b0      	b.n	800b5f4 <_printf_i+0xfc>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	f043 0320 	orr.w	r3, r3, #32
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	2378      	movs	r3, #120	; 0x78
 800b69c:	4828      	ldr	r0, [pc, #160]	; (800b740 <_printf_i+0x248>)
 800b69e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6a2:	e7e3      	b.n	800b66c <_printf_i+0x174>
 800b6a4:	0659      	lsls	r1, r3, #25
 800b6a6:	bf48      	it	mi
 800b6a8:	b2b6      	uxthmi	r6, r6
 800b6aa:	e7e6      	b.n	800b67a <_printf_i+0x182>
 800b6ac:	4615      	mov	r5, r2
 800b6ae:	e7bb      	b.n	800b628 <_printf_i+0x130>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	6826      	ldr	r6, [r4, #0]
 800b6b4:	6961      	ldr	r1, [r4, #20]
 800b6b6:	1d18      	adds	r0, r3, #4
 800b6b8:	6028      	str	r0, [r5, #0]
 800b6ba:	0635      	lsls	r5, r6, #24
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	d501      	bpl.n	800b6c4 <_printf_i+0x1cc>
 800b6c0:	6019      	str	r1, [r3, #0]
 800b6c2:	e002      	b.n	800b6ca <_printf_i+0x1d2>
 800b6c4:	0670      	lsls	r0, r6, #25
 800b6c6:	d5fb      	bpl.n	800b6c0 <_printf_i+0x1c8>
 800b6c8:	8019      	strh	r1, [r3, #0]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	4615      	mov	r5, r2
 800b6d0:	e7ba      	b.n	800b648 <_printf_i+0x150>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	1d1a      	adds	r2, r3, #4
 800b6d6:	602a      	str	r2, [r5, #0]
 800b6d8:	681d      	ldr	r5, [r3, #0]
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f7f4 fd8e 	bl	8000200 <memchr>
 800b6e4:	b108      	cbz	r0, 800b6ea <_printf_i+0x1f2>
 800b6e6:	1b40      	subs	r0, r0, r5
 800b6e8:	6060      	str	r0, [r4, #4]
 800b6ea:	6863      	ldr	r3, [r4, #4]
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f4:	e7a8      	b.n	800b648 <_printf_i+0x150>
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	47d0      	blx	sl
 800b700:	3001      	adds	r0, #1
 800b702:	d0ab      	beq.n	800b65c <_printf_i+0x164>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	079b      	lsls	r3, r3, #30
 800b708:	d413      	bmi.n	800b732 <_printf_i+0x23a>
 800b70a:	68e0      	ldr	r0, [r4, #12]
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	4298      	cmp	r0, r3
 800b710:	bfb8      	it	lt
 800b712:	4618      	movlt	r0, r3
 800b714:	e7a4      	b.n	800b660 <_printf_i+0x168>
 800b716:	2301      	movs	r3, #1
 800b718:	4632      	mov	r2, r6
 800b71a:	4649      	mov	r1, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	47d0      	blx	sl
 800b720:	3001      	adds	r0, #1
 800b722:	d09b      	beq.n	800b65c <_printf_i+0x164>
 800b724:	3501      	adds	r5, #1
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	9903      	ldr	r1, [sp, #12]
 800b72a:	1a5b      	subs	r3, r3, r1
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dcf2      	bgt.n	800b716 <_printf_i+0x21e>
 800b730:	e7eb      	b.n	800b70a <_printf_i+0x212>
 800b732:	2500      	movs	r5, #0
 800b734:	f104 0619 	add.w	r6, r4, #25
 800b738:	e7f5      	b.n	800b726 <_printf_i+0x22e>
 800b73a:	bf00      	nop
 800b73c:	080107f4 	.word	0x080107f4
 800b740:	08010805 	.word	0x08010805

0800b744 <_scanf_float>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	b087      	sub	sp, #28
 800b74a:	4617      	mov	r7, r2
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	688b      	ldr	r3, [r1, #8]
 800b750:	1e5a      	subs	r2, r3, #1
 800b752:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b756:	bf83      	ittte	hi
 800b758:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b75c:	195b      	addhi	r3, r3, r5
 800b75e:	9302      	strhi	r3, [sp, #8]
 800b760:	2300      	movls	r3, #0
 800b762:	bf86      	itte	hi
 800b764:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b768:	608b      	strhi	r3, [r1, #8]
 800b76a:	9302      	strls	r3, [sp, #8]
 800b76c:	680b      	ldr	r3, [r1, #0]
 800b76e:	468b      	mov	fp, r1
 800b770:	2500      	movs	r5, #0
 800b772:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b776:	f84b 3b1c 	str.w	r3, [fp], #28
 800b77a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b77e:	4680      	mov	r8, r0
 800b780:	460c      	mov	r4, r1
 800b782:	465e      	mov	r6, fp
 800b784:	46aa      	mov	sl, r5
 800b786:	46a9      	mov	r9, r5
 800b788:	9501      	str	r5, [sp, #4]
 800b78a:	68a2      	ldr	r2, [r4, #8]
 800b78c:	b152      	cbz	r2, 800b7a4 <_scanf_float+0x60>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b4e      	cmp	r3, #78	; 0x4e
 800b794:	d864      	bhi.n	800b860 <_scanf_float+0x11c>
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d83c      	bhi.n	800b814 <_scanf_float+0xd0>
 800b79a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b79e:	b2c8      	uxtb	r0, r1
 800b7a0:	280e      	cmp	r0, #14
 800b7a2:	d93a      	bls.n	800b81a <_scanf_float+0xd6>
 800b7a4:	f1b9 0f00 	cmp.w	r9, #0
 800b7a8:	d003      	beq.n	800b7b2 <_scanf_float+0x6e>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7b6:	f1ba 0f01 	cmp.w	sl, #1
 800b7ba:	f200 8113 	bhi.w	800b9e4 <_scanf_float+0x2a0>
 800b7be:	455e      	cmp	r6, fp
 800b7c0:	f200 8105 	bhi.w	800b9ce <_scanf_float+0x28a>
 800b7c4:	2501      	movs	r5, #1
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	b007      	add	sp, #28
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b7d2:	2a0d      	cmp	r2, #13
 800b7d4:	d8e6      	bhi.n	800b7a4 <_scanf_float+0x60>
 800b7d6:	a101      	add	r1, pc, #4	; (adr r1, 800b7dc <_scanf_float+0x98>)
 800b7d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7dc:	0800b91b 	.word	0x0800b91b
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b7a5 	.word	0x0800b7a5
 800b7ec:	0800b97b 	.word	0x0800b97b
 800b7f0:	0800b953 	.word	0x0800b953
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b929 	.word	0x0800b929
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b7a5 	.word	0x0800b7a5
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8e1 	.word	0x0800b8e1
 800b814:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b818:	e7db      	b.n	800b7d2 <_scanf_float+0x8e>
 800b81a:	290e      	cmp	r1, #14
 800b81c:	d8c2      	bhi.n	800b7a4 <_scanf_float+0x60>
 800b81e:	a001      	add	r0, pc, #4	; (adr r0, 800b824 <_scanf_float+0xe0>)
 800b820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b824:	0800b8d3 	.word	0x0800b8d3
 800b828:	0800b7a5 	.word	0x0800b7a5
 800b82c:	0800b8d3 	.word	0x0800b8d3
 800b830:	0800b967 	.word	0x0800b967
 800b834:	0800b7a5 	.word	0x0800b7a5
 800b838:	0800b881 	.word	0x0800b881
 800b83c:	0800b8bd 	.word	0x0800b8bd
 800b840:	0800b8bd 	.word	0x0800b8bd
 800b844:	0800b8bd 	.word	0x0800b8bd
 800b848:	0800b8bd 	.word	0x0800b8bd
 800b84c:	0800b8bd 	.word	0x0800b8bd
 800b850:	0800b8bd 	.word	0x0800b8bd
 800b854:	0800b8bd 	.word	0x0800b8bd
 800b858:	0800b8bd 	.word	0x0800b8bd
 800b85c:	0800b8bd 	.word	0x0800b8bd
 800b860:	2b6e      	cmp	r3, #110	; 0x6e
 800b862:	d809      	bhi.n	800b878 <_scanf_float+0x134>
 800b864:	2b60      	cmp	r3, #96	; 0x60
 800b866:	d8b2      	bhi.n	800b7ce <_scanf_float+0x8a>
 800b868:	2b54      	cmp	r3, #84	; 0x54
 800b86a:	d077      	beq.n	800b95c <_scanf_float+0x218>
 800b86c:	2b59      	cmp	r3, #89	; 0x59
 800b86e:	d199      	bne.n	800b7a4 <_scanf_float+0x60>
 800b870:	2d07      	cmp	r5, #7
 800b872:	d197      	bne.n	800b7a4 <_scanf_float+0x60>
 800b874:	2508      	movs	r5, #8
 800b876:	e029      	b.n	800b8cc <_scanf_float+0x188>
 800b878:	2b74      	cmp	r3, #116	; 0x74
 800b87a:	d06f      	beq.n	800b95c <_scanf_float+0x218>
 800b87c:	2b79      	cmp	r3, #121	; 0x79
 800b87e:	e7f6      	b.n	800b86e <_scanf_float+0x12a>
 800b880:	6821      	ldr	r1, [r4, #0]
 800b882:	05c8      	lsls	r0, r1, #23
 800b884:	d51a      	bpl.n	800b8bc <_scanf_float+0x178>
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b88c:	6021      	str	r1, [r4, #0]
 800b88e:	f109 0901 	add.w	r9, r9, #1
 800b892:	b11b      	cbz	r3, 800b89c <_scanf_float+0x158>
 800b894:	3b01      	subs	r3, #1
 800b896:	3201      	adds	r2, #1
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	60a2      	str	r2, [r4, #8]
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	60a3      	str	r3, [r4, #8]
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	607b      	str	r3, [r7, #4]
 800b8b0:	f340 8084 	ble.w	800b9bc <_scanf_float+0x278>
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	603b      	str	r3, [r7, #0]
 800b8ba:	e766      	b.n	800b78a <_scanf_float+0x46>
 800b8bc:	eb1a 0f05 	cmn.w	sl, r5
 800b8c0:	f47f af70 	bne.w	800b7a4 <_scanf_float+0x60>
 800b8c4:	6822      	ldr	r2, [r4, #0]
 800b8c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b8ca:	6022      	str	r2, [r4, #0]
 800b8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b8d0:	e7e4      	b.n	800b89c <_scanf_float+0x158>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	0610      	lsls	r0, r2, #24
 800b8d6:	f57f af65 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8de:	e7f4      	b.n	800b8ca <_scanf_float+0x186>
 800b8e0:	f1ba 0f00 	cmp.w	sl, #0
 800b8e4:	d10e      	bne.n	800b904 <_scanf_float+0x1c0>
 800b8e6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ea:	d10e      	bne.n	800b90a <_scanf_float+0x1c6>
 800b8ec:	6822      	ldr	r2, [r4, #0]
 800b8ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8f6:	d108      	bne.n	800b90a <_scanf_float+0x1c6>
 800b8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8fc:	6022      	str	r2, [r4, #0]
 800b8fe:	f04f 0a01 	mov.w	sl, #1
 800b902:	e7e3      	b.n	800b8cc <_scanf_float+0x188>
 800b904:	f1ba 0f02 	cmp.w	sl, #2
 800b908:	d055      	beq.n	800b9b6 <_scanf_float+0x272>
 800b90a:	2d01      	cmp	r5, #1
 800b90c:	d002      	beq.n	800b914 <_scanf_float+0x1d0>
 800b90e:	2d04      	cmp	r5, #4
 800b910:	f47f af48 	bne.w	800b7a4 <_scanf_float+0x60>
 800b914:	3501      	adds	r5, #1
 800b916:	b2ed      	uxtb	r5, r5
 800b918:	e7d8      	b.n	800b8cc <_scanf_float+0x188>
 800b91a:	f1ba 0f01 	cmp.w	sl, #1
 800b91e:	f47f af41 	bne.w	800b7a4 <_scanf_float+0x60>
 800b922:	f04f 0a02 	mov.w	sl, #2
 800b926:	e7d1      	b.n	800b8cc <_scanf_float+0x188>
 800b928:	b97d      	cbnz	r5, 800b94a <_scanf_float+0x206>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	f47f af3c 	bne.w	800b7aa <_scanf_float+0x66>
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b938:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b93c:	f47f af39 	bne.w	800b7b2 <_scanf_float+0x6e>
 800b940:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	2501      	movs	r5, #1
 800b948:	e7c0      	b.n	800b8cc <_scanf_float+0x188>
 800b94a:	2d03      	cmp	r5, #3
 800b94c:	d0e2      	beq.n	800b914 <_scanf_float+0x1d0>
 800b94e:	2d05      	cmp	r5, #5
 800b950:	e7de      	b.n	800b910 <_scanf_float+0x1cc>
 800b952:	2d02      	cmp	r5, #2
 800b954:	f47f af26 	bne.w	800b7a4 <_scanf_float+0x60>
 800b958:	2503      	movs	r5, #3
 800b95a:	e7b7      	b.n	800b8cc <_scanf_float+0x188>
 800b95c:	2d06      	cmp	r5, #6
 800b95e:	f47f af21 	bne.w	800b7a4 <_scanf_float+0x60>
 800b962:	2507      	movs	r5, #7
 800b964:	e7b2      	b.n	800b8cc <_scanf_float+0x188>
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	0591      	lsls	r1, r2, #22
 800b96a:	f57f af1b 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b96e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	f8cd 9004 	str.w	r9, [sp, #4]
 800b978:	e7a8      	b.n	800b8cc <_scanf_float+0x188>
 800b97a:	6822      	ldr	r2, [r4, #0]
 800b97c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b980:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b984:	d006      	beq.n	800b994 <_scanf_float+0x250>
 800b986:	0550      	lsls	r0, r2, #21
 800b988:	f57f af0c 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	f43f af0f 	beq.w	800b7b2 <_scanf_float+0x6e>
 800b994:	0591      	lsls	r1, r2, #22
 800b996:	bf58      	it	pl
 800b998:	9901      	ldrpl	r1, [sp, #4]
 800b99a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b99e:	bf58      	it	pl
 800b9a0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b9a8:	bf58      	it	pl
 800b9aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9ae:	6022      	str	r2, [r4, #0]
 800b9b0:	f04f 0900 	mov.w	r9, #0
 800b9b4:	e78a      	b.n	800b8cc <_scanf_float+0x188>
 800b9b6:	f04f 0a03 	mov.w	sl, #3
 800b9ba:	e787      	b.n	800b8cc <_scanf_float+0x188>
 800b9bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4798      	blx	r3
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f43f aedf 	beq.w	800b78a <_scanf_float+0x46>
 800b9cc:	e6ea      	b.n	800b7a4 <_scanf_float+0x60>
 800b9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4798      	blx	r3
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	e6ec      	b.n	800b7be <_scanf_float+0x7a>
 800b9e4:	1e6b      	subs	r3, r5, #1
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	d825      	bhi.n	800ba36 <_scanf_float+0x2f2>
 800b9ea:	2d02      	cmp	r5, #2
 800b9ec:	d836      	bhi.n	800ba5c <_scanf_float+0x318>
 800b9ee:	455e      	cmp	r6, fp
 800b9f0:	f67f aee8 	bls.w	800b7c4 <_scanf_float+0x80>
 800b9f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9fc:	463a      	mov	r2, r7
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4798      	blx	r3
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	e7f1      	b.n	800b9ee <_scanf_float+0x2aa>
 800ba0a:	9802      	ldr	r0, [sp, #8]
 800ba0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba14:	9002      	str	r0, [sp, #8]
 800ba16:	463a      	mov	r2, r7
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4798      	blx	r3
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba26:	fa5f fa8a 	uxtb.w	sl, sl
 800ba2a:	f1ba 0f02 	cmp.w	sl, #2
 800ba2e:	d1ec      	bne.n	800ba0a <_scanf_float+0x2c6>
 800ba30:	3d03      	subs	r5, #3
 800ba32:	b2ed      	uxtb	r5, r5
 800ba34:	1b76      	subs	r6, r6, r5
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	05da      	lsls	r2, r3, #23
 800ba3a:	d52f      	bpl.n	800ba9c <_scanf_float+0x358>
 800ba3c:	055b      	lsls	r3, r3, #21
 800ba3e:	d510      	bpl.n	800ba62 <_scanf_float+0x31e>
 800ba40:	455e      	cmp	r6, fp
 800ba42:	f67f aebf 	bls.w	800b7c4 <_scanf_float+0x80>
 800ba46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba4e:	463a      	mov	r2, r7
 800ba50:	4640      	mov	r0, r8
 800ba52:	4798      	blx	r3
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	e7f1      	b.n	800ba40 <_scanf_float+0x2fc>
 800ba5c:	46aa      	mov	sl, r5
 800ba5e:	9602      	str	r6, [sp, #8]
 800ba60:	e7df      	b.n	800ba22 <_scanf_float+0x2de>
 800ba62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	2965      	cmp	r1, #101	; 0x65
 800ba6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	d00c      	beq.n	800ba90 <_scanf_float+0x34c>
 800ba76:	2945      	cmp	r1, #69	; 0x45
 800ba78:	d00a      	beq.n	800ba90 <_scanf_float+0x34c>
 800ba7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4640      	mov	r0, r8
 800ba82:	4798      	blx	r3
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	1eb5      	subs	r5, r6, #2
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba94:	463a      	mov	r2, r7
 800ba96:	4640      	mov	r0, r8
 800ba98:	4798      	blx	r3
 800ba9a:	462e      	mov	r6, r5
 800ba9c:	6825      	ldr	r5, [r4, #0]
 800ba9e:	f015 0510 	ands.w	r5, r5, #16
 800baa2:	d159      	bne.n	800bb58 <_scanf_float+0x414>
 800baa4:	7035      	strb	r5, [r6, #0]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800baac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab0:	d11b      	bne.n	800baea <_scanf_float+0x3a6>
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	454b      	cmp	r3, r9
 800bab6:	eba3 0209 	sub.w	r2, r3, r9
 800baba:	d123      	bne.n	800bb04 <_scanf_float+0x3c0>
 800babc:	2200      	movs	r2, #0
 800babe:	4659      	mov	r1, fp
 800bac0:	4640      	mov	r0, r8
 800bac2:	f000 ff33 	bl	800c92c <_strtod_r>
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	f012 0f02 	tst.w	r2, #2
 800bace:	ec57 6b10 	vmov	r6, r7, d0
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	d021      	beq.n	800bb1a <_scanf_float+0x3d6>
 800bad6:	9903      	ldr	r1, [sp, #12]
 800bad8:	1d1a      	adds	r2, r3, #4
 800bada:	600a      	str	r2, [r1, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	e9c3 6700 	strd	r6, r7, [r3]
 800bae2:	68e3      	ldr	r3, [r4, #12]
 800bae4:	3301      	adds	r3, #1
 800bae6:	60e3      	str	r3, [r4, #12]
 800bae8:	e66d      	b.n	800b7c6 <_scanf_float+0x82>
 800baea:	9b04      	ldr	r3, [sp, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0e5      	beq.n	800babc <_scanf_float+0x378>
 800baf0:	9905      	ldr	r1, [sp, #20]
 800baf2:	230a      	movs	r3, #10
 800baf4:	462a      	mov	r2, r5
 800baf6:	3101      	adds	r1, #1
 800baf8:	4640      	mov	r0, r8
 800bafa:	f000 ff9f 	bl	800ca3c <_strtol_r>
 800bafe:	9b04      	ldr	r3, [sp, #16]
 800bb00:	9e05      	ldr	r6, [sp, #20]
 800bb02:	1ac2      	subs	r2, r0, r3
 800bb04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb08:	429e      	cmp	r6, r3
 800bb0a:	bf28      	it	cs
 800bb0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb10:	4912      	ldr	r1, [pc, #72]	; (800bb5c <_scanf_float+0x418>)
 800bb12:	4630      	mov	r0, r6
 800bb14:	f000 f82c 	bl	800bb70 <siprintf>
 800bb18:	e7d0      	b.n	800babc <_scanf_float+0x378>
 800bb1a:	9903      	ldr	r1, [sp, #12]
 800bb1c:	f012 0f04 	tst.w	r2, #4
 800bb20:	f103 0204 	add.w	r2, r3, #4
 800bb24:	600a      	str	r2, [r1, #0]
 800bb26:	d1d9      	bne.n	800badc <_scanf_float+0x398>
 800bb28:	f8d3 8000 	ldr.w	r8, [r3]
 800bb2c:	ee10 2a10 	vmov	r2, s0
 800bb30:	ee10 0a10 	vmov	r0, s0
 800bb34:	463b      	mov	r3, r7
 800bb36:	4639      	mov	r1, r7
 800bb38:	f7f5 f808 	bl	8000b4c <__aeabi_dcmpun>
 800bb3c:	b128      	cbz	r0, 800bb4a <_scanf_float+0x406>
 800bb3e:	4808      	ldr	r0, [pc, #32]	; (800bb60 <_scanf_float+0x41c>)
 800bb40:	f000 f810 	bl	800bb64 <nanf>
 800bb44:	ed88 0a00 	vstr	s0, [r8]
 800bb48:	e7cb      	b.n	800bae2 <_scanf_float+0x39e>
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f5 f85b 	bl	8000c08 <__aeabi_d2f>
 800bb52:	f8c8 0000 	str.w	r0, [r8]
 800bb56:	e7c4      	b.n	800bae2 <_scanf_float+0x39e>
 800bb58:	2500      	movs	r5, #0
 800bb5a:	e634      	b.n	800b7c6 <_scanf_float+0x82>
 800bb5c:	08010816 	.word	0x08010816
 800bb60:	08010cdb 	.word	0x08010cdb

0800bb64 <nanf>:
 800bb64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bb6c <nanf+0x8>
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	7fc00000 	.word	0x7fc00000

0800bb70 <siprintf>:
 800bb70:	b40e      	push	{r1, r2, r3}
 800bb72:	b500      	push	{lr}
 800bb74:	b09c      	sub	sp, #112	; 0x70
 800bb76:	ab1d      	add	r3, sp, #116	; 0x74
 800bb78:	9002      	str	r0, [sp, #8]
 800bb7a:	9006      	str	r0, [sp, #24]
 800bb7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb80:	4809      	ldr	r0, [pc, #36]	; (800bba8 <siprintf+0x38>)
 800bb82:	9107      	str	r1, [sp, #28]
 800bb84:	9104      	str	r1, [sp, #16]
 800bb86:	4909      	ldr	r1, [pc, #36]	; (800bbac <siprintf+0x3c>)
 800bb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb8c:	9105      	str	r1, [sp, #20]
 800bb8e:	6800      	ldr	r0, [r0, #0]
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	a902      	add	r1, sp, #8
 800bb94:	f003 fac8 	bl	800f128 <_svfiprintf_r>
 800bb98:	9b02      	ldr	r3, [sp, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	b01c      	add	sp, #112	; 0x70
 800bba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba4:	b003      	add	sp, #12
 800bba6:	4770      	bx	lr
 800bba8:	20000020 	.word	0x20000020
 800bbac:	ffff0208 	.word	0xffff0208

0800bbb0 <siscanf>:
 800bbb0:	b40e      	push	{r1, r2, r3}
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	b09f      	sub	sp, #124	; 0x7c
 800bbb6:	ac21      	add	r4, sp, #132	; 0x84
 800bbb8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bbbc:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbc0:	9201      	str	r2, [sp, #4]
 800bbc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bbc6:	9004      	str	r0, [sp, #16]
 800bbc8:	9008      	str	r0, [sp, #32]
 800bbca:	f7f4 fb0b 	bl	80001e4 <strlen>
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <siscanf+0x50>)
 800bbd0:	9005      	str	r0, [sp, #20]
 800bbd2:	9009      	str	r0, [sp, #36]	; 0x24
 800bbd4:	930d      	str	r3, [sp, #52]	; 0x34
 800bbd6:	480b      	ldr	r0, [pc, #44]	; (800bc04 <siscanf+0x54>)
 800bbd8:	9a01      	ldr	r2, [sp, #4]
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	9403      	str	r4, [sp, #12]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9311      	str	r3, [sp, #68]	; 0x44
 800bbe2:	9316      	str	r3, [sp, #88]	; 0x58
 800bbe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbe8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bbec:	a904      	add	r1, sp, #16
 800bbee:	4623      	mov	r3, r4
 800bbf0:	f003 fbf4 	bl	800f3dc <__ssvfiscanf_r>
 800bbf4:	b01f      	add	sp, #124	; 0x7c
 800bbf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbfa:	b003      	add	sp, #12
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	0800bc2b 	.word	0x0800bc2b
 800bc04:	20000020 	.word	0x20000020

0800bc08 <__sread>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	f003 feae 	bl	800f970 <_read_r>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	bfab      	itete	ge
 800bc18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc1c:	181b      	addge	r3, r3, r0
 800bc1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc22:	bfac      	ite	ge
 800bc24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc26:	81a3      	strhlt	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__seofread>:
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	4770      	bx	lr

0800bc2e <__swrite>:
 800bc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc32:	461f      	mov	r7, r3
 800bc34:	898b      	ldrh	r3, [r1, #12]
 800bc36:	05db      	lsls	r3, r3, #23
 800bc38:	4605      	mov	r5, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	d505      	bpl.n	800bc4c <__swrite+0x1e>
 800bc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc44:	2302      	movs	r3, #2
 800bc46:	2200      	movs	r2, #0
 800bc48:	f002 fc26 	bl	800e498 <_lseek_r>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc56:	81a3      	strh	r3, [r4, #12]
 800bc58:	4632      	mov	r2, r6
 800bc5a:	463b      	mov	r3, r7
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc62:	f001 b9a7 	b.w	800cfb4 <_write_r>

0800bc66 <__sseek>:
 800bc66:	b510      	push	{r4, lr}
 800bc68:	460c      	mov	r4, r1
 800bc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6e:	f002 fc13 	bl	800e498 <_lseek_r>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	bf15      	itete	ne
 800bc78:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc82:	81a3      	strheq	r3, [r4, #12]
 800bc84:	bf18      	it	ne
 800bc86:	81a3      	strhne	r3, [r4, #12]
 800bc88:	bd10      	pop	{r4, pc}

0800bc8a <__sclose>:
 800bc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8e:	f001 b9a3 	b.w	800cfd8 <_close_r>

0800bc92 <strchr>:
 800bc92:	b2c9      	uxtb	r1, r1
 800bc94:	4603      	mov	r3, r0
 800bc96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc9a:	b11a      	cbz	r2, 800bca4 <strchr+0x12>
 800bc9c:	428a      	cmp	r2, r1
 800bc9e:	d1f9      	bne.n	800bc94 <strchr+0x2>
 800bca0:	4618      	mov	r0, r3
 800bca2:	4770      	bx	lr
 800bca4:	2900      	cmp	r1, #0
 800bca6:	bf18      	it	ne
 800bca8:	2300      	movne	r3, #0
 800bcaa:	e7f9      	b.n	800bca0 <strchr+0xe>

0800bcac <strcpy>:
 800bcac:	4603      	mov	r3, r0
 800bcae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcb2:	f803 2b01 	strb.w	r2, [r3], #1
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	d1f9      	bne.n	800bcae <strcpy+0x2>
 800bcba:	4770      	bx	lr

0800bcbc <strstr>:
 800bcbc:	780a      	ldrb	r2, [r1, #0]
 800bcbe:	b570      	push	{r4, r5, r6, lr}
 800bcc0:	b96a      	cbnz	r2, 800bcde <strstr+0x22>
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d109      	bne.n	800bcdc <strstr+0x20>
 800bcc8:	460c      	mov	r4, r1
 800bcca:	4605      	mov	r5, r0
 800bccc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0f6      	beq.n	800bcc2 <strstr+0x6>
 800bcd4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bcd8:	429e      	cmp	r6, r3
 800bcda:	d0f7      	beq.n	800bccc <strstr+0x10>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	7803      	ldrb	r3, [r0, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1ef      	bne.n	800bcc4 <strstr+0x8>
 800bce4:	4618      	mov	r0, r3
 800bce6:	e7ec      	b.n	800bcc2 <strstr+0x6>

0800bce8 <sulp>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4604      	mov	r4, r0
 800bcec:	460d      	mov	r5, r1
 800bcee:	ec45 4b10 	vmov	d0, r4, r5
 800bcf2:	4616      	mov	r6, r2
 800bcf4:	f002 ff76 	bl	800ebe4 <__ulp>
 800bcf8:	ec51 0b10 	vmov	r0, r1, d0
 800bcfc:	b17e      	cbz	r6, 800bd1e <sulp+0x36>
 800bcfe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd09      	ble.n	800bd1e <sulp+0x36>
 800bd0a:	051b      	lsls	r3, r3, #20
 800bd0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd10:	2400      	movs	r4, #0
 800bd12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd16:	4622      	mov	r2, r4
 800bd18:	462b      	mov	r3, r5
 800bd1a:	f7f4 fc7d 	bl	8000618 <__aeabi_dmul>
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}

0800bd20 <_strtod_l>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ed2d 8b02 	vpush	{d8}
 800bd28:	b09d      	sub	sp, #116	; 0x74
 800bd2a:	461f      	mov	r7, r3
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9318      	str	r3, [sp, #96]	; 0x60
 800bd30:	4ba2      	ldr	r3, [pc, #648]	; (800bfbc <_strtod_l+0x29c>)
 800bd32:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	9305      	str	r3, [sp, #20]
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	4688      	mov	r8, r1
 800bd3e:	f7f4 fa51 	bl	80001e4 <strlen>
 800bd42:	f04f 0a00 	mov.w	sl, #0
 800bd46:	4605      	mov	r5, r0
 800bd48:	f04f 0b00 	mov.w	fp, #0
 800bd4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	2a2b      	cmp	r2, #43	; 0x2b
 800bd56:	d04e      	beq.n	800bdf6 <_strtod_l+0xd6>
 800bd58:	d83b      	bhi.n	800bdd2 <_strtod_l+0xb2>
 800bd5a:	2a0d      	cmp	r2, #13
 800bd5c:	d834      	bhi.n	800bdc8 <_strtod_l+0xa8>
 800bd5e:	2a08      	cmp	r2, #8
 800bd60:	d834      	bhi.n	800bdcc <_strtod_l+0xac>
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d03e      	beq.n	800bde4 <_strtod_l+0xc4>
 800bd66:	2300      	movs	r3, #0
 800bd68:	930a      	str	r3, [sp, #40]	; 0x28
 800bd6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bd6c:	7833      	ldrb	r3, [r6, #0]
 800bd6e:	2b30      	cmp	r3, #48	; 0x30
 800bd70:	f040 80b0 	bne.w	800bed4 <_strtod_l+0x1b4>
 800bd74:	7873      	ldrb	r3, [r6, #1]
 800bd76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd7a:	2b58      	cmp	r3, #88	; 0x58
 800bd7c:	d168      	bne.n	800be50 <_strtod_l+0x130>
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	ab18      	add	r3, sp, #96	; 0x60
 800bd84:	9702      	str	r7, [sp, #8]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	4a8d      	ldr	r2, [pc, #564]	; (800bfc0 <_strtod_l+0x2a0>)
 800bd8a:	ab19      	add	r3, sp, #100	; 0x64
 800bd8c:	a917      	add	r1, sp, #92	; 0x5c
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f002 f828 	bl	800dde4 <__gethex>
 800bd94:	f010 0707 	ands.w	r7, r0, #7
 800bd98:	4605      	mov	r5, r0
 800bd9a:	d005      	beq.n	800bda8 <_strtod_l+0x88>
 800bd9c:	2f06      	cmp	r7, #6
 800bd9e:	d12c      	bne.n	800bdfa <_strtod_l+0xda>
 800bda0:	3601      	adds	r6, #1
 800bda2:	2300      	movs	r3, #0
 800bda4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bda6:	930a      	str	r3, [sp, #40]	; 0x28
 800bda8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f040 8590 	bne.w	800c8d0 <_strtod_l+0xbb0>
 800bdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb2:	b1eb      	cbz	r3, 800bdf0 <_strtod_l+0xd0>
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdba:	ec43 2b10 	vmov	d0, r2, r3
 800bdbe:	b01d      	add	sp, #116	; 0x74
 800bdc0:	ecbd 8b02 	vpop	{d8}
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	2a20      	cmp	r2, #32
 800bdca:	d1cc      	bne.n	800bd66 <_strtod_l+0x46>
 800bdcc:	3301      	adds	r3, #1
 800bdce:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdd0:	e7be      	b.n	800bd50 <_strtod_l+0x30>
 800bdd2:	2a2d      	cmp	r2, #45	; 0x2d
 800bdd4:	d1c7      	bne.n	800bd66 <_strtod_l+0x46>
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	920a      	str	r2, [sp, #40]	; 0x28
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bdde:	785b      	ldrb	r3, [r3, #1]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1c2      	bne.n	800bd6a <_strtod_l+0x4a>
 800bde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bde6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f040 856e 	bne.w	800c8cc <_strtod_l+0xbac>
 800bdf0:	4652      	mov	r2, sl
 800bdf2:	465b      	mov	r3, fp
 800bdf4:	e7e1      	b.n	800bdba <_strtod_l+0x9a>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	e7ee      	b.n	800bdd8 <_strtod_l+0xb8>
 800bdfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bdfc:	b13a      	cbz	r2, 800be0e <_strtod_l+0xee>
 800bdfe:	2135      	movs	r1, #53	; 0x35
 800be00:	a81a      	add	r0, sp, #104	; 0x68
 800be02:	f002 fffa 	bl	800edfa <__copybits>
 800be06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be08:	4620      	mov	r0, r4
 800be0a:	f002 fbb9 	bl	800e580 <_Bfree>
 800be0e:	3f01      	subs	r7, #1
 800be10:	2f04      	cmp	r7, #4
 800be12:	d806      	bhi.n	800be22 <_strtod_l+0x102>
 800be14:	e8df f007 	tbb	[pc, r7]
 800be18:	1714030a 	.word	0x1714030a
 800be1c:	0a          	.byte	0x0a
 800be1d:	00          	.byte	0x00
 800be1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800be22:	0728      	lsls	r0, r5, #28
 800be24:	d5c0      	bpl.n	800bda8 <_strtod_l+0x88>
 800be26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be2a:	e7bd      	b.n	800bda8 <_strtod_l+0x88>
 800be2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800be30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be3e:	e7f0      	b.n	800be22 <_strtod_l+0x102>
 800be40:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bfc4 <_strtod_l+0x2a4>
 800be44:	e7ed      	b.n	800be22 <_strtod_l+0x102>
 800be46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be4a:	f04f 3aff 	mov.w	sl, #4294967295
 800be4e:	e7e8      	b.n	800be22 <_strtod_l+0x102>
 800be50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	9217      	str	r2, [sp, #92]	; 0x5c
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	2b30      	cmp	r3, #48	; 0x30
 800be5a:	d0f9      	beq.n	800be50 <_strtod_l+0x130>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0a3      	beq.n	800bda8 <_strtod_l+0x88>
 800be60:	2301      	movs	r3, #1
 800be62:	f04f 0900 	mov.w	r9, #0
 800be66:	9304      	str	r3, [sp, #16]
 800be68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be6a:	9308      	str	r3, [sp, #32]
 800be6c:	f8cd 901c 	str.w	r9, [sp, #28]
 800be70:	464f      	mov	r7, r9
 800be72:	220a      	movs	r2, #10
 800be74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800be76:	7806      	ldrb	r6, [r0, #0]
 800be78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be7c:	b2d9      	uxtb	r1, r3
 800be7e:	2909      	cmp	r1, #9
 800be80:	d92a      	bls.n	800bed8 <_strtod_l+0x1b8>
 800be82:	9905      	ldr	r1, [sp, #20]
 800be84:	462a      	mov	r2, r5
 800be86:	f003 fdd7 	bl	800fa38 <strncmp>
 800be8a:	b398      	cbz	r0, 800bef4 <_strtod_l+0x1d4>
 800be8c:	2000      	movs	r0, #0
 800be8e:	4632      	mov	r2, r6
 800be90:	463d      	mov	r5, r7
 800be92:	9005      	str	r0, [sp, #20]
 800be94:	4603      	mov	r3, r0
 800be96:	2a65      	cmp	r2, #101	; 0x65
 800be98:	d001      	beq.n	800be9e <_strtod_l+0x17e>
 800be9a:	2a45      	cmp	r2, #69	; 0x45
 800be9c:	d118      	bne.n	800bed0 <_strtod_l+0x1b0>
 800be9e:	b91d      	cbnz	r5, 800bea8 <_strtod_l+0x188>
 800bea0:	9a04      	ldr	r2, [sp, #16]
 800bea2:	4302      	orrs	r2, r0
 800bea4:	d09e      	beq.n	800bde4 <_strtod_l+0xc4>
 800bea6:	2500      	movs	r5, #0
 800bea8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800beac:	f108 0201 	add.w	r2, r8, #1
 800beb0:	9217      	str	r2, [sp, #92]	; 0x5c
 800beb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800beb6:	2a2b      	cmp	r2, #43	; 0x2b
 800beb8:	d075      	beq.n	800bfa6 <_strtod_l+0x286>
 800beba:	2a2d      	cmp	r2, #45	; 0x2d
 800bebc:	d07b      	beq.n	800bfb6 <_strtod_l+0x296>
 800bebe:	f04f 0c00 	mov.w	ip, #0
 800bec2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bec6:	2909      	cmp	r1, #9
 800bec8:	f240 8082 	bls.w	800bfd0 <_strtod_l+0x2b0>
 800becc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bed0:	2600      	movs	r6, #0
 800bed2:	e09d      	b.n	800c010 <_strtod_l+0x2f0>
 800bed4:	2300      	movs	r3, #0
 800bed6:	e7c4      	b.n	800be62 <_strtod_l+0x142>
 800bed8:	2f08      	cmp	r7, #8
 800beda:	bfd8      	it	le
 800bedc:	9907      	ldrle	r1, [sp, #28]
 800bede:	f100 0001 	add.w	r0, r0, #1
 800bee2:	bfda      	itte	le
 800bee4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bee8:	9307      	strle	r3, [sp, #28]
 800beea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800beee:	3701      	adds	r7, #1
 800bef0:	9017      	str	r0, [sp, #92]	; 0x5c
 800bef2:	e7bf      	b.n	800be74 <_strtod_l+0x154>
 800bef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bef6:	195a      	adds	r2, r3, r5
 800bef8:	9217      	str	r2, [sp, #92]	; 0x5c
 800befa:	5d5a      	ldrb	r2, [r3, r5]
 800befc:	2f00      	cmp	r7, #0
 800befe:	d037      	beq.n	800bf70 <_strtod_l+0x250>
 800bf00:	9005      	str	r0, [sp, #20]
 800bf02:	463d      	mov	r5, r7
 800bf04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf08:	2b09      	cmp	r3, #9
 800bf0a:	d912      	bls.n	800bf32 <_strtod_l+0x212>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e7c2      	b.n	800be96 <_strtod_l+0x176>
 800bf10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf16:	785a      	ldrb	r2, [r3, #1]
 800bf18:	3001      	adds	r0, #1
 800bf1a:	2a30      	cmp	r2, #48	; 0x30
 800bf1c:	d0f8      	beq.n	800bf10 <_strtod_l+0x1f0>
 800bf1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf22:	2b08      	cmp	r3, #8
 800bf24:	f200 84d9 	bhi.w	800c8da <_strtod_l+0xbba>
 800bf28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf2a:	9005      	str	r0, [sp, #20]
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	4605      	mov	r5, r0
 800bf32:	3a30      	subs	r2, #48	; 0x30
 800bf34:	f100 0301 	add.w	r3, r0, #1
 800bf38:	d014      	beq.n	800bf64 <_strtod_l+0x244>
 800bf3a:	9905      	ldr	r1, [sp, #20]
 800bf3c:	4419      	add	r1, r3
 800bf3e:	9105      	str	r1, [sp, #20]
 800bf40:	462b      	mov	r3, r5
 800bf42:	eb00 0e05 	add.w	lr, r0, r5
 800bf46:	210a      	movs	r1, #10
 800bf48:	4573      	cmp	r3, lr
 800bf4a:	d113      	bne.n	800bf74 <_strtod_l+0x254>
 800bf4c:	182b      	adds	r3, r5, r0
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	f105 0501 	add.w	r5, r5, #1
 800bf54:	4405      	add	r5, r0
 800bf56:	dc1c      	bgt.n	800bf92 <_strtod_l+0x272>
 800bf58:	9907      	ldr	r1, [sp, #28]
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	fb03 2301 	mla	r3, r3, r1, r2
 800bf60:	9307      	str	r3, [sp, #28]
 800bf62:	2300      	movs	r3, #0
 800bf64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf66:	1c51      	adds	r1, r2, #1
 800bf68:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf6a:	7852      	ldrb	r2, [r2, #1]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	e7c9      	b.n	800bf04 <_strtod_l+0x1e4>
 800bf70:	4638      	mov	r0, r7
 800bf72:	e7d2      	b.n	800bf1a <_strtod_l+0x1fa>
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	dc04      	bgt.n	800bf82 <_strtod_l+0x262>
 800bf78:	9e07      	ldr	r6, [sp, #28]
 800bf7a:	434e      	muls	r6, r1
 800bf7c:	9607      	str	r6, [sp, #28]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	e7e2      	b.n	800bf48 <_strtod_l+0x228>
 800bf82:	f103 0c01 	add.w	ip, r3, #1
 800bf86:	f1bc 0f10 	cmp.w	ip, #16
 800bf8a:	bfd8      	it	le
 800bf8c:	fb01 f909 	mulle.w	r9, r1, r9
 800bf90:	e7f5      	b.n	800bf7e <_strtod_l+0x25e>
 800bf92:	2d10      	cmp	r5, #16
 800bf94:	bfdc      	itt	le
 800bf96:	230a      	movle	r3, #10
 800bf98:	fb03 2909 	mlale	r9, r3, r9, r2
 800bf9c:	e7e1      	b.n	800bf62 <_strtod_l+0x242>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e77c      	b.n	800bea0 <_strtod_l+0x180>
 800bfa6:	f04f 0c00 	mov.w	ip, #0
 800bfaa:	f108 0202 	add.w	r2, r8, #2
 800bfae:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bfb4:	e785      	b.n	800bec2 <_strtod_l+0x1a2>
 800bfb6:	f04f 0c01 	mov.w	ip, #1
 800bfba:	e7f6      	b.n	800bfaa <_strtod_l+0x28a>
 800bfbc:	08010aa4 	.word	0x08010aa4
 800bfc0:	0801081c 	.word	0x0801081c
 800bfc4:	7ff00000 	.word	0x7ff00000
 800bfc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfca:	1c51      	adds	r1, r2, #1
 800bfcc:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfce:	7852      	ldrb	r2, [r2, #1]
 800bfd0:	2a30      	cmp	r2, #48	; 0x30
 800bfd2:	d0f9      	beq.n	800bfc8 <_strtod_l+0x2a8>
 800bfd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bfd8:	2908      	cmp	r1, #8
 800bfda:	f63f af79 	bhi.w	800bed0 <_strtod_l+0x1b0>
 800bfde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bfe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfe4:	9206      	str	r2, [sp, #24]
 800bfe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfe8:	1c51      	adds	r1, r2, #1
 800bfea:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfec:	7852      	ldrb	r2, [r2, #1]
 800bfee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bff2:	2e09      	cmp	r6, #9
 800bff4:	d937      	bls.n	800c066 <_strtod_l+0x346>
 800bff6:	9e06      	ldr	r6, [sp, #24]
 800bff8:	1b89      	subs	r1, r1, r6
 800bffa:	2908      	cmp	r1, #8
 800bffc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c000:	dc02      	bgt.n	800c008 <_strtod_l+0x2e8>
 800c002:	4576      	cmp	r6, lr
 800c004:	bfa8      	it	ge
 800c006:	4676      	movge	r6, lr
 800c008:	f1bc 0f00 	cmp.w	ip, #0
 800c00c:	d000      	beq.n	800c010 <_strtod_l+0x2f0>
 800c00e:	4276      	negs	r6, r6
 800c010:	2d00      	cmp	r5, #0
 800c012:	d14d      	bne.n	800c0b0 <_strtod_l+0x390>
 800c014:	9904      	ldr	r1, [sp, #16]
 800c016:	4301      	orrs	r1, r0
 800c018:	f47f aec6 	bne.w	800bda8 <_strtod_l+0x88>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f aee1 	bne.w	800bde4 <_strtod_l+0xc4>
 800c022:	2a69      	cmp	r2, #105	; 0x69
 800c024:	d027      	beq.n	800c076 <_strtod_l+0x356>
 800c026:	dc24      	bgt.n	800c072 <_strtod_l+0x352>
 800c028:	2a49      	cmp	r2, #73	; 0x49
 800c02a:	d024      	beq.n	800c076 <_strtod_l+0x356>
 800c02c:	2a4e      	cmp	r2, #78	; 0x4e
 800c02e:	f47f aed9 	bne.w	800bde4 <_strtod_l+0xc4>
 800c032:	499f      	ldr	r1, [pc, #636]	; (800c2b0 <_strtod_l+0x590>)
 800c034:	a817      	add	r0, sp, #92	; 0x5c
 800c036:	f002 f92d 	bl	800e294 <__match>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f43f aed2 	beq.w	800bde4 <_strtod_l+0xc4>
 800c040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b28      	cmp	r3, #40	; 0x28
 800c046:	d12d      	bne.n	800c0a4 <_strtod_l+0x384>
 800c048:	499a      	ldr	r1, [pc, #616]	; (800c2b4 <_strtod_l+0x594>)
 800c04a:	aa1a      	add	r2, sp, #104	; 0x68
 800c04c:	a817      	add	r0, sp, #92	; 0x5c
 800c04e:	f002 f935 	bl	800e2bc <__hexnan>
 800c052:	2805      	cmp	r0, #5
 800c054:	d126      	bne.n	800c0a4 <_strtod_l+0x384>
 800c056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c058:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c05c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c060:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c064:	e6a0      	b.n	800bda8 <_strtod_l+0x88>
 800c066:	210a      	movs	r1, #10
 800c068:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c06c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c070:	e7b9      	b.n	800bfe6 <_strtod_l+0x2c6>
 800c072:	2a6e      	cmp	r2, #110	; 0x6e
 800c074:	e7db      	b.n	800c02e <_strtod_l+0x30e>
 800c076:	4990      	ldr	r1, [pc, #576]	; (800c2b8 <_strtod_l+0x598>)
 800c078:	a817      	add	r0, sp, #92	; 0x5c
 800c07a:	f002 f90b 	bl	800e294 <__match>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f aeb0 	beq.w	800bde4 <_strtod_l+0xc4>
 800c084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c086:	498d      	ldr	r1, [pc, #564]	; (800c2bc <_strtod_l+0x59c>)
 800c088:	3b01      	subs	r3, #1
 800c08a:	a817      	add	r0, sp, #92	; 0x5c
 800c08c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c08e:	f002 f901 	bl	800e294 <__match>
 800c092:	b910      	cbnz	r0, 800c09a <_strtod_l+0x37a>
 800c094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c096:	3301      	adds	r3, #1
 800c098:	9317      	str	r3, [sp, #92]	; 0x5c
 800c09a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c2cc <_strtod_l+0x5ac>
 800c09e:	f04f 0a00 	mov.w	sl, #0
 800c0a2:	e681      	b.n	800bda8 <_strtod_l+0x88>
 800c0a4:	4886      	ldr	r0, [pc, #536]	; (800c2c0 <_strtod_l+0x5a0>)
 800c0a6:	f003 fc77 	bl	800f998 <nan>
 800c0aa:	ec5b ab10 	vmov	sl, fp, d0
 800c0ae:	e67b      	b.n	800bda8 <_strtod_l+0x88>
 800c0b0:	9b05      	ldr	r3, [sp, #20]
 800c0b2:	9807      	ldr	r0, [sp, #28]
 800c0b4:	1af3      	subs	r3, r6, r3
 800c0b6:	2f00      	cmp	r7, #0
 800c0b8:	bf08      	it	eq
 800c0ba:	462f      	moveq	r7, r5
 800c0bc:	2d10      	cmp	r5, #16
 800c0be:	9306      	str	r3, [sp, #24]
 800c0c0:	46a8      	mov	r8, r5
 800c0c2:	bfa8      	it	ge
 800c0c4:	f04f 0810 	movge.w	r8, #16
 800c0c8:	f7f4 fa2c 	bl	8000524 <__aeabi_ui2d>
 800c0cc:	2d09      	cmp	r5, #9
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	468b      	mov	fp, r1
 800c0d2:	dd13      	ble.n	800c0fc <_strtod_l+0x3dc>
 800c0d4:	4b7b      	ldr	r3, [pc, #492]	; (800c2c4 <_strtod_l+0x5a4>)
 800c0d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0de:	f7f4 fa9b 	bl	8000618 <__aeabi_dmul>
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	4648      	mov	r0, r9
 800c0e6:	468b      	mov	fp, r1
 800c0e8:	f7f4 fa1c 	bl	8000524 <__aeabi_ui2d>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	4659      	mov	r1, fp
 800c0f4:	f7f4 f8da 	bl	80002ac <__adddf3>
 800c0f8:	4682      	mov	sl, r0
 800c0fa:	468b      	mov	fp, r1
 800c0fc:	2d0f      	cmp	r5, #15
 800c0fe:	dc38      	bgt.n	800c172 <_strtod_l+0x452>
 800c100:	9b06      	ldr	r3, [sp, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f43f ae50 	beq.w	800bda8 <_strtod_l+0x88>
 800c108:	dd24      	ble.n	800c154 <_strtod_l+0x434>
 800c10a:	2b16      	cmp	r3, #22
 800c10c:	dc0b      	bgt.n	800c126 <_strtod_l+0x406>
 800c10e:	496d      	ldr	r1, [pc, #436]	; (800c2c4 <_strtod_l+0x5a4>)
 800c110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c118:	4652      	mov	r2, sl
 800c11a:	465b      	mov	r3, fp
 800c11c:	f7f4 fa7c 	bl	8000618 <__aeabi_dmul>
 800c120:	4682      	mov	sl, r0
 800c122:	468b      	mov	fp, r1
 800c124:	e640      	b.n	800bda8 <_strtod_l+0x88>
 800c126:	9a06      	ldr	r2, [sp, #24]
 800c128:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c12c:	4293      	cmp	r3, r2
 800c12e:	db20      	blt.n	800c172 <_strtod_l+0x452>
 800c130:	4c64      	ldr	r4, [pc, #400]	; (800c2c4 <_strtod_l+0x5a4>)
 800c132:	f1c5 050f 	rsb	r5, r5, #15
 800c136:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c13a:	4652      	mov	r2, sl
 800c13c:	465b      	mov	r3, fp
 800c13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c142:	f7f4 fa69 	bl	8000618 <__aeabi_dmul>
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	1b5d      	subs	r5, r3, r5
 800c14a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c14e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c152:	e7e3      	b.n	800c11c <_strtod_l+0x3fc>
 800c154:	9b06      	ldr	r3, [sp, #24]
 800c156:	3316      	adds	r3, #22
 800c158:	db0b      	blt.n	800c172 <_strtod_l+0x452>
 800c15a:	9b05      	ldr	r3, [sp, #20]
 800c15c:	1b9e      	subs	r6, r3, r6
 800c15e:	4b59      	ldr	r3, [pc, #356]	; (800c2c4 <_strtod_l+0x5a4>)
 800c160:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c164:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c168:	4650      	mov	r0, sl
 800c16a:	4659      	mov	r1, fp
 800c16c:	f7f4 fb7e 	bl	800086c <__aeabi_ddiv>
 800c170:	e7d6      	b.n	800c120 <_strtod_l+0x400>
 800c172:	9b06      	ldr	r3, [sp, #24]
 800c174:	eba5 0808 	sub.w	r8, r5, r8
 800c178:	4498      	add	r8, r3
 800c17a:	f1b8 0f00 	cmp.w	r8, #0
 800c17e:	dd74      	ble.n	800c26a <_strtod_l+0x54a>
 800c180:	f018 030f 	ands.w	r3, r8, #15
 800c184:	d00a      	beq.n	800c19c <_strtod_l+0x47c>
 800c186:	494f      	ldr	r1, [pc, #316]	; (800c2c4 <_strtod_l+0x5a4>)
 800c188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c18c:	4652      	mov	r2, sl
 800c18e:	465b      	mov	r3, fp
 800c190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c194:	f7f4 fa40 	bl	8000618 <__aeabi_dmul>
 800c198:	4682      	mov	sl, r0
 800c19a:	468b      	mov	fp, r1
 800c19c:	f038 080f 	bics.w	r8, r8, #15
 800c1a0:	d04f      	beq.n	800c242 <_strtod_l+0x522>
 800c1a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1a6:	dd22      	ble.n	800c1ee <_strtod_l+0x4ce>
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	462e      	mov	r6, r5
 800c1ac:	9507      	str	r5, [sp, #28]
 800c1ae:	9505      	str	r5, [sp, #20]
 800c1b0:	2322      	movs	r3, #34	; 0x22
 800c1b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c2cc <_strtod_l+0x5ac>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	f04f 0a00 	mov.w	sl, #0
 800c1bc:	9b07      	ldr	r3, [sp, #28]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f43f adf2 	beq.w	800bda8 <_strtod_l+0x88>
 800c1c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f002 f9da 	bl	800e580 <_Bfree>
 800c1cc:	9905      	ldr	r1, [sp, #20]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f002 f9d6 	bl	800e580 <_Bfree>
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f002 f9d2 	bl	800e580 <_Bfree>
 800c1dc:	9907      	ldr	r1, [sp, #28]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f002 f9ce 	bl	800e580 <_Bfree>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f002 f9ca 	bl	800e580 <_Bfree>
 800c1ec:	e5dc      	b.n	800bda8 <_strtod_l+0x88>
 800c1ee:	4b36      	ldr	r3, [pc, #216]	; (800c2c8 <_strtod_l+0x5a8>)
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c1f8:	4650      	mov	r0, sl
 800c1fa:	4659      	mov	r1, fp
 800c1fc:	4699      	mov	r9, r3
 800c1fe:	f1b8 0f01 	cmp.w	r8, #1
 800c202:	dc21      	bgt.n	800c248 <_strtod_l+0x528>
 800c204:	b10b      	cbz	r3, 800c20a <_strtod_l+0x4ea>
 800c206:	4682      	mov	sl, r0
 800c208:	468b      	mov	fp, r1
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <_strtod_l+0x5a8>)
 800c20c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c210:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c214:	4652      	mov	r2, sl
 800c216:	465b      	mov	r3, fp
 800c218:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c21c:	f7f4 f9fc 	bl	8000618 <__aeabi_dmul>
 800c220:	4b2a      	ldr	r3, [pc, #168]	; (800c2cc <_strtod_l+0x5ac>)
 800c222:	460a      	mov	r2, r1
 800c224:	400b      	ands	r3, r1
 800c226:	492a      	ldr	r1, [pc, #168]	; (800c2d0 <_strtod_l+0x5b0>)
 800c228:	428b      	cmp	r3, r1
 800c22a:	4682      	mov	sl, r0
 800c22c:	d8bc      	bhi.n	800c1a8 <_strtod_l+0x488>
 800c22e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c232:	428b      	cmp	r3, r1
 800c234:	bf86      	itte	hi
 800c236:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c2d4 <_strtod_l+0x5b4>
 800c23a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c23e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c242:	2300      	movs	r3, #0
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	e084      	b.n	800c352 <_strtod_l+0x632>
 800c248:	f018 0f01 	tst.w	r8, #1
 800c24c:	d005      	beq.n	800c25a <_strtod_l+0x53a>
 800c24e:	9b04      	ldr	r3, [sp, #16]
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f9e0 	bl	8000618 <__aeabi_dmul>
 800c258:	2301      	movs	r3, #1
 800c25a:	9a04      	ldr	r2, [sp, #16]
 800c25c:	3208      	adds	r2, #8
 800c25e:	f109 0901 	add.w	r9, r9, #1
 800c262:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c266:	9204      	str	r2, [sp, #16]
 800c268:	e7c9      	b.n	800c1fe <_strtod_l+0x4de>
 800c26a:	d0ea      	beq.n	800c242 <_strtod_l+0x522>
 800c26c:	f1c8 0800 	rsb	r8, r8, #0
 800c270:	f018 020f 	ands.w	r2, r8, #15
 800c274:	d00a      	beq.n	800c28c <_strtod_l+0x56c>
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <_strtod_l+0x5a4>)
 800c278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c27c:	4650      	mov	r0, sl
 800c27e:	4659      	mov	r1, fp
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	f7f4 faf2 	bl	800086c <__aeabi_ddiv>
 800c288:	4682      	mov	sl, r0
 800c28a:	468b      	mov	fp, r1
 800c28c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c290:	d0d7      	beq.n	800c242 <_strtod_l+0x522>
 800c292:	f1b8 0f1f 	cmp.w	r8, #31
 800c296:	dd1f      	ble.n	800c2d8 <_strtod_l+0x5b8>
 800c298:	2500      	movs	r5, #0
 800c29a:	462e      	mov	r6, r5
 800c29c:	9507      	str	r5, [sp, #28]
 800c29e:	9505      	str	r5, [sp, #20]
 800c2a0:	2322      	movs	r3, #34	; 0x22
 800c2a2:	f04f 0a00 	mov.w	sl, #0
 800c2a6:	f04f 0b00 	mov.w	fp, #0
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	e786      	b.n	800c1bc <_strtod_l+0x49c>
 800c2ae:	bf00      	nop
 800c2b0:	080107f1 	.word	0x080107f1
 800c2b4:	08010830 	.word	0x08010830
 800c2b8:	080107e9 	.word	0x080107e9
 800c2bc:	080109b0 	.word	0x080109b0
 800c2c0:	08010cdb 	.word	0x08010cdb
 800c2c4:	08010ba0 	.word	0x08010ba0
 800c2c8:	08010b78 	.word	0x08010b78
 800c2cc:	7ff00000 	.word	0x7ff00000
 800c2d0:	7ca00000 	.word	0x7ca00000
 800c2d4:	7fefffff 	.word	0x7fefffff
 800c2d8:	f018 0310 	ands.w	r3, r8, #16
 800c2dc:	bf18      	it	ne
 800c2de:	236a      	movne	r3, #106	; 0x6a
 800c2e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c690 <_strtod_l+0x970>
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	4650      	mov	r0, sl
 800c2e8:	4659      	mov	r1, fp
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f018 0f01 	tst.w	r8, #1
 800c2f0:	d004      	beq.n	800c2fc <_strtod_l+0x5dc>
 800c2f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c2f6:	f7f4 f98f 	bl	8000618 <__aeabi_dmul>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c300:	f109 0908 	add.w	r9, r9, #8
 800c304:	d1f2      	bne.n	800c2ec <_strtod_l+0x5cc>
 800c306:	b10b      	cbz	r3, 800c30c <_strtod_l+0x5ec>
 800c308:	4682      	mov	sl, r0
 800c30a:	468b      	mov	fp, r1
 800c30c:	9b04      	ldr	r3, [sp, #16]
 800c30e:	b1c3      	cbz	r3, 800c342 <_strtod_l+0x622>
 800c310:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c314:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c318:	2b00      	cmp	r3, #0
 800c31a:	4659      	mov	r1, fp
 800c31c:	dd11      	ble.n	800c342 <_strtod_l+0x622>
 800c31e:	2b1f      	cmp	r3, #31
 800c320:	f340 8124 	ble.w	800c56c <_strtod_l+0x84c>
 800c324:	2b34      	cmp	r3, #52	; 0x34
 800c326:	bfde      	ittt	le
 800c328:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c32c:	f04f 33ff 	movle.w	r3, #4294967295
 800c330:	fa03 f202 	lslle.w	r2, r3, r2
 800c334:	f04f 0a00 	mov.w	sl, #0
 800c338:	bfcc      	ite	gt
 800c33a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c33e:	ea02 0b01 	andle.w	fp, r2, r1
 800c342:	2200      	movs	r2, #0
 800c344:	2300      	movs	r3, #0
 800c346:	4650      	mov	r0, sl
 800c348:	4659      	mov	r1, fp
 800c34a:	f7f4 fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d1a2      	bne.n	800c298 <_strtod_l+0x578>
 800c352:	9b07      	ldr	r3, [sp, #28]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	9908      	ldr	r1, [sp, #32]
 800c358:	462b      	mov	r3, r5
 800c35a:	463a      	mov	r2, r7
 800c35c:	4620      	mov	r0, r4
 800c35e:	f002 f977 	bl	800e650 <__s2b>
 800c362:	9007      	str	r0, [sp, #28]
 800c364:	2800      	cmp	r0, #0
 800c366:	f43f af1f 	beq.w	800c1a8 <_strtod_l+0x488>
 800c36a:	9b05      	ldr	r3, [sp, #20]
 800c36c:	1b9e      	subs	r6, r3, r6
 800c36e:	9b06      	ldr	r3, [sp, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	bfb4      	ite	lt
 800c374:	4633      	movlt	r3, r6
 800c376:	2300      	movge	r3, #0
 800c378:	930c      	str	r3, [sp, #48]	; 0x30
 800c37a:	9b06      	ldr	r3, [sp, #24]
 800c37c:	2500      	movs	r5, #0
 800c37e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c382:	9312      	str	r3, [sp, #72]	; 0x48
 800c384:	462e      	mov	r6, r5
 800c386:	9b07      	ldr	r3, [sp, #28]
 800c388:	4620      	mov	r0, r4
 800c38a:	6859      	ldr	r1, [r3, #4]
 800c38c:	f002 f8b8 	bl	800e500 <_Balloc>
 800c390:	9005      	str	r0, [sp, #20]
 800c392:	2800      	cmp	r0, #0
 800c394:	f43f af0c 	beq.w	800c1b0 <_strtod_l+0x490>
 800c398:	9b07      	ldr	r3, [sp, #28]
 800c39a:	691a      	ldr	r2, [r3, #16]
 800c39c:	3202      	adds	r2, #2
 800c39e:	f103 010c 	add.w	r1, r3, #12
 800c3a2:	0092      	lsls	r2, r2, #2
 800c3a4:	300c      	adds	r0, #12
 800c3a6:	f7fe fadb 	bl	800a960 <memcpy>
 800c3aa:	ec4b ab10 	vmov	d0, sl, fp
 800c3ae:	aa1a      	add	r2, sp, #104	; 0x68
 800c3b0:	a919      	add	r1, sp, #100	; 0x64
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f002 fc92 	bl	800ecdc <__d2b>
 800c3b8:	ec4b ab18 	vmov	d8, sl, fp
 800c3bc:	9018      	str	r0, [sp, #96]	; 0x60
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	f43f aef6 	beq.w	800c1b0 <_strtod_l+0x490>
 800c3c4:	2101      	movs	r1, #1
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f002 f9dc 	bl	800e784 <__i2b>
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f43f aeee 	beq.w	800c1b0 <_strtod_l+0x490>
 800c3d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3d6:	9904      	ldr	r1, [sp, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bfab      	itete	ge
 800c3dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c3de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c3e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c3e6:	bfac      	ite	ge
 800c3e8:	eb03 0902 	addge.w	r9, r3, r2
 800c3ec:	1ad7      	sublt	r7, r2, r3
 800c3ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c3f0:	eba3 0801 	sub.w	r8, r3, r1
 800c3f4:	4490      	add	r8, r2
 800c3f6:	4ba1      	ldr	r3, [pc, #644]	; (800c67c <_strtod_l+0x95c>)
 800c3f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3fc:	4598      	cmp	r8, r3
 800c3fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c402:	f280 80c7 	bge.w	800c594 <_strtod_l+0x874>
 800c406:	eba3 0308 	sub.w	r3, r3, r8
 800c40a:	2b1f      	cmp	r3, #31
 800c40c:	eba2 0203 	sub.w	r2, r2, r3
 800c410:	f04f 0101 	mov.w	r1, #1
 800c414:	f300 80b1 	bgt.w	800c57a <_strtod_l+0x85a>
 800c418:	fa01 f303 	lsl.w	r3, r1, r3
 800c41c:	930d      	str	r3, [sp, #52]	; 0x34
 800c41e:	2300      	movs	r3, #0
 800c420:	9308      	str	r3, [sp, #32]
 800c422:	eb09 0802 	add.w	r8, r9, r2
 800c426:	9b04      	ldr	r3, [sp, #16]
 800c428:	45c1      	cmp	r9, r8
 800c42a:	4417      	add	r7, r2
 800c42c:	441f      	add	r7, r3
 800c42e:	464b      	mov	r3, r9
 800c430:	bfa8      	it	ge
 800c432:	4643      	movge	r3, r8
 800c434:	42bb      	cmp	r3, r7
 800c436:	bfa8      	it	ge
 800c438:	463b      	movge	r3, r7
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	bfc2      	ittt	gt
 800c43e:	eba8 0803 	subgt.w	r8, r8, r3
 800c442:	1aff      	subgt	r7, r7, r3
 800c444:	eba9 0903 	subgt.w	r9, r9, r3
 800c448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dd17      	ble.n	800c47e <_strtod_l+0x75e>
 800c44e:	4631      	mov	r1, r6
 800c450:	461a      	mov	r2, r3
 800c452:	4620      	mov	r0, r4
 800c454:	f002 fa56 	bl	800e904 <__pow5mult>
 800c458:	4606      	mov	r6, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aea8 	beq.w	800c1b0 <_strtod_l+0x490>
 800c460:	4601      	mov	r1, r0
 800c462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c464:	4620      	mov	r0, r4
 800c466:	f002 f9a3 	bl	800e7b0 <__multiply>
 800c46a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c46c:	2800      	cmp	r0, #0
 800c46e:	f43f ae9f 	beq.w	800c1b0 <_strtod_l+0x490>
 800c472:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c474:	4620      	mov	r0, r4
 800c476:	f002 f883 	bl	800e580 <_Bfree>
 800c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47c:	9318      	str	r3, [sp, #96]	; 0x60
 800c47e:	f1b8 0f00 	cmp.w	r8, #0
 800c482:	f300 808c 	bgt.w	800c59e <_strtod_l+0x87e>
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd08      	ble.n	800c49e <_strtod_l+0x77e>
 800c48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c48e:	9905      	ldr	r1, [sp, #20]
 800c490:	4620      	mov	r0, r4
 800c492:	f002 fa37 	bl	800e904 <__pow5mult>
 800c496:	9005      	str	r0, [sp, #20]
 800c498:	2800      	cmp	r0, #0
 800c49a:	f43f ae89 	beq.w	800c1b0 <_strtod_l+0x490>
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	dd08      	ble.n	800c4b4 <_strtod_l+0x794>
 800c4a2:	9905      	ldr	r1, [sp, #20]
 800c4a4:	463a      	mov	r2, r7
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f002 fa86 	bl	800e9b8 <__lshift>
 800c4ac:	9005      	str	r0, [sp, #20]
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f43f ae7e 	beq.w	800c1b0 <_strtod_l+0x490>
 800c4b4:	f1b9 0f00 	cmp.w	r9, #0
 800c4b8:	dd08      	ble.n	800c4cc <_strtod_l+0x7ac>
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	464a      	mov	r2, r9
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f002 fa7a 	bl	800e9b8 <__lshift>
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f43f ae72 	beq.w	800c1b0 <_strtod_l+0x490>
 800c4cc:	9a05      	ldr	r2, [sp, #20]
 800c4ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f002 fafd 	bl	800ead0 <__mdiff>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	f43f ae69 	beq.w	800c1b0 <_strtod_l+0x490>
 800c4de:	68c3      	ldr	r3, [r0, #12]
 800c4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60c3      	str	r3, [r0, #12]
 800c4e6:	4631      	mov	r1, r6
 800c4e8:	f002 fad6 	bl	800ea98 <__mcmp>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	da60      	bge.n	800c5b2 <_strtod_l+0x892>
 800c4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c4f6:	f040 8082 	bne.w	800c5fe <_strtod_l+0x8de>
 800c4fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d17d      	bne.n	800c5fe <_strtod_l+0x8de>
 800c502:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c506:	0d1b      	lsrs	r3, r3, #20
 800c508:	051b      	lsls	r3, r3, #20
 800c50a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c50e:	d976      	bls.n	800c5fe <_strtod_l+0x8de>
 800c510:	696b      	ldr	r3, [r5, #20]
 800c512:	b913      	cbnz	r3, 800c51a <_strtod_l+0x7fa>
 800c514:	692b      	ldr	r3, [r5, #16]
 800c516:	2b01      	cmp	r3, #1
 800c518:	dd71      	ble.n	800c5fe <_strtod_l+0x8de>
 800c51a:	4629      	mov	r1, r5
 800c51c:	2201      	movs	r2, #1
 800c51e:	4620      	mov	r0, r4
 800c520:	f002 fa4a 	bl	800e9b8 <__lshift>
 800c524:	4631      	mov	r1, r6
 800c526:	4605      	mov	r5, r0
 800c528:	f002 fab6 	bl	800ea98 <__mcmp>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	dd66      	ble.n	800c5fe <_strtod_l+0x8de>
 800c530:	9904      	ldr	r1, [sp, #16]
 800c532:	4a53      	ldr	r2, [pc, #332]	; (800c680 <_strtod_l+0x960>)
 800c534:	465b      	mov	r3, fp
 800c536:	2900      	cmp	r1, #0
 800c538:	f000 8081 	beq.w	800c63e <_strtod_l+0x91e>
 800c53c:	ea02 010b 	and.w	r1, r2, fp
 800c540:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c544:	dc7b      	bgt.n	800c63e <_strtod_l+0x91e>
 800c546:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c54a:	f77f aea9 	ble.w	800c2a0 <_strtod_l+0x580>
 800c54e:	4b4d      	ldr	r3, [pc, #308]	; (800c684 <_strtod_l+0x964>)
 800c550:	4650      	mov	r0, sl
 800c552:	4659      	mov	r1, fp
 800c554:	2200      	movs	r2, #0
 800c556:	f7f4 f85f 	bl	8000618 <__aeabi_dmul>
 800c55a:	460b      	mov	r3, r1
 800c55c:	4303      	orrs	r3, r0
 800c55e:	bf08      	it	eq
 800c560:	2322      	moveq	r3, #34	; 0x22
 800c562:	4682      	mov	sl, r0
 800c564:	468b      	mov	fp, r1
 800c566:	bf08      	it	eq
 800c568:	6023      	streq	r3, [r4, #0]
 800c56a:	e62b      	b.n	800c1c4 <_strtod_l+0x4a4>
 800c56c:	f04f 32ff 	mov.w	r2, #4294967295
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	ea03 0a0a 	and.w	sl, r3, sl
 800c578:	e6e3      	b.n	800c342 <_strtod_l+0x622>
 800c57a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c57e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c582:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c586:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c58a:	fa01 f308 	lsl.w	r3, r1, r8
 800c58e:	9308      	str	r3, [sp, #32]
 800c590:	910d      	str	r1, [sp, #52]	; 0x34
 800c592:	e746      	b.n	800c422 <_strtod_l+0x702>
 800c594:	2300      	movs	r3, #0
 800c596:	9308      	str	r3, [sp, #32]
 800c598:	2301      	movs	r3, #1
 800c59a:	930d      	str	r3, [sp, #52]	; 0x34
 800c59c:	e741      	b.n	800c422 <_strtod_l+0x702>
 800c59e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f002 fa08 	bl	800e9b8 <__lshift>
 800c5a8:	9018      	str	r0, [sp, #96]	; 0x60
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f47f af6b 	bne.w	800c486 <_strtod_l+0x766>
 800c5b0:	e5fe      	b.n	800c1b0 <_strtod_l+0x490>
 800c5b2:	465f      	mov	r7, fp
 800c5b4:	d16e      	bne.n	800c694 <_strtod_l+0x974>
 800c5b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5bc:	b342      	cbz	r2, 800c610 <_strtod_l+0x8f0>
 800c5be:	4a32      	ldr	r2, [pc, #200]	; (800c688 <_strtod_l+0x968>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d128      	bne.n	800c616 <_strtod_l+0x8f6>
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4651      	mov	r1, sl
 800c5c8:	b1eb      	cbz	r3, 800c606 <_strtod_l+0x8e6>
 800c5ca:	4b2d      	ldr	r3, [pc, #180]	; (800c680 <_strtod_l+0x960>)
 800c5cc:	403b      	ands	r3, r7
 800c5ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d6:	d819      	bhi.n	800c60c <_strtod_l+0x8ec>
 800c5d8:	0d1b      	lsrs	r3, r3, #20
 800c5da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5de:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d117      	bne.n	800c616 <_strtod_l+0x8f6>
 800c5e6:	4b29      	ldr	r3, [pc, #164]	; (800c68c <_strtod_l+0x96c>)
 800c5e8:	429f      	cmp	r7, r3
 800c5ea:	d102      	bne.n	800c5f2 <_strtod_l+0x8d2>
 800c5ec:	3101      	adds	r1, #1
 800c5ee:	f43f addf 	beq.w	800c1b0 <_strtod_l+0x490>
 800c5f2:	4b23      	ldr	r3, [pc, #140]	; (800c680 <_strtod_l+0x960>)
 800c5f4:	403b      	ands	r3, r7
 800c5f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c5fa:	f04f 0a00 	mov.w	sl, #0
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1a4      	bne.n	800c54e <_strtod_l+0x82e>
 800c604:	e5de      	b.n	800c1c4 <_strtod_l+0x4a4>
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
 800c60a:	e7ea      	b.n	800c5e2 <_strtod_l+0x8c2>
 800c60c:	4613      	mov	r3, r2
 800c60e:	e7e8      	b.n	800c5e2 <_strtod_l+0x8c2>
 800c610:	ea53 030a 	orrs.w	r3, r3, sl
 800c614:	d08c      	beq.n	800c530 <_strtod_l+0x810>
 800c616:	9b08      	ldr	r3, [sp, #32]
 800c618:	b1db      	cbz	r3, 800c652 <_strtod_l+0x932>
 800c61a:	423b      	tst	r3, r7
 800c61c:	d0ef      	beq.n	800c5fe <_strtod_l+0x8de>
 800c61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c620:	9a04      	ldr	r2, [sp, #16]
 800c622:	4650      	mov	r0, sl
 800c624:	4659      	mov	r1, fp
 800c626:	b1c3      	cbz	r3, 800c65a <_strtod_l+0x93a>
 800c628:	f7ff fb5e 	bl	800bce8 <sulp>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	ec51 0b18 	vmov	r0, r1, d8
 800c634:	f7f3 fe3a 	bl	80002ac <__adddf3>
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	e7df      	b.n	800c5fe <_strtod_l+0x8de>
 800c63e:	4013      	ands	r3, r2
 800c640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c644:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c648:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c64c:	f04f 3aff 	mov.w	sl, #4294967295
 800c650:	e7d5      	b.n	800c5fe <_strtod_l+0x8de>
 800c652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c654:	ea13 0f0a 	tst.w	r3, sl
 800c658:	e7e0      	b.n	800c61c <_strtod_l+0x8fc>
 800c65a:	f7ff fb45 	bl	800bce8 <sulp>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	ec51 0b18 	vmov	r0, r1, d8
 800c666:	f7f3 fe1f 	bl	80002a8 <__aeabi_dsub>
 800c66a:	2200      	movs	r2, #0
 800c66c:	2300      	movs	r3, #0
 800c66e:	4682      	mov	sl, r0
 800c670:	468b      	mov	fp, r1
 800c672:	f7f4 fa39 	bl	8000ae8 <__aeabi_dcmpeq>
 800c676:	2800      	cmp	r0, #0
 800c678:	d0c1      	beq.n	800c5fe <_strtod_l+0x8de>
 800c67a:	e611      	b.n	800c2a0 <_strtod_l+0x580>
 800c67c:	fffffc02 	.word	0xfffffc02
 800c680:	7ff00000 	.word	0x7ff00000
 800c684:	39500000 	.word	0x39500000
 800c688:	000fffff 	.word	0x000fffff
 800c68c:	7fefffff 	.word	0x7fefffff
 800c690:	08010848 	.word	0x08010848
 800c694:	4631      	mov	r1, r6
 800c696:	4628      	mov	r0, r5
 800c698:	f002 fb7c 	bl	800ed94 <__ratio>
 800c69c:	ec59 8b10 	vmov	r8, r9, d0
 800c6a0:	ee10 0a10 	vmov	r0, s0
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f4 fa30 	bl	8000b10 <__aeabi_dcmple>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d07a      	beq.n	800c7aa <_strtod_l+0xa8a>
 800c6b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d04a      	beq.n	800c750 <_strtod_l+0xa30>
 800c6ba:	4b95      	ldr	r3, [pc, #596]	; (800c910 <_strtod_l+0xbf0>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c910 <_strtod_l+0xbf0>
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	4b92      	ldr	r3, [pc, #584]	; (800c914 <_strtod_l+0xbf4>)
 800c6cc:	403b      	ands	r3, r7
 800c6ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c6d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6d2:	4b91      	ldr	r3, [pc, #580]	; (800c918 <_strtod_l+0xbf8>)
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	f040 80b0 	bne.w	800c83a <_strtod_l+0xb1a>
 800c6da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c6e2:	ec4b ab10 	vmov	d0, sl, fp
 800c6e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6ea:	f002 fa7b 	bl	800ebe4 <__ulp>
 800c6ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6f2:	ec53 2b10 	vmov	r2, r3, d0
 800c6f6:	f7f3 ff8f 	bl	8000618 <__aeabi_dmul>
 800c6fa:	4652      	mov	r2, sl
 800c6fc:	465b      	mov	r3, fp
 800c6fe:	f7f3 fdd5 	bl	80002ac <__adddf3>
 800c702:	460b      	mov	r3, r1
 800c704:	4983      	ldr	r1, [pc, #524]	; (800c914 <_strtod_l+0xbf4>)
 800c706:	4a85      	ldr	r2, [pc, #532]	; (800c91c <_strtod_l+0xbfc>)
 800c708:	4019      	ands	r1, r3
 800c70a:	4291      	cmp	r1, r2
 800c70c:	4682      	mov	sl, r0
 800c70e:	d960      	bls.n	800c7d2 <_strtod_l+0xab2>
 800c710:	ee18 3a90 	vmov	r3, s17
 800c714:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c718:	4293      	cmp	r3, r2
 800c71a:	d104      	bne.n	800c726 <_strtod_l+0xa06>
 800c71c:	ee18 3a10 	vmov	r3, s16
 800c720:	3301      	adds	r3, #1
 800c722:	f43f ad45 	beq.w	800c1b0 <_strtod_l+0x490>
 800c726:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c928 <_strtod_l+0xc08>
 800c72a:	f04f 3aff 	mov.w	sl, #4294967295
 800c72e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c730:	4620      	mov	r0, r4
 800c732:	f001 ff25 	bl	800e580 <_Bfree>
 800c736:	9905      	ldr	r1, [sp, #20]
 800c738:	4620      	mov	r0, r4
 800c73a:	f001 ff21 	bl	800e580 <_Bfree>
 800c73e:	4631      	mov	r1, r6
 800c740:	4620      	mov	r0, r4
 800c742:	f001 ff1d 	bl	800e580 <_Bfree>
 800c746:	4629      	mov	r1, r5
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 ff19 	bl	800e580 <_Bfree>
 800c74e:	e61a      	b.n	800c386 <_strtod_l+0x666>
 800c750:	f1ba 0f00 	cmp.w	sl, #0
 800c754:	d11b      	bne.n	800c78e <_strtod_l+0xa6e>
 800c756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c75a:	b9f3      	cbnz	r3, 800c79a <_strtod_l+0xa7a>
 800c75c:	4b6c      	ldr	r3, [pc, #432]	; (800c910 <_strtod_l+0xbf0>)
 800c75e:	2200      	movs	r2, #0
 800c760:	4640      	mov	r0, r8
 800c762:	4649      	mov	r1, r9
 800c764:	f7f4 f9ca 	bl	8000afc <__aeabi_dcmplt>
 800c768:	b9d0      	cbnz	r0, 800c7a0 <_strtod_l+0xa80>
 800c76a:	4640      	mov	r0, r8
 800c76c:	4649      	mov	r1, r9
 800c76e:	4b6c      	ldr	r3, [pc, #432]	; (800c920 <_strtod_l+0xc00>)
 800c770:	2200      	movs	r2, #0
 800c772:	f7f3 ff51 	bl	8000618 <__aeabi_dmul>
 800c776:	4680      	mov	r8, r0
 800c778:	4689      	mov	r9, r1
 800c77a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c77e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c782:	9315      	str	r3, [sp, #84]	; 0x54
 800c784:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c78c:	e79d      	b.n	800c6ca <_strtod_l+0x9aa>
 800c78e:	f1ba 0f01 	cmp.w	sl, #1
 800c792:	d102      	bne.n	800c79a <_strtod_l+0xa7a>
 800c794:	2f00      	cmp	r7, #0
 800c796:	f43f ad83 	beq.w	800c2a0 <_strtod_l+0x580>
 800c79a:	4b62      	ldr	r3, [pc, #392]	; (800c924 <_strtod_l+0xc04>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	e78e      	b.n	800c6be <_strtod_l+0x99e>
 800c7a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c920 <_strtod_l+0xc00>
 800c7a4:	f04f 0800 	mov.w	r8, #0
 800c7a8:	e7e7      	b.n	800c77a <_strtod_l+0xa5a>
 800c7aa:	4b5d      	ldr	r3, [pc, #372]	; (800c920 <_strtod_l+0xc00>)
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 ff31 	bl	8000618 <__aeabi_dmul>
 800c7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	4689      	mov	r9, r1
 800c7bc:	b933      	cbnz	r3, 800c7cc <_strtod_l+0xaac>
 800c7be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c2:	900e      	str	r0, [sp, #56]	; 0x38
 800c7c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c7ca:	e7dd      	b.n	800c788 <_strtod_l+0xa68>
 800c7cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c7d0:	e7f9      	b.n	800c7c6 <_strtod_l+0xaa6>
 800c7d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1a8      	bne.n	800c72e <_strtod_l+0xa0e>
 800c7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7e2:	0d1b      	lsrs	r3, r3, #20
 800c7e4:	051b      	lsls	r3, r3, #20
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d1a1      	bne.n	800c72e <_strtod_l+0xa0e>
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f4 fa73 	bl	8000cd8 <__aeabi_d2lz>
 800c7f2:	f7f3 fee3 	bl	80005bc <__aeabi_l2d>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	f7f3 fd53 	bl	80002a8 <__aeabi_dsub>
 800c802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c808:	ea43 030a 	orr.w	r3, r3, sl
 800c80c:	4313      	orrs	r3, r2
 800c80e:	4680      	mov	r8, r0
 800c810:	4689      	mov	r9, r1
 800c812:	d055      	beq.n	800c8c0 <_strtod_l+0xba0>
 800c814:	a336      	add	r3, pc, #216	; (adr r3, 800c8f0 <_strtod_l+0xbd0>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f4 f96f 	bl	8000afc <__aeabi_dcmplt>
 800c81e:	2800      	cmp	r0, #0
 800c820:	f47f acd0 	bne.w	800c1c4 <_strtod_l+0x4a4>
 800c824:	a334      	add	r3, pc, #208	; (adr r3, 800c8f8 <_strtod_l+0xbd8>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f4 f983 	bl	8000b38 <__aeabi_dcmpgt>
 800c832:	2800      	cmp	r0, #0
 800c834:	f43f af7b 	beq.w	800c72e <_strtod_l+0xa0e>
 800c838:	e4c4      	b.n	800c1c4 <_strtod_l+0x4a4>
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	b333      	cbz	r3, 800c88c <_strtod_l+0xb6c>
 800c83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c840:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c844:	d822      	bhi.n	800c88c <_strtod_l+0xb6c>
 800c846:	a32e      	add	r3, pc, #184	; (adr r3, 800c900 <_strtod_l+0xbe0>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	4640      	mov	r0, r8
 800c84e:	4649      	mov	r1, r9
 800c850:	f7f4 f95e 	bl	8000b10 <__aeabi_dcmple>
 800c854:	b1a0      	cbz	r0, 800c880 <_strtod_l+0xb60>
 800c856:	4649      	mov	r1, r9
 800c858:	4640      	mov	r0, r8
 800c85a:	f7f4 f9b5 	bl	8000bc8 <__aeabi_d2uiz>
 800c85e:	2801      	cmp	r0, #1
 800c860:	bf38      	it	cc
 800c862:	2001      	movcc	r0, #1
 800c864:	f7f3 fe5e 	bl	8000524 <__aeabi_ui2d>
 800c868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c86a:	4680      	mov	r8, r0
 800c86c:	4689      	mov	r9, r1
 800c86e:	bb23      	cbnz	r3, 800c8ba <_strtod_l+0xb9a>
 800c870:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c874:	9010      	str	r0, [sp, #64]	; 0x40
 800c876:	9311      	str	r3, [sp, #68]	; 0x44
 800c878:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c87c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c884:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c888:	1a9b      	subs	r3, r3, r2
 800c88a:	9309      	str	r3, [sp, #36]	; 0x24
 800c88c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c890:	eeb0 0a48 	vmov.f32	s0, s16
 800c894:	eef0 0a68 	vmov.f32	s1, s17
 800c898:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c89c:	f002 f9a2 	bl	800ebe4 <__ulp>
 800c8a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8a4:	ec53 2b10 	vmov	r2, r3, d0
 800c8a8:	f7f3 feb6 	bl	8000618 <__aeabi_dmul>
 800c8ac:	ec53 2b18 	vmov	r2, r3, d8
 800c8b0:	f7f3 fcfc 	bl	80002ac <__adddf3>
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	468b      	mov	fp, r1
 800c8b8:	e78d      	b.n	800c7d6 <_strtod_l+0xab6>
 800c8ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c8be:	e7db      	b.n	800c878 <_strtod_l+0xb58>
 800c8c0:	a311      	add	r3, pc, #68	; (adr r3, 800c908 <_strtod_l+0xbe8>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f7f4 f919 	bl	8000afc <__aeabi_dcmplt>
 800c8ca:	e7b2      	b.n	800c832 <_strtod_l+0xb12>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c8d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	f7ff ba6b 	b.w	800bdb0 <_strtod_l+0x90>
 800c8da:	2a65      	cmp	r2, #101	; 0x65
 800c8dc:	f43f ab5f 	beq.w	800bf9e <_strtod_l+0x27e>
 800c8e0:	2a45      	cmp	r2, #69	; 0x45
 800c8e2:	f43f ab5c 	beq.w	800bf9e <_strtod_l+0x27e>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f7ff bb94 	b.w	800c014 <_strtod_l+0x2f4>
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	94a03595 	.word	0x94a03595
 800c8f4:	3fdfffff 	.word	0x3fdfffff
 800c8f8:	35afe535 	.word	0x35afe535
 800c8fc:	3fe00000 	.word	0x3fe00000
 800c900:	ffc00000 	.word	0xffc00000
 800c904:	41dfffff 	.word	0x41dfffff
 800c908:	94a03595 	.word	0x94a03595
 800c90c:	3fcfffff 	.word	0x3fcfffff
 800c910:	3ff00000 	.word	0x3ff00000
 800c914:	7ff00000 	.word	0x7ff00000
 800c918:	7fe00000 	.word	0x7fe00000
 800c91c:	7c9fffff 	.word	0x7c9fffff
 800c920:	3fe00000 	.word	0x3fe00000
 800c924:	bff00000 	.word	0xbff00000
 800c928:	7fefffff 	.word	0x7fefffff

0800c92c <_strtod_r>:
 800c92c:	4b01      	ldr	r3, [pc, #4]	; (800c934 <_strtod_r+0x8>)
 800c92e:	f7ff b9f7 	b.w	800bd20 <_strtod_l>
 800c932:	bf00      	nop
 800c934:	200000ec 	.word	0x200000ec

0800c938 <_strtol_l.constprop.0>:
 800c938:	2b01      	cmp	r3, #1
 800c93a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93e:	d001      	beq.n	800c944 <_strtol_l.constprop.0+0xc>
 800c940:	2b24      	cmp	r3, #36	; 0x24
 800c942:	d906      	bls.n	800c952 <_strtol_l.constprop.0+0x1a>
 800c944:	f7fd ffe2 	bl	800a90c <__errno>
 800c948:	2316      	movs	r3, #22
 800c94a:	6003      	str	r3, [r0, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c952:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca38 <_strtol_l.constprop.0+0x100>
 800c956:	460d      	mov	r5, r1
 800c958:	462e      	mov	r6, r5
 800c95a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c95e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c962:	f017 0708 	ands.w	r7, r7, #8
 800c966:	d1f7      	bne.n	800c958 <_strtol_l.constprop.0+0x20>
 800c968:	2c2d      	cmp	r4, #45	; 0x2d
 800c96a:	d132      	bne.n	800c9d2 <_strtol_l.constprop.0+0x9a>
 800c96c:	782c      	ldrb	r4, [r5, #0]
 800c96e:	2701      	movs	r7, #1
 800c970:	1cb5      	adds	r5, r6, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d05b      	beq.n	800ca2e <_strtol_l.constprop.0+0xf6>
 800c976:	2b10      	cmp	r3, #16
 800c978:	d109      	bne.n	800c98e <_strtol_l.constprop.0+0x56>
 800c97a:	2c30      	cmp	r4, #48	; 0x30
 800c97c:	d107      	bne.n	800c98e <_strtol_l.constprop.0+0x56>
 800c97e:	782c      	ldrb	r4, [r5, #0]
 800c980:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c984:	2c58      	cmp	r4, #88	; 0x58
 800c986:	d14d      	bne.n	800ca24 <_strtol_l.constprop.0+0xec>
 800c988:	786c      	ldrb	r4, [r5, #1]
 800c98a:	2310      	movs	r3, #16
 800c98c:	3502      	adds	r5, #2
 800c98e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c992:	f108 38ff 	add.w	r8, r8, #4294967295
 800c996:	f04f 0c00 	mov.w	ip, #0
 800c99a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c99e:	4666      	mov	r6, ip
 800c9a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c9a8:	f1be 0f09 	cmp.w	lr, #9
 800c9ac:	d816      	bhi.n	800c9dc <_strtol_l.constprop.0+0xa4>
 800c9ae:	4674      	mov	r4, lr
 800c9b0:	42a3      	cmp	r3, r4
 800c9b2:	dd24      	ble.n	800c9fe <_strtol_l.constprop.0+0xc6>
 800c9b4:	f1bc 0f00 	cmp.w	ip, #0
 800c9b8:	db1e      	blt.n	800c9f8 <_strtol_l.constprop.0+0xc0>
 800c9ba:	45b1      	cmp	r9, r6
 800c9bc:	d31c      	bcc.n	800c9f8 <_strtol_l.constprop.0+0xc0>
 800c9be:	d101      	bne.n	800c9c4 <_strtol_l.constprop.0+0x8c>
 800c9c0:	45a2      	cmp	sl, r4
 800c9c2:	db19      	blt.n	800c9f8 <_strtol_l.constprop.0+0xc0>
 800c9c4:	fb06 4603 	mla	r6, r6, r3, r4
 800c9c8:	f04f 0c01 	mov.w	ip, #1
 800c9cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9d0:	e7e8      	b.n	800c9a4 <_strtol_l.constprop.0+0x6c>
 800c9d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c9d4:	bf04      	itt	eq
 800c9d6:	782c      	ldrbeq	r4, [r5, #0]
 800c9d8:	1cb5      	addeq	r5, r6, #2
 800c9da:	e7ca      	b.n	800c972 <_strtol_l.constprop.0+0x3a>
 800c9dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c9e0:	f1be 0f19 	cmp.w	lr, #25
 800c9e4:	d801      	bhi.n	800c9ea <_strtol_l.constprop.0+0xb2>
 800c9e6:	3c37      	subs	r4, #55	; 0x37
 800c9e8:	e7e2      	b.n	800c9b0 <_strtol_l.constprop.0+0x78>
 800c9ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9ee:	f1be 0f19 	cmp.w	lr, #25
 800c9f2:	d804      	bhi.n	800c9fe <_strtol_l.constprop.0+0xc6>
 800c9f4:	3c57      	subs	r4, #87	; 0x57
 800c9f6:	e7db      	b.n	800c9b0 <_strtol_l.constprop.0+0x78>
 800c9f8:	f04f 3cff 	mov.w	ip, #4294967295
 800c9fc:	e7e6      	b.n	800c9cc <_strtol_l.constprop.0+0x94>
 800c9fe:	f1bc 0f00 	cmp.w	ip, #0
 800ca02:	da05      	bge.n	800ca10 <_strtol_l.constprop.0+0xd8>
 800ca04:	2322      	movs	r3, #34	; 0x22
 800ca06:	6003      	str	r3, [r0, #0]
 800ca08:	4646      	mov	r6, r8
 800ca0a:	b942      	cbnz	r2, 800ca1e <_strtol_l.constprop.0+0xe6>
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	e79e      	b.n	800c94e <_strtol_l.constprop.0+0x16>
 800ca10:	b107      	cbz	r7, 800ca14 <_strtol_l.constprop.0+0xdc>
 800ca12:	4276      	negs	r6, r6
 800ca14:	2a00      	cmp	r2, #0
 800ca16:	d0f9      	beq.n	800ca0c <_strtol_l.constprop.0+0xd4>
 800ca18:	f1bc 0f00 	cmp.w	ip, #0
 800ca1c:	d000      	beq.n	800ca20 <_strtol_l.constprop.0+0xe8>
 800ca1e:	1e69      	subs	r1, r5, #1
 800ca20:	6011      	str	r1, [r2, #0]
 800ca22:	e7f3      	b.n	800ca0c <_strtol_l.constprop.0+0xd4>
 800ca24:	2430      	movs	r4, #48	; 0x30
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1b1      	bne.n	800c98e <_strtol_l.constprop.0+0x56>
 800ca2a:	2308      	movs	r3, #8
 800ca2c:	e7af      	b.n	800c98e <_strtol_l.constprop.0+0x56>
 800ca2e:	2c30      	cmp	r4, #48	; 0x30
 800ca30:	d0a5      	beq.n	800c97e <_strtol_l.constprop.0+0x46>
 800ca32:	230a      	movs	r3, #10
 800ca34:	e7ab      	b.n	800c98e <_strtol_l.constprop.0+0x56>
 800ca36:	bf00      	nop
 800ca38:	080108ad 	.word	0x080108ad

0800ca3c <_strtol_r>:
 800ca3c:	f7ff bf7c 	b.w	800c938 <_strtol_l.constprop.0>

0800ca40 <_strtoul_l.constprop.0>:
 800ca40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4f36      	ldr	r7, [pc, #216]	; (800cb20 <_strtoul_l.constprop.0+0xe0>)
 800ca46:	4686      	mov	lr, r0
 800ca48:	460d      	mov	r5, r1
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca50:	5de6      	ldrb	r6, [r4, r7]
 800ca52:	f016 0608 	ands.w	r6, r6, #8
 800ca56:	d1f8      	bne.n	800ca4a <_strtoul_l.constprop.0+0xa>
 800ca58:	2c2d      	cmp	r4, #45	; 0x2d
 800ca5a:	d12f      	bne.n	800cabc <_strtoul_l.constprop.0+0x7c>
 800ca5c:	782c      	ldrb	r4, [r5, #0]
 800ca5e:	2601      	movs	r6, #1
 800ca60:	1c85      	adds	r5, r0, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d057      	beq.n	800cb16 <_strtoul_l.constprop.0+0xd6>
 800ca66:	2b10      	cmp	r3, #16
 800ca68:	d109      	bne.n	800ca7e <_strtoul_l.constprop.0+0x3e>
 800ca6a:	2c30      	cmp	r4, #48	; 0x30
 800ca6c:	d107      	bne.n	800ca7e <_strtoul_l.constprop.0+0x3e>
 800ca6e:	7828      	ldrb	r0, [r5, #0]
 800ca70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca74:	2858      	cmp	r0, #88	; 0x58
 800ca76:	d149      	bne.n	800cb0c <_strtoul_l.constprop.0+0xcc>
 800ca78:	786c      	ldrb	r4, [r5, #1]
 800ca7a:	2310      	movs	r3, #16
 800ca7c:	3502      	adds	r5, #2
 800ca7e:	f04f 38ff 	mov.w	r8, #4294967295
 800ca82:	2700      	movs	r7, #0
 800ca84:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca88:	fb03 f908 	mul.w	r9, r3, r8
 800ca8c:	ea6f 0909 	mvn.w	r9, r9
 800ca90:	4638      	mov	r0, r7
 800ca92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca96:	f1bc 0f09 	cmp.w	ip, #9
 800ca9a:	d814      	bhi.n	800cac6 <_strtoul_l.constprop.0+0x86>
 800ca9c:	4664      	mov	r4, ip
 800ca9e:	42a3      	cmp	r3, r4
 800caa0:	dd22      	ble.n	800cae8 <_strtoul_l.constprop.0+0xa8>
 800caa2:	2f00      	cmp	r7, #0
 800caa4:	db1d      	blt.n	800cae2 <_strtoul_l.constprop.0+0xa2>
 800caa6:	4580      	cmp	r8, r0
 800caa8:	d31b      	bcc.n	800cae2 <_strtoul_l.constprop.0+0xa2>
 800caaa:	d101      	bne.n	800cab0 <_strtoul_l.constprop.0+0x70>
 800caac:	45a1      	cmp	r9, r4
 800caae:	db18      	blt.n	800cae2 <_strtoul_l.constprop.0+0xa2>
 800cab0:	fb00 4003 	mla	r0, r0, r3, r4
 800cab4:	2701      	movs	r7, #1
 800cab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caba:	e7ea      	b.n	800ca92 <_strtoul_l.constprop.0+0x52>
 800cabc:	2c2b      	cmp	r4, #43	; 0x2b
 800cabe:	bf04      	itt	eq
 800cac0:	782c      	ldrbeq	r4, [r5, #0]
 800cac2:	1c85      	addeq	r5, r0, #2
 800cac4:	e7cd      	b.n	800ca62 <_strtoul_l.constprop.0+0x22>
 800cac6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800caca:	f1bc 0f19 	cmp.w	ip, #25
 800cace:	d801      	bhi.n	800cad4 <_strtoul_l.constprop.0+0x94>
 800cad0:	3c37      	subs	r4, #55	; 0x37
 800cad2:	e7e4      	b.n	800ca9e <_strtoul_l.constprop.0+0x5e>
 800cad4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cad8:	f1bc 0f19 	cmp.w	ip, #25
 800cadc:	d804      	bhi.n	800cae8 <_strtoul_l.constprop.0+0xa8>
 800cade:	3c57      	subs	r4, #87	; 0x57
 800cae0:	e7dd      	b.n	800ca9e <_strtoul_l.constprop.0+0x5e>
 800cae2:	f04f 37ff 	mov.w	r7, #4294967295
 800cae6:	e7e6      	b.n	800cab6 <_strtoul_l.constprop.0+0x76>
 800cae8:	2f00      	cmp	r7, #0
 800caea:	da07      	bge.n	800cafc <_strtoul_l.constprop.0+0xbc>
 800caec:	2322      	movs	r3, #34	; 0x22
 800caee:	f8ce 3000 	str.w	r3, [lr]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	b932      	cbnz	r2, 800cb06 <_strtoul_l.constprop.0+0xc6>
 800caf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cafc:	b106      	cbz	r6, 800cb00 <_strtoul_l.constprop.0+0xc0>
 800cafe:	4240      	negs	r0, r0
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	d0f9      	beq.n	800caf8 <_strtoul_l.constprop.0+0xb8>
 800cb04:	b107      	cbz	r7, 800cb08 <_strtoul_l.constprop.0+0xc8>
 800cb06:	1e69      	subs	r1, r5, #1
 800cb08:	6011      	str	r1, [r2, #0]
 800cb0a:	e7f5      	b.n	800caf8 <_strtoul_l.constprop.0+0xb8>
 800cb0c:	2430      	movs	r4, #48	; 0x30
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1b5      	bne.n	800ca7e <_strtoul_l.constprop.0+0x3e>
 800cb12:	2308      	movs	r3, #8
 800cb14:	e7b3      	b.n	800ca7e <_strtoul_l.constprop.0+0x3e>
 800cb16:	2c30      	cmp	r4, #48	; 0x30
 800cb18:	d0a9      	beq.n	800ca6e <_strtoul_l.constprop.0+0x2e>
 800cb1a:	230a      	movs	r3, #10
 800cb1c:	e7af      	b.n	800ca7e <_strtoul_l.constprop.0+0x3e>
 800cb1e:	bf00      	nop
 800cb20:	080108ad 	.word	0x080108ad

0800cb24 <_strtoul_r>:
 800cb24:	f7ff bf8c 	b.w	800ca40 <_strtoul_l.constprop.0>

0800cb28 <strtoul>:
 800cb28:	4613      	mov	r3, r2
 800cb2a:	460a      	mov	r2, r1
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	4802      	ldr	r0, [pc, #8]	; (800cb38 <strtoul+0x10>)
 800cb30:	6800      	ldr	r0, [r0, #0]
 800cb32:	f7ff bf85 	b.w	800ca40 <_strtoul_l.constprop.0>
 800cb36:	bf00      	nop
 800cb38:	20000020 	.word	0x20000020

0800cb3c <__tzcalc_limits>:
 800cb3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	4605      	mov	r5, r0
 800cb42:	f001 fc9b 	bl	800e47c <__gettzinfo>
 800cb46:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800cb4a:	429d      	cmp	r5, r3
 800cb4c:	f340 8099 	ble.w	800cc82 <__tzcalc_limits+0x146>
 800cb50:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800cb54:	18ac      	adds	r4, r5, r2
 800cb56:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800cb5a:	f240 126d 	movw	r2, #365	; 0x16d
 800cb5e:	10a4      	asrs	r4, r4, #2
 800cb60:	fb02 4403 	mla	r4, r2, r3, r4
 800cb64:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800cb68:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800cb6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb70:	441c      	add	r4, r3
 800cb72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cb76:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800cb7a:	fb95 fcf3 	sdiv	ip, r5, r3
 800cb7e:	fb03 5c1c 	mls	ip, r3, ip, r5
 800cb82:	186a      	adds	r2, r5, r1
 800cb84:	fabc f68c 	clz	r6, ip
 800cb88:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb8c:	f005 0303 	and.w	r3, r5, #3
 800cb90:	4414      	add	r4, r2
 800cb92:	2264      	movs	r2, #100	; 0x64
 800cb94:	6045      	str	r5, [r0, #4]
 800cb96:	fb95 f7f2 	sdiv	r7, r5, r2
 800cb9a:	0976      	lsrs	r6, r6, #5
 800cb9c:	fb02 5717 	mls	r7, r2, r7, r5
 800cba0:	4601      	mov	r1, r0
 800cba2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	f04f 0a07 	mov.w	sl, #7
 800cbac:	7a0d      	ldrb	r5, [r1, #8]
 800cbae:	694b      	ldr	r3, [r1, #20]
 800cbb0:	2d4a      	cmp	r5, #74	; 0x4a
 800cbb2:	d12d      	bne.n	800cc10 <__tzcalc_limits+0xd4>
 800cbb4:	9a00      	ldr	r2, [sp, #0]
 800cbb6:	eb04 0e03 	add.w	lr, r4, r3
 800cbba:	b902      	cbnz	r2, 800cbbe <__tzcalc_limits+0x82>
 800cbbc:	b917      	cbnz	r7, 800cbc4 <__tzcalc_limits+0x88>
 800cbbe:	f1bc 0f00 	cmp.w	ip, #0
 800cbc2:	d123      	bne.n	800cc0c <__tzcalc_limits+0xd0>
 800cbc4:	2b3b      	cmp	r3, #59	; 0x3b
 800cbc6:	bfd4      	ite	le
 800cbc8:	2300      	movle	r3, #0
 800cbca:	2301      	movgt	r3, #1
 800cbcc:	4473      	add	r3, lr
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	698d      	ldr	r5, [r1, #24]
 800cbd2:	4a2d      	ldr	r2, [pc, #180]	; (800cc88 <__tzcalc_limits+0x14c>)
 800cbd4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cbd8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800cbdc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cbde:	18ed      	adds	r5, r5, r3
 800cbe0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cbe4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cbe8:	3128      	adds	r1, #40	; 0x28
 800cbea:	458b      	cmp	fp, r1
 800cbec:	d1de      	bne.n	800cbac <__tzcalc_limits+0x70>
 800cbee:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800cbf2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800cbf6:	428c      	cmp	r4, r1
 800cbf8:	eb72 0303 	sbcs.w	r3, r2, r3
 800cbfc:	bfb4      	ite	lt
 800cbfe:	2301      	movlt	r3, #1
 800cc00:	2300      	movge	r3, #0
 800cc02:	6003      	str	r3, [r0, #0]
 800cc04:	2001      	movs	r0, #1
 800cc06:	b003      	add	sp, #12
 800cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e7dd      	b.n	800cbcc <__tzcalc_limits+0x90>
 800cc10:	2d44      	cmp	r5, #68	; 0x44
 800cc12:	d101      	bne.n	800cc18 <__tzcalc_limits+0xdc>
 800cc14:	4423      	add	r3, r4
 800cc16:	e7db      	b.n	800cbd0 <__tzcalc_limits+0x94>
 800cc18:	9a00      	ldr	r2, [sp, #0]
 800cc1a:	bb62      	cbnz	r2, 800cc76 <__tzcalc_limits+0x13a>
 800cc1c:	2f00      	cmp	r7, #0
 800cc1e:	bf0c      	ite	eq
 800cc20:	4635      	moveq	r5, r6
 800cc22:	2501      	movne	r5, #1
 800cc24:	68ca      	ldr	r2, [r1, #12]
 800cc26:	9201      	str	r2, [sp, #4]
 800cc28:	4a18      	ldr	r2, [pc, #96]	; (800cc8c <__tzcalc_limits+0x150>)
 800cc2a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800cc2e:	fb09 2505 	mla	r5, r9, r5, r2
 800cc32:	46a6      	mov	lr, r4
 800cc34:	f04f 0800 	mov.w	r8, #0
 800cc38:	3d04      	subs	r5, #4
 800cc3a:	9a01      	ldr	r2, [sp, #4]
 800cc3c:	f108 0801 	add.w	r8, r8, #1
 800cc40:	4542      	cmp	r2, r8
 800cc42:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cc46:	dc18      	bgt.n	800cc7a <__tzcalc_limits+0x13e>
 800cc48:	f10e 0504 	add.w	r5, lr, #4
 800cc4c:	fb95 f8fa 	sdiv	r8, r5, sl
 800cc50:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cc54:	eba5 0808 	sub.w	r8, r5, r8
 800cc58:	ebb3 0808 	subs.w	r8, r3, r8
 800cc5c:	690b      	ldr	r3, [r1, #16]
 800cc5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc62:	bf48      	it	mi
 800cc64:	f108 0807 	addmi.w	r8, r8, #7
 800cc68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cc6c:	4443      	add	r3, r8
 800cc6e:	454b      	cmp	r3, r9
 800cc70:	da05      	bge.n	800cc7e <__tzcalc_limits+0x142>
 800cc72:	4473      	add	r3, lr
 800cc74:	e7ac      	b.n	800cbd0 <__tzcalc_limits+0x94>
 800cc76:	4635      	mov	r5, r6
 800cc78:	e7d4      	b.n	800cc24 <__tzcalc_limits+0xe8>
 800cc7a:	44ce      	add	lr, r9
 800cc7c:	e7dd      	b.n	800cc3a <__tzcalc_limits+0xfe>
 800cc7e:	3b07      	subs	r3, #7
 800cc80:	e7f5      	b.n	800cc6e <__tzcalc_limits+0x132>
 800cc82:	2000      	movs	r0, #0
 800cc84:	e7bf      	b.n	800cc06 <__tzcalc_limits+0xca>
 800cc86:	bf00      	nop
 800cc88:	00015180 	.word	0x00015180
 800cc8c:	08010ab8 	.word	0x08010ab8

0800cc90 <__tz_lock>:
 800cc90:	4801      	ldr	r0, [pc, #4]	; (800cc98 <__tz_lock+0x8>)
 800cc92:	f001 bbfc 	b.w	800e48e <__retarget_lock_acquire>
 800cc96:	bf00      	nop
 800cc98:	20006788 	.word	0x20006788

0800cc9c <__tz_unlock>:
 800cc9c:	4801      	ldr	r0, [pc, #4]	; (800cca4 <__tz_unlock+0x8>)
 800cc9e:	f001 bbf8 	b.w	800e492 <__retarget_lock_release>
 800cca2:	bf00      	nop
 800cca4:	20006788 	.word	0x20006788

0800cca8 <_tzset_unlocked>:
 800cca8:	4b01      	ldr	r3, [pc, #4]	; (800ccb0 <_tzset_unlocked+0x8>)
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	f000 b802 	b.w	800ccb4 <_tzset_unlocked_r>
 800ccb0:	20000020 	.word	0x20000020

0800ccb4 <_tzset_unlocked_r>:
 800ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	b08d      	sub	sp, #52	; 0x34
 800ccba:	4607      	mov	r7, r0
 800ccbc:	f001 fbde 	bl	800e47c <__gettzinfo>
 800ccc0:	49b0      	ldr	r1, [pc, #704]	; (800cf84 <_tzset_unlocked_r+0x2d0>)
 800ccc2:	4eb1      	ldr	r6, [pc, #708]	; (800cf88 <_tzset_unlocked_r+0x2d4>)
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	f001 fbd0 	bl	800e46c <_getenv_r>
 800cccc:	4604      	mov	r4, r0
 800ccce:	b970      	cbnz	r0, 800ccee <_tzset_unlocked_r+0x3a>
 800ccd0:	4bae      	ldr	r3, [pc, #696]	; (800cf8c <_tzset_unlocked_r+0x2d8>)
 800ccd2:	4aaf      	ldr	r2, [pc, #700]	; (800cf90 <_tzset_unlocked_r+0x2dc>)
 800ccd4:	6018      	str	r0, [r3, #0]
 800ccd6:	4baf      	ldr	r3, [pc, #700]	; (800cf94 <_tzset_unlocked_r+0x2e0>)
 800ccd8:	6018      	str	r0, [r3, #0]
 800ccda:	4baf      	ldr	r3, [pc, #700]	; (800cf98 <_tzset_unlocked_r+0x2e4>)
 800ccdc:	6830      	ldr	r0, [r6, #0]
 800ccde:	e9c3 2200 	strd	r2, r2, [r3]
 800cce2:	f001 fbf3 	bl	800e4cc <free>
 800cce6:	6034      	str	r4, [r6, #0]
 800cce8:	b00d      	add	sp, #52	; 0x34
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	6831      	ldr	r1, [r6, #0]
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	d162      	bne.n	800cdba <_tzset_unlocked_r+0x106>
 800ccf4:	6830      	ldr	r0, [r6, #0]
 800ccf6:	f001 fbe9 	bl	800e4cc <free>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7f3 fa72 	bl	80001e4 <strlen>
 800cd00:	1c41      	adds	r1, r0, #1
 800cd02:	4638      	mov	r0, r7
 800cd04:	f002 f940 	bl	800ef88 <_malloc_r>
 800cd08:	6030      	str	r0, [r6, #0]
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d15a      	bne.n	800cdc4 <_tzset_unlocked_r+0x110>
 800cd0e:	7823      	ldrb	r3, [r4, #0]
 800cd10:	4aa2      	ldr	r2, [pc, #648]	; (800cf9c <_tzset_unlocked_r+0x2e8>)
 800cd12:	49a3      	ldr	r1, [pc, #652]	; (800cfa0 <_tzset_unlocked_r+0x2ec>)
 800cd14:	2b3a      	cmp	r3, #58	; 0x3a
 800cd16:	bf08      	it	eq
 800cd18:	3401      	addeq	r4, #1
 800cd1a:	ae0a      	add	r6, sp, #40	; 0x28
 800cd1c:	4633      	mov	r3, r6
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7fe ff46 	bl	800bbb0 <siscanf>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	dddf      	ble.n	800cce8 <_tzset_unlocked_r+0x34>
 800cd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd2a:	18e7      	adds	r7, r4, r3
 800cd2c:	5ce3      	ldrb	r3, [r4, r3]
 800cd2e:	2b2d      	cmp	r3, #45	; 0x2d
 800cd30:	d14c      	bne.n	800cdcc <_tzset_unlocked_r+0x118>
 800cd32:	3701      	adds	r7, #1
 800cd34:	f04f 38ff 	mov.w	r8, #4294967295
 800cd38:	f10d 0a20 	add.w	sl, sp, #32
 800cd3c:	f10d 0b1e 	add.w	fp, sp, #30
 800cd40:	2400      	movs	r4, #0
 800cd42:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800cd46:	4997      	ldr	r1, [pc, #604]	; (800cfa4 <_tzset_unlocked_r+0x2f0>)
 800cd48:	9603      	str	r6, [sp, #12]
 800cd4a:	f8cd b000 	str.w	fp, [sp]
 800cd4e:	4633      	mov	r3, r6
 800cd50:	aa07      	add	r2, sp, #28
 800cd52:	4638      	mov	r0, r7
 800cd54:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cd58:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cd5c:	f7fe ff28 	bl	800bbb0 <siscanf>
 800cd60:	42a0      	cmp	r0, r4
 800cd62:	ddc1      	ble.n	800cce8 <_tzset_unlocked_r+0x34>
 800cd64:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cd68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cd6c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800cfb0 <_tzset_unlocked_r+0x2fc>
 800cd70:	213c      	movs	r1, #60	; 0x3c
 800cd72:	fb01 3302 	mla	r3, r1, r2, r3
 800cd76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cd7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cd7e:	fb01 3302 	mla	r3, r1, r2, r3
 800cd82:	fb08 f303 	mul.w	r3, r8, r3
 800cd86:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800cf98 <_tzset_unlocked_r+0x2e4>
 800cd8a:	62ab      	str	r3, [r5, #40]	; 0x28
 800cd8c:	4b83      	ldr	r3, [pc, #524]	; (800cf9c <_tzset_unlocked_r+0x2e8>)
 800cd8e:	f8c8 3000 	str.w	r3, [r8]
 800cd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd94:	4982      	ldr	r1, [pc, #520]	; (800cfa0 <_tzset_unlocked_r+0x2ec>)
 800cd96:	441f      	add	r7, r3
 800cd98:	464a      	mov	r2, r9
 800cd9a:	4633      	mov	r3, r6
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7fe ff07 	bl	800bbb0 <siscanf>
 800cda2:	42a0      	cmp	r0, r4
 800cda4:	dc18      	bgt.n	800cdd8 <_tzset_unlocked_r+0x124>
 800cda6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdaa:	f8c8 3004 	str.w	r3, [r8, #4]
 800cdae:	4b77      	ldr	r3, [pc, #476]	; (800cf8c <_tzset_unlocked_r+0x2d8>)
 800cdb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	4b77      	ldr	r3, [pc, #476]	; (800cf94 <_tzset_unlocked_r+0x2e0>)
 800cdb6:	601c      	str	r4, [r3, #0]
 800cdb8:	e796      	b.n	800cce8 <_tzset_unlocked_r+0x34>
 800cdba:	f7f3 fa09 	bl	80001d0 <strcmp>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d198      	bne.n	800ccf4 <_tzset_unlocked_r+0x40>
 800cdc2:	e791      	b.n	800cce8 <_tzset_unlocked_r+0x34>
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	f7fe ff71 	bl	800bcac <strcpy>
 800cdca:	e7a0      	b.n	800cd0e <_tzset_unlocked_r+0x5a>
 800cdcc:	2b2b      	cmp	r3, #43	; 0x2b
 800cdce:	bf08      	it	eq
 800cdd0:	3701      	addeq	r7, #1
 800cdd2:	f04f 0801 	mov.w	r8, #1
 800cdd6:	e7af      	b.n	800cd38 <_tzset_unlocked_r+0x84>
 800cdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdda:	f8c8 9004 	str.w	r9, [r8, #4]
 800cdde:	18fc      	adds	r4, r7, r3
 800cde0:	5cfb      	ldrb	r3, [r7, r3]
 800cde2:	2b2d      	cmp	r3, #45	; 0x2d
 800cde4:	f040 808b 	bne.w	800cefe <_tzset_unlocked_r+0x24a>
 800cde8:	3401      	adds	r4, #1
 800cdea:	f04f 37ff 	mov.w	r7, #4294967295
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cdf4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cdf8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cdfc:	930a      	str	r3, [sp, #40]	; 0x28
 800cdfe:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ce02:	e9cd b600 	strd	fp, r6, [sp]
 800ce06:	4967      	ldr	r1, [pc, #412]	; (800cfa4 <_tzset_unlocked_r+0x2f0>)
 800ce08:	4633      	mov	r3, r6
 800ce0a:	aa07      	add	r2, sp, #28
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7fe fecf 	bl	800bbb0 <siscanf>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	dc78      	bgt.n	800cf08 <_tzset_unlocked_r+0x254>
 800ce16:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ce18:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ce1c:	652b      	str	r3, [r5, #80]	; 0x50
 800ce1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce20:	462f      	mov	r7, r5
 800ce22:	441c      	add	r4, r3
 800ce24:	f04f 0900 	mov.w	r9, #0
 800ce28:	7823      	ldrb	r3, [r4, #0]
 800ce2a:	2b2c      	cmp	r3, #44	; 0x2c
 800ce2c:	bf08      	it	eq
 800ce2e:	3401      	addeq	r4, #1
 800ce30:	f894 8000 	ldrb.w	r8, [r4]
 800ce34:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ce38:	d178      	bne.n	800cf2c <_tzset_unlocked_r+0x278>
 800ce3a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ce3e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ce42:	ab09      	add	r3, sp, #36	; 0x24
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	4958      	ldr	r1, [pc, #352]	; (800cfa8 <_tzset_unlocked_r+0x2f4>)
 800ce48:	9603      	str	r6, [sp, #12]
 800ce4a:	4633      	mov	r3, r6
 800ce4c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ce50:	4620      	mov	r0, r4
 800ce52:	f7fe fead 	bl	800bbb0 <siscanf>
 800ce56:	2803      	cmp	r0, #3
 800ce58:	f47f af46 	bne.w	800cce8 <_tzset_unlocked_r+0x34>
 800ce5c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ce60:	1e4b      	subs	r3, r1, #1
 800ce62:	2b0b      	cmp	r3, #11
 800ce64:	f63f af40 	bhi.w	800cce8 <_tzset_unlocked_r+0x34>
 800ce68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ce6c:	1e53      	subs	r3, r2, #1
 800ce6e:	2b04      	cmp	r3, #4
 800ce70:	f63f af3a 	bhi.w	800cce8 <_tzset_unlocked_r+0x34>
 800ce74:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	f63f af35 	bhi.w	800cce8 <_tzset_unlocked_r+0x34>
 800ce7e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ce82:	f887 8008 	strb.w	r8, [r7, #8]
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8a:	eb04 0803 	add.w	r8, r4, r3
 800ce8e:	2302      	movs	r3, #2
 800ce90:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce94:	2300      	movs	r3, #0
 800ce96:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ce9e:	930a      	str	r3, [sp, #40]	; 0x28
 800cea0:	f898 3000 	ldrb.w	r3, [r8]
 800cea4:	2b2f      	cmp	r3, #47	; 0x2f
 800cea6:	d109      	bne.n	800cebc <_tzset_unlocked_r+0x208>
 800cea8:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ceac:	e9cd b600 	strd	fp, r6, [sp]
 800ceb0:	493e      	ldr	r1, [pc, #248]	; (800cfac <_tzset_unlocked_r+0x2f8>)
 800ceb2:	4633      	mov	r3, r6
 800ceb4:	aa07      	add	r2, sp, #28
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f7fe fe7a 	bl	800bbb0 <siscanf>
 800cebc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cec0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cec4:	213c      	movs	r1, #60	; 0x3c
 800cec6:	fb01 3302 	mla	r3, r1, r2, r3
 800ceca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cece:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ced2:	fb01 3302 	mla	r3, r1, r2, r3
 800ced6:	61bb      	str	r3, [r7, #24]
 800ced8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ceda:	3728      	adds	r7, #40	; 0x28
 800cedc:	4444      	add	r4, r8
 800cede:	f1b9 0f00 	cmp.w	r9, #0
 800cee2:	d020      	beq.n	800cf26 <_tzset_unlocked_r+0x272>
 800cee4:	6868      	ldr	r0, [r5, #4]
 800cee6:	f7ff fe29 	bl	800cb3c <__tzcalc_limits>
 800ceea:	4b28      	ldr	r3, [pc, #160]	; (800cf8c <_tzset_unlocked_r+0x2d8>)
 800ceec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cef2:	1a9b      	subs	r3, r3, r2
 800cef4:	4a27      	ldr	r2, [pc, #156]	; (800cf94 <_tzset_unlocked_r+0x2e0>)
 800cef6:	bf18      	it	ne
 800cef8:	2301      	movne	r3, #1
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	e6f4      	b.n	800cce8 <_tzset_unlocked_r+0x34>
 800cefe:	2b2b      	cmp	r3, #43	; 0x2b
 800cf00:	bf08      	it	eq
 800cf02:	3401      	addeq	r4, #1
 800cf04:	2701      	movs	r7, #1
 800cf06:	e772      	b.n	800cdee <_tzset_unlocked_r+0x13a>
 800cf08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf10:	213c      	movs	r1, #60	; 0x3c
 800cf12:	fb01 3302 	mla	r3, r1, r2, r3
 800cf16:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf1e:	fb01 3302 	mla	r3, r1, r2, r3
 800cf22:	437b      	muls	r3, r7
 800cf24:	e77a      	b.n	800ce1c <_tzset_unlocked_r+0x168>
 800cf26:	f04f 0901 	mov.w	r9, #1
 800cf2a:	e77d      	b.n	800ce28 <_tzset_unlocked_r+0x174>
 800cf2c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cf30:	bf06      	itte	eq
 800cf32:	3401      	addeq	r4, #1
 800cf34:	4643      	moveq	r3, r8
 800cf36:	2344      	movne	r3, #68	; 0x44
 800cf38:	220a      	movs	r2, #10
 800cf3a:	a90b      	add	r1, sp, #44	; 0x2c
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	9305      	str	r3, [sp, #20]
 800cf40:	f7ff fdf2 	bl	800cb28 <strtoul>
 800cf44:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cf48:	9b05      	ldr	r3, [sp, #20]
 800cf4a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cf4e:	45a0      	cmp	r8, r4
 800cf50:	d114      	bne.n	800cf7c <_tzset_unlocked_r+0x2c8>
 800cf52:	234d      	movs	r3, #77	; 0x4d
 800cf54:	f1b9 0f00 	cmp.w	r9, #0
 800cf58:	d107      	bne.n	800cf6a <_tzset_unlocked_r+0x2b6>
 800cf5a:	722b      	strb	r3, [r5, #8]
 800cf5c:	2103      	movs	r1, #3
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800cf64:	f8c5 9014 	str.w	r9, [r5, #20]
 800cf68:	e791      	b.n	800ce8e <_tzset_unlocked_r+0x1da>
 800cf6a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800cf6e:	220b      	movs	r2, #11
 800cf70:	2301      	movs	r3, #1
 800cf72:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800cf76:	2300      	movs	r3, #0
 800cf78:	63eb      	str	r3, [r5, #60]	; 0x3c
 800cf7a:	e788      	b.n	800ce8e <_tzset_unlocked_r+0x1da>
 800cf7c:	b280      	uxth	r0, r0
 800cf7e:	723b      	strb	r3, [r7, #8]
 800cf80:	6178      	str	r0, [r7, #20]
 800cf82:	e784      	b.n	800ce8e <_tzset_unlocked_r+0x1da>
 800cf84:	08010870 	.word	0x08010870
 800cf88:	20006778 	.word	0x20006778
 800cf8c:	20006780 	.word	0x20006780
 800cf90:	08010873 	.word	0x08010873
 800cf94:	2000677c 	.word	0x2000677c
 800cf98:	20000084 	.word	0x20000084
 800cf9c:	2000676b 	.word	0x2000676b
 800cfa0:	08010877 	.word	0x08010877
 800cfa4:	0801089a 	.word	0x0801089a
 800cfa8:	08010886 	.word	0x08010886
 800cfac:	08010899 	.word	0x08010899
 800cfb0:	20006760 	.word	0x20006760

0800cfb4 <_write_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	; (800cfd4 <_write_r+0x20>)
 800cfb8:	4604      	mov	r4, r0
 800cfba:	4608      	mov	r0, r1
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f7f5 fc47 	bl	8002856 <_write>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_write_r+0x1e>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_write_r+0x1e>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	20006794 	.word	0x20006794

0800cfd8 <_close_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4d06      	ldr	r5, [pc, #24]	; (800cff4 <_close_r+0x1c>)
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4608      	mov	r0, r1
 800cfe2:	602b      	str	r3, [r5, #0]
 800cfe4:	f7f5 fc53 	bl	800288e <_close>
 800cfe8:	1c43      	adds	r3, r0, #1
 800cfea:	d102      	bne.n	800cff2 <_close_r+0x1a>
 800cfec:	682b      	ldr	r3, [r5, #0]
 800cfee:	b103      	cbz	r3, 800cff2 <_close_r+0x1a>
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	20006794 	.word	0x20006794

0800cff8 <div>:
 800cff8:	2900      	cmp	r1, #0
 800cffa:	b510      	push	{r4, lr}
 800cffc:	fb91 f4f2 	sdiv	r4, r1, r2
 800d000:	fb02 1314 	mls	r3, r2, r4, r1
 800d004:	db06      	blt.n	800d014 <div+0x1c>
 800d006:	2b00      	cmp	r3, #0
 800d008:	da01      	bge.n	800d00e <div+0x16>
 800d00a:	3401      	adds	r4, #1
 800d00c:	1a9b      	subs	r3, r3, r2
 800d00e:	e9c0 4300 	strd	r4, r3, [r0]
 800d012:	bd10      	pop	{r4, pc}
 800d014:	2b00      	cmp	r3, #0
 800d016:	bfc4      	itt	gt
 800d018:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d01c:	189b      	addgt	r3, r3, r2
 800d01e:	e7f6      	b.n	800d00e <div+0x16>

0800d020 <quorem>:
 800d020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	6903      	ldr	r3, [r0, #16]
 800d026:	690c      	ldr	r4, [r1, #16]
 800d028:	42a3      	cmp	r3, r4
 800d02a:	4607      	mov	r7, r0
 800d02c:	f2c0 8081 	blt.w	800d132 <quorem+0x112>
 800d030:	3c01      	subs	r4, #1
 800d032:	f101 0814 	add.w	r8, r1, #20
 800d036:	f100 0514 	add.w	r5, r0, #20
 800d03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d048:	3301      	adds	r3, #1
 800d04a:	429a      	cmp	r2, r3
 800d04c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d054:	fbb2 f6f3 	udiv	r6, r2, r3
 800d058:	d331      	bcc.n	800d0be <quorem+0x9e>
 800d05a:	f04f 0e00 	mov.w	lr, #0
 800d05e:	4640      	mov	r0, r8
 800d060:	46ac      	mov	ip, r5
 800d062:	46f2      	mov	sl, lr
 800d064:	f850 2b04 	ldr.w	r2, [r0], #4
 800d068:	b293      	uxth	r3, r2
 800d06a:	fb06 e303 	mla	r3, r6, r3, lr
 800d06e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d072:	b29b      	uxth	r3, r3
 800d074:	ebaa 0303 	sub.w	r3, sl, r3
 800d078:	f8dc a000 	ldr.w	sl, [ip]
 800d07c:	0c12      	lsrs	r2, r2, #16
 800d07e:	fa13 f38a 	uxtah	r3, r3, sl
 800d082:	fb06 e202 	mla	r2, r6, r2, lr
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	9b00      	ldr	r3, [sp, #0]
 800d08a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d08e:	b292      	uxth	r2, r2
 800d090:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d094:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d098:	f8bd 3000 	ldrh.w	r3, [sp]
 800d09c:	4581      	cmp	r9, r0
 800d09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0a2:	f84c 3b04 	str.w	r3, [ip], #4
 800d0a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d0aa:	d2db      	bcs.n	800d064 <quorem+0x44>
 800d0ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800d0b0:	b92b      	cbnz	r3, 800d0be <quorem+0x9e>
 800d0b2:	9b01      	ldr	r3, [sp, #4]
 800d0b4:	3b04      	subs	r3, #4
 800d0b6:	429d      	cmp	r5, r3
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	d32e      	bcc.n	800d11a <quorem+0xfa>
 800d0bc:	613c      	str	r4, [r7, #16]
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f001 fcea 	bl	800ea98 <__mcmp>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	db24      	blt.n	800d112 <quorem+0xf2>
 800d0c8:	3601      	adds	r6, #1
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f04f 0c00 	mov.w	ip, #0
 800d0d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0d4:	f8d0 e000 	ldr.w	lr, [r0]
 800d0d8:	b293      	uxth	r3, r2
 800d0da:	ebac 0303 	sub.w	r3, ip, r3
 800d0de:	0c12      	lsrs	r2, r2, #16
 800d0e0:	fa13 f38e 	uxtah	r3, r3, lr
 800d0e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d0e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0f2:	45c1      	cmp	r9, r8
 800d0f4:	f840 3b04 	str.w	r3, [r0], #4
 800d0f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d0fc:	d2e8      	bcs.n	800d0d0 <quorem+0xb0>
 800d0fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d106:	b922      	cbnz	r2, 800d112 <quorem+0xf2>
 800d108:	3b04      	subs	r3, #4
 800d10a:	429d      	cmp	r5, r3
 800d10c:	461a      	mov	r2, r3
 800d10e:	d30a      	bcc.n	800d126 <quorem+0x106>
 800d110:	613c      	str	r4, [r7, #16]
 800d112:	4630      	mov	r0, r6
 800d114:	b003      	add	sp, #12
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	3b04      	subs	r3, #4
 800d11e:	2a00      	cmp	r2, #0
 800d120:	d1cc      	bne.n	800d0bc <quorem+0x9c>
 800d122:	3c01      	subs	r4, #1
 800d124:	e7c7      	b.n	800d0b6 <quorem+0x96>
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	3b04      	subs	r3, #4
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	d1f0      	bne.n	800d110 <quorem+0xf0>
 800d12e:	3c01      	subs	r4, #1
 800d130:	e7eb      	b.n	800d10a <quorem+0xea>
 800d132:	2000      	movs	r0, #0
 800d134:	e7ee      	b.n	800d114 <quorem+0xf4>
	...

0800d138 <_dtoa_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	ed2d 8b04 	vpush	{d8-d9}
 800d140:	ec57 6b10 	vmov	r6, r7, d0
 800d144:	b093      	sub	sp, #76	; 0x4c
 800d146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d14c:	9106      	str	r1, [sp, #24]
 800d14e:	ee10 aa10 	vmov	sl, s0
 800d152:	4604      	mov	r4, r0
 800d154:	9209      	str	r2, [sp, #36]	; 0x24
 800d156:	930c      	str	r3, [sp, #48]	; 0x30
 800d158:	46bb      	mov	fp, r7
 800d15a:	b975      	cbnz	r5, 800d17a <_dtoa_r+0x42>
 800d15c:	2010      	movs	r0, #16
 800d15e:	f001 f9ad 	bl	800e4bc <malloc>
 800d162:	4602      	mov	r2, r0
 800d164:	6260      	str	r0, [r4, #36]	; 0x24
 800d166:	b920      	cbnz	r0, 800d172 <_dtoa_r+0x3a>
 800d168:	4ba7      	ldr	r3, [pc, #668]	; (800d408 <_dtoa_r+0x2d0>)
 800d16a:	21ea      	movs	r1, #234	; 0xea
 800d16c:	48a7      	ldr	r0, [pc, #668]	; (800d40c <_dtoa_r+0x2d4>)
 800d16e:	f002 fcbf 	bl	800faf0 <__assert_func>
 800d172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d176:	6005      	str	r5, [r0, #0]
 800d178:	60c5      	str	r5, [r0, #12]
 800d17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d17c:	6819      	ldr	r1, [r3, #0]
 800d17e:	b151      	cbz	r1, 800d196 <_dtoa_r+0x5e>
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	604a      	str	r2, [r1, #4]
 800d184:	2301      	movs	r3, #1
 800d186:	4093      	lsls	r3, r2
 800d188:	608b      	str	r3, [r1, #8]
 800d18a:	4620      	mov	r0, r4
 800d18c:	f001 f9f8 	bl	800e580 <_Bfree>
 800d190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	1e3b      	subs	r3, r7, #0
 800d198:	bfaa      	itet	ge
 800d19a:	2300      	movge	r3, #0
 800d19c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d1a0:	f8c8 3000 	strge.w	r3, [r8]
 800d1a4:	4b9a      	ldr	r3, [pc, #616]	; (800d410 <_dtoa_r+0x2d8>)
 800d1a6:	bfbc      	itt	lt
 800d1a8:	2201      	movlt	r2, #1
 800d1aa:	f8c8 2000 	strlt.w	r2, [r8]
 800d1ae:	ea33 030b 	bics.w	r3, r3, fp
 800d1b2:	d11b      	bne.n	800d1ec <_dtoa_r+0xb4>
 800d1b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1c0:	4333      	orrs	r3, r6
 800d1c2:	f000 8592 	beq.w	800dcea <_dtoa_r+0xbb2>
 800d1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1c8:	b963      	cbnz	r3, 800d1e4 <_dtoa_r+0xac>
 800d1ca:	4b92      	ldr	r3, [pc, #584]	; (800d414 <_dtoa_r+0x2dc>)
 800d1cc:	e022      	b.n	800d214 <_dtoa_r+0xdc>
 800d1ce:	4b92      	ldr	r3, [pc, #584]	; (800d418 <_dtoa_r+0x2e0>)
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	3308      	adds	r3, #8
 800d1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1d6:	6013      	str	r3, [r2, #0]
 800d1d8:	9801      	ldr	r0, [sp, #4]
 800d1da:	b013      	add	sp, #76	; 0x4c
 800d1dc:	ecbd 8b04 	vpop	{d8-d9}
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	4b8b      	ldr	r3, [pc, #556]	; (800d414 <_dtoa_r+0x2dc>)
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	3303      	adds	r3, #3
 800d1ea:	e7f3      	b.n	800d1d4 <_dtoa_r+0x9c>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	4659      	mov	r1, fp
 800d1f4:	f7f3 fc78 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1f8:	ec4b ab19 	vmov	d9, sl, fp
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	b158      	cbz	r0, 800d218 <_dtoa_r+0xe0>
 800d200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d202:	2301      	movs	r3, #1
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 856b 	beq.w	800dce4 <_dtoa_r+0xbac>
 800d20e:	4883      	ldr	r0, [pc, #524]	; (800d41c <_dtoa_r+0x2e4>)
 800d210:	6018      	str	r0, [r3, #0]
 800d212:	1e43      	subs	r3, r0, #1
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	e7df      	b.n	800d1d8 <_dtoa_r+0xa0>
 800d218:	ec4b ab10 	vmov	d0, sl, fp
 800d21c:	aa10      	add	r2, sp, #64	; 0x40
 800d21e:	a911      	add	r1, sp, #68	; 0x44
 800d220:	4620      	mov	r0, r4
 800d222:	f001 fd5b 	bl	800ecdc <__d2b>
 800d226:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d22a:	ee08 0a10 	vmov	s16, r0
 800d22e:	2d00      	cmp	r5, #0
 800d230:	f000 8084 	beq.w	800d33c <_dtoa_r+0x204>
 800d234:	ee19 3a90 	vmov	r3, s19
 800d238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d23c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d240:	4656      	mov	r6, sl
 800d242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d24a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d24e:	4b74      	ldr	r3, [pc, #464]	; (800d420 <_dtoa_r+0x2e8>)
 800d250:	2200      	movs	r2, #0
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 f827 	bl	80002a8 <__aeabi_dsub>
 800d25a:	a365      	add	r3, pc, #404	; (adr r3, 800d3f0 <_dtoa_r+0x2b8>)
 800d25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d260:	f7f3 f9da 	bl	8000618 <__aeabi_dmul>
 800d264:	a364      	add	r3, pc, #400	; (adr r3, 800d3f8 <_dtoa_r+0x2c0>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	f7f3 f81f 	bl	80002ac <__adddf3>
 800d26e:	4606      	mov	r6, r0
 800d270:	4628      	mov	r0, r5
 800d272:	460f      	mov	r7, r1
 800d274:	f7f3 f966 	bl	8000544 <__aeabi_i2d>
 800d278:	a361      	add	r3, pc, #388	; (adr r3, 800d400 <_dtoa_r+0x2c8>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f9cb 	bl	8000618 <__aeabi_dmul>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 f80f 	bl	80002ac <__adddf3>
 800d28e:	4606      	mov	r6, r0
 800d290:	460f      	mov	r7, r1
 800d292:	f7f3 fc71 	bl	8000b78 <__aeabi_d2iz>
 800d296:	2200      	movs	r2, #0
 800d298:	9000      	str	r0, [sp, #0]
 800d29a:	2300      	movs	r3, #0
 800d29c:	4630      	mov	r0, r6
 800d29e:	4639      	mov	r1, r7
 800d2a0:	f7f3 fc2c 	bl	8000afc <__aeabi_dcmplt>
 800d2a4:	b150      	cbz	r0, 800d2bc <_dtoa_r+0x184>
 800d2a6:	9800      	ldr	r0, [sp, #0]
 800d2a8:	f7f3 f94c 	bl	8000544 <__aeabi_i2d>
 800d2ac:	4632      	mov	r2, r6
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	f7f3 fc1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2b4:	b910      	cbnz	r0, 800d2bc <_dtoa_r+0x184>
 800d2b6:	9b00      	ldr	r3, [sp, #0]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	9b00      	ldr	r3, [sp, #0]
 800d2be:	2b16      	cmp	r3, #22
 800d2c0:	d85a      	bhi.n	800d378 <_dtoa_r+0x240>
 800d2c2:	9a00      	ldr	r2, [sp, #0]
 800d2c4:	4b57      	ldr	r3, [pc, #348]	; (800d424 <_dtoa_r+0x2ec>)
 800d2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	ec51 0b19 	vmov	r0, r1, d9
 800d2d2:	f7f3 fc13 	bl	8000afc <__aeabi_dcmplt>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d050      	beq.n	800d37c <_dtoa_r+0x244>
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2e6:	1b5d      	subs	r5, r3, r5
 800d2e8:	1e6b      	subs	r3, r5, #1
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	bf45      	ittet	mi
 800d2ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800d2f2:	9304      	strmi	r3, [sp, #16]
 800d2f4:	2300      	movpl	r3, #0
 800d2f6:	2300      	movmi	r3, #0
 800d2f8:	bf4c      	ite	mi
 800d2fa:	9305      	strmi	r3, [sp, #20]
 800d2fc:	9304      	strpl	r3, [sp, #16]
 800d2fe:	9b00      	ldr	r3, [sp, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	db3d      	blt.n	800d380 <_dtoa_r+0x248>
 800d304:	9b05      	ldr	r3, [sp, #20]
 800d306:	9a00      	ldr	r2, [sp, #0]
 800d308:	920a      	str	r2, [sp, #40]	; 0x28
 800d30a:	4413      	add	r3, r2
 800d30c:	9305      	str	r3, [sp, #20]
 800d30e:	2300      	movs	r3, #0
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	2b09      	cmp	r3, #9
 800d316:	f200 8089 	bhi.w	800d42c <_dtoa_r+0x2f4>
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	bfc4      	itt	gt
 800d31e:	3b04      	subgt	r3, #4
 800d320:	9306      	strgt	r3, [sp, #24]
 800d322:	9b06      	ldr	r3, [sp, #24]
 800d324:	f1a3 0302 	sub.w	r3, r3, #2
 800d328:	bfcc      	ite	gt
 800d32a:	2500      	movgt	r5, #0
 800d32c:	2501      	movle	r5, #1
 800d32e:	2b03      	cmp	r3, #3
 800d330:	f200 8087 	bhi.w	800d442 <_dtoa_r+0x30a>
 800d334:	e8df f003 	tbb	[pc, r3]
 800d338:	59383a2d 	.word	0x59383a2d
 800d33c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d340:	441d      	add	r5, r3
 800d342:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d346:	2b20      	cmp	r3, #32
 800d348:	bfc1      	itttt	gt
 800d34a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d34e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d352:	fa0b f303 	lslgt.w	r3, fp, r3
 800d356:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d35a:	bfda      	itte	le
 800d35c:	f1c3 0320 	rsble	r3, r3, #32
 800d360:	fa06 f003 	lslle.w	r0, r6, r3
 800d364:	4318      	orrgt	r0, r3
 800d366:	f7f3 f8dd 	bl	8000524 <__aeabi_ui2d>
 800d36a:	2301      	movs	r3, #1
 800d36c:	4606      	mov	r6, r0
 800d36e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d372:	3d01      	subs	r5, #1
 800d374:	930e      	str	r3, [sp, #56]	; 0x38
 800d376:	e76a      	b.n	800d24e <_dtoa_r+0x116>
 800d378:	2301      	movs	r3, #1
 800d37a:	e7b2      	b.n	800d2e2 <_dtoa_r+0x1aa>
 800d37c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d37e:	e7b1      	b.n	800d2e4 <_dtoa_r+0x1ac>
 800d380:	9b04      	ldr	r3, [sp, #16]
 800d382:	9a00      	ldr	r2, [sp, #0]
 800d384:	1a9b      	subs	r3, r3, r2
 800d386:	9304      	str	r3, [sp, #16]
 800d388:	4253      	negs	r3, r2
 800d38a:	9307      	str	r3, [sp, #28]
 800d38c:	2300      	movs	r3, #0
 800d38e:	930a      	str	r3, [sp, #40]	; 0x28
 800d390:	e7bf      	b.n	800d312 <_dtoa_r+0x1da>
 800d392:	2300      	movs	r3, #0
 800d394:	9308      	str	r3, [sp, #32]
 800d396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dc55      	bgt.n	800d448 <_dtoa_r+0x310>
 800d39c:	2301      	movs	r3, #1
 800d39e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a6:	e00c      	b.n	800d3c2 <_dtoa_r+0x28a>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e7f3      	b.n	800d394 <_dtoa_r+0x25c>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3b0:	9308      	str	r3, [sp, #32]
 800d3b2:	9b00      	ldr	r3, [sp, #0]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	9302      	str	r3, [sp, #8]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	bfb8      	it	lt
 800d3c0:	2301      	movlt	r3, #1
 800d3c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	6042      	str	r2, [r0, #4]
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	f102 0614 	add.w	r6, r2, #20
 800d3ce:	429e      	cmp	r6, r3
 800d3d0:	6841      	ldr	r1, [r0, #4]
 800d3d2:	d93d      	bls.n	800d450 <_dtoa_r+0x318>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f001 f893 	bl	800e500 <_Balloc>
 800d3da:	9001      	str	r0, [sp, #4]
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d13b      	bne.n	800d458 <_dtoa_r+0x320>
 800d3e0:	4b11      	ldr	r3, [pc, #68]	; (800d428 <_dtoa_r+0x2f0>)
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d3e8:	e6c0      	b.n	800d16c <_dtoa_r+0x34>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e7df      	b.n	800d3ae <_dtoa_r+0x276>
 800d3ee:	bf00      	nop
 800d3f0:	636f4361 	.word	0x636f4361
 800d3f4:	3fd287a7 	.word	0x3fd287a7
 800d3f8:	8b60c8b3 	.word	0x8b60c8b3
 800d3fc:	3fc68a28 	.word	0x3fc68a28
 800d400:	509f79fb 	.word	0x509f79fb
 800d404:	3fd34413 	.word	0x3fd34413
 800d408:	080109ba 	.word	0x080109ba
 800d40c:	080109d1 	.word	0x080109d1
 800d410:	7ff00000 	.word	0x7ff00000
 800d414:	080109b6 	.word	0x080109b6
 800d418:	080109ad 	.word	0x080109ad
 800d41c:	08010c8a 	.word	0x08010c8a
 800d420:	3ff80000 	.word	0x3ff80000
 800d424:	08010ba0 	.word	0x08010ba0
 800d428:	08010a2c 	.word	0x08010a2c
 800d42c:	2501      	movs	r5, #1
 800d42e:	2300      	movs	r3, #0
 800d430:	9306      	str	r3, [sp, #24]
 800d432:	9508      	str	r5, [sp, #32]
 800d434:	f04f 33ff 	mov.w	r3, #4294967295
 800d438:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d43c:	2200      	movs	r2, #0
 800d43e:	2312      	movs	r3, #18
 800d440:	e7b0      	b.n	800d3a4 <_dtoa_r+0x26c>
 800d442:	2301      	movs	r3, #1
 800d444:	9308      	str	r3, [sp, #32]
 800d446:	e7f5      	b.n	800d434 <_dtoa_r+0x2fc>
 800d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d44e:	e7b8      	b.n	800d3c2 <_dtoa_r+0x28a>
 800d450:	3101      	adds	r1, #1
 800d452:	6041      	str	r1, [r0, #4]
 800d454:	0052      	lsls	r2, r2, #1
 800d456:	e7b8      	b.n	800d3ca <_dtoa_r+0x292>
 800d458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d45a:	9a01      	ldr	r2, [sp, #4]
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	9b03      	ldr	r3, [sp, #12]
 800d460:	2b0e      	cmp	r3, #14
 800d462:	f200 809d 	bhi.w	800d5a0 <_dtoa_r+0x468>
 800d466:	2d00      	cmp	r5, #0
 800d468:	f000 809a 	beq.w	800d5a0 <_dtoa_r+0x468>
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd32      	ble.n	800d4d8 <_dtoa_r+0x3a0>
 800d472:	4ab7      	ldr	r2, [pc, #732]	; (800d750 <_dtoa_r+0x618>)
 800d474:	f003 030f 	and.w	r3, r3, #15
 800d478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d47c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d480:	9b00      	ldr	r3, [sp, #0]
 800d482:	05d8      	lsls	r0, r3, #23
 800d484:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d488:	d516      	bpl.n	800d4b8 <_dtoa_r+0x380>
 800d48a:	4bb2      	ldr	r3, [pc, #712]	; (800d754 <_dtoa_r+0x61c>)
 800d48c:	ec51 0b19 	vmov	r0, r1, d9
 800d490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d494:	f7f3 f9ea 	bl	800086c <__aeabi_ddiv>
 800d498:	f007 070f 	and.w	r7, r7, #15
 800d49c:	4682      	mov	sl, r0
 800d49e:	468b      	mov	fp, r1
 800d4a0:	2503      	movs	r5, #3
 800d4a2:	4eac      	ldr	r6, [pc, #688]	; (800d754 <_dtoa_r+0x61c>)
 800d4a4:	b957      	cbnz	r7, 800d4bc <_dtoa_r+0x384>
 800d4a6:	4642      	mov	r2, r8
 800d4a8:	464b      	mov	r3, r9
 800d4aa:	4650      	mov	r0, sl
 800d4ac:	4659      	mov	r1, fp
 800d4ae:	f7f3 f9dd 	bl	800086c <__aeabi_ddiv>
 800d4b2:	4682      	mov	sl, r0
 800d4b4:	468b      	mov	fp, r1
 800d4b6:	e028      	b.n	800d50a <_dtoa_r+0x3d2>
 800d4b8:	2502      	movs	r5, #2
 800d4ba:	e7f2      	b.n	800d4a2 <_dtoa_r+0x36a>
 800d4bc:	07f9      	lsls	r1, r7, #31
 800d4be:	d508      	bpl.n	800d4d2 <_dtoa_r+0x39a>
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4c8:	f7f3 f8a6 	bl	8000618 <__aeabi_dmul>
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	4680      	mov	r8, r0
 800d4d0:	4689      	mov	r9, r1
 800d4d2:	107f      	asrs	r7, r7, #1
 800d4d4:	3608      	adds	r6, #8
 800d4d6:	e7e5      	b.n	800d4a4 <_dtoa_r+0x36c>
 800d4d8:	f000 809b 	beq.w	800d612 <_dtoa_r+0x4da>
 800d4dc:	9b00      	ldr	r3, [sp, #0]
 800d4de:	4f9d      	ldr	r7, [pc, #628]	; (800d754 <_dtoa_r+0x61c>)
 800d4e0:	425e      	negs	r6, r3
 800d4e2:	4b9b      	ldr	r3, [pc, #620]	; (800d750 <_dtoa_r+0x618>)
 800d4e4:	f006 020f 	and.w	r2, r6, #15
 800d4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	ec51 0b19 	vmov	r0, r1, d9
 800d4f4:	f7f3 f890 	bl	8000618 <__aeabi_dmul>
 800d4f8:	1136      	asrs	r6, r6, #4
 800d4fa:	4682      	mov	sl, r0
 800d4fc:	468b      	mov	fp, r1
 800d4fe:	2300      	movs	r3, #0
 800d500:	2502      	movs	r5, #2
 800d502:	2e00      	cmp	r6, #0
 800d504:	d17a      	bne.n	800d5fc <_dtoa_r+0x4c4>
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1d3      	bne.n	800d4b2 <_dtoa_r+0x37a>
 800d50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 8082 	beq.w	800d616 <_dtoa_r+0x4de>
 800d512:	4b91      	ldr	r3, [pc, #580]	; (800d758 <_dtoa_r+0x620>)
 800d514:	2200      	movs	r2, #0
 800d516:	4650      	mov	r0, sl
 800d518:	4659      	mov	r1, fp
 800d51a:	f7f3 faef 	bl	8000afc <__aeabi_dcmplt>
 800d51e:	2800      	cmp	r0, #0
 800d520:	d079      	beq.n	800d616 <_dtoa_r+0x4de>
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d076      	beq.n	800d616 <_dtoa_r+0x4de>
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd36      	ble.n	800d59c <_dtoa_r+0x464>
 800d52e:	9b00      	ldr	r3, [sp, #0]
 800d530:	4650      	mov	r0, sl
 800d532:	4659      	mov	r1, fp
 800d534:	1e5f      	subs	r7, r3, #1
 800d536:	2200      	movs	r2, #0
 800d538:	4b88      	ldr	r3, [pc, #544]	; (800d75c <_dtoa_r+0x624>)
 800d53a:	f7f3 f86d 	bl	8000618 <__aeabi_dmul>
 800d53e:	9e02      	ldr	r6, [sp, #8]
 800d540:	4682      	mov	sl, r0
 800d542:	468b      	mov	fp, r1
 800d544:	3501      	adds	r5, #1
 800d546:	4628      	mov	r0, r5
 800d548:	f7f2 fffc 	bl	8000544 <__aeabi_i2d>
 800d54c:	4652      	mov	r2, sl
 800d54e:	465b      	mov	r3, fp
 800d550:	f7f3 f862 	bl	8000618 <__aeabi_dmul>
 800d554:	4b82      	ldr	r3, [pc, #520]	; (800d760 <_dtoa_r+0x628>)
 800d556:	2200      	movs	r2, #0
 800d558:	f7f2 fea8 	bl	80002ac <__adddf3>
 800d55c:	46d0      	mov	r8, sl
 800d55e:	46d9      	mov	r9, fp
 800d560:	4682      	mov	sl, r0
 800d562:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d566:	2e00      	cmp	r6, #0
 800d568:	d158      	bne.n	800d61c <_dtoa_r+0x4e4>
 800d56a:	4b7e      	ldr	r3, [pc, #504]	; (800d764 <_dtoa_r+0x62c>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	4640      	mov	r0, r8
 800d570:	4649      	mov	r1, r9
 800d572:	f7f2 fe99 	bl	80002a8 <__aeabi_dsub>
 800d576:	4652      	mov	r2, sl
 800d578:	465b      	mov	r3, fp
 800d57a:	4680      	mov	r8, r0
 800d57c:	4689      	mov	r9, r1
 800d57e:	f7f3 fadb 	bl	8000b38 <__aeabi_dcmpgt>
 800d582:	2800      	cmp	r0, #0
 800d584:	f040 8295 	bne.w	800dab2 <_dtoa_r+0x97a>
 800d588:	4652      	mov	r2, sl
 800d58a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d58e:	4640      	mov	r0, r8
 800d590:	4649      	mov	r1, r9
 800d592:	f7f3 fab3 	bl	8000afc <__aeabi_dcmplt>
 800d596:	2800      	cmp	r0, #0
 800d598:	f040 8289 	bne.w	800daae <_dtoa_r+0x976>
 800d59c:	ec5b ab19 	vmov	sl, fp, d9
 800d5a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f2c0 8148 	blt.w	800d838 <_dtoa_r+0x700>
 800d5a8:	9a00      	ldr	r2, [sp, #0]
 800d5aa:	2a0e      	cmp	r2, #14
 800d5ac:	f300 8144 	bgt.w	800d838 <_dtoa_r+0x700>
 800d5b0:	4b67      	ldr	r3, [pc, #412]	; (800d750 <_dtoa_r+0x618>)
 800d5b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f280 80d5 	bge.w	800d76c <_dtoa_r+0x634>
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f300 80d1 	bgt.w	800d76c <_dtoa_r+0x634>
 800d5ca:	f040 826f 	bne.w	800daac <_dtoa_r+0x974>
 800d5ce:	4b65      	ldr	r3, [pc, #404]	; (800d764 <_dtoa_r+0x62c>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	4649      	mov	r1, r9
 800d5d6:	f7f3 f81f 	bl	8000618 <__aeabi_dmul>
 800d5da:	4652      	mov	r2, sl
 800d5dc:	465b      	mov	r3, fp
 800d5de:	f7f3 faa1 	bl	8000b24 <__aeabi_dcmpge>
 800d5e2:	9e03      	ldr	r6, [sp, #12]
 800d5e4:	4637      	mov	r7, r6
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	f040 8245 	bne.w	800da76 <_dtoa_r+0x93e>
 800d5ec:	9d01      	ldr	r5, [sp, #4]
 800d5ee:	2331      	movs	r3, #49	; 0x31
 800d5f0:	f805 3b01 	strb.w	r3, [r5], #1
 800d5f4:	9b00      	ldr	r3, [sp, #0]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	e240      	b.n	800da7e <_dtoa_r+0x946>
 800d5fc:	07f2      	lsls	r2, r6, #31
 800d5fe:	d505      	bpl.n	800d60c <_dtoa_r+0x4d4>
 800d600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d604:	f7f3 f808 	bl	8000618 <__aeabi_dmul>
 800d608:	3501      	adds	r5, #1
 800d60a:	2301      	movs	r3, #1
 800d60c:	1076      	asrs	r6, r6, #1
 800d60e:	3708      	adds	r7, #8
 800d610:	e777      	b.n	800d502 <_dtoa_r+0x3ca>
 800d612:	2502      	movs	r5, #2
 800d614:	e779      	b.n	800d50a <_dtoa_r+0x3d2>
 800d616:	9f00      	ldr	r7, [sp, #0]
 800d618:	9e03      	ldr	r6, [sp, #12]
 800d61a:	e794      	b.n	800d546 <_dtoa_r+0x40e>
 800d61c:	9901      	ldr	r1, [sp, #4]
 800d61e:	4b4c      	ldr	r3, [pc, #304]	; (800d750 <_dtoa_r+0x618>)
 800d620:	4431      	add	r1, r6
 800d622:	910d      	str	r1, [sp, #52]	; 0x34
 800d624:	9908      	ldr	r1, [sp, #32]
 800d626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d62a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d62e:	2900      	cmp	r1, #0
 800d630:	d043      	beq.n	800d6ba <_dtoa_r+0x582>
 800d632:	494d      	ldr	r1, [pc, #308]	; (800d768 <_dtoa_r+0x630>)
 800d634:	2000      	movs	r0, #0
 800d636:	f7f3 f919 	bl	800086c <__aeabi_ddiv>
 800d63a:	4652      	mov	r2, sl
 800d63c:	465b      	mov	r3, fp
 800d63e:	f7f2 fe33 	bl	80002a8 <__aeabi_dsub>
 800d642:	9d01      	ldr	r5, [sp, #4]
 800d644:	4682      	mov	sl, r0
 800d646:	468b      	mov	fp, r1
 800d648:	4649      	mov	r1, r9
 800d64a:	4640      	mov	r0, r8
 800d64c:	f7f3 fa94 	bl	8000b78 <__aeabi_d2iz>
 800d650:	4606      	mov	r6, r0
 800d652:	f7f2 ff77 	bl	8000544 <__aeabi_i2d>
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	4640      	mov	r0, r8
 800d65c:	4649      	mov	r1, r9
 800d65e:	f7f2 fe23 	bl	80002a8 <__aeabi_dsub>
 800d662:	3630      	adds	r6, #48	; 0x30
 800d664:	f805 6b01 	strb.w	r6, [r5], #1
 800d668:	4652      	mov	r2, sl
 800d66a:	465b      	mov	r3, fp
 800d66c:	4680      	mov	r8, r0
 800d66e:	4689      	mov	r9, r1
 800d670:	f7f3 fa44 	bl	8000afc <__aeabi_dcmplt>
 800d674:	2800      	cmp	r0, #0
 800d676:	d163      	bne.n	800d740 <_dtoa_r+0x608>
 800d678:	4642      	mov	r2, r8
 800d67a:	464b      	mov	r3, r9
 800d67c:	4936      	ldr	r1, [pc, #216]	; (800d758 <_dtoa_r+0x620>)
 800d67e:	2000      	movs	r0, #0
 800d680:	f7f2 fe12 	bl	80002a8 <__aeabi_dsub>
 800d684:	4652      	mov	r2, sl
 800d686:	465b      	mov	r3, fp
 800d688:	f7f3 fa38 	bl	8000afc <__aeabi_dcmplt>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f040 80b5 	bne.w	800d7fc <_dtoa_r+0x6c4>
 800d692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d694:	429d      	cmp	r5, r3
 800d696:	d081      	beq.n	800d59c <_dtoa_r+0x464>
 800d698:	4b30      	ldr	r3, [pc, #192]	; (800d75c <_dtoa_r+0x624>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	4650      	mov	r0, sl
 800d69e:	4659      	mov	r1, fp
 800d6a0:	f7f2 ffba 	bl	8000618 <__aeabi_dmul>
 800d6a4:	4b2d      	ldr	r3, [pc, #180]	; (800d75c <_dtoa_r+0x624>)
 800d6a6:	4682      	mov	sl, r0
 800d6a8:	468b      	mov	fp, r1
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	4649      	mov	r1, r9
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f7f2 ffb2 	bl	8000618 <__aeabi_dmul>
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	4689      	mov	r9, r1
 800d6b8:	e7c6      	b.n	800d648 <_dtoa_r+0x510>
 800d6ba:	4650      	mov	r0, sl
 800d6bc:	4659      	mov	r1, fp
 800d6be:	f7f2 ffab 	bl	8000618 <__aeabi_dmul>
 800d6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6c4:	9d01      	ldr	r5, [sp, #4]
 800d6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6c8:	4682      	mov	sl, r0
 800d6ca:	468b      	mov	fp, r1
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	f7f3 fa52 	bl	8000b78 <__aeabi_d2iz>
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	f7f2 ff35 	bl	8000544 <__aeabi_i2d>
 800d6da:	3630      	adds	r6, #48	; 0x30
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	4649      	mov	r1, r9
 800d6e4:	f7f2 fde0 	bl	80002a8 <__aeabi_dsub>
 800d6e8:	f805 6b01 	strb.w	r6, [r5], #1
 800d6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ee:	429d      	cmp	r5, r3
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	4689      	mov	r9, r1
 800d6f4:	f04f 0200 	mov.w	r2, #0
 800d6f8:	d124      	bne.n	800d744 <_dtoa_r+0x60c>
 800d6fa:	4b1b      	ldr	r3, [pc, #108]	; (800d768 <_dtoa_r+0x630>)
 800d6fc:	4650      	mov	r0, sl
 800d6fe:	4659      	mov	r1, fp
 800d700:	f7f2 fdd4 	bl	80002ac <__adddf3>
 800d704:	4602      	mov	r2, r0
 800d706:	460b      	mov	r3, r1
 800d708:	4640      	mov	r0, r8
 800d70a:	4649      	mov	r1, r9
 800d70c:	f7f3 fa14 	bl	8000b38 <__aeabi_dcmpgt>
 800d710:	2800      	cmp	r0, #0
 800d712:	d173      	bne.n	800d7fc <_dtoa_r+0x6c4>
 800d714:	4652      	mov	r2, sl
 800d716:	465b      	mov	r3, fp
 800d718:	4913      	ldr	r1, [pc, #76]	; (800d768 <_dtoa_r+0x630>)
 800d71a:	2000      	movs	r0, #0
 800d71c:	f7f2 fdc4 	bl	80002a8 <__aeabi_dsub>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	4640      	mov	r0, r8
 800d726:	4649      	mov	r1, r9
 800d728:	f7f3 f9e8 	bl	8000afc <__aeabi_dcmplt>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	f43f af35 	beq.w	800d59c <_dtoa_r+0x464>
 800d732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d734:	1e6b      	subs	r3, r5, #1
 800d736:	930f      	str	r3, [sp, #60]	; 0x3c
 800d738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d73c:	2b30      	cmp	r3, #48	; 0x30
 800d73e:	d0f8      	beq.n	800d732 <_dtoa_r+0x5fa>
 800d740:	9700      	str	r7, [sp, #0]
 800d742:	e049      	b.n	800d7d8 <_dtoa_r+0x6a0>
 800d744:	4b05      	ldr	r3, [pc, #20]	; (800d75c <_dtoa_r+0x624>)
 800d746:	f7f2 ff67 	bl	8000618 <__aeabi_dmul>
 800d74a:	4680      	mov	r8, r0
 800d74c:	4689      	mov	r9, r1
 800d74e:	e7bd      	b.n	800d6cc <_dtoa_r+0x594>
 800d750:	08010ba0 	.word	0x08010ba0
 800d754:	08010b78 	.word	0x08010b78
 800d758:	3ff00000 	.word	0x3ff00000
 800d75c:	40240000 	.word	0x40240000
 800d760:	401c0000 	.word	0x401c0000
 800d764:	40140000 	.word	0x40140000
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	9d01      	ldr	r5, [sp, #4]
 800d76e:	4656      	mov	r6, sl
 800d770:	465f      	mov	r7, fp
 800d772:	4642      	mov	r2, r8
 800d774:	464b      	mov	r3, r9
 800d776:	4630      	mov	r0, r6
 800d778:	4639      	mov	r1, r7
 800d77a:	f7f3 f877 	bl	800086c <__aeabi_ddiv>
 800d77e:	f7f3 f9fb 	bl	8000b78 <__aeabi_d2iz>
 800d782:	4682      	mov	sl, r0
 800d784:	f7f2 fede 	bl	8000544 <__aeabi_i2d>
 800d788:	4642      	mov	r2, r8
 800d78a:	464b      	mov	r3, r9
 800d78c:	f7f2 ff44 	bl	8000618 <__aeabi_dmul>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4630      	mov	r0, r6
 800d796:	4639      	mov	r1, r7
 800d798:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d79c:	f7f2 fd84 	bl	80002a8 <__aeabi_dsub>
 800d7a0:	f805 6b01 	strb.w	r6, [r5], #1
 800d7a4:	9e01      	ldr	r6, [sp, #4]
 800d7a6:	9f03      	ldr	r7, [sp, #12]
 800d7a8:	1bae      	subs	r6, r5, r6
 800d7aa:	42b7      	cmp	r7, r6
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	d135      	bne.n	800d81e <_dtoa_r+0x6e6>
 800d7b2:	f7f2 fd7b 	bl	80002ac <__adddf3>
 800d7b6:	4642      	mov	r2, r8
 800d7b8:	464b      	mov	r3, r9
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	460f      	mov	r7, r1
 800d7be:	f7f3 f9bb 	bl	8000b38 <__aeabi_dcmpgt>
 800d7c2:	b9d0      	cbnz	r0, 800d7fa <_dtoa_r+0x6c2>
 800d7c4:	4642      	mov	r2, r8
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	4639      	mov	r1, r7
 800d7cc:	f7f3 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7d0:	b110      	cbz	r0, 800d7d8 <_dtoa_r+0x6a0>
 800d7d2:	f01a 0f01 	tst.w	sl, #1
 800d7d6:	d110      	bne.n	800d7fa <_dtoa_r+0x6c2>
 800d7d8:	4620      	mov	r0, r4
 800d7da:	ee18 1a10 	vmov	r1, s16
 800d7de:	f000 fecf 	bl	800e580 <_Bfree>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9800      	ldr	r0, [sp, #0]
 800d7e6:	702b      	strb	r3, [r5, #0]
 800d7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	6018      	str	r0, [r3, #0]
 800d7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f43f acf1 	beq.w	800d1d8 <_dtoa_r+0xa0>
 800d7f6:	601d      	str	r5, [r3, #0]
 800d7f8:	e4ee      	b.n	800d1d8 <_dtoa_r+0xa0>
 800d7fa:	9f00      	ldr	r7, [sp, #0]
 800d7fc:	462b      	mov	r3, r5
 800d7fe:	461d      	mov	r5, r3
 800d800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d804:	2a39      	cmp	r2, #57	; 0x39
 800d806:	d106      	bne.n	800d816 <_dtoa_r+0x6de>
 800d808:	9a01      	ldr	r2, [sp, #4]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d1f7      	bne.n	800d7fe <_dtoa_r+0x6c6>
 800d80e:	9901      	ldr	r1, [sp, #4]
 800d810:	2230      	movs	r2, #48	; 0x30
 800d812:	3701      	adds	r7, #1
 800d814:	700a      	strb	r2, [r1, #0]
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	3201      	adds	r2, #1
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	e790      	b.n	800d740 <_dtoa_r+0x608>
 800d81e:	4ba6      	ldr	r3, [pc, #664]	; (800dab8 <_dtoa_r+0x980>)
 800d820:	2200      	movs	r2, #0
 800d822:	f7f2 fef9 	bl	8000618 <__aeabi_dmul>
 800d826:	2200      	movs	r2, #0
 800d828:	2300      	movs	r3, #0
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	f7f3 f95b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d832:	2800      	cmp	r0, #0
 800d834:	d09d      	beq.n	800d772 <_dtoa_r+0x63a>
 800d836:	e7cf      	b.n	800d7d8 <_dtoa_r+0x6a0>
 800d838:	9a08      	ldr	r2, [sp, #32]
 800d83a:	2a00      	cmp	r2, #0
 800d83c:	f000 80d7 	beq.w	800d9ee <_dtoa_r+0x8b6>
 800d840:	9a06      	ldr	r2, [sp, #24]
 800d842:	2a01      	cmp	r2, #1
 800d844:	f300 80ba 	bgt.w	800d9bc <_dtoa_r+0x884>
 800d848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d84a:	2a00      	cmp	r2, #0
 800d84c:	f000 80b2 	beq.w	800d9b4 <_dtoa_r+0x87c>
 800d850:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d854:	9e07      	ldr	r6, [sp, #28]
 800d856:	9d04      	ldr	r5, [sp, #16]
 800d858:	9a04      	ldr	r2, [sp, #16]
 800d85a:	441a      	add	r2, r3
 800d85c:	9204      	str	r2, [sp, #16]
 800d85e:	9a05      	ldr	r2, [sp, #20]
 800d860:	2101      	movs	r1, #1
 800d862:	441a      	add	r2, r3
 800d864:	4620      	mov	r0, r4
 800d866:	9205      	str	r2, [sp, #20]
 800d868:	f000 ff8c 	bl	800e784 <__i2b>
 800d86c:	4607      	mov	r7, r0
 800d86e:	2d00      	cmp	r5, #0
 800d870:	dd0c      	ble.n	800d88c <_dtoa_r+0x754>
 800d872:	9b05      	ldr	r3, [sp, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	dd09      	ble.n	800d88c <_dtoa_r+0x754>
 800d878:	42ab      	cmp	r3, r5
 800d87a:	9a04      	ldr	r2, [sp, #16]
 800d87c:	bfa8      	it	ge
 800d87e:	462b      	movge	r3, r5
 800d880:	1ad2      	subs	r2, r2, r3
 800d882:	9204      	str	r2, [sp, #16]
 800d884:	9a05      	ldr	r2, [sp, #20]
 800d886:	1aed      	subs	r5, r5, r3
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	9305      	str	r3, [sp, #20]
 800d88c:	9b07      	ldr	r3, [sp, #28]
 800d88e:	b31b      	cbz	r3, 800d8d8 <_dtoa_r+0x7a0>
 800d890:	9b08      	ldr	r3, [sp, #32]
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 80af 	beq.w	800d9f6 <_dtoa_r+0x8be>
 800d898:	2e00      	cmp	r6, #0
 800d89a:	dd13      	ble.n	800d8c4 <_dtoa_r+0x78c>
 800d89c:	4639      	mov	r1, r7
 800d89e:	4632      	mov	r2, r6
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f001 f82f 	bl	800e904 <__pow5mult>
 800d8a6:	ee18 2a10 	vmov	r2, s16
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f000 ff7e 	bl	800e7b0 <__multiply>
 800d8b4:	ee18 1a10 	vmov	r1, s16
 800d8b8:	4680      	mov	r8, r0
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f000 fe60 	bl	800e580 <_Bfree>
 800d8c0:	ee08 8a10 	vmov	s16, r8
 800d8c4:	9b07      	ldr	r3, [sp, #28]
 800d8c6:	1b9a      	subs	r2, r3, r6
 800d8c8:	d006      	beq.n	800d8d8 <_dtoa_r+0x7a0>
 800d8ca:	ee18 1a10 	vmov	r1, s16
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f001 f818 	bl	800e904 <__pow5mult>
 800d8d4:	ee08 0a10 	vmov	s16, r0
 800d8d8:	2101      	movs	r1, #1
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 ff52 	bl	800e784 <__i2b>
 800d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	f340 8088 	ble.w	800d9fa <_dtoa_r+0x8c2>
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f001 f808 	bl	800e904 <__pow5mult>
 800d8f4:	9b06      	ldr	r3, [sp, #24]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	f340 8081 	ble.w	800da00 <_dtoa_r+0x8c8>
 800d8fe:	f04f 0800 	mov.w	r8, #0
 800d902:	6933      	ldr	r3, [r6, #16]
 800d904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d908:	6918      	ldr	r0, [r3, #16]
 800d90a:	f000 feeb 	bl	800e6e4 <__hi0bits>
 800d90e:	f1c0 0020 	rsb	r0, r0, #32
 800d912:	9b05      	ldr	r3, [sp, #20]
 800d914:	4418      	add	r0, r3
 800d916:	f010 001f 	ands.w	r0, r0, #31
 800d91a:	f000 8092 	beq.w	800da42 <_dtoa_r+0x90a>
 800d91e:	f1c0 0320 	rsb	r3, r0, #32
 800d922:	2b04      	cmp	r3, #4
 800d924:	f340 808a 	ble.w	800da3c <_dtoa_r+0x904>
 800d928:	f1c0 001c 	rsb	r0, r0, #28
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	4403      	add	r3, r0
 800d930:	9304      	str	r3, [sp, #16]
 800d932:	9b05      	ldr	r3, [sp, #20]
 800d934:	4403      	add	r3, r0
 800d936:	4405      	add	r5, r0
 800d938:	9305      	str	r3, [sp, #20]
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	dd07      	ble.n	800d950 <_dtoa_r+0x818>
 800d940:	ee18 1a10 	vmov	r1, s16
 800d944:	461a      	mov	r2, r3
 800d946:	4620      	mov	r0, r4
 800d948:	f001 f836 	bl	800e9b8 <__lshift>
 800d94c:	ee08 0a10 	vmov	s16, r0
 800d950:	9b05      	ldr	r3, [sp, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	dd05      	ble.n	800d962 <_dtoa_r+0x82a>
 800d956:	4631      	mov	r1, r6
 800d958:	461a      	mov	r2, r3
 800d95a:	4620      	mov	r0, r4
 800d95c:	f001 f82c 	bl	800e9b8 <__lshift>
 800d960:	4606      	mov	r6, r0
 800d962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d06e      	beq.n	800da46 <_dtoa_r+0x90e>
 800d968:	ee18 0a10 	vmov	r0, s16
 800d96c:	4631      	mov	r1, r6
 800d96e:	f001 f893 	bl	800ea98 <__mcmp>
 800d972:	2800      	cmp	r0, #0
 800d974:	da67      	bge.n	800da46 <_dtoa_r+0x90e>
 800d976:	9b00      	ldr	r3, [sp, #0]
 800d978:	3b01      	subs	r3, #1
 800d97a:	ee18 1a10 	vmov	r1, s16
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	220a      	movs	r2, #10
 800d982:	2300      	movs	r3, #0
 800d984:	4620      	mov	r0, r4
 800d986:	f000 fe1d 	bl	800e5c4 <__multadd>
 800d98a:	9b08      	ldr	r3, [sp, #32]
 800d98c:	ee08 0a10 	vmov	s16, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 81b1 	beq.w	800dcf8 <_dtoa_r+0xbc0>
 800d996:	2300      	movs	r3, #0
 800d998:	4639      	mov	r1, r7
 800d99a:	220a      	movs	r2, #10
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 fe11 	bl	800e5c4 <__multadd>
 800d9a2:	9b02      	ldr	r3, [sp, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	f300 808e 	bgt.w	800dac8 <_dtoa_r+0x990>
 800d9ac:	9b06      	ldr	r3, [sp, #24]
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	dc51      	bgt.n	800da56 <_dtoa_r+0x91e>
 800d9b2:	e089      	b.n	800dac8 <_dtoa_r+0x990>
 800d9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9ba:	e74b      	b.n	800d854 <_dtoa_r+0x71c>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	1e5e      	subs	r6, r3, #1
 800d9c0:	9b07      	ldr	r3, [sp, #28]
 800d9c2:	42b3      	cmp	r3, r6
 800d9c4:	bfbf      	itttt	lt
 800d9c6:	9b07      	ldrlt	r3, [sp, #28]
 800d9c8:	9607      	strlt	r6, [sp, #28]
 800d9ca:	1af2      	sublt	r2, r6, r3
 800d9cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d9ce:	bfb6      	itet	lt
 800d9d0:	189b      	addlt	r3, r3, r2
 800d9d2:	1b9e      	subge	r6, r3, r6
 800d9d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d9d6:	9b03      	ldr	r3, [sp, #12]
 800d9d8:	bfb8      	it	lt
 800d9da:	2600      	movlt	r6, #0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	bfb7      	itett	lt
 800d9e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d9e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d9e8:	1a9d      	sublt	r5, r3, r2
 800d9ea:	2300      	movlt	r3, #0
 800d9ec:	e734      	b.n	800d858 <_dtoa_r+0x720>
 800d9ee:	9e07      	ldr	r6, [sp, #28]
 800d9f0:	9d04      	ldr	r5, [sp, #16]
 800d9f2:	9f08      	ldr	r7, [sp, #32]
 800d9f4:	e73b      	b.n	800d86e <_dtoa_r+0x736>
 800d9f6:	9a07      	ldr	r2, [sp, #28]
 800d9f8:	e767      	b.n	800d8ca <_dtoa_r+0x792>
 800d9fa:	9b06      	ldr	r3, [sp, #24]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	dc18      	bgt.n	800da32 <_dtoa_r+0x8fa>
 800da00:	f1ba 0f00 	cmp.w	sl, #0
 800da04:	d115      	bne.n	800da32 <_dtoa_r+0x8fa>
 800da06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da0a:	b993      	cbnz	r3, 800da32 <_dtoa_r+0x8fa>
 800da0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da10:	0d1b      	lsrs	r3, r3, #20
 800da12:	051b      	lsls	r3, r3, #20
 800da14:	b183      	cbz	r3, 800da38 <_dtoa_r+0x900>
 800da16:	9b04      	ldr	r3, [sp, #16]
 800da18:	3301      	adds	r3, #1
 800da1a:	9304      	str	r3, [sp, #16]
 800da1c:	9b05      	ldr	r3, [sp, #20]
 800da1e:	3301      	adds	r3, #1
 800da20:	9305      	str	r3, [sp, #20]
 800da22:	f04f 0801 	mov.w	r8, #1
 800da26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f47f af6a 	bne.w	800d902 <_dtoa_r+0x7ca>
 800da2e:	2001      	movs	r0, #1
 800da30:	e76f      	b.n	800d912 <_dtoa_r+0x7da>
 800da32:	f04f 0800 	mov.w	r8, #0
 800da36:	e7f6      	b.n	800da26 <_dtoa_r+0x8ee>
 800da38:	4698      	mov	r8, r3
 800da3a:	e7f4      	b.n	800da26 <_dtoa_r+0x8ee>
 800da3c:	f43f af7d 	beq.w	800d93a <_dtoa_r+0x802>
 800da40:	4618      	mov	r0, r3
 800da42:	301c      	adds	r0, #28
 800da44:	e772      	b.n	800d92c <_dtoa_r+0x7f4>
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	dc37      	bgt.n	800dabc <_dtoa_r+0x984>
 800da4c:	9b06      	ldr	r3, [sp, #24]
 800da4e:	2b02      	cmp	r3, #2
 800da50:	dd34      	ble.n	800dabc <_dtoa_r+0x984>
 800da52:	9b03      	ldr	r3, [sp, #12]
 800da54:	9302      	str	r3, [sp, #8]
 800da56:	9b02      	ldr	r3, [sp, #8]
 800da58:	b96b      	cbnz	r3, 800da76 <_dtoa_r+0x93e>
 800da5a:	4631      	mov	r1, r6
 800da5c:	2205      	movs	r2, #5
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 fdb0 	bl	800e5c4 <__multadd>
 800da64:	4601      	mov	r1, r0
 800da66:	4606      	mov	r6, r0
 800da68:	ee18 0a10 	vmov	r0, s16
 800da6c:	f001 f814 	bl	800ea98 <__mcmp>
 800da70:	2800      	cmp	r0, #0
 800da72:	f73f adbb 	bgt.w	800d5ec <_dtoa_r+0x4b4>
 800da76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da78:	9d01      	ldr	r5, [sp, #4]
 800da7a:	43db      	mvns	r3, r3
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	f04f 0800 	mov.w	r8, #0
 800da82:	4631      	mov	r1, r6
 800da84:	4620      	mov	r0, r4
 800da86:	f000 fd7b 	bl	800e580 <_Bfree>
 800da8a:	2f00      	cmp	r7, #0
 800da8c:	f43f aea4 	beq.w	800d7d8 <_dtoa_r+0x6a0>
 800da90:	f1b8 0f00 	cmp.w	r8, #0
 800da94:	d005      	beq.n	800daa2 <_dtoa_r+0x96a>
 800da96:	45b8      	cmp	r8, r7
 800da98:	d003      	beq.n	800daa2 <_dtoa_r+0x96a>
 800da9a:	4641      	mov	r1, r8
 800da9c:	4620      	mov	r0, r4
 800da9e:	f000 fd6f 	bl	800e580 <_Bfree>
 800daa2:	4639      	mov	r1, r7
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 fd6b 	bl	800e580 <_Bfree>
 800daaa:	e695      	b.n	800d7d8 <_dtoa_r+0x6a0>
 800daac:	2600      	movs	r6, #0
 800daae:	4637      	mov	r7, r6
 800dab0:	e7e1      	b.n	800da76 <_dtoa_r+0x93e>
 800dab2:	9700      	str	r7, [sp, #0]
 800dab4:	4637      	mov	r7, r6
 800dab6:	e599      	b.n	800d5ec <_dtoa_r+0x4b4>
 800dab8:	40240000 	.word	0x40240000
 800dabc:	9b08      	ldr	r3, [sp, #32]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 80ca 	beq.w	800dc58 <_dtoa_r+0xb20>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	9302      	str	r3, [sp, #8]
 800dac8:	2d00      	cmp	r5, #0
 800daca:	dd05      	ble.n	800dad8 <_dtoa_r+0x9a0>
 800dacc:	4639      	mov	r1, r7
 800dace:	462a      	mov	r2, r5
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 ff71 	bl	800e9b8 <__lshift>
 800dad6:	4607      	mov	r7, r0
 800dad8:	f1b8 0f00 	cmp.w	r8, #0
 800dadc:	d05b      	beq.n	800db96 <_dtoa_r+0xa5e>
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 fd0d 	bl	800e500 <_Balloc>
 800dae6:	4605      	mov	r5, r0
 800dae8:	b928      	cbnz	r0, 800daf6 <_dtoa_r+0x9be>
 800daea:	4b87      	ldr	r3, [pc, #540]	; (800dd08 <_dtoa_r+0xbd0>)
 800daec:	4602      	mov	r2, r0
 800daee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800daf2:	f7ff bb3b 	b.w	800d16c <_dtoa_r+0x34>
 800daf6:	693a      	ldr	r2, [r7, #16]
 800daf8:	3202      	adds	r2, #2
 800dafa:	0092      	lsls	r2, r2, #2
 800dafc:	f107 010c 	add.w	r1, r7, #12
 800db00:	300c      	adds	r0, #12
 800db02:	f7fc ff2d 	bl	800a960 <memcpy>
 800db06:	2201      	movs	r2, #1
 800db08:	4629      	mov	r1, r5
 800db0a:	4620      	mov	r0, r4
 800db0c:	f000 ff54 	bl	800e9b8 <__lshift>
 800db10:	9b01      	ldr	r3, [sp, #4]
 800db12:	f103 0901 	add.w	r9, r3, #1
 800db16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db1a:	4413      	add	r3, r2
 800db1c:	9305      	str	r3, [sp, #20]
 800db1e:	f00a 0301 	and.w	r3, sl, #1
 800db22:	46b8      	mov	r8, r7
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	4607      	mov	r7, r0
 800db28:	4631      	mov	r1, r6
 800db2a:	ee18 0a10 	vmov	r0, s16
 800db2e:	f7ff fa77 	bl	800d020 <quorem>
 800db32:	4641      	mov	r1, r8
 800db34:	9002      	str	r0, [sp, #8]
 800db36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db3a:	ee18 0a10 	vmov	r0, s16
 800db3e:	f000 ffab 	bl	800ea98 <__mcmp>
 800db42:	463a      	mov	r2, r7
 800db44:	9003      	str	r0, [sp, #12]
 800db46:	4631      	mov	r1, r6
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 ffc1 	bl	800ead0 <__mdiff>
 800db4e:	68c2      	ldr	r2, [r0, #12]
 800db50:	f109 3bff 	add.w	fp, r9, #4294967295
 800db54:	4605      	mov	r5, r0
 800db56:	bb02      	cbnz	r2, 800db9a <_dtoa_r+0xa62>
 800db58:	4601      	mov	r1, r0
 800db5a:	ee18 0a10 	vmov	r0, s16
 800db5e:	f000 ff9b 	bl	800ea98 <__mcmp>
 800db62:	4602      	mov	r2, r0
 800db64:	4629      	mov	r1, r5
 800db66:	4620      	mov	r0, r4
 800db68:	9207      	str	r2, [sp, #28]
 800db6a:	f000 fd09 	bl	800e580 <_Bfree>
 800db6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800db72:	ea43 0102 	orr.w	r1, r3, r2
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	430b      	orrs	r3, r1
 800db7a:	464d      	mov	r5, r9
 800db7c:	d10f      	bne.n	800db9e <_dtoa_r+0xa66>
 800db7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db82:	d02a      	beq.n	800dbda <_dtoa_r+0xaa2>
 800db84:	9b03      	ldr	r3, [sp, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	dd02      	ble.n	800db90 <_dtoa_r+0xa58>
 800db8a:	9b02      	ldr	r3, [sp, #8]
 800db8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800db90:	f88b a000 	strb.w	sl, [fp]
 800db94:	e775      	b.n	800da82 <_dtoa_r+0x94a>
 800db96:	4638      	mov	r0, r7
 800db98:	e7ba      	b.n	800db10 <_dtoa_r+0x9d8>
 800db9a:	2201      	movs	r2, #1
 800db9c:	e7e2      	b.n	800db64 <_dtoa_r+0xa2c>
 800db9e:	9b03      	ldr	r3, [sp, #12]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	db04      	blt.n	800dbae <_dtoa_r+0xa76>
 800dba4:	9906      	ldr	r1, [sp, #24]
 800dba6:	430b      	orrs	r3, r1
 800dba8:	9904      	ldr	r1, [sp, #16]
 800dbaa:	430b      	orrs	r3, r1
 800dbac:	d122      	bne.n	800dbf4 <_dtoa_r+0xabc>
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	ddee      	ble.n	800db90 <_dtoa_r+0xa58>
 800dbb2:	ee18 1a10 	vmov	r1, s16
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fefd 	bl	800e9b8 <__lshift>
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	ee08 0a10 	vmov	s16, r0
 800dbc4:	f000 ff68 	bl	800ea98 <__mcmp>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	dc03      	bgt.n	800dbd4 <_dtoa_r+0xa9c>
 800dbcc:	d1e0      	bne.n	800db90 <_dtoa_r+0xa58>
 800dbce:	f01a 0f01 	tst.w	sl, #1
 800dbd2:	d0dd      	beq.n	800db90 <_dtoa_r+0xa58>
 800dbd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbd8:	d1d7      	bne.n	800db8a <_dtoa_r+0xa52>
 800dbda:	2339      	movs	r3, #57	; 0x39
 800dbdc:	f88b 3000 	strb.w	r3, [fp]
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	461d      	mov	r5, r3
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dbea:	2a39      	cmp	r2, #57	; 0x39
 800dbec:	d071      	beq.n	800dcd2 <_dtoa_r+0xb9a>
 800dbee:	3201      	adds	r2, #1
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	e746      	b.n	800da82 <_dtoa_r+0x94a>
 800dbf4:	2a00      	cmp	r2, #0
 800dbf6:	dd07      	ble.n	800dc08 <_dtoa_r+0xad0>
 800dbf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbfc:	d0ed      	beq.n	800dbda <_dtoa_r+0xaa2>
 800dbfe:	f10a 0301 	add.w	r3, sl, #1
 800dc02:	f88b 3000 	strb.w	r3, [fp]
 800dc06:	e73c      	b.n	800da82 <_dtoa_r+0x94a>
 800dc08:	9b05      	ldr	r3, [sp, #20]
 800dc0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc0e:	4599      	cmp	r9, r3
 800dc10:	d047      	beq.n	800dca2 <_dtoa_r+0xb6a>
 800dc12:	ee18 1a10 	vmov	r1, s16
 800dc16:	2300      	movs	r3, #0
 800dc18:	220a      	movs	r2, #10
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 fcd2 	bl	800e5c4 <__multadd>
 800dc20:	45b8      	cmp	r8, r7
 800dc22:	ee08 0a10 	vmov	s16, r0
 800dc26:	f04f 0300 	mov.w	r3, #0
 800dc2a:	f04f 020a 	mov.w	r2, #10
 800dc2e:	4641      	mov	r1, r8
 800dc30:	4620      	mov	r0, r4
 800dc32:	d106      	bne.n	800dc42 <_dtoa_r+0xb0a>
 800dc34:	f000 fcc6 	bl	800e5c4 <__multadd>
 800dc38:	4680      	mov	r8, r0
 800dc3a:	4607      	mov	r7, r0
 800dc3c:	f109 0901 	add.w	r9, r9, #1
 800dc40:	e772      	b.n	800db28 <_dtoa_r+0x9f0>
 800dc42:	f000 fcbf 	bl	800e5c4 <__multadd>
 800dc46:	4639      	mov	r1, r7
 800dc48:	4680      	mov	r8, r0
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	220a      	movs	r2, #10
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 fcb8 	bl	800e5c4 <__multadd>
 800dc54:	4607      	mov	r7, r0
 800dc56:	e7f1      	b.n	800dc3c <_dtoa_r+0xb04>
 800dc58:	9b03      	ldr	r3, [sp, #12]
 800dc5a:	9302      	str	r3, [sp, #8]
 800dc5c:	9d01      	ldr	r5, [sp, #4]
 800dc5e:	ee18 0a10 	vmov	r0, s16
 800dc62:	4631      	mov	r1, r6
 800dc64:	f7ff f9dc 	bl	800d020 <quorem>
 800dc68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc6c:	9b01      	ldr	r3, [sp, #4]
 800dc6e:	f805 ab01 	strb.w	sl, [r5], #1
 800dc72:	1aea      	subs	r2, r5, r3
 800dc74:	9b02      	ldr	r3, [sp, #8]
 800dc76:	4293      	cmp	r3, r2
 800dc78:	dd09      	ble.n	800dc8e <_dtoa_r+0xb56>
 800dc7a:	ee18 1a10 	vmov	r1, s16
 800dc7e:	2300      	movs	r3, #0
 800dc80:	220a      	movs	r2, #10
 800dc82:	4620      	mov	r0, r4
 800dc84:	f000 fc9e 	bl	800e5c4 <__multadd>
 800dc88:	ee08 0a10 	vmov	s16, r0
 800dc8c:	e7e7      	b.n	800dc5e <_dtoa_r+0xb26>
 800dc8e:	9b02      	ldr	r3, [sp, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	bfc8      	it	gt
 800dc94:	461d      	movgt	r5, r3
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	bfd8      	it	le
 800dc9a:	2501      	movle	r5, #1
 800dc9c:	441d      	add	r5, r3
 800dc9e:	f04f 0800 	mov.w	r8, #0
 800dca2:	ee18 1a10 	vmov	r1, s16
 800dca6:	2201      	movs	r2, #1
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fe85 	bl	800e9b8 <__lshift>
 800dcae:	4631      	mov	r1, r6
 800dcb0:	ee08 0a10 	vmov	s16, r0
 800dcb4:	f000 fef0 	bl	800ea98 <__mcmp>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	dc91      	bgt.n	800dbe0 <_dtoa_r+0xaa8>
 800dcbc:	d102      	bne.n	800dcc4 <_dtoa_r+0xb8c>
 800dcbe:	f01a 0f01 	tst.w	sl, #1
 800dcc2:	d18d      	bne.n	800dbe0 <_dtoa_r+0xaa8>
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	461d      	mov	r5, r3
 800dcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dccc:	2a30      	cmp	r2, #48	; 0x30
 800dcce:	d0fa      	beq.n	800dcc6 <_dtoa_r+0xb8e>
 800dcd0:	e6d7      	b.n	800da82 <_dtoa_r+0x94a>
 800dcd2:	9a01      	ldr	r2, [sp, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d184      	bne.n	800dbe2 <_dtoa_r+0xaaa>
 800dcd8:	9b00      	ldr	r3, [sp, #0]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	2331      	movs	r3, #49	; 0x31
 800dce0:	7013      	strb	r3, [r2, #0]
 800dce2:	e6ce      	b.n	800da82 <_dtoa_r+0x94a>
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <_dtoa_r+0xbd4>)
 800dce6:	f7ff ba95 	b.w	800d214 <_dtoa_r+0xdc>
 800dcea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f47f aa6e 	bne.w	800d1ce <_dtoa_r+0x96>
 800dcf2:	4b07      	ldr	r3, [pc, #28]	; (800dd10 <_dtoa_r+0xbd8>)
 800dcf4:	f7ff ba8e 	b.w	800d214 <_dtoa_r+0xdc>
 800dcf8:	9b02      	ldr	r3, [sp, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dcae      	bgt.n	800dc5c <_dtoa_r+0xb24>
 800dcfe:	9b06      	ldr	r3, [sp, #24]
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	f73f aea8 	bgt.w	800da56 <_dtoa_r+0x91e>
 800dd06:	e7a9      	b.n	800dc5c <_dtoa_r+0xb24>
 800dd08:	08010a2c 	.word	0x08010a2c
 800dd0c:	08010c89 	.word	0x08010c89
 800dd10:	080109ad 	.word	0x080109ad

0800dd14 <rshift>:
 800dd14:	6903      	ldr	r3, [r0, #16]
 800dd16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd22:	f100 0414 	add.w	r4, r0, #20
 800dd26:	dd45      	ble.n	800ddb4 <rshift+0xa0>
 800dd28:	f011 011f 	ands.w	r1, r1, #31
 800dd2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd34:	d10c      	bne.n	800dd50 <rshift+0x3c>
 800dd36:	f100 0710 	add.w	r7, r0, #16
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	42b1      	cmp	r1, r6
 800dd3e:	d334      	bcc.n	800ddaa <rshift+0x96>
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	1eea      	subs	r2, r5, #3
 800dd46:	4296      	cmp	r6, r2
 800dd48:	bf38      	it	cc
 800dd4a:	2300      	movcc	r3, #0
 800dd4c:	4423      	add	r3, r4
 800dd4e:	e015      	b.n	800dd7c <rshift+0x68>
 800dd50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd54:	f1c1 0820 	rsb	r8, r1, #32
 800dd58:	40cf      	lsrs	r7, r1
 800dd5a:	f105 0e04 	add.w	lr, r5, #4
 800dd5e:	46a1      	mov	r9, r4
 800dd60:	4576      	cmp	r6, lr
 800dd62:	46f4      	mov	ip, lr
 800dd64:	d815      	bhi.n	800dd92 <rshift+0x7e>
 800dd66:	1a9a      	subs	r2, r3, r2
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	3a04      	subs	r2, #4
 800dd6c:	3501      	adds	r5, #1
 800dd6e:	42ae      	cmp	r6, r5
 800dd70:	bf38      	it	cc
 800dd72:	2200      	movcc	r2, #0
 800dd74:	18a3      	adds	r3, r4, r2
 800dd76:	50a7      	str	r7, [r4, r2]
 800dd78:	b107      	cbz	r7, 800dd7c <rshift+0x68>
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	1b1a      	subs	r2, r3, r4
 800dd7e:	42a3      	cmp	r3, r4
 800dd80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd84:	bf08      	it	eq
 800dd86:	2300      	moveq	r3, #0
 800dd88:	6102      	str	r2, [r0, #16]
 800dd8a:	bf08      	it	eq
 800dd8c:	6143      	streq	r3, [r0, #20]
 800dd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd92:	f8dc c000 	ldr.w	ip, [ip]
 800dd96:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd9a:	ea4c 0707 	orr.w	r7, ip, r7
 800dd9e:	f849 7b04 	str.w	r7, [r9], #4
 800dda2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dda6:	40cf      	lsrs	r7, r1
 800dda8:	e7da      	b.n	800dd60 <rshift+0x4c>
 800ddaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddae:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddb2:	e7c3      	b.n	800dd3c <rshift+0x28>
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	e7e1      	b.n	800dd7c <rshift+0x68>

0800ddb8 <__hexdig_fun>:
 800ddb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ddbc:	2b09      	cmp	r3, #9
 800ddbe:	d802      	bhi.n	800ddc6 <__hexdig_fun+0xe>
 800ddc0:	3820      	subs	r0, #32
 800ddc2:	b2c0      	uxtb	r0, r0
 800ddc4:	4770      	bx	lr
 800ddc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ddca:	2b05      	cmp	r3, #5
 800ddcc:	d801      	bhi.n	800ddd2 <__hexdig_fun+0x1a>
 800ddce:	3847      	subs	r0, #71	; 0x47
 800ddd0:	e7f7      	b.n	800ddc2 <__hexdig_fun+0xa>
 800ddd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	d801      	bhi.n	800ddde <__hexdig_fun+0x26>
 800ddda:	3827      	subs	r0, #39	; 0x27
 800dddc:	e7f1      	b.n	800ddc2 <__hexdig_fun+0xa>
 800ddde:	2000      	movs	r0, #0
 800dde0:	4770      	bx	lr
	...

0800dde4 <__gethex>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	ed2d 8b02 	vpush	{d8}
 800ddec:	b089      	sub	sp, #36	; 0x24
 800ddee:	ee08 0a10 	vmov	s16, r0
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	4bb4      	ldr	r3, [pc, #720]	; (800e0c8 <__gethex+0x2e4>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	468b      	mov	fp, r1
 800ddfe:	4690      	mov	r8, r2
 800de00:	f7f2 f9f0 	bl	80001e4 <strlen>
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	f8db 2000 	ldr.w	r2, [fp]
 800de0a:	4403      	add	r3, r0
 800de0c:	4682      	mov	sl, r0
 800de0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de12:	9305      	str	r3, [sp, #20]
 800de14:	1c93      	adds	r3, r2, #2
 800de16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de1e:	32fe      	adds	r2, #254	; 0xfe
 800de20:	18d1      	adds	r1, r2, r3
 800de22:	461f      	mov	r7, r3
 800de24:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de28:	9100      	str	r1, [sp, #0]
 800de2a:	2830      	cmp	r0, #48	; 0x30
 800de2c:	d0f8      	beq.n	800de20 <__gethex+0x3c>
 800de2e:	f7ff ffc3 	bl	800ddb8 <__hexdig_fun>
 800de32:	4604      	mov	r4, r0
 800de34:	2800      	cmp	r0, #0
 800de36:	d13a      	bne.n	800deae <__gethex+0xca>
 800de38:	9901      	ldr	r1, [sp, #4]
 800de3a:	4652      	mov	r2, sl
 800de3c:	4638      	mov	r0, r7
 800de3e:	f001 fdfb 	bl	800fa38 <strncmp>
 800de42:	4605      	mov	r5, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	d168      	bne.n	800df1a <__gethex+0x136>
 800de48:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de4c:	eb07 060a 	add.w	r6, r7, sl
 800de50:	f7ff ffb2 	bl	800ddb8 <__hexdig_fun>
 800de54:	2800      	cmp	r0, #0
 800de56:	d062      	beq.n	800df1e <__gethex+0x13a>
 800de58:	4633      	mov	r3, r6
 800de5a:	7818      	ldrb	r0, [r3, #0]
 800de5c:	2830      	cmp	r0, #48	; 0x30
 800de5e:	461f      	mov	r7, r3
 800de60:	f103 0301 	add.w	r3, r3, #1
 800de64:	d0f9      	beq.n	800de5a <__gethex+0x76>
 800de66:	f7ff ffa7 	bl	800ddb8 <__hexdig_fun>
 800de6a:	2301      	movs	r3, #1
 800de6c:	fab0 f480 	clz	r4, r0
 800de70:	0964      	lsrs	r4, r4, #5
 800de72:	4635      	mov	r5, r6
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	463a      	mov	r2, r7
 800de78:	4616      	mov	r6, r2
 800de7a:	3201      	adds	r2, #1
 800de7c:	7830      	ldrb	r0, [r6, #0]
 800de7e:	f7ff ff9b 	bl	800ddb8 <__hexdig_fun>
 800de82:	2800      	cmp	r0, #0
 800de84:	d1f8      	bne.n	800de78 <__gethex+0x94>
 800de86:	9901      	ldr	r1, [sp, #4]
 800de88:	4652      	mov	r2, sl
 800de8a:	4630      	mov	r0, r6
 800de8c:	f001 fdd4 	bl	800fa38 <strncmp>
 800de90:	b980      	cbnz	r0, 800deb4 <__gethex+0xd0>
 800de92:	b94d      	cbnz	r5, 800dea8 <__gethex+0xc4>
 800de94:	eb06 050a 	add.w	r5, r6, sl
 800de98:	462a      	mov	r2, r5
 800de9a:	4616      	mov	r6, r2
 800de9c:	3201      	adds	r2, #1
 800de9e:	7830      	ldrb	r0, [r6, #0]
 800dea0:	f7ff ff8a 	bl	800ddb8 <__hexdig_fun>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1f8      	bne.n	800de9a <__gethex+0xb6>
 800dea8:	1bad      	subs	r5, r5, r6
 800deaa:	00ad      	lsls	r5, r5, #2
 800deac:	e004      	b.n	800deb8 <__gethex+0xd4>
 800deae:	2400      	movs	r4, #0
 800deb0:	4625      	mov	r5, r4
 800deb2:	e7e0      	b.n	800de76 <__gethex+0x92>
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	d1f7      	bne.n	800dea8 <__gethex+0xc4>
 800deb8:	7833      	ldrb	r3, [r6, #0]
 800deba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800debe:	2b50      	cmp	r3, #80	; 0x50
 800dec0:	d13b      	bne.n	800df3a <__gethex+0x156>
 800dec2:	7873      	ldrb	r3, [r6, #1]
 800dec4:	2b2b      	cmp	r3, #43	; 0x2b
 800dec6:	d02c      	beq.n	800df22 <__gethex+0x13e>
 800dec8:	2b2d      	cmp	r3, #45	; 0x2d
 800deca:	d02e      	beq.n	800df2a <__gethex+0x146>
 800decc:	1c71      	adds	r1, r6, #1
 800dece:	f04f 0900 	mov.w	r9, #0
 800ded2:	7808      	ldrb	r0, [r1, #0]
 800ded4:	f7ff ff70 	bl	800ddb8 <__hexdig_fun>
 800ded8:	1e43      	subs	r3, r0, #1
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b18      	cmp	r3, #24
 800dede:	d82c      	bhi.n	800df3a <__gethex+0x156>
 800dee0:	f1a0 0210 	sub.w	r2, r0, #16
 800dee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dee8:	f7ff ff66 	bl	800ddb8 <__hexdig_fun>
 800deec:	1e43      	subs	r3, r0, #1
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b18      	cmp	r3, #24
 800def2:	d91d      	bls.n	800df30 <__gethex+0x14c>
 800def4:	f1b9 0f00 	cmp.w	r9, #0
 800def8:	d000      	beq.n	800defc <__gethex+0x118>
 800defa:	4252      	negs	r2, r2
 800defc:	4415      	add	r5, r2
 800defe:	f8cb 1000 	str.w	r1, [fp]
 800df02:	b1e4      	cbz	r4, 800df3e <__gethex+0x15a>
 800df04:	9b00      	ldr	r3, [sp, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	bf14      	ite	ne
 800df0a:	2700      	movne	r7, #0
 800df0c:	2706      	moveq	r7, #6
 800df0e:	4638      	mov	r0, r7
 800df10:	b009      	add	sp, #36	; 0x24
 800df12:	ecbd 8b02 	vpop	{d8}
 800df16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1a:	463e      	mov	r6, r7
 800df1c:	4625      	mov	r5, r4
 800df1e:	2401      	movs	r4, #1
 800df20:	e7ca      	b.n	800deb8 <__gethex+0xd4>
 800df22:	f04f 0900 	mov.w	r9, #0
 800df26:	1cb1      	adds	r1, r6, #2
 800df28:	e7d3      	b.n	800ded2 <__gethex+0xee>
 800df2a:	f04f 0901 	mov.w	r9, #1
 800df2e:	e7fa      	b.n	800df26 <__gethex+0x142>
 800df30:	230a      	movs	r3, #10
 800df32:	fb03 0202 	mla	r2, r3, r2, r0
 800df36:	3a10      	subs	r2, #16
 800df38:	e7d4      	b.n	800dee4 <__gethex+0x100>
 800df3a:	4631      	mov	r1, r6
 800df3c:	e7df      	b.n	800defe <__gethex+0x11a>
 800df3e:	1bf3      	subs	r3, r6, r7
 800df40:	3b01      	subs	r3, #1
 800df42:	4621      	mov	r1, r4
 800df44:	2b07      	cmp	r3, #7
 800df46:	dc0b      	bgt.n	800df60 <__gethex+0x17c>
 800df48:	ee18 0a10 	vmov	r0, s16
 800df4c:	f000 fad8 	bl	800e500 <_Balloc>
 800df50:	4604      	mov	r4, r0
 800df52:	b940      	cbnz	r0, 800df66 <__gethex+0x182>
 800df54:	4b5d      	ldr	r3, [pc, #372]	; (800e0cc <__gethex+0x2e8>)
 800df56:	4602      	mov	r2, r0
 800df58:	21de      	movs	r1, #222	; 0xde
 800df5a:	485d      	ldr	r0, [pc, #372]	; (800e0d0 <__gethex+0x2ec>)
 800df5c:	f001 fdc8 	bl	800faf0 <__assert_func>
 800df60:	3101      	adds	r1, #1
 800df62:	105b      	asrs	r3, r3, #1
 800df64:	e7ee      	b.n	800df44 <__gethex+0x160>
 800df66:	f100 0914 	add.w	r9, r0, #20
 800df6a:	f04f 0b00 	mov.w	fp, #0
 800df6e:	f1ca 0301 	rsb	r3, sl, #1
 800df72:	f8cd 9008 	str.w	r9, [sp, #8]
 800df76:	f8cd b000 	str.w	fp, [sp]
 800df7a:	9306      	str	r3, [sp, #24]
 800df7c:	42b7      	cmp	r7, r6
 800df7e:	d340      	bcc.n	800e002 <__gethex+0x21e>
 800df80:	9802      	ldr	r0, [sp, #8]
 800df82:	9b00      	ldr	r3, [sp, #0]
 800df84:	f840 3b04 	str.w	r3, [r0], #4
 800df88:	eba0 0009 	sub.w	r0, r0, r9
 800df8c:	1080      	asrs	r0, r0, #2
 800df8e:	0146      	lsls	r6, r0, #5
 800df90:	6120      	str	r0, [r4, #16]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fba6 	bl	800e6e4 <__hi0bits>
 800df98:	1a30      	subs	r0, r6, r0
 800df9a:	f8d8 6000 	ldr.w	r6, [r8]
 800df9e:	42b0      	cmp	r0, r6
 800dfa0:	dd63      	ble.n	800e06a <__gethex+0x286>
 800dfa2:	1b87      	subs	r7, r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 ff4a 	bl	800ee40 <__any_on>
 800dfac:	4682      	mov	sl, r0
 800dfae:	b1a8      	cbz	r0, 800dfdc <__gethex+0x1f8>
 800dfb0:	1e7b      	subs	r3, r7, #1
 800dfb2:	1159      	asrs	r1, r3, #5
 800dfb4:	f003 021f 	and.w	r2, r3, #31
 800dfb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dfbc:	f04f 0a01 	mov.w	sl, #1
 800dfc0:	fa0a f202 	lsl.w	r2, sl, r2
 800dfc4:	420a      	tst	r2, r1
 800dfc6:	d009      	beq.n	800dfdc <__gethex+0x1f8>
 800dfc8:	4553      	cmp	r3, sl
 800dfca:	dd05      	ble.n	800dfd8 <__gethex+0x1f4>
 800dfcc:	1eb9      	subs	r1, r7, #2
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 ff36 	bl	800ee40 <__any_on>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d145      	bne.n	800e064 <__gethex+0x280>
 800dfd8:	f04f 0a02 	mov.w	sl, #2
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7ff fe98 	bl	800dd14 <rshift>
 800dfe4:	443d      	add	r5, r7
 800dfe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfea:	42ab      	cmp	r3, r5
 800dfec:	da4c      	bge.n	800e088 <__gethex+0x2a4>
 800dfee:	ee18 0a10 	vmov	r0, s16
 800dff2:	4621      	mov	r1, r4
 800dff4:	f000 fac4 	bl	800e580 <_Bfree>
 800dff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dffa:	2300      	movs	r3, #0
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	27a3      	movs	r7, #163	; 0xa3
 800e000:	e785      	b.n	800df0e <__gethex+0x12a>
 800e002:	1e73      	subs	r3, r6, #1
 800e004:	9a05      	ldr	r2, [sp, #20]
 800e006:	9303      	str	r3, [sp, #12]
 800e008:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d019      	beq.n	800e044 <__gethex+0x260>
 800e010:	f1bb 0f20 	cmp.w	fp, #32
 800e014:	d107      	bne.n	800e026 <__gethex+0x242>
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	9a00      	ldr	r2, [sp, #0]
 800e01a:	f843 2b04 	str.w	r2, [r3], #4
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	2300      	movs	r3, #0
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	469b      	mov	fp, r3
 800e026:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e02a:	f7ff fec5 	bl	800ddb8 <__hexdig_fun>
 800e02e:	9b00      	ldr	r3, [sp, #0]
 800e030:	f000 000f 	and.w	r0, r0, #15
 800e034:	fa00 f00b 	lsl.w	r0, r0, fp
 800e038:	4303      	orrs	r3, r0
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	f10b 0b04 	add.w	fp, fp, #4
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	e00d      	b.n	800e060 <__gethex+0x27c>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	9a06      	ldr	r2, [sp, #24]
 800e048:	4413      	add	r3, r2
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	d3e0      	bcc.n	800e010 <__gethex+0x22c>
 800e04e:	4618      	mov	r0, r3
 800e050:	9901      	ldr	r1, [sp, #4]
 800e052:	9307      	str	r3, [sp, #28]
 800e054:	4652      	mov	r2, sl
 800e056:	f001 fcef 	bl	800fa38 <strncmp>
 800e05a:	9b07      	ldr	r3, [sp, #28]
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d1d7      	bne.n	800e010 <__gethex+0x22c>
 800e060:	461e      	mov	r6, r3
 800e062:	e78b      	b.n	800df7c <__gethex+0x198>
 800e064:	f04f 0a03 	mov.w	sl, #3
 800e068:	e7b8      	b.n	800dfdc <__gethex+0x1f8>
 800e06a:	da0a      	bge.n	800e082 <__gethex+0x29e>
 800e06c:	1a37      	subs	r7, r6, r0
 800e06e:	4621      	mov	r1, r4
 800e070:	ee18 0a10 	vmov	r0, s16
 800e074:	463a      	mov	r2, r7
 800e076:	f000 fc9f 	bl	800e9b8 <__lshift>
 800e07a:	1bed      	subs	r5, r5, r7
 800e07c:	4604      	mov	r4, r0
 800e07e:	f100 0914 	add.w	r9, r0, #20
 800e082:	f04f 0a00 	mov.w	sl, #0
 800e086:	e7ae      	b.n	800dfe6 <__gethex+0x202>
 800e088:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e08c:	42a8      	cmp	r0, r5
 800e08e:	dd72      	ble.n	800e176 <__gethex+0x392>
 800e090:	1b45      	subs	r5, r0, r5
 800e092:	42ae      	cmp	r6, r5
 800e094:	dc36      	bgt.n	800e104 <__gethex+0x320>
 800e096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d02a      	beq.n	800e0f4 <__gethex+0x310>
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d02c      	beq.n	800e0fc <__gethex+0x318>
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d11c      	bne.n	800e0e0 <__gethex+0x2fc>
 800e0a6:	42ae      	cmp	r6, r5
 800e0a8:	d11a      	bne.n	800e0e0 <__gethex+0x2fc>
 800e0aa:	2e01      	cmp	r6, #1
 800e0ac:	d112      	bne.n	800e0d4 <__gethex+0x2f0>
 800e0ae:	9a04      	ldr	r2, [sp, #16]
 800e0b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0b4:	6013      	str	r3, [r2, #0]
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	6123      	str	r3, [r4, #16]
 800e0ba:	f8c9 3000 	str.w	r3, [r9]
 800e0be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0c0:	2762      	movs	r7, #98	; 0x62
 800e0c2:	601c      	str	r4, [r3, #0]
 800e0c4:	e723      	b.n	800df0e <__gethex+0x12a>
 800e0c6:	bf00      	nop
 800e0c8:	08010aa4 	.word	0x08010aa4
 800e0cc:	08010a2c 	.word	0x08010a2c
 800e0d0:	08010a3d 	.word	0x08010a3d
 800e0d4:	1e71      	subs	r1, r6, #1
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 feb2 	bl	800ee40 <__any_on>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d1e6      	bne.n	800e0ae <__gethex+0x2ca>
 800e0e0:	ee18 0a10 	vmov	r0, s16
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	f000 fa4b 	bl	800e580 <_Bfree>
 800e0ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	6013      	str	r3, [r2, #0]
 800e0f0:	2750      	movs	r7, #80	; 0x50
 800e0f2:	e70c      	b.n	800df0e <__gethex+0x12a>
 800e0f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1f2      	bne.n	800e0e0 <__gethex+0x2fc>
 800e0fa:	e7d8      	b.n	800e0ae <__gethex+0x2ca>
 800e0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1d5      	bne.n	800e0ae <__gethex+0x2ca>
 800e102:	e7ed      	b.n	800e0e0 <__gethex+0x2fc>
 800e104:	1e6f      	subs	r7, r5, #1
 800e106:	f1ba 0f00 	cmp.w	sl, #0
 800e10a:	d131      	bne.n	800e170 <__gethex+0x38c>
 800e10c:	b127      	cbz	r7, 800e118 <__gethex+0x334>
 800e10e:	4639      	mov	r1, r7
 800e110:	4620      	mov	r0, r4
 800e112:	f000 fe95 	bl	800ee40 <__any_on>
 800e116:	4682      	mov	sl, r0
 800e118:	117b      	asrs	r3, r7, #5
 800e11a:	2101      	movs	r1, #1
 800e11c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e120:	f007 071f 	and.w	r7, r7, #31
 800e124:	fa01 f707 	lsl.w	r7, r1, r7
 800e128:	421f      	tst	r7, r3
 800e12a:	4629      	mov	r1, r5
 800e12c:	4620      	mov	r0, r4
 800e12e:	bf18      	it	ne
 800e130:	f04a 0a02 	orrne.w	sl, sl, #2
 800e134:	1b76      	subs	r6, r6, r5
 800e136:	f7ff fded 	bl	800dd14 <rshift>
 800e13a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e13e:	2702      	movs	r7, #2
 800e140:	f1ba 0f00 	cmp.w	sl, #0
 800e144:	d048      	beq.n	800e1d8 <__gethex+0x3f4>
 800e146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d015      	beq.n	800e17a <__gethex+0x396>
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d017      	beq.n	800e182 <__gethex+0x39e>
 800e152:	2b01      	cmp	r3, #1
 800e154:	d109      	bne.n	800e16a <__gethex+0x386>
 800e156:	f01a 0f02 	tst.w	sl, #2
 800e15a:	d006      	beq.n	800e16a <__gethex+0x386>
 800e15c:	f8d9 0000 	ldr.w	r0, [r9]
 800e160:	ea4a 0a00 	orr.w	sl, sl, r0
 800e164:	f01a 0f01 	tst.w	sl, #1
 800e168:	d10e      	bne.n	800e188 <__gethex+0x3a4>
 800e16a:	f047 0710 	orr.w	r7, r7, #16
 800e16e:	e033      	b.n	800e1d8 <__gethex+0x3f4>
 800e170:	f04f 0a01 	mov.w	sl, #1
 800e174:	e7d0      	b.n	800e118 <__gethex+0x334>
 800e176:	2701      	movs	r7, #1
 800e178:	e7e2      	b.n	800e140 <__gethex+0x35c>
 800e17a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e17c:	f1c3 0301 	rsb	r3, r3, #1
 800e180:	9315      	str	r3, [sp, #84]	; 0x54
 800e182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e184:	2b00      	cmp	r3, #0
 800e186:	d0f0      	beq.n	800e16a <__gethex+0x386>
 800e188:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e18c:	f104 0314 	add.w	r3, r4, #20
 800e190:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e194:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e198:	f04f 0c00 	mov.w	ip, #0
 800e19c:	4618      	mov	r0, r3
 800e19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1a6:	d01c      	beq.n	800e1e2 <__gethex+0x3fe>
 800e1a8:	3201      	adds	r2, #1
 800e1aa:	6002      	str	r2, [r0, #0]
 800e1ac:	2f02      	cmp	r7, #2
 800e1ae:	f104 0314 	add.w	r3, r4, #20
 800e1b2:	d13f      	bne.n	800e234 <__gethex+0x450>
 800e1b4:	f8d8 2000 	ldr.w	r2, [r8]
 800e1b8:	3a01      	subs	r2, #1
 800e1ba:	42b2      	cmp	r2, r6
 800e1bc:	d10a      	bne.n	800e1d4 <__gethex+0x3f0>
 800e1be:	1171      	asrs	r1, r6, #5
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1c6:	f006 061f 	and.w	r6, r6, #31
 800e1ca:	fa02 f606 	lsl.w	r6, r2, r6
 800e1ce:	421e      	tst	r6, r3
 800e1d0:	bf18      	it	ne
 800e1d2:	4617      	movne	r7, r2
 800e1d4:	f047 0720 	orr.w	r7, r7, #32
 800e1d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1da:	601c      	str	r4, [r3, #0]
 800e1dc:	9b04      	ldr	r3, [sp, #16]
 800e1de:	601d      	str	r5, [r3, #0]
 800e1e0:	e695      	b.n	800df0e <__gethex+0x12a>
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1e8:	d8d8      	bhi.n	800e19c <__gethex+0x3b8>
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	459b      	cmp	fp, r3
 800e1ee:	db19      	blt.n	800e224 <__gethex+0x440>
 800e1f0:	6861      	ldr	r1, [r4, #4]
 800e1f2:	ee18 0a10 	vmov	r0, s16
 800e1f6:	3101      	adds	r1, #1
 800e1f8:	f000 f982 	bl	800e500 <_Balloc>
 800e1fc:	4681      	mov	r9, r0
 800e1fe:	b918      	cbnz	r0, 800e208 <__gethex+0x424>
 800e200:	4b1a      	ldr	r3, [pc, #104]	; (800e26c <__gethex+0x488>)
 800e202:	4602      	mov	r2, r0
 800e204:	2184      	movs	r1, #132	; 0x84
 800e206:	e6a8      	b.n	800df5a <__gethex+0x176>
 800e208:	6922      	ldr	r2, [r4, #16]
 800e20a:	3202      	adds	r2, #2
 800e20c:	f104 010c 	add.w	r1, r4, #12
 800e210:	0092      	lsls	r2, r2, #2
 800e212:	300c      	adds	r0, #12
 800e214:	f7fc fba4 	bl	800a960 <memcpy>
 800e218:	4621      	mov	r1, r4
 800e21a:	ee18 0a10 	vmov	r0, s16
 800e21e:	f000 f9af 	bl	800e580 <_Bfree>
 800e222:	464c      	mov	r4, r9
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e22c:	6122      	str	r2, [r4, #16]
 800e22e:	2201      	movs	r2, #1
 800e230:	615a      	str	r2, [r3, #20]
 800e232:	e7bb      	b.n	800e1ac <__gethex+0x3c8>
 800e234:	6922      	ldr	r2, [r4, #16]
 800e236:	455a      	cmp	r2, fp
 800e238:	dd0b      	ble.n	800e252 <__gethex+0x46e>
 800e23a:	2101      	movs	r1, #1
 800e23c:	4620      	mov	r0, r4
 800e23e:	f7ff fd69 	bl	800dd14 <rshift>
 800e242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e246:	3501      	adds	r5, #1
 800e248:	42ab      	cmp	r3, r5
 800e24a:	f6ff aed0 	blt.w	800dfee <__gethex+0x20a>
 800e24e:	2701      	movs	r7, #1
 800e250:	e7c0      	b.n	800e1d4 <__gethex+0x3f0>
 800e252:	f016 061f 	ands.w	r6, r6, #31
 800e256:	d0fa      	beq.n	800e24e <__gethex+0x46a>
 800e258:	4453      	add	r3, sl
 800e25a:	f1c6 0620 	rsb	r6, r6, #32
 800e25e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e262:	f000 fa3f 	bl	800e6e4 <__hi0bits>
 800e266:	42b0      	cmp	r0, r6
 800e268:	dbe7      	blt.n	800e23a <__gethex+0x456>
 800e26a:	e7f0      	b.n	800e24e <__gethex+0x46a>
 800e26c:	08010a2c 	.word	0x08010a2c

0800e270 <L_shift>:
 800e270:	f1c2 0208 	rsb	r2, r2, #8
 800e274:	0092      	lsls	r2, r2, #2
 800e276:	b570      	push	{r4, r5, r6, lr}
 800e278:	f1c2 0620 	rsb	r6, r2, #32
 800e27c:	6843      	ldr	r3, [r0, #4]
 800e27e:	6804      	ldr	r4, [r0, #0]
 800e280:	fa03 f506 	lsl.w	r5, r3, r6
 800e284:	432c      	orrs	r4, r5
 800e286:	40d3      	lsrs	r3, r2
 800e288:	6004      	str	r4, [r0, #0]
 800e28a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e28e:	4288      	cmp	r0, r1
 800e290:	d3f4      	bcc.n	800e27c <L_shift+0xc>
 800e292:	bd70      	pop	{r4, r5, r6, pc}

0800e294 <__match>:
 800e294:	b530      	push	{r4, r5, lr}
 800e296:	6803      	ldr	r3, [r0, #0]
 800e298:	3301      	adds	r3, #1
 800e29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e29e:	b914      	cbnz	r4, 800e2a6 <__match+0x12>
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	bd30      	pop	{r4, r5, pc}
 800e2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2ae:	2d19      	cmp	r5, #25
 800e2b0:	bf98      	it	ls
 800e2b2:	3220      	addls	r2, #32
 800e2b4:	42a2      	cmp	r2, r4
 800e2b6:	d0f0      	beq.n	800e29a <__match+0x6>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	e7f3      	b.n	800e2a4 <__match+0x10>

0800e2bc <__hexnan>:
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	680b      	ldr	r3, [r1, #0]
 800e2c2:	115e      	asrs	r6, r3, #5
 800e2c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2c8:	f013 031f 	ands.w	r3, r3, #31
 800e2cc:	b087      	sub	sp, #28
 800e2ce:	bf18      	it	ne
 800e2d0:	3604      	addne	r6, #4
 800e2d2:	2500      	movs	r5, #0
 800e2d4:	1f37      	subs	r7, r6, #4
 800e2d6:	4690      	mov	r8, r2
 800e2d8:	6802      	ldr	r2, [r0, #0]
 800e2da:	9301      	str	r3, [sp, #4]
 800e2dc:	4682      	mov	sl, r0
 800e2de:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2e2:	46b9      	mov	r9, r7
 800e2e4:	463c      	mov	r4, r7
 800e2e6:	9502      	str	r5, [sp, #8]
 800e2e8:	46ab      	mov	fp, r5
 800e2ea:	7851      	ldrb	r1, [r2, #1]
 800e2ec:	1c53      	adds	r3, r2, #1
 800e2ee:	9303      	str	r3, [sp, #12]
 800e2f0:	b341      	cbz	r1, 800e344 <__hexnan+0x88>
 800e2f2:	4608      	mov	r0, r1
 800e2f4:	9205      	str	r2, [sp, #20]
 800e2f6:	9104      	str	r1, [sp, #16]
 800e2f8:	f7ff fd5e 	bl	800ddb8 <__hexdig_fun>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d14f      	bne.n	800e3a0 <__hexnan+0xe4>
 800e300:	9904      	ldr	r1, [sp, #16]
 800e302:	9a05      	ldr	r2, [sp, #20]
 800e304:	2920      	cmp	r1, #32
 800e306:	d818      	bhi.n	800e33a <__hexnan+0x7e>
 800e308:	9b02      	ldr	r3, [sp, #8]
 800e30a:	459b      	cmp	fp, r3
 800e30c:	dd13      	ble.n	800e336 <__hexnan+0x7a>
 800e30e:	454c      	cmp	r4, r9
 800e310:	d206      	bcs.n	800e320 <__hexnan+0x64>
 800e312:	2d07      	cmp	r5, #7
 800e314:	dc04      	bgt.n	800e320 <__hexnan+0x64>
 800e316:	462a      	mov	r2, r5
 800e318:	4649      	mov	r1, r9
 800e31a:	4620      	mov	r0, r4
 800e31c:	f7ff ffa8 	bl	800e270 <L_shift>
 800e320:	4544      	cmp	r4, r8
 800e322:	d950      	bls.n	800e3c6 <__hexnan+0x10a>
 800e324:	2300      	movs	r3, #0
 800e326:	f1a4 0904 	sub.w	r9, r4, #4
 800e32a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e32e:	f8cd b008 	str.w	fp, [sp, #8]
 800e332:	464c      	mov	r4, r9
 800e334:	461d      	mov	r5, r3
 800e336:	9a03      	ldr	r2, [sp, #12]
 800e338:	e7d7      	b.n	800e2ea <__hexnan+0x2e>
 800e33a:	2929      	cmp	r1, #41	; 0x29
 800e33c:	d156      	bne.n	800e3ec <__hexnan+0x130>
 800e33e:	3202      	adds	r2, #2
 800e340:	f8ca 2000 	str.w	r2, [sl]
 800e344:	f1bb 0f00 	cmp.w	fp, #0
 800e348:	d050      	beq.n	800e3ec <__hexnan+0x130>
 800e34a:	454c      	cmp	r4, r9
 800e34c:	d206      	bcs.n	800e35c <__hexnan+0xa0>
 800e34e:	2d07      	cmp	r5, #7
 800e350:	dc04      	bgt.n	800e35c <__hexnan+0xa0>
 800e352:	462a      	mov	r2, r5
 800e354:	4649      	mov	r1, r9
 800e356:	4620      	mov	r0, r4
 800e358:	f7ff ff8a 	bl	800e270 <L_shift>
 800e35c:	4544      	cmp	r4, r8
 800e35e:	d934      	bls.n	800e3ca <__hexnan+0x10e>
 800e360:	f1a8 0204 	sub.w	r2, r8, #4
 800e364:	4623      	mov	r3, r4
 800e366:	f853 1b04 	ldr.w	r1, [r3], #4
 800e36a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e36e:	429f      	cmp	r7, r3
 800e370:	d2f9      	bcs.n	800e366 <__hexnan+0xaa>
 800e372:	1b3b      	subs	r3, r7, r4
 800e374:	f023 0303 	bic.w	r3, r3, #3
 800e378:	3304      	adds	r3, #4
 800e37a:	3401      	adds	r4, #1
 800e37c:	3e03      	subs	r6, #3
 800e37e:	42b4      	cmp	r4, r6
 800e380:	bf88      	it	hi
 800e382:	2304      	movhi	r3, #4
 800e384:	4443      	add	r3, r8
 800e386:	2200      	movs	r2, #0
 800e388:	f843 2b04 	str.w	r2, [r3], #4
 800e38c:	429f      	cmp	r7, r3
 800e38e:	d2fb      	bcs.n	800e388 <__hexnan+0xcc>
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	b91b      	cbnz	r3, 800e39c <__hexnan+0xe0>
 800e394:	4547      	cmp	r7, r8
 800e396:	d127      	bne.n	800e3e8 <__hexnan+0x12c>
 800e398:	2301      	movs	r3, #1
 800e39a:	603b      	str	r3, [r7, #0]
 800e39c:	2005      	movs	r0, #5
 800e39e:	e026      	b.n	800e3ee <__hexnan+0x132>
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	2d08      	cmp	r5, #8
 800e3a4:	f10b 0b01 	add.w	fp, fp, #1
 800e3a8:	dd06      	ble.n	800e3b8 <__hexnan+0xfc>
 800e3aa:	4544      	cmp	r4, r8
 800e3ac:	d9c3      	bls.n	800e336 <__hexnan+0x7a>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3b4:	2501      	movs	r5, #1
 800e3b6:	3c04      	subs	r4, #4
 800e3b8:	6822      	ldr	r2, [r4, #0]
 800e3ba:	f000 000f 	and.w	r0, r0, #15
 800e3be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e3c2:	6022      	str	r2, [r4, #0]
 800e3c4:	e7b7      	b.n	800e336 <__hexnan+0x7a>
 800e3c6:	2508      	movs	r5, #8
 800e3c8:	e7b5      	b.n	800e336 <__hexnan+0x7a>
 800e3ca:	9b01      	ldr	r3, [sp, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d0df      	beq.n	800e390 <__hexnan+0xd4>
 800e3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d4:	f1c3 0320 	rsb	r3, r3, #32
 800e3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3e0:	401a      	ands	r2, r3
 800e3e2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e3e6:	e7d3      	b.n	800e390 <__hexnan+0xd4>
 800e3e8:	3f04      	subs	r7, #4
 800e3ea:	e7d1      	b.n	800e390 <__hexnan+0xd4>
 800e3ec:	2004      	movs	r0, #4
 800e3ee:	b007      	add	sp, #28
 800e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3f4 <_findenv_r>:
 800e3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800e468 <_findenv_r+0x74>
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	4689      	mov	r9, r1
 800e400:	4616      	mov	r6, r2
 800e402:	f001 fb93 	bl	800fb2c <__env_lock>
 800e406:	f8da 4000 	ldr.w	r4, [sl]
 800e40a:	b134      	cbz	r4, 800e41a <_findenv_r+0x26>
 800e40c:	464b      	mov	r3, r9
 800e40e:	4698      	mov	r8, r3
 800e410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e414:	b13a      	cbz	r2, 800e426 <_findenv_r+0x32>
 800e416:	2a3d      	cmp	r2, #61	; 0x3d
 800e418:	d1f9      	bne.n	800e40e <_findenv_r+0x1a>
 800e41a:	4638      	mov	r0, r7
 800e41c:	f001 fb8c 	bl	800fb38 <__env_unlock>
 800e420:	2000      	movs	r0, #0
 800e422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e426:	eba8 0809 	sub.w	r8, r8, r9
 800e42a:	46a3      	mov	fp, r4
 800e42c:	f854 0b04 	ldr.w	r0, [r4], #4
 800e430:	2800      	cmp	r0, #0
 800e432:	d0f2      	beq.n	800e41a <_findenv_r+0x26>
 800e434:	4642      	mov	r2, r8
 800e436:	4649      	mov	r1, r9
 800e438:	f001 fafe 	bl	800fa38 <strncmp>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d1f4      	bne.n	800e42a <_findenv_r+0x36>
 800e440:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e444:	eb03 0508 	add.w	r5, r3, r8
 800e448:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e44c:	2b3d      	cmp	r3, #61	; 0x3d
 800e44e:	d1ec      	bne.n	800e42a <_findenv_r+0x36>
 800e450:	f8da 3000 	ldr.w	r3, [sl]
 800e454:	ebab 0303 	sub.w	r3, fp, r3
 800e458:	109b      	asrs	r3, r3, #2
 800e45a:	4638      	mov	r0, r7
 800e45c:	6033      	str	r3, [r6, #0]
 800e45e:	f001 fb6b 	bl	800fb38 <__env_unlock>
 800e462:	1c68      	adds	r0, r5, #1
 800e464:	e7dd      	b.n	800e422 <_findenv_r+0x2e>
 800e466:	bf00      	nop
 800e468:	2000000c 	.word	0x2000000c

0800e46c <_getenv_r>:
 800e46c:	b507      	push	{r0, r1, r2, lr}
 800e46e:	aa01      	add	r2, sp, #4
 800e470:	f7ff ffc0 	bl	800e3f4 <_findenv_r>
 800e474:	b003      	add	sp, #12
 800e476:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e47c <__gettzinfo>:
 800e47c:	4800      	ldr	r0, [pc, #0]	; (800e480 <__gettzinfo+0x4>)
 800e47e:	4770      	bx	lr
 800e480:	20000090 	.word	0x20000090

0800e484 <_localeconv_r>:
 800e484:	4800      	ldr	r0, [pc, #0]	; (800e488 <_localeconv_r+0x4>)
 800e486:	4770      	bx	lr
 800e488:	200001dc 	.word	0x200001dc

0800e48c <__retarget_lock_init_recursive>:
 800e48c:	4770      	bx	lr

0800e48e <__retarget_lock_acquire>:
 800e48e:	4770      	bx	lr

0800e490 <__retarget_lock_acquire_recursive>:
 800e490:	4770      	bx	lr

0800e492 <__retarget_lock_release>:
 800e492:	4770      	bx	lr

0800e494 <__retarget_lock_release_recursive>:
 800e494:	4770      	bx	lr
	...

0800e498 <_lseek_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4d07      	ldr	r5, [pc, #28]	; (800e4b8 <_lseek_r+0x20>)
 800e49c:	4604      	mov	r4, r0
 800e49e:	4608      	mov	r0, r1
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	602a      	str	r2, [r5, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f7f4 fa18 	bl	80028dc <_lseek>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_lseek_r+0x1e>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_lseek_r+0x1e>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	20006794 	.word	0x20006794

0800e4bc <malloc>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <malloc+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f000 bd61 	b.w	800ef88 <_malloc_r>
 800e4c6:	bf00      	nop
 800e4c8:	20000020 	.word	0x20000020

0800e4cc <free>:
 800e4cc:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <free+0xc>)
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	6818      	ldr	r0, [r3, #0]
 800e4d2:	f000 bced 	b.w	800eeb0 <_free_r>
 800e4d6:	bf00      	nop
 800e4d8:	20000020 	.word	0x20000020

0800e4dc <__ascii_mbtowc>:
 800e4dc:	b082      	sub	sp, #8
 800e4de:	b901      	cbnz	r1, 800e4e2 <__ascii_mbtowc+0x6>
 800e4e0:	a901      	add	r1, sp, #4
 800e4e2:	b142      	cbz	r2, 800e4f6 <__ascii_mbtowc+0x1a>
 800e4e4:	b14b      	cbz	r3, 800e4fa <__ascii_mbtowc+0x1e>
 800e4e6:	7813      	ldrb	r3, [r2, #0]
 800e4e8:	600b      	str	r3, [r1, #0]
 800e4ea:	7812      	ldrb	r2, [r2, #0]
 800e4ec:	1e10      	subs	r0, r2, #0
 800e4ee:	bf18      	it	ne
 800e4f0:	2001      	movne	r0, #1
 800e4f2:	b002      	add	sp, #8
 800e4f4:	4770      	bx	lr
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	e7fb      	b.n	800e4f2 <__ascii_mbtowc+0x16>
 800e4fa:	f06f 0001 	mvn.w	r0, #1
 800e4fe:	e7f8      	b.n	800e4f2 <__ascii_mbtowc+0x16>

0800e500 <_Balloc>:
 800e500:	b570      	push	{r4, r5, r6, lr}
 800e502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	b976      	cbnz	r6, 800e528 <_Balloc+0x28>
 800e50a:	2010      	movs	r0, #16
 800e50c:	f7ff ffd6 	bl	800e4bc <malloc>
 800e510:	4602      	mov	r2, r0
 800e512:	6260      	str	r0, [r4, #36]	; 0x24
 800e514:	b920      	cbnz	r0, 800e520 <_Balloc+0x20>
 800e516:	4b18      	ldr	r3, [pc, #96]	; (800e578 <_Balloc+0x78>)
 800e518:	4818      	ldr	r0, [pc, #96]	; (800e57c <_Balloc+0x7c>)
 800e51a:	2166      	movs	r1, #102	; 0x66
 800e51c:	f001 fae8 	bl	800faf0 <__assert_func>
 800e520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e524:	6006      	str	r6, [r0, #0]
 800e526:	60c6      	str	r6, [r0, #12]
 800e528:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e52a:	68f3      	ldr	r3, [r6, #12]
 800e52c:	b183      	cbz	r3, 800e550 <_Balloc+0x50>
 800e52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e536:	b9b8      	cbnz	r0, 800e568 <_Balloc+0x68>
 800e538:	2101      	movs	r1, #1
 800e53a:	fa01 f605 	lsl.w	r6, r1, r5
 800e53e:	1d72      	adds	r2, r6, #5
 800e540:	0092      	lsls	r2, r2, #2
 800e542:	4620      	mov	r0, r4
 800e544:	f000 fc9d 	bl	800ee82 <_calloc_r>
 800e548:	b160      	cbz	r0, 800e564 <_Balloc+0x64>
 800e54a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e54e:	e00e      	b.n	800e56e <_Balloc+0x6e>
 800e550:	2221      	movs	r2, #33	; 0x21
 800e552:	2104      	movs	r1, #4
 800e554:	4620      	mov	r0, r4
 800e556:	f000 fc94 	bl	800ee82 <_calloc_r>
 800e55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e55c:	60f0      	str	r0, [r6, #12]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1e4      	bne.n	800e52e <_Balloc+0x2e>
 800e564:	2000      	movs	r0, #0
 800e566:	bd70      	pop	{r4, r5, r6, pc}
 800e568:	6802      	ldr	r2, [r0, #0]
 800e56a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e56e:	2300      	movs	r3, #0
 800e570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e574:	e7f7      	b.n	800e566 <_Balloc+0x66>
 800e576:	bf00      	nop
 800e578:	080109ba 	.word	0x080109ba
 800e57c:	08010b18 	.word	0x08010b18

0800e580 <_Bfree>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e584:	4605      	mov	r5, r0
 800e586:	460c      	mov	r4, r1
 800e588:	b976      	cbnz	r6, 800e5a8 <_Bfree+0x28>
 800e58a:	2010      	movs	r0, #16
 800e58c:	f7ff ff96 	bl	800e4bc <malloc>
 800e590:	4602      	mov	r2, r0
 800e592:	6268      	str	r0, [r5, #36]	; 0x24
 800e594:	b920      	cbnz	r0, 800e5a0 <_Bfree+0x20>
 800e596:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <_Bfree+0x3c>)
 800e598:	4809      	ldr	r0, [pc, #36]	; (800e5c0 <_Bfree+0x40>)
 800e59a:	218a      	movs	r1, #138	; 0x8a
 800e59c:	f001 faa8 	bl	800faf0 <__assert_func>
 800e5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5a4:	6006      	str	r6, [r0, #0]
 800e5a6:	60c6      	str	r6, [r0, #12]
 800e5a8:	b13c      	cbz	r4, 800e5ba <_Bfree+0x3a>
 800e5aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e5ac:	6862      	ldr	r2, [r4, #4]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5b4:	6021      	str	r1, [r4, #0]
 800e5b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}
 800e5bc:	080109ba 	.word	0x080109ba
 800e5c0:	08010b18 	.word	0x08010b18

0800e5c4 <__multadd>:
 800e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c8:	690d      	ldr	r5, [r1, #16]
 800e5ca:	4607      	mov	r7, r0
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	461e      	mov	r6, r3
 800e5d0:	f101 0c14 	add.w	ip, r1, #20
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	f8dc 3000 	ldr.w	r3, [ip]
 800e5da:	b299      	uxth	r1, r3
 800e5dc:	fb02 6101 	mla	r1, r2, r1, r6
 800e5e0:	0c1e      	lsrs	r6, r3, #16
 800e5e2:	0c0b      	lsrs	r3, r1, #16
 800e5e4:	fb02 3306 	mla	r3, r2, r6, r3
 800e5e8:	b289      	uxth	r1, r1
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5f0:	4285      	cmp	r5, r0
 800e5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800e5f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5fa:	dcec      	bgt.n	800e5d6 <__multadd+0x12>
 800e5fc:	b30e      	cbz	r6, 800e642 <__multadd+0x7e>
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	42ab      	cmp	r3, r5
 800e602:	dc19      	bgt.n	800e638 <__multadd+0x74>
 800e604:	6861      	ldr	r1, [r4, #4]
 800e606:	4638      	mov	r0, r7
 800e608:	3101      	adds	r1, #1
 800e60a:	f7ff ff79 	bl	800e500 <_Balloc>
 800e60e:	4680      	mov	r8, r0
 800e610:	b928      	cbnz	r0, 800e61e <__multadd+0x5a>
 800e612:	4602      	mov	r2, r0
 800e614:	4b0c      	ldr	r3, [pc, #48]	; (800e648 <__multadd+0x84>)
 800e616:	480d      	ldr	r0, [pc, #52]	; (800e64c <__multadd+0x88>)
 800e618:	21b5      	movs	r1, #181	; 0xb5
 800e61a:	f001 fa69 	bl	800faf0 <__assert_func>
 800e61e:	6922      	ldr	r2, [r4, #16]
 800e620:	3202      	adds	r2, #2
 800e622:	f104 010c 	add.w	r1, r4, #12
 800e626:	0092      	lsls	r2, r2, #2
 800e628:	300c      	adds	r0, #12
 800e62a:	f7fc f999 	bl	800a960 <memcpy>
 800e62e:	4621      	mov	r1, r4
 800e630:	4638      	mov	r0, r7
 800e632:	f7ff ffa5 	bl	800e580 <_Bfree>
 800e636:	4644      	mov	r4, r8
 800e638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e63c:	3501      	adds	r5, #1
 800e63e:	615e      	str	r6, [r3, #20]
 800e640:	6125      	str	r5, [r4, #16]
 800e642:	4620      	mov	r0, r4
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	08010a2c 	.word	0x08010a2c
 800e64c:	08010b18 	.word	0x08010b18

0800e650 <__s2b>:
 800e650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e654:	460c      	mov	r4, r1
 800e656:	4615      	mov	r5, r2
 800e658:	461f      	mov	r7, r3
 800e65a:	2209      	movs	r2, #9
 800e65c:	3308      	adds	r3, #8
 800e65e:	4606      	mov	r6, r0
 800e660:	fb93 f3f2 	sdiv	r3, r3, r2
 800e664:	2100      	movs	r1, #0
 800e666:	2201      	movs	r2, #1
 800e668:	429a      	cmp	r2, r3
 800e66a:	db09      	blt.n	800e680 <__s2b+0x30>
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ff47 	bl	800e500 <_Balloc>
 800e672:	b940      	cbnz	r0, 800e686 <__s2b+0x36>
 800e674:	4602      	mov	r2, r0
 800e676:	4b19      	ldr	r3, [pc, #100]	; (800e6dc <__s2b+0x8c>)
 800e678:	4819      	ldr	r0, [pc, #100]	; (800e6e0 <__s2b+0x90>)
 800e67a:	21ce      	movs	r1, #206	; 0xce
 800e67c:	f001 fa38 	bl	800faf0 <__assert_func>
 800e680:	0052      	lsls	r2, r2, #1
 800e682:	3101      	adds	r1, #1
 800e684:	e7f0      	b.n	800e668 <__s2b+0x18>
 800e686:	9b08      	ldr	r3, [sp, #32]
 800e688:	6143      	str	r3, [r0, #20]
 800e68a:	2d09      	cmp	r5, #9
 800e68c:	f04f 0301 	mov.w	r3, #1
 800e690:	6103      	str	r3, [r0, #16]
 800e692:	dd16      	ble.n	800e6c2 <__s2b+0x72>
 800e694:	f104 0909 	add.w	r9, r4, #9
 800e698:	46c8      	mov	r8, r9
 800e69a:	442c      	add	r4, r5
 800e69c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6a0:	4601      	mov	r1, r0
 800e6a2:	3b30      	subs	r3, #48	; 0x30
 800e6a4:	220a      	movs	r2, #10
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7ff ff8c 	bl	800e5c4 <__multadd>
 800e6ac:	45a0      	cmp	r8, r4
 800e6ae:	d1f5      	bne.n	800e69c <__s2b+0x4c>
 800e6b0:	f1a5 0408 	sub.w	r4, r5, #8
 800e6b4:	444c      	add	r4, r9
 800e6b6:	1b2d      	subs	r5, r5, r4
 800e6b8:	1963      	adds	r3, r4, r5
 800e6ba:	42bb      	cmp	r3, r7
 800e6bc:	db04      	blt.n	800e6c8 <__s2b+0x78>
 800e6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c2:	340a      	adds	r4, #10
 800e6c4:	2509      	movs	r5, #9
 800e6c6:	e7f6      	b.n	800e6b6 <__s2b+0x66>
 800e6c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6cc:	4601      	mov	r1, r0
 800e6ce:	3b30      	subs	r3, #48	; 0x30
 800e6d0:	220a      	movs	r2, #10
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7ff ff76 	bl	800e5c4 <__multadd>
 800e6d8:	e7ee      	b.n	800e6b8 <__s2b+0x68>
 800e6da:	bf00      	nop
 800e6dc:	08010a2c 	.word	0x08010a2c
 800e6e0:	08010b18 	.word	0x08010b18

0800e6e4 <__hi0bits>:
 800e6e4:	0c03      	lsrs	r3, r0, #16
 800e6e6:	041b      	lsls	r3, r3, #16
 800e6e8:	b9d3      	cbnz	r3, 800e720 <__hi0bits+0x3c>
 800e6ea:	0400      	lsls	r0, r0, #16
 800e6ec:	2310      	movs	r3, #16
 800e6ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6f2:	bf04      	itt	eq
 800e6f4:	0200      	lsleq	r0, r0, #8
 800e6f6:	3308      	addeq	r3, #8
 800e6f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6fc:	bf04      	itt	eq
 800e6fe:	0100      	lsleq	r0, r0, #4
 800e700:	3304      	addeq	r3, #4
 800e702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e706:	bf04      	itt	eq
 800e708:	0080      	lsleq	r0, r0, #2
 800e70a:	3302      	addeq	r3, #2
 800e70c:	2800      	cmp	r0, #0
 800e70e:	db05      	blt.n	800e71c <__hi0bits+0x38>
 800e710:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e714:	f103 0301 	add.w	r3, r3, #1
 800e718:	bf08      	it	eq
 800e71a:	2320      	moveq	r3, #32
 800e71c:	4618      	mov	r0, r3
 800e71e:	4770      	bx	lr
 800e720:	2300      	movs	r3, #0
 800e722:	e7e4      	b.n	800e6ee <__hi0bits+0xa>

0800e724 <__lo0bits>:
 800e724:	6803      	ldr	r3, [r0, #0]
 800e726:	f013 0207 	ands.w	r2, r3, #7
 800e72a:	4601      	mov	r1, r0
 800e72c:	d00b      	beq.n	800e746 <__lo0bits+0x22>
 800e72e:	07da      	lsls	r2, r3, #31
 800e730:	d423      	bmi.n	800e77a <__lo0bits+0x56>
 800e732:	0798      	lsls	r0, r3, #30
 800e734:	bf49      	itett	mi
 800e736:	085b      	lsrmi	r3, r3, #1
 800e738:	089b      	lsrpl	r3, r3, #2
 800e73a:	2001      	movmi	r0, #1
 800e73c:	600b      	strmi	r3, [r1, #0]
 800e73e:	bf5c      	itt	pl
 800e740:	600b      	strpl	r3, [r1, #0]
 800e742:	2002      	movpl	r0, #2
 800e744:	4770      	bx	lr
 800e746:	b298      	uxth	r0, r3
 800e748:	b9a8      	cbnz	r0, 800e776 <__lo0bits+0x52>
 800e74a:	0c1b      	lsrs	r3, r3, #16
 800e74c:	2010      	movs	r0, #16
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	b90a      	cbnz	r2, 800e756 <__lo0bits+0x32>
 800e752:	3008      	adds	r0, #8
 800e754:	0a1b      	lsrs	r3, r3, #8
 800e756:	071a      	lsls	r2, r3, #28
 800e758:	bf04      	itt	eq
 800e75a:	091b      	lsreq	r3, r3, #4
 800e75c:	3004      	addeq	r0, #4
 800e75e:	079a      	lsls	r2, r3, #30
 800e760:	bf04      	itt	eq
 800e762:	089b      	lsreq	r3, r3, #2
 800e764:	3002      	addeq	r0, #2
 800e766:	07da      	lsls	r2, r3, #31
 800e768:	d403      	bmi.n	800e772 <__lo0bits+0x4e>
 800e76a:	085b      	lsrs	r3, r3, #1
 800e76c:	f100 0001 	add.w	r0, r0, #1
 800e770:	d005      	beq.n	800e77e <__lo0bits+0x5a>
 800e772:	600b      	str	r3, [r1, #0]
 800e774:	4770      	bx	lr
 800e776:	4610      	mov	r0, r2
 800e778:	e7e9      	b.n	800e74e <__lo0bits+0x2a>
 800e77a:	2000      	movs	r0, #0
 800e77c:	4770      	bx	lr
 800e77e:	2020      	movs	r0, #32
 800e780:	4770      	bx	lr
	...

0800e784 <__i2b>:
 800e784:	b510      	push	{r4, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	2101      	movs	r1, #1
 800e78a:	f7ff feb9 	bl	800e500 <_Balloc>
 800e78e:	4602      	mov	r2, r0
 800e790:	b928      	cbnz	r0, 800e79e <__i2b+0x1a>
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <__i2b+0x24>)
 800e794:	4805      	ldr	r0, [pc, #20]	; (800e7ac <__i2b+0x28>)
 800e796:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e79a:	f001 f9a9 	bl	800faf0 <__assert_func>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	6144      	str	r4, [r0, #20]
 800e7a2:	6103      	str	r3, [r0, #16]
 800e7a4:	bd10      	pop	{r4, pc}
 800e7a6:	bf00      	nop
 800e7a8:	08010a2c 	.word	0x08010a2c
 800e7ac:	08010b18 	.word	0x08010b18

0800e7b0 <__multiply>:
 800e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b4:	4691      	mov	r9, r2
 800e7b6:	690a      	ldr	r2, [r1, #16]
 800e7b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	bfb8      	it	lt
 800e7c0:	460b      	movlt	r3, r1
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	bfbc      	itt	lt
 800e7c6:	464c      	movlt	r4, r9
 800e7c8:	4699      	movlt	r9, r3
 800e7ca:	6927      	ldr	r7, [r4, #16]
 800e7cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e7d0:	68a3      	ldr	r3, [r4, #8]
 800e7d2:	6861      	ldr	r1, [r4, #4]
 800e7d4:	eb07 060a 	add.w	r6, r7, sl
 800e7d8:	42b3      	cmp	r3, r6
 800e7da:	b085      	sub	sp, #20
 800e7dc:	bfb8      	it	lt
 800e7de:	3101      	addlt	r1, #1
 800e7e0:	f7ff fe8e 	bl	800e500 <_Balloc>
 800e7e4:	b930      	cbnz	r0, 800e7f4 <__multiply+0x44>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4b44      	ldr	r3, [pc, #272]	; (800e8fc <__multiply+0x14c>)
 800e7ea:	4845      	ldr	r0, [pc, #276]	; (800e900 <__multiply+0x150>)
 800e7ec:	f240 115d 	movw	r1, #349	; 0x15d
 800e7f0:	f001 f97e 	bl	800faf0 <__assert_func>
 800e7f4:	f100 0514 	add.w	r5, r0, #20
 800e7f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	2200      	movs	r2, #0
 800e800:	4543      	cmp	r3, r8
 800e802:	d321      	bcc.n	800e848 <__multiply+0x98>
 800e804:	f104 0314 	add.w	r3, r4, #20
 800e808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e80c:	f109 0314 	add.w	r3, r9, #20
 800e810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e814:	9202      	str	r2, [sp, #8]
 800e816:	1b3a      	subs	r2, r7, r4
 800e818:	3a15      	subs	r2, #21
 800e81a:	f022 0203 	bic.w	r2, r2, #3
 800e81e:	3204      	adds	r2, #4
 800e820:	f104 0115 	add.w	r1, r4, #21
 800e824:	428f      	cmp	r7, r1
 800e826:	bf38      	it	cc
 800e828:	2204      	movcc	r2, #4
 800e82a:	9201      	str	r2, [sp, #4]
 800e82c:	9a02      	ldr	r2, [sp, #8]
 800e82e:	9303      	str	r3, [sp, #12]
 800e830:	429a      	cmp	r2, r3
 800e832:	d80c      	bhi.n	800e84e <__multiply+0x9e>
 800e834:	2e00      	cmp	r6, #0
 800e836:	dd03      	ble.n	800e840 <__multiply+0x90>
 800e838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d05a      	beq.n	800e8f6 <__multiply+0x146>
 800e840:	6106      	str	r6, [r0, #16]
 800e842:	b005      	add	sp, #20
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e848:	f843 2b04 	str.w	r2, [r3], #4
 800e84c:	e7d8      	b.n	800e800 <__multiply+0x50>
 800e84e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e852:	f1ba 0f00 	cmp.w	sl, #0
 800e856:	d024      	beq.n	800e8a2 <__multiply+0xf2>
 800e858:	f104 0e14 	add.w	lr, r4, #20
 800e85c:	46a9      	mov	r9, r5
 800e85e:	f04f 0c00 	mov.w	ip, #0
 800e862:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e866:	f8d9 1000 	ldr.w	r1, [r9]
 800e86a:	fa1f fb82 	uxth.w	fp, r2
 800e86e:	b289      	uxth	r1, r1
 800e870:	fb0a 110b 	mla	r1, sl, fp, r1
 800e874:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e878:	f8d9 2000 	ldr.w	r2, [r9]
 800e87c:	4461      	add	r1, ip
 800e87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e882:	fb0a c20b 	mla	r2, sl, fp, ip
 800e886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e88a:	b289      	uxth	r1, r1
 800e88c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e890:	4577      	cmp	r7, lr
 800e892:	f849 1b04 	str.w	r1, [r9], #4
 800e896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e89a:	d8e2      	bhi.n	800e862 <__multiply+0xb2>
 800e89c:	9a01      	ldr	r2, [sp, #4]
 800e89e:	f845 c002 	str.w	ip, [r5, r2]
 800e8a2:	9a03      	ldr	r2, [sp, #12]
 800e8a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	f1b9 0f00 	cmp.w	r9, #0
 800e8ae:	d020      	beq.n	800e8f2 <__multiply+0x142>
 800e8b0:	6829      	ldr	r1, [r5, #0]
 800e8b2:	f104 0c14 	add.w	ip, r4, #20
 800e8b6:	46ae      	mov	lr, r5
 800e8b8:	f04f 0a00 	mov.w	sl, #0
 800e8bc:	f8bc b000 	ldrh.w	fp, [ip]
 800e8c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e8c4:	fb09 220b 	mla	r2, r9, fp, r2
 800e8c8:	4492      	add	sl, r2
 800e8ca:	b289      	uxth	r1, r1
 800e8cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e8d0:	f84e 1b04 	str.w	r1, [lr], #4
 800e8d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e8d8:	f8be 1000 	ldrh.w	r1, [lr]
 800e8dc:	0c12      	lsrs	r2, r2, #16
 800e8de:	fb09 1102 	mla	r1, r9, r2, r1
 800e8e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e8e6:	4567      	cmp	r7, ip
 800e8e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e8ec:	d8e6      	bhi.n	800e8bc <__multiply+0x10c>
 800e8ee:	9a01      	ldr	r2, [sp, #4]
 800e8f0:	50a9      	str	r1, [r5, r2]
 800e8f2:	3504      	adds	r5, #4
 800e8f4:	e79a      	b.n	800e82c <__multiply+0x7c>
 800e8f6:	3e01      	subs	r6, #1
 800e8f8:	e79c      	b.n	800e834 <__multiply+0x84>
 800e8fa:	bf00      	nop
 800e8fc:	08010a2c 	.word	0x08010a2c
 800e900:	08010b18 	.word	0x08010b18

0800e904 <__pow5mult>:
 800e904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e908:	4615      	mov	r5, r2
 800e90a:	f012 0203 	ands.w	r2, r2, #3
 800e90e:	4606      	mov	r6, r0
 800e910:	460f      	mov	r7, r1
 800e912:	d007      	beq.n	800e924 <__pow5mult+0x20>
 800e914:	4c25      	ldr	r4, [pc, #148]	; (800e9ac <__pow5mult+0xa8>)
 800e916:	3a01      	subs	r2, #1
 800e918:	2300      	movs	r3, #0
 800e91a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e91e:	f7ff fe51 	bl	800e5c4 <__multadd>
 800e922:	4607      	mov	r7, r0
 800e924:	10ad      	asrs	r5, r5, #2
 800e926:	d03d      	beq.n	800e9a4 <__pow5mult+0xa0>
 800e928:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e92a:	b97c      	cbnz	r4, 800e94c <__pow5mult+0x48>
 800e92c:	2010      	movs	r0, #16
 800e92e:	f7ff fdc5 	bl	800e4bc <malloc>
 800e932:	4602      	mov	r2, r0
 800e934:	6270      	str	r0, [r6, #36]	; 0x24
 800e936:	b928      	cbnz	r0, 800e944 <__pow5mult+0x40>
 800e938:	4b1d      	ldr	r3, [pc, #116]	; (800e9b0 <__pow5mult+0xac>)
 800e93a:	481e      	ldr	r0, [pc, #120]	; (800e9b4 <__pow5mult+0xb0>)
 800e93c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e940:	f001 f8d6 	bl	800faf0 <__assert_func>
 800e944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e948:	6004      	str	r4, [r0, #0]
 800e94a:	60c4      	str	r4, [r0, #12]
 800e94c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e954:	b94c      	cbnz	r4, 800e96a <__pow5mult+0x66>
 800e956:	f240 2171 	movw	r1, #625	; 0x271
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff ff12 	bl	800e784 <__i2b>
 800e960:	2300      	movs	r3, #0
 800e962:	f8c8 0008 	str.w	r0, [r8, #8]
 800e966:	4604      	mov	r4, r0
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	f04f 0900 	mov.w	r9, #0
 800e96e:	07eb      	lsls	r3, r5, #31
 800e970:	d50a      	bpl.n	800e988 <__pow5mult+0x84>
 800e972:	4639      	mov	r1, r7
 800e974:	4622      	mov	r2, r4
 800e976:	4630      	mov	r0, r6
 800e978:	f7ff ff1a 	bl	800e7b0 <__multiply>
 800e97c:	4639      	mov	r1, r7
 800e97e:	4680      	mov	r8, r0
 800e980:	4630      	mov	r0, r6
 800e982:	f7ff fdfd 	bl	800e580 <_Bfree>
 800e986:	4647      	mov	r7, r8
 800e988:	106d      	asrs	r5, r5, #1
 800e98a:	d00b      	beq.n	800e9a4 <__pow5mult+0xa0>
 800e98c:	6820      	ldr	r0, [r4, #0]
 800e98e:	b938      	cbnz	r0, 800e9a0 <__pow5mult+0x9c>
 800e990:	4622      	mov	r2, r4
 800e992:	4621      	mov	r1, r4
 800e994:	4630      	mov	r0, r6
 800e996:	f7ff ff0b 	bl	800e7b0 <__multiply>
 800e99a:	6020      	str	r0, [r4, #0]
 800e99c:	f8c0 9000 	str.w	r9, [r0]
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	e7e4      	b.n	800e96e <__pow5mult+0x6a>
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9aa:	bf00      	nop
 800e9ac:	08010c68 	.word	0x08010c68
 800e9b0:	080109ba 	.word	0x080109ba
 800e9b4:	08010b18 	.word	0x08010b18

0800e9b8 <__lshift>:
 800e9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9bc:	460c      	mov	r4, r1
 800e9be:	6849      	ldr	r1, [r1, #4]
 800e9c0:	6923      	ldr	r3, [r4, #16]
 800e9c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	4607      	mov	r7, r0
 800e9ca:	4691      	mov	r9, r2
 800e9cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9d0:	f108 0601 	add.w	r6, r8, #1
 800e9d4:	42b3      	cmp	r3, r6
 800e9d6:	db0b      	blt.n	800e9f0 <__lshift+0x38>
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f7ff fd91 	bl	800e500 <_Balloc>
 800e9de:	4605      	mov	r5, r0
 800e9e0:	b948      	cbnz	r0, 800e9f6 <__lshift+0x3e>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ea90 <__lshift+0xd8>)
 800e9e6:	482b      	ldr	r0, [pc, #172]	; (800ea94 <__lshift+0xdc>)
 800e9e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9ec:	f001 f880 	bl	800faf0 <__assert_func>
 800e9f0:	3101      	adds	r1, #1
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	e7ee      	b.n	800e9d4 <__lshift+0x1c>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f100 0114 	add.w	r1, r0, #20
 800e9fc:	f100 0210 	add.w	r2, r0, #16
 800ea00:	4618      	mov	r0, r3
 800ea02:	4553      	cmp	r3, sl
 800ea04:	db37      	blt.n	800ea76 <__lshift+0xbe>
 800ea06:	6920      	ldr	r0, [r4, #16]
 800ea08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea0c:	f104 0314 	add.w	r3, r4, #20
 800ea10:	f019 091f 	ands.w	r9, r9, #31
 800ea14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea1c:	d02f      	beq.n	800ea7e <__lshift+0xc6>
 800ea1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea22:	468a      	mov	sl, r1
 800ea24:	f04f 0c00 	mov.w	ip, #0
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	fa02 f209 	lsl.w	r2, r2, r9
 800ea2e:	ea42 020c 	orr.w	r2, r2, ip
 800ea32:	f84a 2b04 	str.w	r2, [sl], #4
 800ea36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3a:	4298      	cmp	r0, r3
 800ea3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ea40:	d8f2      	bhi.n	800ea28 <__lshift+0x70>
 800ea42:	1b03      	subs	r3, r0, r4
 800ea44:	3b15      	subs	r3, #21
 800ea46:	f023 0303 	bic.w	r3, r3, #3
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	f104 0215 	add.w	r2, r4, #21
 800ea50:	4290      	cmp	r0, r2
 800ea52:	bf38      	it	cc
 800ea54:	2304      	movcc	r3, #4
 800ea56:	f841 c003 	str.w	ip, [r1, r3]
 800ea5a:	f1bc 0f00 	cmp.w	ip, #0
 800ea5e:	d001      	beq.n	800ea64 <__lshift+0xac>
 800ea60:	f108 0602 	add.w	r6, r8, #2
 800ea64:	3e01      	subs	r6, #1
 800ea66:	4638      	mov	r0, r7
 800ea68:	612e      	str	r6, [r5, #16]
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	f7ff fd88 	bl	800e580 <_Bfree>
 800ea70:	4628      	mov	r0, r5
 800ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	e7c1      	b.n	800ea02 <__lshift+0x4a>
 800ea7e:	3904      	subs	r1, #4
 800ea80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea88:	4298      	cmp	r0, r3
 800ea8a:	d8f9      	bhi.n	800ea80 <__lshift+0xc8>
 800ea8c:	e7ea      	b.n	800ea64 <__lshift+0xac>
 800ea8e:	bf00      	nop
 800ea90:	08010a2c 	.word	0x08010a2c
 800ea94:	08010b18 	.word	0x08010b18

0800ea98 <__mcmp>:
 800ea98:	b530      	push	{r4, r5, lr}
 800ea9a:	6902      	ldr	r2, [r0, #16]
 800ea9c:	690c      	ldr	r4, [r1, #16]
 800ea9e:	1b12      	subs	r2, r2, r4
 800eaa0:	d10e      	bne.n	800eac0 <__mcmp+0x28>
 800eaa2:	f100 0314 	add.w	r3, r0, #20
 800eaa6:	3114      	adds	r1, #20
 800eaa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eaac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eab0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eab4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eab8:	42a5      	cmp	r5, r4
 800eaba:	d003      	beq.n	800eac4 <__mcmp+0x2c>
 800eabc:	d305      	bcc.n	800eaca <__mcmp+0x32>
 800eabe:	2201      	movs	r2, #1
 800eac0:	4610      	mov	r0, r2
 800eac2:	bd30      	pop	{r4, r5, pc}
 800eac4:	4283      	cmp	r3, r0
 800eac6:	d3f3      	bcc.n	800eab0 <__mcmp+0x18>
 800eac8:	e7fa      	b.n	800eac0 <__mcmp+0x28>
 800eaca:	f04f 32ff 	mov.w	r2, #4294967295
 800eace:	e7f7      	b.n	800eac0 <__mcmp+0x28>

0800ead0 <__mdiff>:
 800ead0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	460c      	mov	r4, r1
 800ead6:	4606      	mov	r6, r0
 800ead8:	4611      	mov	r1, r2
 800eada:	4620      	mov	r0, r4
 800eadc:	4690      	mov	r8, r2
 800eade:	f7ff ffdb 	bl	800ea98 <__mcmp>
 800eae2:	1e05      	subs	r5, r0, #0
 800eae4:	d110      	bne.n	800eb08 <__mdiff+0x38>
 800eae6:	4629      	mov	r1, r5
 800eae8:	4630      	mov	r0, r6
 800eaea:	f7ff fd09 	bl	800e500 <_Balloc>
 800eaee:	b930      	cbnz	r0, 800eafe <__mdiff+0x2e>
 800eaf0:	4b3a      	ldr	r3, [pc, #232]	; (800ebdc <__mdiff+0x10c>)
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	f240 2132 	movw	r1, #562	; 0x232
 800eaf8:	4839      	ldr	r0, [pc, #228]	; (800ebe0 <__mdiff+0x110>)
 800eafa:	f000 fff9 	bl	800faf0 <__assert_func>
 800eafe:	2301      	movs	r3, #1
 800eb00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb08:	bfa4      	itt	ge
 800eb0a:	4643      	movge	r3, r8
 800eb0c:	46a0      	movge	r8, r4
 800eb0e:	4630      	mov	r0, r6
 800eb10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb14:	bfa6      	itte	ge
 800eb16:	461c      	movge	r4, r3
 800eb18:	2500      	movge	r5, #0
 800eb1a:	2501      	movlt	r5, #1
 800eb1c:	f7ff fcf0 	bl	800e500 <_Balloc>
 800eb20:	b920      	cbnz	r0, 800eb2c <__mdiff+0x5c>
 800eb22:	4b2e      	ldr	r3, [pc, #184]	; (800ebdc <__mdiff+0x10c>)
 800eb24:	4602      	mov	r2, r0
 800eb26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb2a:	e7e5      	b.n	800eaf8 <__mdiff+0x28>
 800eb2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb30:	6926      	ldr	r6, [r4, #16]
 800eb32:	60c5      	str	r5, [r0, #12]
 800eb34:	f104 0914 	add.w	r9, r4, #20
 800eb38:	f108 0514 	add.w	r5, r8, #20
 800eb3c:	f100 0e14 	add.w	lr, r0, #20
 800eb40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb48:	f108 0210 	add.w	r2, r8, #16
 800eb4c:	46f2      	mov	sl, lr
 800eb4e:	2100      	movs	r1, #0
 800eb50:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb58:	fa1f f883 	uxth.w	r8, r3
 800eb5c:	fa11 f18b 	uxtah	r1, r1, fp
 800eb60:	0c1b      	lsrs	r3, r3, #16
 800eb62:	eba1 0808 	sub.w	r8, r1, r8
 800eb66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb6e:	fa1f f888 	uxth.w	r8, r8
 800eb72:	1419      	asrs	r1, r3, #16
 800eb74:	454e      	cmp	r6, r9
 800eb76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb7a:	f84a 3b04 	str.w	r3, [sl], #4
 800eb7e:	d8e7      	bhi.n	800eb50 <__mdiff+0x80>
 800eb80:	1b33      	subs	r3, r6, r4
 800eb82:	3b15      	subs	r3, #21
 800eb84:	f023 0303 	bic.w	r3, r3, #3
 800eb88:	3304      	adds	r3, #4
 800eb8a:	3415      	adds	r4, #21
 800eb8c:	42a6      	cmp	r6, r4
 800eb8e:	bf38      	it	cc
 800eb90:	2304      	movcc	r3, #4
 800eb92:	441d      	add	r5, r3
 800eb94:	4473      	add	r3, lr
 800eb96:	469e      	mov	lr, r3
 800eb98:	462e      	mov	r6, r5
 800eb9a:	4566      	cmp	r6, ip
 800eb9c:	d30e      	bcc.n	800ebbc <__mdiff+0xec>
 800eb9e:	f10c 0203 	add.w	r2, ip, #3
 800eba2:	1b52      	subs	r2, r2, r5
 800eba4:	f022 0203 	bic.w	r2, r2, #3
 800eba8:	3d03      	subs	r5, #3
 800ebaa:	45ac      	cmp	ip, r5
 800ebac:	bf38      	it	cc
 800ebae:	2200      	movcc	r2, #0
 800ebb0:	441a      	add	r2, r3
 800ebb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ebb6:	b17b      	cbz	r3, 800ebd8 <__mdiff+0x108>
 800ebb8:	6107      	str	r7, [r0, #16]
 800ebba:	e7a3      	b.n	800eb04 <__mdiff+0x34>
 800ebbc:	f856 8b04 	ldr.w	r8, [r6], #4
 800ebc0:	fa11 f288 	uxtah	r2, r1, r8
 800ebc4:	1414      	asrs	r4, r2, #16
 800ebc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ebca:	b292      	uxth	r2, r2
 800ebcc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ebd0:	f84e 2b04 	str.w	r2, [lr], #4
 800ebd4:	1421      	asrs	r1, r4, #16
 800ebd6:	e7e0      	b.n	800eb9a <__mdiff+0xca>
 800ebd8:	3f01      	subs	r7, #1
 800ebda:	e7ea      	b.n	800ebb2 <__mdiff+0xe2>
 800ebdc:	08010a2c 	.word	0x08010a2c
 800ebe0:	08010b18 	.word	0x08010b18

0800ebe4 <__ulp>:
 800ebe4:	b082      	sub	sp, #8
 800ebe6:	ed8d 0b00 	vstr	d0, [sp]
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	4912      	ldr	r1, [pc, #72]	; (800ec38 <__ulp+0x54>)
 800ebee:	4019      	ands	r1, r3
 800ebf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ebf4:	2900      	cmp	r1, #0
 800ebf6:	dd05      	ble.n	800ec04 <__ulp+0x20>
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	ec43 2b10 	vmov	d0, r2, r3
 800ec00:	b002      	add	sp, #8
 800ec02:	4770      	bx	lr
 800ec04:	4249      	negs	r1, r1
 800ec06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ec0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ec0e:	f04f 0200 	mov.w	r2, #0
 800ec12:	f04f 0300 	mov.w	r3, #0
 800ec16:	da04      	bge.n	800ec22 <__ulp+0x3e>
 800ec18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ec1c:	fa41 f300 	asr.w	r3, r1, r0
 800ec20:	e7ec      	b.n	800ebfc <__ulp+0x18>
 800ec22:	f1a0 0114 	sub.w	r1, r0, #20
 800ec26:	291e      	cmp	r1, #30
 800ec28:	bfda      	itte	le
 800ec2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ec2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ec32:	2101      	movgt	r1, #1
 800ec34:	460a      	mov	r2, r1
 800ec36:	e7e1      	b.n	800ebfc <__ulp+0x18>
 800ec38:	7ff00000 	.word	0x7ff00000

0800ec3c <__b2d>:
 800ec3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3e:	6905      	ldr	r5, [r0, #16]
 800ec40:	f100 0714 	add.w	r7, r0, #20
 800ec44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ec48:	1f2e      	subs	r6, r5, #4
 800ec4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f7ff fd48 	bl	800e6e4 <__hi0bits>
 800ec54:	f1c0 0320 	rsb	r3, r0, #32
 800ec58:	280a      	cmp	r0, #10
 800ec5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ecd8 <__b2d+0x9c>
 800ec5e:	600b      	str	r3, [r1, #0]
 800ec60:	dc14      	bgt.n	800ec8c <__b2d+0x50>
 800ec62:	f1c0 0e0b 	rsb	lr, r0, #11
 800ec66:	fa24 f10e 	lsr.w	r1, r4, lr
 800ec6a:	42b7      	cmp	r7, r6
 800ec6c:	ea41 030c 	orr.w	r3, r1, ip
 800ec70:	bf34      	ite	cc
 800ec72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec76:	2100      	movcs	r1, #0
 800ec78:	3015      	adds	r0, #21
 800ec7a:	fa04 f000 	lsl.w	r0, r4, r0
 800ec7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ec82:	ea40 0201 	orr.w	r2, r0, r1
 800ec86:	ec43 2b10 	vmov	d0, r2, r3
 800ec8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec8c:	42b7      	cmp	r7, r6
 800ec8e:	bf3a      	itte	cc
 800ec90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec94:	f1a5 0608 	subcc.w	r6, r5, #8
 800ec98:	2100      	movcs	r1, #0
 800ec9a:	380b      	subs	r0, #11
 800ec9c:	d017      	beq.n	800ecce <__b2d+0x92>
 800ec9e:	f1c0 0c20 	rsb	ip, r0, #32
 800eca2:	fa04 f500 	lsl.w	r5, r4, r0
 800eca6:	42be      	cmp	r6, r7
 800eca8:	fa21 f40c 	lsr.w	r4, r1, ip
 800ecac:	ea45 0504 	orr.w	r5, r5, r4
 800ecb0:	bf8c      	ite	hi
 800ecb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ecb6:	2400      	movls	r4, #0
 800ecb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ecbc:	fa01 f000 	lsl.w	r0, r1, r0
 800ecc0:	fa24 f40c 	lsr.w	r4, r4, ip
 800ecc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ecc8:	ea40 0204 	orr.w	r2, r0, r4
 800eccc:	e7db      	b.n	800ec86 <__b2d+0x4a>
 800ecce:	ea44 030c 	orr.w	r3, r4, ip
 800ecd2:	460a      	mov	r2, r1
 800ecd4:	e7d7      	b.n	800ec86 <__b2d+0x4a>
 800ecd6:	bf00      	nop
 800ecd8:	3ff00000 	.word	0x3ff00000

0800ecdc <__d2b>:
 800ecdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ece0:	4689      	mov	r9, r1
 800ece2:	2101      	movs	r1, #1
 800ece4:	ec57 6b10 	vmov	r6, r7, d0
 800ece8:	4690      	mov	r8, r2
 800ecea:	f7ff fc09 	bl	800e500 <_Balloc>
 800ecee:	4604      	mov	r4, r0
 800ecf0:	b930      	cbnz	r0, 800ed00 <__d2b+0x24>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	4b25      	ldr	r3, [pc, #148]	; (800ed8c <__d2b+0xb0>)
 800ecf6:	4826      	ldr	r0, [pc, #152]	; (800ed90 <__d2b+0xb4>)
 800ecf8:	f240 310a 	movw	r1, #778	; 0x30a
 800ecfc:	f000 fef8 	bl	800faf0 <__assert_func>
 800ed00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ed04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed08:	bb35      	cbnz	r5, 800ed58 <__d2b+0x7c>
 800ed0a:	2e00      	cmp	r6, #0
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	d028      	beq.n	800ed62 <__d2b+0x86>
 800ed10:	4668      	mov	r0, sp
 800ed12:	9600      	str	r6, [sp, #0]
 800ed14:	f7ff fd06 	bl	800e724 <__lo0bits>
 800ed18:	9900      	ldr	r1, [sp, #0]
 800ed1a:	b300      	cbz	r0, 800ed5e <__d2b+0x82>
 800ed1c:	9a01      	ldr	r2, [sp, #4]
 800ed1e:	f1c0 0320 	rsb	r3, r0, #32
 800ed22:	fa02 f303 	lsl.w	r3, r2, r3
 800ed26:	430b      	orrs	r3, r1
 800ed28:	40c2      	lsrs	r2, r0
 800ed2a:	6163      	str	r3, [r4, #20]
 800ed2c:	9201      	str	r2, [sp, #4]
 800ed2e:	9b01      	ldr	r3, [sp, #4]
 800ed30:	61a3      	str	r3, [r4, #24]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bf14      	ite	ne
 800ed36:	2202      	movne	r2, #2
 800ed38:	2201      	moveq	r2, #1
 800ed3a:	6122      	str	r2, [r4, #16]
 800ed3c:	b1d5      	cbz	r5, 800ed74 <__d2b+0x98>
 800ed3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed42:	4405      	add	r5, r0
 800ed44:	f8c9 5000 	str.w	r5, [r9]
 800ed48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed4c:	f8c8 0000 	str.w	r0, [r8]
 800ed50:	4620      	mov	r0, r4
 800ed52:	b003      	add	sp, #12
 800ed54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed5c:	e7d5      	b.n	800ed0a <__d2b+0x2e>
 800ed5e:	6161      	str	r1, [r4, #20]
 800ed60:	e7e5      	b.n	800ed2e <__d2b+0x52>
 800ed62:	a801      	add	r0, sp, #4
 800ed64:	f7ff fcde 	bl	800e724 <__lo0bits>
 800ed68:	9b01      	ldr	r3, [sp, #4]
 800ed6a:	6163      	str	r3, [r4, #20]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	6122      	str	r2, [r4, #16]
 800ed70:	3020      	adds	r0, #32
 800ed72:	e7e3      	b.n	800ed3c <__d2b+0x60>
 800ed74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed7c:	f8c9 0000 	str.w	r0, [r9]
 800ed80:	6918      	ldr	r0, [r3, #16]
 800ed82:	f7ff fcaf 	bl	800e6e4 <__hi0bits>
 800ed86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed8a:	e7df      	b.n	800ed4c <__d2b+0x70>
 800ed8c:	08010a2c 	.word	0x08010a2c
 800ed90:	08010b18 	.word	0x08010b18

0800ed94 <__ratio>:
 800ed94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	4688      	mov	r8, r1
 800ed9a:	4669      	mov	r1, sp
 800ed9c:	4681      	mov	r9, r0
 800ed9e:	f7ff ff4d 	bl	800ec3c <__b2d>
 800eda2:	a901      	add	r1, sp, #4
 800eda4:	4640      	mov	r0, r8
 800eda6:	ec55 4b10 	vmov	r4, r5, d0
 800edaa:	f7ff ff47 	bl	800ec3c <__b2d>
 800edae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800edb6:	eba3 0c02 	sub.w	ip, r3, r2
 800edba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800edbe:	1a9b      	subs	r3, r3, r2
 800edc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800edc4:	ec51 0b10 	vmov	r0, r1, d0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	bfd6      	itet	le
 800edcc:	460a      	movle	r2, r1
 800edce:	462a      	movgt	r2, r5
 800edd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800edd4:	468b      	mov	fp, r1
 800edd6:	462f      	mov	r7, r5
 800edd8:	bfd4      	ite	le
 800edda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800edde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ede2:	4620      	mov	r0, r4
 800ede4:	ee10 2a10 	vmov	r2, s0
 800ede8:	465b      	mov	r3, fp
 800edea:	4639      	mov	r1, r7
 800edec:	f7f1 fd3e 	bl	800086c <__aeabi_ddiv>
 800edf0:	ec41 0b10 	vmov	d0, r0, r1
 800edf4:	b003      	add	sp, #12
 800edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edfa <__copybits>:
 800edfa:	3901      	subs	r1, #1
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	1149      	asrs	r1, r1, #5
 800ee00:	6914      	ldr	r4, [r2, #16]
 800ee02:	3101      	adds	r1, #1
 800ee04:	f102 0314 	add.w	r3, r2, #20
 800ee08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee10:	1f05      	subs	r5, r0, #4
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	d30c      	bcc.n	800ee30 <__copybits+0x36>
 800ee16:	1aa3      	subs	r3, r4, r2
 800ee18:	3b11      	subs	r3, #17
 800ee1a:	f023 0303 	bic.w	r3, r3, #3
 800ee1e:	3211      	adds	r2, #17
 800ee20:	42a2      	cmp	r2, r4
 800ee22:	bf88      	it	hi
 800ee24:	2300      	movhi	r3, #0
 800ee26:	4418      	add	r0, r3
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4288      	cmp	r0, r1
 800ee2c:	d305      	bcc.n	800ee3a <__copybits+0x40>
 800ee2e:	bd70      	pop	{r4, r5, r6, pc}
 800ee30:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee34:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee38:	e7eb      	b.n	800ee12 <__copybits+0x18>
 800ee3a:	f840 3b04 	str.w	r3, [r0], #4
 800ee3e:	e7f4      	b.n	800ee2a <__copybits+0x30>

0800ee40 <__any_on>:
 800ee40:	f100 0214 	add.w	r2, r0, #20
 800ee44:	6900      	ldr	r0, [r0, #16]
 800ee46:	114b      	asrs	r3, r1, #5
 800ee48:	4298      	cmp	r0, r3
 800ee4a:	b510      	push	{r4, lr}
 800ee4c:	db11      	blt.n	800ee72 <__any_on+0x32>
 800ee4e:	dd0a      	ble.n	800ee66 <__any_on+0x26>
 800ee50:	f011 011f 	ands.w	r1, r1, #31
 800ee54:	d007      	beq.n	800ee66 <__any_on+0x26>
 800ee56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee5a:	fa24 f001 	lsr.w	r0, r4, r1
 800ee5e:	fa00 f101 	lsl.w	r1, r0, r1
 800ee62:	428c      	cmp	r4, r1
 800ee64:	d10b      	bne.n	800ee7e <__any_on+0x3e>
 800ee66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d803      	bhi.n	800ee76 <__any_on+0x36>
 800ee6e:	2000      	movs	r0, #0
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	4603      	mov	r3, r0
 800ee74:	e7f7      	b.n	800ee66 <__any_on+0x26>
 800ee76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee7a:	2900      	cmp	r1, #0
 800ee7c:	d0f5      	beq.n	800ee6a <__any_on+0x2a>
 800ee7e:	2001      	movs	r0, #1
 800ee80:	e7f6      	b.n	800ee70 <__any_on+0x30>

0800ee82 <_calloc_r>:
 800ee82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee84:	fba1 2402 	umull	r2, r4, r1, r2
 800ee88:	b94c      	cbnz	r4, 800ee9e <_calloc_r+0x1c>
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	f000 f87b 	bl	800ef88 <_malloc_r>
 800ee92:	9a01      	ldr	r2, [sp, #4]
 800ee94:	4605      	mov	r5, r0
 800ee96:	b930      	cbnz	r0, 800eea6 <_calloc_r+0x24>
 800ee98:	4628      	mov	r0, r5
 800ee9a:	b003      	add	sp, #12
 800ee9c:	bd30      	pop	{r4, r5, pc}
 800ee9e:	220c      	movs	r2, #12
 800eea0:	6002      	str	r2, [r0, #0]
 800eea2:	2500      	movs	r5, #0
 800eea4:	e7f8      	b.n	800ee98 <_calloc_r+0x16>
 800eea6:	4621      	mov	r1, r4
 800eea8:	f7fb fd68 	bl	800a97c <memset>
 800eeac:	e7f4      	b.n	800ee98 <_calloc_r+0x16>
	...

0800eeb0 <_free_r>:
 800eeb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeb2:	2900      	cmp	r1, #0
 800eeb4:	d044      	beq.n	800ef40 <_free_r+0x90>
 800eeb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeba:	9001      	str	r0, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f1a1 0404 	sub.w	r4, r1, #4
 800eec2:	bfb8      	it	lt
 800eec4:	18e4      	addlt	r4, r4, r3
 800eec6:	f001 f821 	bl	800ff0c <__malloc_lock>
 800eeca:	4a1e      	ldr	r2, [pc, #120]	; (800ef44 <_free_r+0x94>)
 800eecc:	9801      	ldr	r0, [sp, #4]
 800eece:	6813      	ldr	r3, [r2, #0]
 800eed0:	b933      	cbnz	r3, 800eee0 <_free_r+0x30>
 800eed2:	6063      	str	r3, [r4, #4]
 800eed4:	6014      	str	r4, [r2, #0]
 800eed6:	b003      	add	sp, #12
 800eed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eedc:	f001 b81c 	b.w	800ff18 <__malloc_unlock>
 800eee0:	42a3      	cmp	r3, r4
 800eee2:	d908      	bls.n	800eef6 <_free_r+0x46>
 800eee4:	6825      	ldr	r5, [r4, #0]
 800eee6:	1961      	adds	r1, r4, r5
 800eee8:	428b      	cmp	r3, r1
 800eeea:	bf01      	itttt	eq
 800eeec:	6819      	ldreq	r1, [r3, #0]
 800eeee:	685b      	ldreq	r3, [r3, #4]
 800eef0:	1949      	addeq	r1, r1, r5
 800eef2:	6021      	streq	r1, [r4, #0]
 800eef4:	e7ed      	b.n	800eed2 <_free_r+0x22>
 800eef6:	461a      	mov	r2, r3
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	b10b      	cbz	r3, 800ef00 <_free_r+0x50>
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	d9fa      	bls.n	800eef6 <_free_r+0x46>
 800ef00:	6811      	ldr	r1, [r2, #0]
 800ef02:	1855      	adds	r5, r2, r1
 800ef04:	42a5      	cmp	r5, r4
 800ef06:	d10b      	bne.n	800ef20 <_free_r+0x70>
 800ef08:	6824      	ldr	r4, [r4, #0]
 800ef0a:	4421      	add	r1, r4
 800ef0c:	1854      	adds	r4, r2, r1
 800ef0e:	42a3      	cmp	r3, r4
 800ef10:	6011      	str	r1, [r2, #0]
 800ef12:	d1e0      	bne.n	800eed6 <_free_r+0x26>
 800ef14:	681c      	ldr	r4, [r3, #0]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	6053      	str	r3, [r2, #4]
 800ef1a:	4421      	add	r1, r4
 800ef1c:	6011      	str	r1, [r2, #0]
 800ef1e:	e7da      	b.n	800eed6 <_free_r+0x26>
 800ef20:	d902      	bls.n	800ef28 <_free_r+0x78>
 800ef22:	230c      	movs	r3, #12
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	e7d6      	b.n	800eed6 <_free_r+0x26>
 800ef28:	6825      	ldr	r5, [r4, #0]
 800ef2a:	1961      	adds	r1, r4, r5
 800ef2c:	428b      	cmp	r3, r1
 800ef2e:	bf04      	itt	eq
 800ef30:	6819      	ldreq	r1, [r3, #0]
 800ef32:	685b      	ldreq	r3, [r3, #4]
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	bf04      	itt	eq
 800ef38:	1949      	addeq	r1, r1, r5
 800ef3a:	6021      	streq	r1, [r4, #0]
 800ef3c:	6054      	str	r4, [r2, #4]
 800ef3e:	e7ca      	b.n	800eed6 <_free_r+0x26>
 800ef40:	b003      	add	sp, #12
 800ef42:	bd30      	pop	{r4, r5, pc}
 800ef44:	2000678c 	.word	0x2000678c

0800ef48 <sbrk_aligned>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4e0e      	ldr	r6, [pc, #56]	; (800ef84 <sbrk_aligned+0x3c>)
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	6831      	ldr	r1, [r6, #0]
 800ef50:	4605      	mov	r5, r0
 800ef52:	b911      	cbnz	r1, 800ef5a <sbrk_aligned+0x12>
 800ef54:	f000 fd28 	bl	800f9a8 <_sbrk_r>
 800ef58:	6030      	str	r0, [r6, #0]
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	f000 fd23 	bl	800f9a8 <_sbrk_r>
 800ef62:	1c43      	adds	r3, r0, #1
 800ef64:	d00a      	beq.n	800ef7c <sbrk_aligned+0x34>
 800ef66:	1cc4      	adds	r4, r0, #3
 800ef68:	f024 0403 	bic.w	r4, r4, #3
 800ef6c:	42a0      	cmp	r0, r4
 800ef6e:	d007      	beq.n	800ef80 <sbrk_aligned+0x38>
 800ef70:	1a21      	subs	r1, r4, r0
 800ef72:	4628      	mov	r0, r5
 800ef74:	f000 fd18 	bl	800f9a8 <_sbrk_r>
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d101      	bne.n	800ef80 <sbrk_aligned+0x38>
 800ef7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ef80:	4620      	mov	r0, r4
 800ef82:	bd70      	pop	{r4, r5, r6, pc}
 800ef84:	20006790 	.word	0x20006790

0800ef88 <_malloc_r>:
 800ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8c:	1ccd      	adds	r5, r1, #3
 800ef8e:	f025 0503 	bic.w	r5, r5, #3
 800ef92:	3508      	adds	r5, #8
 800ef94:	2d0c      	cmp	r5, #12
 800ef96:	bf38      	it	cc
 800ef98:	250c      	movcc	r5, #12
 800ef9a:	2d00      	cmp	r5, #0
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	db01      	blt.n	800efa4 <_malloc_r+0x1c>
 800efa0:	42a9      	cmp	r1, r5
 800efa2:	d905      	bls.n	800efb0 <_malloc_r+0x28>
 800efa4:	230c      	movs	r3, #12
 800efa6:	603b      	str	r3, [r7, #0]
 800efa8:	2600      	movs	r6, #0
 800efaa:	4630      	mov	r0, r6
 800efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb0:	4e2e      	ldr	r6, [pc, #184]	; (800f06c <_malloc_r+0xe4>)
 800efb2:	f000 ffab 	bl	800ff0c <__malloc_lock>
 800efb6:	6833      	ldr	r3, [r6, #0]
 800efb8:	461c      	mov	r4, r3
 800efba:	bb34      	cbnz	r4, 800f00a <_malloc_r+0x82>
 800efbc:	4629      	mov	r1, r5
 800efbe:	4638      	mov	r0, r7
 800efc0:	f7ff ffc2 	bl	800ef48 <sbrk_aligned>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	4604      	mov	r4, r0
 800efc8:	d14d      	bne.n	800f066 <_malloc_r+0xde>
 800efca:	6834      	ldr	r4, [r6, #0]
 800efcc:	4626      	mov	r6, r4
 800efce:	2e00      	cmp	r6, #0
 800efd0:	d140      	bne.n	800f054 <_malloc_r+0xcc>
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	4631      	mov	r1, r6
 800efd6:	4638      	mov	r0, r7
 800efd8:	eb04 0803 	add.w	r8, r4, r3
 800efdc:	f000 fce4 	bl	800f9a8 <_sbrk_r>
 800efe0:	4580      	cmp	r8, r0
 800efe2:	d13a      	bne.n	800f05a <_malloc_r+0xd2>
 800efe4:	6821      	ldr	r1, [r4, #0]
 800efe6:	3503      	adds	r5, #3
 800efe8:	1a6d      	subs	r5, r5, r1
 800efea:	f025 0503 	bic.w	r5, r5, #3
 800efee:	3508      	adds	r5, #8
 800eff0:	2d0c      	cmp	r5, #12
 800eff2:	bf38      	it	cc
 800eff4:	250c      	movcc	r5, #12
 800eff6:	4629      	mov	r1, r5
 800eff8:	4638      	mov	r0, r7
 800effa:	f7ff ffa5 	bl	800ef48 <sbrk_aligned>
 800effe:	3001      	adds	r0, #1
 800f000:	d02b      	beq.n	800f05a <_malloc_r+0xd2>
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	442b      	add	r3, r5
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	e00e      	b.n	800f028 <_malloc_r+0xa0>
 800f00a:	6822      	ldr	r2, [r4, #0]
 800f00c:	1b52      	subs	r2, r2, r5
 800f00e:	d41e      	bmi.n	800f04e <_malloc_r+0xc6>
 800f010:	2a0b      	cmp	r2, #11
 800f012:	d916      	bls.n	800f042 <_malloc_r+0xba>
 800f014:	1961      	adds	r1, r4, r5
 800f016:	42a3      	cmp	r3, r4
 800f018:	6025      	str	r5, [r4, #0]
 800f01a:	bf18      	it	ne
 800f01c:	6059      	strne	r1, [r3, #4]
 800f01e:	6863      	ldr	r3, [r4, #4]
 800f020:	bf08      	it	eq
 800f022:	6031      	streq	r1, [r6, #0]
 800f024:	5162      	str	r2, [r4, r5]
 800f026:	604b      	str	r3, [r1, #4]
 800f028:	4638      	mov	r0, r7
 800f02a:	f104 060b 	add.w	r6, r4, #11
 800f02e:	f000 ff73 	bl	800ff18 <__malloc_unlock>
 800f032:	f026 0607 	bic.w	r6, r6, #7
 800f036:	1d23      	adds	r3, r4, #4
 800f038:	1af2      	subs	r2, r6, r3
 800f03a:	d0b6      	beq.n	800efaa <_malloc_r+0x22>
 800f03c:	1b9b      	subs	r3, r3, r6
 800f03e:	50a3      	str	r3, [r4, r2]
 800f040:	e7b3      	b.n	800efaa <_malloc_r+0x22>
 800f042:	6862      	ldr	r2, [r4, #4]
 800f044:	42a3      	cmp	r3, r4
 800f046:	bf0c      	ite	eq
 800f048:	6032      	streq	r2, [r6, #0]
 800f04a:	605a      	strne	r2, [r3, #4]
 800f04c:	e7ec      	b.n	800f028 <_malloc_r+0xa0>
 800f04e:	4623      	mov	r3, r4
 800f050:	6864      	ldr	r4, [r4, #4]
 800f052:	e7b2      	b.n	800efba <_malloc_r+0x32>
 800f054:	4634      	mov	r4, r6
 800f056:	6876      	ldr	r6, [r6, #4]
 800f058:	e7b9      	b.n	800efce <_malloc_r+0x46>
 800f05a:	230c      	movs	r3, #12
 800f05c:	603b      	str	r3, [r7, #0]
 800f05e:	4638      	mov	r0, r7
 800f060:	f000 ff5a 	bl	800ff18 <__malloc_unlock>
 800f064:	e7a1      	b.n	800efaa <_malloc_r+0x22>
 800f066:	6025      	str	r5, [r4, #0]
 800f068:	e7de      	b.n	800f028 <_malloc_r+0xa0>
 800f06a:	bf00      	nop
 800f06c:	2000678c 	.word	0x2000678c

0800f070 <__ssputs_r>:
 800f070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f074:	688e      	ldr	r6, [r1, #8]
 800f076:	429e      	cmp	r6, r3
 800f078:	4682      	mov	sl, r0
 800f07a:	460c      	mov	r4, r1
 800f07c:	4690      	mov	r8, r2
 800f07e:	461f      	mov	r7, r3
 800f080:	d838      	bhi.n	800f0f4 <__ssputs_r+0x84>
 800f082:	898a      	ldrh	r2, [r1, #12]
 800f084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f088:	d032      	beq.n	800f0f0 <__ssputs_r+0x80>
 800f08a:	6825      	ldr	r5, [r4, #0]
 800f08c:	6909      	ldr	r1, [r1, #16]
 800f08e:	eba5 0901 	sub.w	r9, r5, r1
 800f092:	6965      	ldr	r5, [r4, #20]
 800f094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f09c:	3301      	adds	r3, #1
 800f09e:	444b      	add	r3, r9
 800f0a0:	106d      	asrs	r5, r5, #1
 800f0a2:	429d      	cmp	r5, r3
 800f0a4:	bf38      	it	cc
 800f0a6:	461d      	movcc	r5, r3
 800f0a8:	0553      	lsls	r3, r2, #21
 800f0aa:	d531      	bpl.n	800f110 <__ssputs_r+0xa0>
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	f7ff ff6b 	bl	800ef88 <_malloc_r>
 800f0b2:	4606      	mov	r6, r0
 800f0b4:	b950      	cbnz	r0, 800f0cc <__ssputs_r+0x5c>
 800f0b6:	230c      	movs	r3, #12
 800f0b8:	f8ca 3000 	str.w	r3, [sl]
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0cc:	6921      	ldr	r1, [r4, #16]
 800f0ce:	464a      	mov	r2, r9
 800f0d0:	f7fb fc46 	bl	800a960 <memcpy>
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0de:	81a3      	strh	r3, [r4, #12]
 800f0e0:	6126      	str	r6, [r4, #16]
 800f0e2:	6165      	str	r5, [r4, #20]
 800f0e4:	444e      	add	r6, r9
 800f0e6:	eba5 0509 	sub.w	r5, r5, r9
 800f0ea:	6026      	str	r6, [r4, #0]
 800f0ec:	60a5      	str	r5, [r4, #8]
 800f0ee:	463e      	mov	r6, r7
 800f0f0:	42be      	cmp	r6, r7
 800f0f2:	d900      	bls.n	800f0f6 <__ssputs_r+0x86>
 800f0f4:	463e      	mov	r6, r7
 800f0f6:	6820      	ldr	r0, [r4, #0]
 800f0f8:	4632      	mov	r2, r6
 800f0fa:	4641      	mov	r1, r8
 800f0fc:	f000 feeb 	bl	800fed6 <memmove>
 800f100:	68a3      	ldr	r3, [r4, #8]
 800f102:	1b9b      	subs	r3, r3, r6
 800f104:	60a3      	str	r3, [r4, #8]
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	4433      	add	r3, r6
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	2000      	movs	r0, #0
 800f10e:	e7db      	b.n	800f0c8 <__ssputs_r+0x58>
 800f110:	462a      	mov	r2, r5
 800f112:	f000 ff07 	bl	800ff24 <_realloc_r>
 800f116:	4606      	mov	r6, r0
 800f118:	2800      	cmp	r0, #0
 800f11a:	d1e1      	bne.n	800f0e0 <__ssputs_r+0x70>
 800f11c:	6921      	ldr	r1, [r4, #16]
 800f11e:	4650      	mov	r0, sl
 800f120:	f7ff fec6 	bl	800eeb0 <_free_r>
 800f124:	e7c7      	b.n	800f0b6 <__ssputs_r+0x46>
	...

0800f128 <_svfiprintf_r>:
 800f128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12c:	4698      	mov	r8, r3
 800f12e:	898b      	ldrh	r3, [r1, #12]
 800f130:	061b      	lsls	r3, r3, #24
 800f132:	b09d      	sub	sp, #116	; 0x74
 800f134:	4607      	mov	r7, r0
 800f136:	460d      	mov	r5, r1
 800f138:	4614      	mov	r4, r2
 800f13a:	d50e      	bpl.n	800f15a <_svfiprintf_r+0x32>
 800f13c:	690b      	ldr	r3, [r1, #16]
 800f13e:	b963      	cbnz	r3, 800f15a <_svfiprintf_r+0x32>
 800f140:	2140      	movs	r1, #64	; 0x40
 800f142:	f7ff ff21 	bl	800ef88 <_malloc_r>
 800f146:	6028      	str	r0, [r5, #0]
 800f148:	6128      	str	r0, [r5, #16]
 800f14a:	b920      	cbnz	r0, 800f156 <_svfiprintf_r+0x2e>
 800f14c:	230c      	movs	r3, #12
 800f14e:	603b      	str	r3, [r7, #0]
 800f150:	f04f 30ff 	mov.w	r0, #4294967295
 800f154:	e0d1      	b.n	800f2fa <_svfiprintf_r+0x1d2>
 800f156:	2340      	movs	r3, #64	; 0x40
 800f158:	616b      	str	r3, [r5, #20]
 800f15a:	2300      	movs	r3, #0
 800f15c:	9309      	str	r3, [sp, #36]	; 0x24
 800f15e:	2320      	movs	r3, #32
 800f160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f164:	f8cd 800c 	str.w	r8, [sp, #12]
 800f168:	2330      	movs	r3, #48	; 0x30
 800f16a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f314 <_svfiprintf_r+0x1ec>
 800f16e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f172:	f04f 0901 	mov.w	r9, #1
 800f176:	4623      	mov	r3, r4
 800f178:	469a      	mov	sl, r3
 800f17a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f17e:	b10a      	cbz	r2, 800f184 <_svfiprintf_r+0x5c>
 800f180:	2a25      	cmp	r2, #37	; 0x25
 800f182:	d1f9      	bne.n	800f178 <_svfiprintf_r+0x50>
 800f184:	ebba 0b04 	subs.w	fp, sl, r4
 800f188:	d00b      	beq.n	800f1a2 <_svfiprintf_r+0x7a>
 800f18a:	465b      	mov	r3, fp
 800f18c:	4622      	mov	r2, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	4638      	mov	r0, r7
 800f192:	f7ff ff6d 	bl	800f070 <__ssputs_r>
 800f196:	3001      	adds	r0, #1
 800f198:	f000 80aa 	beq.w	800f2f0 <_svfiprintf_r+0x1c8>
 800f19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f19e:	445a      	add	r2, fp
 800f1a0:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f000 80a2 	beq.w	800f2f0 <_svfiprintf_r+0x1c8>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1b6:	f10a 0a01 	add.w	sl, sl, #1
 800f1ba:	9304      	str	r3, [sp, #16]
 800f1bc:	9307      	str	r3, [sp, #28]
 800f1be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1c2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1c4:	4654      	mov	r4, sl
 800f1c6:	2205      	movs	r2, #5
 800f1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1cc:	4851      	ldr	r0, [pc, #324]	; (800f314 <_svfiprintf_r+0x1ec>)
 800f1ce:	f7f1 f817 	bl	8000200 <memchr>
 800f1d2:	9a04      	ldr	r2, [sp, #16]
 800f1d4:	b9d8      	cbnz	r0, 800f20e <_svfiprintf_r+0xe6>
 800f1d6:	06d0      	lsls	r0, r2, #27
 800f1d8:	bf44      	itt	mi
 800f1da:	2320      	movmi	r3, #32
 800f1dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1e0:	0711      	lsls	r1, r2, #28
 800f1e2:	bf44      	itt	mi
 800f1e4:	232b      	movmi	r3, #43	; 0x2b
 800f1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f0:	d015      	beq.n	800f21e <_svfiprintf_r+0xf6>
 800f1f2:	9a07      	ldr	r2, [sp, #28]
 800f1f4:	4654      	mov	r4, sl
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	f04f 0c0a 	mov.w	ip, #10
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f202:	3b30      	subs	r3, #48	; 0x30
 800f204:	2b09      	cmp	r3, #9
 800f206:	d94e      	bls.n	800f2a6 <_svfiprintf_r+0x17e>
 800f208:	b1b0      	cbz	r0, 800f238 <_svfiprintf_r+0x110>
 800f20a:	9207      	str	r2, [sp, #28]
 800f20c:	e014      	b.n	800f238 <_svfiprintf_r+0x110>
 800f20e:	eba0 0308 	sub.w	r3, r0, r8
 800f212:	fa09 f303 	lsl.w	r3, r9, r3
 800f216:	4313      	orrs	r3, r2
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	46a2      	mov	sl, r4
 800f21c:	e7d2      	b.n	800f1c4 <_svfiprintf_r+0x9c>
 800f21e:	9b03      	ldr	r3, [sp, #12]
 800f220:	1d19      	adds	r1, r3, #4
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	9103      	str	r1, [sp, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	bfbb      	ittet	lt
 800f22a:	425b      	neglt	r3, r3
 800f22c:	f042 0202 	orrlt.w	r2, r2, #2
 800f230:	9307      	strge	r3, [sp, #28]
 800f232:	9307      	strlt	r3, [sp, #28]
 800f234:	bfb8      	it	lt
 800f236:	9204      	strlt	r2, [sp, #16]
 800f238:	7823      	ldrb	r3, [r4, #0]
 800f23a:	2b2e      	cmp	r3, #46	; 0x2e
 800f23c:	d10c      	bne.n	800f258 <_svfiprintf_r+0x130>
 800f23e:	7863      	ldrb	r3, [r4, #1]
 800f240:	2b2a      	cmp	r3, #42	; 0x2a
 800f242:	d135      	bne.n	800f2b0 <_svfiprintf_r+0x188>
 800f244:	9b03      	ldr	r3, [sp, #12]
 800f246:	1d1a      	adds	r2, r3, #4
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	9203      	str	r2, [sp, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bfb8      	it	lt
 800f250:	f04f 33ff 	movlt.w	r3, #4294967295
 800f254:	3402      	adds	r4, #2
 800f256:	9305      	str	r3, [sp, #20]
 800f258:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f324 <_svfiprintf_r+0x1fc>
 800f25c:	7821      	ldrb	r1, [r4, #0]
 800f25e:	2203      	movs	r2, #3
 800f260:	4650      	mov	r0, sl
 800f262:	f7f0 ffcd 	bl	8000200 <memchr>
 800f266:	b140      	cbz	r0, 800f27a <_svfiprintf_r+0x152>
 800f268:	2340      	movs	r3, #64	; 0x40
 800f26a:	eba0 000a 	sub.w	r0, r0, sl
 800f26e:	fa03 f000 	lsl.w	r0, r3, r0
 800f272:	9b04      	ldr	r3, [sp, #16]
 800f274:	4303      	orrs	r3, r0
 800f276:	3401      	adds	r4, #1
 800f278:	9304      	str	r3, [sp, #16]
 800f27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27e:	4826      	ldr	r0, [pc, #152]	; (800f318 <_svfiprintf_r+0x1f0>)
 800f280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f284:	2206      	movs	r2, #6
 800f286:	f7f0 ffbb 	bl	8000200 <memchr>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d038      	beq.n	800f300 <_svfiprintf_r+0x1d8>
 800f28e:	4b23      	ldr	r3, [pc, #140]	; (800f31c <_svfiprintf_r+0x1f4>)
 800f290:	bb1b      	cbnz	r3, 800f2da <_svfiprintf_r+0x1b2>
 800f292:	9b03      	ldr	r3, [sp, #12]
 800f294:	3307      	adds	r3, #7
 800f296:	f023 0307 	bic.w	r3, r3, #7
 800f29a:	3308      	adds	r3, #8
 800f29c:	9303      	str	r3, [sp, #12]
 800f29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a0:	4433      	add	r3, r6
 800f2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a4:	e767      	b.n	800f176 <_svfiprintf_r+0x4e>
 800f2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	2001      	movs	r0, #1
 800f2ae:	e7a5      	b.n	800f1fc <_svfiprintf_r+0xd4>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	3401      	adds	r4, #1
 800f2b4:	9305      	str	r3, [sp, #20]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	f04f 0c0a 	mov.w	ip, #10
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2c2:	3a30      	subs	r2, #48	; 0x30
 800f2c4:	2a09      	cmp	r2, #9
 800f2c6:	d903      	bls.n	800f2d0 <_svfiprintf_r+0x1a8>
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0c5      	beq.n	800f258 <_svfiprintf_r+0x130>
 800f2cc:	9105      	str	r1, [sp, #20]
 800f2ce:	e7c3      	b.n	800f258 <_svfiprintf_r+0x130>
 800f2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e7f0      	b.n	800f2bc <_svfiprintf_r+0x194>
 800f2da:	ab03      	add	r3, sp, #12
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	462a      	mov	r2, r5
 800f2e0:	4b0f      	ldr	r3, [pc, #60]	; (800f320 <_svfiprintf_r+0x1f8>)
 800f2e2:	a904      	add	r1, sp, #16
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7fb fe63 	bl	800afb0 <_printf_float>
 800f2ea:	1c42      	adds	r2, r0, #1
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	d1d6      	bne.n	800f29e <_svfiprintf_r+0x176>
 800f2f0:	89ab      	ldrh	r3, [r5, #12]
 800f2f2:	065b      	lsls	r3, r3, #25
 800f2f4:	f53f af2c 	bmi.w	800f150 <_svfiprintf_r+0x28>
 800f2f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2fa:	b01d      	add	sp, #116	; 0x74
 800f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f300:	ab03      	add	r3, sp, #12
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	462a      	mov	r2, r5
 800f306:	4b06      	ldr	r3, [pc, #24]	; (800f320 <_svfiprintf_r+0x1f8>)
 800f308:	a904      	add	r1, sp, #16
 800f30a:	4638      	mov	r0, r7
 800f30c:	f7fc f8f4 	bl	800b4f8 <_printf_i>
 800f310:	e7eb      	b.n	800f2ea <_svfiprintf_r+0x1c2>
 800f312:	bf00      	nop
 800f314:	08010c74 	.word	0x08010c74
 800f318:	08010c7e 	.word	0x08010c7e
 800f31c:	0800afb1 	.word	0x0800afb1
 800f320:	0800f071 	.word	0x0800f071
 800f324:	08010c7a 	.word	0x08010c7a

0800f328 <_sungetc_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	1c4b      	adds	r3, r1, #1
 800f32c:	4614      	mov	r4, r2
 800f32e:	d103      	bne.n	800f338 <_sungetc_r+0x10>
 800f330:	f04f 35ff 	mov.w	r5, #4294967295
 800f334:	4628      	mov	r0, r5
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	8993      	ldrh	r3, [r2, #12]
 800f33a:	f023 0320 	bic.w	r3, r3, #32
 800f33e:	8193      	strh	r3, [r2, #12]
 800f340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f342:	6852      	ldr	r2, [r2, #4]
 800f344:	b2cd      	uxtb	r5, r1
 800f346:	b18b      	cbz	r3, 800f36c <_sungetc_r+0x44>
 800f348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f34a:	4293      	cmp	r3, r2
 800f34c:	dd08      	ble.n	800f360 <_sungetc_r+0x38>
 800f34e:	6823      	ldr	r3, [r4, #0]
 800f350:	1e5a      	subs	r2, r3, #1
 800f352:	6022      	str	r2, [r4, #0]
 800f354:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f358:	6863      	ldr	r3, [r4, #4]
 800f35a:	3301      	adds	r3, #1
 800f35c:	6063      	str	r3, [r4, #4]
 800f35e:	e7e9      	b.n	800f334 <_sungetc_r+0xc>
 800f360:	4621      	mov	r1, r4
 800f362:	f000 fb7d 	bl	800fa60 <__submore>
 800f366:	2800      	cmp	r0, #0
 800f368:	d0f1      	beq.n	800f34e <_sungetc_r+0x26>
 800f36a:	e7e1      	b.n	800f330 <_sungetc_r+0x8>
 800f36c:	6921      	ldr	r1, [r4, #16]
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	b151      	cbz	r1, 800f388 <_sungetc_r+0x60>
 800f372:	4299      	cmp	r1, r3
 800f374:	d208      	bcs.n	800f388 <_sungetc_r+0x60>
 800f376:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f37a:	42a9      	cmp	r1, r5
 800f37c:	d104      	bne.n	800f388 <_sungetc_r+0x60>
 800f37e:	3b01      	subs	r3, #1
 800f380:	3201      	adds	r2, #1
 800f382:	6023      	str	r3, [r4, #0]
 800f384:	6062      	str	r2, [r4, #4]
 800f386:	e7d5      	b.n	800f334 <_sungetc_r+0xc>
 800f388:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f390:	6363      	str	r3, [r4, #52]	; 0x34
 800f392:	2303      	movs	r3, #3
 800f394:	63a3      	str	r3, [r4, #56]	; 0x38
 800f396:	4623      	mov	r3, r4
 800f398:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e7dc      	b.n	800f35c <_sungetc_r+0x34>

0800f3a2 <__ssrefill_r>:
 800f3a2:	b510      	push	{r4, lr}
 800f3a4:	460c      	mov	r4, r1
 800f3a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f3a8:	b169      	cbz	r1, 800f3c6 <__ssrefill_r+0x24>
 800f3aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3ae:	4299      	cmp	r1, r3
 800f3b0:	d001      	beq.n	800f3b6 <__ssrefill_r+0x14>
 800f3b2:	f7ff fd7d 	bl	800eeb0 <_free_r>
 800f3b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3b8:	6063      	str	r3, [r4, #4]
 800f3ba:	2000      	movs	r0, #0
 800f3bc:	6360      	str	r0, [r4, #52]	; 0x34
 800f3be:	b113      	cbz	r3, 800f3c6 <__ssrefill_r+0x24>
 800f3c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f3c2:	6023      	str	r3, [r4, #0]
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	6923      	ldr	r3, [r4, #16]
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	6063      	str	r3, [r4, #4]
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f043 0320 	orr.w	r3, r3, #32
 800f3d4:	81a3      	strh	r3, [r4, #12]
 800f3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3da:	e7f3      	b.n	800f3c4 <__ssrefill_r+0x22>

0800f3dc <__ssvfiscanf_r>:
 800f3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f3ec:	49a6      	ldr	r1, [pc, #664]	; (800f688 <__ssvfiscanf_r+0x2ac>)
 800f3ee:	91a0      	str	r1, [sp, #640]	; 0x280
 800f3f0:	f10d 0804 	add.w	r8, sp, #4
 800f3f4:	49a5      	ldr	r1, [pc, #660]	; (800f68c <__ssvfiscanf_r+0x2b0>)
 800f3f6:	4fa6      	ldr	r7, [pc, #664]	; (800f690 <__ssvfiscanf_r+0x2b4>)
 800f3f8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f694 <__ssvfiscanf_r+0x2b8>
 800f3fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f400:	4606      	mov	r6, r0
 800f402:	91a1      	str	r1, [sp, #644]	; 0x284
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	7813      	ldrb	r3, [r2, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 815a 	beq.w	800f6c2 <__ssvfiscanf_r+0x2e6>
 800f40e:	5dd9      	ldrb	r1, [r3, r7]
 800f410:	f011 0108 	ands.w	r1, r1, #8
 800f414:	f102 0501 	add.w	r5, r2, #1
 800f418:	d019      	beq.n	800f44e <__ssvfiscanf_r+0x72>
 800f41a:	6863      	ldr	r3, [r4, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd0f      	ble.n	800f440 <__ssvfiscanf_r+0x64>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	781a      	ldrb	r2, [r3, #0]
 800f424:	5cba      	ldrb	r2, [r7, r2]
 800f426:	0712      	lsls	r2, r2, #28
 800f428:	d401      	bmi.n	800f42e <__ssvfiscanf_r+0x52>
 800f42a:	462a      	mov	r2, r5
 800f42c:	e7eb      	b.n	800f406 <__ssvfiscanf_r+0x2a>
 800f42e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f430:	3201      	adds	r2, #1
 800f432:	9245      	str	r2, [sp, #276]	; 0x114
 800f434:	6862      	ldr	r2, [r4, #4]
 800f436:	3301      	adds	r3, #1
 800f438:	3a01      	subs	r2, #1
 800f43a:	6062      	str	r2, [r4, #4]
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	e7ec      	b.n	800f41a <__ssvfiscanf_r+0x3e>
 800f440:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f442:	4621      	mov	r1, r4
 800f444:	4630      	mov	r0, r6
 800f446:	4798      	blx	r3
 800f448:	2800      	cmp	r0, #0
 800f44a:	d0e9      	beq.n	800f420 <__ssvfiscanf_r+0x44>
 800f44c:	e7ed      	b.n	800f42a <__ssvfiscanf_r+0x4e>
 800f44e:	2b25      	cmp	r3, #37	; 0x25
 800f450:	d012      	beq.n	800f478 <__ssvfiscanf_r+0x9c>
 800f452:	469a      	mov	sl, r3
 800f454:	6863      	ldr	r3, [r4, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f340 8091 	ble.w	800f57e <__ssvfiscanf_r+0x1a2>
 800f45c:	6822      	ldr	r2, [r4, #0]
 800f45e:	7813      	ldrb	r3, [r2, #0]
 800f460:	4553      	cmp	r3, sl
 800f462:	f040 812e 	bne.w	800f6c2 <__ssvfiscanf_r+0x2e6>
 800f466:	6863      	ldr	r3, [r4, #4]
 800f468:	3b01      	subs	r3, #1
 800f46a:	6063      	str	r3, [r4, #4]
 800f46c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f46e:	3201      	adds	r2, #1
 800f470:	3301      	adds	r3, #1
 800f472:	6022      	str	r2, [r4, #0]
 800f474:	9345      	str	r3, [sp, #276]	; 0x114
 800f476:	e7d8      	b.n	800f42a <__ssvfiscanf_r+0x4e>
 800f478:	9141      	str	r1, [sp, #260]	; 0x104
 800f47a:	9143      	str	r1, [sp, #268]	; 0x10c
 800f47c:	7853      	ldrb	r3, [r2, #1]
 800f47e:	2b2a      	cmp	r3, #42	; 0x2a
 800f480:	bf02      	ittt	eq
 800f482:	2310      	moveq	r3, #16
 800f484:	1c95      	addeq	r5, r2, #2
 800f486:	9341      	streq	r3, [sp, #260]	; 0x104
 800f488:	220a      	movs	r2, #10
 800f48a:	46aa      	mov	sl, r5
 800f48c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f490:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f494:	2b09      	cmp	r3, #9
 800f496:	d91d      	bls.n	800f4d4 <__ssvfiscanf_r+0xf8>
 800f498:	487e      	ldr	r0, [pc, #504]	; (800f694 <__ssvfiscanf_r+0x2b8>)
 800f49a:	2203      	movs	r2, #3
 800f49c:	f7f0 feb0 	bl	8000200 <memchr>
 800f4a0:	b140      	cbz	r0, 800f4b4 <__ssvfiscanf_r+0xd8>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	eba0 0009 	sub.w	r0, r0, r9
 800f4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f4ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f4ae:	4318      	orrs	r0, r3
 800f4b0:	9041      	str	r0, [sp, #260]	; 0x104
 800f4b2:	4655      	mov	r5, sl
 800f4b4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f4b8:	2b78      	cmp	r3, #120	; 0x78
 800f4ba:	d806      	bhi.n	800f4ca <__ssvfiscanf_r+0xee>
 800f4bc:	2b57      	cmp	r3, #87	; 0x57
 800f4be:	d810      	bhi.n	800f4e2 <__ssvfiscanf_r+0x106>
 800f4c0:	2b25      	cmp	r3, #37	; 0x25
 800f4c2:	d0c6      	beq.n	800f452 <__ssvfiscanf_r+0x76>
 800f4c4:	d856      	bhi.n	800f574 <__ssvfiscanf_r+0x198>
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d064      	beq.n	800f594 <__ssvfiscanf_r+0x1b8>
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	9347      	str	r3, [sp, #284]	; 0x11c
 800f4ce:	230a      	movs	r3, #10
 800f4d0:	9342      	str	r3, [sp, #264]	; 0x108
 800f4d2:	e071      	b.n	800f5b8 <__ssvfiscanf_r+0x1dc>
 800f4d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f4d6:	fb02 1103 	mla	r1, r2, r3, r1
 800f4da:	3930      	subs	r1, #48	; 0x30
 800f4dc:	9143      	str	r1, [sp, #268]	; 0x10c
 800f4de:	4655      	mov	r5, sl
 800f4e0:	e7d3      	b.n	800f48a <__ssvfiscanf_r+0xae>
 800f4e2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f4e6:	2a20      	cmp	r2, #32
 800f4e8:	d8ef      	bhi.n	800f4ca <__ssvfiscanf_r+0xee>
 800f4ea:	a101      	add	r1, pc, #4	; (adr r1, 800f4f0 <__ssvfiscanf_r+0x114>)
 800f4ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f4f0:	0800f5a3 	.word	0x0800f5a3
 800f4f4:	0800f4cb 	.word	0x0800f4cb
 800f4f8:	0800f4cb 	.word	0x0800f4cb
 800f4fc:	0800f601 	.word	0x0800f601
 800f500:	0800f4cb 	.word	0x0800f4cb
 800f504:	0800f4cb 	.word	0x0800f4cb
 800f508:	0800f4cb 	.word	0x0800f4cb
 800f50c:	0800f4cb 	.word	0x0800f4cb
 800f510:	0800f4cb 	.word	0x0800f4cb
 800f514:	0800f4cb 	.word	0x0800f4cb
 800f518:	0800f4cb 	.word	0x0800f4cb
 800f51c:	0800f617 	.word	0x0800f617
 800f520:	0800f5ed 	.word	0x0800f5ed
 800f524:	0800f57b 	.word	0x0800f57b
 800f528:	0800f57b 	.word	0x0800f57b
 800f52c:	0800f57b 	.word	0x0800f57b
 800f530:	0800f4cb 	.word	0x0800f4cb
 800f534:	0800f5f1 	.word	0x0800f5f1
 800f538:	0800f4cb 	.word	0x0800f4cb
 800f53c:	0800f4cb 	.word	0x0800f4cb
 800f540:	0800f4cb 	.word	0x0800f4cb
 800f544:	0800f4cb 	.word	0x0800f4cb
 800f548:	0800f627 	.word	0x0800f627
 800f54c:	0800f5f9 	.word	0x0800f5f9
 800f550:	0800f59b 	.word	0x0800f59b
 800f554:	0800f4cb 	.word	0x0800f4cb
 800f558:	0800f4cb 	.word	0x0800f4cb
 800f55c:	0800f623 	.word	0x0800f623
 800f560:	0800f4cb 	.word	0x0800f4cb
 800f564:	0800f5ed 	.word	0x0800f5ed
 800f568:	0800f4cb 	.word	0x0800f4cb
 800f56c:	0800f4cb 	.word	0x0800f4cb
 800f570:	0800f5a3 	.word	0x0800f5a3
 800f574:	3b45      	subs	r3, #69	; 0x45
 800f576:	2b02      	cmp	r3, #2
 800f578:	d8a7      	bhi.n	800f4ca <__ssvfiscanf_r+0xee>
 800f57a:	2305      	movs	r3, #5
 800f57c:	e01b      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f57e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f580:	4621      	mov	r1, r4
 800f582:	4630      	mov	r0, r6
 800f584:	4798      	blx	r3
 800f586:	2800      	cmp	r0, #0
 800f588:	f43f af68 	beq.w	800f45c <__ssvfiscanf_r+0x80>
 800f58c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f58e:	2800      	cmp	r0, #0
 800f590:	f040 808d 	bne.w	800f6ae <__ssvfiscanf_r+0x2d2>
 800f594:	f04f 30ff 	mov.w	r0, #4294967295
 800f598:	e08f      	b.n	800f6ba <__ssvfiscanf_r+0x2de>
 800f59a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f59c:	f042 0220 	orr.w	r2, r2, #32
 800f5a0:	9241      	str	r2, [sp, #260]	; 0x104
 800f5a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f5a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5a8:	9241      	str	r2, [sp, #260]	; 0x104
 800f5aa:	2210      	movs	r2, #16
 800f5ac:	2b6f      	cmp	r3, #111	; 0x6f
 800f5ae:	9242      	str	r2, [sp, #264]	; 0x108
 800f5b0:	bf34      	ite	cc
 800f5b2:	2303      	movcc	r3, #3
 800f5b4:	2304      	movcs	r3, #4
 800f5b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f5b8:	6863      	ldr	r3, [r4, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	dd42      	ble.n	800f644 <__ssvfiscanf_r+0x268>
 800f5be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f5c0:	0659      	lsls	r1, r3, #25
 800f5c2:	d404      	bmi.n	800f5ce <__ssvfiscanf_r+0x1f2>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	781a      	ldrb	r2, [r3, #0]
 800f5c8:	5cba      	ldrb	r2, [r7, r2]
 800f5ca:	0712      	lsls	r2, r2, #28
 800f5cc:	d441      	bmi.n	800f652 <__ssvfiscanf_r+0x276>
 800f5ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	dc50      	bgt.n	800f676 <__ssvfiscanf_r+0x29a>
 800f5d4:	466b      	mov	r3, sp
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	a941      	add	r1, sp, #260	; 0x104
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f876 	bl	800f6cc <_scanf_chars>
 800f5e0:	2801      	cmp	r0, #1
 800f5e2:	d06e      	beq.n	800f6c2 <__ssvfiscanf_r+0x2e6>
 800f5e4:	2802      	cmp	r0, #2
 800f5e6:	f47f af20 	bne.w	800f42a <__ssvfiscanf_r+0x4e>
 800f5ea:	e7cf      	b.n	800f58c <__ssvfiscanf_r+0x1b0>
 800f5ec:	220a      	movs	r2, #10
 800f5ee:	e7dd      	b.n	800f5ac <__ssvfiscanf_r+0x1d0>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	9342      	str	r3, [sp, #264]	; 0x108
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	e7de      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f5f8:	2308      	movs	r3, #8
 800f5fa:	9342      	str	r3, [sp, #264]	; 0x108
 800f5fc:	2304      	movs	r3, #4
 800f5fe:	e7da      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f600:	4629      	mov	r1, r5
 800f602:	4640      	mov	r0, r8
 800f604:	f000 f9e0 	bl	800f9c8 <__sccl>
 800f608:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f60e:	9341      	str	r3, [sp, #260]	; 0x104
 800f610:	4605      	mov	r5, r0
 800f612:	2301      	movs	r3, #1
 800f614:	e7cf      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f616:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61c:	9341      	str	r3, [sp, #260]	; 0x104
 800f61e:	2300      	movs	r3, #0
 800f620:	e7c9      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f622:	2302      	movs	r3, #2
 800f624:	e7c7      	b.n	800f5b6 <__ssvfiscanf_r+0x1da>
 800f626:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f628:	06c3      	lsls	r3, r0, #27
 800f62a:	f53f aefe 	bmi.w	800f42a <__ssvfiscanf_r+0x4e>
 800f62e:	9b00      	ldr	r3, [sp, #0]
 800f630:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f632:	1d19      	adds	r1, r3, #4
 800f634:	9100      	str	r1, [sp, #0]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f010 0f01 	tst.w	r0, #1
 800f63c:	bf14      	ite	ne
 800f63e:	801a      	strhne	r2, [r3, #0]
 800f640:	601a      	streq	r2, [r3, #0]
 800f642:	e6f2      	b.n	800f42a <__ssvfiscanf_r+0x4e>
 800f644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f646:	4621      	mov	r1, r4
 800f648:	4630      	mov	r0, r6
 800f64a:	4798      	blx	r3
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d0b6      	beq.n	800f5be <__ssvfiscanf_r+0x1e2>
 800f650:	e79c      	b.n	800f58c <__ssvfiscanf_r+0x1b0>
 800f652:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f654:	3201      	adds	r2, #1
 800f656:	9245      	str	r2, [sp, #276]	; 0x114
 800f658:	6862      	ldr	r2, [r4, #4]
 800f65a:	3a01      	subs	r2, #1
 800f65c:	2a00      	cmp	r2, #0
 800f65e:	6062      	str	r2, [r4, #4]
 800f660:	dd02      	ble.n	800f668 <__ssvfiscanf_r+0x28c>
 800f662:	3301      	adds	r3, #1
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	e7ad      	b.n	800f5c4 <__ssvfiscanf_r+0x1e8>
 800f668:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f66a:	4621      	mov	r1, r4
 800f66c:	4630      	mov	r0, r6
 800f66e:	4798      	blx	r3
 800f670:	2800      	cmp	r0, #0
 800f672:	d0a7      	beq.n	800f5c4 <__ssvfiscanf_r+0x1e8>
 800f674:	e78a      	b.n	800f58c <__ssvfiscanf_r+0x1b0>
 800f676:	2b04      	cmp	r3, #4
 800f678:	dc0e      	bgt.n	800f698 <__ssvfiscanf_r+0x2bc>
 800f67a:	466b      	mov	r3, sp
 800f67c:	4622      	mov	r2, r4
 800f67e:	a941      	add	r1, sp, #260	; 0x104
 800f680:	4630      	mov	r0, r6
 800f682:	f000 f87d 	bl	800f780 <_scanf_i>
 800f686:	e7ab      	b.n	800f5e0 <__ssvfiscanf_r+0x204>
 800f688:	0800f329 	.word	0x0800f329
 800f68c:	0800f3a3 	.word	0x0800f3a3
 800f690:	080108ad 	.word	0x080108ad
 800f694:	08010c7a 	.word	0x08010c7a
 800f698:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <__ssvfiscanf_r+0x2ec>)
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f43f aec5 	beq.w	800f42a <__ssvfiscanf_r+0x4e>
 800f6a0:	466b      	mov	r3, sp
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	a941      	add	r1, sp, #260	; 0x104
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f7fc f84c 	bl	800b744 <_scanf_float>
 800f6ac:	e798      	b.n	800f5e0 <__ssvfiscanf_r+0x204>
 800f6ae:	89a3      	ldrh	r3, [r4, #12]
 800f6b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f6b4:	bf18      	it	ne
 800f6b6:	f04f 30ff 	movne.w	r0, #4294967295
 800f6ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f6c4:	e7f9      	b.n	800f6ba <__ssvfiscanf_r+0x2de>
 800f6c6:	bf00      	nop
 800f6c8:	0800b745 	.word	0x0800b745

0800f6cc <_scanf_chars>:
 800f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d0:	4615      	mov	r5, r2
 800f6d2:	688a      	ldr	r2, [r1, #8]
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	b932      	cbnz	r2, 800f6e8 <_scanf_chars+0x1c>
 800f6da:	698a      	ldr	r2, [r1, #24]
 800f6dc:	2a00      	cmp	r2, #0
 800f6de:	bf0c      	ite	eq
 800f6e0:	2201      	moveq	r2, #1
 800f6e2:	f04f 32ff 	movne.w	r2, #4294967295
 800f6e6:	608a      	str	r2, [r1, #8]
 800f6e8:	6822      	ldr	r2, [r4, #0]
 800f6ea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f77c <_scanf_chars+0xb0>
 800f6ee:	06d1      	lsls	r1, r2, #27
 800f6f0:	bf5f      	itttt	pl
 800f6f2:	681a      	ldrpl	r2, [r3, #0]
 800f6f4:	1d11      	addpl	r1, r2, #4
 800f6f6:	6019      	strpl	r1, [r3, #0]
 800f6f8:	6816      	ldrpl	r6, [r2, #0]
 800f6fa:	2700      	movs	r7, #0
 800f6fc:	69a0      	ldr	r0, [r4, #24]
 800f6fe:	b188      	cbz	r0, 800f724 <_scanf_chars+0x58>
 800f700:	2801      	cmp	r0, #1
 800f702:	d107      	bne.n	800f714 <_scanf_chars+0x48>
 800f704:	682a      	ldr	r2, [r5, #0]
 800f706:	7811      	ldrb	r1, [r2, #0]
 800f708:	6962      	ldr	r2, [r4, #20]
 800f70a:	5c52      	ldrb	r2, [r2, r1]
 800f70c:	b952      	cbnz	r2, 800f724 <_scanf_chars+0x58>
 800f70e:	2f00      	cmp	r7, #0
 800f710:	d031      	beq.n	800f776 <_scanf_chars+0xaa>
 800f712:	e022      	b.n	800f75a <_scanf_chars+0x8e>
 800f714:	2802      	cmp	r0, #2
 800f716:	d120      	bne.n	800f75a <_scanf_chars+0x8e>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f720:	071b      	lsls	r3, r3, #28
 800f722:	d41a      	bmi.n	800f75a <_scanf_chars+0x8e>
 800f724:	6823      	ldr	r3, [r4, #0]
 800f726:	06da      	lsls	r2, r3, #27
 800f728:	bf5e      	ittt	pl
 800f72a:	682b      	ldrpl	r3, [r5, #0]
 800f72c:	781b      	ldrbpl	r3, [r3, #0]
 800f72e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f732:	682a      	ldr	r2, [r5, #0]
 800f734:	686b      	ldr	r3, [r5, #4]
 800f736:	3201      	adds	r2, #1
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	68a2      	ldr	r2, [r4, #8]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	3a01      	subs	r2, #1
 800f740:	606b      	str	r3, [r5, #4]
 800f742:	3701      	adds	r7, #1
 800f744:	60a2      	str	r2, [r4, #8]
 800f746:	b142      	cbz	r2, 800f75a <_scanf_chars+0x8e>
 800f748:	2b00      	cmp	r3, #0
 800f74a:	dcd7      	bgt.n	800f6fc <_scanf_chars+0x30>
 800f74c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f750:	4629      	mov	r1, r5
 800f752:	4640      	mov	r0, r8
 800f754:	4798      	blx	r3
 800f756:	2800      	cmp	r0, #0
 800f758:	d0d0      	beq.n	800f6fc <_scanf_chars+0x30>
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	f013 0310 	ands.w	r3, r3, #16
 800f760:	d105      	bne.n	800f76e <_scanf_chars+0xa2>
 800f762:	68e2      	ldr	r2, [r4, #12]
 800f764:	3201      	adds	r2, #1
 800f766:	60e2      	str	r2, [r4, #12]
 800f768:	69a2      	ldr	r2, [r4, #24]
 800f76a:	b102      	cbz	r2, 800f76e <_scanf_chars+0xa2>
 800f76c:	7033      	strb	r3, [r6, #0]
 800f76e:	6923      	ldr	r3, [r4, #16]
 800f770:	443b      	add	r3, r7
 800f772:	6123      	str	r3, [r4, #16]
 800f774:	2000      	movs	r0, #0
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	bf00      	nop
 800f77c:	080108ad 	.word	0x080108ad

0800f780 <_scanf_i>:
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	4698      	mov	r8, r3
 800f786:	4b76      	ldr	r3, [pc, #472]	; (800f960 <_scanf_i+0x1e0>)
 800f788:	460c      	mov	r4, r1
 800f78a:	4682      	mov	sl, r0
 800f78c:	4616      	mov	r6, r2
 800f78e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f792:	b087      	sub	sp, #28
 800f794:	ab03      	add	r3, sp, #12
 800f796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f79a:	4b72      	ldr	r3, [pc, #456]	; (800f964 <_scanf_i+0x1e4>)
 800f79c:	69a1      	ldr	r1, [r4, #24]
 800f79e:	4a72      	ldr	r2, [pc, #456]	; (800f968 <_scanf_i+0x1e8>)
 800f7a0:	2903      	cmp	r1, #3
 800f7a2:	bf18      	it	ne
 800f7a4:	461a      	movne	r2, r3
 800f7a6:	68a3      	ldr	r3, [r4, #8]
 800f7a8:	9201      	str	r2, [sp, #4]
 800f7aa:	1e5a      	subs	r2, r3, #1
 800f7ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f7b0:	bf88      	it	hi
 800f7b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f7b6:	4627      	mov	r7, r4
 800f7b8:	bf82      	ittt	hi
 800f7ba:	eb03 0905 	addhi.w	r9, r3, r5
 800f7be:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f7c2:	60a3      	strhi	r3, [r4, #8]
 800f7c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f7c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f7cc:	bf98      	it	ls
 800f7ce:	f04f 0900 	movls.w	r9, #0
 800f7d2:	6023      	str	r3, [r4, #0]
 800f7d4:	463d      	mov	r5, r7
 800f7d6:	f04f 0b00 	mov.w	fp, #0
 800f7da:	6831      	ldr	r1, [r6, #0]
 800f7dc:	ab03      	add	r3, sp, #12
 800f7de:	7809      	ldrb	r1, [r1, #0]
 800f7e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	f7f0 fd0b 	bl	8000200 <memchr>
 800f7ea:	b328      	cbz	r0, 800f838 <_scanf_i+0xb8>
 800f7ec:	f1bb 0f01 	cmp.w	fp, #1
 800f7f0:	d159      	bne.n	800f8a6 <_scanf_i+0x126>
 800f7f2:	6862      	ldr	r2, [r4, #4]
 800f7f4:	b92a      	cbnz	r2, 800f802 <_scanf_i+0x82>
 800f7f6:	6822      	ldr	r2, [r4, #0]
 800f7f8:	2308      	movs	r3, #8
 800f7fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7fe:	6063      	str	r3, [r4, #4]
 800f800:	6022      	str	r2, [r4, #0]
 800f802:	6822      	ldr	r2, [r4, #0]
 800f804:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f808:	6022      	str	r2, [r4, #0]
 800f80a:	68a2      	ldr	r2, [r4, #8]
 800f80c:	1e51      	subs	r1, r2, #1
 800f80e:	60a1      	str	r1, [r4, #8]
 800f810:	b192      	cbz	r2, 800f838 <_scanf_i+0xb8>
 800f812:	6832      	ldr	r2, [r6, #0]
 800f814:	1c51      	adds	r1, r2, #1
 800f816:	6031      	str	r1, [r6, #0]
 800f818:	7812      	ldrb	r2, [r2, #0]
 800f81a:	f805 2b01 	strb.w	r2, [r5], #1
 800f81e:	6872      	ldr	r2, [r6, #4]
 800f820:	3a01      	subs	r2, #1
 800f822:	2a00      	cmp	r2, #0
 800f824:	6072      	str	r2, [r6, #4]
 800f826:	dc07      	bgt.n	800f838 <_scanf_i+0xb8>
 800f828:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f82c:	4631      	mov	r1, r6
 800f82e:	4650      	mov	r0, sl
 800f830:	4790      	blx	r2
 800f832:	2800      	cmp	r0, #0
 800f834:	f040 8085 	bne.w	800f942 <_scanf_i+0x1c2>
 800f838:	f10b 0b01 	add.w	fp, fp, #1
 800f83c:	f1bb 0f03 	cmp.w	fp, #3
 800f840:	d1cb      	bne.n	800f7da <_scanf_i+0x5a>
 800f842:	6863      	ldr	r3, [r4, #4]
 800f844:	b90b      	cbnz	r3, 800f84a <_scanf_i+0xca>
 800f846:	230a      	movs	r3, #10
 800f848:	6063      	str	r3, [r4, #4]
 800f84a:	6863      	ldr	r3, [r4, #4]
 800f84c:	4947      	ldr	r1, [pc, #284]	; (800f96c <_scanf_i+0x1ec>)
 800f84e:	6960      	ldr	r0, [r4, #20]
 800f850:	1ac9      	subs	r1, r1, r3
 800f852:	f000 f8b9 	bl	800f9c8 <__sccl>
 800f856:	f04f 0b00 	mov.w	fp, #0
 800f85a:	68a3      	ldr	r3, [r4, #8]
 800f85c:	6822      	ldr	r2, [r4, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d03d      	beq.n	800f8de <_scanf_i+0x15e>
 800f862:	6831      	ldr	r1, [r6, #0]
 800f864:	6960      	ldr	r0, [r4, #20]
 800f866:	f891 c000 	ldrb.w	ip, [r1]
 800f86a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f86e:	2800      	cmp	r0, #0
 800f870:	d035      	beq.n	800f8de <_scanf_i+0x15e>
 800f872:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f876:	d124      	bne.n	800f8c2 <_scanf_i+0x142>
 800f878:	0510      	lsls	r0, r2, #20
 800f87a:	d522      	bpl.n	800f8c2 <_scanf_i+0x142>
 800f87c:	f10b 0b01 	add.w	fp, fp, #1
 800f880:	f1b9 0f00 	cmp.w	r9, #0
 800f884:	d003      	beq.n	800f88e <_scanf_i+0x10e>
 800f886:	3301      	adds	r3, #1
 800f888:	f109 39ff 	add.w	r9, r9, #4294967295
 800f88c:	60a3      	str	r3, [r4, #8]
 800f88e:	6873      	ldr	r3, [r6, #4]
 800f890:	3b01      	subs	r3, #1
 800f892:	2b00      	cmp	r3, #0
 800f894:	6073      	str	r3, [r6, #4]
 800f896:	dd1b      	ble.n	800f8d0 <_scanf_i+0x150>
 800f898:	6833      	ldr	r3, [r6, #0]
 800f89a:	3301      	adds	r3, #1
 800f89c:	6033      	str	r3, [r6, #0]
 800f89e:	68a3      	ldr	r3, [r4, #8]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	60a3      	str	r3, [r4, #8]
 800f8a4:	e7d9      	b.n	800f85a <_scanf_i+0xda>
 800f8a6:	f1bb 0f02 	cmp.w	fp, #2
 800f8aa:	d1ae      	bne.n	800f80a <_scanf_i+0x8a>
 800f8ac:	6822      	ldr	r2, [r4, #0]
 800f8ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f8b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f8b6:	d1bf      	bne.n	800f838 <_scanf_i+0xb8>
 800f8b8:	2310      	movs	r3, #16
 800f8ba:	6063      	str	r3, [r4, #4]
 800f8bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f8c0:	e7a2      	b.n	800f808 <_scanf_i+0x88>
 800f8c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f8c6:	6022      	str	r2, [r4, #0]
 800f8c8:	780b      	ldrb	r3, [r1, #0]
 800f8ca:	f805 3b01 	strb.w	r3, [r5], #1
 800f8ce:	e7de      	b.n	800f88e <_scanf_i+0x10e>
 800f8d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	4650      	mov	r0, sl
 800f8d8:	4798      	blx	r3
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d0df      	beq.n	800f89e <_scanf_i+0x11e>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	05db      	lsls	r3, r3, #23
 800f8e2:	d50d      	bpl.n	800f900 <_scanf_i+0x180>
 800f8e4:	42bd      	cmp	r5, r7
 800f8e6:	d909      	bls.n	800f8fc <_scanf_i+0x17c>
 800f8e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	4650      	mov	r0, sl
 800f8f4:	4798      	blx	r3
 800f8f6:	f105 39ff 	add.w	r9, r5, #4294967295
 800f8fa:	464d      	mov	r5, r9
 800f8fc:	42bd      	cmp	r5, r7
 800f8fe:	d02d      	beq.n	800f95c <_scanf_i+0x1dc>
 800f900:	6822      	ldr	r2, [r4, #0]
 800f902:	f012 0210 	ands.w	r2, r2, #16
 800f906:	d113      	bne.n	800f930 <_scanf_i+0x1b0>
 800f908:	702a      	strb	r2, [r5, #0]
 800f90a:	6863      	ldr	r3, [r4, #4]
 800f90c:	9e01      	ldr	r6, [sp, #4]
 800f90e:	4639      	mov	r1, r7
 800f910:	4650      	mov	r0, sl
 800f912:	47b0      	blx	r6
 800f914:	6821      	ldr	r1, [r4, #0]
 800f916:	f8d8 3000 	ldr.w	r3, [r8]
 800f91a:	f011 0f20 	tst.w	r1, #32
 800f91e:	d013      	beq.n	800f948 <_scanf_i+0x1c8>
 800f920:	1d1a      	adds	r2, r3, #4
 800f922:	f8c8 2000 	str.w	r2, [r8]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6018      	str	r0, [r3, #0]
 800f92a:	68e3      	ldr	r3, [r4, #12]
 800f92c:	3301      	adds	r3, #1
 800f92e:	60e3      	str	r3, [r4, #12]
 800f930:	1bed      	subs	r5, r5, r7
 800f932:	44ab      	add	fp, r5
 800f934:	6925      	ldr	r5, [r4, #16]
 800f936:	445d      	add	r5, fp
 800f938:	6125      	str	r5, [r4, #16]
 800f93a:	2000      	movs	r0, #0
 800f93c:	b007      	add	sp, #28
 800f93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f942:	f04f 0b00 	mov.w	fp, #0
 800f946:	e7ca      	b.n	800f8de <_scanf_i+0x15e>
 800f948:	1d1a      	adds	r2, r3, #4
 800f94a:	f8c8 2000 	str.w	r2, [r8]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f011 0f01 	tst.w	r1, #1
 800f954:	bf14      	ite	ne
 800f956:	8018      	strhne	r0, [r3, #0]
 800f958:	6018      	streq	r0, [r3, #0]
 800f95a:	e7e6      	b.n	800f92a <_scanf_i+0x1aa>
 800f95c:	2001      	movs	r0, #1
 800f95e:	e7ed      	b.n	800f93c <_scanf_i+0x1bc>
 800f960:	08010660 	.word	0x08010660
 800f964:	0800cb25 	.word	0x0800cb25
 800f968:	0800ca3d 	.word	0x0800ca3d
 800f96c:	08010c9e 	.word	0x08010c9e

0800f970 <_read_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d07      	ldr	r5, [pc, #28]	; (800f990 <_read_r+0x20>)
 800f974:	4604      	mov	r4, r0
 800f976:	4608      	mov	r0, r1
 800f978:	4611      	mov	r1, r2
 800f97a:	2200      	movs	r2, #0
 800f97c:	602a      	str	r2, [r5, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	f7f2 ff4c 	bl	800281c <_read>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d102      	bne.n	800f98e <_read_r+0x1e>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	b103      	cbz	r3, 800f98e <_read_r+0x1e>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd38      	pop	{r3, r4, r5, pc}
 800f990:	20006794 	.word	0x20006794
 800f994:	00000000 	.word	0x00000000

0800f998 <nan>:
 800f998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f9a0 <nan+0x8>
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	00000000 	.word	0x00000000
 800f9a4:	7ff80000 	.word	0x7ff80000

0800f9a8 <_sbrk_r>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4d06      	ldr	r5, [pc, #24]	; (800f9c4 <_sbrk_r+0x1c>)
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	4608      	mov	r0, r1
 800f9b2:	602b      	str	r3, [r5, #0]
 800f9b4:	f7f2 ffa0 	bl	80028f8 <_sbrk>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d102      	bne.n	800f9c2 <_sbrk_r+0x1a>
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	b103      	cbz	r3, 800f9c2 <_sbrk_r+0x1a>
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	20006794 	.word	0x20006794

0800f9c8 <__sccl>:
 800f9c8:	b570      	push	{r4, r5, r6, lr}
 800f9ca:	780b      	ldrb	r3, [r1, #0]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	2b5e      	cmp	r3, #94	; 0x5e
 800f9d0:	bf0b      	itete	eq
 800f9d2:	784b      	ldrbeq	r3, [r1, #1]
 800f9d4:	1c48      	addne	r0, r1, #1
 800f9d6:	1c88      	addeq	r0, r1, #2
 800f9d8:	2200      	movne	r2, #0
 800f9da:	bf08      	it	eq
 800f9dc:	2201      	moveq	r2, #1
 800f9de:	1e61      	subs	r1, r4, #1
 800f9e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f9e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f9e8:	42a9      	cmp	r1, r5
 800f9ea:	d1fb      	bne.n	800f9e4 <__sccl+0x1c>
 800f9ec:	b90b      	cbnz	r3, 800f9f2 <__sccl+0x2a>
 800f9ee:	3801      	subs	r0, #1
 800f9f0:	bd70      	pop	{r4, r5, r6, pc}
 800f9f2:	f082 0201 	eor.w	r2, r2, #1
 800f9f6:	54e2      	strb	r2, [r4, r3]
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fa00:	292d      	cmp	r1, #45	; 0x2d
 800fa02:	d006      	beq.n	800fa12 <__sccl+0x4a>
 800fa04:	295d      	cmp	r1, #93	; 0x5d
 800fa06:	d0f3      	beq.n	800f9f0 <__sccl+0x28>
 800fa08:	b909      	cbnz	r1, 800fa0e <__sccl+0x46>
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	e7f0      	b.n	800f9f0 <__sccl+0x28>
 800fa0e:	460b      	mov	r3, r1
 800fa10:	e7f1      	b.n	800f9f6 <__sccl+0x2e>
 800fa12:	786e      	ldrb	r6, [r5, #1]
 800fa14:	2e5d      	cmp	r6, #93	; 0x5d
 800fa16:	d0fa      	beq.n	800fa0e <__sccl+0x46>
 800fa18:	42b3      	cmp	r3, r6
 800fa1a:	dcf8      	bgt.n	800fa0e <__sccl+0x46>
 800fa1c:	3502      	adds	r5, #2
 800fa1e:	4619      	mov	r1, r3
 800fa20:	3101      	adds	r1, #1
 800fa22:	428e      	cmp	r6, r1
 800fa24:	5462      	strb	r2, [r4, r1]
 800fa26:	dcfb      	bgt.n	800fa20 <__sccl+0x58>
 800fa28:	1af1      	subs	r1, r6, r3
 800fa2a:	3901      	subs	r1, #1
 800fa2c:	1c58      	adds	r0, r3, #1
 800fa2e:	42b3      	cmp	r3, r6
 800fa30:	bfa8      	it	ge
 800fa32:	2100      	movge	r1, #0
 800fa34:	1843      	adds	r3, r0, r1
 800fa36:	e7e0      	b.n	800f9fa <__sccl+0x32>

0800fa38 <strncmp>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	b17a      	cbz	r2, 800fa5c <strncmp+0x24>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	3901      	subs	r1, #1
 800fa40:	1884      	adds	r4, r0, r2
 800fa42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa4a:	4290      	cmp	r0, r2
 800fa4c:	d101      	bne.n	800fa52 <strncmp+0x1a>
 800fa4e:	42a3      	cmp	r3, r4
 800fa50:	d101      	bne.n	800fa56 <strncmp+0x1e>
 800fa52:	1a80      	subs	r0, r0, r2
 800fa54:	bd10      	pop	{r4, pc}
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d1f3      	bne.n	800fa42 <strncmp+0xa>
 800fa5a:	e7fa      	b.n	800fa52 <strncmp+0x1a>
 800fa5c:	4610      	mov	r0, r2
 800fa5e:	e7f9      	b.n	800fa54 <strncmp+0x1c>

0800fa60 <__submore>:
 800fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	460c      	mov	r4, r1
 800fa66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fa68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa6c:	4299      	cmp	r1, r3
 800fa6e:	d11d      	bne.n	800faac <__submore+0x4c>
 800fa70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fa74:	f7ff fa88 	bl	800ef88 <_malloc_r>
 800fa78:	b918      	cbnz	r0, 800fa82 <__submore+0x22>
 800fa7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa86:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fa8c:	6360      	str	r0, [r4, #52]	; 0x34
 800fa8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fa92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fa96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fa9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fa9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800faa2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800faa6:	6020      	str	r0, [r4, #0]
 800faa8:	2000      	movs	r0, #0
 800faaa:	e7e8      	b.n	800fa7e <__submore+0x1e>
 800faac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800faae:	0077      	lsls	r7, r6, #1
 800fab0:	463a      	mov	r2, r7
 800fab2:	f000 fa37 	bl	800ff24 <_realloc_r>
 800fab6:	4605      	mov	r5, r0
 800fab8:	2800      	cmp	r0, #0
 800faba:	d0de      	beq.n	800fa7a <__submore+0x1a>
 800fabc:	eb00 0806 	add.w	r8, r0, r6
 800fac0:	4601      	mov	r1, r0
 800fac2:	4632      	mov	r2, r6
 800fac4:	4640      	mov	r0, r8
 800fac6:	f7fa ff4b 	bl	800a960 <memcpy>
 800faca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800face:	f8c4 8000 	str.w	r8, [r4]
 800fad2:	e7e9      	b.n	800faa8 <__submore+0x48>

0800fad4 <__ascii_wctomb>:
 800fad4:	b149      	cbz	r1, 800faea <__ascii_wctomb+0x16>
 800fad6:	2aff      	cmp	r2, #255	; 0xff
 800fad8:	bf85      	ittet	hi
 800fada:	238a      	movhi	r3, #138	; 0x8a
 800fadc:	6003      	strhi	r3, [r0, #0]
 800fade:	700a      	strbls	r2, [r1, #0]
 800fae0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fae4:	bf98      	it	ls
 800fae6:	2001      	movls	r0, #1
 800fae8:	4770      	bx	lr
 800faea:	4608      	mov	r0, r1
 800faec:	4770      	bx	lr
	...

0800faf0 <__assert_func>:
 800faf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faf2:	4614      	mov	r4, r2
 800faf4:	461a      	mov	r2, r3
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <__assert_func+0x2c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4605      	mov	r5, r0
 800fafc:	68d8      	ldr	r0, [r3, #12]
 800fafe:	b14c      	cbz	r4, 800fb14 <__assert_func+0x24>
 800fb00:	4b07      	ldr	r3, [pc, #28]	; (800fb20 <__assert_func+0x30>)
 800fb02:	9100      	str	r1, [sp, #0]
 800fb04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb08:	4906      	ldr	r1, [pc, #24]	; (800fb24 <__assert_func+0x34>)
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	f000 f9b2 	bl	800fe74 <fiprintf>
 800fb10:	f000 fc50 	bl	80103b4 <abort>
 800fb14:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <__assert_func+0x38>)
 800fb16:	461c      	mov	r4, r3
 800fb18:	e7f3      	b.n	800fb02 <__assert_func+0x12>
 800fb1a:	bf00      	nop
 800fb1c:	20000020 	.word	0x20000020
 800fb20:	08010ca0 	.word	0x08010ca0
 800fb24:	08010cad 	.word	0x08010cad
 800fb28:	08010cdb 	.word	0x08010cdb

0800fb2c <__env_lock>:
 800fb2c:	4801      	ldr	r0, [pc, #4]	; (800fb34 <__env_lock+0x8>)
 800fb2e:	f7fe bcaf 	b.w	800e490 <__retarget_lock_acquire_recursive>
 800fb32:	bf00      	nop
 800fb34:	20006784 	.word	0x20006784

0800fb38 <__env_unlock>:
 800fb38:	4801      	ldr	r0, [pc, #4]	; (800fb40 <__env_unlock+0x8>)
 800fb3a:	f7fe bcab 	b.w	800e494 <__retarget_lock_release_recursive>
 800fb3e:	bf00      	nop
 800fb40:	20006784 	.word	0x20006784

0800fb44 <__sflush_r>:
 800fb44:	898a      	ldrh	r2, [r1, #12]
 800fb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	0710      	lsls	r0, r2, #28
 800fb4e:	460c      	mov	r4, r1
 800fb50:	d458      	bmi.n	800fc04 <__sflush_r+0xc0>
 800fb52:	684b      	ldr	r3, [r1, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dc05      	bgt.n	800fb64 <__sflush_r+0x20>
 800fb58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	dc02      	bgt.n	800fb64 <__sflush_r+0x20>
 800fb5e:	2000      	movs	r0, #0
 800fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb66:	2e00      	cmp	r6, #0
 800fb68:	d0f9      	beq.n	800fb5e <__sflush_r+0x1a>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb70:	682f      	ldr	r7, [r5, #0]
 800fb72:	602b      	str	r3, [r5, #0]
 800fb74:	d032      	beq.n	800fbdc <__sflush_r+0x98>
 800fb76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	075a      	lsls	r2, r3, #29
 800fb7c:	d505      	bpl.n	800fb8a <__sflush_r+0x46>
 800fb7e:	6863      	ldr	r3, [r4, #4]
 800fb80:	1ac0      	subs	r0, r0, r3
 800fb82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb84:	b10b      	cbz	r3, 800fb8a <__sflush_r+0x46>
 800fb86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb88:	1ac0      	subs	r0, r0, r3
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb90:	6a21      	ldr	r1, [r4, #32]
 800fb92:	4628      	mov	r0, r5
 800fb94:	47b0      	blx	r6
 800fb96:	1c43      	adds	r3, r0, #1
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	d106      	bne.n	800fbaa <__sflush_r+0x66>
 800fb9c:	6829      	ldr	r1, [r5, #0]
 800fb9e:	291d      	cmp	r1, #29
 800fba0:	d82c      	bhi.n	800fbfc <__sflush_r+0xb8>
 800fba2:	4a2a      	ldr	r2, [pc, #168]	; (800fc4c <__sflush_r+0x108>)
 800fba4:	40ca      	lsrs	r2, r1
 800fba6:	07d6      	lsls	r6, r2, #31
 800fba8:	d528      	bpl.n	800fbfc <__sflush_r+0xb8>
 800fbaa:	2200      	movs	r2, #0
 800fbac:	6062      	str	r2, [r4, #4]
 800fbae:	04d9      	lsls	r1, r3, #19
 800fbb0:	6922      	ldr	r2, [r4, #16]
 800fbb2:	6022      	str	r2, [r4, #0]
 800fbb4:	d504      	bpl.n	800fbc0 <__sflush_r+0x7c>
 800fbb6:	1c42      	adds	r2, r0, #1
 800fbb8:	d101      	bne.n	800fbbe <__sflush_r+0x7a>
 800fbba:	682b      	ldr	r3, [r5, #0]
 800fbbc:	b903      	cbnz	r3, 800fbc0 <__sflush_r+0x7c>
 800fbbe:	6560      	str	r0, [r4, #84]	; 0x54
 800fbc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbc2:	602f      	str	r7, [r5, #0]
 800fbc4:	2900      	cmp	r1, #0
 800fbc6:	d0ca      	beq.n	800fb5e <__sflush_r+0x1a>
 800fbc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbcc:	4299      	cmp	r1, r3
 800fbce:	d002      	beq.n	800fbd6 <__sflush_r+0x92>
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f7ff f96d 	bl	800eeb0 <_free_r>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	6360      	str	r0, [r4, #52]	; 0x34
 800fbda:	e7c1      	b.n	800fb60 <__sflush_r+0x1c>
 800fbdc:	6a21      	ldr	r1, [r4, #32]
 800fbde:	2301      	movs	r3, #1
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	47b0      	blx	r6
 800fbe4:	1c41      	adds	r1, r0, #1
 800fbe6:	d1c7      	bne.n	800fb78 <__sflush_r+0x34>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d0c4      	beq.n	800fb78 <__sflush_r+0x34>
 800fbee:	2b1d      	cmp	r3, #29
 800fbf0:	d001      	beq.n	800fbf6 <__sflush_r+0xb2>
 800fbf2:	2b16      	cmp	r3, #22
 800fbf4:	d101      	bne.n	800fbfa <__sflush_r+0xb6>
 800fbf6:	602f      	str	r7, [r5, #0]
 800fbf8:	e7b1      	b.n	800fb5e <__sflush_r+0x1a>
 800fbfa:	89a3      	ldrh	r3, [r4, #12]
 800fbfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc00:	81a3      	strh	r3, [r4, #12]
 800fc02:	e7ad      	b.n	800fb60 <__sflush_r+0x1c>
 800fc04:	690f      	ldr	r7, [r1, #16]
 800fc06:	2f00      	cmp	r7, #0
 800fc08:	d0a9      	beq.n	800fb5e <__sflush_r+0x1a>
 800fc0a:	0793      	lsls	r3, r2, #30
 800fc0c:	680e      	ldr	r6, [r1, #0]
 800fc0e:	bf08      	it	eq
 800fc10:	694b      	ldreq	r3, [r1, #20]
 800fc12:	600f      	str	r7, [r1, #0]
 800fc14:	bf18      	it	ne
 800fc16:	2300      	movne	r3, #0
 800fc18:	eba6 0807 	sub.w	r8, r6, r7
 800fc1c:	608b      	str	r3, [r1, #8]
 800fc1e:	f1b8 0f00 	cmp.w	r8, #0
 800fc22:	dd9c      	ble.n	800fb5e <__sflush_r+0x1a>
 800fc24:	6a21      	ldr	r1, [r4, #32]
 800fc26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc28:	4643      	mov	r3, r8
 800fc2a:	463a      	mov	r2, r7
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	47b0      	blx	r6
 800fc30:	2800      	cmp	r0, #0
 800fc32:	dc06      	bgt.n	800fc42 <__sflush_r+0xfe>
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc40:	e78e      	b.n	800fb60 <__sflush_r+0x1c>
 800fc42:	4407      	add	r7, r0
 800fc44:	eba8 0800 	sub.w	r8, r8, r0
 800fc48:	e7e9      	b.n	800fc1e <__sflush_r+0xda>
 800fc4a:	bf00      	nop
 800fc4c:	20400001 	.word	0x20400001

0800fc50 <_fflush_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	690b      	ldr	r3, [r1, #16]
 800fc54:	4605      	mov	r5, r0
 800fc56:	460c      	mov	r4, r1
 800fc58:	b913      	cbnz	r3, 800fc60 <_fflush_r+0x10>
 800fc5a:	2500      	movs	r5, #0
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	b118      	cbz	r0, 800fc6a <_fflush_r+0x1a>
 800fc62:	6983      	ldr	r3, [r0, #24]
 800fc64:	b90b      	cbnz	r3, 800fc6a <_fflush_r+0x1a>
 800fc66:	f000 f887 	bl	800fd78 <__sinit>
 800fc6a:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <_fflush_r+0x6c>)
 800fc6c:	429c      	cmp	r4, r3
 800fc6e:	d11b      	bne.n	800fca8 <_fflush_r+0x58>
 800fc70:	686c      	ldr	r4, [r5, #4]
 800fc72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d0ef      	beq.n	800fc5a <_fflush_r+0xa>
 800fc7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc7c:	07d0      	lsls	r0, r2, #31
 800fc7e:	d404      	bmi.n	800fc8a <_fflush_r+0x3a>
 800fc80:	0599      	lsls	r1, r3, #22
 800fc82:	d402      	bmi.n	800fc8a <_fflush_r+0x3a>
 800fc84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc86:	f7fe fc03 	bl	800e490 <__retarget_lock_acquire_recursive>
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	f7ff ff59 	bl	800fb44 <__sflush_r>
 800fc92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc94:	07da      	lsls	r2, r3, #31
 800fc96:	4605      	mov	r5, r0
 800fc98:	d4e0      	bmi.n	800fc5c <_fflush_r+0xc>
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	059b      	lsls	r3, r3, #22
 800fc9e:	d4dd      	bmi.n	800fc5c <_fflush_r+0xc>
 800fca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fca2:	f7fe fbf7 	bl	800e494 <__retarget_lock_release_recursive>
 800fca6:	e7d9      	b.n	800fc5c <_fflush_r+0xc>
 800fca8:	4b05      	ldr	r3, [pc, #20]	; (800fcc0 <_fflush_r+0x70>)
 800fcaa:	429c      	cmp	r4, r3
 800fcac:	d101      	bne.n	800fcb2 <_fflush_r+0x62>
 800fcae:	68ac      	ldr	r4, [r5, #8]
 800fcb0:	e7df      	b.n	800fc72 <_fflush_r+0x22>
 800fcb2:	4b04      	ldr	r3, [pc, #16]	; (800fcc4 <_fflush_r+0x74>)
 800fcb4:	429c      	cmp	r4, r3
 800fcb6:	bf08      	it	eq
 800fcb8:	68ec      	ldreq	r4, [r5, #12]
 800fcba:	e7da      	b.n	800fc72 <_fflush_r+0x22>
 800fcbc:	08010cfc 	.word	0x08010cfc
 800fcc0:	08010d1c 	.word	0x08010d1c
 800fcc4:	08010cdc 	.word	0x08010cdc

0800fcc8 <std>:
 800fcc8:	2300      	movs	r3, #0
 800fcca:	b510      	push	{r4, lr}
 800fccc:	4604      	mov	r4, r0
 800fcce:	e9c0 3300 	strd	r3, r3, [r0]
 800fcd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcd6:	6083      	str	r3, [r0, #8]
 800fcd8:	8181      	strh	r1, [r0, #12]
 800fcda:	6643      	str	r3, [r0, #100]	; 0x64
 800fcdc:	81c2      	strh	r2, [r0, #14]
 800fcde:	6183      	str	r3, [r0, #24]
 800fce0:	4619      	mov	r1, r3
 800fce2:	2208      	movs	r2, #8
 800fce4:	305c      	adds	r0, #92	; 0x5c
 800fce6:	f7fa fe49 	bl	800a97c <memset>
 800fcea:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <std+0x38>)
 800fcec:	6263      	str	r3, [r4, #36]	; 0x24
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <std+0x3c>)
 800fcf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcf2:	4b05      	ldr	r3, [pc, #20]	; (800fd08 <std+0x40>)
 800fcf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcf6:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <std+0x44>)
 800fcf8:	6224      	str	r4, [r4, #32]
 800fcfa:	6323      	str	r3, [r4, #48]	; 0x30
 800fcfc:	bd10      	pop	{r4, pc}
 800fcfe:	bf00      	nop
 800fd00:	0800bc09 	.word	0x0800bc09
 800fd04:	0800bc2f 	.word	0x0800bc2f
 800fd08:	0800bc67 	.word	0x0800bc67
 800fd0c:	0800bc8b 	.word	0x0800bc8b

0800fd10 <_cleanup_r>:
 800fd10:	4901      	ldr	r1, [pc, #4]	; (800fd18 <_cleanup_r+0x8>)
 800fd12:	f000 b8c1 	b.w	800fe98 <_fwalk_reent>
 800fd16:	bf00      	nop
 800fd18:	0800fc51 	.word	0x0800fc51

0800fd1c <__sfmoreglue>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	2268      	movs	r2, #104	; 0x68
 800fd20:	1e4d      	subs	r5, r1, #1
 800fd22:	4355      	muls	r5, r2
 800fd24:	460e      	mov	r6, r1
 800fd26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd2a:	f7ff f92d 	bl	800ef88 <_malloc_r>
 800fd2e:	4604      	mov	r4, r0
 800fd30:	b140      	cbz	r0, 800fd44 <__sfmoreglue+0x28>
 800fd32:	2100      	movs	r1, #0
 800fd34:	e9c0 1600 	strd	r1, r6, [r0]
 800fd38:	300c      	adds	r0, #12
 800fd3a:	60a0      	str	r0, [r4, #8]
 800fd3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd40:	f7fa fe1c 	bl	800a97c <memset>
 800fd44:	4620      	mov	r0, r4
 800fd46:	bd70      	pop	{r4, r5, r6, pc}

0800fd48 <__sfp_lock_acquire>:
 800fd48:	4801      	ldr	r0, [pc, #4]	; (800fd50 <__sfp_lock_acquire+0x8>)
 800fd4a:	f7fe bba1 	b.w	800e490 <__retarget_lock_acquire_recursive>
 800fd4e:	bf00      	nop
 800fd50:	20006786 	.word	0x20006786

0800fd54 <__sfp_lock_release>:
 800fd54:	4801      	ldr	r0, [pc, #4]	; (800fd5c <__sfp_lock_release+0x8>)
 800fd56:	f7fe bb9d 	b.w	800e494 <__retarget_lock_release_recursive>
 800fd5a:	bf00      	nop
 800fd5c:	20006786 	.word	0x20006786

0800fd60 <__sinit_lock_acquire>:
 800fd60:	4801      	ldr	r0, [pc, #4]	; (800fd68 <__sinit_lock_acquire+0x8>)
 800fd62:	f7fe bb95 	b.w	800e490 <__retarget_lock_acquire_recursive>
 800fd66:	bf00      	nop
 800fd68:	20006787 	.word	0x20006787

0800fd6c <__sinit_lock_release>:
 800fd6c:	4801      	ldr	r0, [pc, #4]	; (800fd74 <__sinit_lock_release+0x8>)
 800fd6e:	f7fe bb91 	b.w	800e494 <__retarget_lock_release_recursive>
 800fd72:	bf00      	nop
 800fd74:	20006787 	.word	0x20006787

0800fd78 <__sinit>:
 800fd78:	b510      	push	{r4, lr}
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	f7ff fff0 	bl	800fd60 <__sinit_lock_acquire>
 800fd80:	69a3      	ldr	r3, [r4, #24]
 800fd82:	b11b      	cbz	r3, 800fd8c <__sinit+0x14>
 800fd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd88:	f7ff bff0 	b.w	800fd6c <__sinit_lock_release>
 800fd8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd90:	6523      	str	r3, [r4, #80]	; 0x50
 800fd92:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <__sinit+0x68>)
 800fd94:	4a13      	ldr	r2, [pc, #76]	; (800fde4 <__sinit+0x6c>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd9a:	42a3      	cmp	r3, r4
 800fd9c:	bf04      	itt	eq
 800fd9e:	2301      	moveq	r3, #1
 800fda0:	61a3      	streq	r3, [r4, #24]
 800fda2:	4620      	mov	r0, r4
 800fda4:	f000 f820 	bl	800fde8 <__sfp>
 800fda8:	6060      	str	r0, [r4, #4]
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 f81c 	bl	800fde8 <__sfp>
 800fdb0:	60a0      	str	r0, [r4, #8]
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f000 f818 	bl	800fde8 <__sfp>
 800fdb8:	2200      	movs	r2, #0
 800fdba:	60e0      	str	r0, [r4, #12]
 800fdbc:	2104      	movs	r1, #4
 800fdbe:	6860      	ldr	r0, [r4, #4]
 800fdc0:	f7ff ff82 	bl	800fcc8 <std>
 800fdc4:	68a0      	ldr	r0, [r4, #8]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	2109      	movs	r1, #9
 800fdca:	f7ff ff7d 	bl	800fcc8 <std>
 800fdce:	68e0      	ldr	r0, [r4, #12]
 800fdd0:	2202      	movs	r2, #2
 800fdd2:	2112      	movs	r1, #18
 800fdd4:	f7ff ff78 	bl	800fcc8 <std>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	61a3      	str	r3, [r4, #24]
 800fddc:	e7d2      	b.n	800fd84 <__sinit+0xc>
 800fdde:	bf00      	nop
 800fde0:	08010780 	.word	0x08010780
 800fde4:	0800fd11 	.word	0x0800fd11

0800fde8 <__sfp>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	4607      	mov	r7, r0
 800fdec:	f7ff ffac 	bl	800fd48 <__sfp_lock_acquire>
 800fdf0:	4b1e      	ldr	r3, [pc, #120]	; (800fe6c <__sfp+0x84>)
 800fdf2:	681e      	ldr	r6, [r3, #0]
 800fdf4:	69b3      	ldr	r3, [r6, #24]
 800fdf6:	b913      	cbnz	r3, 800fdfe <__sfp+0x16>
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff ffbd 	bl	800fd78 <__sinit>
 800fdfe:	3648      	adds	r6, #72	; 0x48
 800fe00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	d503      	bpl.n	800fe10 <__sfp+0x28>
 800fe08:	6833      	ldr	r3, [r6, #0]
 800fe0a:	b30b      	cbz	r3, 800fe50 <__sfp+0x68>
 800fe0c:	6836      	ldr	r6, [r6, #0]
 800fe0e:	e7f7      	b.n	800fe00 <__sfp+0x18>
 800fe10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe14:	b9d5      	cbnz	r5, 800fe4c <__sfp+0x64>
 800fe16:	4b16      	ldr	r3, [pc, #88]	; (800fe70 <__sfp+0x88>)
 800fe18:	60e3      	str	r3, [r4, #12]
 800fe1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe1e:	6665      	str	r5, [r4, #100]	; 0x64
 800fe20:	f7fe fb34 	bl	800e48c <__retarget_lock_init_recursive>
 800fe24:	f7ff ff96 	bl	800fd54 <__sfp_lock_release>
 800fe28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe30:	6025      	str	r5, [r4, #0]
 800fe32:	61a5      	str	r5, [r4, #24]
 800fe34:	2208      	movs	r2, #8
 800fe36:	4629      	mov	r1, r5
 800fe38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe3c:	f7fa fd9e 	bl	800a97c <memset>
 800fe40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe48:	4620      	mov	r0, r4
 800fe4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe4c:	3468      	adds	r4, #104	; 0x68
 800fe4e:	e7d9      	b.n	800fe04 <__sfp+0x1c>
 800fe50:	2104      	movs	r1, #4
 800fe52:	4638      	mov	r0, r7
 800fe54:	f7ff ff62 	bl	800fd1c <__sfmoreglue>
 800fe58:	4604      	mov	r4, r0
 800fe5a:	6030      	str	r0, [r6, #0]
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	d1d5      	bne.n	800fe0c <__sfp+0x24>
 800fe60:	f7ff ff78 	bl	800fd54 <__sfp_lock_release>
 800fe64:	230c      	movs	r3, #12
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	e7ee      	b.n	800fe48 <__sfp+0x60>
 800fe6a:	bf00      	nop
 800fe6c:	08010780 	.word	0x08010780
 800fe70:	ffff0001 	.word	0xffff0001

0800fe74 <fiprintf>:
 800fe74:	b40e      	push	{r1, r2, r3}
 800fe76:	b503      	push	{r0, r1, lr}
 800fe78:	4601      	mov	r1, r0
 800fe7a:	ab03      	add	r3, sp, #12
 800fe7c:	4805      	ldr	r0, [pc, #20]	; (800fe94 <fiprintf+0x20>)
 800fe7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe82:	6800      	ldr	r0, [r0, #0]
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	f000 f8a5 	bl	800ffd4 <_vfiprintf_r>
 800fe8a:	b002      	add	sp, #8
 800fe8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe90:	b003      	add	sp, #12
 800fe92:	4770      	bx	lr
 800fe94:	20000020 	.word	0x20000020

0800fe98 <_fwalk_reent>:
 800fe98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	4688      	mov	r8, r1
 800fea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fea4:	2700      	movs	r7, #0
 800fea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feaa:	f1b9 0901 	subs.w	r9, r9, #1
 800feae:	d505      	bpl.n	800febc <_fwalk_reent+0x24>
 800feb0:	6824      	ldr	r4, [r4, #0]
 800feb2:	2c00      	cmp	r4, #0
 800feb4:	d1f7      	bne.n	800fea6 <_fwalk_reent+0xe>
 800feb6:	4638      	mov	r0, r7
 800feb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800febc:	89ab      	ldrh	r3, [r5, #12]
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d907      	bls.n	800fed2 <_fwalk_reent+0x3a>
 800fec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fec6:	3301      	adds	r3, #1
 800fec8:	d003      	beq.n	800fed2 <_fwalk_reent+0x3a>
 800feca:	4629      	mov	r1, r5
 800fecc:	4630      	mov	r0, r6
 800fece:	47c0      	blx	r8
 800fed0:	4307      	orrs	r7, r0
 800fed2:	3568      	adds	r5, #104	; 0x68
 800fed4:	e7e9      	b.n	800feaa <_fwalk_reent+0x12>

0800fed6 <memmove>:
 800fed6:	4288      	cmp	r0, r1
 800fed8:	b510      	push	{r4, lr}
 800feda:	eb01 0402 	add.w	r4, r1, r2
 800fede:	d902      	bls.n	800fee6 <memmove+0x10>
 800fee0:	4284      	cmp	r4, r0
 800fee2:	4623      	mov	r3, r4
 800fee4:	d807      	bhi.n	800fef6 <memmove+0x20>
 800fee6:	1e43      	subs	r3, r0, #1
 800fee8:	42a1      	cmp	r1, r4
 800feea:	d008      	beq.n	800fefe <memmove+0x28>
 800feec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fef0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fef4:	e7f8      	b.n	800fee8 <memmove+0x12>
 800fef6:	4402      	add	r2, r0
 800fef8:	4601      	mov	r1, r0
 800fefa:	428a      	cmp	r2, r1
 800fefc:	d100      	bne.n	800ff00 <memmove+0x2a>
 800fefe:	bd10      	pop	{r4, pc}
 800ff00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff04:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff08:	e7f7      	b.n	800fefa <memmove+0x24>
	...

0800ff0c <__malloc_lock>:
 800ff0c:	4801      	ldr	r0, [pc, #4]	; (800ff14 <__malloc_lock+0x8>)
 800ff0e:	f7fe babf 	b.w	800e490 <__retarget_lock_acquire_recursive>
 800ff12:	bf00      	nop
 800ff14:	20006785 	.word	0x20006785

0800ff18 <__malloc_unlock>:
 800ff18:	4801      	ldr	r0, [pc, #4]	; (800ff20 <__malloc_unlock+0x8>)
 800ff1a:	f7fe babb 	b.w	800e494 <__retarget_lock_release_recursive>
 800ff1e:	bf00      	nop
 800ff20:	20006785 	.word	0x20006785

0800ff24 <_realloc_r>:
 800ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff28:	4680      	mov	r8, r0
 800ff2a:	4614      	mov	r4, r2
 800ff2c:	460e      	mov	r6, r1
 800ff2e:	b921      	cbnz	r1, 800ff3a <_realloc_r+0x16>
 800ff30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff34:	4611      	mov	r1, r2
 800ff36:	f7ff b827 	b.w	800ef88 <_malloc_r>
 800ff3a:	b92a      	cbnz	r2, 800ff48 <_realloc_r+0x24>
 800ff3c:	f7fe ffb8 	bl	800eeb0 <_free_r>
 800ff40:	4625      	mov	r5, r4
 800ff42:	4628      	mov	r0, r5
 800ff44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff48:	f000 faa0 	bl	801048c <_malloc_usable_size_r>
 800ff4c:	4284      	cmp	r4, r0
 800ff4e:	4607      	mov	r7, r0
 800ff50:	d802      	bhi.n	800ff58 <_realloc_r+0x34>
 800ff52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff56:	d812      	bhi.n	800ff7e <_realloc_r+0x5a>
 800ff58:	4621      	mov	r1, r4
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	f7ff f814 	bl	800ef88 <_malloc_r>
 800ff60:	4605      	mov	r5, r0
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0ed      	beq.n	800ff42 <_realloc_r+0x1e>
 800ff66:	42bc      	cmp	r4, r7
 800ff68:	4622      	mov	r2, r4
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	bf28      	it	cs
 800ff6e:	463a      	movcs	r2, r7
 800ff70:	f7fa fcf6 	bl	800a960 <memcpy>
 800ff74:	4631      	mov	r1, r6
 800ff76:	4640      	mov	r0, r8
 800ff78:	f7fe ff9a 	bl	800eeb0 <_free_r>
 800ff7c:	e7e1      	b.n	800ff42 <_realloc_r+0x1e>
 800ff7e:	4635      	mov	r5, r6
 800ff80:	e7df      	b.n	800ff42 <_realloc_r+0x1e>

0800ff82 <__sfputc_r>:
 800ff82:	6893      	ldr	r3, [r2, #8]
 800ff84:	3b01      	subs	r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	b410      	push	{r4}
 800ff8a:	6093      	str	r3, [r2, #8]
 800ff8c:	da08      	bge.n	800ffa0 <__sfputc_r+0x1e>
 800ff8e:	6994      	ldr	r4, [r2, #24]
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	db01      	blt.n	800ff98 <__sfputc_r+0x16>
 800ff94:	290a      	cmp	r1, #10
 800ff96:	d103      	bne.n	800ffa0 <__sfputc_r+0x1e>
 800ff98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff9c:	f000 b94a 	b.w	8010234 <__swbuf_r>
 800ffa0:	6813      	ldr	r3, [r2, #0]
 800ffa2:	1c58      	adds	r0, r3, #1
 800ffa4:	6010      	str	r0, [r2, #0]
 800ffa6:	7019      	strb	r1, [r3, #0]
 800ffa8:	4608      	mov	r0, r1
 800ffaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <__sfputs_r>:
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	460f      	mov	r7, r1
 800ffb6:	4614      	mov	r4, r2
 800ffb8:	18d5      	adds	r5, r2, r3
 800ffba:	42ac      	cmp	r4, r5
 800ffbc:	d101      	bne.n	800ffc2 <__sfputs_r+0x12>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e007      	b.n	800ffd2 <__sfputs_r+0x22>
 800ffc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc6:	463a      	mov	r2, r7
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f7ff ffda 	bl	800ff82 <__sfputc_r>
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	d1f3      	bne.n	800ffba <__sfputs_r+0xa>
 800ffd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ffd4 <_vfiprintf_r>:
 800ffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd8:	460d      	mov	r5, r1
 800ffda:	b09d      	sub	sp, #116	; 0x74
 800ffdc:	4614      	mov	r4, r2
 800ffde:	4698      	mov	r8, r3
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	b118      	cbz	r0, 800ffec <_vfiprintf_r+0x18>
 800ffe4:	6983      	ldr	r3, [r0, #24]
 800ffe6:	b90b      	cbnz	r3, 800ffec <_vfiprintf_r+0x18>
 800ffe8:	f7ff fec6 	bl	800fd78 <__sinit>
 800ffec:	4b89      	ldr	r3, [pc, #548]	; (8010214 <_vfiprintf_r+0x240>)
 800ffee:	429d      	cmp	r5, r3
 800fff0:	d11b      	bne.n	801002a <_vfiprintf_r+0x56>
 800fff2:	6875      	ldr	r5, [r6, #4]
 800fff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fff6:	07d9      	lsls	r1, r3, #31
 800fff8:	d405      	bmi.n	8010006 <_vfiprintf_r+0x32>
 800fffa:	89ab      	ldrh	r3, [r5, #12]
 800fffc:	059a      	lsls	r2, r3, #22
 800fffe:	d402      	bmi.n	8010006 <_vfiprintf_r+0x32>
 8010000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010002:	f7fe fa45 	bl	800e490 <__retarget_lock_acquire_recursive>
 8010006:	89ab      	ldrh	r3, [r5, #12]
 8010008:	071b      	lsls	r3, r3, #28
 801000a:	d501      	bpl.n	8010010 <_vfiprintf_r+0x3c>
 801000c:	692b      	ldr	r3, [r5, #16]
 801000e:	b9eb      	cbnz	r3, 801004c <_vfiprintf_r+0x78>
 8010010:	4629      	mov	r1, r5
 8010012:	4630      	mov	r0, r6
 8010014:	f000 f960 	bl	80102d8 <__swsetup_r>
 8010018:	b1c0      	cbz	r0, 801004c <_vfiprintf_r+0x78>
 801001a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801001c:	07dc      	lsls	r4, r3, #31
 801001e:	d50e      	bpl.n	801003e <_vfiprintf_r+0x6a>
 8010020:	f04f 30ff 	mov.w	r0, #4294967295
 8010024:	b01d      	add	sp, #116	; 0x74
 8010026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002a:	4b7b      	ldr	r3, [pc, #492]	; (8010218 <_vfiprintf_r+0x244>)
 801002c:	429d      	cmp	r5, r3
 801002e:	d101      	bne.n	8010034 <_vfiprintf_r+0x60>
 8010030:	68b5      	ldr	r5, [r6, #8]
 8010032:	e7df      	b.n	800fff4 <_vfiprintf_r+0x20>
 8010034:	4b79      	ldr	r3, [pc, #484]	; (801021c <_vfiprintf_r+0x248>)
 8010036:	429d      	cmp	r5, r3
 8010038:	bf08      	it	eq
 801003a:	68f5      	ldreq	r5, [r6, #12]
 801003c:	e7da      	b.n	800fff4 <_vfiprintf_r+0x20>
 801003e:	89ab      	ldrh	r3, [r5, #12]
 8010040:	0598      	lsls	r0, r3, #22
 8010042:	d4ed      	bmi.n	8010020 <_vfiprintf_r+0x4c>
 8010044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010046:	f7fe fa25 	bl	800e494 <__retarget_lock_release_recursive>
 801004a:	e7e9      	b.n	8010020 <_vfiprintf_r+0x4c>
 801004c:	2300      	movs	r3, #0
 801004e:	9309      	str	r3, [sp, #36]	; 0x24
 8010050:	2320      	movs	r3, #32
 8010052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010056:	f8cd 800c 	str.w	r8, [sp, #12]
 801005a:	2330      	movs	r3, #48	; 0x30
 801005c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010220 <_vfiprintf_r+0x24c>
 8010060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010064:	f04f 0901 	mov.w	r9, #1
 8010068:	4623      	mov	r3, r4
 801006a:	469a      	mov	sl, r3
 801006c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010070:	b10a      	cbz	r2, 8010076 <_vfiprintf_r+0xa2>
 8010072:	2a25      	cmp	r2, #37	; 0x25
 8010074:	d1f9      	bne.n	801006a <_vfiprintf_r+0x96>
 8010076:	ebba 0b04 	subs.w	fp, sl, r4
 801007a:	d00b      	beq.n	8010094 <_vfiprintf_r+0xc0>
 801007c:	465b      	mov	r3, fp
 801007e:	4622      	mov	r2, r4
 8010080:	4629      	mov	r1, r5
 8010082:	4630      	mov	r0, r6
 8010084:	f7ff ff94 	bl	800ffb0 <__sfputs_r>
 8010088:	3001      	adds	r0, #1
 801008a:	f000 80aa 	beq.w	80101e2 <_vfiprintf_r+0x20e>
 801008e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010090:	445a      	add	r2, fp
 8010092:	9209      	str	r2, [sp, #36]	; 0x24
 8010094:	f89a 3000 	ldrb.w	r3, [sl]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f000 80a2 	beq.w	80101e2 <_vfiprintf_r+0x20e>
 801009e:	2300      	movs	r3, #0
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100a8:	f10a 0a01 	add.w	sl, sl, #1
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	9307      	str	r3, [sp, #28]
 80100b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100b4:	931a      	str	r3, [sp, #104]	; 0x68
 80100b6:	4654      	mov	r4, sl
 80100b8:	2205      	movs	r2, #5
 80100ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100be:	4858      	ldr	r0, [pc, #352]	; (8010220 <_vfiprintf_r+0x24c>)
 80100c0:	f7f0 f89e 	bl	8000200 <memchr>
 80100c4:	9a04      	ldr	r2, [sp, #16]
 80100c6:	b9d8      	cbnz	r0, 8010100 <_vfiprintf_r+0x12c>
 80100c8:	06d1      	lsls	r1, r2, #27
 80100ca:	bf44      	itt	mi
 80100cc:	2320      	movmi	r3, #32
 80100ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100d2:	0713      	lsls	r3, r2, #28
 80100d4:	bf44      	itt	mi
 80100d6:	232b      	movmi	r3, #43	; 0x2b
 80100d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100dc:	f89a 3000 	ldrb.w	r3, [sl]
 80100e0:	2b2a      	cmp	r3, #42	; 0x2a
 80100e2:	d015      	beq.n	8010110 <_vfiprintf_r+0x13c>
 80100e4:	9a07      	ldr	r2, [sp, #28]
 80100e6:	4654      	mov	r4, sl
 80100e8:	2000      	movs	r0, #0
 80100ea:	f04f 0c0a 	mov.w	ip, #10
 80100ee:	4621      	mov	r1, r4
 80100f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100f4:	3b30      	subs	r3, #48	; 0x30
 80100f6:	2b09      	cmp	r3, #9
 80100f8:	d94e      	bls.n	8010198 <_vfiprintf_r+0x1c4>
 80100fa:	b1b0      	cbz	r0, 801012a <_vfiprintf_r+0x156>
 80100fc:	9207      	str	r2, [sp, #28]
 80100fe:	e014      	b.n	801012a <_vfiprintf_r+0x156>
 8010100:	eba0 0308 	sub.w	r3, r0, r8
 8010104:	fa09 f303 	lsl.w	r3, r9, r3
 8010108:	4313      	orrs	r3, r2
 801010a:	9304      	str	r3, [sp, #16]
 801010c:	46a2      	mov	sl, r4
 801010e:	e7d2      	b.n	80100b6 <_vfiprintf_r+0xe2>
 8010110:	9b03      	ldr	r3, [sp, #12]
 8010112:	1d19      	adds	r1, r3, #4
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	9103      	str	r1, [sp, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	bfbb      	ittet	lt
 801011c:	425b      	neglt	r3, r3
 801011e:	f042 0202 	orrlt.w	r2, r2, #2
 8010122:	9307      	strge	r3, [sp, #28]
 8010124:	9307      	strlt	r3, [sp, #28]
 8010126:	bfb8      	it	lt
 8010128:	9204      	strlt	r2, [sp, #16]
 801012a:	7823      	ldrb	r3, [r4, #0]
 801012c:	2b2e      	cmp	r3, #46	; 0x2e
 801012e:	d10c      	bne.n	801014a <_vfiprintf_r+0x176>
 8010130:	7863      	ldrb	r3, [r4, #1]
 8010132:	2b2a      	cmp	r3, #42	; 0x2a
 8010134:	d135      	bne.n	80101a2 <_vfiprintf_r+0x1ce>
 8010136:	9b03      	ldr	r3, [sp, #12]
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	9203      	str	r2, [sp, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	bfb8      	it	lt
 8010142:	f04f 33ff 	movlt.w	r3, #4294967295
 8010146:	3402      	adds	r4, #2
 8010148:	9305      	str	r3, [sp, #20]
 801014a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010230 <_vfiprintf_r+0x25c>
 801014e:	7821      	ldrb	r1, [r4, #0]
 8010150:	2203      	movs	r2, #3
 8010152:	4650      	mov	r0, sl
 8010154:	f7f0 f854 	bl	8000200 <memchr>
 8010158:	b140      	cbz	r0, 801016c <_vfiprintf_r+0x198>
 801015a:	2340      	movs	r3, #64	; 0x40
 801015c:	eba0 000a 	sub.w	r0, r0, sl
 8010160:	fa03 f000 	lsl.w	r0, r3, r0
 8010164:	9b04      	ldr	r3, [sp, #16]
 8010166:	4303      	orrs	r3, r0
 8010168:	3401      	adds	r4, #1
 801016a:	9304      	str	r3, [sp, #16]
 801016c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010170:	482c      	ldr	r0, [pc, #176]	; (8010224 <_vfiprintf_r+0x250>)
 8010172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010176:	2206      	movs	r2, #6
 8010178:	f7f0 f842 	bl	8000200 <memchr>
 801017c:	2800      	cmp	r0, #0
 801017e:	d03f      	beq.n	8010200 <_vfiprintf_r+0x22c>
 8010180:	4b29      	ldr	r3, [pc, #164]	; (8010228 <_vfiprintf_r+0x254>)
 8010182:	bb1b      	cbnz	r3, 80101cc <_vfiprintf_r+0x1f8>
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	3307      	adds	r3, #7
 8010188:	f023 0307 	bic.w	r3, r3, #7
 801018c:	3308      	adds	r3, #8
 801018e:	9303      	str	r3, [sp, #12]
 8010190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010192:	443b      	add	r3, r7
 8010194:	9309      	str	r3, [sp, #36]	; 0x24
 8010196:	e767      	b.n	8010068 <_vfiprintf_r+0x94>
 8010198:	fb0c 3202 	mla	r2, ip, r2, r3
 801019c:	460c      	mov	r4, r1
 801019e:	2001      	movs	r0, #1
 80101a0:	e7a5      	b.n	80100ee <_vfiprintf_r+0x11a>
 80101a2:	2300      	movs	r3, #0
 80101a4:	3401      	adds	r4, #1
 80101a6:	9305      	str	r3, [sp, #20]
 80101a8:	4619      	mov	r1, r3
 80101aa:	f04f 0c0a 	mov.w	ip, #10
 80101ae:	4620      	mov	r0, r4
 80101b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101b4:	3a30      	subs	r2, #48	; 0x30
 80101b6:	2a09      	cmp	r2, #9
 80101b8:	d903      	bls.n	80101c2 <_vfiprintf_r+0x1ee>
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d0c5      	beq.n	801014a <_vfiprintf_r+0x176>
 80101be:	9105      	str	r1, [sp, #20]
 80101c0:	e7c3      	b.n	801014a <_vfiprintf_r+0x176>
 80101c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80101c6:	4604      	mov	r4, r0
 80101c8:	2301      	movs	r3, #1
 80101ca:	e7f0      	b.n	80101ae <_vfiprintf_r+0x1da>
 80101cc:	ab03      	add	r3, sp, #12
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	462a      	mov	r2, r5
 80101d2:	4b16      	ldr	r3, [pc, #88]	; (801022c <_vfiprintf_r+0x258>)
 80101d4:	a904      	add	r1, sp, #16
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7fa feea 	bl	800afb0 <_printf_float>
 80101dc:	4607      	mov	r7, r0
 80101de:	1c78      	adds	r0, r7, #1
 80101e0:	d1d6      	bne.n	8010190 <_vfiprintf_r+0x1bc>
 80101e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101e4:	07d9      	lsls	r1, r3, #31
 80101e6:	d405      	bmi.n	80101f4 <_vfiprintf_r+0x220>
 80101e8:	89ab      	ldrh	r3, [r5, #12]
 80101ea:	059a      	lsls	r2, r3, #22
 80101ec:	d402      	bmi.n	80101f4 <_vfiprintf_r+0x220>
 80101ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101f0:	f7fe f950 	bl	800e494 <__retarget_lock_release_recursive>
 80101f4:	89ab      	ldrh	r3, [r5, #12]
 80101f6:	065b      	lsls	r3, r3, #25
 80101f8:	f53f af12 	bmi.w	8010020 <_vfiprintf_r+0x4c>
 80101fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101fe:	e711      	b.n	8010024 <_vfiprintf_r+0x50>
 8010200:	ab03      	add	r3, sp, #12
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	462a      	mov	r2, r5
 8010206:	4b09      	ldr	r3, [pc, #36]	; (801022c <_vfiprintf_r+0x258>)
 8010208:	a904      	add	r1, sp, #16
 801020a:	4630      	mov	r0, r6
 801020c:	f7fb f974 	bl	800b4f8 <_printf_i>
 8010210:	e7e4      	b.n	80101dc <_vfiprintf_r+0x208>
 8010212:	bf00      	nop
 8010214:	08010cfc 	.word	0x08010cfc
 8010218:	08010d1c 	.word	0x08010d1c
 801021c:	08010cdc 	.word	0x08010cdc
 8010220:	08010c74 	.word	0x08010c74
 8010224:	08010c7e 	.word	0x08010c7e
 8010228:	0800afb1 	.word	0x0800afb1
 801022c:	0800ffb1 	.word	0x0800ffb1
 8010230:	08010c7a 	.word	0x08010c7a

08010234 <__swbuf_r>:
 8010234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010236:	460e      	mov	r6, r1
 8010238:	4614      	mov	r4, r2
 801023a:	4605      	mov	r5, r0
 801023c:	b118      	cbz	r0, 8010246 <__swbuf_r+0x12>
 801023e:	6983      	ldr	r3, [r0, #24]
 8010240:	b90b      	cbnz	r3, 8010246 <__swbuf_r+0x12>
 8010242:	f7ff fd99 	bl	800fd78 <__sinit>
 8010246:	4b21      	ldr	r3, [pc, #132]	; (80102cc <__swbuf_r+0x98>)
 8010248:	429c      	cmp	r4, r3
 801024a:	d12b      	bne.n	80102a4 <__swbuf_r+0x70>
 801024c:	686c      	ldr	r4, [r5, #4]
 801024e:	69a3      	ldr	r3, [r4, #24]
 8010250:	60a3      	str	r3, [r4, #8]
 8010252:	89a3      	ldrh	r3, [r4, #12]
 8010254:	071a      	lsls	r2, r3, #28
 8010256:	d52f      	bpl.n	80102b8 <__swbuf_r+0x84>
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	b36b      	cbz	r3, 80102b8 <__swbuf_r+0x84>
 801025c:	6923      	ldr	r3, [r4, #16]
 801025e:	6820      	ldr	r0, [r4, #0]
 8010260:	1ac0      	subs	r0, r0, r3
 8010262:	6963      	ldr	r3, [r4, #20]
 8010264:	b2f6      	uxtb	r6, r6
 8010266:	4283      	cmp	r3, r0
 8010268:	4637      	mov	r7, r6
 801026a:	dc04      	bgt.n	8010276 <__swbuf_r+0x42>
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f7ff fcee 	bl	800fc50 <_fflush_r>
 8010274:	bb30      	cbnz	r0, 80102c4 <__swbuf_r+0x90>
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	3b01      	subs	r3, #1
 801027a:	60a3      	str	r3, [r4, #8]
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	6022      	str	r2, [r4, #0]
 8010282:	701e      	strb	r6, [r3, #0]
 8010284:	6963      	ldr	r3, [r4, #20]
 8010286:	3001      	adds	r0, #1
 8010288:	4283      	cmp	r3, r0
 801028a:	d004      	beq.n	8010296 <__swbuf_r+0x62>
 801028c:	89a3      	ldrh	r3, [r4, #12]
 801028e:	07db      	lsls	r3, r3, #31
 8010290:	d506      	bpl.n	80102a0 <__swbuf_r+0x6c>
 8010292:	2e0a      	cmp	r6, #10
 8010294:	d104      	bne.n	80102a0 <__swbuf_r+0x6c>
 8010296:	4621      	mov	r1, r4
 8010298:	4628      	mov	r0, r5
 801029a:	f7ff fcd9 	bl	800fc50 <_fflush_r>
 801029e:	b988      	cbnz	r0, 80102c4 <__swbuf_r+0x90>
 80102a0:	4638      	mov	r0, r7
 80102a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102a4:	4b0a      	ldr	r3, [pc, #40]	; (80102d0 <__swbuf_r+0x9c>)
 80102a6:	429c      	cmp	r4, r3
 80102a8:	d101      	bne.n	80102ae <__swbuf_r+0x7a>
 80102aa:	68ac      	ldr	r4, [r5, #8]
 80102ac:	e7cf      	b.n	801024e <__swbuf_r+0x1a>
 80102ae:	4b09      	ldr	r3, [pc, #36]	; (80102d4 <__swbuf_r+0xa0>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	bf08      	it	eq
 80102b4:	68ec      	ldreq	r4, [r5, #12]
 80102b6:	e7ca      	b.n	801024e <__swbuf_r+0x1a>
 80102b8:	4621      	mov	r1, r4
 80102ba:	4628      	mov	r0, r5
 80102bc:	f000 f80c 	bl	80102d8 <__swsetup_r>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d0cb      	beq.n	801025c <__swbuf_r+0x28>
 80102c4:	f04f 37ff 	mov.w	r7, #4294967295
 80102c8:	e7ea      	b.n	80102a0 <__swbuf_r+0x6c>
 80102ca:	bf00      	nop
 80102cc:	08010cfc 	.word	0x08010cfc
 80102d0:	08010d1c 	.word	0x08010d1c
 80102d4:	08010cdc 	.word	0x08010cdc

080102d8 <__swsetup_r>:
 80102d8:	4b32      	ldr	r3, [pc, #200]	; (80103a4 <__swsetup_r+0xcc>)
 80102da:	b570      	push	{r4, r5, r6, lr}
 80102dc:	681d      	ldr	r5, [r3, #0]
 80102de:	4606      	mov	r6, r0
 80102e0:	460c      	mov	r4, r1
 80102e2:	b125      	cbz	r5, 80102ee <__swsetup_r+0x16>
 80102e4:	69ab      	ldr	r3, [r5, #24]
 80102e6:	b913      	cbnz	r3, 80102ee <__swsetup_r+0x16>
 80102e8:	4628      	mov	r0, r5
 80102ea:	f7ff fd45 	bl	800fd78 <__sinit>
 80102ee:	4b2e      	ldr	r3, [pc, #184]	; (80103a8 <__swsetup_r+0xd0>)
 80102f0:	429c      	cmp	r4, r3
 80102f2:	d10f      	bne.n	8010314 <__swsetup_r+0x3c>
 80102f4:	686c      	ldr	r4, [r5, #4]
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102fc:	0719      	lsls	r1, r3, #28
 80102fe:	d42c      	bmi.n	801035a <__swsetup_r+0x82>
 8010300:	06dd      	lsls	r5, r3, #27
 8010302:	d411      	bmi.n	8010328 <__swsetup_r+0x50>
 8010304:	2309      	movs	r3, #9
 8010306:	6033      	str	r3, [r6, #0]
 8010308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801030c:	81a3      	strh	r3, [r4, #12]
 801030e:	f04f 30ff 	mov.w	r0, #4294967295
 8010312:	e03e      	b.n	8010392 <__swsetup_r+0xba>
 8010314:	4b25      	ldr	r3, [pc, #148]	; (80103ac <__swsetup_r+0xd4>)
 8010316:	429c      	cmp	r4, r3
 8010318:	d101      	bne.n	801031e <__swsetup_r+0x46>
 801031a:	68ac      	ldr	r4, [r5, #8]
 801031c:	e7eb      	b.n	80102f6 <__swsetup_r+0x1e>
 801031e:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <__swsetup_r+0xd8>)
 8010320:	429c      	cmp	r4, r3
 8010322:	bf08      	it	eq
 8010324:	68ec      	ldreq	r4, [r5, #12]
 8010326:	e7e6      	b.n	80102f6 <__swsetup_r+0x1e>
 8010328:	0758      	lsls	r0, r3, #29
 801032a:	d512      	bpl.n	8010352 <__swsetup_r+0x7a>
 801032c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801032e:	b141      	cbz	r1, 8010342 <__swsetup_r+0x6a>
 8010330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010334:	4299      	cmp	r1, r3
 8010336:	d002      	beq.n	801033e <__swsetup_r+0x66>
 8010338:	4630      	mov	r0, r6
 801033a:	f7fe fdb9 	bl	800eeb0 <_free_r>
 801033e:	2300      	movs	r3, #0
 8010340:	6363      	str	r3, [r4, #52]	; 0x34
 8010342:	89a3      	ldrh	r3, [r4, #12]
 8010344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010348:	81a3      	strh	r3, [r4, #12]
 801034a:	2300      	movs	r3, #0
 801034c:	6063      	str	r3, [r4, #4]
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	6023      	str	r3, [r4, #0]
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	f043 0308 	orr.w	r3, r3, #8
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	b94b      	cbnz	r3, 8010372 <__swsetup_r+0x9a>
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010368:	d003      	beq.n	8010372 <__swsetup_r+0x9a>
 801036a:	4621      	mov	r1, r4
 801036c:	4630      	mov	r0, r6
 801036e:	f000 f84d 	bl	801040c <__smakebuf_r>
 8010372:	89a0      	ldrh	r0, [r4, #12]
 8010374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010378:	f010 0301 	ands.w	r3, r0, #1
 801037c:	d00a      	beq.n	8010394 <__swsetup_r+0xbc>
 801037e:	2300      	movs	r3, #0
 8010380:	60a3      	str	r3, [r4, #8]
 8010382:	6963      	ldr	r3, [r4, #20]
 8010384:	425b      	negs	r3, r3
 8010386:	61a3      	str	r3, [r4, #24]
 8010388:	6923      	ldr	r3, [r4, #16]
 801038a:	b943      	cbnz	r3, 801039e <__swsetup_r+0xc6>
 801038c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010390:	d1ba      	bne.n	8010308 <__swsetup_r+0x30>
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	0781      	lsls	r1, r0, #30
 8010396:	bf58      	it	pl
 8010398:	6963      	ldrpl	r3, [r4, #20]
 801039a:	60a3      	str	r3, [r4, #8]
 801039c:	e7f4      	b.n	8010388 <__swsetup_r+0xb0>
 801039e:	2000      	movs	r0, #0
 80103a0:	e7f7      	b.n	8010392 <__swsetup_r+0xba>
 80103a2:	bf00      	nop
 80103a4:	20000020 	.word	0x20000020
 80103a8:	08010cfc 	.word	0x08010cfc
 80103ac:	08010d1c 	.word	0x08010d1c
 80103b0:	08010cdc 	.word	0x08010cdc

080103b4 <abort>:
 80103b4:	b508      	push	{r3, lr}
 80103b6:	2006      	movs	r0, #6
 80103b8:	f000 f898 	bl	80104ec <raise>
 80103bc:	2001      	movs	r0, #1
 80103be:	f7f2 fa23 	bl	8002808 <_exit>

080103c2 <__swhatbuf_r>:
 80103c2:	b570      	push	{r4, r5, r6, lr}
 80103c4:	460e      	mov	r6, r1
 80103c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ca:	2900      	cmp	r1, #0
 80103cc:	b096      	sub	sp, #88	; 0x58
 80103ce:	4614      	mov	r4, r2
 80103d0:	461d      	mov	r5, r3
 80103d2:	da08      	bge.n	80103e6 <__swhatbuf_r+0x24>
 80103d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	602a      	str	r2, [r5, #0]
 80103dc:	061a      	lsls	r2, r3, #24
 80103de:	d410      	bmi.n	8010402 <__swhatbuf_r+0x40>
 80103e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e4:	e00e      	b.n	8010404 <__swhatbuf_r+0x42>
 80103e6:	466a      	mov	r2, sp
 80103e8:	f000 f89c 	bl	8010524 <_fstat_r>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	dbf1      	blt.n	80103d4 <__swhatbuf_r+0x12>
 80103f0:	9a01      	ldr	r2, [sp, #4]
 80103f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103fa:	425a      	negs	r2, r3
 80103fc:	415a      	adcs	r2, r3
 80103fe:	602a      	str	r2, [r5, #0]
 8010400:	e7ee      	b.n	80103e0 <__swhatbuf_r+0x1e>
 8010402:	2340      	movs	r3, #64	; 0x40
 8010404:	2000      	movs	r0, #0
 8010406:	6023      	str	r3, [r4, #0]
 8010408:	b016      	add	sp, #88	; 0x58
 801040a:	bd70      	pop	{r4, r5, r6, pc}

0801040c <__smakebuf_r>:
 801040c:	898b      	ldrh	r3, [r1, #12]
 801040e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010410:	079d      	lsls	r5, r3, #30
 8010412:	4606      	mov	r6, r0
 8010414:	460c      	mov	r4, r1
 8010416:	d507      	bpl.n	8010428 <__smakebuf_r+0x1c>
 8010418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	6123      	str	r3, [r4, #16]
 8010420:	2301      	movs	r3, #1
 8010422:	6163      	str	r3, [r4, #20]
 8010424:	b002      	add	sp, #8
 8010426:	bd70      	pop	{r4, r5, r6, pc}
 8010428:	ab01      	add	r3, sp, #4
 801042a:	466a      	mov	r2, sp
 801042c:	f7ff ffc9 	bl	80103c2 <__swhatbuf_r>
 8010430:	9900      	ldr	r1, [sp, #0]
 8010432:	4605      	mov	r5, r0
 8010434:	4630      	mov	r0, r6
 8010436:	f7fe fda7 	bl	800ef88 <_malloc_r>
 801043a:	b948      	cbnz	r0, 8010450 <__smakebuf_r+0x44>
 801043c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010440:	059a      	lsls	r2, r3, #22
 8010442:	d4ef      	bmi.n	8010424 <__smakebuf_r+0x18>
 8010444:	f023 0303 	bic.w	r3, r3, #3
 8010448:	f043 0302 	orr.w	r3, r3, #2
 801044c:	81a3      	strh	r3, [r4, #12]
 801044e:	e7e3      	b.n	8010418 <__smakebuf_r+0xc>
 8010450:	4b0d      	ldr	r3, [pc, #52]	; (8010488 <__smakebuf_r+0x7c>)
 8010452:	62b3      	str	r3, [r6, #40]	; 0x28
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	6020      	str	r0, [r4, #0]
 8010458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801045c:	81a3      	strh	r3, [r4, #12]
 801045e:	9b00      	ldr	r3, [sp, #0]
 8010460:	6163      	str	r3, [r4, #20]
 8010462:	9b01      	ldr	r3, [sp, #4]
 8010464:	6120      	str	r0, [r4, #16]
 8010466:	b15b      	cbz	r3, 8010480 <__smakebuf_r+0x74>
 8010468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801046c:	4630      	mov	r0, r6
 801046e:	f000 f86b 	bl	8010548 <_isatty_r>
 8010472:	b128      	cbz	r0, 8010480 <__smakebuf_r+0x74>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	f043 0301 	orr.w	r3, r3, #1
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	89a0      	ldrh	r0, [r4, #12]
 8010482:	4305      	orrs	r5, r0
 8010484:	81a5      	strh	r5, [r4, #12]
 8010486:	e7cd      	b.n	8010424 <__smakebuf_r+0x18>
 8010488:	0800fd11 	.word	0x0800fd11

0801048c <_malloc_usable_size_r>:
 801048c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010490:	1f18      	subs	r0, r3, #4
 8010492:	2b00      	cmp	r3, #0
 8010494:	bfbc      	itt	lt
 8010496:	580b      	ldrlt	r3, [r1, r0]
 8010498:	18c0      	addlt	r0, r0, r3
 801049a:	4770      	bx	lr

0801049c <_raise_r>:
 801049c:	291f      	cmp	r1, #31
 801049e:	b538      	push	{r3, r4, r5, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	460d      	mov	r5, r1
 80104a4:	d904      	bls.n	80104b0 <_raise_r+0x14>
 80104a6:	2316      	movs	r3, #22
 80104a8:	6003      	str	r3, [r0, #0]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80104b2:	b112      	cbz	r2, 80104ba <_raise_r+0x1e>
 80104b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104b8:	b94b      	cbnz	r3, 80104ce <_raise_r+0x32>
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 f830 	bl	8010520 <_getpid_r>
 80104c0:	462a      	mov	r2, r5
 80104c2:	4601      	mov	r1, r0
 80104c4:	4620      	mov	r0, r4
 80104c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ca:	f000 b817 	b.w	80104fc <_kill_r>
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d00a      	beq.n	80104e8 <_raise_r+0x4c>
 80104d2:	1c59      	adds	r1, r3, #1
 80104d4:	d103      	bne.n	80104de <_raise_r+0x42>
 80104d6:	2316      	movs	r3, #22
 80104d8:	6003      	str	r3, [r0, #0]
 80104da:	2001      	movs	r0, #1
 80104dc:	e7e7      	b.n	80104ae <_raise_r+0x12>
 80104de:	2400      	movs	r4, #0
 80104e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104e4:	4628      	mov	r0, r5
 80104e6:	4798      	blx	r3
 80104e8:	2000      	movs	r0, #0
 80104ea:	e7e0      	b.n	80104ae <_raise_r+0x12>

080104ec <raise>:
 80104ec:	4b02      	ldr	r3, [pc, #8]	; (80104f8 <raise+0xc>)
 80104ee:	4601      	mov	r1, r0
 80104f0:	6818      	ldr	r0, [r3, #0]
 80104f2:	f7ff bfd3 	b.w	801049c <_raise_r>
 80104f6:	bf00      	nop
 80104f8:	20000020 	.word	0x20000020

080104fc <_kill_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d07      	ldr	r5, [pc, #28]	; (801051c <_kill_r+0x20>)
 8010500:	2300      	movs	r3, #0
 8010502:	4604      	mov	r4, r0
 8010504:	4608      	mov	r0, r1
 8010506:	4611      	mov	r1, r2
 8010508:	602b      	str	r3, [r5, #0]
 801050a:	f7f2 f96d 	bl	80027e8 <_kill>
 801050e:	1c43      	adds	r3, r0, #1
 8010510:	d102      	bne.n	8010518 <_kill_r+0x1c>
 8010512:	682b      	ldr	r3, [r5, #0]
 8010514:	b103      	cbz	r3, 8010518 <_kill_r+0x1c>
 8010516:	6023      	str	r3, [r4, #0]
 8010518:	bd38      	pop	{r3, r4, r5, pc}
 801051a:	bf00      	nop
 801051c:	20006794 	.word	0x20006794

08010520 <_getpid_r>:
 8010520:	f7f2 b95a 	b.w	80027d8 <_getpid>

08010524 <_fstat_r>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4d07      	ldr	r5, [pc, #28]	; (8010544 <_fstat_r+0x20>)
 8010528:	2300      	movs	r3, #0
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	4611      	mov	r1, r2
 8010530:	602b      	str	r3, [r5, #0]
 8010532:	f7f2 f9b8 	bl	80028a6 <_fstat>
 8010536:	1c43      	adds	r3, r0, #1
 8010538:	d102      	bne.n	8010540 <_fstat_r+0x1c>
 801053a:	682b      	ldr	r3, [r5, #0]
 801053c:	b103      	cbz	r3, 8010540 <_fstat_r+0x1c>
 801053e:	6023      	str	r3, [r4, #0]
 8010540:	bd38      	pop	{r3, r4, r5, pc}
 8010542:	bf00      	nop
 8010544:	20006794 	.word	0x20006794

08010548 <_isatty_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d06      	ldr	r5, [pc, #24]	; (8010564 <_isatty_r+0x1c>)
 801054c:	2300      	movs	r3, #0
 801054e:	4604      	mov	r4, r0
 8010550:	4608      	mov	r0, r1
 8010552:	602b      	str	r3, [r5, #0]
 8010554:	f7f2 f9b7 	bl	80028c6 <_isatty>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_isatty_r+0x1a>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_isatty_r+0x1a>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	20006794 	.word	0x20006794

08010568 <_init>:
 8010568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801056a:	bf00      	nop
 801056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801056e:	bc08      	pop	{r3}
 8010570:	469e      	mov	lr, r3
 8010572:	4770      	bx	lr

08010574 <_fini>:
 8010574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010576:	bf00      	nop
 8010578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801057a:	bc08      	pop	{r3}
 801057c:	469e      	mov	lr, r3
 801057e:	4770      	bx	lr
