
Test_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080118f8  080118f8  000218f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012154  08012154  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08012154  08012154  00022154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801215c  0801215c  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801215c  0801215c  0002215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012160  08012160  00022160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08012164  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000666c  20000258  080123bc  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068c4  080123bc  000368c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002226c  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471e  00000000  00000000  000524f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00056c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  000587e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b092  00000000  00000000  0005a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4b9  00000000  00000000  00085282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038f3  00000000  00000000  000a473b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a802e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef0  00000000  00000000  001a8080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080118e0 	.word	0x080118e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	080118e0 	.word	0x080118e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <send_data>:



//function to send data when connected
void send_data(uint8_t * send_data_buffer, int *flag,int*end_history)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	*flag = History_Flag;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <send_data+0x70>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]

	if(strcmp((char *)send_data_test_buffer,(char *)send_data_buffer)!=0)
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <send_data+0x74>)
 8001030:	f7ff f8ce 	bl	80001d0 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <send_data+0x36>
	    {
		    HAL_UART_Transmit(&huart1, send_data_buffer, 15, 100);
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	220f      	movs	r2, #15
 800103e:	68f9      	ldr	r1, [r7, #12]
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <send_data+0x78>)
 8001042:	f005 fc01 	bl	8006848 <HAL_UART_Transmit>
		    strcpy((char *)send_data_test_buffer,(char *)send_data_buffer);
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <send_data+0x74>)
 800104a:	f00b ffdf 	bl	800d00c <strcpy>
	    }


	HAL_Delay(8);
 800104e:	2008      	movs	r0, #8
 8001050:	f002 fa18 	bl	8003484 <HAL_Delay>
	huart1.pRxBuffPtr = (uint8_t *)buffer;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <send_data+0x78>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <send_data+0x7c>)
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
	huart1.RxXferCount = sizeof(buffer);
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <send_data+0x78>)
 800105c:	2214      	movs	r2, #20
 800105e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if ((*end_history==1)||(((buffer[0]=='\005')&&(buffer[19]=='\005'))))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d007      	beq.n	800107a <send_data+0x62>
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <send_data+0x7c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d106      	bne.n	8001080 <send_data+0x68>
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <send_data+0x7c>)
 8001074:	7cdb      	ldrb	r3, [r3, #19]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d102      	bne.n	8001080 <send_data+0x68>
	{
		History_Flag = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <send_data+0x70>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

	}

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002f8 	.word	0x200002f8
 800108c:	20000324 	.word	0x20000324
 8001090:	20000274 	.word	0x20000274
 8001094:	200002fc 	.word	0x200002fc

08001098 <History_Range>:

void History_Range(uint32_t * start_epoch, uint32_t  * end_epoch)
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b08d      	sub	sp, #52	; 0x34
 800109c:	af08      	add	r7, sp, #32
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]

if (buffer[0] == '\001')
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <History_Range+0x150>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	f040 809a 	bne.w	80011e0 <History_Range+0x148>

	    {
	       memcpy((char*)epoch1, buffer, 10);
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <History_Range+0x154>)
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <History_Range+0x150>)
 80010b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b2:	c303      	stmia	r3!, {r0, r1}
 80010b4:	801a      	strh	r2, [r3, #0]
	       sprintf(int_epoch1,"%d%d%d%d%d%d%d%d%d%d",epoch1[0],epoch1[1],epoch1[2],epoch1[3],epoch1[4],epoch1[5],epoch1[6],epoch1[7],epoch1[8],epoch1[9]);
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <History_Range+0x154>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	469c      	mov	ip, r3
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <History_Range+0x154>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	469e      	mov	lr, r3
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <History_Range+0x154>)
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <History_Range+0x154>)
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <History_Range+0x154>)
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <History_Range+0x154>)
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	461c      	mov	r4, r3
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <History_Range+0x154>)
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	461d      	mov	r5, r3
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <History_Range+0x154>)
 80010e2:	79db      	ldrb	r3, [r3, #7]
 80010e4:	461e      	mov	r6, r3
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <History_Range+0x154>)
 80010e8:	7a1b      	ldrb	r3, [r3, #8]
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <History_Range+0x154>)
 80010ee:	7a5b      	ldrb	r3, [r3, #9]
 80010f0:	9307      	str	r3, [sp, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	9605      	str	r6, [sp, #20]
 80010f8:	9504      	str	r5, [sp, #16]
 80010fa:	9403      	str	r4, [sp, #12]
 80010fc:	9002      	str	r0, [sp, #8]
 80010fe:	9101      	str	r1, [sp, #4]
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	4673      	mov	r3, lr
 8001104:	4662      	mov	r2, ip
 8001106:	493a      	ldr	r1, [pc, #232]	; (80011f0 <History_Range+0x158>)
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <History_Range+0x15c>)
 800110a:	f00b fee1 	bl	800ced0 <siprintf>
	       x1=strtol(int_epoch1, NULL, 10);
 800110e:	220a      	movs	r2, #10
 8001110:	2100      	movs	r1, #0
 8001112:	4838      	ldr	r0, [pc, #224]	; (80011f4 <History_Range+0x15c>)
 8001114:	f00c fe44 	bl	800dda0 <strtol>
 8001118:	4603      	mov	r3, r0
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <History_Range+0x160>)
 800111c:	6013      	str	r3, [r2, #0]
	       sprintf(hexa_epoch1,"%x",x1);
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <History_Range+0x160>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <History_Range+0x164>)
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <History_Range+0x168>)
 8001128:	f00b fed2 	bl	800ced0 <siprintf>
	       epoch11_value = strtoul(hexa_epoch1,NULL,16);
 800112c:	2210      	movs	r2, #16
 800112e:	2100      	movs	r1, #0
 8001130:	4833      	ldr	r0, [pc, #204]	; (8001200 <History_Range+0x168>)
 8001132:	f00c feb3 	bl	800de9c <strtoul>
 8001136:	4603      	mov	r3, r0
 8001138:	4a32      	ldr	r2, [pc, #200]	; (8001204 <History_Range+0x16c>)
 800113a:	6013      	str	r3, [r2, #0]

	       memcpy((char*)epoch2, (buffer) + 10, 10);
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <History_Range+0x170>)
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <History_Range+0x174>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6851      	ldr	r1, [r2, #4]
 8001144:	c303      	stmia	r3!, {r0, r1}
 8001146:	8912      	ldrh	r2, [r2, #8]
 8001148:	801a      	strh	r2, [r3, #0]
	       sprintf(int_epoch2,"%d%d%d%d%d%d%d%d%d%d",epoch2[0],epoch2[1],epoch2[2],epoch2[3],epoch2[4],epoch2[5],epoch2[6],epoch2[7],epoch2[8],epoch2[9]);
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <History_Range+0x174>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	469c      	mov	ip, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <History_Range+0x174>)
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	469e      	mov	lr, r3
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <History_Range+0x174>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	461a      	mov	r2, r3
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <History_Range+0x174>)
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	4619      	mov	r1, r3
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <History_Range+0x174>)
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <History_Range+0x174>)
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	461c      	mov	r4, r3
 800116e:	4b27      	ldr	r3, [pc, #156]	; (800120c <History_Range+0x174>)
 8001170:	799b      	ldrb	r3, [r3, #6]
 8001172:	461d      	mov	r5, r3
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <History_Range+0x174>)
 8001176:	79db      	ldrb	r3, [r3, #7]
 8001178:	461e      	mov	r6, r3
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <History_Range+0x174>)
 800117c:	7a1b      	ldrb	r3, [r3, #8]
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <History_Range+0x174>)
 8001182:	7a5b      	ldrb	r3, [r3, #9]
 8001184:	9307      	str	r3, [sp, #28]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	9306      	str	r3, [sp, #24]
 800118a:	9605      	str	r6, [sp, #20]
 800118c:	9504      	str	r5, [sp, #16]
 800118e:	9403      	str	r4, [sp, #12]
 8001190:	9002      	str	r0, [sp, #8]
 8001192:	9101      	str	r1, [sp, #4]
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	4673      	mov	r3, lr
 8001198:	4662      	mov	r2, ip
 800119a:	4915      	ldr	r1, [pc, #84]	; (80011f0 <History_Range+0x158>)
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <History_Range+0x178>)
 800119e:	f00b fe97 	bl	800ced0 <siprintf>
	       x2 = strtol(int_epoch2, NULL, 10);
 80011a2:	220a      	movs	r2, #10
 80011a4:	2100      	movs	r1, #0
 80011a6:	481a      	ldr	r0, [pc, #104]	; (8001210 <History_Range+0x178>)
 80011a8:	f00c fdfa 	bl	800dda0 <strtol>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <History_Range+0x17c>)
 80011b0:	6013      	str	r3, [r2, #0]
	       sprintf(hexa_epoch2,"%x",x2);
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <History_Range+0x17c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <History_Range+0x164>)
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <History_Range+0x180>)
 80011bc:	f00b fe88 	bl	800ced0 <siprintf>
	       epoch22_value = strtoul(hexa_epoch2,NULL,16);
 80011c0:	2210      	movs	r2, #16
 80011c2:	2100      	movs	r1, #0
 80011c4:	4814      	ldr	r0, [pc, #80]	; (8001218 <History_Range+0x180>)
 80011c6:	f00c fe69 	bl	800de9c <strtoul>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <History_Range+0x184>)
 80011ce:	6013      	str	r3, [r2, #0]

	       *start_epoch = epoch11_value;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <History_Range+0x16c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	601a      	str	r2, [r3, #0]
	       *end_epoch = epoch22_value;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <History_Range+0x184>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	601a      	str	r2, [r3, #0]


	    }

}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e8:	200002fc 	.word	0x200002fc
 80011ec:	20000334 	.word	0x20000334
 80011f0:	08011900 	.word	0x08011900
 80011f4:	2000034c 	.word	0x2000034c
 80011f8:	20000374 	.word	0x20000374
 80011fc:	08011918 	.word	0x08011918
 8001200:	20000358 	.word	0x20000358
 8001204:	2000037c 	.word	0x2000037c
 8001208:	20000306 	.word	0x20000306
 800120c:	20000340 	.word	0x20000340
 8001210:	20000360 	.word	0x20000360
 8001214:	20000378 	.word	0x20000378
 8001218:	2000036c 	.word	0x2000036c
 800121c:	20000380 	.word	0x20000380

08001220 <MX_USART1_UART_Init>:

//function to config usart1
static void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART1_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001264:	f005 faa2 	bl	80067ac <HAL_UART_Init>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000274 	.word	0x20000274
 8001270:	40013800 	.word	0x40013800

08001274 <BLE_State_Pin_Init>:


static void BLE_State_Pin_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /*Configure BLE STATE GPIO PIN (PD0) */
  GPIO_InitStruct.Pin = BLE_STATE_GPIO_PIN ;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <BLE_State_Pin_Init+0x24>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <BLE_State_Pin_Init+0x24>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <BLE_State_Pin_Init+0x24>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	4903      	ldr	r1, [pc, #12]	; (8001298 <BLE_State_Pin_Init+0x24>)
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <BLE_State_Pin_Init+0x28>)
 800128e:	f002 fc75 	bl	8003b7c <HAL_GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000310 	.word	0x20000310
 800129c:	48000c00 	.word	0x48000c00

080012a0 <BLE_Init>:

void BLE_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 80012a4:	f7ff ffbc 	bl	8001220 <MX_USART1_UART_Init>
	BLE_State_Pin_Init();
 80012a8:	f7ff ffe4 	bl	8001274 <BLE_State_Pin_Init>
	HAL_UART_Receive_DMA(&huart1,(uint8_t *) buffer, 20);
 80012ac:	2214      	movs	r2, #20
 80012ae:	4903      	ldr	r1, [pc, #12]	; (80012bc <BLE_Init+0x1c>)
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <BLE_Init+0x20>)
 80012b2:	f005 fc21 	bl	8006af8 <HAL_UART_Receive_DMA>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002fc 	.word	0x200002fc
 80012c0:	20000274 	.word	0x20000274

080012c4 <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer,20);
 80012cc:	2214      	movs	r2, #20
 80012ce:	4907      	ldr	r1, [pc, #28]	; (80012ec <HAL_UART_RxHalfCpltCallback+0x28>)
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80012d2:	f005 fc11 	bl	8006af8 <HAL_UART_Receive_DMA>

	  if ((buffer[0]=='\001'))
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_UART_RxHalfCpltCallback+0x28>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_UART_RxHalfCpltCallback+0x20>
	  {

	      History_Flag=1;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x30>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
	  }

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002fc 	.word	0x200002fc
 80012f0:	20000274 	.word	0x20000274
 80012f4:	200002f8 	.word	0x200002f8

080012f8 <Memory_Init>:
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
*/

void Memory_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <Memory_Init+0x84>)
 8001300:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <Memory_Init+0x88>)
 8001302:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  HAL_QSPI_DeInit(&QSPIHandle);
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <Memory_Init+0x84>)
 8001306:	f003 f81b 	bl	8004340 <HAL_QSPI_DeInit>

  /* System level initialization */
  QSPI_MspInit();
 800130a:	f000 fa67 	bl	80017dc <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Memory_Init+0x84>)
 8001310:	2201      	movs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <Memory_Init+0x84>)
 8001316:	2204      	movs	r2, #4
 8001318:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.FlashSize = 23;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <Memory_Init+0x84>)
 800131c:	2217      	movs	r2, #23
 800131e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <Memory_Init+0x84>)
 8001322:	2210      	movs	r2, #16
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <Memory_Init+0x4a>
  {
    return 32U;
 800133e:	2320      	movs	r3, #32
 8001340:	e003      	b.n	800134a <Memory_Init+0x52>
  }
  return __builtin_clz(value);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800134a:	3b01      	subs	r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <Memory_Init+0x84>)
 8001350:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Memory_Init+0x84>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Memory_Init+0x84>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]

  HAL_QSPI_Init(&QSPIHandle);
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <Memory_Init+0x84>)
 8001360:	f002 ff78 	bl	8004254 <HAL_QSPI_Init>

  /* QSPI memory reset */
  QSPI_ResetMemory(&QSPIHandle);
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <Memory_Init+0x84>)
 8001366:	f000 fa85 	bl	8001874 <QSPI_ResetMemory>

  /* Configuration of the dummy cucles on QSPI memory side */
  QSPI_DummyCyclesCfg(&QSPIHandle);
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <Memory_Init+0x84>)
 800136c:	f000 fac6 	bl	80018fc <QSPI_DummyCyclesCfg>

  USART2_UART_Init();
 8001370:	f000 fbc8 	bl	8001b04 <USART2_UART_Init>

}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000384 	.word	0x20000384
 8001380:	a0001000 	.word	0xa0001000

08001384 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
void BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	; 0x48
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001396:	23eb      	movs	r3, #235	; 0xeb
 8001398:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800139a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80013ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80013b4:	230a      	movs	r3, #10
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013c0:	2300      	movs	r3, #0
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013c4:	2300      	movs	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <BSP_QSPI_Read+0x68>)
 80013d4:	f002 ffd8 	bl	8004388 <HAL_QSPI_Command>

  /* Reception of the data */
  HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <BSP_QSPI_Read+0x68>)
 80013e0:	f003 f8c7 	bl	8004572 <HAL_QSPI_Receive>


}
 80013e4:	bf00      	nop
 80013e6:	3748      	adds	r7, #72	; 0x48
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000384 	.word	0x20000384

080013f0 <Store_Data>:
  * @brief  Stores an amount of data to the QSPI memory.
  * @param  pData: Pointer to data to be stored
  * @param  Size: Size of data to store
 */
void Store_Data(uint8_t *pData, int Size)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]

	if (store==1)
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <Store_Data+0x70>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12a      	bne.n	8001458 <Store_Data+0x68>
	{

		if (Mem_pleine(Size))
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f000 fc16 	bl	8001c34 <Mem_pleine>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <Store_Data+0x26>
				{
				  Erase_Subsector(Size);
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f000 fd04 	bl	8001e1c <Erase_Subsector>
 8001414:	e003      	b.n	800141e <Store_Data+0x2e>
				}
		else
				{
				  Write_Data(pData,Size);
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fc77 	bl	8001d0c <Write_Data>
				}

		// Reset du compteur :
		if ((comp==compteur_final)&&(Est_Vide(Hexadecimal(comp*Size),Size)==false))
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <Store_Data+0x74>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <Store_Data+0x78>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d116      	bne.n	8001458 <Store_Data+0x68>
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <Store_Data+0x74>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fb8f 	bl	8001b58 <Hexadecimal>
 800143a:	4602      	mov	r2, r0
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f000 fba3 	bl	8001b8c <Est_Vide>
 8001446:	4603      	mov	r3, r0
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <Store_Data+0x68>
				{
				   comp=0;
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <Store_Data+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
				}
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000044d 	.word	0x2000044d
 8001464:	20000004 	.word	0x20000004
 8001468:	20000000 	.word	0x20000000

0800146c <get_history>:

void get_history(uint8_t buff[13], int size,bool *flg)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b08b      	sub	sp, #44	; 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	int debut=0;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buffer[13];

	if (call_flg == false)
 800147c:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <get_history+0x1cc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80e4 	beq.w	8001654 <get_history+0x1e8>
    {
        // recevoir l'intervalle de l'historique

		v= false;
 800148c:	4b6b      	ldr	r3, [pc, #428]	; (800163c <get_history+0x1d0>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
		History_Range(&epoch1_value,&epoch2_value);
 8001492:	496b      	ldr	r1, [pc, #428]	; (8001640 <get_history+0x1d4>)
 8001494:	486b      	ldr	r0, [pc, #428]	; (8001644 <get_history+0x1d8>)
 8001496:	f7ff fdff 	bl	8001098 <History_Range>


        // chercher début de l'historique

        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <get_history+0x1dc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fb57 	bl	8001b58 <Hexadecimal>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4610      	mov	r0, r2
 80014b2:	f000 fb6b 	bl	8001b8c <Est_Vide>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d130      	bne.n	800151e <get_history+0xb2>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 80014bc:	4b62      	ldr	r3, [pc, #392]	; (8001648 <get_history+0x1dc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fb46 	bl	8001b58 <Hexadecimal>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4610      	mov	r0, r2
 80014d4:	f000 fb5a 	bl	8001b8c <Est_Vide>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d026      	beq.n	8001532 <get_history+0xc6>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 fb37 	bl	8001b58 <Hexadecimal>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 fb4b 	bl	8001b8c <Est_Vide>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d017      	beq.n	8001532 <get_history+0xc6>
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	2000      	movs	r0, #0
 8001506:	f000 fd1d 	bl	8001f44 <hexa_of_epoch>
 800150a:	4604      	mov	r4, r0
 800150c:	4b4e      	ldr	r3, [pc, #312]	; (8001648 <get_history+0x1dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fd16 	bl	8001f44 <hexa_of_epoch>
 8001518:	4603      	mov	r3, r0
 800151a:	429c      	cmp	r4, r3
 800151c:	d209      	bcs.n	8001532 <get_history+0xc6>
            {
                debut = start_of_history(0,comp,epoch1_value,size);
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <get_history+0x1e0>)
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	4b48      	ldr	r3, [pc, #288]	; (8001644 <get_history+0x1d8>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fd47 	bl	8001fbc <start_of_history>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24
 8001530:	e07b      	b.n	800162a <get_history+0x1be>
            }
        else if((Est_Vide(Hexadecimal(0),size))&&(!Est_Vide(Hexadecimal(256*size),size)))
 8001532:	2000      	movs	r0, #0
 8001534:	f000 fb10 	bl	8001b58 <Hexadecimal>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 fb24 	bl	8001b8c <Est_Vide>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01b      	beq.n	8001582 <get_history+0x116>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb02 	bl	8001b58 <Hexadecimal>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f000 fb16 	bl	8001b8c <Est_Vide>
 8001560:	4603      	mov	r3, r0
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <get_history+0x116>
            {
                debut = start_of_history(256,compteur_final,epoch1_value,size);
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <get_history+0x1dc>)
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <get_history+0x1d8>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f44f 7080 	mov.w	r0, #256	; 0x100
 800157a:	f000 fd1f 	bl	8001fbc <start_of_history>
 800157e:	6278      	str	r0, [r7, #36]	; 0x24
 8001580:	e053      	b.n	800162a <get_history+0x1be>
            }
        else
            {
                if((hexa_of_epoch(((comp/256)+1)*256,size)<= epoch1_value)&&(hexa_of_epoch(compteur_final,size)>= epoch1_value))
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <get_history+0x1e0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da00      	bge.n	800158c <get_history+0x120>
 800158a:	33ff      	adds	r3, #255	; 0xff
 800158c:	121b      	asrs	r3, r3, #8
 800158e:	3301      	adds	r3, #1
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fcd5 	bl	8001f44 <hexa_of_epoch>
 800159a:	4602      	mov	r2, r0
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <get_history+0x1d8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d81b      	bhi.n	80015dc <get_history+0x170>
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <get_history+0x1dc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fcca 	bl	8001f44 <hexa_of_epoch>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <get_history+0x1d8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d310      	bcc.n	80015dc <get_history+0x170>
                    debut = start_of_history(((comp/256)+1)*256,compteur_final,epoch1_value,size);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <get_history+0x1e0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da00      	bge.n	80015c4 <get_history+0x158>
 80015c2:	33ff      	adds	r3, #255	; 0xff
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	3301      	adds	r3, #1
 80015c8:	0218      	lsls	r0, r3, #8
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <get_history+0x1dc>)
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <get_history+0x1d8>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f000 fcf2 	bl	8001fbc <start_of_history>
 80015d8:	6278      	str	r0, [r7, #36]	; 0x24
 80015da:	e026      	b.n	800162a <get_history+0x1be>

                else if ((hexa_of_epoch(0,size)<= epoch1_value)&&(hexa_of_epoch(comp,size)>= epoch1_value))
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 fcb0 	bl	8001f44 <hexa_of_epoch>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <get_history+0x1d8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d814      	bhi.n	8001618 <get_history+0x1ac>
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <get_history+0x1e0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fca5 	bl	8001f44 <hexa_of_epoch>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <get_history+0x1d8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d309      	bcc.n	8001618 <get_history+0x1ac>
                    debut = start_of_history(0,comp,epoch1_value,size);
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <get_history+0x1e0>)
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <get_history+0x1d8>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2000      	movs	r0, #0
 8001610:	f000 fcd4 	bl	8001fbc <start_of_history>
 8001614:	6278      	str	r0, [r7, #36]	; 0x24
 8001616:	e008      	b.n	800162a <get_history+0x1be>
                else
                    debut = ((comp/256)+1)*256;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <get_history+0x1e0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	da00      	bge.n	8001622 <get_history+0x1b6>
 8001620:	33ff      	adds	r3, #255	; 0xff
 8001622:	121b      	asrs	r3, r3, #8
 8001624:	3301      	adds	r3, #1
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
            }
        call_flg = true;
 800162a:	4b03      	ldr	r3, [pc, #12]	; (8001638 <get_history+0x1cc>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
        comteur_history = debut;
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <get_history+0x1e4>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e07a      	b.n	800172e <get_history+0x2c2>
 8001638:	200004ac 	.word	0x200004ac
 800163c:	200004ad 	.word	0x200004ad
 8001640:	20000498 	.word	0x20000498
 8001644:	20000494 	.word	0x20000494
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004
 8001650:	20000450 	.word	0x20000450

    }
    else
    {
    	nv_epoch1_value = epoch1_value;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <get_history+0x2d4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <get_history+0x2d8>)
 800165a:	6013      	str	r3, [r2, #0]
    	nv_epoch2_value = epoch2_value;
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <get_history+0x2dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3a      	ldr	r2, [pc, #232]	; (800174c <get_history+0x2e0>)
 8001662:	6013      	str	r3, [r2, #0]
    	History_Range(&start_epoch_value,&end_epoch_value);
 8001664:	493a      	ldr	r1, [pc, #232]	; (8001750 <get_history+0x2e4>)
 8001666:	483b      	ldr	r0, [pc, #236]	; (8001754 <get_history+0x2e8>)
 8001668:	f7ff fd16 	bl	8001098 <History_Range>
    	// envoyer les données

        BSP_QSPI_Read(buffer,Hexadecimal(comteur_history*size),size);
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <get_history+0x2ec>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa6e 	bl	8001b58 <Hexadecimal>
 800167c:	4601      	mov	r1, r0
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe7d 	bl	8001384 <BSP_QSPI_Read>
        Inversion(buffer,buff);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 ffc7 	bl	8002624 <Inversion>

        HAL_UART_Transmit_IT(&huart2, (uint8_t*)"compteur_history\n\n",20);
 8001696:	2214      	movs	r2, #20
 8001698:	4930      	ldr	r1, [pc, #192]	; (800175c <get_history+0x2f0>)
 800169a:	4831      	ldr	r0, [pc, #196]	; (8001760 <get_history+0x2f4>)
 800169c:	f005 f968 	bl	8006970 <HAL_UART_Transmit_IT>

        if ((nv_epoch1_value != start_epoch_value)||(nv_epoch2_value != end_epoch_value))
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <get_history+0x2d8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <get_history+0x2e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d105      	bne.n	80016b8 <get_history+0x24c>
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <get_history+0x2e0>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <get_history+0x2e4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d002      	beq.n	80016be <get_history+0x252>
            {call_flg=false;}
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <get_history+0x2f8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
	    if(comteur_history==compteur_final+1)
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <get_history+0x2fc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <get_history+0x2ec>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d102      	bne.n	80016d2 <get_history+0x266>
			{comteur_history=0;}
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <get_history+0x2ec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]


	    if (((hexa_of_epoch(comteur_history,size) >= epoch2_value)&&(!Est_Vide(Hexadecimal(comteur_history*size),size)))||(comteur_history==comp))
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <get_history+0x2ec>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fc33 	bl	8001f44 <hexa_of_epoch>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <get_history+0x2dc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d313      	bcc.n	8001710 <get_history+0x2a4>
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <get_history+0x2ec>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fa30 	bl	8001b58 <Hexadecimal>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f000 fa44 	bl	8001b8c <Est_Vide>
 8001704:	4603      	mov	r3, r0
 8001706:	f083 0301 	eor.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <get_history+0x2b0>
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <get_history+0x2ec>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <get_history+0x300>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d108      	bne.n	800172e <get_history+0x2c2>
			{
				call_flg=false;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <get_history+0x2f8>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
				v=true;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <get_history+0x304>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
				comteur_history=0;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <get_history+0x2ec>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

			}

    }
	*flg=v;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <get_history+0x304>)
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	701a      	strb	r2, [r3, #0]

}
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	; 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	bf00      	nop
 8001740:	20000494 	.word	0x20000494
 8001744:	200004a4 	.word	0x200004a4
 8001748:	20000498 	.word	0x20000498
 800174c:	200004a8 	.word	0x200004a8
 8001750:	200004a0 	.word	0x200004a0
 8001754:	2000049c 	.word	0x2000049c
 8001758:	20000450 	.word	0x20000450
 800175c:	0801191c 	.word	0x0801191c
 8001760:	200003c8 	.word	0x200003c8
 8001764:	200004ac 	.word	0x200004ac
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004
 8001770:	200004ad 	.word	0x200004ad

08001774 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
void BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800177c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001780:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8001782:	2320      	movs	r3, #32
 8001784:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800178c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001790:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  QSPI_WriteEnable(&QSPIHandle);
 80017ae:	480a      	ldr	r0, [pc, #40]	; (80017d8 <BSP_QSPI_Erase_Block+0x64>)
 80017b0:	f000 f922 	bl	80019f8 <QSPI_WriteEnable>

  /* Send the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <BSP_QSPI_Erase_Block+0x64>)
 80017c0:	f002 fde2 	bl	8004388 <HAL_QSPI_Command>

  /* Configure automatic polling mode to wait for end of erase */
  QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME);
 80017c4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <BSP_QSPI_Erase_Block+0x64>)
 80017ca:	f000 f961 	bl	8001a90 <QSPI_AutoPollingMemReady>

}
 80017ce:	bf00      	nop
 80017d0:	3740      	adds	r7, #64	; 0x40
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000384 	.word	0x20000384

080017dc <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <QSPI_MspInit+0x90>)
 80017e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <QSPI_MspInit+0x90>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6513      	str	r3, [r2, #80]	; 0x50
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <QSPI_MspInit+0x90>)
 80017f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <QSPI_MspInit+0x90>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <QSPI_MspInit+0x90>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <QSPI_MspInit+0x90>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <QSPI_MspInit+0x90>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <QSPI_MspInit+0x90>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <QSPI_MspInit+0x90>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <QSPI_MspInit+0x90>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 800182a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800182e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001834:	2301      	movs	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183c:	230a      	movs	r3, #10
 800183e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <QSPI_MspInit+0x94>)
 8001848:	f002 f998 	bl	8003b7c <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800184c:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8001850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <QSPI_MspInit+0x94>)
 800185e:	f002 f98d 	bl	8003b7c <HAL_GPIO_Init>
}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	48001000 	.word	0x48001000

08001874 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	; 0x40
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800187c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001880:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001882:	2366      	movs	r3, #102	; 0x66
 8001884:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4619      	mov	r1, r3
 80018ac:	4812      	ldr	r0, [pc, #72]	; (80018f8 <QSPI_ResetMemory+0x84>)
 80018ae:	f002 fd6b 	bl	8004388 <HAL_QSPI_Command>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e019      	b.n	80018f0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80018bc:	2399      	movs	r3, #153	; 0x99
 80018be:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4619      	mov	r1, r3
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <QSPI_ResetMemory+0x84>)
 80018cc:	f002 fd5c 	bl	8004388 <HAL_QSPI_Command>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00a      	b.n	80018f0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80018da:	f241 3188 	movw	r1, #5000	; 0x1388
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <QSPI_ResetMemory+0x84>)
 80018e0:	f000 f8d6 	bl	8001a90 <QSPI_AutoPollingMemReady>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3740      	adds	r7, #64	; 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000384 	.word	0x20000384

080018fc <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 800190a:	2385      	movs	r3, #133	; 0x85
 800190c:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001928:	2300      	movs	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4619      	mov	r1, r3
 800193a:	482e      	ldr	r0, [pc, #184]	; (80019f4 <QSPI_DummyCyclesCfg+0xf8>)
 800193c:	f002 fd24 	bl	8004388 <HAL_QSPI_Command>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e04f      	b.n	80019ea <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800194a:	f107 030b 	add.w	r3, r7, #11
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4619      	mov	r1, r3
 8001954:	4827      	ldr	r0, [pc, #156]	; (80019f4 <QSPI_DummyCyclesCfg+0xf8>)
 8001956:	f002 fe0c 	bl	8004572 <HAL_QSPI_Receive>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e042      	b.n	80019ea <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001964:	4823      	ldr	r0, [pc, #140]	; (80019f4 <QSPI_DummyCyclesCfg+0xf8>)
 8001966:	f000 f847 	bl	80019f8 <QSPI_WriteEnable>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e03a      	b.n	80019ea <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001974:	2381      	movs	r3, #129	; 0x81
 8001976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	b25a      	sxtb	r2, r3
 8001982:	23f0      	movs	r3, #240	; 0xf0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800198e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8001992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8001998:	2320      	movs	r3, #32
 800199a:	e003      	b.n	80019a4 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 800199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	230a      	movs	r3, #10
 80019a8:	408b      	lsls	r3, r1
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <QSPI_DummyCyclesCfg+0xf8>)
 80019c0:	f002 fce2 	bl	8004388 <HAL_QSPI_Command>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00d      	b.n	80019ea <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019ce:	f107 030b 	add.w	r3, r7, #11
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <QSPI_DummyCyclesCfg+0xf8>)
 80019da:	f002 fd33 	bl	8004444 <HAL_QSPI_Transmit>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3750      	adds	r7, #80	; 0x50
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000384 	.word	0x20000384

080019f8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b096      	sub	sp, #88	; 0x58
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001a06:	2306      	movs	r3, #6
 8001a08:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a22:	2300      	movs	r3, #0
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4816      	ldr	r0, [pc, #88]	; (8001a8c <QSPI_WriteEnable+0x94>)
 8001a32:	f002 fca9 	bl	8004388 <HAL_QSPI_Command>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e020      	b.n	8001a82 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001a50:	2310      	movs	r3, #16
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a58:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001a5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a64:	f107 0208 	add.w	r2, r7, #8
 8001a68:	f107 0120 	add.w	r1, r7, #32
 8001a6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <QSPI_WriteEnable+0x94>)
 8001a72:	f002 fe20 	bl	80046b6 <HAL_QSPI_AutoPolling>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3758      	adds	r7, #88	; 0x58
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000384 	.word	0x20000384

08001a90 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001aba:	2300      	movs	r3, #0
 8001abc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001adc:	f107 0208 	add.w	r2, r7, #8
 8001ae0:	f107 0120 	add.w	r1, r7, #32
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <QSPI_AutoPollingMemReady+0x70>)
 8001ae8:	f002 fde5 	bl	80046b6 <HAL_QSPI_AutoPolling>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3758      	adds	r7, #88	; 0x58
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000384 	.word	0x20000384

08001b04 <USART2_UART_Init>:

static void USART2_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <USART2_UART_Init+0x50>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART2_UART_Init+0x4c>)
 8001b48:	f004 fe30 	bl	80067ac <HAL_UART_Init>

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200003c8 	.word	0x200003c8
 8001b54:	40004400 	.word	0x40004400

08001b58 <Hexadecimal>:

/**
 * convert decimal to hexadecimal
 */
  static uint32_t Hexadecimal(int nombre)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint32_t Adresse;
	char Hexa[10];
	sprintf(Hexa,"%x",nombre);
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <Hexadecimal+0x30>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00b f9b1 	bl	800ced0 <siprintf>
    Adresse = strtoul(Hexa,NULL,16);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2210      	movs	r2, #16
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00c f990 	bl	800de9c <strtoul>
 8001b7c:	6178      	str	r0, [r7, #20]
    return Adresse;
 8001b7e:	697b      	ldr	r3, [r7, #20]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	08011930 	.word	0x08011930

08001b8c <Est_Vide>:

/**
 * tester si le block d'adresse ADDR est vide ou nn
 */
static bool Est_Vide(uint32_t ADDR, uint32_t Size)
{
 8001b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b90:	b087      	sub	sp, #28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
 8001b98:	466b      	mov	r3, sp
 8001b9a:	461e      	mov	r6, r3
	uint8_t buffer[Size];
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4688      	mov	r8, r1
 8001ba8:	4699      	mov	r9, r3
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	00eb      	lsls	r3, r5, #3
 8001bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd2:	00e2      	lsls	r2, r4, #3
 8001bd4:	1dcb      	adds	r3, r1, #7
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	ebad 0d03 	sub.w	sp, sp, r3
 8001bde:	466b      	mov	r3, sp
 8001be0:	3300      	adds	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
	int i=0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
	int nb=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
	BSP_QSPI_Read(buffer, ADDR, Size);
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f7ff fbc7 	bl	8001384 <BSP_QSPI_Read>
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001bf6:	e005      	b.n	8001c04 <Est_Vide+0x78>
		{
			 nb++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
		     i++;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2bff      	cmp	r3, #255	; 0xff
 8001c0e:	d103      	bne.n	8001c18 <Est_Vide+0x8c>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8ef      	bhi.n	8001bf8 <Est_Vide+0x6c>
		}
	if (nb==Size)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d101      	bne.n	8001c24 <Est_Vide+0x98>
		return true;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <Est_Vide+0x9a>
	else
		return false;
 8001c24:	2300      	movs	r3, #0
 8001c26:	46b5      	mov	sp, r6

}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001c34 <Mem_pleine>:
/**
 * Tester si la mémoire est pleine ou non
 */

 static bool Mem_pleine(int Size)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	int nb_data_per_subsector=(int)(4096/Size);
 8001c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c46:	60bb      	str	r3, [r7, #8]
	int i=nb_data_per_subsector-1;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001c4e:	e003      	b.n	8001c58 <Mem_pleine+0x24>
		{
		  i = i+ nb_data_per_subsector;
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <Mem_pleine+0x70>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dc12      	bgt.n	8001c88 <Mem_pleine+0x54>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff74 	bl	8001b58 <Hexadecimal>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7ff ff88 	bl	8001b8c <Est_Vide>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e3      	bne.n	8001c50 <Mem_pleine+0x1c>
		}
	if (i==(compteur_final+nb_data_per_subsector))
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <Mem_pleine+0x70>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d101      	bne.n	8001c9a <Mem_pleine+0x66>
		return true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <Mem_pleine+0x68>
	else
		return false;
 8001c9a:	2300      	movs	r3, #0

}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <inversion_hex>:

 /**
  * la fonction ci-dessous permet d'inverser tableau de caractères hexadécimale de la façon suivante : "acbe12h5" ==> "h512beac"
  */
static void inversion_hex(char hex[8], char hexinv[8])
 {
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
     int k=0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
     for(int i=6;i>=0;i=i-2)
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e018      	b.n	8001cee <inversion_hex+0x46>
     {
         for(int j=i;j<i+2;j++)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e00d      	b.n	8001cde <inversion_hex+0x36>
         {
             hexinv[k]=hex[j];
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	440b      	add	r3, r1
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	701a      	strb	r2, [r3, #0]
             k++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
         for(int j=i;j<i+2;j++)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	ddec      	ble.n	8001cc2 <inversion_hex+0x1a>
     for(int i=6;i>=0;i=i-2)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	3b02      	subs	r3, #2
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dae3      	bge.n	8001cbc <inversion_hex+0x14>
         }
     }
     hexinv[k]='\0';
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
 }
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <Write_Data>:

/**
 * la fonction ci-dessous permet de chercher une case vide dans la mémoire puis écrire les données
 */
static void Write_Data(uint8_t *pData, int Size)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	int nb_data_per_subsector = (int)(4096/Size);
 8001d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d20:	613b      	str	r3, [r7, #16]
	uint32_t ADDR = Hexadecimal(comp*Size);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <Write_Data+0x104>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff13 	bl	8001b58 <Hexadecimal>
 8001d32:	60f8      	str	r0, [r7, #12]
	if (Est_Vide(ADDR,Size)==true)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff ff27 	bl	8001b8c <Est_Vide>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <Write_Data+0x40>
		{
			a=true;
 8001d44:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <Write_Data+0x108>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
					comp = j;
				}

			}
		}
}
 8001d4a:	e05c      	b.n	8001e06 <Write_Data+0xfa>
			if ((comp%nb_data_per_subsector == 0)&&(a==false))
 8001d4c:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <Write_Data+0x104>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d56:	6939      	ldr	r1, [r7, #16]
 8001d58:	fb01 f202 	mul.w	r2, r1, r2
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d151      	bne.n	8001e06 <Write_Data+0xfa>
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <Write_Data+0x108>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f083 0301 	eor.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d04a      	beq.n	8001e06 <Write_Data+0xfa>
				if ((Est_Vide(Hexadecimal((comp+(nb_data_per_subsector-1))*Size),Size)==false)&&((comp+(nb_data_per_subsector-1)) < compteur_final))
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1e5a      	subs	r2, r3, #1
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <Write_Data+0x104>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fee9 	bl	8001b58 <Hexadecimal>
 8001d86:	4602      	mov	r2, r0
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f7ff fefd 	bl	8001b8c <Est_Vide>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00f      	beq.n	8001dbe <Write_Data+0xb2>
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <Write_Data+0x104>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	441a      	add	r2, r3
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <Write_Data+0x10c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	da06      	bge.n	8001dbe <Write_Data+0xb2>
					comp = comp + nb_data_per_subsector;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <Write_Data+0x104>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <Write_Data+0x104>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	e023      	b.n	8001e06 <Write_Data+0xfa>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <Write_Data+0x104>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e012      	b.n	8001dee <Write_Data+0xe2>
						  if (Est_Vide(Hexadecimal(j*Size),Size))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fec1 	bl	8001b58 <Hexadecimal>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f7ff fed5 	bl	8001b8c <Est_Vide>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10a      	bne.n	8001dfe <Write_Data+0xf2>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <Write_Data+0x104>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbe5      	blt.n	8001dc8 <Write_Data+0xbc>
 8001dfc:	e000      	b.n	8001e00 <Write_Data+0xf4>
						  break;
 8001dfe:	bf00      	nop
					comp = j;
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <Write_Data+0x104>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6013      	str	r3, [r2, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000004 	.word	0x20000004
 8001e14:	2000044c 	.word	0x2000044c
 8001e18:	20000000 	.word	0x20000000

08001e1c <Erase_Subsector>:
/**
 * la fonction ci dessous permet d'effacer un subsector de la mémoire de façon circulaire
 */
static void Erase_Subsector(int Size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]

	    int nb_data_per_subsector = (int)(4096/Size); // = 256
 8001e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
	    uint8_t buff1[4], buff2[4];
	    BSP_QSPI_Read(buff1,0,4);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2204      	movs	r2, #4
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff faa3 	bl	8001384 <BSP_QSPI_Read>
	    sprintf(hex, "%02x%02x%02x%02x", buff1[0], buff1[1], buff1[2], buff1[3]);
 8001e3e:	7c3b      	ldrb	r3, [r7, #16]
 8001e40:	4619      	mov	r1, r3
 8001e42:	7c7b      	ldrb	r3, [r7, #17]
 8001e44:	4618      	mov	r0, r3
 8001e46:	7cbb      	ldrb	r3, [r7, #18]
 8001e48:	7cfa      	ldrb	r2, [r7, #19]
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	4932      	ldr	r1, [pc, #200]	; (8001f1c <Erase_Subsector+0x100>)
 8001e54:	4832      	ldr	r0, [pc, #200]	; (8001f20 <Erase_Subsector+0x104>)
 8001e56:	f00b f83b 	bl	800ced0 <siprintf>
	    inversion_hex(hex,hexinv);
 8001e5a:	4932      	ldr	r1, [pc, #200]	; (8001f24 <Erase_Subsector+0x108>)
 8001e5c:	4830      	ldr	r0, [pc, #192]	; (8001f20 <Erase_Subsector+0x104>)
 8001e5e:	f7ff ff23 	bl	8001ca8 <inversion_hex>
	    value = strtoul(hexinv,NULL,16);
 8001e62:	2210      	movs	r2, #16
 8001e64:	2100      	movs	r1, #0
 8001e66:	482f      	ldr	r0, [pc, #188]	; (8001f24 <Erase_Subsector+0x108>)
 8001e68:	f00c f818 	bl	800de9c <strtoul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <Erase_Subsector+0x10c>)
 8001e70:	6013      	str	r3, [r2, #0]
	    min = value;
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <Erase_Subsector+0x10c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <Erase_Subsector+0x110>)
 8001e78:	6013      	str	r3, [r2, #0]
	    int j;
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	e035      	b.n	8001eec <Erase_Subsector+0xd0>
	      	     {
	      	    	 BSP_QSPI_Read(buff2,Hexadecimal(i*16),4);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe67 	bl	8001b58 <Hexadecimal>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2204      	movs	r2, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fa76 	bl	8001384 <BSP_QSPI_Read>
	      	         sprintf(hex2, "%02x%02x%02x%02x", buff2[0], buff2[1], buff2[2], buff2[3]);
 8001e98:	7b3b      	ldrb	r3, [r7, #12]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	460a      	mov	r2, r1
 8001eac:	491b      	ldr	r1, [pc, #108]	; (8001f1c <Erase_Subsector+0x100>)
 8001eae:	4820      	ldr	r0, [pc, #128]	; (8001f30 <Erase_Subsector+0x114>)
 8001eb0:	f00b f80e 	bl	800ced0 <siprintf>
	      	         inversion_hex(hex2,hex2inv);
 8001eb4:	491f      	ldr	r1, [pc, #124]	; (8001f34 <Erase_Subsector+0x118>)
 8001eb6:	481e      	ldr	r0, [pc, #120]	; (8001f30 <Erase_Subsector+0x114>)
 8001eb8:	f7ff fef6 	bl	8001ca8 <inversion_hex>
	      	         value2 = strtoul(hex2inv,NULL,16);
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <Erase_Subsector+0x118>)
 8001ec2:	f00b ffeb 	bl	800de9c <strtoul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <Erase_Subsector+0x11c>)
 8001eca:	6013      	str	r3, [r2, #0]
	      	         if (value2 <= min)
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <Erase_Subsector+0x11c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <Erase_Subsector+0x110>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d805      	bhi.n	8001ee4 <Erase_Subsector+0xc8>
	      	         {
	      	             min = value2;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <Erase_Subsector+0x11c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <Erase_Subsector+0x110>)
 8001ede:	6013      	str	r3, [r2, #0]
	      	             j=i;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	61fb      	str	r3, [r7, #28]
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4413      	add	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <Erase_Subsector+0x120>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3bfe      	subs	r3, #254	; 0xfe
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dbc3      	blt.n	8001e80 <Erase_Subsector+0x64>
	      	         }
	      	     }
	    BSP_QSPI_Erase_Block(Hexadecimal(j*Size));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fe29 	bl	8001b58 <Hexadecimal>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc33 	bl	8001774 <BSP_QSPI_Erase_Block>
	    comp= j;
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <Erase_Subsector+0x124>)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	6013      	str	r3, [r2, #0]

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	08011934 	.word	0x08011934
 8001f20:	20000454 	.word	0x20000454
 8001f24:	20000460 	.word	0x20000460
 8001f28:	20000488 	.word	0x20000488
 8001f2c:	20000484 	.word	0x20000484
 8001f30:	2000046c 	.word	0x2000046c
 8001f34:	20000478 	.word	0x20000478
 8001f38:	2000048c 	.word	0x2000048c
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <hexa_of_epoch>:

 static uint32_t hexa_of_epoch(int compteur,int size)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint8_t buffer[4];
  BSP_QSPI_Read(buffer,Hexadecimal(compteur*size),4);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fdfe 	bl	8001b58 <Hexadecimal>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2204      	movs	r2, #4
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fa0d 	bl	8001384 <BSP_QSPI_Read>
  sprintf(hex, "%02x%02x%02x%02x", buffer[0], buffer[1], buffer[2], buffer[3]);
 8001f6a:	7b3b      	ldrb	r3, [r7, #12]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	4618      	mov	r0, r3
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	9201      	str	r2, [sp, #4]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	490b      	ldr	r1, [pc, #44]	; (8001fac <hexa_of_epoch+0x68>)
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <hexa_of_epoch+0x6c>)
 8001f82:	f00a ffa5 	bl	800ced0 <siprintf>
  inversion_hex(hex,hexinv);
 8001f86:	490b      	ldr	r1, [pc, #44]	; (8001fb4 <hexa_of_epoch+0x70>)
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <hexa_of_epoch+0x6c>)
 8001f8a:	f7ff fe8d 	bl	8001ca8 <inversion_hex>
  hexa_value = strtoul(hexinv,NULL,16);
 8001f8e:	2210      	movs	r2, #16
 8001f90:	2100      	movs	r1, #0
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <hexa_of_epoch+0x70>)
 8001f94:	f00b ff82 	bl	800de9c <strtoul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <hexa_of_epoch+0x74>)
 8001f9c:	6013      	str	r3, [r2, #0]
  return hexa_value;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <hexa_of_epoch+0x74>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	08011934 	.word	0x08011934
 8001fb0:	20000454 	.word	0x20000454
 8001fb4:	20000460 	.word	0x20000460
 8001fb8:	20000490 	.word	0x20000490

08001fbc <start_of_history>:
 static int start_of_history(int debut, int fin, uint32_t x,int size)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
    int milieu;
    if(x < hexa_of_epoch(debut,size))
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff ffb9 	bl	8001f44 <hexa_of_epoch>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d222      	bcs.n	8002020 <start_of_history+0x64>
       return debut;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	e025      	b.n	800202a <start_of_history+0x6e>
    else
    {
        while(debut <= fin)
        {
            milieu = (debut+fin)/2;
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	0fda      	lsrs	r2, r3, #31
 8001fe6:	4413      	add	r3, r2
 8001fe8:	105b      	asrs	r3, r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
            if (hexa_of_epoch(milieu,size)==x)
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ffa8 	bl	8001f44 <hexa_of_epoch>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d102      	bne.n	8002002 <start_of_history+0x46>
             {
                 debut=milieu;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	60fb      	str	r3, [r7, #12]
                 break;
 8002000:	e012      	b.n	8002028 <start_of_history+0x6c>
             }
             else if(x < hexa_of_epoch(milieu,size))
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7ff ff9d 	bl	8001f44 <hexa_of_epoch>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4293      	cmp	r3, r2
 8002010:	d203      	bcs.n	800201a <start_of_history+0x5e>
                fin = milieu-1;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	e002      	b.n	8002020 <start_of_history+0x64>
            else
               debut = milieu +1;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
        while(debut <= fin)
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	429a      	cmp	r2, r3
 8002026:	ddda      	ble.n	8001fde <start_of_history+0x22>
        }
      return debut;
 8002028:	68fb      	ldr	r3, [r7, #12]
    }

}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_UART_TxCpltCallback>:

/**
 * la fonction ci-dessous est appellé lorsqu'une donnée est prète à stocker dans la mémoire
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	if (call_flg==true)
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_UART_TxCpltCallback+0x38>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_UART_TxCpltCallback+0x1c>
	    comteur_history++;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_UART_TxCpltCallback+0x3c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_UART_TxCpltCallback+0x3c>)
 800204c:	6013      	str	r3, [r2, #0]
	{
		store=1;
		comp++;
	}

}
 800204e:	e007      	b.n	8002060 <HAL_UART_TxCpltCallback+0x2c>
		store=1;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_UART_TxCpltCallback+0x40>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
		comp++;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_UART_TxCpltCallback+0x44>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_UART_TxCpltCallback+0x44>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	200004ac 	.word	0x200004ac
 8002070:	20000450 	.word	0x20000450
 8002074:	2000044d 	.word	0x2000044d
 8002078:	20000004 	.word	0x20000004

0800207c <Get_Data>:


/* Exported Functions -----------------------------------------------------------------------------*/

void Get_Data(uint8_t buffer[15],uint8_t buff[15], int  * compteur_vit_null)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af04      	add	r7, sp, #16
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]

	if (Flag == 1)
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <Get_Data+0x100>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d170      	bne.n	8002172 <Get_Data+0xf6>
	  {

		// Extraction de la ligne GPRMC
		indice=0;
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <Get_Data+0x104>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)Rxdata);
 8002096:	493b      	ldr	r1, [pc, #236]	; (8002184 <Get_Data+0x108>)
 8002098:	483b      	ldr	r0, [pc, #236]	; (8002188 <Get_Data+0x10c>)
 800209a:	f00a ffb7 	bl	800d00c <strcpy>
		p= strstr(Txdata,"GPRMC");
 800209e:	493b      	ldr	r1, [pc, #236]	; (800218c <Get_Data+0x110>)
 80020a0:	4839      	ldr	r0, [pc, #228]	; (8002188 <Get_Data+0x10c>)
 80020a2:	f00a ffbb 	bl	800d01c <strstr>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a39      	ldr	r2, [pc, #228]	; (8002190 <Get_Data+0x114>)
 80020aa:	6013      	str	r3, [r2, #0]
		// chercher l'indice de '\n'(retour à la ligne) dans la ligne de GPRMC
		x = strchr(p, '\n');
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <Get_Data+0x114>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	210a      	movs	r1, #10
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00a ff9d 	bl	800cff2 <strchr>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a36      	ldr	r2, [pc, #216]	; (8002194 <Get_Data+0x118>)
 80020bc:	6013      	str	r3, [r2, #0]
		ind = x - p;
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <Get_Data+0x118>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <Get_Data+0x114>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	4a33      	ldr	r2, [pc, #204]	; (8002198 <Get_Data+0x11c>)
 80020ca:	6013      	str	r3, [r2, #0]
		// continuer l'extraction
		if (*p == 'G')
 80020cc:	4b30      	ldr	r3, [pc, #192]	; (8002190 <Get_Data+0x114>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b47      	cmp	r3, #71	; 0x47
 80020d4:	d14d      	bne.n	8002172 <Get_Data+0xf6>
		 {
			for( indice =0;indice<=ind;indice++)
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <Get_Data+0x104>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e014      	b.n	8002108 <Get_Data+0x8c>
			        {

				     	 Ligne_GPRMC[indice]=*p;
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <Get_Data+0x114>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <Get_Data+0x104>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	7811      	ldrb	r1, [r2, #0]
 80020e8:	4a2c      	ldr	r2, [pc, #176]	; (800219c <Get_Data+0x120>)
 80020ea:	54d1      	strb	r1, [r2, r3]
				     	 *p=*(p+indice);
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <Get_Data+0x114>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <Get_Data+0x104>)
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	441a      	add	r2, r3
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <Get_Data+0x114>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	701a      	strb	r2, [r3, #0]
			for( indice =0;indice<=ind;indice++)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <Get_Data+0x104>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <Get_Data+0x104>)
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <Get_Data+0x104>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <Get_Data+0x11c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	dde4      	ble.n	80020de <Get_Data+0x62>

			        }

			Ligne_GPRMC[indice]= '\0';
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <Get_Data+0x104>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <Get_Data+0x120>)
 800211a:	2100      	movs	r1, #0
 800211c:	54d1      	strb	r1, [r2, r3]
		  // Extraction de chaque information dans la ligne
		  sscanf(Ligne_GPRMC,"GGPRMC,%f,A,%f,N,%f,E,%f,,%d",&Temps,&Latitude,&Longitude,&Vitesse,&Date);
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <Get_Data+0x124>)
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <Get_Data+0x128>)
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <Get_Data+0x12c>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <Get_Data+0x130>)
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <Get_Data+0x134>)
 800212e:	4921      	ldr	r1, [pc, #132]	; (80021b4 <Get_Data+0x138>)
 8002130:	481a      	ldr	r0, [pc, #104]	; (800219c <Get_Data+0x120>)
 8002132:	f00a feed 	bl	800cf10 <siscanf>

		  // Format des données
		  Format_data(Date, Temps, Latitude, Longitude, Vitesse,buffer,buff, compteur_vit_null);
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <Get_Data+0x124>)
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <Get_Data+0x134>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <Get_Data+0x130>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <Get_Data+0x12c>)
 8002148:	edd3 6a00 	vldr	s13, [r3]
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <Get_Data+0x128>)
 800214e:	ed93 6a00 	vldr	s12, [r3]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	eef0 1a46 	vmov.f32	s3, s12
 800215c:	eeb0 1a66 	vmov.f32	s2, s13
 8002160:	eef0 0a47 	vmov.f32	s1, s14
 8002164:	eeb0 0a67 	vmov.f32	s0, s15
 8002168:	f000 f85a 	bl	8002220 <Format_data>
		  Flag=0;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <Get_Data+0x100>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]

		}
	  }

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000b82 	.word	0x20000b82
 8002180:	20000b84 	.word	0x20000b84
 8002184:	20000534 	.word	0x20000534
 8002188:	20000824 	.word	0x20000824
 800218c:	08011948 	.word	0x08011948
 8002190:	20000b88 	.word	0x20000b88
 8002194:	20000bc0 	.word	0x20000bc0
 8002198:	20000bc4 	.word	0x20000bc4
 800219c:	20000b14 	.word	0x20000b14
 80021a0:	20000ba0 	.word	0x20000ba0
 80021a4:	20000b98 	.word	0x20000b98
 80021a8:	20000b90 	.word	0x20000b90
 80021ac:	20000b94 	.word	0x20000b94
 80021b0:	20000b8c 	.word	0x20000b8c
 80021b4:	08011950 	.word	0x08011950

080021b8 <GPS_Init>:


void GPS_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <GPS_Init+0x58>)
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <GPS_Init+0x5c>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <GPS_Init+0x58>)
 80021c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <GPS_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <GPS_Init+0x58>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <GPS_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <GPS_Init+0x58>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <GPS_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <GPS_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <GPS_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <GPS_Init+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart4);
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <GPS_Init+0x58>)
 80021fc:	f004 fad6 	bl	80067ac <HAL_UART_Init>

  HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 8002200:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002204:	4904      	ldr	r1, [pc, #16]	; (8002218 <GPS_Init+0x60>)
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <GPS_Init+0x58>)
 8002208:	f004 fc20 	bl	8006a4c <HAL_UART_Receive_IT>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200004b0 	.word	0x200004b0
 8002214:	40004c00 	.word	0x40004c00
 8002218:	20000534 	.word	0x20000534
 800221c:	00000000 	.word	0x00000000

08002220 <Format_data>:

/* Private Functions --------------------------------------------------------------------------*/

static void Format_data(int Date, float Temps, float Latitude, float Longitude, float Vitesse,uint8_t buffer[15],uint8_t buff[15],int * compteur_vit_null)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b092      	sub	sp, #72	; 0x48
 8002224:	af02      	add	r7, sp, #8
 8002226:	6278      	str	r0, [r7, #36]	; 0x24
 8002228:	ed87 0a08 	vstr	s0, [r7, #32]
 800222c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002230:	ed87 1a06 	vstr	s2, [r7, #24]
 8002234:	edc7 1a05 	vstr	s3, [r7, #20]
 8002238:	6139      	str	r1, [r7, #16]
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	60bb      	str	r3, [r7, #8]

  // Date  :  ddmmaa ==> dd/mm/aa

  Jour = (int)(Date/10000);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	4ab7      	ldr	r2, [pc, #732]	; (8002520 <Format_data+0x300>)
 8002242:	fb82 1203 	smull	r1, r2, r2, r3
 8002246:	1312      	asrs	r2, r2, #12
 8002248:	17db      	asrs	r3, r3, #31
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4ab5      	ldr	r2, [pc, #724]	; (8002524 <Format_data+0x304>)
 800224e:	6013      	str	r3, [r2, #0]
  Mois = (int)((Date-(Jour*10000))/100);
 8002250:	4bb4      	ldr	r3, [pc, #720]	; (8002524 <Format_data+0x304>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4ab4      	ldr	r2, [pc, #720]	; (8002528 <Format_data+0x308>)
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	4413      	add	r3, r2
 800225e:	4ab3      	ldr	r2, [pc, #716]	; (800252c <Format_data+0x30c>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	1152      	asrs	r2, r2, #5
 8002266:	17db      	asrs	r3, r3, #31
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4ab1      	ldr	r2, [pc, #708]	; (8002530 <Format_data+0x310>)
 800226c:	6013      	str	r3, [r2, #0]
  Annee = (int)(Date-((Jour*10000)+(Mois*100)));
 800226e:	4bad      	ldr	r3, [pc, #692]	; (8002524 <Format_data+0x304>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f242 7210 	movw	r2, #10000	; 0x2710
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	4bad      	ldr	r3, [pc, #692]	; (8002530 <Format_data+0x310>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2164      	movs	r1, #100	; 0x64
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	4aaa      	ldr	r2, [pc, #680]	; (8002534 <Format_data+0x314>)
 800228c:	6013      	str	r3, [r2, #0]

  // Temps :  hhmmss ==> hh:mm:ss
  Heures = (int)(Temps/10000);
 800228e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002292:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8002538 <Format_data+0x318>
 8002296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229e:	ee17 2a90 	vmov	r2, s15
 80022a2:	4ba6      	ldr	r3, [pc, #664]	; (800253c <Format_data+0x31c>)
 80022a4:	601a      	str	r2, [r3, #0]
  Minutes = (int)((Temps-(Heures*10000))/100);
 80022a6:	4ba5      	ldr	r3, [pc, #660]	; (800253c <Format_data+0x31c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80022be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002540 <Format_data+0x320>
 80022c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ce:	ee17 2a90 	vmov	r2, s15
 80022d2:	4b9c      	ldr	r3, [pc, #624]	; (8002544 <Format_data+0x324>)
 80022d4:	601a      	str	r2, [r3, #0]
  Secondes = (int)(Temps-((Heures*10000)+(Minutes*100)));
 80022d6:	4b99      	ldr	r3, [pc, #612]	; (800253c <Format_data+0x31c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f242 7210 	movw	r2, #10000	; 0x2710
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	4b98      	ldr	r3, [pc, #608]	; (8002544 <Format_data+0x324>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2164      	movs	r1, #100	; 0x64
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002302:	ee17 2a90 	vmov	r2, s15
 8002306:	4b90      	ldr	r3, [pc, #576]	; (8002548 <Format_data+0x328>)
 8002308:	601a      	str	r2, [r3, #0]

  // Timestamp en secondes :

  Epoch_Time = Get_Epoch_Time(Jour,Mois,2000+Annee,Heures,Minutes,Secondes);
 800230a:	4b86      	ldr	r3, [pc, #536]	; (8002524 <Format_data+0x304>)
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <Format_data+0x310>)
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <Format_data+0x314>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <Format_data+0x31c>)
 800231c:	681d      	ldr	r5, [r3, #0]
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <Format_data+0x324>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a89      	ldr	r2, [pc, #548]	; (8002548 <Format_data+0x328>)
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	9201      	str	r2, [sp, #4]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	462b      	mov	r3, r5
 800232c:	4622      	mov	r2, r4
 800232e:	f000 f955 	bl	80025dc <Get_Epoch_Time>
 8002332:	4603      	mov	r3, r0
 8002334:	4a85      	ldr	r2, [pc, #532]	; (800254c <Format_data+0x32c>)
 8002336:	6013      	str	r3, [r2, #0]

  // Vitesse :  vitesse en noeuds ==> vitesse en km/h
  Vitesse = Vitesse * 1.852;
 8002338:	6978      	ldr	r0, [r7, #20]
 800233a:	f7fe f915 	bl	8000568 <__aeabi_f2d>
 800233e:	a374      	add	r3, pc, #464	; (adr r3, 8002510 <Format_data+0x2f0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f968 	bl	8000618 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc5a 	bl	8000c08 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	617b      	str	r3, [r7, #20]

  if (Vitesse <= 5)
 8002358:	edd7 7a05 	vldr	s15, [r7, #20]
 800235c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	d805      	bhi.n	8002376 <Format_data+0x156>
	  (*compteur_vit_null)++;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e002      	b.n	800237c <Format_data+0x15c>
  else
	  (*compteur_vit_null)=0;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

  if ((*compteur_vit_null) == 30)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b1e      	cmp	r3, #30
 8002382:	d102      	bne.n	800238a <Format_data+0x16a>
	  (*compteur_vit_null)=0;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

  //Distance parcourue en km:

  dist = dist + Vitesse * (1.5/3600);
 800238a:	4b71      	ldr	r3, [pc, #452]	; (8002550 <Format_data+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8ea 	bl	8000568 <__aeabi_f2d>
 8002394:	4604      	mov	r4, r0
 8002396:	460d      	mov	r5, r1
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f7fe f8e5 	bl	8000568 <__aeabi_f2d>
 800239e:	a35e      	add	r3, pc, #376	; (adr r3, 8002518 <Format_data+0x2f8>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fe f938 	bl	8000618 <__aeabi_dmul>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4620      	mov	r0, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	f7fd ff7c 	bl	80002ac <__adddf3>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc24 	bl	8000c08 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <Format_data+0x330>)
 80023c4:	6013      	str	r3, [r2, #0]

  // Latitude : ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_lat = (int)(Latitude/100);
 80023c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80023ca:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002540 <Format_data+0x320>
 80023ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 3a90 	vmov	r3, s15
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
  Latitude = degre_lat + ((Latitude- (degre_lat*100))/60);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e8:	2264      	movs	r2, #100	; 0x64
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80023fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023fe:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8002554 <Format_data+0x334>
 8002402:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	edc7 7a07 	vstr	s15, [r7, #28]

  // Longitude :   ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_long = (int)(Longitude/100);
 800240e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002412:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002540 <Format_data+0x320>
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
  Longitude = degre_long + ((Longitude- (degre_long*100))/60);
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	2264      	movs	r2, #100	; 0x64
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002442:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002446:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8002554 <Format_data+0x334>
 800244a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	edc7 7a06 	vstr	s15, [r7, #24]




  Data_from_GPS mydata = {
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <Format_data+0x32c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
 8002464:	edd7 7a05 	vldr	s15, [r7, #20]
 8002468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002470:	793b      	ldrb	r3, [r7, #4]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <Format_data+0x330>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	edc7 7a01 	vstr	s15, [r7, #4]
 8002486:	793b      	ldrb	r3, [r7, #4]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     .speed= Vitesse,
     .Distance = dist,
  };


  memcpy(buffer, &mydata, sizeof(mydata));
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	461c      	mov	r4, r3
 8002492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002498:	6020      	str	r0, [r4, #0]
 800249a:	6061      	str	r1, [r4, #4]
 800249c:	60a2      	str	r2, [r4, #8]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	81a3      	strh	r3, [r4, #12]

  // niveau de charge de la batterie :

  led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80024a2:	2104      	movs	r1, #4
 80024a4:	482c      	ldr	r0, [pc, #176]	; (8002558 <Format_data+0x338>)
 80024a6:	f001 fe07 	bl	80040b8 <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <Format_data+0x33c>)
 80024b0:	601a      	str	r2, [r3, #0]
  	  led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	482a      	ldr	r0, [pc, #168]	; (8002560 <Format_data+0x340>)
 80024b8:	f001 fdfe 	bl	80040b8 <HAL_GPIO_ReadPin>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <Format_data+0x344>)
 80024c2:	601a      	str	r2, [r3, #0]
  	  led3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80024c4:	2108      	movs	r1, #8
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ca:	f001 fdf5 	bl	80040b8 <HAL_GPIO_ReadPin>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <Format_data+0x348>)
 80024d4:	601a      	str	r2, [r3, #0]
  	  led4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80024d6:	2120      	movs	r1, #32
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f001 fdec 	bl	80040b8 <HAL_GPIO_ReadPin>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <Format_data+0x34c>)
 80024e6:	601a      	str	r2, [r3, #0]

  	  if (led4==1)
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <Format_data+0x34c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d103      	bne.n	80024f8 <Format_data+0x2d8>
  		  niv=100;
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <Format_data+0x350>)
 80024f2:	2264      	movs	r2, #100	; 0x64
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e058      	b.n	80025aa <Format_data+0x38a>
  	  else if ((led4==0)&&(led3==1))
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <Format_data+0x34c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d139      	bne.n	8002574 <Format_data+0x354>
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <Format_data+0x348>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d135      	bne.n	8002574 <Format_data+0x354>
  		  niv=75;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <Format_data+0x350>)
 800250a:	224b      	movs	r2, #75	; 0x4b
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e04c      	b.n	80025aa <Format_data+0x38a>
 8002510:	c083126f 	.word	0xc083126f
 8002514:	3ffda1ca 	.word	0x3ffda1ca
 8002518:	b4e81b4f 	.word	0xb4e81b4f
 800251c:	3f3b4e81 	.word	0x3f3b4e81
 8002520:	68db8bad 	.word	0x68db8bad
 8002524:	20000ba4 	.word	0x20000ba4
 8002528:	ffffd8f0 	.word	0xffffd8f0
 800252c:	51eb851f 	.word	0x51eb851f
 8002530:	20000ba8 	.word	0x20000ba8
 8002534:	20000bac 	.word	0x20000bac
 8002538:	461c4000 	.word	0x461c4000
 800253c:	20000bb0 	.word	0x20000bb0
 8002540:	42c80000 	.word	0x42c80000
 8002544:	20000bb4 	.word	0x20000bb4
 8002548:	20000bb8 	.word	0x20000bb8
 800254c:	20000bbc 	.word	0x20000bbc
 8002550:	20000b9c 	.word	0x20000b9c
 8002554:	42700000 	.word	0x42700000
 8002558:	48000400 	.word	0x48000400
 800255c:	20000bc8 	.word	0x20000bc8
 8002560:	48001000 	.word	0x48001000
 8002564:	20000bcc 	.word	0x20000bcc
 8002568:	20000bd0 	.word	0x20000bd0
 800256c:	20000bd4 	.word	0x20000bd4
 8002570:	20000bd8 	.word	0x20000bd8
  	  else if ((led3==0)&&(led2==1))
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <Format_data+0x3a4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <Format_data+0x36c>
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <Format_data+0x3a8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d103      	bne.n	800258c <Format_data+0x36c>
  		  niv=50;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <Format_data+0x3ac>)
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e00e      	b.n	80025aa <Format_data+0x38a>
  	  else if ((led2==0)&&(led1==1))
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <Format_data+0x3a8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <Format_data+0x384>
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <Format_data+0x3b0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d103      	bne.n	80025a4 <Format_data+0x384>
  		  niv=25;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <Format_data+0x3ac>)
 800259e:	2219      	movs	r2, #25
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e002      	b.n	80025aa <Format_data+0x38a>
  	  else
  		  niv=0;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <Format_data+0x3ac>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
  Inversion(buffer,buff);
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	6938      	ldr	r0, [r7, #16]
 80025ae:	f000 f839 	bl	8002624 <Inversion>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"==> Ready to store\r\n",22);
 80025b2:	2216      	movs	r2, #22
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <Format_data+0x3b4>)
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <Format_data+0x3b8>)
 80025b8:	f004 f9da 	bl	8006970 <HAL_UART_Transmit_IT>

}
 80025bc:	bf00      	nop
 80025be:	3740      	adds	r7, #64	; 0x40
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bdb0      	pop	{r4, r5, r7, pc}
 80025c4:	20000bd0 	.word	0x20000bd0
 80025c8:	20000bcc 	.word	0x20000bcc
 80025cc:	20000bd8 	.word	0x20000bd8
 80025d0:	20000bc8 	.word	0x20000bc8
 80025d4:	08011970 	.word	0x08011970
 80025d8:	200003c8 	.word	0x200003c8

080025dc <Get_Epoch_Time>:

/**
 * la fonction ci-dessous a pour but de convertir date et temps en une valeur en secondes (epoch_time)
 */
static uint32_t Get_Epoch_Time(int jour,int mois,int annee,int heures,int minutes,int secondes)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b090      	sub	sp, #64	; 0x40
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
	    struct tm t;
	    time_t t_of_day;

	    t.tm_year = annee-1900;  // Year - 1900
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
	    t.tm_mon = mois-1;           // Month, where 0 = jan
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
	    t.tm_mday = jour;          // Day of the month
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	623b      	str	r3, [r7, #32]
	    t.tm_hour = heures+1;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
	    t.tm_min = minutes;
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	61bb      	str	r3, [r7, #24]
	    t.tm_sec = secondes;
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	617b      	str	r3, [r7, #20]
	    t_of_day = mktime(&t);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4618      	mov	r0, r3
 8002610:	f009 fc44 	bl	800be9c <mktime>
 8002614:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	    return (t_of_day);
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800261a:	4618      	mov	r0, r3
 800261c:	3740      	adds	r7, #64	; 0x40
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <Inversion>:

/**
 * la fonction ci-dessous a pour but d'inverser le contenu d'un buffer de la façon suivante : "abcdefghijklp" ==> "dcbahgfelkjip"
 */
void Inversion(uint8_t buffer[15],uint8_t buff[15])
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	int k =0;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
	  for (int i=0; i<=8; i=i+4)
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e018      	b.n	800266a <Inversion+0x46>
	  {
	      for (int j =i+3; j>=i;j--)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	3303      	adds	r3, #3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e00d      	b.n	800265c <Inversion+0x38>
	      {
	          buff[k]=buffer[j];
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	441a      	add	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	440b      	add	r3, r1
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	701a      	strb	r2, [r3, #0]
	          k++;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
	      for (int j =i+3; j>=i;j--)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	daed      	bge.n	8002640 <Inversion+0x1c>
	  for (int i=0; i<=8; i=i+4)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	3304      	adds	r3, #4
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b08      	cmp	r3, #8
 800266e:	dde3      	ble.n	8002638 <Inversion+0x14>
	      }
	  }

	  buff[12]=buffer[12];
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	7b12      	ldrb	r2, [r2, #12]
 8002678:	701a      	strb	r2, [r3, #0]
	  buff[13] = buffer[13];
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	330d      	adds	r3, #13
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	7b52      	ldrb	r2, [r2, #13]
 8002682:	701a      	strb	r2, [r3, #0]
	  buff[14]= niv;
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <Inversion+0x78>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	330e      	adds	r3, #14
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000bd8 	.word	0x20000bd8

080026a0 <HAL_UART_RxCpltCallback>:
/**
 * la fonction ci-dessous est appellé après la réception de chaque donnée du module GPS
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

	 Flag=1;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_UART_RxCpltCallback+0x24>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
     HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 80026ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 80026b2:	4905      	ldr	r1, [pc, #20]	; (80026c8 <HAL_UART_RxCpltCallback+0x28>)
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <HAL_UART_RxCpltCallback+0x2c>)
 80026b6:	f004 f9c9 	bl	8006a4c <HAL_UART_Receive_IT>


}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000b82 	.word	0x20000b82
 80026c8:	20000534 	.word	0x20000534
 80026cc:	200004b0 	.word	0x200004b0

080026d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  	if (GPIO_Pin == GPIO_PIN_2)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d111      	bne.n	8002704 <HAL_GPIO_EXTI_Callback+0x34>
  		{
  		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80026e0:	2104      	movs	r1, #4
 80026e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e6:	f001 fce7 	bl	80040b8 <HAL_GPIO_ReadPin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d103      	bne.n	80026f8 <HAL_GPIO_EXTI_Callback+0x28>
  		   bouton = 1;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_GPIO_EXTI_Callback+0x3c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e002      	b.n	80026fe <HAL_GPIO_EXTI_Callback+0x2e>
  		 else
  		   bouton = 0;
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_GPIO_EXTI_Callback+0x3c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_GPIO_EXTI_Callback+0x40>)
 8002700:	221f      	movs	r2, #31
 8002702:	619a      	str	r2, [r3, #24]
  		}

  }
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000cb0 	.word	0x20000cb0
 8002710:	40007000 	.word	0x40007000

08002714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002718:	f000 fe7b 	bl	8003412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271c:	f000 f89c 	bl	8002858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002720:	f000 f90a 	bl	8002938 <MX_GPIO_Init>
  MX_DMA_Init();
 8002724:	f000 f8ea 	bl	80028fc <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  BLE_Init();
 8002728:	f7fe fdba 	bl	80012a0 <BLE_Init>
  GPS_Init();
 800272c:	f7ff fd44 	bl	80021b8 <GPS_Init>
  Memory_Init();
 8002730:	f7fe fde2 	bl	80012f8 <Memory_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002734:	f005 ff26 	bl	8008584 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8002738:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <main+0xdc>)
 800273a:	2100      	movs	r1, #0
 800273c:	2001      	movs	r0, #1
 800273e:	f005 fffd 	bl	800873c <osSemaphoreNew>
 8002742:	4603      	mov	r3, r0
 8002744:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <main+0xe0>)
 8002746:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 8002748:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <main+0xe4>)
 800274a:	2100      	movs	r1, #0
 800274c:	2001      	movs	r0, #1
 800274e:	f005 fff5 	bl	800873c <osSemaphoreNew>
 8002752:	4603      	mov	r3, r0
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <main+0xe8>)
 8002756:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore3 */
  Semaphore3Handle = osSemaphoreNew(1, 0, &Semaphore3_attributes);
 8002758:	4a29      	ldr	r2, [pc, #164]	; (8002800 <main+0xec>)
 800275a:	2100      	movs	r1, #0
 800275c:	2001      	movs	r0, #1
 800275e:	f005 ffed 	bl	800873c <osSemaphoreNew>
 8002762:	4603      	mov	r3, r0
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <main+0xf0>)
 8002766:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore0 */
  Semaphore0Handle = osSemaphoreNew(1, 1, &Semaphore0_attributes);
 8002768:	4a27      	ldr	r2, [pc, #156]	; (8002808 <main+0xf4>)
 800276a:	2101      	movs	r1, #1
 800276c:	2001      	movs	r0, #1
 800276e:	f005 ffe5 	bl	800873c <osSemaphoreNew>
 8002772:	4603      	mov	r3, r0
 8002774:	4a25      	ldr	r2, [pc, #148]	; (800280c <main+0xf8>)
 8002776:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue01_attributes);
 8002778:	4a25      	ldr	r2, [pc, #148]	; (8002810 <main+0xfc>)
 800277a:	2101      	movs	r1, #1
 800277c:	200f      	movs	r0, #15
 800277e:	f006 f8fd 	bl	800897c <osMessageQueueNew>
 8002782:	4603      	mov	r3, r0
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <main+0x100>)
 8002786:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue02_attributes);
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <main+0x104>)
 800278a:	2101      	movs	r1, #1
 800278c:	200f      	movs	r0, #15
 800278e:	f006 f8f5 	bl	800897c <osMessageQueueNew>
 8002792:	4603      	mov	r3, r0
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <main+0x108>)
 8002796:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue03_attributes);
 8002798:	4a21      	ldr	r2, [pc, #132]	; (8002820 <main+0x10c>)
 800279a:	2101      	movs	r1, #1
 800279c:	200f      	movs	r0, #15
 800279e:	f006 f8ed 	bl	800897c <osMessageQueueNew>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <main+0x110>)
 80027a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GPS_Get_Data */
  GPS_Get_DataHandle = osThreadNew(StartGPS_Get_Data, NULL, &GPS_Get_Data_attributes);
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <main+0x114>)
 80027aa:	2100      	movs	r1, #0
 80027ac:	481f      	ldr	r0, [pc, #124]	; (800282c <main+0x118>)
 80027ae:	f005 ff33 	bl	8008618 <osThreadNew>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <main+0x11c>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* creation of Mem_Access_Data */
  Mem_Access_DataHandle = osThreadNew(StartMem_Access_Data, NULL, &Mem_Access_Data_attributes);
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <main+0x120>)
 80027ba:	2100      	movs	r1, #0
 80027bc:	481e      	ldr	r0, [pc, #120]	; (8002838 <main+0x124>)
 80027be:	f005 ff2b 	bl	8008618 <osThreadNew>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <main+0x128>)
 80027c6:	6013      	str	r3, [r2, #0]

  /* creation of BLE_Send_Data */
  BLE_Send_DataHandle = osThreadNew(StartBLE_Send_Data, NULL, &BLE_Send_Data_attributes);
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <main+0x12c>)
 80027ca:	2100      	movs	r1, #0
 80027cc:	481d      	ldr	r0, [pc, #116]	; (8002844 <main+0x130>)
 80027ce:	f005 ff23 	bl	8008618 <osThreadNew>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <main+0x134>)
 80027d6:	6013      	str	r3, [r2, #0]

  /* creation of Bike_state */
  Bike_stateHandle = osThreadNew(StartBike_state, NULL, &Bike_state_attributes);
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <main+0x138>)
 80027da:	2100      	movs	r1, #0
 80027dc:	481c      	ldr	r0, [pc, #112]	; (8002850 <main+0x13c>)
 80027de:	f005 ff1b 	bl	8008618 <osThreadNew>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <main+0x140>)
 80027e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027e8:	f005 fef0 	bl	80085cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <main+0xd8>
 80027ee:	bf00      	nop
 80027f0:	08011b14 	.word	0x08011b14
 80027f4:	20000bf8 	.word	0x20000bf8
 80027f8:	08011b24 	.word	0x08011b24
 80027fc:	20000bfc 	.word	0x20000bfc
 8002800:	08011b34 	.word	0x08011b34
 8002804:	20000c00 	.word	0x20000c00
 8002808:	08011b44 	.word	0x08011b44
 800280c:	20000c04 	.word	0x20000c04
 8002810:	08011acc 	.word	0x08011acc
 8002814:	20000bec 	.word	0x20000bec
 8002818:	08011ae4 	.word	0x08011ae4
 800281c:	20000bf0 	.word	0x20000bf0
 8002820:	08011afc 	.word	0x08011afc
 8002824:	20000bf4 	.word	0x20000bf4
 8002828:	08011a3c 	.word	0x08011a3c
 800282c:	08002a55 	.word	0x08002a55
 8002830:	20000bdc 	.word	0x20000bdc
 8002834:	08011a60 	.word	0x08011a60
 8002838:	08002ae1 	.word	0x08002ae1
 800283c:	20000be0 	.word	0x20000be0
 8002840:	08011a84 	.word	0x08011a84
 8002844:	08002ba9 	.word	0x08002ba9
 8002848:	20000be4 	.word	0x20000be4
 800284c:	08011aa8 	.word	0x08011aa8
 8002850:	08002c75 	.word	0x08002c75
 8002854:	20000be8 	.word	0x20000be8

08002858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b096      	sub	sp, #88	; 0x58
 800285c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2244      	movs	r2, #68	; 0x44
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f009 fa38 	bl	800bcdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800287a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800287e:	f001 fc93 	bl	80041a8 <HAL_PWREx_ControlVoltageScaling>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002888:	f000 fa3c 	bl	8002d04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800288c:	2310      	movs	r3, #16
 800288e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028a0:	2301      	movs	r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80028a8:	2328      	movs	r3, #40	; 0x28
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028ac:	2307      	movs	r3, #7
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028b0:	2302      	movs	r3, #2
 80028b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028b4:	2302      	movs	r3, #2
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 f9b5 	bl	8004c2c <HAL_RCC_OscConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80028c8:	f000 fa1c 	bl	8002d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028cc:	230f      	movs	r3, #15
 80028ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d0:	2303      	movs	r3, #3
 80028d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	2104      	movs	r1, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fd7d 	bl	80053e4 <HAL_RCC_ClockConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80028f0:	f000 fa08 	bl	8002d04 <Error_Handler>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3758      	adds	r7, #88	; 0x58
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_DMA_Init+0x38>)
 8002904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002906:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <MX_DMA_Init+0x38>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6493      	str	r3, [r2, #72]	; 0x48
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_DMA_Init+0x38>)
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2105      	movs	r1, #5
 800291e:	200f      	movs	r0, #15
 8002920:	f000 fe8c 	bl	800363c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002924:	200f      	movs	r0, #15
 8002926:	f000 fea5 	bl	8003674 <HAL_NVIC_EnableIRQ>

}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	4a3d      	ldr	r2, [pc, #244]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <MX_GPIO_Init+0x110>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <MX_GPIO_Init+0x110>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <MX_GPIO_Init+0x110>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <MX_GPIO_Init+0x110>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <MX_GPIO_Init+0x110>)
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <MX_GPIO_Init+0x110>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <MX_GPIO_Init+0x110>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <MX_GPIO_Init+0x110>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <MX_GPIO_Init+0x110>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029c6:	2304      	movs	r3, #4
 80029c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80029ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029de:	f001 f8cd 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80029e2:	2328      	movs	r3, #40	; 0x28
 80029e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f8:	f001 f8c0 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029fc:	2304      	movs	r3, #4
 80029fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480f      	ldr	r0, [pc, #60]	; (8002a4c <MX_GPIO_Init+0x114>)
 8002a10:	f001 f8b4 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <MX_GPIO_Init+0x118>)
 8002a2a:	f001 f8a7 	bl	8003b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	2008      	movs	r0, #8
 8002a34:	f000 fe02 	bl	800363c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a38:	2008      	movs	r0, #8
 8002a3a:	f000 fe1b 	bl	8003674 <HAL_NVIC_EnableIRQ>

}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	48000400 	.word	0x48000400
 8002a50:	48001000 	.word	0x48001000

08002a54 <StartGPS_Get_Data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS_Get_Data */
void StartGPS_Get_Data(void *argument)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <StartGPS_Get_Data+0x6c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	4618      	mov	r0, r3
 8002a66:	f005 fef3 	bl	8008850 <osSemaphoreAcquire>

	  if (history_flag==0)
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <StartGPS_Get_Data+0x70>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <StartGPS_Get_Data+0x5e>
	  {

		  Get_Data(GPS_Data, BLE_Data,&Temps_vit_null);
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <StartGPS_Get_Data+0x74>)
 8002a74:	4915      	ldr	r1, [pc, #84]	; (8002acc <StartGPS_Get_Data+0x78>)
 8002a76:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <StartGPS_Get_Data+0x7c>)
 8002a78:	f7ff fb00 	bl	800207c <Get_Data>

		  for (int j=0;j<15;j++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e014      	b.n	8002aac <StartGPS_Get_Data+0x58>

			  {
				osMessageQueuePut(myQueue01Handle, &(GPS_Data[j]), sizeof(GPS_Data[j]), 100);
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <StartGPS_Get_Data+0x80>)
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <StartGPS_Get_Data+0x7c>)
 8002a8a:	1899      	adds	r1, r3, r2
 8002a8c:	2364      	movs	r3, #100	; 0x64
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f005 ffe8 	bl	8008a64 <osMessageQueuePut>
				osMessageQueuePut(myQueue02Handle, &(BLE_Data[j]), sizeof(BLE_Data[j]), 100);
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <StartGPS_Get_Data+0x84>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <StartGPS_Get_Data+0x78>)
 8002a9c:	1899      	adds	r1, r3, r2
 8002a9e:	2364      	movs	r3, #100	; 0x64
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f005 ffdf 	bl	8008a64 <osMessageQueuePut>
		  for (int j=0;j<15;j++)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b0e      	cmp	r3, #14
 8002ab0:	dde7      	ble.n	8002a82 <StartGPS_Get_Data+0x2e>
			  }

	  }
	  osSemaphoreRelease(Semaphore2Handle);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <StartGPS_Get_Data+0x88>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 ff1c 	bl	80088f4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002abc:	e7ce      	b.n	8002a5c <StartGPS_Get_Data+0x8>
 8002abe:	bf00      	nop
 8002ac0:	20000bf8 	.word	0x20000bf8
 8002ac4:	20000cbc 	.word	0x20000cbc
 8002ac8:	20000cb4 	.word	0x20000cb4
 8002acc:	20000c60 	.word	0x20000c60
 8002ad0:	20000c50 	.word	0x20000c50
 8002ad4:	20000bec 	.word	0x20000bec
 8002ad8:	20000bf0 	.word	0x20000bf0
 8002adc:	20000bfc 	.word	0x20000bfc

08002ae0 <StartMem_Access_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMem_Access_Data */
void StartMem_Access_Data(void *argument)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMem_Access_Data */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <StartMem_Access_Data+0x9c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	4618      	mov	r0, r3
 8002af2:	f005 fead 	bl	8008850 <osSemaphoreAcquire>


	      if (history_flag==0)
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <StartMem_Access_Data+0xa0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <StartMem_Access_Data+0x50>
	      {

			  for (int k=0;k<15;k++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e00b      	b.n	8002b1c <StartMem_Access_Data+0x3c>

					  {
						osMessageQueueGet(myQueue01Handle, &(buffer_queue1[k]), &size, 100);
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <StartMem_Access_Data+0xa4>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <StartMem_Access_Data+0xa8>)
 8002b0c:	1899      	adds	r1, r3, r2
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <StartMem_Access_Data+0xac>)
 8002b12:	f006 f807 	bl	8008b24 <osMessageQueueGet>
			  for (int k=0;k<15;k++)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b0e      	cmp	r3, #14
 8002b20:	ddf0      	ble.n	8002b04 <StartMem_Access_Data+0x24>
					  }

			  Store_Data(buffer_queue1,Data_size);
 8002b22:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <StartMem_Access_Data+0xb0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4817      	ldr	r0, [pc, #92]	; (8002b88 <StartMem_Access_Data+0xa8>)
 8002b2a:	f7fe fc61 	bl	80013f0 <Store_Data>
 8002b2e:	e01c      	b.n	8002b6a <StartMem_Access_Data+0x8a>

	      }
	      else
	      {

	    	  if(End_History==0)
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <StartMem_Access_Data+0xb4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <StartMem_Access_Data+0x66>
	    	     get_history(memory_data,Data_size,&flg_hist);
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <StartMem_Access_Data+0xb0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <StartMem_Access_Data+0xb8>)
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4816      	ldr	r0, [pc, #88]	; (8002b9c <StartMem_Access_Data+0xbc>)
 8002b42:	f7fe fc93 	bl	800146c <get_history>

	    	  for (int j=0;j<15;j++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e00b      	b.n	8002b64 <StartMem_Access_Data+0x84>

	    	  		  {
	    	  		    osMessageQueuePut(myQueue03Handle, &(memory_data[j]), sizeof(memory_data[j]), 100);
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <StartMem_Access_Data+0xc0>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <StartMem_Access_Data+0xbc>)
 8002b54:	1899      	adds	r1, r3, r2
 8002b56:	2364      	movs	r3, #100	; 0x64
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f005 ff83 	bl	8008a64 <osMessageQueuePut>
	    	  for (int j=0;j<15;j++)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b0e      	cmp	r3, #14
 8002b68:	ddf0      	ble.n	8002b4c <StartMem_Access_Data+0x6c>
	    	  		  }

	      }

	      End_History=0;
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <StartMem_Access_Data+0xb4>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	 	  osSemaphoreRelease(Semaphore3Handle);
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <StartMem_Access_Data+0xc4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f005 febd 	bl	80088f4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002b7a:	e7b5      	b.n	8002ae8 <StartMem_Access_Data+0x8>
 8002b7c:	20000bfc 	.word	0x20000bfc
 8002b80:	20000cbc 	.word	0x20000cbc
 8002b84:	20000bec 	.word	0x20000bec
 8002b88:	20000c80 	.word	0x20000c80
 8002b8c:	20000caf 	.word	0x20000caf
 8002b90:	20000008 	.word	0x20000008
 8002b94:	20000cc0 	.word	0x20000cc0
 8002b98:	20000cb8 	.word	0x20000cb8
 8002b9c:	20000c70 	.word	0x20000c70
 8002ba0:	20000bf4 	.word	0x20000bf4
 8002ba4:	20000c00 	.word	0x20000c00

08002ba8 <StartBLE_Send_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBLE_Send_Data */
void StartBLE_Send_Data(void *argument)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBLE_Send_Data */
  /* Infinite loop */
  for(;;)
  {
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002bb0:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <StartBLE_Send_Data+0xa4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 fe49 	bl	8008850 <osSemaphoreAcquire>

	      if (flg_hist==true)
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <StartBLE_Send_Data+0xa8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <StartBLE_Send_Data+0x30>
	      		{

	      		    End_History=1;
 8002bc6:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <StartBLE_Send_Data+0xac>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
	      		    history_flag=0;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <StartBLE_Send_Data+0xb0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
	      		    flg_hist = false;
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <StartBLE_Send_Data+0xa8>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]

	      		 }

	      if (history_flag==0)
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <StartBLE_Send_Data+0xb0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d117      	bne.n	8002c10 <StartBLE_Send_Data+0x68>
	      {
			  for (int l=0;l<15;l++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e00b      	b.n	8002bfe <StartBLE_Send_Data+0x56>

					  {
						osMessageQueueGet(myQueue02Handle, &(buffer_queue2[l]), &size, 100);
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <StartBLE_Send_Data+0xb4>)
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <StartBLE_Send_Data+0xb8>)
 8002bee:	1899      	adds	r1, r3, r2
 8002bf0:	2364      	movs	r3, #100	; 0x64
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <StartBLE_Send_Data+0xbc>)
 8002bf4:	f005 ff96 	bl	8008b24 <osMessageQueueGet>
			  for (int l=0;l<15;l++)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b0e      	cmp	r3, #14
 8002c02:	ddf0      	ble.n	8002be6 <StartBLE_Send_Data+0x3e>
					  }


			  send_data(buffer_queue2,&history_flag,&End_History);
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <StartBLE_Send_Data+0xac>)
 8002c06:	4914      	ldr	r1, [pc, #80]	; (8002c58 <StartBLE_Send_Data+0xb0>)
 8002c08:	4815      	ldr	r0, [pc, #84]	; (8002c60 <StartBLE_Send_Data+0xb8>)
 8002c0a:	f7fe fa05 	bl	8001018 <send_data>
 8002c0e:	e016      	b.n	8002c3e <StartBLE_Send_Data+0x96>
	      }
	      else
	      {
	    	  for (int l=0;l<15;l++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	e00b      	b.n	8002c2e <StartBLE_Send_Data+0x86>

	    	  	  {
	    	  	  	osMessageQueueGet(myQueue03Handle, &(buffer_queue3[l]), &size, 100);
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <StartBLE_Send_Data+0xc0>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <StartBLE_Send_Data+0xc4>)
 8002c1e:	1899      	adds	r1, r3, r2
 8002c20:	2364      	movs	r3, #100	; 0x64
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <StartBLE_Send_Data+0xbc>)
 8002c24:	f005 ff7e 	bl	8008b24 <osMessageQueueGet>
	    	  for (int l=0;l<15;l++)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b0e      	cmp	r3, #14
 8002c32:	ddf0      	ble.n	8002c16 <StartBLE_Send_Data+0x6e>
	    	  	  }


	    	  send_data(buffer_queue3,&history_flag,&End_History);
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <StartBLE_Send_Data+0xac>)
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <StartBLE_Send_Data+0xb0>)
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <StartBLE_Send_Data+0xc4>)
 8002c3a:	f7fe f9ed 	bl	8001018 <send_data>
	      }


	  	  osSemaphoreRelease(Semaphore0Handle);
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <StartBLE_Send_Data+0xc8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f005 fe56 	bl	80088f4 <osSemaphoreRelease>
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002c48:	e7b2      	b.n	8002bb0 <StartBLE_Send_Data+0x8>
 8002c4a:	bf00      	nop
 8002c4c:	20000c00 	.word	0x20000c00
 8002c50:	20000cb8 	.word	0x20000cb8
 8002c54:	20000cc0 	.word	0x20000cc0
 8002c58:	20000cbc 	.word	0x20000cbc
 8002c5c:	20000bf0 	.word	0x20000bf0
 8002c60:	20000c90 	.word	0x20000c90
 8002c64:	20000caf 	.word	0x20000caf
 8002c68:	20000bf4 	.word	0x20000bf4
 8002c6c:	20000ca0 	.word	0x20000ca0
 8002c70:	20000c04 	.word	0x20000c04

08002c74 <StartBike_state>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBike_state */
void StartBike_state(void *argument)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBike_state */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <StartBike_state+0x5c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fde3 	bl	8008850 <osSemaphoreAcquire>

	  if ((bouton==0) && (Temps_vit_null>=27))
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <StartBike_state+0x60>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <StartBike_state+0x36>
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <StartBike_state+0x64>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b1a      	cmp	r3, #26
 8002c98:	dd07      	ble.n	8002caa <StartBike_state+0x36>
		  {
		      HAL_SuspendTick();
 8002c9a:	f000 fa45 	bl	8003128 <HAL_SuspendTick>
		      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 8002c9e:	2008      	movs	r0, #8
 8002ca0:	f001 fa3a 	bl	8004118 <HAL_PWR_EnableWakeUpPin>
		      HAL_PWR_EnterSTANDBYMode();
 8002ca4:	f001 fa58 	bl	8004158 <HAL_PWR_EnterSTANDBYMode>
 8002ca8:	e00c      	b.n	8002cc4 <StartBike_state+0x50>

		  }
	  else
		  {
              HAL_ResumeTick();
 8002caa:	f000 fa4f 	bl	800314c <HAL_ResumeTick>
              if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8002cae:	2104      	movs	r1, #4
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f001 fa00 	bl	80040b8 <HAL_GPIO_ReadPin>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <StartBike_state+0x50>
               		   bouton = 1;
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <StartBike_state+0x60>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
		  }

	  osSemaphoreRelease(Semaphore1Handle);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <StartBike_state+0x68>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f005 fe13 	bl	80088f4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002cce:	e7d5      	b.n	8002c7c <StartBike_state+0x8>
 8002cd0:	20000c04 	.word	0x20000c04
 8002cd4:	20000cb0 	.word	0x20000cb0
 8002cd8:	20000cb4 	.word	0x20000cb4
 8002cdc:	20000bf8 	.word	0x20000bf8

08002ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cf2:	f000 fba7 	bl	8003444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40001000 	.word	0x40001000

08002d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
}
 8002d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <Error_Handler+0x8>
	...

08002d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6613      	str	r3, [r2, #96]	; 0x60
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_MspInit+0x4c>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	210f      	movs	r1, #15
 8002d4a:	f06f 0001 	mvn.w	r0, #1
 8002d4e:	f000 fc75 	bl	800363c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <HAL_QSPI_MspInit+0x7c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d128      	bne.n	8002dd4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6513      	str	r3, [r2, #80]	; 0x50
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002da0:	f043 0310 	orr.w	r3, r3, #16
 8002da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_QSPI_MspInit+0x80>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002db2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002db6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <HAL_QSPI_MspInit+0x84>)
 8002dd0:	f000 fed4 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	a0001000 	.word	0xa0001000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	48001000 	.word	0x48001000

08002de8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_QSPI_MspDeInit+0x30>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10a      	bne.n	8002e10 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_QSPI_MspDeInit+0x34>)
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_QSPI_MspDeInit+0x34>)
 8002e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e04:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002e06:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <HAL_QSPI_MspDeInit+0x38>)
 8002e0c:	f001 f860 	bl	8003ed0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	a0001000 	.word	0xa0001000
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48001000 	.word	0x48001000

08002e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0b0      	sub	sp, #192	; 0xc0
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	2288      	movs	r2, #136	; 0x88
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f008 ff49 	bl	800bcdc <memset>
  if(huart->Instance==UART4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a83      	ldr	r2, [pc, #524]	; (800305c <HAL_UART_MspInit+0x238>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d145      	bne.n	8002ee0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e54:	2308      	movs	r3, #8
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fd15 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e6c:	f7ff ff4a 	bl	8002d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7c:	4b78      	ldr	r3, [pc, #480]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e94:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    PA15 (JTDI)     ------> UART4_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8002ea0:	f248 0303 	movw	r3, #32771	; 0x8003
 8002ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eca:	f000 fe57 	bl	8003b7c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	2034      	movs	r0, #52	; 0x34
 8002ed4:	f000 fbb2 	bl	800363c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ed8:	2034      	movs	r0, #52	; 0x34
 8002eda:	f000 fbcb 	bl	8003674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ede:	e0b9      	b.n	8003054 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_UART_MspInit+0x240>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d16c      	bne.n	8002fc4 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fcca 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002f02:	f7ff feff 	bl	8002d04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6613      	str	r3, [r2, #96]	; 0x60
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f36:	23c0      	movs	r3, #192	; 0xc0
 8002f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4843      	ldr	r0, [pc, #268]	; (8003068 <HAL_UART_MspInit+0x244>)
 8002f5c:	f000 fe0e 	bl	8003b7c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f62:	4a43      	ldr	r2, [pc, #268]	; (8003070 <HAL_UART_MspInit+0x24c>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f68:	2202      	movs	r2, #2
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f96:	4835      	ldr	r0, [pc, #212]	; (800306c <HAL_UART_MspInit+0x248>)
 8002f98:	f000 fb7a 	bl	8003690 <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002fa2:	f7ff feaf 	bl	8002d04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_UART_MspInit+0x248>)
 8002faa:	671a      	str	r2, [r3, #112]	; 0x70
 8002fac:	4a2f      	ldr	r2, [pc, #188]	; (800306c <HAL_UART_MspInit+0x248>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	2025      	movs	r0, #37	; 0x25
 8002fb8:	f000 fb40 	bl	800363c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fbc:	2025      	movs	r0, #37	; 0x25
 8002fbe:	f000 fb59 	bl	8003674 <HAL_NVIC_EnableIRQ>
}
 8002fc2:	e047      	b.n	8003054 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <HAL_UART_MspInit+0x250>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d142      	bne.n	8003054 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fc58 	bl	8005890 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002fe6:	f7ff fe8d 	bl	8002d04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_UART_MspInit+0x23c>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800301a:	2360      	movs	r3, #96	; 0x60
 800301c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003032:	2307      	movs	r3, #7
 8003034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800303c:	4619      	mov	r1, r3
 800303e:	480e      	ldr	r0, [pc, #56]	; (8003078 <HAL_UART_MspInit+0x254>)
 8003040:	f000 fd9c 	bl	8003b7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2105      	movs	r1, #5
 8003048:	2026      	movs	r0, #38	; 0x26
 800304a:	f000 faf7 	bl	800363c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800304e:	2026      	movs	r0, #38	; 0x26
 8003050:	f000 fb10 	bl	8003674 <HAL_NVIC_EnableIRQ>
}
 8003054:	bf00      	nop
 8003056:	37c0      	adds	r7, #192	; 0xc0
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40004c00 	.word	0x40004c00
 8003060:	40021000 	.word	0x40021000
 8003064:	40013800 	.word	0x40013800
 8003068:	48000400 	.word	0x48000400
 800306c:	20000c08 	.word	0x20000c08
 8003070:	40020058 	.word	0x40020058
 8003074:	40004400 	.word	0x40004400
 8003078:	48000c00 	.word	0x48000c00

0800307c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800308c:	2200      	movs	r2, #0
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	2036      	movs	r0, #54	; 0x36
 8003092:	f000 fad3 	bl	800363c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003096:	2036      	movs	r0, #54	; 0x36
 8003098:	f000 faec 	bl	8003674 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_InitTick+0x9c>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_InitTick+0x9c>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6593      	str	r3, [r2, #88]	; 0x58
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_InitTick+0x9c>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b4:	f107 0210 	add.w	r2, r7, #16
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fb54 	bl	800576c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030c4:	f002 fb26 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80030c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_InitTick+0xa0>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	3b01      	subs	r3, #1
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_InitTick+0xa4>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_InitTick+0xa8>)
 80030dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_InitTick+0xa4>)
 80030e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_InitTick+0xa4>)
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_InitTick+0xa4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_InitTick+0xa4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80030f8:	4809      	ldr	r0, [pc, #36]	; (8003120 <HAL_InitTick+0xa4>)
 80030fa:	f003 f885 	bl	8006208 <HAL_TIM_Base_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003104:	4806      	ldr	r0, [pc, #24]	; (8003120 <HAL_InitTick+0xa4>)
 8003106:	f003 f8e1 	bl	80062cc <HAL_TIM_Base_Start_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	431bde83 	.word	0x431bde83
 8003120:	20000cc4 	.word	0x20000cc4
 8003124:	40001000 	.word	0x40001000

08003128 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_SuspendTick+0x20>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_SuspendTick+0x20>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	60da      	str	r2, [r3, #12]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000cc4 	.word	0x20000cc4

0800314c <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_ResumeTick+0x20>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_ResumeTick+0x20>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	60da      	str	r2, [r3, #12]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000cc4 	.word	0x20000cc4

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x4>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80031a0:	2004      	movs	r0, #4
 80031a2:	f000 ffa1 	bl	80040e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA1_Channel5_IRQHandler+0x10>)
 80031b2:	f000 fc04 	bl	80039be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000c08 	.word	0x20000c08

080031c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <USART1_IRQHandler+0x10>)
 80031c6:	f003 fced 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000274 	.word	0x20000274

080031d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <USART2_IRQHandler+0x10>)
 80031da:	f003 fce3 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200003c8 	.word	0x200003c8

080031e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <UART4_IRQHandler+0x10>)
 80031ee:	f003 fcd9 	bl	8006ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200004b0 	.word	0x200004b0

080031fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <TIM6_DAC_IRQHandler+0x10>)
 8003202:	f003 f8d3 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000cc4 	.word	0x20000cc4

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_kill>:

int _kill(int pid, int sig)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800322a:	f008 fd1f 	bl	800bc6c <__errno>
 800322e:	4603      	mov	r3, r0
 8003230:	2216      	movs	r2, #22
 8003232:	601a      	str	r2, [r3, #0]
	return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_exit>:

void _exit (int status)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ffe7 	bl	8003220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003252:	e7fe      	b.n	8003252 <_exit+0x12>

08003254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e00a      	b.n	800327c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003266:	f3af 8000 	nop.w
 800326a:	4601      	mov	r1, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	60ba      	str	r2, [r7, #8]
 8003272:	b2ca      	uxtb	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	dbf0      	blt.n	8003266 <_read+0x12>
	}

return len;
 8003284:	687b      	ldr	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e009      	b.n	80032b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbf1      	blt.n	80032a0 <_write+0x12>
	}
	return len;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_close>:

int _close(int file)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
	return -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ee:	605a      	str	r2, [r3, #4]
	return 0;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_isatty>:

int _isatty(int file)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
	return 1;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
	return 0;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <_sbrk+0x5c>)
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <_sbrk+0x60>)
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <_sbrk+0x64>)
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <_sbrk+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <_sbrk+0x64>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d207      	bcs.n	8003370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003360:	f008 fc84 	bl	800bc6c <__errno>
 8003364:	4603      	mov	r3, r0
 8003366:	220c      	movs	r2, #12
 8003368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e009      	b.n	8003384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <_sbrk+0x64>)
 8003380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20018000 	.word	0x20018000
 8003390:	00000400 	.word	0x00000400
 8003394:	20000d14 	.word	0x20000d14
 8003398:	200068c8 	.word	0x200068c8

0800339c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <SystemInit+0x20>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <SystemInit+0x20>)
 80033a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033c4:	f7ff ffea 	bl	800339c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c8:	480c      	ldr	r0, [pc, #48]	; (80033fc <LoopForever+0x6>)
  ldr r1, =_edata
 80033ca:	490d      	ldr	r1, [pc, #52]	; (8003400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033cc:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <LoopForever+0xe>)
  movs r3, #0
 80033ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d0:	e002      	b.n	80033d8 <LoopCopyDataInit>

080033d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d6:	3304      	adds	r3, #4

080033d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033dc:	d3f9      	bcc.n	80033d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e0:	4c0a      	ldr	r4, [pc, #40]	; (800340c <LoopForever+0x16>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e4:	e001      	b.n	80033ea <LoopFillZerobss>

080033e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e8:	3204      	adds	r2, #4

080033ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ec:	d3fb      	bcc.n	80033e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ee:	f008 fc43 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033f2:	f7ff f98f 	bl	8002714 <main>

080033f6 <LoopForever>:

LoopForever:
    b LoopForever
 80033f6:	e7fe      	b.n	80033f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003400:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003404:	08012164 	.word	0x08012164
  ldr r2, =_sbss
 8003408:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800340c:	200068c4 	.word	0x200068c4

08003410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003410:	e7fe      	b.n	8003410 <ADC1_2_IRQHandler>

08003412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800341c:	2003      	movs	r0, #3
 800341e:	f000 f902 	bl	8003626 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003422:	200f      	movs	r0, #15
 8003424:	f7ff fe2a 	bl	800307c <HAL_InitTick>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	71fb      	strb	r3, [r7, #7]
 8003432:	e001      	b.n	8003438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003434:	f7ff fc6c 	bl	8002d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003438:	79fb      	ldrb	r3, [r7, #7]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x20>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_IncTick+0x24>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_IncTick+0x24>)
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000018 	.word	0x20000018
 8003468:	20000d18 	.word	0x20000d18

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000d18 	.word	0x20000d18

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d005      	beq.n	80034aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_Delay+0x44>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034aa:	bf00      	nop
 80034ac:	f7ff ffde 	bl	800346c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d8f7      	bhi.n	80034ac <HAL_Delay+0x28>
  {
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000018 	.word	0x20000018

080034cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fe:	4a04      	ldr	r2, [pc, #16]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	60d3      	str	r3, [r2, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__NVIC_GetPriorityGrouping+0x18>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	f003 0307 	and.w	r3, r3, #7
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	db0b      	blt.n	800355a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4907      	ldr	r1, [pc, #28]	; (8003568 <__NVIC_EnableIRQ+0x38>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2001      	movs	r0, #1
 8003552:	fa00 f202 	lsl.w	r2, r0, r2
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000e100 	.word	0xe000e100

0800356c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	db0a      	blt.n	8003596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	490c      	ldr	r1, [pc, #48]	; (80035b8 <__NVIC_SetPriority+0x4c>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	440b      	add	r3, r1
 8003590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003594:	e00a      	b.n	80035ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <__NVIC_SetPriority+0x50>)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3b04      	subs	r3, #4
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	440b      	add	r3, r1
 80035aa:	761a      	strb	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000e100 	.word	0xe000e100
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f1c3 0307 	rsb	r3, r3, #7
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf28      	it	cs
 80035de:	2304      	movcs	r3, #4
 80035e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d902      	bls.n	80035f0 <NVIC_EncodePriority+0x30>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3b03      	subs	r3, #3
 80035ee:	e000      	b.n	80035f2 <NVIC_EncodePriority+0x32>
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003608:	f04f 31ff 	mov.w	r1, #4294967295
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	43d9      	mvns	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	4313      	orrs	r3, r2
         );
}
 800361a:	4618      	mov	r0, r3
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff4c 	bl	80034cc <__NVIC_SetPriorityGrouping>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364e:	f7ff ff61 	bl	8003514 <__NVIC_GetPriorityGrouping>
 8003652:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f7ff ffb1 	bl	80035c0 <NVIC_EncodePriority>
 800365e:	4602      	mov	r2, r0
 8003660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff80 	bl	800356c <__NVIC_SetPriority>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff54 	bl	8003530 <__NVIC_EnableIRQ>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e098      	b.n	80037d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_DMA_Init+0x150>)
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d80f      	bhi.n	80036ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_DMA_Init+0x154>)
 80036b6:	4413      	add	r3, r2
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <HAL_DMA_Init+0x158>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a48      	ldr	r2, [pc, #288]	; (80037ec <HAL_DMA_Init+0x15c>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
 80036cc:	e00e      	b.n	80036ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_DMA_Init+0x160>)
 80036d6:	4413      	add	r3, r2
 80036d8:	4a43      	ldr	r2, [pc, #268]	; (80037e8 <HAL_DMA_Init+0x158>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	009a      	lsls	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_DMA_Init+0x164>)
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003746:	d039      	beq.n	80037bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a27      	ldr	r2, [pc, #156]	; (80037ec <HAL_DMA_Init+0x15c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11a      	bne.n	8003788 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 031c 	and.w	r3, r3, #28
 800375e:	210f      	movs	r1, #15
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	4924      	ldr	r1, [pc, #144]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003768:	4013      	ands	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_DMA_Init+0x168>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 031c 	and.w	r3, r3, #28
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	491d      	ldr	r1, [pc, #116]	; (80037f8 <HAL_DMA_Init+0x168>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
 8003786:	e019      	b.n	80037bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_DMA_Init+0x16c>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f003 031c 	and.w	r3, r3, #28
 8003794:	210f      	movs	r1, #15
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	4917      	ldr	r1, [pc, #92]	; (80037fc <HAL_DMA_Init+0x16c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_DMA_Init+0x16c>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f003 031c 	and.w	r3, r3, #28
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	4911      	ldr	r1, [pc, #68]	; (80037fc <HAL_DMA_Init+0x16c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40020407 	.word	0x40020407
 80037e4:	bffdfff8 	.word	0xbffdfff8
 80037e8:	cccccccd 	.word	0xcccccccd
 80037ec:	40020000 	.word	0x40020000
 80037f0:	bffdfbf8 	.word	0xbffdfbf8
 80037f4:	40020400 	.word	0x40020400
 80037f8:	400200a8 	.word	0x400200a8
 80037fc:	400204a8 	.word	0x400204a8

08003800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_DMA_Start_IT+0x20>
 800381c:	2302      	movs	r3, #2
 800381e:	e04b      	b.n	80038b8 <HAL_DMA_Start_IT+0xb8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d13a      	bne.n	80038aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f95f 	bl	8003b1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 020e 	orr.w	r2, r2, #14
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e00f      	b.n	8003898 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 020a 	orr.w	r2, r2, #10
 8003896:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e005      	b.n	80038b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d008      	beq.n	80038ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2204      	movs	r2, #4
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e022      	b.n	8003930 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 020e 	bic.w	r2, r2, #14
 80038f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f003 021c 	and.w	r2, r3, #28
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f202 	lsl.w	r2, r1, r2
 800391c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d005      	beq.n	8003960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e029      	b.n	80039b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f003 021c 	and.w	r2, r3, #28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
    }
  }
  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f003 031c 	and.w	r3, r3, #28
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d026      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x7a>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0204 	bic.w	r2, r2, #4
 8003a10:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 021c 	and.w	r2, r3, #28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2104      	movs	r1, #4
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d071      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a36:	e06c      	b.n	8003b12 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	2202      	movs	r2, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xec>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d029      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 020a 	bic.w	r2, r2, #10
 8003a72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 021c 	and.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2102      	movs	r1, #2
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d038      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aa8:	e033      	b.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f003 031c 	and.w	r3, r3, #28
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02a      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d025      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020e 	bic.w	r2, r2, #14
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	f003 021c 	and.w	r2, r3, #28
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
}
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f003 021c 	and.w	r2, r3, #28
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d108      	bne.n	8003b60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b5e:	e007      	b.n	8003b70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8a:	e17f      	b.n	8003e8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8171 	beq.w	8003e86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d005      	beq.n	8003bbc <HAL_GPIO_Init+0x40>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d130      	bne.n	8003c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0201 	and.w	r2, r3, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d118      	bne.n	8003c5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c30:	2201      	movs	r2, #1
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d017      	beq.n	8003c98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d123      	bne.n	8003cec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	6939      	ldr	r1, [r7, #16]
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80ac 	beq.w	8003e86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6613      	str	r3, [r2, #96]	; 0x60
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d46:	4a5a      	ldr	r2, [pc, #360]	; (8003eb0 <HAL_GPIO_Init+0x334>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x242>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	; (8003eb4 <HAL_GPIO_Init+0x338>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x23e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_GPIO_Init+0x33c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x23a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4d      	ldr	r2, [pc, #308]	; (8003ebc <HAL_GPIO_Init+0x340>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x236>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	; (8003ec0 <HAL_GPIO_Init+0x344>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x232>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	; (8003ec4 <HAL_GPIO_Init+0x348>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x22e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_GPIO_Init+0x34c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x22a>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00c      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e00a      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e008      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e004      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	f002 0203 	and.w	r2, r2, #3
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4093      	lsls	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dd0:	4937      	ldr	r1, [pc, #220]	; (8003eb0 <HAL_GPIO_Init+0x334>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e02:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f47f ae78 	bne.w	8003b8c <HAL_GPIO_Init+0x10>
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	48000800 	.word	0x48000800
 8003ebc:	48000c00 	.word	0x48000c00
 8003ec0:	48001000 	.word	0x48001000
 8003ec4:	48001400 	.word	0x48001400
 8003ec8:	48001800 	.word	0x48001800
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ede:	e0cd      	b.n	800407c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80c0 	beq.w	8004076 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ef6:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_GPIO_DeInit+0x1c8>)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	3302      	adds	r3, #2
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	220f      	movs	r2, #15
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f1e:	d025      	beq.n	8003f6c <HAL_GPIO_DeInit+0x9c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_GPIO_DeInit+0x1cc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01f      	beq.n	8003f68 <HAL_GPIO_DeInit+0x98>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a5d      	ldr	r2, [pc, #372]	; (80040a0 <HAL_GPIO_DeInit+0x1d0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d019      	beq.n	8003f64 <HAL_GPIO_DeInit+0x94>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a5c      	ldr	r2, [pc, #368]	; (80040a4 <HAL_GPIO_DeInit+0x1d4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <HAL_GPIO_DeInit+0x90>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a5b      	ldr	r2, [pc, #364]	; (80040a8 <HAL_GPIO_DeInit+0x1d8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00d      	beq.n	8003f5c <HAL_GPIO_DeInit+0x8c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a5a      	ldr	r2, [pc, #360]	; (80040ac <HAL_GPIO_DeInit+0x1dc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <HAL_GPIO_DeInit+0x88>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a59      	ldr	r2, [pc, #356]	; (80040b0 <HAL_GPIO_DeInit+0x1e0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_GPIO_DeInit+0x84>
 8003f50:	2306      	movs	r3, #6
 8003f52:	e00c      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f54:	2307      	movs	r3, #7
 8003f56:	e00a      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f58:	2305      	movs	r3, #5
 8003f5a:	e008      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_DeInit+0x9e>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d132      	bne.n	8003fe4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	494b      	ldr	r1, [pc, #300]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f8c:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4947      	ldr	r1, [pc, #284]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	4944      	ldr	r1, [pc, #272]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	4940      	ldr	r1, [pc, #256]	; (80040b4 <HAL_GPIO_DeInit+0x1e4>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003fc6:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_GPIO_DeInit+0x1c8>)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	4830      	ldr	r0, [pc, #192]	; (8004098 <HAL_GPIO_DeInit+0x1c8>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	400a      	ands	r2, r1
 8003fde:	3302      	adds	r3, #2
 8003fe0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2103      	movs	r1, #3
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	08da      	lsrs	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	220f      	movs	r2, #15
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	08d2      	lsrs	r2, r2, #3
 8004018:	4019      	ands	r1, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3208      	adds	r2, #8
 800401e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2103      	movs	r1, #3
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	2101      	movs	r1, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2103      	movs	r1, #3
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	401a      	ands	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	2101      	movs	r1, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	401a      	ands	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3301      	adds	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	f47f af2b 	bne.w	8003ee0 <HAL_GPIO_DeInit+0x10>
  }
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40010000 	.word	0x40010000
 800409c:	48000400 	.word	0x48000400
 80040a0:	48000800 	.word	0x48000800
 80040a4:	48000c00 	.word	0x48000c00
 80040a8:	48001000 	.word	0x48001000
 80040ac:	48001400 	.word	0x48001400
 80040b0:	48001800 	.word	0x48001800
 80040b4:	40010400 	.word	0x40010400

080040b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e001      	b.n	80040da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040fe:	4a05      	ldr	r2, [pc, #20]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fae2 	bl	80026d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40010400 	.word	0x40010400

08004118 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	43db      	mvns	r3, r3
 800412c:	401a      	ands	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	4908      	ldr	r1, [pc, #32]	; (8004154 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	608b      	str	r3, [r1, #8]


}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40007000 	.word	0x40007000

08004158 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	4a07      	ldr	r2, [pc, #28]	; (8004184 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004166:	f043 0303 	orr.w	r3, r3, #3
 800416a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004178:	bf30      	wfi
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40007000 	.word	0x40007000
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d130      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d038      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ce:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2232      	movs	r2, #50	; 0x32
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	e002      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d102      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f2      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d110      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d007      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000
 800424c:	20000010 	.word	0x20000010
 8004250:	431bde83 	.word	0x431bde83

08004254 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff f906 	bl	800346c <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e063      	b.n	8004334 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fe fd6d 	bl	8002d60 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004286:	f241 3188 	movw	r1, #5000	; 0x1388
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb03 	bl	8004896 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	3b01      	subs	r3, #1
 80042a0:	021a      	lsls	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	2120      	movs	r1, #32
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fafb 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042c0:	7afb      	ldrb	r3, [r7, #11]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d131      	bne.n	800432a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f023 0310 	bic.w	r3, r3, #16
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6852      	ldr	r2, [r2, #4]
 80042d8:	0611      	lsls	r1, r2, #24
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68d2      	ldr	r2, [r2, #12]
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_QSPI_Init+0xe8>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6912      	ldr	r2, [r2, #16]
 80042f6:	0411      	lsls	r1, r2, #16
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6952      	ldr	r2, [r2, #20]
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6992      	ldr	r2, [r2, #24]
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	430b      	orrs	r3, r1
 800430a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004332:	7afb      	ldrb	r3, [r7, #11]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffe0f8fe 	.word	0xffe0f8fe

08004340 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e016      	b.n	8004380 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe fd40 	bl	8002de8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7ff f86a 	bl	800346c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_QSPI_Command+0x22>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e048      	b.n	800443c <HAL_QSPI_Command+0xb4>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d137      	bne.n	800442e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2120      	movs	r1, #32
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa6b 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d125      	bne.n	8004432 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80043e6:	2200      	movs	r2, #0
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa98 	bl	8004920 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d115      	bne.n	8004424 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2201      	movs	r2, #1
 8004400:	2102      	movs	r1, #2
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fa55 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2202      	movs	r2, #2
 8004418:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004422:	e006      	b.n	8004432 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800442c:	e001      	b.n	8004432 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff f80a 	bl	800346c <HAL_GetTick>
 8004458:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3320      	adds	r3, #32
 8004460:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_QSPI_Transmit+0x2e>
 800446e:	2302      	movs	r3, #2
 8004470:	e07b      	b.n	800456a <HAL_QSPI_Transmit+0x126>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d16a      	bne.n	800455c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d05b      	beq.n	800454a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2212      	movs	r2, #18
 8004496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80044c6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80044c8:	e01b      	b.n	8004502 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2201      	movs	r2, #1
 80044d2:	2104      	movs	r1, #4
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f9ec 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80044de:	7ffb      	ldrb	r3, [r7, #31]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1df      	bne.n	80044ca <HAL_QSPI_Transmit+0x86>
 800450a:	e000      	b.n	800450e <HAL_QSPI_Transmit+0xca>
          break;
 800450c:	bf00      	nop
      }

      if (status == HAL_OK)
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d115      	bne.n	8004540 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2201      	movs	r2, #1
 800451c:	2102      	movs	r1, #2
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f9c7 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004528:	7ffb      	ldrb	r3, [r7, #31]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2202      	movs	r2, #2
 8004534:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f934 	bl	80047a4 <HAL_QSPI_Abort>
 800453c:	4603      	mov	r3, r0
 800453e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004548:	e00a      	b.n	8004560 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	f043 0208 	orr.w	r2, r3, #8
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e001      	b.n	8004560 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800455c:	2302      	movs	r3, #2
 800455e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004568:	7ffb      	ldrb	r3, [r7, #31]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b08a      	sub	sp, #40	; 0x28
 8004576:	af02      	add	r7, sp, #8
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004582:	f7fe ff73 	bl	800346c <HAL_GetTick>
 8004586:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3320      	adds	r3, #32
 8004596:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_QSPI_Receive+0x36>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e082      	b.n	80046ae <HAL_QSPI_Receive+0x13c>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d171      	bne.n	80046a0 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d062      	beq.n	800468e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2222      	movs	r2, #34	; 0x22
 80045cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004600:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800460a:	e01c      	b.n	8004646 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2201      	movs	r2, #1
 8004614:	2106      	movs	r1, #6
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f94b 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d114      	bne.n	8004650 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1de      	bne.n	800460c <HAL_QSPI_Receive+0x9a>
 800464e:	e000      	b.n	8004652 <HAL_QSPI_Receive+0xe0>
          break;
 8004650:	bf00      	nop
      }

      if (status == HAL_OK)
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2201      	movs	r2, #1
 8004660:	2102      	movs	r1, #2
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f925 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800466c:	7ffb      	ldrb	r3, [r7, #31]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2202      	movs	r2, #2
 8004678:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f892 	bl	80047a4 <HAL_QSPI_Abort>
 8004680:	4603      	mov	r3, r0
 8004682:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800468c:	e00a      	b.n	80046a4 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	f043 0208 	orr.w	r2, r3, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e001      	b.n	80046a4 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7fe fed2 	bl	800346c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_QSPI_AutoPolling+0x24>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e060      	b.n	800479c <HAL_QSPI_AutoPolling+0xe6>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d14f      	bne.n	800478e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2242      	movs	r2, #66	; 0x42
 80046f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2200      	movs	r2, #0
 8004704:	2120      	movs	r1, #32
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f8d3 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13d      	bne.n	8004792 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6852      	ldr	r2, [r2, #4]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6892      	ldr	r2, [r2, #8]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	431a      	orrs	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800474c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f8df 	bl	8004920 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2201      	movs	r2, #1
 800476a:	2108      	movs	r1, #8
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f8a0 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800478c:	e001      	b.n	8004792 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800479a:	7dfb      	ldrb	r3, [r7, #23]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80047b0:	f7fe fe5c 	bl	800346c <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d062      	beq.n	800488c <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff f865 	bl	80038c0 <HAL_DMA_Abort>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	f043 0204 	orr.w	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d034      	beq.n	8004884 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0202 	orr.w	r2, r2, #2
 8004828:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2201      	movs	r2, #1
 8004834:	2102      	movs	r1, #2
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f83b 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10e      	bne.n	8004864 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2202      	movs	r2, #2
 800484c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	2120      	movs	r1, #32
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f829 	bl	80048b2 <QSPI_WaitFlagStateUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d110      	bne.n	800488c <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004878:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004882:	e003      	b.n	800488c <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80048c2:	e01a      	b.n	80048fa <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d016      	beq.n	80048fa <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048cc:	f7fe fdce 	bl	800346c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2204      	movs	r2, #4
 80048e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e00e      	b.n	8004918 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	d1d6      	bne.n	80048c4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <QSPI_Config+0x28>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800493a:	d005      	beq.n	8004948 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3a01      	subs	r2, #1
 8004946:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80b9 	beq.w	8004ac4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d05f      	beq.n	8004a1a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d031      	beq.n	80049d0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	431a      	orrs	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	431a      	orrs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	049b      	lsls	r3, r3, #18
 8004988:	431a      	orrs	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	431a      	orrs	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	431a      	orrs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	431a      	orrs	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	ea42 0103 	orr.w	r1, r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049c0:	f000 812e 	beq.w	8004c20 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	6852      	ldr	r2, [r2, #4]
 80049cc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80049ce:	e127      	b.n	8004c20 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	049b      	lsls	r3, r3, #18
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	615a      	str	r2, [r3, #20]
}
 8004a18:	e102      	b.n	8004c20 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02e      	beq.n	8004a80 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	049b      	lsls	r3, r3, #18
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	ea42 0103 	orr.w	r1, r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a70:	f000 80d6 	beq.w	8004c20 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	e0cf      	b.n	8004c20 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	049b      	lsls	r3, r3, #18
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	615a      	str	r2, [r3, #20]
}
 8004ac2:	e0ad      	b.n	8004c20 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d058      	beq.n	8004b7e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	6892      	ldr	r2, [r2, #8]
 8004ad4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02d      	beq.n	8004b3a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	049b      	lsls	r3, r3, #18
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	ea42 0103 	orr.w	r1, r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b2c:	d078      	beq.n	8004c20 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	6852      	ldr	r2, [r2, #4]
 8004b36:	619a      	str	r2, [r3, #24]
}
 8004b38:	e072      	b.n	8004c20 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	049b      	lsls	r3, r3, #18
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	ea42 0103 	orr.w	r1, r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	615a      	str	r2, [r3, #20]
}
 8004b7c:	e050      	b.n	8004c20 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02a      	beq.n	8004bdc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	049b      	lsls	r3, r3, #18
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	ea42 0103 	orr.w	r1, r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bce:	d027      	beq.n	8004c20 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	6852      	ldr	r2, [r2, #4]
 8004bd8:	619a      	str	r2, [r3, #24]
}
 8004bda:	e021      	b.n	8004c20 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01d      	beq.n	8004c20 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	049b      	lsls	r3, r3, #18
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	ea42 0103 	orr.w	r1, r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	615a      	str	r2, [r3, #20]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e3ca      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c3e:	4b97      	ldr	r3, [pc, #604]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c48:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80e4 	beq.w	8004e28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_RCC_OscConfig+0x4a>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f040 808b 	bne.w	8004d84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 8087 	bne.w	8004d84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c76:	4b89      	ldr	r3, [pc, #548]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCC_OscConfig+0x62>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e3a2      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	4b82      	ldr	r3, [pc, #520]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x7c>
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca6:	e005      	b.n	8004cb4 <HAL_RCC_OscConfig+0x88>
 8004ca8:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d223      	bcs.n	8004d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fd87 	bl	80057d0 <RCC_SetFlashLatencyFromMSIRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e383      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ccc:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a72      	ldr	r2, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cd2:	f043 0308 	orr.w	r3, r3, #8
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b70      	ldr	r3, [pc, #448]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	496d      	ldr	r1, [pc, #436]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cea:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	4968      	ldr	r1, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
 8004cfe:	e025      	b.n	8004d4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4960      	ldr	r1, [pc, #384]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d1e:	4b5f      	ldr	r3, [pc, #380]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	495b      	ldr	r1, [pc, #364]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fd47 	bl	80057d0 <RCC_SetFlashLatencyFromMSIRange>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e343      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4c:	f000 fc4a 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b52      	ldr	r3, [pc, #328]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	4950      	ldr	r1, [pc, #320]	; (8004ea0 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	4a4e      	ldr	r2, [pc, #312]	; (8004ea4 <HAL_RCC_OscConfig+0x278>)
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ea8 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe f983 	bl	800307c <HAL_InitTick>
 8004d76:	4603      	mov	r3, r0
 8004d78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d052      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	e327      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d032      	beq.n	8004df2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d8c:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a42      	ldr	r2, [pc, #264]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d98:	f7fe fb68 	bl	800346c <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004da0:	f7fe fb64 	bl	800346c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e310      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a36      	ldr	r2, [pc, #216]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dc4:	f043 0308 	orr.w	r3, r3, #8
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4931      	ldr	r1, [pc, #196]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	492c      	ldr	r1, [pc, #176]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
 8004df0:	e01a      	b.n	8004e28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fb35 	bl	800346c <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e06:	f7fe fb31 	bl	800346c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e2dd      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e18:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1da>
 8004e24:	e000      	b.n	8004e28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d074      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d005      	beq.n	8004e46 <HAL_RCC_OscConfig+0x21a>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d10e      	bne.n	8004e5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d064      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d160      	bne.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e2ba      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x24a>
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e026      	b.n	8004ec4 <HAL_RCC_OscConfig+0x298>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e7e:	d115      	bne.n	8004eac <HAL_RCC_OscConfig+0x280>
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a02      	ldr	r2, [pc, #8]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e014      	b.n	8004ec4 <HAL_RCC_OscConfig+0x298>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	08011b54 	.word	0x08011b54
 8004ea4:	20000010 	.word	0x20000010
 8004ea8:	20000014 	.word	0x20000014
 8004eac:	4ba0      	ldr	r3, [pc, #640]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a9f      	ldr	r2, [pc, #636]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b9d      	ldr	r3, [pc, #628]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a9c      	ldr	r2, [pc, #624]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fe face 	bl	800346c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fe faca 	bl	800346c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e276      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee6:	4b92      	ldr	r3, [pc, #584]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x2a8>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe faba 	bl	800346c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fe fab6 	bl	800346c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e262      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f0e:	4b88      	ldr	r3, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x2d0>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d060      	beq.n	8004fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_OscConfig+0x310>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d119      	bne.n	8004f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d116      	bne.n	8004f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_OscConfig+0x328>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e23f      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f54:	4b76      	ldr	r3, [pc, #472]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	4973      	ldr	r1, [pc, #460]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f68:	e040      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d023      	beq.n	8004fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f72:	4b6f      	ldr	r3, [pc, #444]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6e      	ldr	r2, [pc, #440]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7fe fa75 	bl	800346c <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f86:	f7fe fa71 	bl	800346c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e21d      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	495f      	ldr	r1, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	e018      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	4b5d      	ldr	r3, [pc, #372]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fa51 	bl	800346c <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fce:	f7fe fa4d 	bl	800346c <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e1f9      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fe0:	4b53      	ldr	r3, [pc, #332]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d03c      	beq.n	8005072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01c      	beq.n	800503a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005000:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005006:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fe fa2c 	bl	800346c <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005018:	f7fe fa28 	bl	800346c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1d4      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 800502c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ef      	beq.n	8005018 <HAL_RCC_OscConfig+0x3ec>
 8005038:	e01b      	b.n	8005072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b3d      	ldr	r3, [pc, #244]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005040:	4a3b      	ldr	r2, [pc, #236]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fe fa0f 	bl	800346c <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005052:	f7fe fa0b 	bl	800346c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e1b7      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005064:	4b32      	ldr	r3, [pc, #200]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ef      	bne.n	8005052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80a6 	beq.w	80051cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005084:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	6593      	str	r3, [r2, #88]	; 0x58
 800509c:	4b24      	ldr	r3, [pc, #144]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ac:	4b21      	ldr	r3, [pc, #132]	; (8005134 <HAL_RCC_OscConfig+0x508>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d118      	bne.n	80050ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <HAL_RCC_OscConfig+0x508>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <HAL_RCC_OscConfig+0x508>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c4:	f7fe f9d2 	bl	800346c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fe f9ce 	bl	800346c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e17a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <HAL_RCC_OscConfig+0x508>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d108      	bne.n	8005104 <HAL_RCC_OscConfig+0x4d8>
 80050f2:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005102:	e029      	b.n	8005158 <HAL_RCC_OscConfig+0x52c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b05      	cmp	r3, #5
 800510a:	d115      	bne.n	8005138 <HAL_RCC_OscConfig+0x50c>
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	4a03      	ldr	r2, [pc, #12]	; (8005130 <HAL_RCC_OscConfig+0x504>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800512c:	e014      	b.n	8005158 <HAL_RCC_OscConfig+0x52c>
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
 8005138:	4b9c      	ldr	r3, [pc, #624]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	4a9b      	ldr	r2, [pc, #620]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005148:	4b98      	ldr	r3, [pc, #608]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	4a97      	ldr	r2, [pc, #604]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d016      	beq.n	800518e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fe f984 	bl	800346c <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fe f980 	bl	800346c <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e12a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b8b      	ldr	r3, [pc, #556]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ed      	beq.n	8005168 <HAL_RCC_OscConfig+0x53c>
 800518c:	e015      	b.n	80051ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fe f96d 	bl	800346c <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fe f969 	bl	800346c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e113      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051ac:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1ed      	bne.n	8005196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c0:	4b7a      	ldr	r3, [pc, #488]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	4a79      	ldr	r2, [pc, #484]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80051c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80fe 	beq.w	80053d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	2b02      	cmp	r3, #2
 80051dc:	f040 80d0 	bne.w	8005380 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051e0:	4b72      	ldr	r3, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0203 	and.w	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d130      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	3b01      	subs	r3, #1
 8005200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d127      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d11f      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005220:	2a07      	cmp	r2, #7
 8005222:	bf14      	ite	ne
 8005224:	2201      	movne	r2, #1
 8005226:	2200      	moveq	r2, #0
 8005228:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800522a:	4293      	cmp	r3, r2
 800522c:	d113      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	3b01      	subs	r3, #1
 800523c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d109      	bne.n	8005256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d06e      	beq.n	8005334 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d069      	beq.n	8005330 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800525c:	4b53      	ldr	r3, [pc, #332]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005268:	4b50      	ldr	r3, [pc, #320]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0ad      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005278:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4b      	ldr	r2, [pc, #300]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005284:	f7fe f8f2 	bl	800346c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fe f8ee 	bl	800346c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e09a      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529e:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052aa:	4b40      	ldr	r3, [pc, #256]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <HAL_RCC_OscConfig+0x784>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ba:	3a01      	subs	r2, #1
 80052bc:	0112      	lsls	r2, r2, #4
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052c4:	0212      	lsls	r2, r2, #8
 80052c6:	4311      	orrs	r1, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052cc:	0852      	lsrs	r2, r2, #1
 80052ce:	3a01      	subs	r2, #1
 80052d0:	0552      	lsls	r2, r2, #21
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052d8:	0852      	lsrs	r2, r2, #1
 80052da:	3a01      	subs	r2, #1
 80052dc:	0652      	lsls	r2, r2, #25
 80052de:	4311      	orrs	r1, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052e4:	0912      	lsrs	r2, r2, #4
 80052e6:	0452      	lsls	r2, r2, #17
 80052e8:	430a      	orrs	r2, r1
 80052ea:	4930      	ldr	r1, [pc, #192]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052f0:	4b2e      	ldr	r3, [pc, #184]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2d      	ldr	r2, [pc, #180]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052fc:	4b2b      	ldr	r3, [pc, #172]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005306:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005308:	f7fe f8b0 	bl	800346c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fe f8ac 	bl	800346c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e058      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005322:	4b22      	ldr	r3, [pc, #136]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800532e:	e050      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e04f      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d148      	bne.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a19      	ldr	r2, [pc, #100]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800534c:	4b17      	ldr	r3, [pc, #92]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a16      	ldr	r2, [pc, #88]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005356:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005358:	f7fe f888 	bl	800346c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fe f884 	bl	800346c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e030      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x734>
 800537e:	e028      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d023      	beq.n	80053ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <HAL_RCC_OscConfig+0x780>)
 800538c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fe f86b 	bl	800346c <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	e00c      	b.n	80053b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fe f867 	bl	800346c <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d905      	bls.n	80053b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ec      	bne.n	800539a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4905      	ldr	r1, [pc, #20]	; (80053dc <HAL_RCC_OscConfig+0x7b0>)
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_OscConfig+0x7b4>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60cb      	str	r3, [r1, #12]
 80053cc:	e001      	b.n	80053d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	feeefffc 	.word	0xfeeefffc

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0e7      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b75      	ldr	r3, [pc, #468]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d910      	bls.n	8005428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b72      	ldr	r3, [pc, #456]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 0207 	bic.w	r2, r3, #7
 800540e:	4970      	ldr	r1, [pc, #448]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b6e      	ldr	r3, [pc, #440]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0cf      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005440:	429a      	cmp	r2, r3
 8005442:	d908      	bls.n	8005456 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005444:	4b63      	ldr	r3, [pc, #396]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4960      	ldr	r1, [pc, #384]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d107      	bne.n	800547a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d121      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0a6      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d107      	bne.n	8005492 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005482:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d115      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e09a      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800549a:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e08e      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054aa:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e086      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054ba:	4b46      	ldr	r3, [pc, #280]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 0203 	bic.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4943      	ldr	r1, [pc, #268]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054cc:	f7fd ffce 	bl	800346c <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d4:	f7fd ffca 	bl	800346c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e06e      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 020c 	and.w	r2, r3, #12
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d1eb      	bne.n	80054d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b2e      	ldr	r3, [pc, #184]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	492b      	ldr	r1, [pc, #172]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552a:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d210      	bcs.n	800555a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f023 0207 	bic.w	r2, r3, #7
 8005540:	4923      	ldr	r1, [pc, #140]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <HAL_RCC_ClockConfig+0x1ec>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e036      	b.n	80055c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	4918      	ldr	r1, [pc, #96]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4910      	ldr	r1, [pc, #64]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005598:	f000 f824 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_RCC_ClockConfig+0x1f0>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	490b      	ldr	r1, [pc, #44]	; (80055d8 <HAL_RCC_ClockConfig+0x1f4>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	4a09      	ldr	r2, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1f8>)
 80055b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_ClockConfig+0x1fc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd fd5d 	bl	800307c <HAL_InitTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80055c6:	7afb      	ldrb	r3, [r7, #11]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40022000 	.word	0x40022000
 80055d4:	40021000 	.word	0x40021000
 80055d8:	08011b54 	.word	0x08011b54
 80055dc:	20000010 	.word	0x20000010
 80055e0:	20000014 	.word	0x20000014

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b089      	sub	sp, #36	; 0x24
 80055e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f2:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055fc:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d121      	bne.n	8005656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d11e      	bne.n	8005656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005618:	4b34      	ldr	r3, [pc, #208]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005624:	4b31      	ldr	r3, [pc, #196]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e005      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005654:	e00a      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d102      	bne.n	8005662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	e004      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d101      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005668:	4b23      	ldr	r3, [pc, #140]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800566a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d134      	bne.n	80056dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005672:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d003      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0xa6>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d003      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0xac>
 8005688:	e005      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800568c:	617b      	str	r3, [r7, #20]
      break;
 800568e:	e005      	b.n	800569c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005692:	617b      	str	r3, [r7, #20]
      break;
 8005694:	e002      	b.n	800569c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	617b      	str	r3, [r7, #20]
      break;
 800569a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800569c:	4b13      	ldr	r3, [pc, #76]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	3301      	adds	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	fb03 f202 	mul.w	r2, r3, r2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <HAL_RCC_GetSysClockFreq+0x108>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	0e5b      	lsrs	r3, r3, #25
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	3301      	adds	r3, #1
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056dc:	69bb      	ldr	r3, [r7, #24]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3724      	adds	r7, #36	; 0x24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	08011b6c 	.word	0x08011b6c
 80056f4:	00f42400 	.word	0x00f42400
 80056f8:	007a1200 	.word	0x007a1200

080056fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005700:	4b03      	ldr	r3, [pc, #12]	; (8005710 <HAL_RCC_GetHCLKFreq+0x14>)
 8005702:	681b      	ldr	r3, [r3, #0]
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000010 	.word	0x20000010

08005714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005718:	f7ff fff0 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4904      	ldr	r1, [pc, #16]	; (800573c <HAL_RCC_GetPCLK1Freq+0x28>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	08011b64 	.word	0x08011b64

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005744:	f7ff ffda 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0adb      	lsrs	r3, r3, #11
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4904      	ldr	r1, [pc, #16]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40021000 	.word	0x40021000
 8005768:	08011b64 	.word	0x08011b64

0800576c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	220f      	movs	r2, #15
 800577a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_GetClockConfig+0x5c>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0203 	and.w	r2, r3, #3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005788:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <HAL_RCC_GetClockConfig+0x5c>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_GetClockConfig+0x5c>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <HAL_RCC_GetClockConfig+0x60>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0207 	and.w	r2, r3, #7
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	601a      	str	r2, [r3, #0]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40022000 	.word	0x40022000

080057d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057dc:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057e8:	f7fe fcd0 	bl	800418c <HAL_PWREx_GetVoltageRange>
 80057ec:	6178      	str	r0, [r7, #20]
 80057ee:	e014      	b.n	800581a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6593      	str	r3, [r2, #88]	; 0x58
 80057fc:	4b22      	ldr	r3, [pc, #136]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005808:	f7fe fcc0 	bl	800418c <HAL_PWREx_GetVoltageRange>
 800580c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800580e:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005818:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005820:	d10b      	bne.n	800583a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b80      	cmp	r3, #128	; 0x80
 8005826:	d919      	bls.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2ba0      	cmp	r3, #160	; 0xa0
 800582c:	d902      	bls.n	8005834 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800582e:	2302      	movs	r3, #2
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e013      	b.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005834:	2301      	movs	r3, #1
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	e010      	b.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d902      	bls.n	8005846 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005840:	2303      	movs	r3, #3
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e00a      	b.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b80      	cmp	r3, #128	; 0x80
 800584a:	d102      	bne.n	8005852 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800584c:	2302      	movs	r3, #2
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	e004      	b.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d101      	bne.n	800585c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005858:	2301      	movs	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 0207 	bic.w	r2, r3, #7
 8005864:	4909      	ldr	r1, [pc, #36]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800586c:	4b07      	ldr	r3, [pc, #28]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d001      	beq.n	800587e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000
 800588c:	40022000 	.word	0x40022000

08005890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005898:	2300      	movs	r3, #0
 800589a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800589c:	2300      	movs	r3, #0
 800589e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d041      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058b4:	d02a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058ba:	d824      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c0:	d008      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c6:	d81e      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d0:	d010      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058d2:	e018      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058d4:	4b86      	ldr	r3, [pc, #536]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a85      	ldr	r2, [pc, #532]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058e0:	e015      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fabb 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058f2:	e00c      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3320      	adds	r3, #32
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fba6 	bl	800604c <RCCEx_PLLSAI2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	74fb      	strb	r3, [r7, #19]
      break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005914:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005922:	4973      	ldr	r1, [pc, #460]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800592a:	e001      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d041      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005944:	d02a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800594a:	d824      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800594c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005950:	d008      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005956:	d81e      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800595c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005960:	d010      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005962:	e018      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005964:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005970:	e015      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fa73 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005982:	e00c      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3320      	adds	r3, #32
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fb5e 	bl	800604c <RCCEx_PLLSAI2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005994:	e003      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	74fb      	strb	r3, [r7, #19]
      break;
 800599a:	e000      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800599c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059a4:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b2:	494f      	ldr	r1, [pc, #316]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059ba:	e001      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a0 	beq.w	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ce:	2300      	movs	r3, #0
 80059d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00d      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ec:	4a40      	ldr	r2, [pc, #256]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6593      	str	r3, [r2, #88]	; 0x58
 80059f4:	4b3e      	ldr	r3, [pc, #248]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a00:	2301      	movs	r3, #1
 8005a02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a04:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3a      	ldr	r2, [pc, #232]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a10:	f7fd fd2c 	bl	800346c <HAL_GetTick>
 8005a14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a16:	e009      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a18:	f7fd fd28 	bl	800346c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d902      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	74fb      	strb	r3, [r7, #19]
        break;
 8005a2a:	e005      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a2c:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0ef      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d15c      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d019      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a5c:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6e:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9a:	f7fd fce7 	bl	800346c <HAL_GetTick>
 8005a9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa0:	e00b      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fd fce3 	bl	800346c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d902      	bls.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ab8:	e006      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ec      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	4904      	ldr	r1, [pc, #16]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ae6:	e009      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	74bb      	strb	r3, [r7, #18]
 8005aec:	e006      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005afc:	7c7b      	ldrb	r3, [r7, #17]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d105      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b02:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	4a9d      	ldr	r2, [pc, #628]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b1a:	4b98      	ldr	r3, [pc, #608]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f023 0203 	bic.w	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	4994      	ldr	r1, [pc, #592]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b3c:	4b8f      	ldr	r3, [pc, #572]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f023 020c 	bic.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	498c      	ldr	r1, [pc, #560]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b5e:	4b87      	ldr	r3, [pc, #540]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	4983      	ldr	r1, [pc, #524]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b80:	4b7e      	ldr	r3, [pc, #504]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	497b      	ldr	r1, [pc, #492]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ba2:	4b76      	ldr	r3, [pc, #472]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	4972      	ldr	r1, [pc, #456]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bc4:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	496a      	ldr	r1, [pc, #424]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005be6:	4b65      	ldr	r3, [pc, #404]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	4961      	ldr	r1, [pc, #388]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c08:	4b5c      	ldr	r3, [pc, #368]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c16:	4959      	ldr	r1, [pc, #356]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c2a:	4b54      	ldr	r3, [pc, #336]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	4950      	ldr	r1, [pc, #320]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c4c:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	4948      	ldr	r1, [pc, #288]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c6e:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	493f      	ldr	r1, [pc, #252]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d028      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9e:	4937      	ldr	r1, [pc, #220]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cae:	d106      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb0:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a31      	ldr	r2, [pc, #196]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cba:	60d3      	str	r3, [r2, #12]
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f8c8 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d028      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cee:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	491f      	ldr	r1, [pc, #124]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d18:	60d3      	str	r3, [r2, #12]
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d24:	d10c      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f899 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5a:	4908      	ldr	r1, [pc, #32]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d6a:	d109      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a02      	ldr	r2, [pc, #8]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
 8005d78:	e014      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f867 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02f      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005db0:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dbe:	4928      	ldr	r1, [pc, #160]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dce:	d10d      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	2102      	movs	r1, #2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f844 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d014      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	74bb      	strb	r3, [r7, #18]
 8005dea:	e011      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3320      	adds	r3, #32
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f925 	bl	800604c <RCCEx_PLLSAI2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e06:	7cfb      	ldrb	r3, [r7, #19]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2a:	490d      	ldr	r1, [pc, #52]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e4e:	4904      	ldr	r1, [pc, #16]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e56:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40021000 	.word	0x40021000

08005e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e72:	4b75      	ldr	r3, [pc, #468]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d018      	beq.n	8005eb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e7e:	4b72      	ldr	r3, [pc, #456]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0203 	and.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d10d      	bne.n	8005eaa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
       ||
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e96:	4b6c      	ldr	r3, [pc, #432]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d047      	beq.n	8005f3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	e044      	b.n	8005f3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d018      	beq.n	8005eea <RCCEx_PLLSAI1_Config+0x86>
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d825      	bhi.n	8005f08 <RCCEx_PLLSAI1_Config+0xa4>
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d002      	beq.n	8005ec6 <RCCEx_PLLSAI1_Config+0x62>
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d009      	beq.n	8005ed8 <RCCEx_PLLSAI1_Config+0x74>
 8005ec4:	e020      	b.n	8005f08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ec6:	4b60      	ldr	r3, [pc, #384]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11d      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed6:	e01a      	b.n	8005f0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ed8:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee8:	e013      	b.n	8005f12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eea:	4b57      	ldr	r3, [pc, #348]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10f      	bne.n	8005f16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ef6:	4b54      	ldr	r3, [pc, #336]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f06:	e006      	b.n	8005f16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0c:	e004      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10d      	bne.n	8005f3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f1e:	4b4a      	ldr	r3, [pc, #296]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	430b      	orrs	r3, r1
 8005f34:	4944      	ldr	r1, [pc, #272]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d17d      	bne.n	800603c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f40:	4b41      	ldr	r3, [pc, #260]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a40      	ldr	r2, [pc, #256]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4c:	f7fd fa8e 	bl	800346c <HAL_GetTick>
 8005f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f52:	e009      	b.n	8005f68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f54:	f7fd fa8a 	bl	800346c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d902      	bls.n	8005f68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	73fb      	strb	r3, [r7, #15]
        break;
 8005f66:	e005      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f68:	4b37      	ldr	r3, [pc, #220]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1ef      	bne.n	8005f54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d160      	bne.n	800603c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d111      	bne.n	8005fa4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f80:	4b31      	ldr	r3, [pc, #196]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6892      	ldr	r2, [r2, #8]
 8005f90:	0211      	lsls	r1, r2, #8
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68d2      	ldr	r2, [r2, #12]
 8005f96:	0912      	lsrs	r2, r2, #4
 8005f98:	0452      	lsls	r2, r2, #17
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	492a      	ldr	r1, [pc, #168]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	610b      	str	r3, [r1, #16]
 8005fa2:	e027      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d112      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005faa:	4b27      	ldr	r3, [pc, #156]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005fb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6892      	ldr	r2, [r2, #8]
 8005fba:	0211      	lsls	r1, r2, #8
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6912      	ldr	r2, [r2, #16]
 8005fc0:	0852      	lsrs	r2, r2, #1
 8005fc2:	3a01      	subs	r2, #1
 8005fc4:	0552      	lsls	r2, r2, #21
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	491f      	ldr	r1, [pc, #124]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	610b      	str	r3, [r1, #16]
 8005fce:	e011      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6892      	ldr	r2, [r2, #8]
 8005fe0:	0211      	lsls	r1, r2, #8
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6952      	ldr	r2, [r2, #20]
 8005fe6:	0852      	lsrs	r2, r2, #1
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	0652      	lsls	r2, r2, #25
 8005fec:	430a      	orrs	r2, r1
 8005fee:	4916      	ldr	r1, [pc, #88]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ff4:	4b14      	ldr	r3, [pc, #80]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a13      	ldr	r2, [pc, #76]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ffe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fa34 	bl	800346c <HAL_GetTick>
 8006004:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006006:	e009      	b.n	800601c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006008:	f7fd fa30 	bl	800346c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d902      	bls.n	800601c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
          break;
 800601a:	e005      	b.n	8006028 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0ef      	beq.n	8006008 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	4904      	ldr	r1, [pc, #16]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40021000 	.word	0x40021000

0800604c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800605a:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006066:	4b67      	ldr	r3, [pc, #412]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0203 	and.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d10d      	bne.n	8006092 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
       ||
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800607e:	4b61      	ldr	r3, [pc, #388]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
       ||
 800608e:	429a      	cmp	r2, r3
 8006090:	d047      	beq.n	8006122 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
 8006096:	e044      	b.n	8006122 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d018      	beq.n	80060d2 <RCCEx_PLLSAI2_Config+0x86>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d825      	bhi.n	80060f0 <RCCEx_PLLSAI2_Config+0xa4>
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d002      	beq.n	80060ae <RCCEx_PLLSAI2_Config+0x62>
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d009      	beq.n	80060c0 <RCCEx_PLLSAI2_Config+0x74>
 80060ac:	e020      	b.n	80060f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060ae:	4b55      	ldr	r3, [pc, #340]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11d      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060be:	e01a      	b.n	80060f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d0:	e013      	b.n	80060fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060d2:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10f      	bne.n	80060fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060de:	4b49      	ldr	r3, [pc, #292]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060ee:	e006      	b.n	80060fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	e004      	b.n	8006100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006106:	4b3f      	ldr	r3, [pc, #252]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	3b01      	subs	r3, #1
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	430b      	orrs	r3, r1
 800611c:	4939      	ldr	r1, [pc, #228]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d167      	bne.n	80061f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a35      	ldr	r2, [pc, #212]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800612e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fd f99a 	bl	800346c <HAL_GetTick>
 8006138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800613a:	e009      	b.n	8006150 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800613c:	f7fd f996 	bl	800346c <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d902      	bls.n	8006150 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	73fb      	strb	r3, [r7, #15]
        break;
 800614e:	e005      	b.n	800615c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006150:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ef      	bne.n	800613c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d14a      	bne.n	80061f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d111      	bne.n	800618c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006168:	4b26      	ldr	r3, [pc, #152]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6892      	ldr	r2, [r2, #8]
 8006178:	0211      	lsls	r1, r2, #8
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68d2      	ldr	r2, [r2, #12]
 800617e:	0912      	lsrs	r2, r2, #4
 8006180:	0452      	lsls	r2, r2, #17
 8006182:	430a      	orrs	r2, r1
 8006184:	491f      	ldr	r1, [pc, #124]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006186:	4313      	orrs	r3, r2
 8006188:	614b      	str	r3, [r1, #20]
 800618a:	e011      	b.n	80061b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800618c:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006194:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6892      	ldr	r2, [r2, #8]
 800619c:	0211      	lsls	r1, r2, #8
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6912      	ldr	r2, [r2, #16]
 80061a2:	0852      	lsrs	r2, r2, #1
 80061a4:	3a01      	subs	r2, #1
 80061a6:	0652      	lsls	r2, r2, #25
 80061a8:	430a      	orrs	r2, r1
 80061aa:	4916      	ldr	r1, [pc, #88]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061b0:	4b14      	ldr	r3, [pc, #80]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a13      	ldr	r2, [pc, #76]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fd f956 	bl	800346c <HAL_GetTick>
 80061c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061c2:	e009      	b.n	80061d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061c4:	f7fd f952 	bl	800346c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d902      	bls.n	80061d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	73fb      	strb	r3, [r7, #15]
          break;
 80061d6:	e005      	b.n	80061e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0ef      	beq.n	80061c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	4904      	ldr	r1, [pc, #16]	; (8006204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000

08006208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e049      	b.n	80062ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f841 	bl	80062b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f000 f9f8 	bl	800663c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e04f      	b.n	8006384 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a23      	ldr	r2, [pc, #140]	; (8006390 <HAL_TIM_Base_Start_IT+0xc4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d018      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <HAL_TIM_Base_Start_IT+0xc8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1e      	ldr	r2, [pc, #120]	; (8006398 <HAL_TIM_Base_Start_IT+0xcc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_TIM_Base_Start_IT+0xd0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1b      	ldr	r2, [pc, #108]	; (80063a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_TIM_Base_Start_IT+0x76>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d115      	bne.n	800636e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d015      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0xb4>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635a:	d011      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636c:	e008      	b.n	8006380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e000      	b.n	8006382 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	00010007 	.word	0x00010007

080063ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0202 	mvn.w	r2, #2
 80063d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f905 	bl	80065fe <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8f7 	bl	80065ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f908 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d122      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d11b      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0204 	mvn.w	r2, #4
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f8db 	bl	80065fe <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8cd 	bl	80065ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f8de 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b08      	cmp	r3, #8
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0208 	mvn.w	r2, #8
 8006480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8b1 	bl	80065fe <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f8a3 	bl	80065ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f8b4 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0210 	mvn.w	r2, #16
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2208      	movs	r2, #8
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f887 	bl	80065fe <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f879 	bl	80065ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f88a 	bl	8006612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0201 	mvn.w	r2, #1
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fc fbd8 	bl	8002ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f914 	bl	8006784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656a:	d10e      	bne.n	800658a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d107      	bne.n	800658a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f907 	bl	8006798 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d10e      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d107      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f838 	bl	8006626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d10e      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d107      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f06f 0220 	mvn.w	r2, #32
 80065da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8c7 	bl	8006770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
	...

0800663c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a40      	ldr	r2, [pc, #256]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665a:	d00f      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <TIM_Base_SetConfig+0x118>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a3c      	ldr	r2, [pc, #240]	; (8006758 <TIM_Base_SetConfig+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3b      	ldr	r2, [pc, #236]	; (800675c <TIM_Base_SetConfig+0x120>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a3a      	ldr	r2, [pc, #232]	; (8006760 <TIM_Base_SetConfig+0x124>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d108      	bne.n	800668e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01f      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669c:	d01b      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a2c      	ldr	r2, [pc, #176]	; (8006754 <TIM_Base_SetConfig+0x118>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d017      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <TIM_Base_SetConfig+0x11c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2a      	ldr	r2, [pc, #168]	; (800675c <TIM_Base_SetConfig+0x120>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a29      	ldr	r2, [pc, #164]	; (8006760 <TIM_Base_SetConfig+0x124>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a28      	ldr	r2, [pc, #160]	; (8006764 <TIM_Base_SetConfig+0x128>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a27      	ldr	r2, [pc, #156]	; (8006768 <TIM_Base_SetConfig+0x12c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_Base_SetConfig+0x9a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <TIM_Base_SetConfig+0x130>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <TIM_Base_SetConfig+0x114>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00f      	beq.n	8006734 <TIM_Base_SetConfig+0xf8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a12      	ldr	r2, [pc, #72]	; (8006760 <TIM_Base_SetConfig+0x124>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_Base_SetConfig+0xf8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a11      	ldr	r2, [pc, #68]	; (8006764 <TIM_Base_SetConfig+0x128>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_Base_SetConfig+0xf8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <TIM_Base_SetConfig+0x12c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_Base_SetConfig+0xf8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a0f      	ldr	r2, [pc, #60]	; (800676c <TIM_Base_SetConfig+0x130>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d103      	bne.n	800673c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	615a      	str	r2, [r3, #20]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40013400 	.word	0x40013400
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e040      	b.n	8006840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fc fb28 	bl	8002e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	; 0x24
 80067d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fcd2 	bl	8007194 <UART_SetConfig>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e022      	b.n	8006840 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 ff7e 	bl	8007704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f805 	bl	8007848 <UART_CheckIdleState>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	2b20      	cmp	r3, #32
 800685e:	f040 8082 	bne.w	8006966 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_UART_Transmit+0x26>
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e07a      	b.n	8006968 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UART_Transmit+0x38>
 800687c:	2302      	movs	r3, #2
 800687e:	e073      	b.n	8006968 <HAL_UART_Transmit+0x120>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2221      	movs	r2, #33	; 0x21
 8006894:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006896:	f7fc fde9 	bl	800346c <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	88fa      	ldrh	r2, [r7, #6]
 80068a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b4:	d108      	bne.n	80068c8 <HAL_UART_Transmit+0x80>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e003      	b.n	80068d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80068d8:	e02d      	b.n	8006936 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fff8 	bl	80078da <UART_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e039      	b.n	8006968 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006906:	b292      	uxth	r2, r2
 8006908:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	3302      	adds	r3, #2
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e008      	b.n	8006924 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	b292      	uxth	r2, r2
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	3301      	adds	r3, #1
 8006922:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1cb      	bne.n	80068da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2200      	movs	r2, #0
 800694a:	2140      	movs	r1, #64	; 0x40
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 ffc4 	bl	80078da <UART_WaitOnFlagUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e005      	b.n	8006968 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006970:	b480      	push	{r7}
 8006972:	b08b      	sub	sp, #44	; 0x2c
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006982:	2b20      	cmp	r3, #32
 8006984:	d156      	bne.n	8006a34 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_UART_Transmit_IT+0x22>
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e04f      	b.n	8006a36 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Transmit_IT+0x34>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e048      	b.n	8006a36 <HAL_UART_Transmit_IT+0xc6>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2221      	movs	r2, #33	; 0x21
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069de:	d107      	bne.n	80069f0 <HAL_UART_Transmit_IT+0x80>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d103      	bne.n	80069f0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <HAL_UART_Transmit_IT+0xd4>)
 80069ec:	669a      	str	r2, [r3, #104]	; 0x68
 80069ee:	e002      	b.n	80069f6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <HAL_UART_Transmit_IT+0xd8>)
 80069f4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e000      	b.n	8006a36 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
  }
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	372c      	adds	r7, #44	; 0x2c
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	08008113 	.word	0x08008113
 8006a48:	0800805b 	.word	0x0800805b

08006a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d142      	bne.n	8006ae8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_UART_Receive_IT+0x22>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e03b      	b.n	8006aea <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_UART_Receive_IT+0x34>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e034      	b.n	8006aea <HAL_UART_Receive_IT+0x9e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_UART_Receive_IT+0xa8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01f      	beq.n	8006ad8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 ffc0 	bl	8007a64 <UART_Start_Receive_IT>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	e000      	b.n	8006aea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3728      	adds	r7, #40	; 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40008000 	.word	0x40008000

08006af8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d142      	bne.n	8006b94 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_UART_Receive_DMA+0x22>
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e03b      	b.n	8006b96 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_UART_Receive_DMA+0x34>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e034      	b.n	8006b96 <HAL_UART_Receive_DMA+0x9e>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_UART_Receive_DMA+0xa8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01f      	beq.n	8006b84 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e6      	bne.n	8006b52 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 f834 	bl	8007bf8 <UART_Start_Receive_DMA>
 8006b90:	4603      	mov	r3, r0
 8006b92:	e000      	b.n	8006b96 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3728      	adds	r7, #40	; 0x28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40008000 	.word	0x40008000

08006ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b0ba      	sub	sp, #232	; 0xe8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bce:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d115      	bne.n	8006c0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 82a6 	beq.w	800714e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
      }
      return;
 8006c0a:	e2a0      	b.n	800714e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8117 	beq.w	8006e44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c26:	4b85      	ldr	r3, [pc, #532]	; (8006e3c <HAL_UART_IRQHandler+0x298>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 810a 	beq.w	8006e44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d011      	beq.n	8006c60 <HAL_UART_IRQHandler+0xbc>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c56:	f043 0201 	orr.w	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d011      	beq.n	8006c90 <HAL_UART_IRQHandler+0xec>
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d011      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x11c>
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2204      	movs	r2, #4
 8006cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb6:	f043 0202 	orr.w	r2, r3, #2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d017      	beq.n	8006cfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2208      	movs	r2, #8
 8006cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf2:	f043 0208 	orr.w	r2, r3, #8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d012      	beq.n	8006d2e <HAL_UART_IRQHandler+0x18a>
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00c      	beq.n	8006d2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 820c 	beq.w	8007152 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00d      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d005      	beq.n	8006d86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d04f      	beq.n	8006e26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f802 	bl	8007d90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d141      	bne.n	8006e1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1d9      	bne.n	8006d9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d013      	beq.n	8006e16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <HAL_UART_IRQHandler+0x29c>)
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fc fd9e 	bl	800393c <HAL_DMA_Abort_IT>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d017      	beq.n	8006e36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	e00f      	b.n	8006e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9a6 	bl	8007168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e00b      	b.n	8006e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9a2 	bl	8007168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	e007      	b.n	8006e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f99e 	bl	8007168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e34:	e18d      	b.n	8007152 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	bf00      	nop
    return;
 8006e38:	e18b      	b.n	8007152 <HAL_UART_IRQHandler+0x5ae>
 8006e3a:	bf00      	nop
 8006e3c:	04000120 	.word	0x04000120
 8006e40:	0800802f 	.word	0x0800802f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f040 8146 	bne.w	80070da <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 813f 	beq.w	80070da <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8138 	beq.w	80070da <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b40      	cmp	r3, #64	; 0x40
 8006e7e:	f040 80b4 	bne.w	8006fea <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 815f 	beq.w	8007156 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	f080 8157 	bcs.w	8007156 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 8085 	bne.w	8006fce <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ef2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1da      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e1      	bne.n	8006f0e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e3      	bne.n	8006f4a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fb2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fc fc79 	bl	80038c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8ca 	bl	800717c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe8:	e0b5      	b.n	8007156 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80a7 	beq.w	800715a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800700c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80a2 	beq.w	800715a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800702a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
 800703a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800703e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e4      	bne.n	8007016 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	623b      	str	r3, [r7, #32]
   return(result);
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007070:	633a      	str	r2, [r7, #48]	; 0x30
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e3      	bne.n	800704c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e4      	bne.n	8007096 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f852 	bl	800717c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d8:	e03f      	b.n	800715a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00e      	beq.n	8007104 <HAL_UART_IRQHandler+0x560>
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f9f2 	bl	80084e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007102:	e02d      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00e      	beq.n	800712e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01c      	beq.n	800715e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
    }
    return;
 800712c:	e017      	b.n	800715e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d012      	beq.n	8007160 <HAL_UART_IRQHandler+0x5bc>
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f843 	bl	80081d2 <UART_EndTransmit_IT>
    return;
 800714c:	e008      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
      return;
 800714e:	bf00      	nop
 8007150:	e006      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007152:	bf00      	nop
 8007154:	e004      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
      return;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_UART_IRQHandler+0x5bc>
    return;
 800715e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007160:	37e8      	adds	r7, #232	; 0xe8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007198:	b08a      	sub	sp, #40	; 0x28
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4ba4      	ldr	r3, [pc, #656]	; (8007454 <UART_SetConfig+0x2c0>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a99      	ldr	r2, [pc, #612]	; (8007458 <UART_SetConfig+0x2c4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fc:	4313      	orrs	r3, r2
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007210:	430a      	orrs	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a90      	ldr	r2, [pc, #576]	; (800745c <UART_SetConfig+0x2c8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d126      	bne.n	800726c <UART_SetConfig+0xd8>
 800721e:	4b90      	ldr	r3, [pc, #576]	; (8007460 <UART_SetConfig+0x2cc>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d81b      	bhi.n	8007264 <UART_SetConfig+0xd0>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0xa0>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007245 	.word	0x08007245
 8007238:	08007255 	.word	0x08007255
 800723c:	0800724d 	.word	0x0800724d
 8007240:	0800725d 	.word	0x0800725d
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e116      	b.n	800747a <UART_SetConfig+0x2e6>
 800724c:	2302      	movs	r3, #2
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007252:	e112      	b.n	800747a <UART_SetConfig+0x2e6>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725a:	e10e      	b.n	800747a <UART_SetConfig+0x2e6>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007262:	e10a      	b.n	800747a <UART_SetConfig+0x2e6>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e106      	b.n	800747a <UART_SetConfig+0x2e6>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a7c      	ldr	r2, [pc, #496]	; (8007464 <UART_SetConfig+0x2d0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d138      	bne.n	80072e8 <UART_SetConfig+0x154>
 8007276:	4b7a      	ldr	r3, [pc, #488]	; (8007460 <UART_SetConfig+0x2cc>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f003 030c 	and.w	r3, r3, #12
 8007280:	2b0c      	cmp	r3, #12
 8007282:	d82d      	bhi.n	80072e0 <UART_SetConfig+0x14c>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0xf8>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072c1 	.word	0x080072c1
 8007290:	080072e1 	.word	0x080072e1
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072e1 	.word	0x080072e1
 800729c:	080072d1 	.word	0x080072d1
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072e1 	.word	0x080072e1
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072e1 	.word	0x080072e1
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	2300      	movs	r3, #0
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c6:	e0d8      	b.n	800747a <UART_SetConfig+0x2e6>
 80072c8:	2302      	movs	r3, #2
 80072ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ce:	e0d4      	b.n	800747a <UART_SetConfig+0x2e6>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d6:	e0d0      	b.n	800747a <UART_SetConfig+0x2e6>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072de:	e0cc      	b.n	800747a <UART_SetConfig+0x2e6>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e6:	e0c8      	b.n	800747a <UART_SetConfig+0x2e6>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <UART_SetConfig+0x2d4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d125      	bne.n	800733e <UART_SetConfig+0x1aa>
 80072f2:	4b5b      	ldr	r3, [pc, #364]	; (8007460 <UART_SetConfig+0x2cc>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072fc:	2b30      	cmp	r3, #48	; 0x30
 80072fe:	d016      	beq.n	800732e <UART_SetConfig+0x19a>
 8007300:	2b30      	cmp	r3, #48	; 0x30
 8007302:	d818      	bhi.n	8007336 <UART_SetConfig+0x1a2>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d00a      	beq.n	800731e <UART_SetConfig+0x18a>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d814      	bhi.n	8007336 <UART_SetConfig+0x1a2>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <UART_SetConfig+0x182>
 8007310:	2b10      	cmp	r3, #16
 8007312:	d008      	beq.n	8007326 <UART_SetConfig+0x192>
 8007314:	e00f      	b.n	8007336 <UART_SetConfig+0x1a2>
 8007316:	2300      	movs	r3, #0
 8007318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731c:	e0ad      	b.n	800747a <UART_SetConfig+0x2e6>
 800731e:	2302      	movs	r3, #2
 8007320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007324:	e0a9      	b.n	800747a <UART_SetConfig+0x2e6>
 8007326:	2304      	movs	r3, #4
 8007328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732c:	e0a5      	b.n	800747a <UART_SetConfig+0x2e6>
 800732e:	2308      	movs	r3, #8
 8007330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007334:	e0a1      	b.n	800747a <UART_SetConfig+0x2e6>
 8007336:	2310      	movs	r3, #16
 8007338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733c:	e09d      	b.n	800747a <UART_SetConfig+0x2e6>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4a      	ldr	r2, [pc, #296]	; (800746c <UART_SetConfig+0x2d8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d125      	bne.n	8007394 <UART_SetConfig+0x200>
 8007348:	4b45      	ldr	r3, [pc, #276]	; (8007460 <UART_SetConfig+0x2cc>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007352:	2bc0      	cmp	r3, #192	; 0xc0
 8007354:	d016      	beq.n	8007384 <UART_SetConfig+0x1f0>
 8007356:	2bc0      	cmp	r3, #192	; 0xc0
 8007358:	d818      	bhi.n	800738c <UART_SetConfig+0x1f8>
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d00a      	beq.n	8007374 <UART_SetConfig+0x1e0>
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d814      	bhi.n	800738c <UART_SetConfig+0x1f8>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <UART_SetConfig+0x1d8>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d008      	beq.n	800737c <UART_SetConfig+0x1e8>
 800736a:	e00f      	b.n	800738c <UART_SetConfig+0x1f8>
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007372:	e082      	b.n	800747a <UART_SetConfig+0x2e6>
 8007374:	2302      	movs	r3, #2
 8007376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737a:	e07e      	b.n	800747a <UART_SetConfig+0x2e6>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007382:	e07a      	b.n	800747a <UART_SetConfig+0x2e6>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738a:	e076      	b.n	800747a <UART_SetConfig+0x2e6>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007392:	e072      	b.n	800747a <UART_SetConfig+0x2e6>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a35      	ldr	r2, [pc, #212]	; (8007470 <UART_SetConfig+0x2dc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d12a      	bne.n	80073f4 <UART_SetConfig+0x260>
 800739e:	4b30      	ldr	r3, [pc, #192]	; (8007460 <UART_SetConfig+0x2cc>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ac:	d01a      	beq.n	80073e4 <UART_SetConfig+0x250>
 80073ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b2:	d81b      	bhi.n	80073ec <UART_SetConfig+0x258>
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b8:	d00c      	beq.n	80073d4 <UART_SetConfig+0x240>
 80073ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073be:	d815      	bhi.n	80073ec <UART_SetConfig+0x258>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <UART_SetConfig+0x238>
 80073c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c8:	d008      	beq.n	80073dc <UART_SetConfig+0x248>
 80073ca:	e00f      	b.n	80073ec <UART_SetConfig+0x258>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d2:	e052      	b.n	800747a <UART_SetConfig+0x2e6>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073da:	e04e      	b.n	800747a <UART_SetConfig+0x2e6>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e2:	e04a      	b.n	800747a <UART_SetConfig+0x2e6>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ea:	e046      	b.n	800747a <UART_SetConfig+0x2e6>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f2:	e042      	b.n	800747a <UART_SetConfig+0x2e6>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a17      	ldr	r2, [pc, #92]	; (8007458 <UART_SetConfig+0x2c4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d13a      	bne.n	8007474 <UART_SetConfig+0x2e0>
 80073fe:	4b18      	ldr	r3, [pc, #96]	; (8007460 <UART_SetConfig+0x2cc>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740c:	d01a      	beq.n	8007444 <UART_SetConfig+0x2b0>
 800740e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007412:	d81b      	bhi.n	800744c <UART_SetConfig+0x2b8>
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007418:	d00c      	beq.n	8007434 <UART_SetConfig+0x2a0>
 800741a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741e:	d815      	bhi.n	800744c <UART_SetConfig+0x2b8>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <UART_SetConfig+0x298>
 8007424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007428:	d008      	beq.n	800743c <UART_SetConfig+0x2a8>
 800742a:	e00f      	b.n	800744c <UART_SetConfig+0x2b8>
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007432:	e022      	b.n	800747a <UART_SetConfig+0x2e6>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743a:	e01e      	b.n	800747a <UART_SetConfig+0x2e6>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e01a      	b.n	800747a <UART_SetConfig+0x2e6>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e016      	b.n	800747a <UART_SetConfig+0x2e6>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e012      	b.n	800747a <UART_SetConfig+0x2e6>
 8007454:	efff69f3 	.word	0xefff69f3
 8007458:	40008000 	.word	0x40008000
 800745c:	40013800 	.word	0x40013800
 8007460:	40021000 	.word	0x40021000
 8007464:	40004400 	.word	0x40004400
 8007468:	40004800 	.word	0x40004800
 800746c:	40004c00 	.word	0x40004c00
 8007470:	40005000 	.word	0x40005000
 8007474:	2310      	movs	r3, #16
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a9f      	ldr	r2, [pc, #636]	; (80076fc <UART_SetConfig+0x568>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d17a      	bne.n	800757a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007488:	2b08      	cmp	r3, #8
 800748a:	d824      	bhi.n	80074d6 <UART_SetConfig+0x342>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0x300>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074d7 	.word	0x080074d7
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074c7 	.word	0x080074c7
 80074a8:	080074d7 	.word	0x080074d7
 80074ac:	080074d7 	.word	0x080074d7
 80074b0:	080074d7 	.word	0x080074d7
 80074b4:	080074cf 	.word	0x080074cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b8:	f7fe f92c 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80074bc:	61f8      	str	r0, [r7, #28]
        break;
 80074be:	e010      	b.n	80074e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c0:	4b8f      	ldr	r3, [pc, #572]	; (8007700 <UART_SetConfig+0x56c>)
 80074c2:	61fb      	str	r3, [r7, #28]
        break;
 80074c4:	e00d      	b.n	80074e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c6:	f7fe f88d 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80074ca:	61f8      	str	r0, [r7, #28]
        break;
 80074cc:	e009      	b.n	80074e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	61fb      	str	r3, [r7, #28]
        break;
 80074d4:	e005      	b.n	80074e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80fb 	beq.w	80076e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d305      	bcc.n	8007506 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	429a      	cmp	r2, r3
 8007504:	d903      	bls.n	800750e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800750c:	e0e8      	b.n	80076e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2200      	movs	r2, #0
 8007512:	461c      	mov	r4, r3
 8007514:	4615      	mov	r5, r2
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	022b      	lsls	r3, r5, #8
 8007520:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007524:	0222      	lsls	r2, r4, #8
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	6849      	ldr	r1, [r1, #4]
 800752a:	0849      	lsrs	r1, r1, #1
 800752c:	2000      	movs	r0, #0
 800752e:	4688      	mov	r8, r1
 8007530:	4681      	mov	r9, r0
 8007532:	eb12 0a08 	adds.w	sl, r2, r8
 8007536:	eb43 0b09 	adc.w	fp, r3, r9
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	603b      	str	r3, [r7, #0]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007548:	4650      	mov	r0, sl
 800754a:	4659      	mov	r1, fp
 800754c:	f7f9 fbac 	bl	8000ca8 <__aeabi_uldivmod>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4613      	mov	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755e:	d308      	bcc.n	8007572 <UART_SetConfig+0x3de>
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007566:	d204      	bcs.n	8007572 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	e0b6      	b.n	80076e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007578:	e0b2      	b.n	80076e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007582:	d15e      	bne.n	8007642 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007588:	2b08      	cmp	r3, #8
 800758a:	d828      	bhi.n	80075de <UART_SetConfig+0x44a>
 800758c:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0x400>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075b9 	.word	0x080075b9
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	080075df 	.word	0x080075df
 80075a4:	080075cf 	.word	0x080075cf
 80075a8:	080075df 	.word	0x080075df
 80075ac:	080075df 	.word	0x080075df
 80075b0:	080075df 	.word	0x080075df
 80075b4:	080075d7 	.word	0x080075d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b8:	f7fe f8ac 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 80075bc:	61f8      	str	r0, [r7, #28]
        break;
 80075be:	e014      	b.n	80075ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c0:	f7fe f8be 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 80075c4:	61f8      	str	r0, [r7, #28]
        break;
 80075c6:	e010      	b.n	80075ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c8:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <UART_SetConfig+0x56c>)
 80075ca:	61fb      	str	r3, [r7, #28]
        break;
 80075cc:	e00d      	b.n	80075ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ce:	f7fe f809 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80075d2:	61f8      	str	r0, [r7, #28]
        break;
 80075d4:	e009      	b.n	80075ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075da:	61fb      	str	r3, [r7, #28]
        break;
 80075dc:	e005      	b.n	80075ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d077      	beq.n	80076e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	005a      	lsls	r2, r3, #1
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	441a      	add	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	2b0f      	cmp	r3, #15
 800760a:	d916      	bls.n	800763a <UART_SetConfig+0x4a6>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d212      	bcs.n	800763a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f023 030f 	bic.w	r3, r3, #15
 800761c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	b29b      	uxth	r3, r3
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	b29a      	uxth	r2, r3
 800762a:	8afb      	ldrh	r3, [r7, #22]
 800762c:	4313      	orrs	r3, r2
 800762e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	8afa      	ldrh	r2, [r7, #22]
 8007636:	60da      	str	r2, [r3, #12]
 8007638:	e052      	b.n	80076e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007640:	e04e      	b.n	80076e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007646:	2b08      	cmp	r3, #8
 8007648:	d827      	bhi.n	800769a <UART_SetConfig+0x506>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <UART_SetConfig+0x4bc>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007675 	.word	0x08007675
 8007654:	0800767d 	.word	0x0800767d
 8007658:	08007685 	.word	0x08007685
 800765c:	0800769b 	.word	0x0800769b
 8007660:	0800768b 	.word	0x0800768b
 8007664:	0800769b 	.word	0x0800769b
 8007668:	0800769b 	.word	0x0800769b
 800766c:	0800769b 	.word	0x0800769b
 8007670:	08007693 	.word	0x08007693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7fe f84e 	bl	8005714 <HAL_RCC_GetPCLK1Freq>
 8007678:	61f8      	str	r0, [r7, #28]
        break;
 800767a:	e014      	b.n	80076a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fe f860 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 8007680:	61f8      	str	r0, [r7, #28]
        break;
 8007682:	e010      	b.n	80076a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007684:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <UART_SetConfig+0x56c>)
 8007686:	61fb      	str	r3, [r7, #28]
        break;
 8007688:	e00d      	b.n	80076a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768a:	f7fd ffab 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 800768e:	61f8      	str	r0, [r7, #28]
        break;
 8007690:	e009      	b.n	80076a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007696:	61fb      	str	r3, [r7, #28]
        break;
 8007698:	e005      	b.n	80076a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076a4:	bf00      	nop
    }

    if (pclk != 0U)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d019      	beq.n	80076e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	085a      	lsrs	r2, r3, #1
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	d909      	bls.n	80076da <UART_SetConfig+0x546>
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076cc:	d205      	bcs.n	80076da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	e002      	b.n	80076e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fa:	bf00      	nop
 80076fc:	40008000 	.word	0x40008000
 8007700:	00f42400 	.word	0x00f42400

08007704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01a      	beq.n	800781a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007802:	d10a      	bne.n	800781a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af02      	add	r7, sp, #8
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007858:	f7fb fe08 	bl	800346c <HAL_GetTick>
 800785c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d10e      	bne.n	800788a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800786c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f82d 	bl	80078da <UART_WaitOnFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e023      	b.n	80078d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b04      	cmp	r3, #4
 8007896:	d10e      	bne.n	80078b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f817 	bl	80078da <UART_WaitOnFlagUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e00d      	b.n	80078d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b09c      	sub	sp, #112	; 0x70
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	4613      	mov	r3, r2
 80078e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ea:	e0a5      	b.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	f000 80a1 	beq.w	8007a38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fb fdb9 	bl	800346c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <UART_WaitOnFlagUntilTimeout+0x32>
 8007906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007908:	2b00      	cmp	r3, #0
 800790a:	d13e      	bne.n	800798a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007920:	667b      	str	r3, [r7, #100]	; 0x64
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800792c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007930:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e6      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	663b      	str	r3, [r7, #96]	; 0x60
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800795e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007960:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800796c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e5      	bne.n	800793e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e067      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d04f      	beq.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a6:	d147      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
 80079d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	613b      	str	r3, [r7, #16]
   return(result);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a04:	623a      	str	r2, [r7, #32]
 8007a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	69f9      	ldr	r1, [r7, #28]
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e5      	bne.n	80079e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e010      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69da      	ldr	r2, [r3, #28]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4013      	ands	r3, r2
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f43f af4a 	beq.w	80078ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3770      	adds	r7, #112	; 0x70
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b097      	sub	sp, #92	; 0x5c
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	88fa      	ldrh	r2, [r7, #6]
 8007a84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	d10e      	bne.n	8007ab6 <UART_Start_Receive_IT+0x52>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <UART_Start_Receive_IT+0x48>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aaa:	e02d      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	22ff      	movs	r2, #255	; 0xff
 8007ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ab4:	e028      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10d      	bne.n	8007ada <UART_Start_Receive_IT+0x76>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <UART_Start_Receive_IT+0x6c>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	22ff      	movs	r2, #255	; 0xff
 8007aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ace:	e01b      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	227f      	movs	r2, #127	; 0x7f
 8007ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ad8:	e016      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ae2:	d10d      	bne.n	8007b00 <UART_Start_Receive_IT+0x9c>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <UART_Start_Receive_IT+0x92>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	227f      	movs	r2, #127	; 0x7f
 8007af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007af4:	e008      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	223f      	movs	r2, #63	; 0x3f
 8007afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007afe:	e003      	b.n	8007b08 <UART_Start_Receive_IT+0xa4>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2222      	movs	r2, #34	; 0x22
 8007b14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d107      	bne.n	8007b64 <UART_Start_Receive_IT+0x100>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a24      	ldr	r2, [pc, #144]	; (8007bf0 <UART_Start_Receive_IT+0x18c>)
 8007b60:	665a      	str	r2, [r3, #100]	; 0x64
 8007b62:	e002      	b.n	8007b6a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a23      	ldr	r2, [pc, #140]	; (8007bf4 <UART_Start_Receive_IT+0x190>)
 8007b68:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d019      	beq.n	8007bae <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_Start_Receive_IT+0x116>
 8007bac:	e018      	b.n	8007be0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f043 0320 	orr.w	r3, r3, #32
 8007bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e6      	bne.n	8007bae <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	375c      	adds	r7, #92	; 0x5c
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	08008387 	.word	0x08008387
 8007bf4:	08008227 	.word	0x08008227

08007bf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2222      	movs	r2, #34	; 0x22
 8007c20:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d02b      	beq.n	8007c82 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	4a42      	ldr	r2, [pc, #264]	; (8007d38 <UART_Start_Receive_DMA+0x140>)
 8007c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	4a41      	ldr	r2, [pc, #260]	; (8007d3c <UART_Start_Receive_DMA+0x144>)
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <UART_Start_Receive_DMA+0x148>)
 8007c40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	2200      	movs	r2, #0
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3324      	adds	r3, #36	; 0x24
 8007c54:	4619      	mov	r1, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	f7fb fdcf 	bl	8003800 <HAL_DMA_Start_IT>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00c      	beq.n	8007c82 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e055      	b.n	8007d2e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d018      	beq.n	8007cc4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	653b      	str	r3, [r7, #80]	; 0x50
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ce4:	637a      	str	r2, [r7, #52]	; 0x34
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	613b      	str	r3, [r7, #16]
   return(result);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d18:	623a      	str	r2, [r7, #32]
 8007d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	69f9      	ldr	r1, [r7, #28]
 8007d1e:	6a3a      	ldr	r2, [r7, #32]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e5      	bne.n	8007cf8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3758      	adds	r7, #88	; 0x58
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	08007e57 	.word	0x08007e57
 8007d3c:	08007f7b 	.word	0x08007f7b
 8007d40:	08007fb3 	.word	0x08007fb3

08007d44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007d84:	bf00      	nop
 8007d86:	3724      	adds	r7, #36	; 0x24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b095      	sub	sp, #84	; 0x54
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
 8007db8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e6      	bne.n	8007d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d118      	bne.n	8007e38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007e4a:	bf00      	nop
 8007e4c:	3754      	adds	r7, #84	; 0x54
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b09c      	sub	sp, #112	; 0x70
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d170      	bne.n	8007f54 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ecc:	647a      	str	r2, [r7, #68]	; 0x44
 8007ece:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f00:	633a      	str	r2, [r7, #48]	; 0x30
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e5      	bne.n	8007ee0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f16:	2220      	movs	r2, #32
 8007f18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d118      	bne.n	8007f54 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0310 	bic.w	r3, r3, #16
 8007f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d107      	bne.n	8007f6c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f62:	4619      	mov	r1, r3
 8007f64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f66:	f7ff f909 	bl	800717c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f6a:	e002      	b.n	8007f72 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007f6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f6e:	f7fa fb97 	bl	80026a0 <HAL_UART_RxCpltCallback>
}
 8007f72:	bf00      	nop
 8007f74:	3770      	adds	r7, #112	; 0x70
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d109      	bne.n	8007fa4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff f8ed 	bl	800717c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fa2:	e002      	b.n	8007faa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7f9 f98d 	bl	80012c4 <HAL_UART_RxHalfCpltCallback>
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b086      	sub	sp, #24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fc4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d109      	bne.n	8007fee <UART_DMAError+0x3c>
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b21      	cmp	r3, #33	; 0x21
 8007fde:	d106      	bne.n	8007fee <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007fe8:	6978      	ldr	r0, [r7, #20]
 8007fea:	f7ff feab 	bl	8007d44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d109      	bne.n	8008010 <UART_DMAError+0x5e>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b22      	cmp	r3, #34	; 0x22
 8008000:	d106      	bne.n	8008010 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2200      	movs	r2, #0
 8008006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800800a:	6978      	ldr	r0, [r7, #20]
 800800c:	f7ff fec0 	bl	8007d90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008016:	f043 0210 	orr.w	r2, r3, #16
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f7ff f8a1 	bl	8007168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff f88b 	bl	8007168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800805a:	b480      	push	{r7}
 800805c:	b08f      	sub	sp, #60	; 0x3c
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008066:	2b21      	cmp	r3, #33	; 0x21
 8008068:	d14d      	bne.n	8008106 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d132      	bne.n	80080dc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	61fb      	str	r3, [r7, #28]
   return(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008096:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800809a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6979      	ldr	r1, [r7, #20]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	613b      	str	r3, [r7, #16]
   return(result);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e6      	bne.n	80080a8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80080da:	e014      	b.n	8008106 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	b292      	uxth	r2, r2
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008106:	bf00      	nop
 8008108:	373c      	adds	r7, #60	; 0x3c
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008112:	b480      	push	{r7}
 8008114:	b091      	sub	sp, #68	; 0x44
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811e:	2b21      	cmp	r3, #33	; 0x21
 8008120:	d151      	bne.n	80081c6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d132      	bne.n	8008194 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	623b      	str	r3, [r7, #32]
   return(result);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	63bb      	str	r3, [r7, #56]	; 0x38
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
 800814e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e6      	bne.n	800812e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60fb      	str	r3, [r7, #12]
   return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	617b      	str	r3, [r7, #20]
   return(result);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e6      	bne.n	8008160 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008192:	e018      	b.n	80081c6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819c:	881a      	ldrh	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081a6:	b292      	uxth	r2, r2
 80081a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081c6:	bf00      	nop
 80081c8:	3744      	adds	r7, #68	; 0x44
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b088      	sub	sp, #32
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6979      	ldr	r1, [r7, #20]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7f9 ff0b 	bl	8002034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821e:	bf00      	nop
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b096      	sub	sp, #88	; 0x58
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008234:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823c:	2b22      	cmp	r3, #34	; 0x22
 800823e:	f040 8094 	bne.w	800836a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008248:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800824c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825c:	400a      	ands	r2, r1
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d179      	bne.n	800837e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800829e:	653b      	str	r3, [r7, #80]	; 0x50
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a8:	647b      	str	r3, [r7, #68]	; 0x44
 80082aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e6      	bne.n	800828a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	623b      	str	r3, [r7, #32]
   return(result);
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3308      	adds	r3, #8
 80082da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082dc:	633a      	str	r2, [r7, #48]	; 0x30
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e5      	bne.n	80082bc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008300:	2b01      	cmp	r3, #1
 8008302:	d12e      	bne.n	8008362 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60fb      	str	r3, [r7, #12]
   return(result);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0310 	bic.w	r3, r3, #16
 800831e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b10      	cmp	r3, #16
 8008348:	d103      	bne.n	8008352 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2210      	movs	r2, #16
 8008350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fe ff0e 	bl	800717c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008360:	e00d      	b.n	800837e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fa f99c 	bl	80026a0 <HAL_UART_RxCpltCallback>
}
 8008368:	e009      	b.n	800837e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	8b1b      	ldrh	r3, [r3, #24]
 8008370:	b29a      	uxth	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0208 	orr.w	r2, r2, #8
 800837a:	b292      	uxth	r2, r2
 800837c:	831a      	strh	r2, [r3, #24]
}
 800837e:	bf00      	nop
 8008380:	3758      	adds	r7, #88	; 0x58
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b096      	sub	sp, #88	; 0x58
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008394:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839c:	2b22      	cmp	r3, #34	; 0x22
 800839e:	f040 8094 	bne.w	80084ca <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80083b2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80083b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083ba:	4013      	ands	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c6:	1c9a      	adds	r2, r3, #2
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d179      	bne.n	80084de <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008408:	643b      	str	r3, [r7, #64]	; 0x40
 800840a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800840e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	61fb      	str	r3, [r7, #28]
   return(result);
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	64bb      	str	r3, [r7, #72]	; 0x48
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e5      	bne.n	800841c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2220      	movs	r2, #32
 8008454:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008460:	2b01      	cmp	r3, #1
 8008462:	d12e      	bne.n	80084c2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	60bb      	str	r3, [r7, #8]
   return(result);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0310 	bic.w	r3, r3, #16
 800847e:	647b      	str	r3, [r7, #68]	; 0x44
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e6      	bne.n	800846a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b10      	cmp	r3, #16
 80084a8:	d103      	bne.n	80084b2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2210      	movs	r2, #16
 80084b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fe fe5e 	bl	800717c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084c0:	e00d      	b.n	80084de <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fa f8ec 	bl	80026a0 <HAL_UART_RxCpltCallback>
}
 80084c8:	e009      	b.n	80084de <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	8b1b      	ldrh	r3, [r3, #24]
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0208 	orr.w	r2, r2, #8
 80084da:	b292      	uxth	r2, r2
 80084dc:	831a      	strh	r2, [r3, #24]
}
 80084de:	bf00      	nop
 80084e0:	3758      	adds	r7, #88	; 0x58
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <__NVIC_SetPriority>:
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800850c:	2b00      	cmp	r3, #0
 800850e:	db0a      	blt.n	8008526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	490c      	ldr	r1, [pc, #48]	; (8008548 <__NVIC_SetPriority+0x4c>)
 8008516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800851a:	0112      	lsls	r2, r2, #4
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	440b      	add	r3, r1
 8008520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008524:	e00a      	b.n	800853c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	b2da      	uxtb	r2, r3
 800852a:	4908      	ldr	r1, [pc, #32]	; (800854c <__NVIC_SetPriority+0x50>)
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	3b04      	subs	r3, #4
 8008534:	0112      	lsls	r2, r2, #4
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	440b      	add	r3, r1
 800853a:	761a      	strb	r2, [r3, #24]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	e000e100 	.word	0xe000e100
 800854c:	e000ed00 	.word	0xe000ed00

08008550 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <SysTick_Handler+0x1c>)
 8008556:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008558:	f002 fa22 	bl	800a9a0 <xTaskGetSchedulerState>
 800855c:	4603      	mov	r3, r0
 800855e:	2b01      	cmp	r3, #1
 8008560:	d001      	beq.n	8008566 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008562:	f003 f909 	bl	800b778 <xPortSysTickHandler>
  }
}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	e000e010 	.word	0xe000e010

08008570 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008574:	2100      	movs	r1, #0
 8008576:	f06f 0004 	mvn.w	r0, #4
 800857a:	f7ff ffbf 	bl	80084fc <__NVIC_SetPriority>
#endif
}
 800857e:	bf00      	nop
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800858a:	f3ef 8305 	mrs	r3, IPSR
 800858e:	603b      	str	r3, [r7, #0]
  return(result);
 8008590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008596:	f06f 0305 	mvn.w	r3, #5
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	e00c      	b.n	80085b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <osKernelInitialize+0x44>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085a6:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <osKernelInitialize+0x44>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	e002      	b.n	80085b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085b2:	f04f 33ff 	mov.w	r3, #4294967295
 80085b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085b8:	687b      	ldr	r3, [r7, #4]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000d1c 	.word	0x20000d1c

080085cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d2:	f3ef 8305 	mrs	r3, IPSR
 80085d6:	603b      	str	r3, [r7, #0]
  return(result);
 80085d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80085de:	f06f 0305 	mvn.w	r3, #5
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	e010      	b.n	8008608 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <osKernelStart+0x48>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d109      	bne.n	8008602 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085ee:	f7ff ffbf 	bl	8008570 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <osKernelStart+0x48>)
 80085f4:	2202      	movs	r2, #2
 80085f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80085f8:	f001 fd8a 	bl	800a110 <vTaskStartScheduler>
      stat = osOK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	607b      	str	r3, [r7, #4]
 8008600:	e002      	b.n	8008608 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008602:	f04f 33ff 	mov.w	r3, #4294967295
 8008606:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008608:	687b      	ldr	r3, [r7, #4]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000d1c 	.word	0x20000d1c

08008618 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b08e      	sub	sp, #56	; 0x38
 800861c:	af04      	add	r7, sp, #16
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008624:	2300      	movs	r3, #0
 8008626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008628:	f3ef 8305 	mrs	r3, IPSR
 800862c:	617b      	str	r3, [r7, #20]
  return(result);
 800862e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008630:	2b00      	cmp	r3, #0
 8008632:	d17e      	bne.n	8008732 <osThreadNew+0x11a>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d07b      	beq.n	8008732 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800863a:	2380      	movs	r3, #128	; 0x80
 800863c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800863e:	2318      	movs	r3, #24
 8008640:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d045      	beq.n	80086de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <osThreadNew+0x48>
        name = attr->name;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <osThreadNew+0x6e>
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	2b38      	cmp	r3, #56	; 0x38
 8008678:	d805      	bhi.n	8008686 <osThreadNew+0x6e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <osThreadNew+0x72>
        return (NULL);
 8008686:	2300      	movs	r3, #0
 8008688:	e054      	b.n	8008734 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	089b      	lsrs	r3, r3, #2
 8008698:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <osThreadNew+0xa8>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	2b5b      	cmp	r3, #91	; 0x5b
 80086a8:	d90a      	bls.n	80086c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <osThreadNew+0xa8>
        mem = 1;
 80086ba:	2301      	movs	r3, #1
 80086bc:	61bb      	str	r3, [r7, #24]
 80086be:	e010      	b.n	80086e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10c      	bne.n	80086e2 <osThreadNew+0xca>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d108      	bne.n	80086e2 <osThreadNew+0xca>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d104      	bne.n	80086e2 <osThreadNew+0xca>
          mem = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	e001      	b.n	80086e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d110      	bne.n	800870a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086f0:	9202      	str	r2, [sp, #8]
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f001 fb64 	bl	8009dcc <xTaskCreateStatic>
 8008704:	4603      	mov	r3, r0
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	e013      	b.n	8008732 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d110      	bne.n	8008732 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	b29a      	uxth	r2, r3
 8008714:	f107 0310 	add.w	r3, r7, #16
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f001 fbaf 	bl	8009e86 <xTaskCreate>
 8008728:	4603      	mov	r3, r0
 800872a:	2b01      	cmp	r3, #1
 800872c:	d001      	beq.n	8008732 <osThreadNew+0x11a>
            hTask = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008732:	693b      	ldr	r3, [r7, #16]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3728      	adds	r7, #40	; 0x28
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	; 0x28
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874c:	f3ef 8305 	mrs	r3, IPSR
 8008750:	613b      	str	r3, [r7, #16]
  return(result);
 8008752:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008754:	2b00      	cmp	r3, #0
 8008756:	d175      	bne.n	8008844 <osSemaphoreNew+0x108>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d072      	beq.n	8008844 <osSemaphoreNew+0x108>
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d86e      	bhi.n	8008844 <osSemaphoreNew+0x108>
    mem = -1;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d015      	beq.n	800879e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <osSemaphoreNew+0x4c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	2b4f      	cmp	r3, #79	; 0x4f
 8008780:	d902      	bls.n	8008788 <osSemaphoreNew+0x4c>
        mem = 1;
 8008782:	2301      	movs	r3, #1
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	e00c      	b.n	80087a2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d108      	bne.n	80087a2 <osSemaphoreNew+0x66>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <osSemaphoreNew+0x66>
          mem = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
 800879c:	e001      	b.n	80087a2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d04c      	beq.n	8008844 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d128      	bne.n	8008802 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d10a      	bne.n	80087cc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2203      	movs	r2, #3
 80087bc:	9200      	str	r2, [sp, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	2001      	movs	r0, #1
 80087c4:	f000 fb5c 	bl	8008e80 <xQueueGenericCreateStatic>
 80087c8:	61f8      	str	r0, [r7, #28]
 80087ca:	e005      	b.n	80087d8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80087cc:	2203      	movs	r2, #3
 80087ce:	2100      	movs	r1, #0
 80087d0:	2001      	movs	r0, #1
 80087d2:	f000 fbcd 	bl	8008f70 <xQueueGenericCreate>
 80087d6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d022      	beq.n	8008824 <osSemaphoreNew+0xe8>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01f      	beq.n	8008824 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80087e4:	2300      	movs	r3, #0
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	69f8      	ldr	r0, [r7, #28]
 80087ec:	f000 fc88 	bl	8009100 <xQueueGenericSend>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d016      	beq.n	8008824 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80087f6:	69f8      	ldr	r0, [r7, #28]
 80087f8:	f001 f914 	bl	8009a24 <vQueueDelete>
            hSemaphore = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e010      	b.n	8008824 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d108      	bne.n	800881a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	461a      	mov	r2, r3
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fc0a 	bl	800902a <xQueueCreateCountingSemaphoreStatic>
 8008816:	61f8      	str	r0, [r7, #28]
 8008818:	e004      	b.n	8008824 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fc3b 	bl	8009098 <xQueueCreateCountingSemaphore>
 8008822:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00c      	beq.n	8008844 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e001      	b.n	800883c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800883c:	6979      	ldr	r1, [r7, #20]
 800883e:	69f8      	ldr	r0, [r7, #28]
 8008840:	f001 fa3c 	bl	8009cbc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008844:	69fb      	ldr	r3, [r7, #28]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008868:	f06f 0303 	mvn.w	r3, #3
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e039      	b.n	80088e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008870:	f3ef 8305 	mrs	r3, IPSR
 8008874:	60fb      	str	r3, [r7, #12]
  return(result);
 8008876:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008878:	2b00      	cmp	r3, #0
 800887a:	d022      	beq.n	80088c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008882:	f06f 0303 	mvn.w	r3, #3
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e02c      	b.n	80088e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	461a      	mov	r2, r3
 8008894:	2100      	movs	r1, #0
 8008896:	6938      	ldr	r0, [r7, #16]
 8008898:	f001 f844 	bl	8009924 <xQueueReceiveFromISR>
 800889c:	4603      	mov	r3, r0
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d003      	beq.n	80088aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80088a2:	f06f 0302 	mvn.w	r3, #2
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e01c      	b.n	80088e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d019      	beq.n	80088e4 <osSemaphoreAcquire+0x94>
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <osSemaphoreAcquire+0xa0>)
 80088b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	e010      	b.n	80088e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6938      	ldr	r0, [r7, #16]
 80088c6:	f000 ff21 	bl	800970c <xQueueSemaphoreTake>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d009      	beq.n	80088e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80088d6:	f06f 0301 	mvn.w	r3, #1
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	e002      	b.n	80088e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80088de:	f06f 0302 	mvn.w	r3, #2
 80088e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80088e4:	697b      	ldr	r3, [r7, #20]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	e000ed04 	.word	0xe000ed04

080088f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d103      	bne.n	8008912 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800890a:	f06f 0303 	mvn.w	r3, #3
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e02c      	b.n	800896c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008912:	f3ef 8305 	mrs	r3, IPSR
 8008916:	60fb      	str	r3, [r7, #12]
  return(result);
 8008918:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01a      	beq.n	8008954 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800891e:	2300      	movs	r3, #0
 8008920:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008922:	f107 0308 	add.w	r3, r7, #8
 8008926:	4619      	mov	r1, r3
 8008928:	6938      	ldr	r0, [r7, #16]
 800892a:	f000 fd82 	bl	8009432 <xQueueGiveFromISR>
 800892e:	4603      	mov	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d003      	beq.n	800893c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008934:	f06f 0302 	mvn.w	r3, #2
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e017      	b.n	800896c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d014      	beq.n	800896c <osSemaphoreRelease+0x78>
 8008942:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <osSemaphoreRelease+0x84>)
 8008944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	e00b      	b.n	800896c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008954:	2300      	movs	r3, #0
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	6938      	ldr	r0, [r7, #16]
 800895c:	f000 fbd0 	bl	8009100 <xQueueGenericSend>
 8008960:	4603      	mov	r3, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d002      	beq.n	800896c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008966:	f06f 0302 	mvn.w	r3, #2
 800896a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800896c:	697b      	ldr	r3, [r7, #20]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898c:	f3ef 8305 	mrs	r3, IPSR
 8008990:	613b      	str	r3, [r7, #16]
  return(result);
 8008992:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008994:	2b00      	cmp	r3, #0
 8008996:	d15f      	bne.n	8008a58 <osMessageQueueNew+0xdc>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d05c      	beq.n	8008a58 <osMessageQueueNew+0xdc>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d059      	beq.n	8008a58 <osMessageQueueNew+0xdc>
    mem = -1;
 80089a4:	f04f 33ff 	mov.w	r3, #4294967295
 80089a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d029      	beq.n	8008a04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d012      	beq.n	80089de <osMessageQueueNew+0x62>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b4f      	cmp	r3, #79	; 0x4f
 80089be:	d90e      	bls.n	80089de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	fb01 f303 	mul.w	r3, r1, r3
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d302      	bcc.n	80089de <osMessageQueueNew+0x62>
        mem = 1;
 80089d8:	2301      	movs	r3, #1
 80089da:	61bb      	str	r3, [r7, #24]
 80089dc:	e014      	b.n	8008a08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d110      	bne.n	8008a08 <osMessageQueueNew+0x8c>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10c      	bne.n	8008a08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d108      	bne.n	8008a08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <osMessageQueueNew+0x8c>
          mem = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	e001      	b.n	8008a08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d10b      	bne.n	8008a26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	2100      	movs	r1, #0
 8008a18:	9100      	str	r1, [sp, #0]
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fa2f 	bl	8008e80 <xQueueGenericCreateStatic>
 8008a22:	61f8      	str	r0, [r7, #28]
 8008a24:	e008      	b.n	8008a38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fa9d 	bl	8008f70 <xQueueGenericCreate>
 8008a36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e001      	b.n	8008a50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008a50:	6979      	ldr	r1, [r7, #20]
 8008a52:	69f8      	ldr	r0, [r7, #28]
 8008a54:	f001 f932 	bl	8009cbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008a58:	69fb      	ldr	r3, [r7, #28]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4613      	mov	r3, r2
 8008a72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a7c:	f3ef 8305 	mrs	r3, IPSR
 8008a80:	617b      	str	r3, [r7, #20]
  return(result);
 8008a82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d028      	beq.n	8008ada <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <osMessageQueuePut+0x36>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <osMessageQueuePut+0x36>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008a9a:	f06f 0303 	mvn.w	r3, #3
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e038      	b.n	8008b14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008aa6:	f107 0210 	add.w	r2, r7, #16
 8008aaa:	2300      	movs	r3, #0
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f000 fc24 	bl	80092fc <xQueueGenericSendFromISR>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d003      	beq.n	8008ac2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008aba:	f06f 0302 	mvn.w	r3, #2
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	e028      	b.n	8008b14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d025      	beq.n	8008b14 <osMessageQueuePut+0xb0>
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <osMessageQueuePut+0xbc>)
 8008aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	e01c      	b.n	8008b14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <osMessageQueuePut+0x82>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008ae6:	f06f 0303 	mvn.w	r3, #3
 8008aea:	61fb      	str	r3, [r7, #28]
 8008aec:	e012      	b.n	8008b14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008aee:	2300      	movs	r3, #0
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	69b8      	ldr	r0, [r7, #24]
 8008af6:	f000 fb03 	bl	8009100 <xQueueGenericSend>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d009      	beq.n	8008b14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008b06:	f06f 0301 	mvn.w	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e002      	b.n	8008b14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008b0e:	f06f 0302 	mvn.w	r3, #2
 8008b12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b14:	69fb      	ldr	r3, [r7, #28]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b3a:	f3ef 8305 	mrs	r3, IPSR
 8008b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8008b40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d028      	beq.n	8008b98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <osMessageQueueGet+0x34>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <osMessageQueueGet+0x34>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008b58:	f06f 0303 	mvn.w	r3, #3
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	e037      	b.n	8008bd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	69b8      	ldr	r0, [r7, #24]
 8008b6e:	f000 fed9 	bl	8009924 <xQueueReceiveFromISR>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d003      	beq.n	8008b80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008b78:	f06f 0302 	mvn.w	r3, #2
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e027      	b.n	8008bd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d024      	beq.n	8008bd0 <osMessageQueueGet+0xac>
 8008b86:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <osMessageQueueGet+0xb8>)
 8008b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	e01b      	b.n	8008bd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <osMessageQueueGet+0x80>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d103      	bne.n	8008bac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ba4:	f06f 0303 	mvn.w	r3, #3
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	e011      	b.n	8008bd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	69b8      	ldr	r0, [r7, #24]
 8008bb2:	f000 fccb 	bl	800954c <xQueueReceive>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d009      	beq.n	8008bd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008bc2:	f06f 0301 	mvn.w	r3, #1
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	e002      	b.n	8008bd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008bca:	f06f 0302 	mvn.w	r3, #2
 8008bce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008bd0:	69fb      	ldr	r3, [r7, #28]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	e000ed04 	.word	0xe000ed04

08008be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8008bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vApplicationGetIdleTaskMemory+0x30>)
 8008bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2280      	movs	r2, #128	; 0x80
 8008bfc:	601a      	str	r2, [r3, #0]
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000d20 	.word	0x20000d20
 8008c10:	20000d7c 	.word	0x20000d7c

08008c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4a07      	ldr	r2, [pc, #28]	; (8008c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4a06      	ldr	r2, [pc, #24]	; (8008c44 <vApplicationGetTimerTaskMemory+0x30>)
 8008c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000f7c 	.word	0x20000f7c
 8008c44:	20000fd8 	.word	0x20000fd8

08008c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f103 0208 	add.w	r2, r3, #8
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f103 0208 	add.w	r2, r3, #8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0208 	add.w	r2, r3, #8
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d103      	bne.n	8008d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e00c      	b.n	8008d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	e002      	b.n	8008d18 <vListInsert+0x2e>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d2f6      	bcs.n	8008d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6892      	ldr	r2, [r2, #8]
 8008d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6852      	ldr	r2, [r2, #4]
 8008d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d103      	bne.n	8008d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	1e5a      	subs	r2, r3, #1
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008dda:	f002 fc3b 	bl	800b654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dea:	fb01 f303 	mul.w	r3, r1, r3
 8008dee:	441a      	add	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	68f9      	ldr	r1, [r7, #12]
 8008e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e10:	fb01 f303 	mul.w	r3, r1, r3
 8008e14:	441a      	add	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d114      	bne.n	8008e5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01a      	beq.n	8008e6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3310      	adds	r3, #16
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fbf1 	bl	800a624 <xTaskRemoveFromEventList>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <xQueueGenericReset+0xcc>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	e009      	b.n	8008e6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3310      	adds	r3, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fef2 	bl	8008c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3324      	adds	r3, #36	; 0x24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff feed 	bl	8008c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e6e:	f002 fc21 	bl	800b6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e72:	2301      	movs	r3, #1
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08e      	sub	sp, #56	; 0x38
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <xQueueGenericCreateStatic+0x52>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <xQueueGenericCreateStatic+0x56>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e000      	b.n	8008ed8 <xQueueGenericCreateStatic+0x58>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	623b      	str	r3, [r7, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <xQueueGenericCreateStatic+0x7e>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <xQueueGenericCreateStatic+0x82>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericCreateStatic+0x84>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	61fb      	str	r3, [r7, #28]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f1e:	2350      	movs	r3, #80	; 0x50
 8008f20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b50      	cmp	r3, #80	; 0x50
 8008f26:	d00a      	beq.n	8008f3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	61bb      	str	r3, [r7, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f83f 	bl	8008fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3730      	adds	r7, #48	; 0x30
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	; 0x28
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	613b      	str	r3, [r7, #16]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
 8008fa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	3350      	adds	r3, #80	; 0x50
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f002 fc75 	bl	800b898 <pvPortMalloc>
 8008fae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d011      	beq.n	8008fda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	3350      	adds	r3, #80	; 0x50
 8008fbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f805 	bl	8008fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fda:	69bb      	ldr	r3, [r7, #24]
	}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3720      	adds	r7, #32
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d103      	bne.n	8009000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	e002      	b.n	8009006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009012:	2101      	movs	r1, #1
 8009014:	69b8      	ldr	r0, [r7, #24]
 8009016:	f7ff fecb 	bl	8008db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08a      	sub	sp, #40	; 0x28
 800902e:	af02      	add	r7, sp, #8
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	61bb      	str	r3, [r7, #24]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	429a      	cmp	r2, r3
 8009058:	d90a      	bls.n	8009070 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	617b      	str	r3, [r7, #20]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009070:	2302      	movs	r3, #2
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7ff ff00 	bl	8008e80 <xQueueGenericCreateStatic>
 8009080:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800908e:	69fb      	ldr	r3, [r7, #28]
	}
 8009090:	4618      	mov	r0, r3
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	613b      	str	r3, [r7, #16]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d90a      	bls.n	80090dc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80090dc:	2202      	movs	r2, #2
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ff45 	bl	8008f70 <xQueueGenericCreate>
 80090e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80090f4:	697b      	ldr	r3, [r7, #20]
	}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800910e:	2300      	movs	r3, #0
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueGenericSend+0x32>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <xQueueGenericSend+0x40>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueGenericSend+0x44>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueGenericSend+0x46>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <xQueueGenericSend+0x60>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d103      	bne.n	800916e <xQueueGenericSend+0x6e>
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <xQueueGenericSend+0x72>
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <xQueueGenericSend+0x74>
 8009172:	2300      	movs	r3, #0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <xQueueGenericSend+0x8e>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	623b      	str	r3, [r7, #32]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800918e:	f001 fc07 	bl	800a9a0 <xTaskGetSchedulerState>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <xQueueGenericSend+0x9e>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <xQueueGenericSend+0xa2>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <xQueueGenericSend+0xa4>
 80091a2:	2300      	movs	r3, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xQueueGenericSend+0xbe>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61fb      	str	r3, [r7, #28]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091be:	f002 fa49 	bl	800b654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <xQueueGenericSend+0xd4>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d129      	bne.n	8009228 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091da:	f000 fc5e 	bl	8009a9a <prvCopyDataToQueue>
 80091de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d010      	beq.n	800920a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	3324      	adds	r3, #36	; 0x24
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 fa19 	bl	800a624 <xTaskRemoveFromEventList>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d013      	beq.n	8009220 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091f8:	4b3f      	ldr	r3, [pc, #252]	; (80092f8 <xQueueGenericSend+0x1f8>)
 80091fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	e00a      	b.n	8009220 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d007      	beq.n	8009220 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009210:	4b39      	ldr	r3, [pc, #228]	; (80092f8 <xQueueGenericSend+0x1f8>)
 8009212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009220:	f002 fa48 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009224:	2301      	movs	r3, #1
 8009226:	e063      	b.n	80092f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800922e:	f002 fa41 	bl	800b6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009232:	2300      	movs	r3, #0
 8009234:	e05c      	b.n	80092f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	4618      	mov	r0, r3
 8009242:	f001 fa53 	bl	800a6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800924a:	f002 fa33 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800924e:	f000 ffc5 	bl	800a1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009252:	f002 f9ff 	bl	800b654 <vPortEnterCritical>
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800925c:	b25b      	sxtb	r3, r3
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d103      	bne.n	800926c <xQueueGenericSend+0x16c>
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009272:	b25b      	sxtb	r3, r3
 8009274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009278:	d103      	bne.n	8009282 <xQueueGenericSend+0x182>
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009282:	f002 fa17 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009286:	1d3a      	adds	r2, r7, #4
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fa42 	bl	800a718 <xTaskCheckForTimeOut>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d124      	bne.n	80092e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800929a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800929c:	f000 fcf5 	bl	8009c8a <prvIsQueueFull>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d018      	beq.n	80092d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	3310      	adds	r3, #16
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 f968 	bl	800a584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092b6:	f000 fc80 	bl	8009bba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092ba:	f000 ff9d 	bl	800a1f8 <xTaskResumeAll>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f af7c 	bne.w	80091be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <xQueueGenericSend+0x1f8>)
 80092c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	e772      	b.n	80091be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092da:	f000 fc6e 	bl	8009bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092de:	f000 ff8b 	bl	800a1f8 <xTaskResumeAll>
 80092e2:	e76c      	b.n	80091be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e6:	f000 fc68 	bl	8009bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092ea:	f000 ff85 	bl	800a1f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3738      	adds	r7, #56	; 0x38
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b090      	sub	sp, #64	; 0x40
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d103      	bne.n	8009338 <xQueueGenericSendFromISR+0x3c>
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <xQueueGenericSendFromISR+0x40>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <xQueueGenericSendFromISR+0x42>
 800933c:	2300      	movs	r3, #0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d103      	bne.n	8009366 <xQueueGenericSendFromISR+0x6a>
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <xQueueGenericSendFromISR+0x6e>
 8009366:	2301      	movs	r3, #1
 8009368:	e000      	b.n	800936c <xQueueGenericSendFromISR+0x70>
 800936a:	2300      	movs	r3, #0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009386:	f002 fa47 	bl	800b818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800938a:	f3ef 8211 	mrs	r2, BASEPRI
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	61fa      	str	r2, [r7, #28]
 80093a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d302      	bcc.n	80093b8 <xQueueGenericSendFromISR+0xbc>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d12f      	bne.n	8009418 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093ce:	f000 fb64 	bl	8009a9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d112      	bne.n	8009402 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d016      	beq.n	8009412 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f91b 	bl	800a624 <xTaskRemoveFromEventList>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00e      	beq.n	8009412 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e007      	b.n	8009412 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009406:	3301      	adds	r3, #1
 8009408:	b2db      	uxtb	r3, r3
 800940a:	b25a      	sxtb	r2, r3
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009412:	2301      	movs	r3, #1
 8009414:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009416:	e001      	b.n	800941c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800942a:	4618      	mov	r0, r3
 800942c:	3740      	adds	r7, #64	; 0x40
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b08e      	sub	sp, #56	; 0x38
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	623b      	str	r3, [r7, #32]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	61fb      	str	r3, [r7, #28]
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d103      	bne.n	800948a <xQueueGiveFromISR+0x58>
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <xQueueGiveFromISR+0x5c>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGiveFromISR+0x5e>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <xQueueGiveFromISR+0x78>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	61bb      	str	r3, [r7, #24]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094aa:	f002 f9b5 	bl	800b818 <vPortValidateInterruptPriority>
	__asm volatile
 80094ae:	f3ef 8211 	mrs	r2, BASEPRI
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	617a      	str	r2, [r7, #20]
 80094c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80094c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d22b      	bcs.n	8009532 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f4:	d112      	bne.n	800951c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	3324      	adds	r3, #36	; 0x24
 8009502:	4618      	mov	r0, r3
 8009504:	f001 f88e 	bl	800a624 <xTaskRemoveFromEventList>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00e      	beq.n	800952c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e007      	b.n	800952c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800951c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009520:	3301      	adds	r3, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	b25a      	sxtb	r2, r3
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800952c:	2301      	movs	r3, #1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	e001      	b.n	8009536 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f383 8811 	msr	BASEPRI, r3
}
 8009540:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009544:	4618      	mov	r0, r3
 8009546:	3738      	adds	r7, #56	; 0x38
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08c      	sub	sp, #48	; 0x30
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <xQueueReceive+0x30>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	623b      	str	r3, [r7, #32]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <xQueueReceive+0x3e>
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <xQueueReceive+0x42>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <xQueueReceive+0x44>
 800958e:	2300      	movs	r3, #0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xQueueReceive+0x5e>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61fb      	str	r3, [r7, #28]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095aa:	f001 f9f9 	bl	800a9a0 <xTaskGetSchedulerState>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <xQueueReceive+0x6e>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <xQueueReceive+0x72>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <xQueueReceive+0x74>
 80095be:	2300      	movs	r3, #0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <xQueueReceive+0x8e>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	61bb      	str	r3, [r7, #24]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095da:	f002 f83b 	bl	800b654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d01f      	beq.n	800962a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ee:	f000 fabe 	bl	8009b6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	1e5a      	subs	r2, r3, #1
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00f      	beq.n	8009622 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	3310      	adds	r3, #16
 8009606:	4618      	mov	r0, r3
 8009608:	f001 f80c 	bl	800a624 <xTaskRemoveFromEventList>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009612:	4b3d      	ldr	r3, [pc, #244]	; (8009708 <xQueueReceive+0x1bc>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009622:	f002 f847 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009626:	2301      	movs	r3, #1
 8009628:	e069      	b.n	80096fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d103      	bne.n	8009638 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009630:	f002 f840 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009634:	2300      	movs	r3, #0
 8009636:	e062      	b.n	80096fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800963e:	f107 0310 	add.w	r3, r7, #16
 8009642:	4618      	mov	r0, r3
 8009644:	f001 f852 	bl	800a6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800964c:	f002 f832 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009650:	f000 fdc4 	bl	800a1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009654:	f001 fffe 	bl	800b654 <vPortEnterCritical>
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800965e:	b25b      	sxtb	r3, r3
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d103      	bne.n	800966e <xQueueReceive+0x122>
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009674:	b25b      	sxtb	r3, r3
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967a:	d103      	bne.n	8009684 <xQueueReceive+0x138>
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009684:	f002 f816 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009688:	1d3a      	adds	r2, r7, #4
 800968a:	f107 0310 	add.w	r3, r7, #16
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f001 f841 	bl	800a718 <xTaskCheckForTimeOut>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d123      	bne.n	80096e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800969c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969e:	f000 fade 	bl	8009c5e <prvIsQueueEmpty>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d017      	beq.n	80096d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	3324      	adds	r3, #36	; 0x24
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 ff67 	bl	800a584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b8:	f000 fa7f 	bl	8009bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096bc:	f000 fd9c 	bl	800a1f8 <xTaskResumeAll>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d189      	bne.n	80095da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096c6:	4b10      	ldr	r3, [pc, #64]	; (8009708 <xQueueReceive+0x1bc>)
 80096c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	e780      	b.n	80095da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096da:	f000 fa6e 	bl	8009bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096de:	f000 fd8b 	bl	800a1f8 <xTaskResumeAll>
 80096e2:	e77a      	b.n	80095da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e6:	f000 fa68 	bl	8009bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096ea:	f000 fd85 	bl	800a1f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f0:	f000 fab5 	bl	8009c5e <prvIsQueueEmpty>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f43f af6f 	beq.w	80095da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3730      	adds	r7, #48	; 0x30
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08e      	sub	sp, #56	; 0x38
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800971e:	2300      	movs	r3, #0
 8009720:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	61fb      	str	r3, [r7, #28]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800975c:	f001 f920 	bl	800a9a0 <xTaskGetSchedulerState>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <xQueueSemaphoreTake+0x60>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <xQueueSemaphoreTake+0x64>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <xQueueSemaphoreTake+0x66>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	61bb      	str	r3, [r7, #24]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800978c:	f001 ff62 	bl	800b654 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	d024      	beq.n	80097e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	1e5a      	subs	r2, r3, #1
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097ac:	f001 fa6e 	bl	800ac8c <pvTaskIncrementMutexHeldCount>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00f      	beq.n	80097de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	3310      	adds	r3, #16
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 ff2e 	bl	800a624 <xTaskRemoveFromEventList>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d007      	beq.n	80097de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097ce:	4b54      	ldr	r3, [pc, #336]	; (8009920 <xQueueSemaphoreTake+0x214>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097de:	f001 ff69 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e097      	b.n	8009916 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d111      	bne.n	8009810 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	617b      	str	r3, [r7, #20]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009808:	f001 ff54 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800980c:	2300      	movs	r3, #0
 800980e:	e082      	b.n	8009916 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	4618      	mov	r0, r3
 800981c:	f000 ff66 	bl	800a6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009824:	f001 ff46 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009828:	f000 fcd8 	bl	800a1dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800982c:	f001 ff12 	bl	800b654 <vPortEnterCritical>
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009836:	b25b      	sxtb	r3, r3
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d103      	bne.n	8009846 <xQueueSemaphoreTake+0x13a>
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800984c:	b25b      	sxtb	r3, r3
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d103      	bne.n	800985c <xQueueSemaphoreTake+0x150>
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985c:	f001 ff2a 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009860:	463a      	mov	r2, r7
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f000 ff55 	bl	800a718 <xTaskCheckForTimeOut>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d132      	bne.n	80098da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009876:	f000 f9f2 	bl	8009c5e <prvIsQueueEmpty>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d026      	beq.n	80098ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009888:	f001 fee4 	bl	800b654 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	4618      	mov	r0, r3
 8009892:	f001 f8a3 	bl	800a9dc <xTaskPriorityInherit>
 8009896:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009898:	f001 ff0c 	bl	800b6b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	3324      	adds	r3, #36	; 0x24
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fe6d 	bl	800a584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ac:	f000 f985 	bl	8009bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098b0:	f000 fca2 	bl	800a1f8 <xTaskResumeAll>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f47f af68 	bne.w	800978c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80098bc:	4b18      	ldr	r3, [pc, #96]	; (8009920 <xQueueSemaphoreTake+0x214>)
 80098be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	e75e      	b.n	800978c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098d0:	f000 f973 	bl	8009bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098d4:	f000 fc90 	bl	800a1f8 <xTaskResumeAll>
 80098d8:	e758      	b.n	800978c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098dc:	f000 f96d 	bl	8009bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098e0:	f000 fc8a 	bl	800a1f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e6:	f000 f9ba 	bl	8009c5e <prvIsQueueEmpty>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f43f af4d 	beq.w	800978c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80098f8:	f001 feac 	bl	800b654 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098fe:	f000 f8b4 	bl	8009a6a <prvGetDisinheritPriorityAfterTimeout>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800990a:	4618      	mov	r0, r3
 800990c:	f001 f93c 	bl	800ab88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009910:	f001 fed0 	bl	800b6b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009916:	4618      	mov	r0, r3
 8009918:	3738      	adds	r7, #56	; 0x38
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08e      	sub	sp, #56	; 0x38
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	623b      	str	r3, [r7, #32]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d103      	bne.n	800995e <xQueueReceiveFromISR+0x3a>
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <xQueueReceiveFromISR+0x3e>
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <xQueueReceiveFromISR+0x40>
 8009962:	2300      	movs	r3, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10a      	bne.n	800997e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	61fb      	str	r3, [r7, #28]
}
 800997a:	bf00      	nop
 800997c:	e7fe      	b.n	800997c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800997e:	f001 ff4b 	bl	800b818 <vPortValidateInterruptPriority>
	__asm volatile
 8009982:	f3ef 8211 	mrs	r2, BASEPRI
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	61ba      	str	r2, [r7, #24]
 8009998:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800999a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d02f      	beq.n	8009a0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099b8:	f000 f8d9 	bl	8009b6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d112      	bne.n	80099f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d016      	beq.n	8009a04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	3310      	adds	r3, #16
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fe22 	bl	800a624 <xTaskRemoveFromEventList>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e007      	b.n	8009a04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099f8:	3301      	adds	r3, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	b25a      	sxtb	r2, r3
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009a04:	2301      	movs	r3, #1
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
 8009a08:	e001      	b.n	8009a0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f383 8811 	msr	BASEPRI, r3
}
 8009a18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3738      	adds	r7, #56	; 0x38
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <vQueueDelete+0x28>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60bb      	str	r3, [r7, #8]
}
 8009a48:	bf00      	nop
 8009a4a:	e7fe      	b.n	8009a4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 f95f 	bl	8009d10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f001 ffe7 	bl	800ba30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	e001      	b.n	8009a8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b086      	sub	sp, #24
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10d      	bne.n	8009ad4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d14d      	bne.n	8009b5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fff1 	bl	800aaac <xTaskPriorityDisinherit>
 8009aca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	609a      	str	r2, [r3, #8]
 8009ad2:	e043      	b.n	8009b5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d119      	bne.n	8009b0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6858      	ldr	r0, [r3, #4]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	f002 f8eb 	bl	800bcc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	441a      	add	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d32b      	bcc.n	8009b5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	605a      	str	r2, [r3, #4]
 8009b0c:	e026      	b.n	8009b5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	68d8      	ldr	r0, [r3, #12]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	461a      	mov	r2, r3
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	f002 f8d1 	bl	800bcc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	425b      	negs	r3, r3
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d207      	bcs.n	8009b4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	425b      	negs	r3, r3
 8009b44:	441a      	add	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d105      	bne.n	8009b5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b64:	697b      	ldr	r3, [r7, #20]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d018      	beq.n	8009bb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	441a      	add	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d303      	bcc.n	8009ba2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68d9      	ldr	r1, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	461a      	mov	r2, r3
 8009bac:	6838      	ldr	r0, [r7, #0]
 8009bae:	f002 f887 	bl	800bcc0 <memcpy>
	}
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bc2:	f001 fd47 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bcc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bce:	e011      	b.n	8009bf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d012      	beq.n	8009bfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3324      	adds	r3, #36	; 0x24
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fd21 	bl	800a624 <xTaskRemoveFromEventList>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009be8:	f000 fdf8 	bl	800a7dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dce9      	bgt.n	8009bd0 <prvUnlockQueue+0x16>
 8009bfc:	e000      	b.n	8009c00 <prvUnlockQueue+0x46>
					break;
 8009bfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	22ff      	movs	r2, #255	; 0xff
 8009c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c08:	f001 fd54 	bl	800b6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c0c:	f001 fd22 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c18:	e011      	b.n	8009c3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d012      	beq.n	8009c48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3310      	adds	r3, #16
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fcfc 	bl	800a624 <xTaskRemoveFromEventList>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c32:	f000 fdd3 	bl	800a7dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dce9      	bgt.n	8009c1a <prvUnlockQueue+0x60>
 8009c46:	e000      	b.n	8009c4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	22ff      	movs	r2, #255	; 0xff
 8009c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c52:	f001 fd2f 	bl	800b6b4 <vPortExitCritical>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c66:	f001 fcf5 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c72:	2301      	movs	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e001      	b.n	8009c7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c7c:	f001 fd1a 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009c80:	68fb      	ldr	r3, [r7, #12]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c92:	f001 fcdf 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d102      	bne.n	8009ca8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	e001      	b.n	8009cac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cac:	f001 fd02 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e014      	b.n	8009cf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ccc:	4a0f      	ldr	r2, [pc, #60]	; (8009d0c <vQueueAddToRegistry+0x50>)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cd8:	490c      	ldr	r1, [pc, #48]	; (8009d0c <vQueueAddToRegistry+0x50>)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ce2:	4a0a      	ldr	r2, [pc, #40]	; (8009d0c <vQueueAddToRegistry+0x50>)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4413      	add	r3, r2
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cee:	e006      	b.n	8009cfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b07      	cmp	r3, #7
 8009cfa:	d9e7      	bls.n	8009ccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200013d8 	.word	0x200013d8

08009d10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e016      	b.n	8009d4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009d1e:	4a10      	ldr	r2, [pc, #64]	; (8009d60 <vQueueUnregisterQueue+0x50>)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	4413      	add	r3, r2
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d10b      	bne.n	8009d46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009d2e:	4a0c      	ldr	r2, [pc, #48]	; (8009d60 <vQueueUnregisterQueue+0x50>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2100      	movs	r1, #0
 8009d34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <vQueueUnregisterQueue+0x50>)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	4413      	add	r3, r2
 8009d40:	2200      	movs	r2, #0
 8009d42:	605a      	str	r2, [r3, #4]
				break;
 8009d44:	e006      	b.n	8009d54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b07      	cmp	r3, #7
 8009d50:	d9e5      	bls.n	8009d1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	200013d8 	.word	0x200013d8

08009d64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d74:	f001 fc6e 	bl	800b654 <vPortEnterCritical>
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d7e:	b25b      	sxtb	r3, r3
 8009d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d84:	d103      	bne.n	8009d8e <vQueueWaitForMessageRestricted+0x2a>
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d94:	b25b      	sxtb	r3, r3
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9a:	d103      	bne.n	8009da4 <vQueueWaitForMessageRestricted+0x40>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009da4:	f001 fc86 	bl	800b6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	3324      	adds	r3, #36	; 0x24
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fc07 	bl	800a5cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dbe:	6978      	ldr	r0, [r7, #20]
 8009dc0:	f7ff fefb 	bl	8009bba <prvUnlockQueue>
	}
 8009dc4:	bf00      	nop
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	; 0x38
 8009dd0:	af04      	add	r7, sp, #16
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10a      	bne.n	8009df6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	623b      	str	r3, [r7, #32]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xTaskCreateStatic+0x46>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	61fb      	str	r3, [r7, #28]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e12:	235c      	movs	r3, #92	; 0x5c
 8009e14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b5c      	cmp	r3, #92	; 0x5c
 8009e1a:	d00a      	beq.n	8009e32 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	61bb      	str	r3, [r7, #24]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01e      	beq.n	8009e78 <xTaskCreateStatic+0xac>
 8009e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01b      	beq.n	8009e78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e52:	2300      	movs	r3, #0
 8009e54:	9303      	str	r3, [sp, #12]
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	9302      	str	r3, [sp, #8]
 8009e5a:	f107 0314 	add.w	r3, r7, #20
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 f850 	bl	8009f10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e72:	f000 f8dd 	bl	800a030 <prvAddNewTaskToReadyList>
 8009e76:	e001      	b.n	8009e7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e7c:	697b      	ldr	r3, [r7, #20]
	}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3728      	adds	r7, #40	; 0x28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b08c      	sub	sp, #48	; 0x30
 8009e8a:	af04      	add	r7, sp, #16
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	603b      	str	r3, [r7, #0]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fcfc 	bl	800b898 <pvPortMalloc>
 8009ea0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00e      	beq.n	8009ec6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ea8:	205c      	movs	r0, #92	; 0x5c
 8009eaa:	f001 fcf5 	bl	800b898 <pvPortMalloc>
 8009eae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	631a      	str	r2, [r3, #48]	; 0x30
 8009ebc:	e005      	b.n	8009eca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ebe:	6978      	ldr	r0, [r7, #20]
 8009ec0:	f001 fdb6 	bl	800ba30 <vPortFree>
 8009ec4:	e001      	b.n	8009eca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d017      	beq.n	8009f00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ed8:	88fa      	ldrh	r2, [r7, #6]
 8009eda:	2300      	movs	r3, #0
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 f80e 	bl	8009f10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ef4:	69f8      	ldr	r0, [r7, #28]
 8009ef6:	f000 f89b 	bl	800a030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009efa:	2301      	movs	r3, #1
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	e002      	b.n	8009f06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295
 8009f04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f06:	69bb      	ldr	r3, [r7, #24]
	}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	461a      	mov	r2, r3
 8009f28:	21a5      	movs	r1, #165	; 0xa5
 8009f2a:	f001 fed7 	bl	800bcdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	f003 0307 	and.w	r3, r3, #7
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	617b      	str	r3, [r7, #20]
}
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01f      	beq.n	8009fae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61fb      	str	r3, [r7, #28]
 8009f72:	e012      	b.n	8009f9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	7819      	ldrb	r1, [r3, #0]
 8009f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	3334      	adds	r3, #52	; 0x34
 8009f84:	460a      	mov	r2, r1
 8009f86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	3301      	adds	r3, #1
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2b0f      	cmp	r3, #15
 8009f9e:	d9e9      	bls.n	8009f74 <prvInitialiseNewTask+0x64>
 8009fa0:	e000      	b.n	8009fa4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009fa2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fac:	e003      	b.n	8009fb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	2b37      	cmp	r3, #55	; 0x37
 8009fba:	d901      	bls.n	8009fc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fbc:	2337      	movs	r3, #55	; 0x37
 8009fbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	2200      	movs	r2, #0
 8009fd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fe56 	bl	8008c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	3318      	adds	r3, #24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fe51 	bl	8008c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	2200      	movs	r2, #0
 800a000:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	69b8      	ldr	r0, [r7, #24]
 800a010:	f001 f9f2 	bl	800b3f8 <pxPortInitialiseStack>
 800a014:	4602      	mov	r2, r0
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a026:	bf00      	nop
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a038:	f001 fb0c 	bl	800b654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a03c:	4b2d      	ldr	r3, [pc, #180]	; (800a0f4 <prvAddNewTaskToReadyList+0xc4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	4a2c      	ldr	r2, [pc, #176]	; (800a0f4 <prvAddNewTaskToReadyList+0xc4>)
 800a044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a046:	4b2c      	ldr	r3, [pc, #176]	; (800a0f8 <prvAddNewTaskToReadyList+0xc8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a04e:	4a2a      	ldr	r2, [pc, #168]	; (800a0f8 <prvAddNewTaskToReadyList+0xc8>)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a054:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <prvAddNewTaskToReadyList+0xc4>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d110      	bne.n	800a07e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a05c:	f000 fbe2 	bl	800a824 <prvInitialiseTaskLists>
 800a060:	e00d      	b.n	800a07e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a062:	4b26      	ldr	r3, [pc, #152]	; (800a0fc <prvAddNewTaskToReadyList+0xcc>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a06a:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <prvAddNewTaskToReadyList+0xc8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	429a      	cmp	r2, r3
 800a076:	d802      	bhi.n	800a07e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a078:	4a1f      	ldr	r2, [pc, #124]	; (800a0f8 <prvAddNewTaskToReadyList+0xc8>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a07e:	4b20      	ldr	r3, [pc, #128]	; (800a100 <prvAddNewTaskToReadyList+0xd0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <prvAddNewTaskToReadyList+0xd0>)
 800a086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a088:	4b1d      	ldr	r3, [pc, #116]	; (800a100 <prvAddNewTaskToReadyList+0xd0>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4b1b      	ldr	r3, [pc, #108]	; (800a104 <prvAddNewTaskToReadyList+0xd4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d903      	bls.n	800a0a4 <prvAddNewTaskToReadyList+0x74>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	4a18      	ldr	r2, [pc, #96]	; (800a104 <prvAddNewTaskToReadyList+0xd4>)
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <prvAddNewTaskToReadyList+0xd8>)
 800a0b2:	441a      	add	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7fe fdf1 	bl	8008ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0c0:	f001 faf8 	bl	800b6b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0c4:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <prvAddNewTaskToReadyList+0xcc>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00e      	beq.n	800a0ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <prvAddNewTaskToReadyList+0xc8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d207      	bcs.n	800a0ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0da:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <prvAddNewTaskToReadyList+0xdc>)
 800a0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200018ec 	.word	0x200018ec
 800a0f8:	20001418 	.word	0x20001418
 800a0fc:	200018f8 	.word	0x200018f8
 800a100:	20001908 	.word	0x20001908
 800a104:	200018f4 	.word	0x200018f4
 800a108:	2000141c 	.word	0x2000141c
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08a      	sub	sp, #40	; 0x28
 800a114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a11e:	463a      	mov	r2, r7
 800a120:	1d39      	adds	r1, r7, #4
 800a122:	f107 0308 	add.w	r3, r7, #8
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fd5a 	bl	8008be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	9202      	str	r2, [sp, #8]
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	2300      	movs	r3, #0
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	2300      	movs	r3, #0
 800a13c:	460a      	mov	r2, r1
 800a13e:	4921      	ldr	r1, [pc, #132]	; (800a1c4 <vTaskStartScheduler+0xb4>)
 800a140:	4821      	ldr	r0, [pc, #132]	; (800a1c8 <vTaskStartScheduler+0xb8>)
 800a142:	f7ff fe43 	bl	8009dcc <xTaskCreateStatic>
 800a146:	4603      	mov	r3, r0
 800a148:	4a20      	ldr	r2, [pc, #128]	; (800a1cc <vTaskStartScheduler+0xbc>)
 800a14a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a14c:	4b1f      	ldr	r3, [pc, #124]	; (800a1cc <vTaskStartScheduler+0xbc>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a154:	2301      	movs	r3, #1
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e001      	b.n	800a15e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d102      	bne.n	800a16a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a164:	f000 fdfa 	bl	800ad5c <xTimerCreateTimerTask>
 800a168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d116      	bne.n	800a19e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	613b      	str	r3, [r7, #16]
}
 800a182:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a184:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <vTaskStartScheduler+0xc0>)
 800a186:	f04f 32ff 	mov.w	r2, #4294967295
 800a18a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a18c:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <vTaskStartScheduler+0xc4>)
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a192:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <vTaskStartScheduler+0xc8>)
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a198:	f001 f9ba 	bl	800b510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a19c:	e00e      	b.n	800a1bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a4:	d10a      	bne.n	800a1bc <vTaskStartScheduler+0xac>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60fb      	str	r3, [r7, #12]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <vTaskStartScheduler+0xaa>
}
 800a1bc:	bf00      	nop
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	08011a18 	.word	0x08011a18
 800a1c8:	0800a7f5 	.word	0x0800a7f5
 800a1cc:	20001910 	.word	0x20001910
 800a1d0:	2000190c 	.word	0x2000190c
 800a1d4:	200018f8 	.word	0x200018f8
 800a1d8:	200018f0 	.word	0x200018f0

0800a1dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1e0:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <vTaskSuspendAll+0x18>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	4a03      	ldr	r2, [pc, #12]	; (800a1f4 <vTaskSuspendAll+0x18>)
 800a1e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1ea:	bf00      	nop
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	20001914 	.word	0x20001914

0800a1f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a206:	4b42      	ldr	r3, [pc, #264]	; (800a310 <xTaskResumeAll+0x118>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <xTaskResumeAll+0x2c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	603b      	str	r3, [r7, #0]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a224:	f001 fa16 	bl	800b654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <xTaskResumeAll+0x118>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4a38      	ldr	r2, [pc, #224]	; (800a310 <xTaskResumeAll+0x118>)
 800a230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a232:	4b37      	ldr	r3, [pc, #220]	; (800a310 <xTaskResumeAll+0x118>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d162      	bne.n	800a300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a23a:	4b36      	ldr	r3, [pc, #216]	; (800a314 <xTaskResumeAll+0x11c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d05e      	beq.n	800a300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a242:	e02f      	b.n	800a2a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a244:	4b34      	ldr	r3, [pc, #208]	; (800a318 <xTaskResumeAll+0x120>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3318      	adds	r3, #24
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe fd83 	bl	8008d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3304      	adds	r3, #4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fd7e 	bl	8008d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a264:	4b2d      	ldr	r3, [pc, #180]	; (800a31c <xTaskResumeAll+0x124>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d903      	bls.n	800a274 <xTaskResumeAll+0x7c>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	4a2a      	ldr	r2, [pc, #168]	; (800a31c <xTaskResumeAll+0x124>)
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4a27      	ldr	r2, [pc, #156]	; (800a320 <xTaskResumeAll+0x128>)
 800a282:	441a      	add	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fe fd09 	bl	8008ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a294:	4b23      	ldr	r3, [pc, #140]	; (800a324 <xTaskResumeAll+0x12c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d302      	bcc.n	800a2a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a29e:	4b22      	ldr	r3, [pc, #136]	; (800a328 <xTaskResumeAll+0x130>)
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <xTaskResumeAll+0x120>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1cb      	bne.n	800a244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2b2:	f000 fb55 	bl	800a960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <xTaskResumeAll+0x134>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d010      	beq.n	800a2e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f000 f847 	bl	800a354 <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a2cc:	4b16      	ldr	r3, [pc, #88]	; (800a328 <xTaskResumeAll+0x130>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1f1      	bne.n	800a2c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a2de:	4b13      	ldr	r3, [pc, #76]	; (800a32c <xTaskResumeAll+0x134>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2e4:	4b10      	ldr	r3, [pc, #64]	; (800a328 <xTaskResumeAll+0x130>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <xTaskResumeAll+0x138>)
 800a2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a300:	f001 f9d8 	bl	800b6b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a304:	68bb      	ldr	r3, [r7, #8]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20001914 	.word	0x20001914
 800a314:	200018ec 	.word	0x200018ec
 800a318:	200018ac 	.word	0x200018ac
 800a31c:	200018f4 	.word	0x200018f4
 800a320:	2000141c 	.word	0x2000141c
 800a324:	20001418 	.word	0x20001418
 800a328:	20001900 	.word	0x20001900
 800a32c:	200018fc 	.word	0x200018fc
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <xTaskGetTickCount+0x1c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a340:	687b      	ldr	r3, [r7, #4]
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	200018f0 	.word	0x200018f0

0800a354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35e:	4b4f      	ldr	r3, [pc, #316]	; (800a49c <xTaskIncrementTick+0x148>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 808f 	bne.w	800a486 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a368:	4b4d      	ldr	r3, [pc, #308]	; (800a4a0 <xTaskIncrementTick+0x14c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a370:	4a4b      	ldr	r2, [pc, #300]	; (800a4a0 <xTaskIncrementTick+0x14c>)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d120      	bne.n	800a3be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a37c:	4b49      	ldr	r3, [pc, #292]	; (800a4a4 <xTaskIncrementTick+0x150>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <xTaskIncrementTick+0x48>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	603b      	str	r3, [r7, #0]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xTaskIncrementTick+0x46>
 800a39c:	4b41      	ldr	r3, [pc, #260]	; (800a4a4 <xTaskIncrementTick+0x150>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	4b41      	ldr	r3, [pc, #260]	; (800a4a8 <xTaskIncrementTick+0x154>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a3f      	ldr	r2, [pc, #252]	; (800a4a4 <xTaskIncrementTick+0x150>)
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	4a3f      	ldr	r2, [pc, #252]	; (800a4a8 <xTaskIncrementTick+0x154>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	4b3e      	ldr	r3, [pc, #248]	; (800a4ac <xTaskIncrementTick+0x158>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a3d      	ldr	r2, [pc, #244]	; (800a4ac <xTaskIncrementTick+0x158>)
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	f000 fad1 	bl	800a960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3be:	4b3c      	ldr	r3, [pc, #240]	; (800a4b0 <xTaskIncrementTick+0x15c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d349      	bcc.n	800a45c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3c8:	4b36      	ldr	r3, [pc, #216]	; (800a4a4 <xTaskIncrementTick+0x150>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d104      	bne.n	800a3dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d2:	4b37      	ldr	r3, [pc, #220]	; (800a4b0 <xTaskIncrementTick+0x15c>)
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	601a      	str	r2, [r3, #0]
					break;
 800a3da:	e03f      	b.n	800a45c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3dc:	4b31      	ldr	r3, [pc, #196]	; (800a4a4 <xTaskIncrementTick+0x150>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d203      	bcs.n	800a3fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3f4:	4a2e      	ldr	r2, [pc, #184]	; (800a4b0 <xTaskIncrementTick+0x15c>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3fa:	e02f      	b.n	800a45c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fcab 	bl	8008d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d004      	beq.n	800a418 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3318      	adds	r3, #24
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fca2 	bl	8008d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41c:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <xTaskIncrementTick+0x160>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d903      	bls.n	800a42c <xTaskIncrementTick+0xd8>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	4a22      	ldr	r2, [pc, #136]	; (800a4b4 <xTaskIncrementTick+0x160>)
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4a1f      	ldr	r2, [pc, #124]	; (800a4b8 <xTaskIncrementTick+0x164>)
 800a43a:	441a      	add	r2, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3304      	adds	r3, #4
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fe fc2d 	bl	8008ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44c:	4b1b      	ldr	r3, [pc, #108]	; (800a4bc <xTaskIncrementTick+0x168>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	429a      	cmp	r2, r3
 800a454:	d3b8      	bcc.n	800a3c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a456:	2301      	movs	r3, #1
 800a458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a45a:	e7b5      	b.n	800a3c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a45c:	4b17      	ldr	r3, [pc, #92]	; (800a4bc <xTaskIncrementTick+0x168>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	4915      	ldr	r1, [pc, #84]	; (800a4b8 <xTaskIncrementTick+0x164>)
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d901      	bls.n	800a478 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a478:	4b11      	ldr	r3, [pc, #68]	; (800a4c0 <xTaskIncrementTick+0x16c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e004      	b.n	800a490 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <xTaskIncrementTick+0x170>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a0d      	ldr	r2, [pc, #52]	; (800a4c4 <xTaskIncrementTick+0x170>)
 800a48e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a490:	697b      	ldr	r3, [r7, #20]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20001914 	.word	0x20001914
 800a4a0:	200018f0 	.word	0x200018f0
 800a4a4:	200018a4 	.word	0x200018a4
 800a4a8:	200018a8 	.word	0x200018a8
 800a4ac:	20001904 	.word	0x20001904
 800a4b0:	2000190c 	.word	0x2000190c
 800a4b4:	200018f4 	.word	0x200018f4
 800a4b8:	2000141c 	.word	0x2000141c
 800a4bc:	20001418 	.word	0x20001418
 800a4c0:	20001900 	.word	0x20001900
 800a4c4:	200018fc 	.word	0x200018fc

0800a4c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4ce:	4b28      	ldr	r3, [pc, #160]	; (800a570 <vTaskSwitchContext+0xa8>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4d6:	4b27      	ldr	r3, [pc, #156]	; (800a574 <vTaskSwitchContext+0xac>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4dc:	e041      	b.n	800a562 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a4de:	4b25      	ldr	r3, [pc, #148]	; (800a574 <vTaskSwitchContext+0xac>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <vTaskSwitchContext+0xb0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	e010      	b.n	800a50e <vTaskSwitchContext+0x46>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <vTaskSwitchContext+0x40>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	607b      	str	r3, [r7, #4]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <vTaskSwitchContext+0x3e>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	491b      	ldr	r1, [pc, #108]	; (800a57c <vTaskSwitchContext+0xb4>)
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	440b      	add	r3, r1
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0e4      	beq.n	800a4ec <vTaskSwitchContext+0x24>
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4a13      	ldr	r2, [pc, #76]	; (800a57c <vTaskSwitchContext+0xb4>)
 800a52e:	4413      	add	r3, r2
 800a530:	60bb      	str	r3, [r7, #8]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	605a      	str	r2, [r3, #4]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3308      	adds	r3, #8
 800a544:	429a      	cmp	r2, r3
 800a546:	d104      	bne.n	800a552 <vTaskSwitchContext+0x8a>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	605a      	str	r2, [r3, #4]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	4a09      	ldr	r2, [pc, #36]	; (800a580 <vTaskSwitchContext+0xb8>)
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4a06      	ldr	r2, [pc, #24]	; (800a578 <vTaskSwitchContext+0xb0>)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6013      	str	r3, [r2, #0]
}
 800a562:	bf00      	nop
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	20001914 	.word	0x20001914
 800a574:	20001900 	.word	0x20001900
 800a578:	200018f4 	.word	0x200018f4
 800a57c:	2000141c 	.word	0x2000141c
 800a580:	20001418 	.word	0x20001418

0800a584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60fb      	str	r3, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <vTaskPlaceOnEventList+0x44>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3318      	adds	r3, #24
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7fe fb99 	bl	8008cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	6838      	ldr	r0, [r7, #0]
 800a5bc:	f000 fb7a 	bl	800acb4 <prvAddCurrentTaskToDelayedList>
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20001418 	.word	0x20001418

0800a5cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7fe fb50 	bl	8008ca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	68b8      	ldr	r0, [r7, #8]
 800a612:	f000 fb4f 	bl	800acb4 <prvAddCurrentTaskToDelayedList>
	}
 800a616:	bf00      	nop
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20001418 	.word	0x20001418

0800a624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	3318      	adds	r3, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fb81 	bl	8008d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a65a:	4b1e      	ldr	r3, [pc, #120]	; (800a6d4 <xTaskRemoveFromEventList+0xb0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11d      	bne.n	800a69e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3304      	adds	r3, #4
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fb78 	bl	8008d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a670:	4b19      	ldr	r3, [pc, #100]	; (800a6d8 <xTaskRemoveFromEventList+0xb4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d903      	bls.n	800a680 <xTaskRemoveFromEventList+0x5c>
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	4a16      	ldr	r2, [pc, #88]	; (800a6d8 <xTaskRemoveFromEventList+0xb4>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4a13      	ldr	r2, [pc, #76]	; (800a6dc <xTaskRemoveFromEventList+0xb8>)
 800a68e:	441a      	add	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3304      	adds	r3, #4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe fb03 	bl	8008ca2 <vListInsertEnd>
 800a69c:	e005      	b.n	800a6aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	3318      	adds	r3, #24
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	480e      	ldr	r0, [pc, #56]	; (800a6e0 <xTaskRemoveFromEventList+0xbc>)
 800a6a6:	f7fe fafc 	bl	8008ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <xTaskRemoveFromEventList+0xc0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d905      	bls.n	800a6c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <xTaskRemoveFromEventList+0xc4>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e001      	b.n	800a6c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6c8:	697b      	ldr	r3, [r7, #20]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20001914 	.word	0x20001914
 800a6d8:	200018f4 	.word	0x200018f4
 800a6dc:	2000141c 	.word	0x2000141c
 800a6e0:	200018ac 	.word	0x200018ac
 800a6e4:	20001418 	.word	0x20001418
 800a6e8:	20001900 	.word	0x20001900

0800a6ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6f4:	4b06      	ldr	r3, [pc, #24]	; (800a710 <vTaskInternalSetTimeOutState+0x24>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6fc:	4b05      	ldr	r3, [pc, #20]	; (800a714 <vTaskInternalSetTimeOutState+0x28>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	605a      	str	r2, [r3, #4]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	20001904 	.word	0x20001904
 800a714:	200018f0 	.word	0x200018f0

0800a718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	613b      	str	r3, [r7, #16]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	60fb      	str	r3, [r7, #12]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a75a:	f000 ff7b 	bl	800b654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a75e:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <xTaskCheckForTimeOut+0xbc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a776:	d102      	bne.n	800a77e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e023      	b.n	800a7c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <xTaskCheckForTimeOut+0xc0>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d007      	beq.n	800a79a <xTaskCheckForTimeOut+0x82>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	429a      	cmp	r2, r3
 800a792:	d302      	bcc.n	800a79a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e015      	b.n	800a7c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d20b      	bcs.n	800a7bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff9b 	bl	800a6ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	e004      	b.n	800a7c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7c6:	f000 ff75 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	200018f0 	.word	0x200018f0
 800a7d8:	20001904 	.word	0x20001904

0800a7dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7e0:	4b03      	ldr	r3, [pc, #12]	; (800a7f0 <vTaskMissedYield+0x14>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
}
 800a7e6:	bf00      	nop
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20001900 	.word	0x20001900

0800a7f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7fc:	f000 f852 	bl	800a8a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <prvIdleTask+0x28>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d9f9      	bls.n	800a7fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <prvIdleTask+0x2c>)
 800a80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a818:	e7f0      	b.n	800a7fc <prvIdleTask+0x8>
 800a81a:	bf00      	nop
 800a81c:	2000141c 	.word	0x2000141c
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a82a:	2300      	movs	r3, #0
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	e00c      	b.n	800a84a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4a12      	ldr	r2, [pc, #72]	; (800a884 <prvInitialiseTaskLists+0x60>)
 800a83c:	4413      	add	r3, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fa02 	bl	8008c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3301      	adds	r3, #1
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b37      	cmp	r3, #55	; 0x37
 800a84e:	d9ef      	bls.n	800a830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a850:	480d      	ldr	r0, [pc, #52]	; (800a888 <prvInitialiseTaskLists+0x64>)
 800a852:	f7fe f9f9 	bl	8008c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a856:	480d      	ldr	r0, [pc, #52]	; (800a88c <prvInitialiseTaskLists+0x68>)
 800a858:	f7fe f9f6 	bl	8008c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a85c:	480c      	ldr	r0, [pc, #48]	; (800a890 <prvInitialiseTaskLists+0x6c>)
 800a85e:	f7fe f9f3 	bl	8008c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a862:	480c      	ldr	r0, [pc, #48]	; (800a894 <prvInitialiseTaskLists+0x70>)
 800a864:	f7fe f9f0 	bl	8008c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a868:	480b      	ldr	r0, [pc, #44]	; (800a898 <prvInitialiseTaskLists+0x74>)
 800a86a:	f7fe f9ed 	bl	8008c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <prvInitialiseTaskLists+0x78>)
 800a870:	4a05      	ldr	r2, [pc, #20]	; (800a888 <prvInitialiseTaskLists+0x64>)
 800a872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <prvInitialiseTaskLists+0x7c>)
 800a876:	4a05      	ldr	r2, [pc, #20]	; (800a88c <prvInitialiseTaskLists+0x68>)
 800a878:	601a      	str	r2, [r3, #0]
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000141c 	.word	0x2000141c
 800a888:	2000187c 	.word	0x2000187c
 800a88c:	20001890 	.word	0x20001890
 800a890:	200018ac 	.word	0x200018ac
 800a894:	200018c0 	.word	0x200018c0
 800a898:	200018d8 	.word	0x200018d8
 800a89c:	200018a4 	.word	0x200018a4
 800a8a0:	200018a8 	.word	0x200018a8

0800a8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8aa:	e019      	b.n	800a8e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8ac:	f000 fed2 	bl	800b654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b0:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <prvCheckTasksWaitingTermination+0x50>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fa4d 	bl	8008d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	; (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	; (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8cc:	4b0b      	ldr	r3, [pc, #44]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8d6:	f000 feed 	bl	800b6b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f810 	bl	800a900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e1      	bne.n	800a8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200018c0 	.word	0x200018c0
 800a8f8:	200018ec 	.word	0x200018ec
 800a8fc:	200018d4 	.word	0x200018d4

0800a900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d108      	bne.n	800a924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	4618      	mov	r0, r3
 800a918:	f001 f88a 	bl	800ba30 <vPortFree>
				vPortFree( pxTCB );
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 f887 	bl	800ba30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a922:	e018      	b.n	800a956 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d103      	bne.n	800a936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 f87e 	bl	800ba30 <vPortFree>
	}
 800a934:	e00f      	b.n	800a956 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d00a      	beq.n	800a956 <prvDeleteTCB+0x56>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	60fb      	str	r3, [r7, #12]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <prvDeleteTCB+0x54>
	}
 800a956:	bf00      	nop
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <prvResetNextTaskUnblockTime+0x38>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d104      	bne.n	800a97a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <prvResetNextTaskUnblockTime+0x3c>)
 800a972:	f04f 32ff 	mov.w	r2, #4294967295
 800a976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a978:	e008      	b.n	800a98c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a97a:	4b07      	ldr	r3, [pc, #28]	; (800a998 <prvResetNextTaskUnblockTime+0x38>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4a04      	ldr	r2, [pc, #16]	; (800a99c <prvResetNextTaskUnblockTime+0x3c>)
 800a98a:	6013      	str	r3, [r2, #0]
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	200018a4 	.word	0x200018a4
 800a99c:	2000190c 	.word	0x2000190c

0800a9a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <xTaskGetSchedulerState+0x34>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d102      	bne.n	800a9b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	607b      	str	r3, [r7, #4]
 800a9b2:	e008      	b.n	800a9c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b4:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <xTaskGetSchedulerState+0x38>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	607b      	str	r3, [r7, #4]
 800a9c0:	e001      	b.n	800a9c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9c6:	687b      	ldr	r3, [r7, #4]
	}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	200018f8 	.word	0x200018f8
 800a9d8:	20001914 	.word	0x20001914

0800a9dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d051      	beq.n	800aa96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4b2a      	ldr	r3, [pc, #168]	; (800aaa0 <xTaskPriorityInherit+0xc4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d241      	bcs.n	800aa84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	db06      	blt.n	800aa16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa08:	4b25      	ldr	r3, [pc, #148]	; (800aaa0 <xTaskPriorityInherit+0xc4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6959      	ldr	r1, [r3, #20]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4a1f      	ldr	r2, [pc, #124]	; (800aaa4 <xTaskPriorityInherit+0xc8>)
 800aa28:	4413      	add	r3, r2
 800aa2a:	4299      	cmp	r1, r3
 800aa2c:	d122      	bne.n	800aa74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	3304      	adds	r3, #4
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe f992 	bl	8008d5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa38:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <xTaskPriorityInherit+0xc4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa46:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <xTaskPriorityInherit+0xcc>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d903      	bls.n	800aa56 <xTaskPriorityInherit+0x7a>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	4a15      	ldr	r2, [pc, #84]	; (800aaa8 <xTaskPriorityInherit+0xcc>)
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4a10      	ldr	r2, [pc, #64]	; (800aaa4 <xTaskPriorityInherit+0xc8>)
 800aa64:	441a      	add	r2, r3
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7fe f918 	bl	8008ca2 <vListInsertEnd>
 800aa72:	e004      	b.n	800aa7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <xTaskPriorityInherit+0xc4>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e008      	b.n	800aa96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <xTaskPriorityInherit+0xc4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d201      	bcs.n	800aa96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa92:	2301      	movs	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa96:	68fb      	ldr	r3, [r7, #12]
	}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20001418 	.word	0x20001418
 800aaa4:	2000141c 	.word	0x2000141c
 800aaa8:	200018f4 	.word	0x200018f4

0800aaac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d056      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aac2:	4b2e      	ldr	r3, [pc, #184]	; (800ab7c <xTaskPriorityDisinherit+0xd0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d00a      	beq.n	800aae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60fb      	str	r3, [r7, #12]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	60bb      	str	r3, [r7, #8]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d02c      	beq.n	800ab70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d128      	bne.n	800ab70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe f91a 	bl	8008d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <xTaskPriorityDisinherit+0xd4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <xTaskPriorityDisinherit+0xa4>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a0c      	ldr	r2, [pc, #48]	; (800ab80 <xTaskPriorityDisinherit+0xd4>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <xTaskPriorityDisinherit+0xd8>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe f89b 	bl	8008ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001418 	.word	0x20001418
 800ab80:	200018f4 	.word	0x200018f4
 800ab84:	2000141c 	.word	0x2000141c

0800ab88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab96:	2301      	movs	r3, #1
 800ab98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d06a      	beq.n	800ac76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d902      	bls.n	800abce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	61fb      	str	r3, [r7, #28]
 800abcc:	e002      	b.n	800abd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d04b      	beq.n	800ac76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d146      	bne.n	800ac76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800abe8:	4b25      	ldr	r3, [pc, #148]	; (800ac80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d10a      	bne.n	800ac08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	60bb      	str	r3, [r7, #8]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	69fa      	ldr	r2, [r7, #28]
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	db04      	blt.n	800ac26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	6959      	ldr	r1, [r3, #20]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4a13      	ldr	r2, [pc, #76]	; (800ac84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac36:	4413      	add	r3, r2
 800ac38:	4299      	cmp	r1, r3
 800ac3a:	d11c      	bne.n	800ac76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe f88b 	bl	8008d5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4a:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d903      	bls.n	800ac5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac56:	4a0c      	ldr	r2, [pc, #48]	; (800ac88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4a07      	ldr	r2, [pc, #28]	; (800ac84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac68:	441a      	add	r2, r3
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe f816 	bl	8008ca2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac76:	bf00      	nop
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20001418 	.word	0x20001418
 800ac84:	2000141c 	.word	0x2000141c
 800ac88:	200018f4 	.word	0x200018f4

0800ac8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac9e:	3201      	adds	r2, #1
 800aca0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800aca2:	4b03      	ldr	r3, [pc, #12]	; (800acb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aca4:	681b      	ldr	r3, [r3, #0]
	}
 800aca6:	4618      	mov	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	20001418 	.word	0x20001418

0800acb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acbe:	4b21      	ldr	r3, [pc, #132]	; (800ad44 <prvAddCurrentTaskToDelayedList+0x90>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acc4:	4b20      	ldr	r3, [pc, #128]	; (800ad48 <prvAddCurrentTaskToDelayedList+0x94>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3304      	adds	r3, #4
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe f846 	bl	8008d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd6:	d10a      	bne.n	800acee <prvAddCurrentTaskToDelayedList+0x3a>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acde:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3304      	adds	r3, #4
 800ace4:	4619      	mov	r1, r3
 800ace6:	4819      	ldr	r0, [pc, #100]	; (800ad4c <prvAddCurrentTaskToDelayedList+0x98>)
 800ace8:	f7fd ffdb 	bl	8008ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acec:	e026      	b.n	800ad3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acf6:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <prvAddCurrentTaskToDelayedList+0x94>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d209      	bcs.n	800ad1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad06:	4b12      	ldr	r3, [pc, #72]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f7fd ffe9 	bl	8008cea <vListInsert>
}
 800ad18:	e010      	b.n	800ad3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad1a:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3304      	adds	r3, #4
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f7fd ffdf 	bl	8008cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad2c:	4b0a      	ldr	r3, [pc, #40]	; (800ad58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d202      	bcs.n	800ad3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad36:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6013      	str	r3, [r2, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	200018f0 	.word	0x200018f0
 800ad48:	20001418 	.word	0x20001418
 800ad4c:	200018d8 	.word	0x200018d8
 800ad50:	200018a8 	.word	0x200018a8
 800ad54:	200018a4 	.word	0x200018a4
 800ad58:	2000190c 	.word	0x2000190c

0800ad5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08a      	sub	sp, #40	; 0x28
 800ad60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad66:	f000 fb07 	bl	800b378 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad6a:	4b1c      	ldr	r3, [pc, #112]	; (800addc <xTimerCreateTimerTask+0x80>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d021      	beq.n	800adb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad7a:	1d3a      	adds	r2, r7, #4
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	f107 030c 	add.w	r3, r7, #12
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fd ff45 	bl	8008c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	9202      	str	r2, [sp, #8]
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	2302      	movs	r3, #2
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	460a      	mov	r2, r1
 800ad9c:	4910      	ldr	r1, [pc, #64]	; (800ade0 <xTimerCreateTimerTask+0x84>)
 800ad9e:	4811      	ldr	r0, [pc, #68]	; (800ade4 <xTimerCreateTimerTask+0x88>)
 800ada0:	f7ff f814 	bl	8009dcc <xTaskCreateStatic>
 800ada4:	4603      	mov	r3, r0
 800ada6:	4a10      	ldr	r2, [pc, #64]	; (800ade8 <xTimerCreateTimerTask+0x8c>)
 800ada8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adaa:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <xTimerCreateTimerTask+0x8c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adb2:	2301      	movs	r3, #1
 800adb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	613b      	str	r3, [r7, #16]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800add2:	697b      	ldr	r3, [r7, #20]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20001948 	.word	0x20001948
 800ade0:	08011a20 	.word	0x08011a20
 800ade4:	0800af21 	.word	0x0800af21
 800ade8:	2000194c 	.word	0x2000194c

0800adec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08a      	sub	sp, #40	; 0x28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	623b      	str	r3, [r7, #32]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae1a:	4b1a      	ldr	r3, [pc, #104]	; (800ae84 <xTimerGenericCommand+0x98>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d02a      	beq.n	800ae78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b05      	cmp	r3, #5
 800ae32:	dc18      	bgt.n	800ae66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae34:	f7ff fdb4 	bl	800a9a0 <xTaskGetSchedulerState>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d109      	bne.n	800ae52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae3e:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <xTimerGenericCommand+0x98>)
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	f107 0110 	add.w	r1, r7, #16
 800ae46:	2300      	movs	r3, #0
 800ae48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4a:	f7fe f959 	bl	8009100 <xQueueGenericSend>
 800ae4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ae50:	e012      	b.n	800ae78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae52:	4b0c      	ldr	r3, [pc, #48]	; (800ae84 <xTimerGenericCommand+0x98>)
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f107 0110 	add.w	r1, r7, #16
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f7fe f94f 	bl	8009100 <xQueueGenericSend>
 800ae62:	6278      	str	r0, [r7, #36]	; 0x24
 800ae64:	e008      	b.n	800ae78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae66:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <xTimerGenericCommand+0x98>)
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	f107 0110 	add.w	r1, r7, #16
 800ae6e:	2300      	movs	r3, #0
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	f7fe fa43 	bl	80092fc <xQueueGenericSendFromISR>
 800ae76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3728      	adds	r7, #40	; 0x28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20001948 	.word	0x20001948

0800ae88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae92:	4b22      	ldr	r3, [pc, #136]	; (800af1c <prvProcessExpiredTimer+0x94>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fd ff5b 	bl	8008d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d022      	beq.n	800aefa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	699a      	ldr	r2, [r3, #24]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	18d1      	adds	r1, r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	6978      	ldr	r0, [r7, #20]
 800aec2:	f000 f8d1 	bl	800b068 <prvInsertTimerInActiveList>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01f      	beq.n	800af0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aecc:	2300      	movs	r3, #0
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	2300      	movs	r3, #0
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	2100      	movs	r1, #0
 800aed6:	6978      	ldr	r0, [r7, #20]
 800aed8:	f7ff ff88 	bl	800adec <xTimerGenericCommand>
 800aedc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d113      	bne.n	800af0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	60fb      	str	r3, [r7, #12]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	6978      	ldr	r0, [r7, #20]
 800af12:	4798      	blx	r3
}
 800af14:	bf00      	nop
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20001940 	.word	0x20001940

0800af20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af28:	f107 0308 	add.w	r3, r7, #8
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 f857 	bl	800afe0 <prvGetNextExpireTime>
 800af32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	4619      	mov	r1, r3
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 f803 	bl	800af44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af3e:	f000 f8d5 	bl	800b0ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af42:	e7f1      	b.n	800af28 <prvTimerTask+0x8>

0800af44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af4e:	f7ff f945 	bl	800a1dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af52:	f107 0308 	add.w	r3, r7, #8
 800af56:	4618      	mov	r0, r3
 800af58:	f000 f866 	bl	800b028 <prvSampleTimeNow>
 800af5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d130      	bne.n	800afc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <prvProcessTimerOrBlockTask+0x3c>
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d806      	bhi.n	800af80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af72:	f7ff f941 	bl	800a1f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff ff85 	bl	800ae88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af7e:	e024      	b.n	800afca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d008      	beq.n	800af98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af86:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <prvProcessTimerOrBlockTask+0x90>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <prvProcessTimerOrBlockTask+0x50>
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <prvProcessTimerOrBlockTask+0x52>
 800af94:	2300      	movs	r3, #0
 800af96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af98:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <prvProcessTimerOrBlockTask+0x94>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	4619      	mov	r1, r3
 800afa6:	f7fe fedd 	bl	8009d64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afaa:	f7ff f925 	bl	800a1f8 <xTaskResumeAll>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afb4:	4b09      	ldr	r3, [pc, #36]	; (800afdc <prvProcessTimerOrBlockTask+0x98>)
 800afb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	f3bf 8f6f 	isb	sy
}
 800afc4:	e001      	b.n	800afca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afc6:	f7ff f917 	bl	800a1f8 <xTaskResumeAll>
}
 800afca:	bf00      	nop
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20001944 	.word	0x20001944
 800afd8:	20001948 	.word	0x20001948
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afe8:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <prvGetNextExpireTime+0x44>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <prvGetNextExpireTime+0x16>
 800aff2:	2201      	movs	r2, #1
 800aff4:	e000      	b.n	800aff8 <prvGetNextExpireTime+0x18>
 800aff6:	2200      	movs	r2, #0
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d105      	bne.n	800b010 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b004:	4b07      	ldr	r3, [pc, #28]	; (800b024 <prvGetNextExpireTime+0x44>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e001      	b.n	800b014 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b014:	68fb      	ldr	r3, [r7, #12]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20001940 	.word	0x20001940

0800b028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b030:	f7ff f980 	bl	800a334 <xTaskGetTickCount>
 800b034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <prvSampleTimeNow+0x3c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d205      	bcs.n	800b04c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b040:	f000 f936 	bl	800b2b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	e002      	b.n	800b052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b052:	4a04      	ldr	r2, [pc, #16]	; (800b064 <prvSampleTimeNow+0x3c>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b058:	68fb      	ldr	r3, [r7, #12]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20001950 	.word	0x20001950

0800b068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d812      	bhi.n	800b0b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	1ad2      	subs	r2, r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d302      	bcc.n	800b0a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e01b      	b.n	800b0da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0a2:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <prvInsertTimerInActiveList+0x7c>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7fd fe1c 	bl	8008cea <vListInsert>
 800b0b2:	e012      	b.n	800b0da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d206      	bcs.n	800b0ca <prvInsertTimerInActiveList+0x62>
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d302      	bcc.n	800b0ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e007      	b.n	800b0da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <prvInsertTimerInActiveList+0x80>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7fd fe08 	bl	8008cea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0da:	697b      	ldr	r3, [r7, #20]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20001944 	.word	0x20001944
 800b0e8:	20001940 	.word	0x20001940

0800b0ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08e      	sub	sp, #56	; 0x38
 800b0f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0f2:	e0ca      	b.n	800b28a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da18      	bge.n	800b12c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0fa:	1d3b      	adds	r3, r7, #4
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	61fb      	str	r3, [r7, #28]
}
 800b118:	bf00      	nop
 800b11a:	e7fe      	b.n	800b11a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b122:	6850      	ldr	r0, [r2, #4]
 800b124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b126:	6892      	ldr	r2, [r2, #8]
 800b128:	4611      	mov	r1, r2
 800b12a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f2c0 80aa 	blt.w	800b288 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d004      	beq.n	800b14a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	3304      	adds	r3, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd fe09 	bl	8008d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b14a:	463b      	mov	r3, r7
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff ff6b 	bl	800b028 <prvSampleTimeNow>
 800b152:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b09      	cmp	r3, #9
 800b158:	f200 8097 	bhi.w	800b28a <prvProcessReceivedCommands+0x19e>
 800b15c:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <prvProcessReceivedCommands+0x78>)
 800b15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b162:	bf00      	nop
 800b164:	0800b18d 	.word	0x0800b18d
 800b168:	0800b18d 	.word	0x0800b18d
 800b16c:	0800b18d 	.word	0x0800b18d
 800b170:	0800b201 	.word	0x0800b201
 800b174:	0800b215 	.word	0x0800b215
 800b178:	0800b25f 	.word	0x0800b25f
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b18d 	.word	0x0800b18d
 800b184:	0800b201 	.word	0x0800b201
 800b188:	0800b215 	.word	0x0800b215
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b192:	f043 0301 	orr.w	r3, r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	18d1      	adds	r1, r2, r3
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ac:	f7ff ff5c 	bl	800b068 <prvInsertTimerInActiveList>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d069      	beq.n	800b28a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1c4:	f003 0304 	and.w	r3, r3, #4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05e      	beq.n	800b28a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1de:	f7ff fe05 	bl	800adec <xTimerGenericCommand>
 800b1e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d14f      	bne.n	800b28a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	61bb      	str	r3, [r7, #24]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b206:	f023 0301 	bic.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b212:	e03a      	b.n	800b28a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b21a:	f043 0301 	orr.w	r3, r3, #1
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	617b      	str	r3, [r7, #20]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	699a      	ldr	r2, [r3, #24]
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	18d1      	adds	r1, r2, r3
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b258:	f7ff ff06 	bl	800b068 <prvInsertTimerInActiveList>
					break;
 800b25c:	e015      	b.n	800b28a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d103      	bne.n	800b274 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26e:	f000 fbdf 	bl	800ba30 <vPortFree>
 800b272:	e00a      	b.n	800b28a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b286:	e000      	b.n	800b28a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b28a:	4b08      	ldr	r3, [pc, #32]	; (800b2ac <prvProcessReceivedCommands+0x1c0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	1d39      	adds	r1, r7, #4
 800b290:	2200      	movs	r2, #0
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe f95a 	bl	800954c <xQueueReceive>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f47f af2a 	bne.w	800b0f4 <prvProcessReceivedCommands+0x8>
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	3730      	adds	r7, #48	; 0x30
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20001948 	.word	0x20001948

0800b2b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2b6:	e048      	b.n	800b34a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2b8:	4b2d      	ldr	r3, [pc, #180]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c2:	4b2b      	ldr	r3, [pc, #172]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fd fd43 	bl	8008d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e4:	f003 0304 	and.w	r3, r3, #4
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d02e      	beq.n	800b34a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d90e      	bls.n	800b31c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b30a:	4b19      	ldr	r3, [pc, #100]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3304      	adds	r3, #4
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fd fce8 	bl	8008cea <vListInsert>
 800b31a:	e016      	b.n	800b34a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b31c:	2300      	movs	r3, #0
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	2300      	movs	r3, #0
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7ff fd60 	bl	800adec <xTimerGenericCommand>
 800b32c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	603b      	str	r3, [r7, #0]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1b1      	bne.n	800b2b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b354:	4b06      	ldr	r3, [pc, #24]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b35a:	4b06      	ldr	r3, [pc, #24]	; (800b374 <prvSwitchTimerLists+0xc4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a04      	ldr	r2, [pc, #16]	; (800b370 <prvSwitchTimerLists+0xc0>)
 800b360:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b362:	4a04      	ldr	r2, [pc, #16]	; (800b374 <prvSwitchTimerLists+0xc4>)
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	6013      	str	r3, [r2, #0]
}
 800b368:	bf00      	nop
 800b36a:	3718      	adds	r7, #24
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20001940 	.word	0x20001940
 800b374:	20001944 	.word	0x20001944

0800b378 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b37e:	f000 f969 	bl	800b654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b382:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <prvCheckForValidListAndQueue+0x60>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d120      	bne.n	800b3cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b38a:	4814      	ldr	r0, [pc, #80]	; (800b3dc <prvCheckForValidListAndQueue+0x64>)
 800b38c:	f7fd fc5c 	bl	8008c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b390:	4813      	ldr	r0, [pc, #76]	; (800b3e0 <prvCheckForValidListAndQueue+0x68>)
 800b392:	f7fd fc59 	bl	8008c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b396:	4b13      	ldr	r3, [pc, #76]	; (800b3e4 <prvCheckForValidListAndQueue+0x6c>)
 800b398:	4a10      	ldr	r2, [pc, #64]	; (800b3dc <prvCheckForValidListAndQueue+0x64>)
 800b39a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b39c:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <prvCheckForValidListAndQueue+0x70>)
 800b39e:	4a10      	ldr	r2, [pc, #64]	; (800b3e0 <prvCheckForValidListAndQueue+0x68>)
 800b3a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <prvCheckForValidListAndQueue+0x74>)
 800b3a8:	4a11      	ldr	r2, [pc, #68]	; (800b3f0 <prvCheckForValidListAndQueue+0x78>)
 800b3aa:	2110      	movs	r1, #16
 800b3ac:	200a      	movs	r0, #10
 800b3ae:	f7fd fd67 	bl	8008e80 <xQueueGenericCreateStatic>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4a08      	ldr	r2, [pc, #32]	; (800b3d8 <prvCheckForValidListAndQueue+0x60>)
 800b3b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3b8:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <prvCheckForValidListAndQueue+0x60>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <prvCheckForValidListAndQueue+0x60>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	490b      	ldr	r1, [pc, #44]	; (800b3f4 <prvCheckForValidListAndQueue+0x7c>)
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fc78 	bl	8009cbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3cc:	f000 f972 	bl	800b6b4 <vPortExitCritical>
}
 800b3d0:	bf00      	nop
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20001948 	.word	0x20001948
 800b3dc:	20001918 	.word	0x20001918
 800b3e0:	2000192c 	.word	0x2000192c
 800b3e4:	20001940 	.word	0x20001940
 800b3e8:	20001944 	.word	0x20001944
 800b3ec:	200019f4 	.word	0x200019f4
 800b3f0:	20001954 	.word	0x20001954
 800b3f4:	08011a28 	.word	0x08011a28

0800b3f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3b04      	subs	r3, #4
 800b408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3b04      	subs	r3, #4
 800b416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f023 0201 	bic.w	r2, r3, #1
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3b04      	subs	r3, #4
 800b426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b428:	4a0c      	ldr	r2, [pc, #48]	; (800b45c <pxPortInitialiseStack+0x64>)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b14      	subs	r3, #20
 800b432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f06f 0202 	mvn.w	r2, #2
 800b446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3b20      	subs	r3, #32
 800b44c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b44e:	68fb      	ldr	r3, [r7, #12]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	0800b461 	.word	0x0800b461

0800b460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <prvTaskExitError+0x54>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b472:	d00a      	beq.n	800b48a <prvTaskExitError+0x2a>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	60fb      	str	r3, [r7, #12]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <prvTaskExitError+0x28>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	60bb      	str	r3, [r7, #8]
}
 800b49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b49e:	bf00      	nop
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0fc      	beq.n	800b4a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	2000001c 	.word	0x2000001c
	...

0800b4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <pxCurrentTCBConst2>)
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	6808      	ldr	r0, [r1, #0]
 800b4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ca:	f380 8809 	msr	PSP, r0
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f380 8811 	msr	BASEPRI, r0
 800b4da:	4770      	bx	lr
 800b4dc:	f3af 8000 	nop.w

0800b4e0 <pxCurrentTCBConst2>:
 800b4e0:	20001418 	.word	0x20001418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop

0800b4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4e8:	4808      	ldr	r0, [pc, #32]	; (800b50c <prvPortStartFirstTask+0x24>)
 800b4ea:	6800      	ldr	r0, [r0, #0]
 800b4ec:	6800      	ldr	r0, [r0, #0]
 800b4ee:	f380 8808 	msr	MSP, r0
 800b4f2:	f04f 0000 	mov.w	r0, #0
 800b4f6:	f380 8814 	msr	CONTROL, r0
 800b4fa:	b662      	cpsie	i
 800b4fc:	b661      	cpsie	f
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	df00      	svc	0
 800b508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b50a:	bf00      	nop
 800b50c:	e000ed08 	.word	0xe000ed08

0800b510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b516:	4b46      	ldr	r3, [pc, #280]	; (800b630 <xPortStartScheduler+0x120>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a46      	ldr	r2, [pc, #280]	; (800b634 <xPortStartScheduler+0x124>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10a      	bne.n	800b536 <xPortStartScheduler+0x26>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b536:	4b3e      	ldr	r3, [pc, #248]	; (800b630 <xPortStartScheduler+0x120>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a3f      	ldr	r2, [pc, #252]	; (800b638 <xPortStartScheduler+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d10a      	bne.n	800b556 <xPortStartScheduler+0x46>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60fb      	str	r3, [r7, #12]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b556:	4b39      	ldr	r3, [pc, #228]	; (800b63c <xPortStartScheduler+0x12c>)
 800b558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b31      	ldr	r3, [pc, #196]	; (800b640 <xPortStartScheduler+0x130>)
 800b57c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b57e:	4b31      	ldr	r3, [pc, #196]	; (800b644 <xPortStartScheduler+0x134>)
 800b580:	2207      	movs	r2, #7
 800b582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b584:	e009      	b.n	800b59a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b586:	4b2f      	ldr	r3, [pc, #188]	; (800b644 <xPortStartScheduler+0x134>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4a2d      	ldr	r2, [pc, #180]	; (800b644 <xPortStartScheduler+0x134>)
 800b58e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d0ef      	beq.n	800b586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5a6:	4b27      	ldr	r3, [pc, #156]	; (800b644 <xPortStartScheduler+0x134>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1c3 0307 	rsb	r3, r3, #7
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d00a      	beq.n	800b5c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60bb      	str	r3, [r7, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <xPortStartScheduler+0x134>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5da:	4a1a      	ldr	r2, [pc, #104]	; (800b644 <xPortStartScheduler+0x134>)
 800b5dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5e6:	4b18      	ldr	r3, [pc, #96]	; (800b648 <xPortStartScheduler+0x138>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <xPortStartScheduler+0x138>)
 800b5ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a14      	ldr	r2, [pc, #80]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5fe:	f000 f8dd 	bl	800b7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <xPortStartScheduler+0x13c>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b608:	f000 f8fc 	bl	800b804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <xPortStartScheduler+0x140>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <xPortStartScheduler+0x140>)
 800b612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b618:	f7ff ff66 	bl	800b4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b61c:	f7fe ff54 	bl	800a4c8 <vTaskSwitchContext>
	prvTaskExitError();
 800b620:	f7ff ff1e 	bl	800b460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	e000ed00 	.word	0xe000ed00
 800b634:	410fc271 	.word	0x410fc271
 800b638:	410fc270 	.word	0x410fc270
 800b63c:	e000e400 	.word	0xe000e400
 800b640:	20001a44 	.word	0x20001a44
 800b644:	20001a48 	.word	0x20001a48
 800b648:	e000ed20 	.word	0xe000ed20
 800b64c:	2000001c 	.word	0x2000001c
 800b650:	e000ef34 	.word	0xe000ef34

0800b654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	607b      	str	r3, [r7, #4]
}
 800b66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <vPortEnterCritical+0x58>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <vPortEnterCritical+0x58>)
 800b676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b678:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <vPortEnterCritical+0x58>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d10f      	bne.n	800b6a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <vPortEnterCritical+0x5c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	603b      	str	r3, [r7, #0]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vPortEnterCritical+0x4a>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	2000001c 	.word	0x2000001c
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ba:	4b12      	ldr	r3, [pc, #72]	; (800b704 <vPortExitCritical+0x50>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <vPortExitCritical+0x24>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	607b      	str	r3, [r7, #4]
}
 800b6d4:	bf00      	nop
 800b6d6:	e7fe      	b.n	800b6d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6d8:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <vPortExitCritical+0x50>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4a09      	ldr	r2, [pc, #36]	; (800b704 <vPortExitCritical+0x50>)
 800b6e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e2:	4b08      	ldr	r3, [pc, #32]	; (800b704 <vPortExitCritical+0x50>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <vPortExitCritical+0x42>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	f383 8811 	msr	BASEPRI, r3
}
 800b6f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2000001c 	.word	0x2000001c
	...

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b734:	f380 8811 	msr	BASEPRI, r0
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f7fe fec2 	bl	800a4c8 <vTaskSwitchContext>
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	f380 8811 	msr	BASEPRI, r0
 800b74c:	bc09      	pop	{r0, r3}
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b756:	f01e 0f10 	tst.w	lr, #16
 800b75a:	bf08      	it	eq
 800b75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b760:	f380 8809 	msr	PSP, r0
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst>:
 800b770:	20001418 	.word	0x20001418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	607b      	str	r3, [r7, #4]
}
 800b790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b792:	f7fe fddf 	bl	800a354 <xTaskIncrementTick>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <xPortSysTickHandler+0x40>)
 800b79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f383 8811 	msr	BASEPRI, r3
}
 800b7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <vPortSetupTimerInterrupt+0x38>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <vPortSetupTimerInterrupt+0x3c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0a      	ldr	r2, [pc, #40]	; (800b7fc <vPortSetupTimerInterrupt+0x40>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	099b      	lsrs	r3, r3, #6
 800b7d8:	4a09      	ldr	r2, [pc, #36]	; (800b800 <vPortSetupTimerInterrupt+0x44>)
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7de:	4b04      	ldr	r3, [pc, #16]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7e0:	2207      	movs	r2, #7
 800b7e2:	601a      	str	r2, [r3, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	e000e010 	.word	0xe000e010
 800b7f4:	e000e018 	.word	0xe000e018
 800b7f8:	20000010 	.word	0x20000010
 800b7fc:	10624dd3 	.word	0x10624dd3
 800b800:	e000e014 	.word	0xe000e014

0800b804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b814 <vPortEnableVFP+0x10>
 800b808:	6801      	ldr	r1, [r0, #0]
 800b80a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b80e:	6001      	str	r1, [r0, #0]
 800b810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b812:	bf00      	nop
 800b814:	e000ed88 	.word	0xe000ed88

0800b818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b81e:	f3ef 8305 	mrs	r3, IPSR
 800b822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b0f      	cmp	r3, #15
 800b828:	d914      	bls.n	800b854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b82a:	4a17      	ldr	r2, [pc, #92]	; (800b888 <vPortValidateInterruptPriority+0x70>)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b834:	4b15      	ldr	r3, [pc, #84]	; (800b88c <vPortValidateInterruptPriority+0x74>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	7afa      	ldrb	r2, [r7, #11]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d20a      	bcs.n	800b854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	607b      	str	r3, [r7, #4]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b854:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <vPortValidateInterruptPriority+0x78>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <vPortValidateInterruptPriority+0x7c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d90a      	bls.n	800b87a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	603b      	str	r3, [r7, #0]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <vPortValidateInterruptPriority+0x60>
	}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	e000e3f0 	.word	0xe000e3f0
 800b88c:	20001a44 	.word	0x20001a44
 800b890:	e000ed0c 	.word	0xe000ed0c
 800b894:	20001a48 	.word	0x20001a48

0800b898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8a4:	f7fe fc9a 	bl	800a1dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8a8:	4b5b      	ldr	r3, [pc, #364]	; (800ba18 <pvPortMalloc+0x180>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8b0:	f000 f920 	bl	800baf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8b4:	4b59      	ldr	r3, [pc, #356]	; (800ba1c <pvPortMalloc+0x184>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 8093 	bne.w	800b9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01d      	beq.n	800b904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d014      	beq.n	800b904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	617b      	str	r3, [r7, #20]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d06e      	beq.n	800b9e8 <pvPortMalloc+0x150>
 800b90a:	4b45      	ldr	r3, [pc, #276]	; (800ba20 <pvPortMalloc+0x188>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d869      	bhi.n	800b9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b914:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <pvPortMalloc+0x18c>)
 800b916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b918:	4b42      	ldr	r3, [pc, #264]	; (800ba24 <pvPortMalloc+0x18c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b91e:	e004      	b.n	800b92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d903      	bls.n	800b93c <pvPortMalloc+0xa4>
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1f1      	bne.n	800b920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b93c:	4b36      	ldr	r3, [pc, #216]	; (800ba18 <pvPortMalloc+0x180>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b942:	429a      	cmp	r2, r3
 800b944:	d050      	beq.n	800b9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2208      	movs	r2, #8
 800b94c:	4413      	add	r3, r2
 800b94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	2308      	movs	r3, #8
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	429a      	cmp	r2, r3
 800b966:	d91f      	bls.n	800b9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <pvPortMalloc+0xf8>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	613b      	str	r3, [r7, #16]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	1ad2      	subs	r2, r2, r3
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f000 f908 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <pvPortMalloc+0x188>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <pvPortMalloc+0x190>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d203      	bcs.n	800b9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9c2:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <pvPortMalloc+0x188>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a18      	ldr	r2, [pc, #96]	; (800ba28 <pvPortMalloc+0x190>)
 800b9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <pvPortMalloc+0x184>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9e8:	f7fe fc06 	bl	800a1f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <pvPortMalloc+0x174>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <pvPortMalloc+0x172>
	return pvReturn;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3728      	adds	r7, #40	; 0x28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20006874 	.word	0x20006874
 800ba1c:	20006888 	.word	0x20006888
 800ba20:	20006878 	.word	0x20006878
 800ba24:	2000686c 	.word	0x2000686c
 800ba28:	2000687c 	.word	0x2000687c
 800ba2c:	20006880 	.word	0x20006880

0800ba30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d04d      	beq.n	800bade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba42:	2308      	movs	r3, #8
 800ba44:	425b      	negs	r3, r3
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4413      	add	r3, r2
 800ba4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <vPortFree+0xb8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <vPortFree+0x44>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60fb      	str	r3, [r7, #12]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <vPortFree+0x62>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60bb      	str	r3, [r7, #8]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <vPortFree+0xb8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01e      	beq.n	800bade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11a      	bne.n	800bade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <vPortFree+0xb8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	43db      	mvns	r3, r3
 800bab2:	401a      	ands	r2, r3
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bab8:	f7fe fb90 	bl	800a1dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <vPortFree+0xbc>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4413      	add	r3, r2
 800bac6:	4a09      	ldr	r2, [pc, #36]	; (800baec <vPortFree+0xbc>)
 800bac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baca:	6938      	ldr	r0, [r7, #16]
 800bacc:	f000 f874 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <vPortFree+0xc0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <vPortFree+0xc0>)
 800bad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bada:	f7fe fb8d 	bl	800a1f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bade:	bf00      	nop
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	20006888 	.word	0x20006888
 800baec:	20006878 	.word	0x20006878
 800baf0:	20006884 	.word	0x20006884

0800baf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bafa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <prvHeapInit+0xac>)
 800bb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00c      	beq.n	800bb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvHeapInit+0xac>)
 800bb24:	4413      	add	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <prvHeapInit+0xb0>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb32:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <prvHeapInit+0xb0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb40:	2208      	movs	r2, #8
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a15      	ldr	r2, [pc, #84]	; (800bba8 <prvHeapInit+0xb4>)
 800bb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvHeapInit+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvHeapInit+0xb4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvHeapInit+0xb4>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <prvHeapInit+0xb8>)
 800bb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <prvHeapInit+0xbc>)
 800bb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <prvHeapInit+0xc0>)
 800bb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20001a4c 	.word	0x20001a4c
 800bba4:	2000686c 	.word	0x2000686c
 800bba8:	20006874 	.word	0x20006874
 800bbac:	2000687c 	.word	0x2000687c
 800bbb0:	20006878 	.word	0x20006878
 800bbb4:	20006888 	.word	0x20006888

0800bbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbc0:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <prvInsertBlockIntoFreeList+0xac>)
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e002      	b.n	800bbcc <prvInsertBlockIntoFreeList+0x14>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d8f7      	bhi.n	800bbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d108      	bne.n	800bbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	441a      	add	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d118      	bne.n	800bc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d00d      	beq.n	800bc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	441a      	add	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e008      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e003      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d002      	beq.n	800bc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	2000686c 	.word	0x2000686c
 800bc68:	20006874 	.word	0x20006874

0800bc6c <__errno>:
 800bc6c:	4b01      	ldr	r3, [pc, #4]	; (800bc74 <__errno+0x8>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20000020 	.word	0x20000020

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4d0d      	ldr	r5, [pc, #52]	; (800bcb0 <__libc_init_array+0x38>)
 800bc7c:	4c0d      	ldr	r4, [pc, #52]	; (800bcb4 <__libc_init_array+0x3c>)
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	2600      	movs	r6, #0
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	4d0b      	ldr	r5, [pc, #44]	; (800bcb8 <__libc_init_array+0x40>)
 800bc8a:	4c0c      	ldr	r4, [pc, #48]	; (800bcbc <__libc_init_array+0x44>)
 800bc8c:	f005 fe28 	bl	80118e0 <_init>
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	2600      	movs	r6, #0
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	0801215c 	.word	0x0801215c
 800bcb4:	0801215c 	.word	0x0801215c
 800bcb8:	0801215c 	.word	0x0801215c
 800bcbc:	08012160 	.word	0x08012160

0800bcc0 <memcpy>:
 800bcc0:	440a      	add	r2, r1
 800bcc2:	4291      	cmp	r1, r2
 800bcc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcc8:	d100      	bne.n	800bccc <memcpy+0xc>
 800bcca:	4770      	bx	lr
 800bccc:	b510      	push	{r4, lr}
 800bcce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcd6:	4291      	cmp	r1, r2
 800bcd8:	d1f9      	bne.n	800bcce <memcpy+0xe>
 800bcda:	bd10      	pop	{r4, pc}

0800bcdc <memset>:
 800bcdc:	4402      	add	r2, r0
 800bcde:	4603      	mov	r3, r0
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d100      	bne.n	800bce6 <memset+0xa>
 800bce4:	4770      	bx	lr
 800bce6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcea:	e7f9      	b.n	800bce0 <memset+0x4>

0800bcec <validate_structure>:
 800bcec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcee:	6801      	ldr	r1, [r0, #0]
 800bcf0:	293b      	cmp	r1, #59	; 0x3b
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	d911      	bls.n	800bd1a <validate_structure+0x2e>
 800bcf6:	223c      	movs	r2, #60	; 0x3c
 800bcf8:	4668      	mov	r0, sp
 800bcfa:	f002 fb37 	bl	800e36c <div>
 800bcfe:	9a01      	ldr	r2, [sp, #4]
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	9900      	ldr	r1, [sp, #0]
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	440b      	add	r3, r1
 800bd08:	6063      	str	r3, [r4, #4]
 800bd0a:	bfbb      	ittet	lt
 800bd0c:	323c      	addlt	r2, #60	; 0x3c
 800bd0e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bd12:	6022      	strge	r2, [r4, #0]
 800bd14:	6022      	strlt	r2, [r4, #0]
 800bd16:	bfb8      	it	lt
 800bd18:	6063      	strlt	r3, [r4, #4]
 800bd1a:	6861      	ldr	r1, [r4, #4]
 800bd1c:	293b      	cmp	r1, #59	; 0x3b
 800bd1e:	d911      	bls.n	800bd44 <validate_structure+0x58>
 800bd20:	223c      	movs	r2, #60	; 0x3c
 800bd22:	4668      	mov	r0, sp
 800bd24:	f002 fb22 	bl	800e36c <div>
 800bd28:	9a01      	ldr	r2, [sp, #4]
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	9900      	ldr	r1, [sp, #0]
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	440b      	add	r3, r1
 800bd32:	60a3      	str	r3, [r4, #8]
 800bd34:	bfbb      	ittet	lt
 800bd36:	323c      	addlt	r2, #60	; 0x3c
 800bd38:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bd3c:	6062      	strge	r2, [r4, #4]
 800bd3e:	6062      	strlt	r2, [r4, #4]
 800bd40:	bfb8      	it	lt
 800bd42:	60a3      	strlt	r3, [r4, #8]
 800bd44:	68a1      	ldr	r1, [r4, #8]
 800bd46:	2917      	cmp	r1, #23
 800bd48:	d911      	bls.n	800bd6e <validate_structure+0x82>
 800bd4a:	2218      	movs	r2, #24
 800bd4c:	4668      	mov	r0, sp
 800bd4e:	f002 fb0d 	bl	800e36c <div>
 800bd52:	9a01      	ldr	r2, [sp, #4]
 800bd54:	68e3      	ldr	r3, [r4, #12]
 800bd56:	9900      	ldr	r1, [sp, #0]
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	440b      	add	r3, r1
 800bd5c:	60e3      	str	r3, [r4, #12]
 800bd5e:	bfbb      	ittet	lt
 800bd60:	3218      	addlt	r2, #24
 800bd62:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bd66:	60a2      	strge	r2, [r4, #8]
 800bd68:	60a2      	strlt	r2, [r4, #8]
 800bd6a:	bfb8      	it	lt
 800bd6c:	60e3      	strlt	r3, [r4, #12]
 800bd6e:	6921      	ldr	r1, [r4, #16]
 800bd70:	290b      	cmp	r1, #11
 800bd72:	d911      	bls.n	800bd98 <validate_structure+0xac>
 800bd74:	220c      	movs	r2, #12
 800bd76:	4668      	mov	r0, sp
 800bd78:	f002 faf8 	bl	800e36c <div>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	6963      	ldr	r3, [r4, #20]
 800bd80:	9900      	ldr	r1, [sp, #0]
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	440b      	add	r3, r1
 800bd86:	6163      	str	r3, [r4, #20]
 800bd88:	bfbb      	ittet	lt
 800bd8a:	320c      	addlt	r2, #12
 800bd8c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bd90:	6122      	strge	r2, [r4, #16]
 800bd92:	6122      	strlt	r2, [r4, #16]
 800bd94:	bfb8      	it	lt
 800bd96:	6163      	strlt	r3, [r4, #20]
 800bd98:	6963      	ldr	r3, [r4, #20]
 800bd9a:	0798      	lsls	r0, r3, #30
 800bd9c:	d120      	bne.n	800bde0 <validate_structure+0xf4>
 800bd9e:	2164      	movs	r1, #100	; 0x64
 800bda0:	fb93 f2f1 	sdiv	r2, r3, r1
 800bda4:	fb01 3212 	mls	r2, r1, r2, r3
 800bda8:	b9e2      	cbnz	r2, 800bde4 <validate_structure+0xf8>
 800bdaa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800bdae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bdb2:	fb93 f1f2 	sdiv	r1, r3, r2
 800bdb6:	fb02 3311 	mls	r3, r2, r1, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bf14      	ite	ne
 800bdbe:	231c      	movne	r3, #28
 800bdc0:	231d      	moveq	r3, #29
 800bdc2:	68e2      	ldr	r2, [r4, #12]
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	dc0f      	bgt.n	800bde8 <validate_structure+0xfc>
 800bdc8:	4f33      	ldr	r7, [pc, #204]	; (800be98 <validate_structure+0x1ac>)
 800bdca:	260b      	movs	r6, #11
 800bdcc:	2064      	movs	r0, #100	; 0x64
 800bdce:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bdd2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bdd6:	f1bc 0f00 	cmp.w	ip, #0
 800bdda:	dd31      	ble.n	800be40 <validate_structure+0x154>
 800bddc:	b003      	add	sp, #12
 800bdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde0:	231c      	movs	r3, #28
 800bde2:	e7ee      	b.n	800bdc2 <validate_structure+0xd6>
 800bde4:	231d      	movs	r3, #29
 800bde6:	e7ec      	b.n	800bdc2 <validate_structure+0xd6>
 800bde8:	4e2b      	ldr	r6, [pc, #172]	; (800be98 <validate_structure+0x1ac>)
 800bdea:	2700      	movs	r7, #0
 800bdec:	2064      	movs	r0, #100	; 0x64
 800bdee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bdf2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bdf6:	2a01      	cmp	r2, #1
 800bdf8:	bf14      	ite	ne
 800bdfa:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800bdfe:	469c      	moveq	ip, r3
 800be00:	4561      	cmp	r1, ip
 800be02:	ddeb      	ble.n	800bddc <validate_structure+0xf0>
 800be04:	3201      	adds	r2, #1
 800be06:	eba1 010c 	sub.w	r1, r1, ip
 800be0a:	2a0c      	cmp	r2, #12
 800be0c:	60e1      	str	r1, [r4, #12]
 800be0e:	6122      	str	r2, [r4, #16]
 800be10:	d1ef      	bne.n	800bdf2 <validate_structure+0x106>
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	0791      	lsls	r1, r2, #30
 800be18:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800be1c:	d137      	bne.n	800be8e <validate_structure+0x1a2>
 800be1e:	fb92 f1f0 	sdiv	r1, r2, r0
 800be22:	fb00 2211 	mls	r2, r0, r1, r2
 800be26:	2a00      	cmp	r2, #0
 800be28:	d133      	bne.n	800be92 <validate_structure+0x1a6>
 800be2a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800be2e:	fb93 f2f5 	sdiv	r2, r3, r5
 800be32:	fb05 3312 	mls	r3, r5, r2, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	bf14      	ite	ne
 800be3a:	231c      	movne	r3, #28
 800be3c:	231d      	moveq	r3, #29
 800be3e:	e7d8      	b.n	800bdf2 <validate_structure+0x106>
 800be40:	6921      	ldr	r1, [r4, #16]
 800be42:	3901      	subs	r1, #1
 800be44:	6121      	str	r1, [r4, #16]
 800be46:	3101      	adds	r1, #1
 800be48:	d114      	bne.n	800be74 <validate_structure+0x188>
 800be4a:	6963      	ldr	r3, [r4, #20]
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	0791      	lsls	r1, r2, #30
 800be50:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800be54:	d117      	bne.n	800be86 <validate_structure+0x19a>
 800be56:	fb92 f1f0 	sdiv	r1, r2, r0
 800be5a:	fb00 2211 	mls	r2, r0, r1, r2
 800be5e:	b9a2      	cbnz	r2, 800be8a <validate_structure+0x19e>
 800be60:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800be64:	fb93 f2f5 	sdiv	r2, r3, r5
 800be68:	fb05 3312 	mls	r3, r5, r2, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bf14      	ite	ne
 800be70:	231c      	movne	r3, #28
 800be72:	231d      	moveq	r3, #29
 800be74:	6922      	ldr	r2, [r4, #16]
 800be76:	2a01      	cmp	r2, #1
 800be78:	bf14      	ite	ne
 800be7a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800be7e:	461a      	moveq	r2, r3
 800be80:	4462      	add	r2, ip
 800be82:	60e2      	str	r2, [r4, #12]
 800be84:	e7a5      	b.n	800bdd2 <validate_structure+0xe6>
 800be86:	231c      	movs	r3, #28
 800be88:	e7f4      	b.n	800be74 <validate_structure+0x188>
 800be8a:	231d      	movs	r3, #29
 800be8c:	e7f2      	b.n	800be74 <validate_structure+0x188>
 800be8e:	231c      	movs	r3, #28
 800be90:	e7af      	b.n	800bdf2 <validate_structure+0x106>
 800be92:	231d      	movs	r3, #29
 800be94:	e7ad      	b.n	800bdf2 <validate_structure+0x106>
 800be96:	bf00      	nop
 800be98:	08011ba0 	.word	0x08011ba0

0800be9c <mktime>:
 800be9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea0:	b085      	sub	sp, #20
 800bea2:	4607      	mov	r7, r0
 800bea4:	f003 fca6 	bl	800f7f4 <__gettzinfo>
 800bea8:	4681      	mov	r9, r0
 800beaa:	4638      	mov	r0, r7
 800beac:	f7ff ff1e 	bl	800bcec <validate_structure>
 800beb0:	e9d7 4000 	ldrd	r4, r0, [r7]
 800beb4:	233c      	movs	r3, #60	; 0x3c
 800beb6:	fb03 4400 	mla	r4, r3, r0, r4
 800beba:	68b8      	ldr	r0, [r7, #8]
 800bebc:	4abc      	ldr	r2, [pc, #752]	; (800c1b0 <mktime+0x314>)
 800bebe:	697e      	ldr	r6, [r7, #20]
 800bec0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bec4:	fb03 4400 	mla	r4, r3, r0, r4
 800bec8:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800becc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bed0:	3d01      	subs	r5, #1
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	4415      	add	r5, r2
 800bed6:	dd11      	ble.n	800befc <mktime+0x60>
 800bed8:	07b1      	lsls	r1, r6, #30
 800beda:	d10f      	bne.n	800befc <mktime+0x60>
 800bedc:	2264      	movs	r2, #100	; 0x64
 800bede:	fb96 f3f2 	sdiv	r3, r6, r2
 800bee2:	fb02 6313 	mls	r3, r2, r3, r6
 800bee6:	b943      	cbnz	r3, 800befa <mktime+0x5e>
 800bee8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800beec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bef0:	fb93 f1f2 	sdiv	r1, r3, r2
 800bef4:	fb02 3311 	mls	r3, r2, r1, r3
 800bef8:	b903      	cbnz	r3, 800befc <mktime+0x60>
 800befa:	3501      	adds	r5, #1
 800befc:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800bf00:	3310      	adds	r3, #16
 800bf02:	f644 6220 	movw	r2, #20000	; 0x4e20
 800bf06:	4293      	cmp	r3, r2
 800bf08:	61fd      	str	r5, [r7, #28]
 800bf0a:	f200 815d 	bhi.w	800c1c8 <mktime+0x32c>
 800bf0e:	2e46      	cmp	r6, #70	; 0x46
 800bf10:	dd71      	ble.n	800bff6 <mktime+0x15a>
 800bf12:	2346      	movs	r3, #70	; 0x46
 800bf14:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bf18:	2164      	movs	r1, #100	; 0x64
 800bf1a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bf1e:	079a      	lsls	r2, r3, #30
 800bf20:	d163      	bne.n	800bfea <mktime+0x14e>
 800bf22:	fb93 f2f1 	sdiv	r2, r3, r1
 800bf26:	fb01 3212 	mls	r2, r1, r2, r3
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d160      	bne.n	800bff0 <mktime+0x154>
 800bf2e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800bf32:	fb92 fef0 	sdiv	lr, r2, r0
 800bf36:	fb00 221e 	mls	r2, r0, lr, r2
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	bf14      	ite	ne
 800bf3e:	4662      	movne	r2, ip
 800bf40:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800bf44:	3301      	adds	r3, #1
 800bf46:	429e      	cmp	r6, r3
 800bf48:	4415      	add	r5, r2
 800bf4a:	d1e8      	bne.n	800bf1e <mktime+0x82>
 800bf4c:	4b99      	ldr	r3, [pc, #612]	; (800c1b4 <mktime+0x318>)
 800bf4e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800bf52:	fbc5 4803 	smlal	r4, r8, r5, r3
 800bf56:	f002 f855 	bl	800e004 <__tz_lock>
 800bf5a:	f002 f85f 	bl	800e01c <_tzset_unlocked>
 800bf5e:	4b96      	ldr	r3, [pc, #600]	; (800c1b8 <mktime+0x31c>)
 800bf60:	f8d3 b000 	ldr.w	fp, [r3]
 800bf64:	f1bb 0f00 	cmp.w	fp, #0
 800bf68:	d039      	beq.n	800bfde <mktime+0x142>
 800bf6a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800bf6e:	6978      	ldr	r0, [r7, #20]
 800bf70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bf74:	f1bb 0f01 	cmp.w	fp, #1
 800bf78:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800bf7c:	46da      	mov	sl, fp
 800bf7e:	bfa8      	it	ge
 800bf80:	f04f 0a01 	movge.w	sl, #1
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d178      	bne.n	800c07a <mktime+0x1de>
 800bf88:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800bf8c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800bf90:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800bf94:	1a5b      	subs	r3, r3, r1
 800bf96:	9302      	str	r3, [sp, #8]
 800bf98:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800bf9c:	9303      	str	r3, [sp, #12]
 800bf9e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800bfa2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	ebb3 0c02 	subs.w	ip, r3, r2
 800bfac:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800bfb0:	4564      	cmp	r4, ip
 800bfb2:	eb78 0300 	sbcs.w	r3, r8, r0
 800bfb6:	da66      	bge.n	800c086 <mktime+0x1ea>
 800bfb8:	f8d9 3000 	ldr.w	r3, [r9]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d06f      	beq.n	800c0a0 <mktime+0x204>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	eb78 0303 	sbcs.w	r3, r8, r3
 800bfca:	db03      	blt.n	800bfd4 <mktime+0x138>
 800bfcc:	4564      	cmp	r4, ip
 800bfce:	eb78 0300 	sbcs.w	r3, r8, r0
 800bfd2:	db6b      	blt.n	800c0ac <mktime+0x210>
 800bfd4:	f1bb 0f00 	cmp.w	fp, #0
 800bfd8:	f04f 0b00 	mov.w	fp, #0
 800bfdc:	da6b      	bge.n	800c0b6 <mktime+0x21a>
 800bfde:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800bfe2:	190c      	adds	r4, r1, r4
 800bfe4:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800bfe8:	e0a9      	b.n	800c13e <mktime+0x2a2>
 800bfea:	f240 126d 	movw	r2, #365	; 0x16d
 800bfee:	e7a9      	b.n	800bf44 <mktime+0xa8>
 800bff0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bff4:	e7a6      	b.n	800bf44 <mktime+0xa8>
 800bff6:	d0a9      	beq.n	800bf4c <mktime+0xb0>
 800bff8:	2345      	movs	r3, #69	; 0x45
 800bffa:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bffe:	2164      	movs	r1, #100	; 0x64
 800c000:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c004:	e012      	b.n	800c02c <mktime+0x190>
 800c006:	bb62      	cbnz	r2, 800c062 <mktime+0x1c6>
 800c008:	fb93 f2f1 	sdiv	r2, r3, r1
 800c00c:	fb01 3212 	mls	r2, r1, r2, r3
 800c010:	bb52      	cbnz	r2, 800c068 <mktime+0x1cc>
 800c012:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c016:	fb92 fef0 	sdiv	lr, r2, r0
 800c01a:	fb00 221e 	mls	r2, r0, lr, r2
 800c01e:	2a00      	cmp	r2, #0
 800c020:	bf14      	ite	ne
 800c022:	4662      	movne	r2, ip
 800c024:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c028:	1aad      	subs	r5, r5, r2
 800c02a:	3b01      	subs	r3, #1
 800c02c:	429e      	cmp	r6, r3
 800c02e:	f003 0203 	and.w	r2, r3, #3
 800c032:	dbe8      	blt.n	800c006 <mktime+0x16a>
 800c034:	b9da      	cbnz	r2, 800c06e <mktime+0x1d2>
 800c036:	2264      	movs	r2, #100	; 0x64
 800c038:	fb96 f3f2 	sdiv	r3, r6, r2
 800c03c:	fb02 6313 	mls	r3, r2, r3, r6
 800c040:	b9c3      	cbnz	r3, 800c074 <mktime+0x1d8>
 800c042:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c046:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c04a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c04e:	fb02 3311 	mls	r3, r2, r1, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	f240 136d 	movw	r3, #365	; 0x16d
 800c058:	bf08      	it	eq
 800c05a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c05e:	1aed      	subs	r5, r5, r3
 800c060:	e774      	b.n	800bf4c <mktime+0xb0>
 800c062:	f240 126d 	movw	r2, #365	; 0x16d
 800c066:	e7df      	b.n	800c028 <mktime+0x18c>
 800c068:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c06c:	e7dc      	b.n	800c028 <mktime+0x18c>
 800c06e:	f240 136d 	movw	r3, #365	; 0x16d
 800c072:	e7f4      	b.n	800c05e <mktime+0x1c2>
 800c074:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c078:	e7f1      	b.n	800c05e <mktime+0x1c2>
 800c07a:	f001 ff19 	bl	800deb0 <__tzcalc_limits>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d182      	bne.n	800bf88 <mktime+0xec>
 800c082:	46d3      	mov	fp, sl
 800c084:	e050      	b.n	800c128 <mktime+0x28c>
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	1a5b      	subs	r3, r3, r1
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c090:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	429c      	cmp	r4, r3
 800c098:	eb78 030e 	sbcs.w	r3, r8, lr
 800c09c:	dbf1      	blt.n	800c082 <mktime+0x1e6>
 800c09e:	e78b      	b.n	800bfb8 <mktime+0x11c>
 800c0a0:	9b02      	ldr	r3, [sp, #8]
 800c0a2:	429c      	cmp	r4, r3
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	eb78 0303 	sbcs.w	r3, r8, r3
 800c0aa:	db8f      	blt.n	800bfcc <mktime+0x130>
 800c0ac:	f1bb 0f00 	cmp.w	fp, #0
 800c0b0:	db3e      	blt.n	800c130 <mktime+0x294>
 800c0b2:	f04f 0b01 	mov.w	fp, #1
 800c0b6:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c0ba:	f1ba 0f01 	cmp.w	sl, #1
 800c0be:	d133      	bne.n	800c128 <mktime+0x28c>
 800c0c0:	f1bb 0f00 	cmp.w	fp, #0
 800c0c4:	d04e      	beq.n	800c164 <mktime+0x2c8>
 800c0c6:	1a52      	subs	r2, r2, r1
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	1914      	adds	r4, r2, r4
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c0da:	f7ff fe07 	bl	800bcec <validate_structure>
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	ebb2 020a 	subs.w	r2, r2, sl
 800c0e4:	d020      	beq.n	800c128 <mktime+0x28c>
 800c0e6:	2a01      	cmp	r2, #1
 800c0e8:	dc3e      	bgt.n	800c168 <mktime+0x2cc>
 800c0ea:	1c90      	adds	r0, r2, #2
 800c0ec:	bfd8      	it	le
 800c0ee:	2201      	movle	r2, #1
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	18d3      	adds	r3, r2, r3
 800c0f4:	4415      	add	r5, r2
 800c0f6:	d540      	bpl.n	800c17a <mktime+0x2de>
 800c0f8:	1e73      	subs	r3, r6, #1
 800c0fa:	0799      	lsls	r1, r3, #30
 800c0fc:	d137      	bne.n	800c16e <mktime+0x2d2>
 800c0fe:	2264      	movs	r2, #100	; 0x64
 800c100:	fb93 f1f2 	sdiv	r1, r3, r2
 800c104:	fb02 3311 	mls	r3, r2, r1, r3
 800c108:	bba3      	cbnz	r3, 800c174 <mktime+0x2d8>
 800c10a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c10e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c112:	fb96 f2f3 	sdiv	r2, r6, r3
 800c116:	fb03 6612 	mls	r6, r3, r2, r6
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	f240 136d 	movw	r3, #365	; 0x16d
 800c120:	bf18      	it	ne
 800c122:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c126:	61fb      	str	r3, [r7, #28]
 800c128:	f1bb 0f01 	cmp.w	fp, #1
 800c12c:	f47f af57 	bne.w	800bfde <mktime+0x142>
 800c130:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c134:	190c      	adds	r4, r1, r4
 800c136:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c13a:	f04f 0b01 	mov.w	fp, #1
 800c13e:	f001 ff67 	bl	800e010 <__tz_unlock>
 800c142:	3504      	adds	r5, #4
 800c144:	2307      	movs	r3, #7
 800c146:	fb95 f3f3 	sdiv	r3, r5, r3
 800c14a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c14e:	1aed      	subs	r5, r5, r3
 800c150:	bf48      	it	mi
 800c152:	3507      	addmi	r5, #7
 800c154:	f8c7 b020 	str.w	fp, [r7, #32]
 800c158:	61bd      	str	r5, [r7, #24]
 800c15a:	4620      	mov	r0, r4
 800c15c:	4641      	mov	r1, r8
 800c15e:	b005      	add	sp, #20
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	1a8a      	subs	r2, r1, r2
 800c166:	e7af      	b.n	800c0c8 <mktime+0x22c>
 800c168:	f04f 32ff 	mov.w	r2, #4294967295
 800c16c:	e7c0      	b.n	800c0f0 <mktime+0x254>
 800c16e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c172:	e7d8      	b.n	800c126 <mktime+0x28a>
 800c174:	f240 136d 	movw	r3, #365	; 0x16d
 800c178:	e7d5      	b.n	800c126 <mktime+0x28a>
 800c17a:	07b2      	lsls	r2, r6, #30
 800c17c:	d11e      	bne.n	800c1bc <mktime+0x320>
 800c17e:	2164      	movs	r1, #100	; 0x64
 800c180:	fb96 f2f1 	sdiv	r2, r6, r1
 800c184:	fb01 6212 	mls	r2, r1, r2, r6
 800c188:	b9da      	cbnz	r2, 800c1c2 <mktime+0x326>
 800c18a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c18e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c192:	fb96 f1f2 	sdiv	r1, r6, r2
 800c196:	fb02 6611 	mls	r6, r2, r1, r6
 800c19a:	2e00      	cmp	r6, #0
 800c19c:	f240 126d 	movw	r2, #365	; 0x16d
 800c1a0:	bf08      	it	eq
 800c1a2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	bfa8      	it	ge
 800c1aa:	1a9b      	subge	r3, r3, r2
 800c1ac:	e7bb      	b.n	800c126 <mktime+0x28a>
 800c1ae:	bf00      	nop
 800c1b0:	08011bd0 	.word	0x08011bd0
 800c1b4:	00015180 	.word	0x00015180
 800c1b8:	200068a8 	.word	0x200068a8
 800c1bc:	f240 126d 	movw	r2, #365	; 0x16d
 800c1c0:	e7f1      	b.n	800c1a6 <mktime+0x30a>
 800c1c2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c1c6:	e7ee      	b.n	800c1a6 <mktime+0x30a>
 800c1c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c1cc:	46a0      	mov	r8, r4
 800c1ce:	e7c4      	b.n	800c15a <mktime+0x2be>

0800c1d0 <__cvt>:
 800c1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d4:	ec55 4b10 	vmov	r4, r5, d0
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	460e      	mov	r6, r1
 800c1dc:	4619      	mov	r1, r3
 800c1de:	462b      	mov	r3, r5
 800c1e0:	bfbb      	ittet	lt
 800c1e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c1e6:	461d      	movlt	r5, r3
 800c1e8:	2300      	movge	r3, #0
 800c1ea:	232d      	movlt	r3, #45	; 0x2d
 800c1ec:	700b      	strb	r3, [r1, #0]
 800c1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c1f4:	4691      	mov	r9, r2
 800c1f6:	f023 0820 	bic.w	r8, r3, #32
 800c1fa:	bfbc      	itt	lt
 800c1fc:	4622      	movlt	r2, r4
 800c1fe:	4614      	movlt	r4, r2
 800c200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c204:	d005      	beq.n	800c212 <__cvt+0x42>
 800c206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c20a:	d100      	bne.n	800c20e <__cvt+0x3e>
 800c20c:	3601      	adds	r6, #1
 800c20e:	2102      	movs	r1, #2
 800c210:	e000      	b.n	800c214 <__cvt+0x44>
 800c212:	2103      	movs	r1, #3
 800c214:	ab03      	add	r3, sp, #12
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	ab02      	add	r3, sp, #8
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	ec45 4b10 	vmov	d0, r4, r5
 800c220:	4653      	mov	r3, sl
 800c222:	4632      	mov	r2, r6
 800c224:	f002 f944 	bl	800e4b0 <_dtoa_r>
 800c228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c22c:	4607      	mov	r7, r0
 800c22e:	d102      	bne.n	800c236 <__cvt+0x66>
 800c230:	f019 0f01 	tst.w	r9, #1
 800c234:	d022      	beq.n	800c27c <__cvt+0xac>
 800c236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c23a:	eb07 0906 	add.w	r9, r7, r6
 800c23e:	d110      	bne.n	800c262 <__cvt+0x92>
 800c240:	783b      	ldrb	r3, [r7, #0]
 800c242:	2b30      	cmp	r3, #48	; 0x30
 800c244:	d10a      	bne.n	800c25c <__cvt+0x8c>
 800c246:	2200      	movs	r2, #0
 800c248:	2300      	movs	r3, #0
 800c24a:	4620      	mov	r0, r4
 800c24c:	4629      	mov	r1, r5
 800c24e:	f7f4 fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c252:	b918      	cbnz	r0, 800c25c <__cvt+0x8c>
 800c254:	f1c6 0601 	rsb	r6, r6, #1
 800c258:	f8ca 6000 	str.w	r6, [sl]
 800c25c:	f8da 3000 	ldr.w	r3, [sl]
 800c260:	4499      	add	r9, r3
 800c262:	2200      	movs	r2, #0
 800c264:	2300      	movs	r3, #0
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	f7f4 fc3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c26e:	b108      	cbz	r0, 800c274 <__cvt+0xa4>
 800c270:	f8cd 900c 	str.w	r9, [sp, #12]
 800c274:	2230      	movs	r2, #48	; 0x30
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	454b      	cmp	r3, r9
 800c27a:	d307      	bcc.n	800c28c <__cvt+0xbc>
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c280:	1bdb      	subs	r3, r3, r7
 800c282:	4638      	mov	r0, r7
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	b004      	add	sp, #16
 800c288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28c:	1c59      	adds	r1, r3, #1
 800c28e:	9103      	str	r1, [sp, #12]
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	e7f0      	b.n	800c276 <__cvt+0xa6>

0800c294 <__exponent>:
 800c294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c296:	4603      	mov	r3, r0
 800c298:	2900      	cmp	r1, #0
 800c29a:	bfb8      	it	lt
 800c29c:	4249      	neglt	r1, r1
 800c29e:	f803 2b02 	strb.w	r2, [r3], #2
 800c2a2:	bfb4      	ite	lt
 800c2a4:	222d      	movlt	r2, #45	; 0x2d
 800c2a6:	222b      	movge	r2, #43	; 0x2b
 800c2a8:	2909      	cmp	r1, #9
 800c2aa:	7042      	strb	r2, [r0, #1]
 800c2ac:	dd2a      	ble.n	800c304 <__exponent+0x70>
 800c2ae:	f10d 0407 	add.w	r4, sp, #7
 800c2b2:	46a4      	mov	ip, r4
 800c2b4:	270a      	movs	r7, #10
 800c2b6:	46a6      	mov	lr, r4
 800c2b8:	460a      	mov	r2, r1
 800c2ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2be:	fb07 1516 	mls	r5, r7, r6, r1
 800c2c2:	3530      	adds	r5, #48	; 0x30
 800c2c4:	2a63      	cmp	r2, #99	; 0x63
 800c2c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	dcf1      	bgt.n	800c2b6 <__exponent+0x22>
 800c2d2:	3130      	adds	r1, #48	; 0x30
 800c2d4:	f1ae 0502 	sub.w	r5, lr, #2
 800c2d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2dc:	1c44      	adds	r4, r0, #1
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4561      	cmp	r1, ip
 800c2e2:	d30a      	bcc.n	800c2fa <__exponent+0x66>
 800c2e4:	f10d 0209 	add.w	r2, sp, #9
 800c2e8:	eba2 020e 	sub.w	r2, r2, lr
 800c2ec:	4565      	cmp	r5, ip
 800c2ee:	bf88      	it	hi
 800c2f0:	2200      	movhi	r2, #0
 800c2f2:	4413      	add	r3, r2
 800c2f4:	1a18      	subs	r0, r3, r0
 800c2f6:	b003      	add	sp, #12
 800c2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c302:	e7ed      	b.n	800c2e0 <__exponent+0x4c>
 800c304:	2330      	movs	r3, #48	; 0x30
 800c306:	3130      	adds	r1, #48	; 0x30
 800c308:	7083      	strb	r3, [r0, #2]
 800c30a:	70c1      	strb	r1, [r0, #3]
 800c30c:	1d03      	adds	r3, r0, #4
 800c30e:	e7f1      	b.n	800c2f4 <__exponent+0x60>

0800c310 <_printf_float>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ed2d 8b02 	vpush	{d8}
 800c318:	b08d      	sub	sp, #52	; 0x34
 800c31a:	460c      	mov	r4, r1
 800c31c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c320:	4616      	mov	r6, r2
 800c322:	461f      	mov	r7, r3
 800c324:	4605      	mov	r5, r0
 800c326:	f003 fa69 	bl	800f7fc <_localeconv_r>
 800c32a:	f8d0 a000 	ldr.w	sl, [r0]
 800c32e:	4650      	mov	r0, sl
 800c330:	f7f3 ff58 	bl	80001e4 <strlen>
 800c334:	2300      	movs	r3, #0
 800c336:	930a      	str	r3, [sp, #40]	; 0x28
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	9305      	str	r3, [sp, #20]
 800c33c:	f8d8 3000 	ldr.w	r3, [r8]
 800c340:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c344:	3307      	adds	r3, #7
 800c346:	f023 0307 	bic.w	r3, r3, #7
 800c34a:	f103 0208 	add.w	r2, r3, #8
 800c34e:	f8c8 2000 	str.w	r2, [r8]
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c35a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	f8cd 8018 	str.w	r8, [sp, #24]
 800c368:	ee08 0a10 	vmov	s16, r0
 800c36c:	4b9f      	ldr	r3, [pc, #636]	; (800c5ec <_printf_float+0x2dc>)
 800c36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c372:	f04f 32ff 	mov.w	r2, #4294967295
 800c376:	f7f4 fbe9 	bl	8000b4c <__aeabi_dcmpun>
 800c37a:	bb88      	cbnz	r0, 800c3e0 <_printf_float+0xd0>
 800c37c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c380:	4b9a      	ldr	r3, [pc, #616]	; (800c5ec <_printf_float+0x2dc>)
 800c382:	f04f 32ff 	mov.w	r2, #4294967295
 800c386:	f7f4 fbc3 	bl	8000b10 <__aeabi_dcmple>
 800c38a:	bb48      	cbnz	r0, 800c3e0 <_printf_float+0xd0>
 800c38c:	2200      	movs	r2, #0
 800c38e:	2300      	movs	r3, #0
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f4 fbb2 	bl	8000afc <__aeabi_dcmplt>
 800c398:	b110      	cbz	r0, 800c3a0 <_printf_float+0x90>
 800c39a:	232d      	movs	r3, #45	; 0x2d
 800c39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a0:	4b93      	ldr	r3, [pc, #588]	; (800c5f0 <_printf_float+0x2e0>)
 800c3a2:	4894      	ldr	r0, [pc, #592]	; (800c5f4 <_printf_float+0x2e4>)
 800c3a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3a8:	bf94      	ite	ls
 800c3aa:	4698      	movls	r8, r3
 800c3ac:	4680      	movhi	r8, r0
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	6123      	str	r3, [r4, #16]
 800c3b2:	9b05      	ldr	r3, [sp, #20]
 800c3b4:	f023 0204 	bic.w	r2, r3, #4
 800c3b8:	6022      	str	r2, [r4, #0]
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	9700      	str	r7, [sp, #0]
 800c3c0:	4633      	mov	r3, r6
 800c3c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 f9d8 	bl	800c77c <_printf_common>
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	f040 8090 	bne.w	800c4f2 <_printf_float+0x1e2>
 800c3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d6:	b00d      	add	sp, #52	; 0x34
 800c3d8:	ecbd 8b02 	vpop	{d8}
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	464b      	mov	r3, r9
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	f7f4 fbb0 	bl	8000b4c <__aeabi_dcmpun>
 800c3ec:	b140      	cbz	r0, 800c400 <_printf_float+0xf0>
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfbc      	itt	lt
 800c3f4:	232d      	movlt	r3, #45	; 0x2d
 800c3f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3fa:	487f      	ldr	r0, [pc, #508]	; (800c5f8 <_printf_float+0x2e8>)
 800c3fc:	4b7f      	ldr	r3, [pc, #508]	; (800c5fc <_printf_float+0x2ec>)
 800c3fe:	e7d1      	b.n	800c3a4 <_printf_float+0x94>
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c406:	9206      	str	r2, [sp, #24]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	d13f      	bne.n	800c48c <_printf_float+0x17c>
 800c40c:	2306      	movs	r3, #6
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	9b05      	ldr	r3, [sp, #20]
 800c412:	6861      	ldr	r1, [r4, #4]
 800c414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c418:	2300      	movs	r3, #0
 800c41a:	9303      	str	r3, [sp, #12]
 800c41c:	ab0a      	add	r3, sp, #40	; 0x28
 800c41e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c422:	ab09      	add	r3, sp, #36	; 0x24
 800c424:	ec49 8b10 	vmov	d0, r8, r9
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	6022      	str	r2, [r4, #0]
 800c42c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c430:	4628      	mov	r0, r5
 800c432:	f7ff fecd 	bl	800c1d0 <__cvt>
 800c436:	9b06      	ldr	r3, [sp, #24]
 800c438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c43a:	2b47      	cmp	r3, #71	; 0x47
 800c43c:	4680      	mov	r8, r0
 800c43e:	d108      	bne.n	800c452 <_printf_float+0x142>
 800c440:	1cc8      	adds	r0, r1, #3
 800c442:	db02      	blt.n	800c44a <_printf_float+0x13a>
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	4299      	cmp	r1, r3
 800c448:	dd41      	ble.n	800c4ce <_printf_float+0x1be>
 800c44a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c44e:	fa5f fb8b 	uxtb.w	fp, fp
 800c452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c456:	d820      	bhi.n	800c49a <_printf_float+0x18a>
 800c458:	3901      	subs	r1, #1
 800c45a:	465a      	mov	r2, fp
 800c45c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c460:	9109      	str	r1, [sp, #36]	; 0x24
 800c462:	f7ff ff17 	bl	800c294 <__exponent>
 800c466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c468:	1813      	adds	r3, r2, r0
 800c46a:	2a01      	cmp	r2, #1
 800c46c:	4681      	mov	r9, r0
 800c46e:	6123      	str	r3, [r4, #16]
 800c470:	dc02      	bgt.n	800c478 <_printf_float+0x168>
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	07d2      	lsls	r2, r2, #31
 800c476:	d501      	bpl.n	800c47c <_printf_float+0x16c>
 800c478:	3301      	adds	r3, #1
 800c47a:	6123      	str	r3, [r4, #16]
 800c47c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c480:	2b00      	cmp	r3, #0
 800c482:	d09c      	beq.n	800c3be <_printf_float+0xae>
 800c484:	232d      	movs	r3, #45	; 0x2d
 800c486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c48a:	e798      	b.n	800c3be <_printf_float+0xae>
 800c48c:	9a06      	ldr	r2, [sp, #24]
 800c48e:	2a47      	cmp	r2, #71	; 0x47
 800c490:	d1be      	bne.n	800c410 <_printf_float+0x100>
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1bc      	bne.n	800c410 <_printf_float+0x100>
 800c496:	2301      	movs	r3, #1
 800c498:	e7b9      	b.n	800c40e <_printf_float+0xfe>
 800c49a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c49e:	d118      	bne.n	800c4d2 <_printf_float+0x1c2>
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	6863      	ldr	r3, [r4, #4]
 800c4a4:	dd0b      	ble.n	800c4be <_printf_float+0x1ae>
 800c4a6:	6121      	str	r1, [r4, #16]
 800c4a8:	b913      	cbnz	r3, 800c4b0 <_printf_float+0x1a0>
 800c4aa:	6822      	ldr	r2, [r4, #0]
 800c4ac:	07d0      	lsls	r0, r2, #31
 800c4ae:	d502      	bpl.n	800c4b6 <_printf_float+0x1a6>
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	440b      	add	r3, r1
 800c4b4:	6123      	str	r3, [r4, #16]
 800c4b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4b8:	f04f 0900 	mov.w	r9, #0
 800c4bc:	e7de      	b.n	800c47c <_printf_float+0x16c>
 800c4be:	b913      	cbnz	r3, 800c4c6 <_printf_float+0x1b6>
 800c4c0:	6822      	ldr	r2, [r4, #0]
 800c4c2:	07d2      	lsls	r2, r2, #31
 800c4c4:	d501      	bpl.n	800c4ca <_printf_float+0x1ba>
 800c4c6:	3302      	adds	r3, #2
 800c4c8:	e7f4      	b.n	800c4b4 <_printf_float+0x1a4>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7f2      	b.n	800c4b4 <_printf_float+0x1a4>
 800c4ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d4:	4299      	cmp	r1, r3
 800c4d6:	db05      	blt.n	800c4e4 <_printf_float+0x1d4>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	6121      	str	r1, [r4, #16]
 800c4dc:	07d8      	lsls	r0, r3, #31
 800c4de:	d5ea      	bpl.n	800c4b6 <_printf_float+0x1a6>
 800c4e0:	1c4b      	adds	r3, r1, #1
 800c4e2:	e7e7      	b.n	800c4b4 <_printf_float+0x1a4>
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	bfd4      	ite	le
 800c4e8:	f1c1 0202 	rsble	r2, r1, #2
 800c4ec:	2201      	movgt	r2, #1
 800c4ee:	4413      	add	r3, r2
 800c4f0:	e7e0      	b.n	800c4b4 <_printf_float+0x1a4>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	055a      	lsls	r2, r3, #21
 800c4f6:	d407      	bmi.n	800c508 <_printf_float+0x1f8>
 800c4f8:	6923      	ldr	r3, [r4, #16]
 800c4fa:	4642      	mov	r2, r8
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b8      	blx	r7
 800c502:	3001      	adds	r0, #1
 800c504:	d12c      	bne.n	800c560 <_printf_float+0x250>
 800c506:	e764      	b.n	800c3d2 <_printf_float+0xc2>
 800c508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c50c:	f240 80e0 	bls.w	800c6d0 <_printf_float+0x3c0>
 800c510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c514:	2200      	movs	r2, #0
 800c516:	2300      	movs	r3, #0
 800c518:	f7f4 fae6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d034      	beq.n	800c58a <_printf_float+0x27a>
 800c520:	4a37      	ldr	r2, [pc, #220]	; (800c600 <_printf_float+0x2f0>)
 800c522:	2301      	movs	r3, #1
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	47b8      	blx	r7
 800c52a:	3001      	adds	r0, #1
 800c52c:	f43f af51 	beq.w	800c3d2 <_printf_float+0xc2>
 800c530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c534:	429a      	cmp	r2, r3
 800c536:	db02      	blt.n	800c53e <_printf_float+0x22e>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	07d8      	lsls	r0, r3, #31
 800c53c:	d510      	bpl.n	800c560 <_printf_float+0x250>
 800c53e:	ee18 3a10 	vmov	r3, s16
 800c542:	4652      	mov	r2, sl
 800c544:	4631      	mov	r1, r6
 800c546:	4628      	mov	r0, r5
 800c548:	47b8      	blx	r7
 800c54a:	3001      	adds	r0, #1
 800c54c:	f43f af41 	beq.w	800c3d2 <_printf_float+0xc2>
 800c550:	f04f 0800 	mov.w	r8, #0
 800c554:	f104 091a 	add.w	r9, r4, #26
 800c558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55a:	3b01      	subs	r3, #1
 800c55c:	4543      	cmp	r3, r8
 800c55e:	dc09      	bgt.n	800c574 <_printf_float+0x264>
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	079b      	lsls	r3, r3, #30
 800c564:	f100 8105 	bmi.w	800c772 <_printf_float+0x462>
 800c568:	68e0      	ldr	r0, [r4, #12]
 800c56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c56c:	4298      	cmp	r0, r3
 800c56e:	bfb8      	it	lt
 800c570:	4618      	movlt	r0, r3
 800c572:	e730      	b.n	800c3d6 <_printf_float+0xc6>
 800c574:	2301      	movs	r3, #1
 800c576:	464a      	mov	r2, r9
 800c578:	4631      	mov	r1, r6
 800c57a:	4628      	mov	r0, r5
 800c57c:	47b8      	blx	r7
 800c57e:	3001      	adds	r0, #1
 800c580:	f43f af27 	beq.w	800c3d2 <_printf_float+0xc2>
 800c584:	f108 0801 	add.w	r8, r8, #1
 800c588:	e7e6      	b.n	800c558 <_printf_float+0x248>
 800c58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dc39      	bgt.n	800c604 <_printf_float+0x2f4>
 800c590:	4a1b      	ldr	r2, [pc, #108]	; (800c600 <_printf_float+0x2f0>)
 800c592:	2301      	movs	r3, #1
 800c594:	4631      	mov	r1, r6
 800c596:	4628      	mov	r0, r5
 800c598:	47b8      	blx	r7
 800c59a:	3001      	adds	r0, #1
 800c59c:	f43f af19 	beq.w	800c3d2 <_printf_float+0xc2>
 800c5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	d102      	bne.n	800c5ae <_printf_float+0x29e>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d5d8      	bpl.n	800c560 <_printf_float+0x250>
 800c5ae:	ee18 3a10 	vmov	r3, s16
 800c5b2:	4652      	mov	r2, sl
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	47b8      	blx	r7
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f43f af09 	beq.w	800c3d2 <_printf_float+0xc2>
 800c5c0:	f04f 0900 	mov.w	r9, #0
 800c5c4:	f104 0a1a 	add.w	sl, r4, #26
 800c5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ca:	425b      	negs	r3, r3
 800c5cc:	454b      	cmp	r3, r9
 800c5ce:	dc01      	bgt.n	800c5d4 <_printf_float+0x2c4>
 800c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d2:	e792      	b.n	800c4fa <_printf_float+0x1ea>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	4652      	mov	r2, sl
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f aef7 	beq.w	800c3d2 <_printf_float+0xc2>
 800c5e4:	f109 0901 	add.w	r9, r9, #1
 800c5e8:	e7ee      	b.n	800c5c8 <_printf_float+0x2b8>
 800c5ea:	bf00      	nop
 800c5ec:	7fefffff 	.word	0x7fefffff
 800c5f0:	08011c00 	.word	0x08011c00
 800c5f4:	08011c04 	.word	0x08011c04
 800c5f8:	08011c0c 	.word	0x08011c0c
 800c5fc:	08011c08 	.word	0x08011c08
 800c600:	080120a1 	.word	0x080120a1
 800c604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c608:	429a      	cmp	r2, r3
 800c60a:	bfa8      	it	ge
 800c60c:	461a      	movge	r2, r3
 800c60e:	2a00      	cmp	r2, #0
 800c610:	4691      	mov	r9, r2
 800c612:	dc37      	bgt.n	800c684 <_printf_float+0x374>
 800c614:	f04f 0b00 	mov.w	fp, #0
 800c618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c61c:	f104 021a 	add.w	r2, r4, #26
 800c620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	eba3 0309 	sub.w	r3, r3, r9
 800c628:	455b      	cmp	r3, fp
 800c62a:	dc33      	bgt.n	800c694 <_printf_float+0x384>
 800c62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c630:	429a      	cmp	r2, r3
 800c632:	db3b      	blt.n	800c6ac <_printf_float+0x39c>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	07da      	lsls	r2, r3, #31
 800c638:	d438      	bmi.n	800c6ac <_printf_float+0x39c>
 800c63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63c:	9a05      	ldr	r2, [sp, #20]
 800c63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c640:	1a9a      	subs	r2, r3, r2
 800c642:	eba3 0901 	sub.w	r9, r3, r1
 800c646:	4591      	cmp	r9, r2
 800c648:	bfa8      	it	ge
 800c64a:	4691      	movge	r9, r2
 800c64c:	f1b9 0f00 	cmp.w	r9, #0
 800c650:	dc35      	bgt.n	800c6be <_printf_float+0x3ae>
 800c652:	f04f 0800 	mov.w	r8, #0
 800c656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c65a:	f104 0a1a 	add.w	sl, r4, #26
 800c65e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c662:	1a9b      	subs	r3, r3, r2
 800c664:	eba3 0309 	sub.w	r3, r3, r9
 800c668:	4543      	cmp	r3, r8
 800c66a:	f77f af79 	ble.w	800c560 <_printf_float+0x250>
 800c66e:	2301      	movs	r3, #1
 800c670:	4652      	mov	r2, sl
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f aeaa 	beq.w	800c3d2 <_printf_float+0xc2>
 800c67e:	f108 0801 	add.w	r8, r8, #1
 800c682:	e7ec      	b.n	800c65e <_printf_float+0x34e>
 800c684:	4613      	mov	r3, r2
 800c686:	4631      	mov	r1, r6
 800c688:	4642      	mov	r2, r8
 800c68a:	4628      	mov	r0, r5
 800c68c:	47b8      	blx	r7
 800c68e:	3001      	adds	r0, #1
 800c690:	d1c0      	bne.n	800c614 <_printf_float+0x304>
 800c692:	e69e      	b.n	800c3d2 <_printf_float+0xc2>
 800c694:	2301      	movs	r3, #1
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	9205      	str	r2, [sp, #20]
 800c69c:	47b8      	blx	r7
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f43f ae97 	beq.w	800c3d2 <_printf_float+0xc2>
 800c6a4:	9a05      	ldr	r2, [sp, #20]
 800c6a6:	f10b 0b01 	add.w	fp, fp, #1
 800c6aa:	e7b9      	b.n	800c620 <_printf_float+0x310>
 800c6ac:	ee18 3a10 	vmov	r3, s16
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b8      	blx	r7
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d1be      	bne.n	800c63a <_printf_float+0x32a>
 800c6bc:	e689      	b.n	800c3d2 <_printf_float+0xc2>
 800c6be:	9a05      	ldr	r2, [sp, #20]
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4442      	add	r2, r8
 800c6c4:	4631      	mov	r1, r6
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	47b8      	blx	r7
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	d1c1      	bne.n	800c652 <_printf_float+0x342>
 800c6ce:	e680      	b.n	800c3d2 <_printf_float+0xc2>
 800c6d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6d2:	2a01      	cmp	r2, #1
 800c6d4:	dc01      	bgt.n	800c6da <_printf_float+0x3ca>
 800c6d6:	07db      	lsls	r3, r3, #31
 800c6d8:	d538      	bpl.n	800c74c <_printf_float+0x43c>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4642      	mov	r2, r8
 800c6de:	4631      	mov	r1, r6
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b8      	blx	r7
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f43f ae74 	beq.w	800c3d2 <_printf_float+0xc2>
 800c6ea:	ee18 3a10 	vmov	r3, s16
 800c6ee:	4652      	mov	r2, sl
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	47b8      	blx	r7
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f43f ae6b 	beq.w	800c3d2 <_printf_float+0xc2>
 800c6fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	f7f4 f9f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800c708:	b9d8      	cbnz	r0, 800c742 <_printf_float+0x432>
 800c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70c:	f108 0201 	add.w	r2, r8, #1
 800c710:	3b01      	subs	r3, #1
 800c712:	4631      	mov	r1, r6
 800c714:	4628      	mov	r0, r5
 800c716:	47b8      	blx	r7
 800c718:	3001      	adds	r0, #1
 800c71a:	d10e      	bne.n	800c73a <_printf_float+0x42a>
 800c71c:	e659      	b.n	800c3d2 <_printf_float+0xc2>
 800c71e:	2301      	movs	r3, #1
 800c720:	4652      	mov	r2, sl
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	f43f ae52 	beq.w	800c3d2 <_printf_float+0xc2>
 800c72e:	f108 0801 	add.w	r8, r8, #1
 800c732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c734:	3b01      	subs	r3, #1
 800c736:	4543      	cmp	r3, r8
 800c738:	dcf1      	bgt.n	800c71e <_printf_float+0x40e>
 800c73a:	464b      	mov	r3, r9
 800c73c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c740:	e6dc      	b.n	800c4fc <_printf_float+0x1ec>
 800c742:	f04f 0800 	mov.w	r8, #0
 800c746:	f104 0a1a 	add.w	sl, r4, #26
 800c74a:	e7f2      	b.n	800c732 <_printf_float+0x422>
 800c74c:	2301      	movs	r3, #1
 800c74e:	4642      	mov	r2, r8
 800c750:	e7df      	b.n	800c712 <_printf_float+0x402>
 800c752:	2301      	movs	r3, #1
 800c754:	464a      	mov	r2, r9
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	f43f ae38 	beq.w	800c3d2 <_printf_float+0xc2>
 800c762:	f108 0801 	add.w	r8, r8, #1
 800c766:	68e3      	ldr	r3, [r4, #12]
 800c768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c76a:	1a5b      	subs	r3, r3, r1
 800c76c:	4543      	cmp	r3, r8
 800c76e:	dcf0      	bgt.n	800c752 <_printf_float+0x442>
 800c770:	e6fa      	b.n	800c568 <_printf_float+0x258>
 800c772:	f04f 0800 	mov.w	r8, #0
 800c776:	f104 0919 	add.w	r9, r4, #25
 800c77a:	e7f4      	b.n	800c766 <_printf_float+0x456>

0800c77c <_printf_common>:
 800c77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c780:	4616      	mov	r6, r2
 800c782:	4699      	mov	r9, r3
 800c784:	688a      	ldr	r2, [r1, #8]
 800c786:	690b      	ldr	r3, [r1, #16]
 800c788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c78c:	4293      	cmp	r3, r2
 800c78e:	bfb8      	it	lt
 800c790:	4613      	movlt	r3, r2
 800c792:	6033      	str	r3, [r6, #0]
 800c794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c798:	4607      	mov	r7, r0
 800c79a:	460c      	mov	r4, r1
 800c79c:	b10a      	cbz	r2, 800c7a2 <_printf_common+0x26>
 800c79e:	3301      	adds	r3, #1
 800c7a0:	6033      	str	r3, [r6, #0]
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	0699      	lsls	r1, r3, #26
 800c7a6:	bf42      	ittt	mi
 800c7a8:	6833      	ldrmi	r3, [r6, #0]
 800c7aa:	3302      	addmi	r3, #2
 800c7ac:	6033      	strmi	r3, [r6, #0]
 800c7ae:	6825      	ldr	r5, [r4, #0]
 800c7b0:	f015 0506 	ands.w	r5, r5, #6
 800c7b4:	d106      	bne.n	800c7c4 <_printf_common+0x48>
 800c7b6:	f104 0a19 	add.w	sl, r4, #25
 800c7ba:	68e3      	ldr	r3, [r4, #12]
 800c7bc:	6832      	ldr	r2, [r6, #0]
 800c7be:	1a9b      	subs	r3, r3, r2
 800c7c0:	42ab      	cmp	r3, r5
 800c7c2:	dc26      	bgt.n	800c812 <_printf_common+0x96>
 800c7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7c8:	1e13      	subs	r3, r2, #0
 800c7ca:	6822      	ldr	r2, [r4, #0]
 800c7cc:	bf18      	it	ne
 800c7ce:	2301      	movne	r3, #1
 800c7d0:	0692      	lsls	r2, r2, #26
 800c7d2:	d42b      	bmi.n	800c82c <_printf_common+0xb0>
 800c7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7d8:	4649      	mov	r1, r9
 800c7da:	4638      	mov	r0, r7
 800c7dc:	47c0      	blx	r8
 800c7de:	3001      	adds	r0, #1
 800c7e0:	d01e      	beq.n	800c820 <_printf_common+0xa4>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	68e5      	ldr	r5, [r4, #12]
 800c7e6:	6832      	ldr	r2, [r6, #0]
 800c7e8:	f003 0306 	and.w	r3, r3, #6
 800c7ec:	2b04      	cmp	r3, #4
 800c7ee:	bf08      	it	eq
 800c7f0:	1aad      	subeq	r5, r5, r2
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	bf0c      	ite	eq
 800c7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7fc:	2500      	movne	r5, #0
 800c7fe:	4293      	cmp	r3, r2
 800c800:	bfc4      	itt	gt
 800c802:	1a9b      	subgt	r3, r3, r2
 800c804:	18ed      	addgt	r5, r5, r3
 800c806:	2600      	movs	r6, #0
 800c808:	341a      	adds	r4, #26
 800c80a:	42b5      	cmp	r5, r6
 800c80c:	d11a      	bne.n	800c844 <_printf_common+0xc8>
 800c80e:	2000      	movs	r0, #0
 800c810:	e008      	b.n	800c824 <_printf_common+0xa8>
 800c812:	2301      	movs	r3, #1
 800c814:	4652      	mov	r2, sl
 800c816:	4649      	mov	r1, r9
 800c818:	4638      	mov	r0, r7
 800c81a:	47c0      	blx	r8
 800c81c:	3001      	adds	r0, #1
 800c81e:	d103      	bne.n	800c828 <_printf_common+0xac>
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c828:	3501      	adds	r5, #1
 800c82a:	e7c6      	b.n	800c7ba <_printf_common+0x3e>
 800c82c:	18e1      	adds	r1, r4, r3
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	2030      	movs	r0, #48	; 0x30
 800c832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c836:	4422      	add	r2, r4
 800c838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c840:	3302      	adds	r3, #2
 800c842:	e7c7      	b.n	800c7d4 <_printf_common+0x58>
 800c844:	2301      	movs	r3, #1
 800c846:	4622      	mov	r2, r4
 800c848:	4649      	mov	r1, r9
 800c84a:	4638      	mov	r0, r7
 800c84c:	47c0      	blx	r8
 800c84e:	3001      	adds	r0, #1
 800c850:	d0e6      	beq.n	800c820 <_printf_common+0xa4>
 800c852:	3601      	adds	r6, #1
 800c854:	e7d9      	b.n	800c80a <_printf_common+0x8e>
	...

0800c858 <_printf_i>:
 800c858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	7e0f      	ldrb	r7, [r1, #24]
 800c85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c860:	2f78      	cmp	r7, #120	; 0x78
 800c862:	4691      	mov	r9, r2
 800c864:	4680      	mov	r8, r0
 800c866:	460c      	mov	r4, r1
 800c868:	469a      	mov	sl, r3
 800c86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c86e:	d807      	bhi.n	800c880 <_printf_i+0x28>
 800c870:	2f62      	cmp	r7, #98	; 0x62
 800c872:	d80a      	bhi.n	800c88a <_printf_i+0x32>
 800c874:	2f00      	cmp	r7, #0
 800c876:	f000 80d8 	beq.w	800ca2a <_printf_i+0x1d2>
 800c87a:	2f58      	cmp	r7, #88	; 0x58
 800c87c:	f000 80a3 	beq.w	800c9c6 <_printf_i+0x16e>
 800c880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c888:	e03a      	b.n	800c900 <_printf_i+0xa8>
 800c88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c88e:	2b15      	cmp	r3, #21
 800c890:	d8f6      	bhi.n	800c880 <_printf_i+0x28>
 800c892:	a101      	add	r1, pc, #4	; (adr r1, 800c898 <_printf_i+0x40>)
 800c894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c898:	0800c8f1 	.word	0x0800c8f1
 800c89c:	0800c905 	.word	0x0800c905
 800c8a0:	0800c881 	.word	0x0800c881
 800c8a4:	0800c881 	.word	0x0800c881
 800c8a8:	0800c881 	.word	0x0800c881
 800c8ac:	0800c881 	.word	0x0800c881
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c881 	.word	0x0800c881
 800c8b8:	0800c881 	.word	0x0800c881
 800c8bc:	0800c881 	.word	0x0800c881
 800c8c0:	0800c881 	.word	0x0800c881
 800c8c4:	0800ca11 	.word	0x0800ca11
 800c8c8:	0800c935 	.word	0x0800c935
 800c8cc:	0800c9f3 	.word	0x0800c9f3
 800c8d0:	0800c881 	.word	0x0800c881
 800c8d4:	0800c881 	.word	0x0800c881
 800c8d8:	0800ca33 	.word	0x0800ca33
 800c8dc:	0800c881 	.word	0x0800c881
 800c8e0:	0800c935 	.word	0x0800c935
 800c8e4:	0800c881 	.word	0x0800c881
 800c8e8:	0800c881 	.word	0x0800c881
 800c8ec:	0800c9fb 	.word	0x0800c9fb
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	1d1a      	adds	r2, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	602a      	str	r2, [r5, #0]
 800c8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c900:	2301      	movs	r3, #1
 800c902:	e0a3      	b.n	800ca4c <_printf_i+0x1f4>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	6829      	ldr	r1, [r5, #0]
 800c908:	0606      	lsls	r6, r0, #24
 800c90a:	f101 0304 	add.w	r3, r1, #4
 800c90e:	d50a      	bpl.n	800c926 <_printf_i+0xce>
 800c910:	680e      	ldr	r6, [r1, #0]
 800c912:	602b      	str	r3, [r5, #0]
 800c914:	2e00      	cmp	r6, #0
 800c916:	da03      	bge.n	800c920 <_printf_i+0xc8>
 800c918:	232d      	movs	r3, #45	; 0x2d
 800c91a:	4276      	negs	r6, r6
 800c91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c920:	485e      	ldr	r0, [pc, #376]	; (800ca9c <_printf_i+0x244>)
 800c922:	230a      	movs	r3, #10
 800c924:	e019      	b.n	800c95a <_printf_i+0x102>
 800c926:	680e      	ldr	r6, [r1, #0]
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c92e:	bf18      	it	ne
 800c930:	b236      	sxthne	r6, r6
 800c932:	e7ef      	b.n	800c914 <_printf_i+0xbc>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	6820      	ldr	r0, [r4, #0]
 800c938:	1d19      	adds	r1, r3, #4
 800c93a:	6029      	str	r1, [r5, #0]
 800c93c:	0601      	lsls	r1, r0, #24
 800c93e:	d501      	bpl.n	800c944 <_printf_i+0xec>
 800c940:	681e      	ldr	r6, [r3, #0]
 800c942:	e002      	b.n	800c94a <_printf_i+0xf2>
 800c944:	0646      	lsls	r6, r0, #25
 800c946:	d5fb      	bpl.n	800c940 <_printf_i+0xe8>
 800c948:	881e      	ldrh	r6, [r3, #0]
 800c94a:	4854      	ldr	r0, [pc, #336]	; (800ca9c <_printf_i+0x244>)
 800c94c:	2f6f      	cmp	r7, #111	; 0x6f
 800c94e:	bf0c      	ite	eq
 800c950:	2308      	moveq	r3, #8
 800c952:	230a      	movne	r3, #10
 800c954:	2100      	movs	r1, #0
 800c956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c95a:	6865      	ldr	r5, [r4, #4]
 800c95c:	60a5      	str	r5, [r4, #8]
 800c95e:	2d00      	cmp	r5, #0
 800c960:	bfa2      	ittt	ge
 800c962:	6821      	ldrge	r1, [r4, #0]
 800c964:	f021 0104 	bicge.w	r1, r1, #4
 800c968:	6021      	strge	r1, [r4, #0]
 800c96a:	b90e      	cbnz	r6, 800c970 <_printf_i+0x118>
 800c96c:	2d00      	cmp	r5, #0
 800c96e:	d04d      	beq.n	800ca0c <_printf_i+0x1b4>
 800c970:	4615      	mov	r5, r2
 800c972:	fbb6 f1f3 	udiv	r1, r6, r3
 800c976:	fb03 6711 	mls	r7, r3, r1, r6
 800c97a:	5dc7      	ldrb	r7, [r0, r7]
 800c97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c980:	4637      	mov	r7, r6
 800c982:	42bb      	cmp	r3, r7
 800c984:	460e      	mov	r6, r1
 800c986:	d9f4      	bls.n	800c972 <_printf_i+0x11a>
 800c988:	2b08      	cmp	r3, #8
 800c98a:	d10b      	bne.n	800c9a4 <_printf_i+0x14c>
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	07de      	lsls	r6, r3, #31
 800c990:	d508      	bpl.n	800c9a4 <_printf_i+0x14c>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	6861      	ldr	r1, [r4, #4]
 800c996:	4299      	cmp	r1, r3
 800c998:	bfde      	ittt	le
 800c99a:	2330      	movle	r3, #48	; 0x30
 800c99c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9a4:	1b52      	subs	r2, r2, r5
 800c9a6:	6122      	str	r2, [r4, #16]
 800c9a8:	f8cd a000 	str.w	sl, [sp]
 800c9ac:	464b      	mov	r3, r9
 800c9ae:	aa03      	add	r2, sp, #12
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	f7ff fee2 	bl	800c77c <_printf_common>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d14c      	bne.n	800ca56 <_printf_i+0x1fe>
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	b004      	add	sp, #16
 800c9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c6:	4835      	ldr	r0, [pc, #212]	; (800ca9c <_printf_i+0x244>)
 800c9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9cc:	6829      	ldr	r1, [r5, #0]
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9d4:	6029      	str	r1, [r5, #0]
 800c9d6:	061d      	lsls	r5, r3, #24
 800c9d8:	d514      	bpl.n	800ca04 <_printf_i+0x1ac>
 800c9da:	07df      	lsls	r7, r3, #31
 800c9dc:	bf44      	itt	mi
 800c9de:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e2:	6023      	strmi	r3, [r4, #0]
 800c9e4:	b91e      	cbnz	r6, 800c9ee <_printf_i+0x196>
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	f023 0320 	bic.w	r3, r3, #32
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	2310      	movs	r3, #16
 800c9f0:	e7b0      	b.n	800c954 <_printf_i+0xfc>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	f043 0320 	orr.w	r3, r3, #32
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	2378      	movs	r3, #120	; 0x78
 800c9fc:	4828      	ldr	r0, [pc, #160]	; (800caa0 <_printf_i+0x248>)
 800c9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca02:	e7e3      	b.n	800c9cc <_printf_i+0x174>
 800ca04:	0659      	lsls	r1, r3, #25
 800ca06:	bf48      	it	mi
 800ca08:	b2b6      	uxthmi	r6, r6
 800ca0a:	e7e6      	b.n	800c9da <_printf_i+0x182>
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	e7bb      	b.n	800c988 <_printf_i+0x130>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	6826      	ldr	r6, [r4, #0]
 800ca14:	6961      	ldr	r1, [r4, #20]
 800ca16:	1d18      	adds	r0, r3, #4
 800ca18:	6028      	str	r0, [r5, #0]
 800ca1a:	0635      	lsls	r5, r6, #24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	d501      	bpl.n	800ca24 <_printf_i+0x1cc>
 800ca20:	6019      	str	r1, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <_printf_i+0x1d2>
 800ca24:	0670      	lsls	r0, r6, #25
 800ca26:	d5fb      	bpl.n	800ca20 <_printf_i+0x1c8>
 800ca28:	8019      	strh	r1, [r3, #0]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	4615      	mov	r5, r2
 800ca30:	e7ba      	b.n	800c9a8 <_printf_i+0x150>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	1d1a      	adds	r2, r3, #4
 800ca36:	602a      	str	r2, [r5, #0]
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	6862      	ldr	r2, [r4, #4]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f7f3 fbde 	bl	8000200 <memchr>
 800ca44:	b108      	cbz	r0, 800ca4a <_printf_i+0x1f2>
 800ca46:	1b40      	subs	r0, r0, r5
 800ca48:	6060      	str	r0, [r4, #4]
 800ca4a:	6863      	ldr	r3, [r4, #4]
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca54:	e7a8      	b.n	800c9a8 <_printf_i+0x150>
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	47d0      	blx	sl
 800ca60:	3001      	adds	r0, #1
 800ca62:	d0ab      	beq.n	800c9bc <_printf_i+0x164>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	079b      	lsls	r3, r3, #30
 800ca68:	d413      	bmi.n	800ca92 <_printf_i+0x23a>
 800ca6a:	68e0      	ldr	r0, [r4, #12]
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	4298      	cmp	r0, r3
 800ca70:	bfb8      	it	lt
 800ca72:	4618      	movlt	r0, r3
 800ca74:	e7a4      	b.n	800c9c0 <_printf_i+0x168>
 800ca76:	2301      	movs	r3, #1
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	47d0      	blx	sl
 800ca80:	3001      	adds	r0, #1
 800ca82:	d09b      	beq.n	800c9bc <_printf_i+0x164>
 800ca84:	3501      	adds	r5, #1
 800ca86:	68e3      	ldr	r3, [r4, #12]
 800ca88:	9903      	ldr	r1, [sp, #12]
 800ca8a:	1a5b      	subs	r3, r3, r1
 800ca8c:	42ab      	cmp	r3, r5
 800ca8e:	dcf2      	bgt.n	800ca76 <_printf_i+0x21e>
 800ca90:	e7eb      	b.n	800ca6a <_printf_i+0x212>
 800ca92:	2500      	movs	r5, #0
 800ca94:	f104 0619 	add.w	r6, r4, #25
 800ca98:	e7f5      	b.n	800ca86 <_printf_i+0x22e>
 800ca9a:	bf00      	nop
 800ca9c:	08011c10 	.word	0x08011c10
 800caa0:	08011c21 	.word	0x08011c21

0800caa4 <_scanf_float>:
 800caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa8:	b087      	sub	sp, #28
 800caaa:	4617      	mov	r7, r2
 800caac:	9303      	str	r3, [sp, #12]
 800caae:	688b      	ldr	r3, [r1, #8]
 800cab0:	1e5a      	subs	r2, r3, #1
 800cab2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cab6:	bf83      	ittte	hi
 800cab8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cabc:	195b      	addhi	r3, r3, r5
 800cabe:	9302      	strhi	r3, [sp, #8]
 800cac0:	2300      	movls	r3, #0
 800cac2:	bf86      	itte	hi
 800cac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cac8:	608b      	strhi	r3, [r1, #8]
 800caca:	9302      	strls	r3, [sp, #8]
 800cacc:	680b      	ldr	r3, [r1, #0]
 800cace:	468b      	mov	fp, r1
 800cad0:	2500      	movs	r5, #0
 800cad2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cad6:	f84b 3b1c 	str.w	r3, [fp], #28
 800cada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cade:	4680      	mov	r8, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	465e      	mov	r6, fp
 800cae4:	46aa      	mov	sl, r5
 800cae6:	46a9      	mov	r9, r5
 800cae8:	9501      	str	r5, [sp, #4]
 800caea:	68a2      	ldr	r2, [r4, #8]
 800caec:	b152      	cbz	r2, 800cb04 <_scanf_float+0x60>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b4e      	cmp	r3, #78	; 0x4e
 800caf4:	d864      	bhi.n	800cbc0 <_scanf_float+0x11c>
 800caf6:	2b40      	cmp	r3, #64	; 0x40
 800caf8:	d83c      	bhi.n	800cb74 <_scanf_float+0xd0>
 800cafa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cafe:	b2c8      	uxtb	r0, r1
 800cb00:	280e      	cmp	r0, #14
 800cb02:	d93a      	bls.n	800cb7a <_scanf_float+0xd6>
 800cb04:	f1b9 0f00 	cmp.w	r9, #0
 800cb08:	d003      	beq.n	800cb12 <_scanf_float+0x6e>
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb16:	f1ba 0f01 	cmp.w	sl, #1
 800cb1a:	f200 8113 	bhi.w	800cd44 <_scanf_float+0x2a0>
 800cb1e:	455e      	cmp	r6, fp
 800cb20:	f200 8105 	bhi.w	800cd2e <_scanf_float+0x28a>
 800cb24:	2501      	movs	r5, #1
 800cb26:	4628      	mov	r0, r5
 800cb28:	b007      	add	sp, #28
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cb32:	2a0d      	cmp	r2, #13
 800cb34:	d8e6      	bhi.n	800cb04 <_scanf_float+0x60>
 800cb36:	a101      	add	r1, pc, #4	; (adr r1, 800cb3c <_scanf_float+0x98>)
 800cb38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb3c:	0800cc7b 	.word	0x0800cc7b
 800cb40:	0800cb05 	.word	0x0800cb05
 800cb44:	0800cb05 	.word	0x0800cb05
 800cb48:	0800cb05 	.word	0x0800cb05
 800cb4c:	0800ccdb 	.word	0x0800ccdb
 800cb50:	0800ccb3 	.word	0x0800ccb3
 800cb54:	0800cb05 	.word	0x0800cb05
 800cb58:	0800cb05 	.word	0x0800cb05
 800cb5c:	0800cc89 	.word	0x0800cc89
 800cb60:	0800cb05 	.word	0x0800cb05
 800cb64:	0800cb05 	.word	0x0800cb05
 800cb68:	0800cb05 	.word	0x0800cb05
 800cb6c:	0800cb05 	.word	0x0800cb05
 800cb70:	0800cc41 	.word	0x0800cc41
 800cb74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cb78:	e7db      	b.n	800cb32 <_scanf_float+0x8e>
 800cb7a:	290e      	cmp	r1, #14
 800cb7c:	d8c2      	bhi.n	800cb04 <_scanf_float+0x60>
 800cb7e:	a001      	add	r0, pc, #4	; (adr r0, 800cb84 <_scanf_float+0xe0>)
 800cb80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb84:	0800cc33 	.word	0x0800cc33
 800cb88:	0800cb05 	.word	0x0800cb05
 800cb8c:	0800cc33 	.word	0x0800cc33
 800cb90:	0800ccc7 	.word	0x0800ccc7
 800cb94:	0800cb05 	.word	0x0800cb05
 800cb98:	0800cbe1 	.word	0x0800cbe1
 800cb9c:	0800cc1d 	.word	0x0800cc1d
 800cba0:	0800cc1d 	.word	0x0800cc1d
 800cba4:	0800cc1d 	.word	0x0800cc1d
 800cba8:	0800cc1d 	.word	0x0800cc1d
 800cbac:	0800cc1d 	.word	0x0800cc1d
 800cbb0:	0800cc1d 	.word	0x0800cc1d
 800cbb4:	0800cc1d 	.word	0x0800cc1d
 800cbb8:	0800cc1d 	.word	0x0800cc1d
 800cbbc:	0800cc1d 	.word	0x0800cc1d
 800cbc0:	2b6e      	cmp	r3, #110	; 0x6e
 800cbc2:	d809      	bhi.n	800cbd8 <_scanf_float+0x134>
 800cbc4:	2b60      	cmp	r3, #96	; 0x60
 800cbc6:	d8b2      	bhi.n	800cb2e <_scanf_float+0x8a>
 800cbc8:	2b54      	cmp	r3, #84	; 0x54
 800cbca:	d077      	beq.n	800ccbc <_scanf_float+0x218>
 800cbcc:	2b59      	cmp	r3, #89	; 0x59
 800cbce:	d199      	bne.n	800cb04 <_scanf_float+0x60>
 800cbd0:	2d07      	cmp	r5, #7
 800cbd2:	d197      	bne.n	800cb04 <_scanf_float+0x60>
 800cbd4:	2508      	movs	r5, #8
 800cbd6:	e029      	b.n	800cc2c <_scanf_float+0x188>
 800cbd8:	2b74      	cmp	r3, #116	; 0x74
 800cbda:	d06f      	beq.n	800ccbc <_scanf_float+0x218>
 800cbdc:	2b79      	cmp	r3, #121	; 0x79
 800cbde:	e7f6      	b.n	800cbce <_scanf_float+0x12a>
 800cbe0:	6821      	ldr	r1, [r4, #0]
 800cbe2:	05c8      	lsls	r0, r1, #23
 800cbe4:	d51a      	bpl.n	800cc1c <_scanf_float+0x178>
 800cbe6:	9b02      	ldr	r3, [sp, #8]
 800cbe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cbec:	6021      	str	r1, [r4, #0]
 800cbee:	f109 0901 	add.w	r9, r9, #1
 800cbf2:	b11b      	cbz	r3, 800cbfc <_scanf_float+0x158>
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	3201      	adds	r2, #1
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	60a2      	str	r2, [r4, #8]
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	60a3      	str	r3, [r4, #8]
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	3301      	adds	r3, #1
 800cc06:	6123      	str	r3, [r4, #16]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	f340 8084 	ble.w	800cd1c <_scanf_float+0x278>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3301      	adds	r3, #1
 800cc18:	603b      	str	r3, [r7, #0]
 800cc1a:	e766      	b.n	800caea <_scanf_float+0x46>
 800cc1c:	eb1a 0f05 	cmn.w	sl, r5
 800cc20:	f47f af70 	bne.w	800cb04 <_scanf_float+0x60>
 800cc24:	6822      	ldr	r2, [r4, #0]
 800cc26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cc2a:	6022      	str	r2, [r4, #0]
 800cc2c:	f806 3b01 	strb.w	r3, [r6], #1
 800cc30:	e7e4      	b.n	800cbfc <_scanf_float+0x158>
 800cc32:	6822      	ldr	r2, [r4, #0]
 800cc34:	0610      	lsls	r0, r2, #24
 800cc36:	f57f af65 	bpl.w	800cb04 <_scanf_float+0x60>
 800cc3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc3e:	e7f4      	b.n	800cc2a <_scanf_float+0x186>
 800cc40:	f1ba 0f00 	cmp.w	sl, #0
 800cc44:	d10e      	bne.n	800cc64 <_scanf_float+0x1c0>
 800cc46:	f1b9 0f00 	cmp.w	r9, #0
 800cc4a:	d10e      	bne.n	800cc6a <_scanf_float+0x1c6>
 800cc4c:	6822      	ldr	r2, [r4, #0]
 800cc4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc56:	d108      	bne.n	800cc6a <_scanf_float+0x1c6>
 800cc58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc5c:	6022      	str	r2, [r4, #0]
 800cc5e:	f04f 0a01 	mov.w	sl, #1
 800cc62:	e7e3      	b.n	800cc2c <_scanf_float+0x188>
 800cc64:	f1ba 0f02 	cmp.w	sl, #2
 800cc68:	d055      	beq.n	800cd16 <_scanf_float+0x272>
 800cc6a:	2d01      	cmp	r5, #1
 800cc6c:	d002      	beq.n	800cc74 <_scanf_float+0x1d0>
 800cc6e:	2d04      	cmp	r5, #4
 800cc70:	f47f af48 	bne.w	800cb04 <_scanf_float+0x60>
 800cc74:	3501      	adds	r5, #1
 800cc76:	b2ed      	uxtb	r5, r5
 800cc78:	e7d8      	b.n	800cc2c <_scanf_float+0x188>
 800cc7a:	f1ba 0f01 	cmp.w	sl, #1
 800cc7e:	f47f af41 	bne.w	800cb04 <_scanf_float+0x60>
 800cc82:	f04f 0a02 	mov.w	sl, #2
 800cc86:	e7d1      	b.n	800cc2c <_scanf_float+0x188>
 800cc88:	b97d      	cbnz	r5, 800ccaa <_scanf_float+0x206>
 800cc8a:	f1b9 0f00 	cmp.w	r9, #0
 800cc8e:	f47f af3c 	bne.w	800cb0a <_scanf_float+0x66>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc9c:	f47f af39 	bne.w	800cb12 <_scanf_float+0x6e>
 800cca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	2501      	movs	r5, #1
 800cca8:	e7c0      	b.n	800cc2c <_scanf_float+0x188>
 800ccaa:	2d03      	cmp	r5, #3
 800ccac:	d0e2      	beq.n	800cc74 <_scanf_float+0x1d0>
 800ccae:	2d05      	cmp	r5, #5
 800ccb0:	e7de      	b.n	800cc70 <_scanf_float+0x1cc>
 800ccb2:	2d02      	cmp	r5, #2
 800ccb4:	f47f af26 	bne.w	800cb04 <_scanf_float+0x60>
 800ccb8:	2503      	movs	r5, #3
 800ccba:	e7b7      	b.n	800cc2c <_scanf_float+0x188>
 800ccbc:	2d06      	cmp	r5, #6
 800ccbe:	f47f af21 	bne.w	800cb04 <_scanf_float+0x60>
 800ccc2:	2507      	movs	r5, #7
 800ccc4:	e7b2      	b.n	800cc2c <_scanf_float+0x188>
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	0591      	lsls	r1, r2, #22
 800ccca:	f57f af1b 	bpl.w	800cb04 <_scanf_float+0x60>
 800ccce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ccd2:	6022      	str	r2, [r4, #0]
 800ccd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccd8:	e7a8      	b.n	800cc2c <_scanf_float+0x188>
 800ccda:	6822      	ldr	r2, [r4, #0]
 800ccdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cce0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cce4:	d006      	beq.n	800ccf4 <_scanf_float+0x250>
 800cce6:	0550      	lsls	r0, r2, #21
 800cce8:	f57f af0c 	bpl.w	800cb04 <_scanf_float+0x60>
 800ccec:	f1b9 0f00 	cmp.w	r9, #0
 800ccf0:	f43f af0f 	beq.w	800cb12 <_scanf_float+0x6e>
 800ccf4:	0591      	lsls	r1, r2, #22
 800ccf6:	bf58      	it	pl
 800ccf8:	9901      	ldrpl	r1, [sp, #4]
 800ccfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccfe:	bf58      	it	pl
 800cd00:	eba9 0101 	subpl.w	r1, r9, r1
 800cd04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cd08:	bf58      	it	pl
 800cd0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd0e:	6022      	str	r2, [r4, #0]
 800cd10:	f04f 0900 	mov.w	r9, #0
 800cd14:	e78a      	b.n	800cc2c <_scanf_float+0x188>
 800cd16:	f04f 0a03 	mov.w	sl, #3
 800cd1a:	e787      	b.n	800cc2c <_scanf_float+0x188>
 800cd1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd20:	4639      	mov	r1, r7
 800cd22:	4640      	mov	r0, r8
 800cd24:	4798      	blx	r3
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f43f aedf 	beq.w	800caea <_scanf_float+0x46>
 800cd2c:	e6ea      	b.n	800cb04 <_scanf_float+0x60>
 800cd2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd36:	463a      	mov	r2, r7
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4798      	blx	r3
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	e6ec      	b.n	800cb1e <_scanf_float+0x7a>
 800cd44:	1e6b      	subs	r3, r5, #1
 800cd46:	2b06      	cmp	r3, #6
 800cd48:	d825      	bhi.n	800cd96 <_scanf_float+0x2f2>
 800cd4a:	2d02      	cmp	r5, #2
 800cd4c:	d836      	bhi.n	800cdbc <_scanf_float+0x318>
 800cd4e:	455e      	cmp	r6, fp
 800cd50:	f67f aee8 	bls.w	800cb24 <_scanf_float+0x80>
 800cd54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd5c:	463a      	mov	r2, r7
 800cd5e:	4640      	mov	r0, r8
 800cd60:	4798      	blx	r3
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	e7f1      	b.n	800cd4e <_scanf_float+0x2aa>
 800cd6a:	9802      	ldr	r0, [sp, #8]
 800cd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cd74:	9002      	str	r0, [sp, #8]
 800cd76:	463a      	mov	r2, r7
 800cd78:	4640      	mov	r0, r8
 800cd7a:	4798      	blx	r3
 800cd7c:	6923      	ldr	r3, [r4, #16]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	6123      	str	r3, [r4, #16]
 800cd82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd86:	fa5f fa8a 	uxtb.w	sl, sl
 800cd8a:	f1ba 0f02 	cmp.w	sl, #2
 800cd8e:	d1ec      	bne.n	800cd6a <_scanf_float+0x2c6>
 800cd90:	3d03      	subs	r5, #3
 800cd92:	b2ed      	uxtb	r5, r5
 800cd94:	1b76      	subs	r6, r6, r5
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	05da      	lsls	r2, r3, #23
 800cd9a:	d52f      	bpl.n	800cdfc <_scanf_float+0x358>
 800cd9c:	055b      	lsls	r3, r3, #21
 800cd9e:	d510      	bpl.n	800cdc2 <_scanf_float+0x31e>
 800cda0:	455e      	cmp	r6, fp
 800cda2:	f67f aebf 	bls.w	800cb24 <_scanf_float+0x80>
 800cda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdae:	463a      	mov	r2, r7
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	4798      	blx	r3
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	6123      	str	r3, [r4, #16]
 800cdba:	e7f1      	b.n	800cda0 <_scanf_float+0x2fc>
 800cdbc:	46aa      	mov	sl, r5
 800cdbe:	9602      	str	r6, [sp, #8]
 800cdc0:	e7df      	b.n	800cd82 <_scanf_float+0x2de>
 800cdc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	2965      	cmp	r1, #101	; 0x65
 800cdca:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdce:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	d00c      	beq.n	800cdf0 <_scanf_float+0x34c>
 800cdd6:	2945      	cmp	r1, #69	; 0x45
 800cdd8:	d00a      	beq.n	800cdf0 <_scanf_float+0x34c>
 800cdda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdde:	463a      	mov	r2, r7
 800cde0:	4640      	mov	r0, r8
 800cde2:	4798      	blx	r3
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	1eb5      	subs	r5, r6, #2
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdf4:	463a      	mov	r2, r7
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	4798      	blx	r3
 800cdfa:	462e      	mov	r6, r5
 800cdfc:	6825      	ldr	r5, [r4, #0]
 800cdfe:	f015 0510 	ands.w	r5, r5, #16
 800ce02:	d159      	bne.n	800ceb8 <_scanf_float+0x414>
 800ce04:	7035      	strb	r5, [r6, #0]
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce10:	d11b      	bne.n	800ce4a <_scanf_float+0x3a6>
 800ce12:	9b01      	ldr	r3, [sp, #4]
 800ce14:	454b      	cmp	r3, r9
 800ce16:	eba3 0209 	sub.w	r2, r3, r9
 800ce1a:	d123      	bne.n	800ce64 <_scanf_float+0x3c0>
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4659      	mov	r1, fp
 800ce20:	4640      	mov	r0, r8
 800ce22:	f000 ff33 	bl	800dc8c <_strtod_r>
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	f012 0f02 	tst.w	r2, #2
 800ce2e:	ec57 6b10 	vmov	r6, r7, d0
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	d021      	beq.n	800ce7a <_scanf_float+0x3d6>
 800ce36:	9903      	ldr	r1, [sp, #12]
 800ce38:	1d1a      	adds	r2, r3, #4
 800ce3a:	600a      	str	r2, [r1, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	e9c3 6700 	strd	r6, r7, [r3]
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60e3      	str	r3, [r4, #12]
 800ce48:	e66d      	b.n	800cb26 <_scanf_float+0x82>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0e5      	beq.n	800ce1c <_scanf_float+0x378>
 800ce50:	9905      	ldr	r1, [sp, #20]
 800ce52:	230a      	movs	r3, #10
 800ce54:	462a      	mov	r2, r5
 800ce56:	3101      	adds	r1, #1
 800ce58:	4640      	mov	r0, r8
 800ce5a:	f000 ff9f 	bl	800dd9c <_strtol_r>
 800ce5e:	9b04      	ldr	r3, [sp, #16]
 800ce60:	9e05      	ldr	r6, [sp, #20]
 800ce62:	1ac2      	subs	r2, r0, r3
 800ce64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ce68:	429e      	cmp	r6, r3
 800ce6a:	bf28      	it	cs
 800ce6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ce70:	4912      	ldr	r1, [pc, #72]	; (800cebc <_scanf_float+0x418>)
 800ce72:	4630      	mov	r0, r6
 800ce74:	f000 f82c 	bl	800ced0 <siprintf>
 800ce78:	e7d0      	b.n	800ce1c <_scanf_float+0x378>
 800ce7a:	9903      	ldr	r1, [sp, #12]
 800ce7c:	f012 0f04 	tst.w	r2, #4
 800ce80:	f103 0204 	add.w	r2, r3, #4
 800ce84:	600a      	str	r2, [r1, #0]
 800ce86:	d1d9      	bne.n	800ce3c <_scanf_float+0x398>
 800ce88:	f8d3 8000 	ldr.w	r8, [r3]
 800ce8c:	ee10 2a10 	vmov	r2, s0
 800ce90:	ee10 0a10 	vmov	r0, s0
 800ce94:	463b      	mov	r3, r7
 800ce96:	4639      	mov	r1, r7
 800ce98:	f7f3 fe58 	bl	8000b4c <__aeabi_dcmpun>
 800ce9c:	b128      	cbz	r0, 800ceaa <_scanf_float+0x406>
 800ce9e:	4808      	ldr	r0, [pc, #32]	; (800cec0 <_scanf_float+0x41c>)
 800cea0:	f000 f810 	bl	800cec4 <nanf>
 800cea4:	ed88 0a00 	vstr	s0, [r8]
 800cea8:	e7cb      	b.n	800ce42 <_scanf_float+0x39e>
 800ceaa:	4630      	mov	r0, r6
 800ceac:	4639      	mov	r1, r7
 800ceae:	f7f3 feab 	bl	8000c08 <__aeabi_d2f>
 800ceb2:	f8c8 0000 	str.w	r0, [r8]
 800ceb6:	e7c4      	b.n	800ce42 <_scanf_float+0x39e>
 800ceb8:	2500      	movs	r5, #0
 800ceba:	e634      	b.n	800cb26 <_scanf_float+0x82>
 800cebc:	08011c32 	.word	0x08011c32
 800cec0:	080120f3 	.word	0x080120f3

0800cec4 <nanf>:
 800cec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cecc <nanf+0x8>
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	7fc00000 	.word	0x7fc00000

0800ced0 <siprintf>:
 800ced0:	b40e      	push	{r1, r2, r3}
 800ced2:	b500      	push	{lr}
 800ced4:	b09c      	sub	sp, #112	; 0x70
 800ced6:	ab1d      	add	r3, sp, #116	; 0x74
 800ced8:	9002      	str	r0, [sp, #8]
 800ceda:	9006      	str	r0, [sp, #24]
 800cedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cee0:	4809      	ldr	r0, [pc, #36]	; (800cf08 <siprintf+0x38>)
 800cee2:	9107      	str	r1, [sp, #28]
 800cee4:	9104      	str	r1, [sp, #16]
 800cee6:	4909      	ldr	r1, [pc, #36]	; (800cf0c <siprintf+0x3c>)
 800cee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceec:	9105      	str	r1, [sp, #20]
 800ceee:	6800      	ldr	r0, [r0, #0]
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	a902      	add	r1, sp, #8
 800cef4:	f003 fad4 	bl	80104a0 <_svfiprintf_r>
 800cef8:	9b02      	ldr	r3, [sp, #8]
 800cefa:	2200      	movs	r2, #0
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	b01c      	add	sp, #112	; 0x70
 800cf00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf04:	b003      	add	sp, #12
 800cf06:	4770      	bx	lr
 800cf08:	20000020 	.word	0x20000020
 800cf0c:	ffff0208 	.word	0xffff0208

0800cf10 <siscanf>:
 800cf10:	b40e      	push	{r1, r2, r3}
 800cf12:	b510      	push	{r4, lr}
 800cf14:	b09f      	sub	sp, #124	; 0x7c
 800cf16:	ac21      	add	r4, sp, #132	; 0x84
 800cf18:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cf1c:	f854 2b04 	ldr.w	r2, [r4], #4
 800cf20:	9201      	str	r2, [sp, #4]
 800cf22:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cf26:	9004      	str	r0, [sp, #16]
 800cf28:	9008      	str	r0, [sp, #32]
 800cf2a:	f7f3 f95b 	bl	80001e4 <strlen>
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	; (800cf60 <siscanf+0x50>)
 800cf30:	9005      	str	r0, [sp, #20]
 800cf32:	9009      	str	r0, [sp, #36]	; 0x24
 800cf34:	930d      	str	r3, [sp, #52]	; 0x34
 800cf36:	480b      	ldr	r0, [pc, #44]	; (800cf64 <siscanf+0x54>)
 800cf38:	9a01      	ldr	r2, [sp, #4]
 800cf3a:	6800      	ldr	r0, [r0, #0]
 800cf3c:	9403      	str	r4, [sp, #12]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	9311      	str	r3, [sp, #68]	; 0x44
 800cf42:	9316      	str	r3, [sp, #88]	; 0x58
 800cf44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cf4c:	a904      	add	r1, sp, #16
 800cf4e:	4623      	mov	r3, r4
 800cf50:	f003 fc00 	bl	8010754 <__ssvfiscanf_r>
 800cf54:	b01f      	add	sp, #124	; 0x7c
 800cf56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf5a:	b003      	add	sp, #12
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	0800cf8b 	.word	0x0800cf8b
 800cf64:	20000020 	.word	0x20000020

0800cf68 <__sread>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf70:	f003 feba 	bl	8010ce8 <_read_r>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	bfab      	itete	ge
 800cf78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf7a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf7c:	181b      	addge	r3, r3, r0
 800cf7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf82:	bfac      	ite	ge
 800cf84:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf86:	81a3      	strhlt	r3, [r4, #12]
 800cf88:	bd10      	pop	{r4, pc}

0800cf8a <__seofread>:
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	4770      	bx	lr

0800cf8e <__swrite>:
 800cf8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf92:	461f      	mov	r7, r3
 800cf94:	898b      	ldrh	r3, [r1, #12]
 800cf96:	05db      	lsls	r3, r3, #23
 800cf98:	4605      	mov	r5, r0
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	d505      	bpl.n	800cfac <__swrite+0x1e>
 800cfa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f002 fc32 	bl	800f810 <_lseek_r>
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfb6:	81a3      	strh	r3, [r4, #12]
 800cfb8:	4632      	mov	r2, r6
 800cfba:	463b      	mov	r3, r7
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc2:	f001 b9b1 	b.w	800e328 <_write_r>

0800cfc6 <__sseek>:
 800cfc6:	b510      	push	{r4, lr}
 800cfc8:	460c      	mov	r4, r1
 800cfca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfce:	f002 fc1f 	bl	800f810 <_lseek_r>
 800cfd2:	1c43      	adds	r3, r0, #1
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	bf15      	itete	ne
 800cfd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfe2:	81a3      	strheq	r3, [r4, #12]
 800cfe4:	bf18      	it	ne
 800cfe6:	81a3      	strhne	r3, [r4, #12]
 800cfe8:	bd10      	pop	{r4, pc}

0800cfea <__sclose>:
 800cfea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfee:	f001 b9ad 	b.w	800e34c <_close_r>

0800cff2 <strchr>:
 800cff2:	b2c9      	uxtb	r1, r1
 800cff4:	4603      	mov	r3, r0
 800cff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cffa:	b11a      	cbz	r2, 800d004 <strchr+0x12>
 800cffc:	428a      	cmp	r2, r1
 800cffe:	d1f9      	bne.n	800cff4 <strchr+0x2>
 800d000:	4618      	mov	r0, r3
 800d002:	4770      	bx	lr
 800d004:	2900      	cmp	r1, #0
 800d006:	bf18      	it	ne
 800d008:	2300      	movne	r3, #0
 800d00a:	e7f9      	b.n	800d000 <strchr+0xe>

0800d00c <strcpy>:
 800d00c:	4603      	mov	r3, r0
 800d00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d012:	f803 2b01 	strb.w	r2, [r3], #1
 800d016:	2a00      	cmp	r2, #0
 800d018:	d1f9      	bne.n	800d00e <strcpy+0x2>
 800d01a:	4770      	bx	lr

0800d01c <strstr>:
 800d01c:	780a      	ldrb	r2, [r1, #0]
 800d01e:	b570      	push	{r4, r5, r6, lr}
 800d020:	b96a      	cbnz	r2, 800d03e <strstr+0x22>
 800d022:	bd70      	pop	{r4, r5, r6, pc}
 800d024:	429a      	cmp	r2, r3
 800d026:	d109      	bne.n	800d03c <strstr+0x20>
 800d028:	460c      	mov	r4, r1
 800d02a:	4605      	mov	r5, r0
 800d02c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d030:	2b00      	cmp	r3, #0
 800d032:	d0f6      	beq.n	800d022 <strstr+0x6>
 800d034:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d038:	429e      	cmp	r6, r3
 800d03a:	d0f7      	beq.n	800d02c <strstr+0x10>
 800d03c:	3001      	adds	r0, #1
 800d03e:	7803      	ldrb	r3, [r0, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1ef      	bne.n	800d024 <strstr+0x8>
 800d044:	4618      	mov	r0, r3
 800d046:	e7ec      	b.n	800d022 <strstr+0x6>

0800d048 <sulp>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	4604      	mov	r4, r0
 800d04c:	460d      	mov	r5, r1
 800d04e:	ec45 4b10 	vmov	d0, r4, r5
 800d052:	4616      	mov	r6, r2
 800d054:	f002 ff82 	bl	800ff5c <__ulp>
 800d058:	ec51 0b10 	vmov	r0, r1, d0
 800d05c:	b17e      	cbz	r6, 800d07e <sulp+0x36>
 800d05e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd09      	ble.n	800d07e <sulp+0x36>
 800d06a:	051b      	lsls	r3, r3, #20
 800d06c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d070:	2400      	movs	r4, #0
 800d072:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d076:	4622      	mov	r2, r4
 800d078:	462b      	mov	r3, r5
 800d07a:	f7f3 facd 	bl	8000618 <__aeabi_dmul>
 800d07e:	bd70      	pop	{r4, r5, r6, pc}

0800d080 <_strtod_l>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ed2d 8b02 	vpush	{d8}
 800d088:	b09d      	sub	sp, #116	; 0x74
 800d08a:	461f      	mov	r7, r3
 800d08c:	2300      	movs	r3, #0
 800d08e:	9318      	str	r3, [sp, #96]	; 0x60
 800d090:	4ba2      	ldr	r3, [pc, #648]	; (800d31c <_strtod_l+0x29c>)
 800d092:	9213      	str	r2, [sp, #76]	; 0x4c
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	9305      	str	r3, [sp, #20]
 800d098:	4604      	mov	r4, r0
 800d09a:	4618      	mov	r0, r3
 800d09c:	4688      	mov	r8, r1
 800d09e:	f7f3 f8a1 	bl	80001e4 <strlen>
 800d0a2:	f04f 0a00 	mov.w	sl, #0
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	f04f 0b00 	mov.w	fp, #0
 800d0ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	2a2b      	cmp	r2, #43	; 0x2b
 800d0b6:	d04e      	beq.n	800d156 <_strtod_l+0xd6>
 800d0b8:	d83b      	bhi.n	800d132 <_strtod_l+0xb2>
 800d0ba:	2a0d      	cmp	r2, #13
 800d0bc:	d834      	bhi.n	800d128 <_strtod_l+0xa8>
 800d0be:	2a08      	cmp	r2, #8
 800d0c0:	d834      	bhi.n	800d12c <_strtod_l+0xac>
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d03e      	beq.n	800d144 <_strtod_l+0xc4>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	930a      	str	r3, [sp, #40]	; 0x28
 800d0ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d0cc:	7833      	ldrb	r3, [r6, #0]
 800d0ce:	2b30      	cmp	r3, #48	; 0x30
 800d0d0:	f040 80b0 	bne.w	800d234 <_strtod_l+0x1b4>
 800d0d4:	7873      	ldrb	r3, [r6, #1]
 800d0d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0da:	2b58      	cmp	r3, #88	; 0x58
 800d0dc:	d168      	bne.n	800d1b0 <_strtod_l+0x130>
 800d0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	ab18      	add	r3, sp, #96	; 0x60
 800d0e4:	9702      	str	r7, [sp, #8]
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	4a8d      	ldr	r2, [pc, #564]	; (800d320 <_strtod_l+0x2a0>)
 800d0ea:	ab19      	add	r3, sp, #100	; 0x64
 800d0ec:	a917      	add	r1, sp, #92	; 0x5c
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f002 f834 	bl	800f15c <__gethex>
 800d0f4:	f010 0707 	ands.w	r7, r0, #7
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	d005      	beq.n	800d108 <_strtod_l+0x88>
 800d0fc:	2f06      	cmp	r7, #6
 800d0fe:	d12c      	bne.n	800d15a <_strtod_l+0xda>
 800d100:	3601      	adds	r6, #1
 800d102:	2300      	movs	r3, #0
 800d104:	9617      	str	r6, [sp, #92]	; 0x5c
 800d106:	930a      	str	r3, [sp, #40]	; 0x28
 800d108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f040 8590 	bne.w	800dc30 <_strtod_l+0xbb0>
 800d110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d112:	b1eb      	cbz	r3, 800d150 <_strtod_l+0xd0>
 800d114:	4652      	mov	r2, sl
 800d116:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d11a:	ec43 2b10 	vmov	d0, r2, r3
 800d11e:	b01d      	add	sp, #116	; 0x74
 800d120:	ecbd 8b02 	vpop	{d8}
 800d124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d128:	2a20      	cmp	r2, #32
 800d12a:	d1cc      	bne.n	800d0c6 <_strtod_l+0x46>
 800d12c:	3301      	adds	r3, #1
 800d12e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d130:	e7be      	b.n	800d0b0 <_strtod_l+0x30>
 800d132:	2a2d      	cmp	r2, #45	; 0x2d
 800d134:	d1c7      	bne.n	800d0c6 <_strtod_l+0x46>
 800d136:	2201      	movs	r2, #1
 800d138:	920a      	str	r2, [sp, #40]	; 0x28
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d13e:	785b      	ldrb	r3, [r3, #1]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1c2      	bne.n	800d0ca <_strtod_l+0x4a>
 800d144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d146:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f040 856e 	bne.w	800dc2c <_strtod_l+0xbac>
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	e7e1      	b.n	800d11a <_strtod_l+0x9a>
 800d156:	2200      	movs	r2, #0
 800d158:	e7ee      	b.n	800d138 <_strtod_l+0xb8>
 800d15a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d15c:	b13a      	cbz	r2, 800d16e <_strtod_l+0xee>
 800d15e:	2135      	movs	r1, #53	; 0x35
 800d160:	a81a      	add	r0, sp, #104	; 0x68
 800d162:	f003 f806 	bl	8010172 <__copybits>
 800d166:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d168:	4620      	mov	r0, r4
 800d16a:	f002 fbc5 	bl	800f8f8 <_Bfree>
 800d16e:	3f01      	subs	r7, #1
 800d170:	2f04      	cmp	r7, #4
 800d172:	d806      	bhi.n	800d182 <_strtod_l+0x102>
 800d174:	e8df f007 	tbb	[pc, r7]
 800d178:	1714030a 	.word	0x1714030a
 800d17c:	0a          	.byte	0x0a
 800d17d:	00          	.byte	0x00
 800d17e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d182:	0728      	lsls	r0, r5, #28
 800d184:	d5c0      	bpl.n	800d108 <_strtod_l+0x88>
 800d186:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d18a:	e7bd      	b.n	800d108 <_strtod_l+0x88>
 800d18c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d196:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d19a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d19e:	e7f0      	b.n	800d182 <_strtod_l+0x102>
 800d1a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d324 <_strtod_l+0x2a4>
 800d1a4:	e7ed      	b.n	800d182 <_strtod_l+0x102>
 800d1a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d1aa:	f04f 3aff 	mov.w	sl, #4294967295
 800d1ae:	e7e8      	b.n	800d182 <_strtod_l+0x102>
 800d1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1b6:	785b      	ldrb	r3, [r3, #1]
 800d1b8:	2b30      	cmp	r3, #48	; 0x30
 800d1ba:	d0f9      	beq.n	800d1b0 <_strtod_l+0x130>
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d0a3      	beq.n	800d108 <_strtod_l+0x88>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f04f 0900 	mov.w	r9, #0
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1ca:	9308      	str	r3, [sp, #32]
 800d1cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800d1d0:	464f      	mov	r7, r9
 800d1d2:	220a      	movs	r2, #10
 800d1d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d1d6:	7806      	ldrb	r6, [r0, #0]
 800d1d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d1dc:	b2d9      	uxtb	r1, r3
 800d1de:	2909      	cmp	r1, #9
 800d1e0:	d92a      	bls.n	800d238 <_strtod_l+0x1b8>
 800d1e2:	9905      	ldr	r1, [sp, #20]
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	f003 fde3 	bl	8010db0 <strncmp>
 800d1ea:	b398      	cbz	r0, 800d254 <_strtod_l+0x1d4>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	4632      	mov	r2, r6
 800d1f0:	463d      	mov	r5, r7
 800d1f2:	9005      	str	r0, [sp, #20]
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2a65      	cmp	r2, #101	; 0x65
 800d1f8:	d001      	beq.n	800d1fe <_strtod_l+0x17e>
 800d1fa:	2a45      	cmp	r2, #69	; 0x45
 800d1fc:	d118      	bne.n	800d230 <_strtod_l+0x1b0>
 800d1fe:	b91d      	cbnz	r5, 800d208 <_strtod_l+0x188>
 800d200:	9a04      	ldr	r2, [sp, #16]
 800d202:	4302      	orrs	r2, r0
 800d204:	d09e      	beq.n	800d144 <_strtod_l+0xc4>
 800d206:	2500      	movs	r5, #0
 800d208:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d20c:	f108 0201 	add.w	r2, r8, #1
 800d210:	9217      	str	r2, [sp, #92]	; 0x5c
 800d212:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d216:	2a2b      	cmp	r2, #43	; 0x2b
 800d218:	d075      	beq.n	800d306 <_strtod_l+0x286>
 800d21a:	2a2d      	cmp	r2, #45	; 0x2d
 800d21c:	d07b      	beq.n	800d316 <_strtod_l+0x296>
 800d21e:	f04f 0c00 	mov.w	ip, #0
 800d222:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d226:	2909      	cmp	r1, #9
 800d228:	f240 8082 	bls.w	800d330 <_strtod_l+0x2b0>
 800d22c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d230:	2600      	movs	r6, #0
 800d232:	e09d      	b.n	800d370 <_strtod_l+0x2f0>
 800d234:	2300      	movs	r3, #0
 800d236:	e7c4      	b.n	800d1c2 <_strtod_l+0x142>
 800d238:	2f08      	cmp	r7, #8
 800d23a:	bfd8      	it	le
 800d23c:	9907      	ldrle	r1, [sp, #28]
 800d23e:	f100 0001 	add.w	r0, r0, #1
 800d242:	bfda      	itte	le
 800d244:	fb02 3301 	mlale	r3, r2, r1, r3
 800d248:	9307      	strle	r3, [sp, #28]
 800d24a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d24e:	3701      	adds	r7, #1
 800d250:	9017      	str	r0, [sp, #92]	; 0x5c
 800d252:	e7bf      	b.n	800d1d4 <_strtod_l+0x154>
 800d254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d256:	195a      	adds	r2, r3, r5
 800d258:	9217      	str	r2, [sp, #92]	; 0x5c
 800d25a:	5d5a      	ldrb	r2, [r3, r5]
 800d25c:	2f00      	cmp	r7, #0
 800d25e:	d037      	beq.n	800d2d0 <_strtod_l+0x250>
 800d260:	9005      	str	r0, [sp, #20]
 800d262:	463d      	mov	r5, r7
 800d264:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d912      	bls.n	800d292 <_strtod_l+0x212>
 800d26c:	2301      	movs	r3, #1
 800d26e:	e7c2      	b.n	800d1f6 <_strtod_l+0x176>
 800d270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	9217      	str	r2, [sp, #92]	; 0x5c
 800d276:	785a      	ldrb	r2, [r3, #1]
 800d278:	3001      	adds	r0, #1
 800d27a:	2a30      	cmp	r2, #48	; 0x30
 800d27c:	d0f8      	beq.n	800d270 <_strtod_l+0x1f0>
 800d27e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d282:	2b08      	cmp	r3, #8
 800d284:	f200 84d9 	bhi.w	800dc3a <_strtod_l+0xbba>
 800d288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d28a:	9005      	str	r0, [sp, #20]
 800d28c:	2000      	movs	r0, #0
 800d28e:	9308      	str	r3, [sp, #32]
 800d290:	4605      	mov	r5, r0
 800d292:	3a30      	subs	r2, #48	; 0x30
 800d294:	f100 0301 	add.w	r3, r0, #1
 800d298:	d014      	beq.n	800d2c4 <_strtod_l+0x244>
 800d29a:	9905      	ldr	r1, [sp, #20]
 800d29c:	4419      	add	r1, r3
 800d29e:	9105      	str	r1, [sp, #20]
 800d2a0:	462b      	mov	r3, r5
 800d2a2:	eb00 0e05 	add.w	lr, r0, r5
 800d2a6:	210a      	movs	r1, #10
 800d2a8:	4573      	cmp	r3, lr
 800d2aa:	d113      	bne.n	800d2d4 <_strtod_l+0x254>
 800d2ac:	182b      	adds	r3, r5, r0
 800d2ae:	2b08      	cmp	r3, #8
 800d2b0:	f105 0501 	add.w	r5, r5, #1
 800d2b4:	4405      	add	r5, r0
 800d2b6:	dc1c      	bgt.n	800d2f2 <_strtod_l+0x272>
 800d2b8:	9907      	ldr	r1, [sp, #28]
 800d2ba:	230a      	movs	r3, #10
 800d2bc:	fb03 2301 	mla	r3, r3, r1, r2
 800d2c0:	9307      	str	r3, [sp, #28]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2c6:	1c51      	adds	r1, r2, #1
 800d2c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d2ca:	7852      	ldrb	r2, [r2, #1]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	e7c9      	b.n	800d264 <_strtod_l+0x1e4>
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	e7d2      	b.n	800d27a <_strtod_l+0x1fa>
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	dc04      	bgt.n	800d2e2 <_strtod_l+0x262>
 800d2d8:	9e07      	ldr	r6, [sp, #28]
 800d2da:	434e      	muls	r6, r1
 800d2dc:	9607      	str	r6, [sp, #28]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	e7e2      	b.n	800d2a8 <_strtod_l+0x228>
 800d2e2:	f103 0c01 	add.w	ip, r3, #1
 800d2e6:	f1bc 0f10 	cmp.w	ip, #16
 800d2ea:	bfd8      	it	le
 800d2ec:	fb01 f909 	mulle.w	r9, r1, r9
 800d2f0:	e7f5      	b.n	800d2de <_strtod_l+0x25e>
 800d2f2:	2d10      	cmp	r5, #16
 800d2f4:	bfdc      	itt	le
 800d2f6:	230a      	movle	r3, #10
 800d2f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d2fc:	e7e1      	b.n	800d2c2 <_strtod_l+0x242>
 800d2fe:	2300      	movs	r3, #0
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	2301      	movs	r3, #1
 800d304:	e77c      	b.n	800d200 <_strtod_l+0x180>
 800d306:	f04f 0c00 	mov.w	ip, #0
 800d30a:	f108 0202 	add.w	r2, r8, #2
 800d30e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d310:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d314:	e785      	b.n	800d222 <_strtod_l+0x1a2>
 800d316:	f04f 0c01 	mov.w	ip, #1
 800d31a:	e7f6      	b.n	800d30a <_strtod_l+0x28a>
 800d31c:	08011ebc 	.word	0x08011ebc
 800d320:	08011c38 	.word	0x08011c38
 800d324:	7ff00000 	.word	0x7ff00000
 800d328:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d32a:	1c51      	adds	r1, r2, #1
 800d32c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d32e:	7852      	ldrb	r2, [r2, #1]
 800d330:	2a30      	cmp	r2, #48	; 0x30
 800d332:	d0f9      	beq.n	800d328 <_strtod_l+0x2a8>
 800d334:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d338:	2908      	cmp	r1, #8
 800d33a:	f63f af79 	bhi.w	800d230 <_strtod_l+0x1b0>
 800d33e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d342:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d344:	9206      	str	r2, [sp, #24]
 800d346:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d348:	1c51      	adds	r1, r2, #1
 800d34a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d34c:	7852      	ldrb	r2, [r2, #1]
 800d34e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d352:	2e09      	cmp	r6, #9
 800d354:	d937      	bls.n	800d3c6 <_strtod_l+0x346>
 800d356:	9e06      	ldr	r6, [sp, #24]
 800d358:	1b89      	subs	r1, r1, r6
 800d35a:	2908      	cmp	r1, #8
 800d35c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d360:	dc02      	bgt.n	800d368 <_strtod_l+0x2e8>
 800d362:	4576      	cmp	r6, lr
 800d364:	bfa8      	it	ge
 800d366:	4676      	movge	r6, lr
 800d368:	f1bc 0f00 	cmp.w	ip, #0
 800d36c:	d000      	beq.n	800d370 <_strtod_l+0x2f0>
 800d36e:	4276      	negs	r6, r6
 800d370:	2d00      	cmp	r5, #0
 800d372:	d14d      	bne.n	800d410 <_strtod_l+0x390>
 800d374:	9904      	ldr	r1, [sp, #16]
 800d376:	4301      	orrs	r1, r0
 800d378:	f47f aec6 	bne.w	800d108 <_strtod_l+0x88>
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f47f aee1 	bne.w	800d144 <_strtod_l+0xc4>
 800d382:	2a69      	cmp	r2, #105	; 0x69
 800d384:	d027      	beq.n	800d3d6 <_strtod_l+0x356>
 800d386:	dc24      	bgt.n	800d3d2 <_strtod_l+0x352>
 800d388:	2a49      	cmp	r2, #73	; 0x49
 800d38a:	d024      	beq.n	800d3d6 <_strtod_l+0x356>
 800d38c:	2a4e      	cmp	r2, #78	; 0x4e
 800d38e:	f47f aed9 	bne.w	800d144 <_strtod_l+0xc4>
 800d392:	499f      	ldr	r1, [pc, #636]	; (800d610 <_strtod_l+0x590>)
 800d394:	a817      	add	r0, sp, #92	; 0x5c
 800d396:	f002 f939 	bl	800f60c <__match>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	f43f aed2 	beq.w	800d144 <_strtod_l+0xc4>
 800d3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b28      	cmp	r3, #40	; 0x28
 800d3a6:	d12d      	bne.n	800d404 <_strtod_l+0x384>
 800d3a8:	499a      	ldr	r1, [pc, #616]	; (800d614 <_strtod_l+0x594>)
 800d3aa:	aa1a      	add	r2, sp, #104	; 0x68
 800d3ac:	a817      	add	r0, sp, #92	; 0x5c
 800d3ae:	f002 f941 	bl	800f634 <__hexnan>
 800d3b2:	2805      	cmp	r0, #5
 800d3b4:	d126      	bne.n	800d404 <_strtod_l+0x384>
 800d3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d3bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d3c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d3c4:	e6a0      	b.n	800d108 <_strtod_l+0x88>
 800d3c6:	210a      	movs	r1, #10
 800d3c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d3cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d3d0:	e7b9      	b.n	800d346 <_strtod_l+0x2c6>
 800d3d2:	2a6e      	cmp	r2, #110	; 0x6e
 800d3d4:	e7db      	b.n	800d38e <_strtod_l+0x30e>
 800d3d6:	4990      	ldr	r1, [pc, #576]	; (800d618 <_strtod_l+0x598>)
 800d3d8:	a817      	add	r0, sp, #92	; 0x5c
 800d3da:	f002 f917 	bl	800f60c <__match>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f43f aeb0 	beq.w	800d144 <_strtod_l+0xc4>
 800d3e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3e6:	498d      	ldr	r1, [pc, #564]	; (800d61c <_strtod_l+0x59c>)
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	a817      	add	r0, sp, #92	; 0x5c
 800d3ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ee:	f002 f90d 	bl	800f60c <__match>
 800d3f2:	b910      	cbnz	r0, 800d3fa <_strtod_l+0x37a>
 800d3f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d62c <_strtod_l+0x5ac>
 800d3fe:	f04f 0a00 	mov.w	sl, #0
 800d402:	e681      	b.n	800d108 <_strtod_l+0x88>
 800d404:	4886      	ldr	r0, [pc, #536]	; (800d620 <_strtod_l+0x5a0>)
 800d406:	f003 fc83 	bl	8010d10 <nan>
 800d40a:	ec5b ab10 	vmov	sl, fp, d0
 800d40e:	e67b      	b.n	800d108 <_strtod_l+0x88>
 800d410:	9b05      	ldr	r3, [sp, #20]
 800d412:	9807      	ldr	r0, [sp, #28]
 800d414:	1af3      	subs	r3, r6, r3
 800d416:	2f00      	cmp	r7, #0
 800d418:	bf08      	it	eq
 800d41a:	462f      	moveq	r7, r5
 800d41c:	2d10      	cmp	r5, #16
 800d41e:	9306      	str	r3, [sp, #24]
 800d420:	46a8      	mov	r8, r5
 800d422:	bfa8      	it	ge
 800d424:	f04f 0810 	movge.w	r8, #16
 800d428:	f7f3 f87c 	bl	8000524 <__aeabi_ui2d>
 800d42c:	2d09      	cmp	r5, #9
 800d42e:	4682      	mov	sl, r0
 800d430:	468b      	mov	fp, r1
 800d432:	dd13      	ble.n	800d45c <_strtod_l+0x3dc>
 800d434:	4b7b      	ldr	r3, [pc, #492]	; (800d624 <_strtod_l+0x5a4>)
 800d436:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d43a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d43e:	f7f3 f8eb 	bl	8000618 <__aeabi_dmul>
 800d442:	4682      	mov	sl, r0
 800d444:	4648      	mov	r0, r9
 800d446:	468b      	mov	fp, r1
 800d448:	f7f3 f86c 	bl	8000524 <__aeabi_ui2d>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	f7f2 ff2a 	bl	80002ac <__adddf3>
 800d458:	4682      	mov	sl, r0
 800d45a:	468b      	mov	fp, r1
 800d45c:	2d0f      	cmp	r5, #15
 800d45e:	dc38      	bgt.n	800d4d2 <_strtod_l+0x452>
 800d460:	9b06      	ldr	r3, [sp, #24]
 800d462:	2b00      	cmp	r3, #0
 800d464:	f43f ae50 	beq.w	800d108 <_strtod_l+0x88>
 800d468:	dd24      	ble.n	800d4b4 <_strtod_l+0x434>
 800d46a:	2b16      	cmp	r3, #22
 800d46c:	dc0b      	bgt.n	800d486 <_strtod_l+0x406>
 800d46e:	496d      	ldr	r1, [pc, #436]	; (800d624 <_strtod_l+0x5a4>)
 800d470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d478:	4652      	mov	r2, sl
 800d47a:	465b      	mov	r3, fp
 800d47c:	f7f3 f8cc 	bl	8000618 <__aeabi_dmul>
 800d480:	4682      	mov	sl, r0
 800d482:	468b      	mov	fp, r1
 800d484:	e640      	b.n	800d108 <_strtod_l+0x88>
 800d486:	9a06      	ldr	r2, [sp, #24]
 800d488:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d48c:	4293      	cmp	r3, r2
 800d48e:	db20      	blt.n	800d4d2 <_strtod_l+0x452>
 800d490:	4c64      	ldr	r4, [pc, #400]	; (800d624 <_strtod_l+0x5a4>)
 800d492:	f1c5 050f 	rsb	r5, r5, #15
 800d496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d49a:	4652      	mov	r2, sl
 800d49c:	465b      	mov	r3, fp
 800d49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4a2:	f7f3 f8b9 	bl	8000618 <__aeabi_dmul>
 800d4a6:	9b06      	ldr	r3, [sp, #24]
 800d4a8:	1b5d      	subs	r5, r3, r5
 800d4aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4b2:	e7e3      	b.n	800d47c <_strtod_l+0x3fc>
 800d4b4:	9b06      	ldr	r3, [sp, #24]
 800d4b6:	3316      	adds	r3, #22
 800d4b8:	db0b      	blt.n	800d4d2 <_strtod_l+0x452>
 800d4ba:	9b05      	ldr	r3, [sp, #20]
 800d4bc:	1b9e      	subs	r6, r3, r6
 800d4be:	4b59      	ldr	r3, [pc, #356]	; (800d624 <_strtod_l+0x5a4>)
 800d4c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d4c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	4659      	mov	r1, fp
 800d4cc:	f7f3 f9ce 	bl	800086c <__aeabi_ddiv>
 800d4d0:	e7d6      	b.n	800d480 <_strtod_l+0x400>
 800d4d2:	9b06      	ldr	r3, [sp, #24]
 800d4d4:	eba5 0808 	sub.w	r8, r5, r8
 800d4d8:	4498      	add	r8, r3
 800d4da:	f1b8 0f00 	cmp.w	r8, #0
 800d4de:	dd74      	ble.n	800d5ca <_strtod_l+0x54a>
 800d4e0:	f018 030f 	ands.w	r3, r8, #15
 800d4e4:	d00a      	beq.n	800d4fc <_strtod_l+0x47c>
 800d4e6:	494f      	ldr	r1, [pc, #316]	; (800d624 <_strtod_l+0x5a4>)
 800d4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4ec:	4652      	mov	r2, sl
 800d4ee:	465b      	mov	r3, fp
 800d4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4f4:	f7f3 f890 	bl	8000618 <__aeabi_dmul>
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	468b      	mov	fp, r1
 800d4fc:	f038 080f 	bics.w	r8, r8, #15
 800d500:	d04f      	beq.n	800d5a2 <_strtod_l+0x522>
 800d502:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d506:	dd22      	ble.n	800d54e <_strtod_l+0x4ce>
 800d508:	2500      	movs	r5, #0
 800d50a:	462e      	mov	r6, r5
 800d50c:	9507      	str	r5, [sp, #28]
 800d50e:	9505      	str	r5, [sp, #20]
 800d510:	2322      	movs	r3, #34	; 0x22
 800d512:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d62c <_strtod_l+0x5ac>
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	f04f 0a00 	mov.w	sl, #0
 800d51c:	9b07      	ldr	r3, [sp, #28]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f43f adf2 	beq.w	800d108 <_strtod_l+0x88>
 800d524:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d526:	4620      	mov	r0, r4
 800d528:	f002 f9e6 	bl	800f8f8 <_Bfree>
 800d52c:	9905      	ldr	r1, [sp, #20]
 800d52e:	4620      	mov	r0, r4
 800d530:	f002 f9e2 	bl	800f8f8 <_Bfree>
 800d534:	4631      	mov	r1, r6
 800d536:	4620      	mov	r0, r4
 800d538:	f002 f9de 	bl	800f8f8 <_Bfree>
 800d53c:	9907      	ldr	r1, [sp, #28]
 800d53e:	4620      	mov	r0, r4
 800d540:	f002 f9da 	bl	800f8f8 <_Bfree>
 800d544:	4629      	mov	r1, r5
 800d546:	4620      	mov	r0, r4
 800d548:	f002 f9d6 	bl	800f8f8 <_Bfree>
 800d54c:	e5dc      	b.n	800d108 <_strtod_l+0x88>
 800d54e:	4b36      	ldr	r3, [pc, #216]	; (800d628 <_strtod_l+0x5a8>)
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	2300      	movs	r3, #0
 800d554:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d558:	4650      	mov	r0, sl
 800d55a:	4659      	mov	r1, fp
 800d55c:	4699      	mov	r9, r3
 800d55e:	f1b8 0f01 	cmp.w	r8, #1
 800d562:	dc21      	bgt.n	800d5a8 <_strtod_l+0x528>
 800d564:	b10b      	cbz	r3, 800d56a <_strtod_l+0x4ea>
 800d566:	4682      	mov	sl, r0
 800d568:	468b      	mov	fp, r1
 800d56a:	4b2f      	ldr	r3, [pc, #188]	; (800d628 <_strtod_l+0x5a8>)
 800d56c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d570:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d574:	4652      	mov	r2, sl
 800d576:	465b      	mov	r3, fp
 800d578:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d57c:	f7f3 f84c 	bl	8000618 <__aeabi_dmul>
 800d580:	4b2a      	ldr	r3, [pc, #168]	; (800d62c <_strtod_l+0x5ac>)
 800d582:	460a      	mov	r2, r1
 800d584:	400b      	ands	r3, r1
 800d586:	492a      	ldr	r1, [pc, #168]	; (800d630 <_strtod_l+0x5b0>)
 800d588:	428b      	cmp	r3, r1
 800d58a:	4682      	mov	sl, r0
 800d58c:	d8bc      	bhi.n	800d508 <_strtod_l+0x488>
 800d58e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d592:	428b      	cmp	r3, r1
 800d594:	bf86      	itte	hi
 800d596:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d634 <_strtod_l+0x5b4>
 800d59a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d59e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	e084      	b.n	800d6b2 <_strtod_l+0x632>
 800d5a8:	f018 0f01 	tst.w	r8, #1
 800d5ac:	d005      	beq.n	800d5ba <_strtod_l+0x53a>
 800d5ae:	9b04      	ldr	r3, [sp, #16]
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f3 f830 	bl	8000618 <__aeabi_dmul>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	9a04      	ldr	r2, [sp, #16]
 800d5bc:	3208      	adds	r2, #8
 800d5be:	f109 0901 	add.w	r9, r9, #1
 800d5c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5c6:	9204      	str	r2, [sp, #16]
 800d5c8:	e7c9      	b.n	800d55e <_strtod_l+0x4de>
 800d5ca:	d0ea      	beq.n	800d5a2 <_strtod_l+0x522>
 800d5cc:	f1c8 0800 	rsb	r8, r8, #0
 800d5d0:	f018 020f 	ands.w	r2, r8, #15
 800d5d4:	d00a      	beq.n	800d5ec <_strtod_l+0x56c>
 800d5d6:	4b13      	ldr	r3, [pc, #76]	; (800d624 <_strtod_l+0x5a4>)
 800d5d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5dc:	4650      	mov	r0, sl
 800d5de:	4659      	mov	r1, fp
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f3 f942 	bl	800086c <__aeabi_ddiv>
 800d5e8:	4682      	mov	sl, r0
 800d5ea:	468b      	mov	fp, r1
 800d5ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5f0:	d0d7      	beq.n	800d5a2 <_strtod_l+0x522>
 800d5f2:	f1b8 0f1f 	cmp.w	r8, #31
 800d5f6:	dd1f      	ble.n	800d638 <_strtod_l+0x5b8>
 800d5f8:	2500      	movs	r5, #0
 800d5fa:	462e      	mov	r6, r5
 800d5fc:	9507      	str	r5, [sp, #28]
 800d5fe:	9505      	str	r5, [sp, #20]
 800d600:	2322      	movs	r3, #34	; 0x22
 800d602:	f04f 0a00 	mov.w	sl, #0
 800d606:	f04f 0b00 	mov.w	fp, #0
 800d60a:	6023      	str	r3, [r4, #0]
 800d60c:	e786      	b.n	800d51c <_strtod_l+0x49c>
 800d60e:	bf00      	nop
 800d610:	08011c0d 	.word	0x08011c0d
 800d614:	08011c4c 	.word	0x08011c4c
 800d618:	08011c05 	.word	0x08011c05
 800d61c:	08011dc8 	.word	0x08011dc8
 800d620:	080120f3 	.word	0x080120f3
 800d624:	08011fb8 	.word	0x08011fb8
 800d628:	08011f90 	.word	0x08011f90
 800d62c:	7ff00000 	.word	0x7ff00000
 800d630:	7ca00000 	.word	0x7ca00000
 800d634:	7fefffff 	.word	0x7fefffff
 800d638:	f018 0310 	ands.w	r3, r8, #16
 800d63c:	bf18      	it	ne
 800d63e:	236a      	movne	r3, #106	; 0x6a
 800d640:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d9f0 <_strtod_l+0x970>
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	4650      	mov	r0, sl
 800d648:	4659      	mov	r1, fp
 800d64a:	2300      	movs	r3, #0
 800d64c:	f018 0f01 	tst.w	r8, #1
 800d650:	d004      	beq.n	800d65c <_strtod_l+0x5dc>
 800d652:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d656:	f7f2 ffdf 	bl	8000618 <__aeabi_dmul>
 800d65a:	2301      	movs	r3, #1
 800d65c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d660:	f109 0908 	add.w	r9, r9, #8
 800d664:	d1f2      	bne.n	800d64c <_strtod_l+0x5cc>
 800d666:	b10b      	cbz	r3, 800d66c <_strtod_l+0x5ec>
 800d668:	4682      	mov	sl, r0
 800d66a:	468b      	mov	fp, r1
 800d66c:	9b04      	ldr	r3, [sp, #16]
 800d66e:	b1c3      	cbz	r3, 800d6a2 <_strtod_l+0x622>
 800d670:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d674:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d678:	2b00      	cmp	r3, #0
 800d67a:	4659      	mov	r1, fp
 800d67c:	dd11      	ble.n	800d6a2 <_strtod_l+0x622>
 800d67e:	2b1f      	cmp	r3, #31
 800d680:	f340 8124 	ble.w	800d8cc <_strtod_l+0x84c>
 800d684:	2b34      	cmp	r3, #52	; 0x34
 800d686:	bfde      	ittt	le
 800d688:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d68c:	f04f 33ff 	movle.w	r3, #4294967295
 800d690:	fa03 f202 	lslle.w	r2, r3, r2
 800d694:	f04f 0a00 	mov.w	sl, #0
 800d698:	bfcc      	ite	gt
 800d69a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d69e:	ea02 0b01 	andle.w	fp, r2, r1
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4650      	mov	r0, sl
 800d6a8:	4659      	mov	r1, fp
 800d6aa:	f7f3 fa1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d1a2      	bne.n	800d5f8 <_strtod_l+0x578>
 800d6b2:	9b07      	ldr	r3, [sp, #28]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	9908      	ldr	r1, [sp, #32]
 800d6b8:	462b      	mov	r3, r5
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f002 f983 	bl	800f9c8 <__s2b>
 800d6c2:	9007      	str	r0, [sp, #28]
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f43f af1f 	beq.w	800d508 <_strtod_l+0x488>
 800d6ca:	9b05      	ldr	r3, [sp, #20]
 800d6cc:	1b9e      	subs	r6, r3, r6
 800d6ce:	9b06      	ldr	r3, [sp, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	bfb4      	ite	lt
 800d6d4:	4633      	movlt	r3, r6
 800d6d6:	2300      	movge	r3, #0
 800d6d8:	930c      	str	r3, [sp, #48]	; 0x30
 800d6da:	9b06      	ldr	r3, [sp, #24]
 800d6dc:	2500      	movs	r5, #0
 800d6de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6e2:	9312      	str	r3, [sp, #72]	; 0x48
 800d6e4:	462e      	mov	r6, r5
 800d6e6:	9b07      	ldr	r3, [sp, #28]
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	6859      	ldr	r1, [r3, #4]
 800d6ec:	f002 f8c4 	bl	800f878 <_Balloc>
 800d6f0:	9005      	str	r0, [sp, #20]
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f43f af0c 	beq.w	800d510 <_strtod_l+0x490>
 800d6f8:	9b07      	ldr	r3, [sp, #28]
 800d6fa:	691a      	ldr	r2, [r3, #16]
 800d6fc:	3202      	adds	r2, #2
 800d6fe:	f103 010c 	add.w	r1, r3, #12
 800d702:	0092      	lsls	r2, r2, #2
 800d704:	300c      	adds	r0, #12
 800d706:	f7fe fadb 	bl	800bcc0 <memcpy>
 800d70a:	ec4b ab10 	vmov	d0, sl, fp
 800d70e:	aa1a      	add	r2, sp, #104	; 0x68
 800d710:	a919      	add	r1, sp, #100	; 0x64
 800d712:	4620      	mov	r0, r4
 800d714:	f002 fc9e 	bl	8010054 <__d2b>
 800d718:	ec4b ab18 	vmov	d8, sl, fp
 800d71c:	9018      	str	r0, [sp, #96]	; 0x60
 800d71e:	2800      	cmp	r0, #0
 800d720:	f43f aef6 	beq.w	800d510 <_strtod_l+0x490>
 800d724:	2101      	movs	r1, #1
 800d726:	4620      	mov	r0, r4
 800d728:	f002 f9e8 	bl	800fafc <__i2b>
 800d72c:	4606      	mov	r6, r0
 800d72e:	2800      	cmp	r0, #0
 800d730:	f43f aeee 	beq.w	800d510 <_strtod_l+0x490>
 800d734:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d736:	9904      	ldr	r1, [sp, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	bfab      	itete	ge
 800d73c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d73e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d740:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d742:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d746:	bfac      	ite	ge
 800d748:	eb03 0902 	addge.w	r9, r3, r2
 800d74c:	1ad7      	sublt	r7, r2, r3
 800d74e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d750:	eba3 0801 	sub.w	r8, r3, r1
 800d754:	4490      	add	r8, r2
 800d756:	4ba1      	ldr	r3, [pc, #644]	; (800d9dc <_strtod_l+0x95c>)
 800d758:	f108 38ff 	add.w	r8, r8, #4294967295
 800d75c:	4598      	cmp	r8, r3
 800d75e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d762:	f280 80c7 	bge.w	800d8f4 <_strtod_l+0x874>
 800d766:	eba3 0308 	sub.w	r3, r3, r8
 800d76a:	2b1f      	cmp	r3, #31
 800d76c:	eba2 0203 	sub.w	r2, r2, r3
 800d770:	f04f 0101 	mov.w	r1, #1
 800d774:	f300 80b1 	bgt.w	800d8da <_strtod_l+0x85a>
 800d778:	fa01 f303 	lsl.w	r3, r1, r3
 800d77c:	930d      	str	r3, [sp, #52]	; 0x34
 800d77e:	2300      	movs	r3, #0
 800d780:	9308      	str	r3, [sp, #32]
 800d782:	eb09 0802 	add.w	r8, r9, r2
 800d786:	9b04      	ldr	r3, [sp, #16]
 800d788:	45c1      	cmp	r9, r8
 800d78a:	4417      	add	r7, r2
 800d78c:	441f      	add	r7, r3
 800d78e:	464b      	mov	r3, r9
 800d790:	bfa8      	it	ge
 800d792:	4643      	movge	r3, r8
 800d794:	42bb      	cmp	r3, r7
 800d796:	bfa8      	it	ge
 800d798:	463b      	movge	r3, r7
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bfc2      	ittt	gt
 800d79e:	eba8 0803 	subgt.w	r8, r8, r3
 800d7a2:	1aff      	subgt	r7, r7, r3
 800d7a4:	eba9 0903 	subgt.w	r9, r9, r3
 800d7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dd17      	ble.n	800d7de <_strtod_l+0x75e>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f002 fa62 	bl	800fc7c <__pow5mult>
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	f43f aea8 	beq.w	800d510 <_strtod_l+0x490>
 800d7c0:	4601      	mov	r1, r0
 800d7c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f002 f9af 	bl	800fb28 <__multiply>
 800d7ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	f43f ae9f 	beq.w	800d510 <_strtod_l+0x490>
 800d7d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f002 f88f 	bl	800f8f8 <_Bfree>
 800d7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7dc:	9318      	str	r3, [sp, #96]	; 0x60
 800d7de:	f1b8 0f00 	cmp.w	r8, #0
 800d7e2:	f300 808c 	bgt.w	800d8fe <_strtod_l+0x87e>
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	dd08      	ble.n	800d7fe <_strtod_l+0x77e>
 800d7ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7ee:	9905      	ldr	r1, [sp, #20]
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f002 fa43 	bl	800fc7c <__pow5mult>
 800d7f6:	9005      	str	r0, [sp, #20]
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f43f ae89 	beq.w	800d510 <_strtod_l+0x490>
 800d7fe:	2f00      	cmp	r7, #0
 800d800:	dd08      	ble.n	800d814 <_strtod_l+0x794>
 800d802:	9905      	ldr	r1, [sp, #20]
 800d804:	463a      	mov	r2, r7
 800d806:	4620      	mov	r0, r4
 800d808:	f002 fa92 	bl	800fd30 <__lshift>
 800d80c:	9005      	str	r0, [sp, #20]
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f ae7e 	beq.w	800d510 <_strtod_l+0x490>
 800d814:	f1b9 0f00 	cmp.w	r9, #0
 800d818:	dd08      	ble.n	800d82c <_strtod_l+0x7ac>
 800d81a:	4631      	mov	r1, r6
 800d81c:	464a      	mov	r2, r9
 800d81e:	4620      	mov	r0, r4
 800d820:	f002 fa86 	bl	800fd30 <__lshift>
 800d824:	4606      	mov	r6, r0
 800d826:	2800      	cmp	r0, #0
 800d828:	f43f ae72 	beq.w	800d510 <_strtod_l+0x490>
 800d82c:	9a05      	ldr	r2, [sp, #20]
 800d82e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d830:	4620      	mov	r0, r4
 800d832:	f002 fb09 	bl	800fe48 <__mdiff>
 800d836:	4605      	mov	r5, r0
 800d838:	2800      	cmp	r0, #0
 800d83a:	f43f ae69 	beq.w	800d510 <_strtod_l+0x490>
 800d83e:	68c3      	ldr	r3, [r0, #12]
 800d840:	930b      	str	r3, [sp, #44]	; 0x2c
 800d842:	2300      	movs	r3, #0
 800d844:	60c3      	str	r3, [r0, #12]
 800d846:	4631      	mov	r1, r6
 800d848:	f002 fae2 	bl	800fe10 <__mcmp>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	da60      	bge.n	800d912 <_strtod_l+0x892>
 800d850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d852:	ea53 030a 	orrs.w	r3, r3, sl
 800d856:	f040 8082 	bne.w	800d95e <_strtod_l+0x8de>
 800d85a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d17d      	bne.n	800d95e <_strtod_l+0x8de>
 800d862:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d866:	0d1b      	lsrs	r3, r3, #20
 800d868:	051b      	lsls	r3, r3, #20
 800d86a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d86e:	d976      	bls.n	800d95e <_strtod_l+0x8de>
 800d870:	696b      	ldr	r3, [r5, #20]
 800d872:	b913      	cbnz	r3, 800d87a <_strtod_l+0x7fa>
 800d874:	692b      	ldr	r3, [r5, #16]
 800d876:	2b01      	cmp	r3, #1
 800d878:	dd71      	ble.n	800d95e <_strtod_l+0x8de>
 800d87a:	4629      	mov	r1, r5
 800d87c:	2201      	movs	r2, #1
 800d87e:	4620      	mov	r0, r4
 800d880:	f002 fa56 	bl	800fd30 <__lshift>
 800d884:	4631      	mov	r1, r6
 800d886:	4605      	mov	r5, r0
 800d888:	f002 fac2 	bl	800fe10 <__mcmp>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	dd66      	ble.n	800d95e <_strtod_l+0x8de>
 800d890:	9904      	ldr	r1, [sp, #16]
 800d892:	4a53      	ldr	r2, [pc, #332]	; (800d9e0 <_strtod_l+0x960>)
 800d894:	465b      	mov	r3, fp
 800d896:	2900      	cmp	r1, #0
 800d898:	f000 8081 	beq.w	800d99e <_strtod_l+0x91e>
 800d89c:	ea02 010b 	and.w	r1, r2, fp
 800d8a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d8a4:	dc7b      	bgt.n	800d99e <_strtod_l+0x91e>
 800d8a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d8aa:	f77f aea9 	ble.w	800d600 <_strtod_l+0x580>
 800d8ae:	4b4d      	ldr	r3, [pc, #308]	; (800d9e4 <_strtod_l+0x964>)
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f7f2 feaf 	bl	8000618 <__aeabi_dmul>
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4303      	orrs	r3, r0
 800d8be:	bf08      	it	eq
 800d8c0:	2322      	moveq	r3, #34	; 0x22
 800d8c2:	4682      	mov	sl, r0
 800d8c4:	468b      	mov	fp, r1
 800d8c6:	bf08      	it	eq
 800d8c8:	6023      	streq	r3, [r4, #0]
 800d8ca:	e62b      	b.n	800d524 <_strtod_l+0x4a4>
 800d8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d4:	ea03 0a0a 	and.w	sl, r3, sl
 800d8d8:	e6e3      	b.n	800d6a2 <_strtod_l+0x622>
 800d8da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d8de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d8e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d8e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d8ea:	fa01 f308 	lsl.w	r3, r1, r8
 800d8ee:	9308      	str	r3, [sp, #32]
 800d8f0:	910d      	str	r1, [sp, #52]	; 0x34
 800d8f2:	e746      	b.n	800d782 <_strtod_l+0x702>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	9308      	str	r3, [sp, #32]
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d8fc:	e741      	b.n	800d782 <_strtod_l+0x702>
 800d8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d900:	4642      	mov	r2, r8
 800d902:	4620      	mov	r0, r4
 800d904:	f002 fa14 	bl	800fd30 <__lshift>
 800d908:	9018      	str	r0, [sp, #96]	; 0x60
 800d90a:	2800      	cmp	r0, #0
 800d90c:	f47f af6b 	bne.w	800d7e6 <_strtod_l+0x766>
 800d910:	e5fe      	b.n	800d510 <_strtod_l+0x490>
 800d912:	465f      	mov	r7, fp
 800d914:	d16e      	bne.n	800d9f4 <_strtod_l+0x974>
 800d916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d91c:	b342      	cbz	r2, 800d970 <_strtod_l+0x8f0>
 800d91e:	4a32      	ldr	r2, [pc, #200]	; (800d9e8 <_strtod_l+0x968>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d128      	bne.n	800d976 <_strtod_l+0x8f6>
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	4651      	mov	r1, sl
 800d928:	b1eb      	cbz	r3, 800d966 <_strtod_l+0x8e6>
 800d92a:	4b2d      	ldr	r3, [pc, #180]	; (800d9e0 <_strtod_l+0x960>)
 800d92c:	403b      	ands	r3, r7
 800d92e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	d819      	bhi.n	800d96c <_strtod_l+0x8ec>
 800d938:	0d1b      	lsrs	r3, r3, #20
 800d93a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d93e:	fa02 f303 	lsl.w	r3, r2, r3
 800d942:	4299      	cmp	r1, r3
 800d944:	d117      	bne.n	800d976 <_strtod_l+0x8f6>
 800d946:	4b29      	ldr	r3, [pc, #164]	; (800d9ec <_strtod_l+0x96c>)
 800d948:	429f      	cmp	r7, r3
 800d94a:	d102      	bne.n	800d952 <_strtod_l+0x8d2>
 800d94c:	3101      	adds	r1, #1
 800d94e:	f43f addf 	beq.w	800d510 <_strtod_l+0x490>
 800d952:	4b23      	ldr	r3, [pc, #140]	; (800d9e0 <_strtod_l+0x960>)
 800d954:	403b      	ands	r3, r7
 800d956:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d95a:	f04f 0a00 	mov.w	sl, #0
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1a4      	bne.n	800d8ae <_strtod_l+0x82e>
 800d964:	e5de      	b.n	800d524 <_strtod_l+0x4a4>
 800d966:	f04f 33ff 	mov.w	r3, #4294967295
 800d96a:	e7ea      	b.n	800d942 <_strtod_l+0x8c2>
 800d96c:	4613      	mov	r3, r2
 800d96e:	e7e8      	b.n	800d942 <_strtod_l+0x8c2>
 800d970:	ea53 030a 	orrs.w	r3, r3, sl
 800d974:	d08c      	beq.n	800d890 <_strtod_l+0x810>
 800d976:	9b08      	ldr	r3, [sp, #32]
 800d978:	b1db      	cbz	r3, 800d9b2 <_strtod_l+0x932>
 800d97a:	423b      	tst	r3, r7
 800d97c:	d0ef      	beq.n	800d95e <_strtod_l+0x8de>
 800d97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	4650      	mov	r0, sl
 800d984:	4659      	mov	r1, fp
 800d986:	b1c3      	cbz	r3, 800d9ba <_strtod_l+0x93a>
 800d988:	f7ff fb5e 	bl	800d048 <sulp>
 800d98c:	4602      	mov	r2, r0
 800d98e:	460b      	mov	r3, r1
 800d990:	ec51 0b18 	vmov	r0, r1, d8
 800d994:	f7f2 fc8a 	bl	80002ac <__adddf3>
 800d998:	4682      	mov	sl, r0
 800d99a:	468b      	mov	fp, r1
 800d99c:	e7df      	b.n	800d95e <_strtod_l+0x8de>
 800d99e:	4013      	ands	r3, r2
 800d9a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d9a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d9a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d9ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d9b0:	e7d5      	b.n	800d95e <_strtod_l+0x8de>
 800d9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9b4:	ea13 0f0a 	tst.w	r3, sl
 800d9b8:	e7e0      	b.n	800d97c <_strtod_l+0x8fc>
 800d9ba:	f7ff fb45 	bl	800d048 <sulp>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	ec51 0b18 	vmov	r0, r1, d8
 800d9c6:	f7f2 fc6f 	bl	80002a8 <__aeabi_dsub>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	468b      	mov	fp, r1
 800d9d2:	f7f3 f889 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d0c1      	beq.n	800d95e <_strtod_l+0x8de>
 800d9da:	e611      	b.n	800d600 <_strtod_l+0x580>
 800d9dc:	fffffc02 	.word	0xfffffc02
 800d9e0:	7ff00000 	.word	0x7ff00000
 800d9e4:	39500000 	.word	0x39500000
 800d9e8:	000fffff 	.word	0x000fffff
 800d9ec:	7fefffff 	.word	0x7fefffff
 800d9f0:	08011c60 	.word	0x08011c60
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f002 fb88 	bl	801010c <__ratio>
 800d9fc:	ec59 8b10 	vmov	r8, r9, d0
 800da00:	ee10 0a10 	vmov	r0, s0
 800da04:	2200      	movs	r2, #0
 800da06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f3 f880 	bl	8000b10 <__aeabi_dcmple>
 800da10:	2800      	cmp	r0, #0
 800da12:	d07a      	beq.n	800db0a <_strtod_l+0xa8a>
 800da14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d04a      	beq.n	800dab0 <_strtod_l+0xa30>
 800da1a:	4b95      	ldr	r3, [pc, #596]	; (800dc70 <_strtod_l+0xbf0>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dc70 <_strtod_l+0xbf0>
 800da26:	f04f 0800 	mov.w	r8, #0
 800da2a:	4b92      	ldr	r3, [pc, #584]	; (800dc74 <_strtod_l+0xbf4>)
 800da2c:	403b      	ands	r3, r7
 800da2e:	930d      	str	r3, [sp, #52]	; 0x34
 800da30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da32:	4b91      	ldr	r3, [pc, #580]	; (800dc78 <_strtod_l+0xbf8>)
 800da34:	429a      	cmp	r2, r3
 800da36:	f040 80b0 	bne.w	800db9a <_strtod_l+0xb1a>
 800da3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800da42:	ec4b ab10 	vmov	d0, sl, fp
 800da46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da4a:	f002 fa87 	bl	800ff5c <__ulp>
 800da4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da52:	ec53 2b10 	vmov	r2, r3, d0
 800da56:	f7f2 fddf 	bl	8000618 <__aeabi_dmul>
 800da5a:	4652      	mov	r2, sl
 800da5c:	465b      	mov	r3, fp
 800da5e:	f7f2 fc25 	bl	80002ac <__adddf3>
 800da62:	460b      	mov	r3, r1
 800da64:	4983      	ldr	r1, [pc, #524]	; (800dc74 <_strtod_l+0xbf4>)
 800da66:	4a85      	ldr	r2, [pc, #532]	; (800dc7c <_strtod_l+0xbfc>)
 800da68:	4019      	ands	r1, r3
 800da6a:	4291      	cmp	r1, r2
 800da6c:	4682      	mov	sl, r0
 800da6e:	d960      	bls.n	800db32 <_strtod_l+0xab2>
 800da70:	ee18 3a90 	vmov	r3, s17
 800da74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da78:	4293      	cmp	r3, r2
 800da7a:	d104      	bne.n	800da86 <_strtod_l+0xa06>
 800da7c:	ee18 3a10 	vmov	r3, s16
 800da80:	3301      	adds	r3, #1
 800da82:	f43f ad45 	beq.w	800d510 <_strtod_l+0x490>
 800da86:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dc88 <_strtod_l+0xc08>
 800da8a:	f04f 3aff 	mov.w	sl, #4294967295
 800da8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da90:	4620      	mov	r0, r4
 800da92:	f001 ff31 	bl	800f8f8 <_Bfree>
 800da96:	9905      	ldr	r1, [sp, #20]
 800da98:	4620      	mov	r0, r4
 800da9a:	f001 ff2d 	bl	800f8f8 <_Bfree>
 800da9e:	4631      	mov	r1, r6
 800daa0:	4620      	mov	r0, r4
 800daa2:	f001 ff29 	bl	800f8f8 <_Bfree>
 800daa6:	4629      	mov	r1, r5
 800daa8:	4620      	mov	r0, r4
 800daaa:	f001 ff25 	bl	800f8f8 <_Bfree>
 800daae:	e61a      	b.n	800d6e6 <_strtod_l+0x666>
 800dab0:	f1ba 0f00 	cmp.w	sl, #0
 800dab4:	d11b      	bne.n	800daee <_strtod_l+0xa6e>
 800dab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800daba:	b9f3      	cbnz	r3, 800dafa <_strtod_l+0xa7a>
 800dabc:	4b6c      	ldr	r3, [pc, #432]	; (800dc70 <_strtod_l+0xbf0>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	4640      	mov	r0, r8
 800dac2:	4649      	mov	r1, r9
 800dac4:	f7f3 f81a 	bl	8000afc <__aeabi_dcmplt>
 800dac8:	b9d0      	cbnz	r0, 800db00 <_strtod_l+0xa80>
 800daca:	4640      	mov	r0, r8
 800dacc:	4649      	mov	r1, r9
 800dace:	4b6c      	ldr	r3, [pc, #432]	; (800dc80 <_strtod_l+0xc00>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	f7f2 fda1 	bl	8000618 <__aeabi_dmul>
 800dad6:	4680      	mov	r8, r0
 800dad8:	4689      	mov	r9, r1
 800dada:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dade:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dae2:	9315      	str	r3, [sp, #84]	; 0x54
 800dae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daec:	e79d      	b.n	800da2a <_strtod_l+0x9aa>
 800daee:	f1ba 0f01 	cmp.w	sl, #1
 800daf2:	d102      	bne.n	800dafa <_strtod_l+0xa7a>
 800daf4:	2f00      	cmp	r7, #0
 800daf6:	f43f ad83 	beq.w	800d600 <_strtod_l+0x580>
 800dafa:	4b62      	ldr	r3, [pc, #392]	; (800dc84 <_strtod_l+0xc04>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	e78e      	b.n	800da1e <_strtod_l+0x99e>
 800db00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dc80 <_strtod_l+0xc00>
 800db04:	f04f 0800 	mov.w	r8, #0
 800db08:	e7e7      	b.n	800dada <_strtod_l+0xa5a>
 800db0a:	4b5d      	ldr	r3, [pc, #372]	; (800dc80 <_strtod_l+0xc00>)
 800db0c:	4640      	mov	r0, r8
 800db0e:	4649      	mov	r1, r9
 800db10:	2200      	movs	r2, #0
 800db12:	f7f2 fd81 	bl	8000618 <__aeabi_dmul>
 800db16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db18:	4680      	mov	r8, r0
 800db1a:	4689      	mov	r9, r1
 800db1c:	b933      	cbnz	r3, 800db2c <_strtod_l+0xaac>
 800db1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db22:	900e      	str	r0, [sp, #56]	; 0x38
 800db24:	930f      	str	r3, [sp, #60]	; 0x3c
 800db26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800db2a:	e7dd      	b.n	800dae8 <_strtod_l+0xa68>
 800db2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800db30:	e7f9      	b.n	800db26 <_strtod_l+0xaa6>
 800db32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1a8      	bne.n	800da8e <_strtod_l+0xa0e>
 800db3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db42:	0d1b      	lsrs	r3, r3, #20
 800db44:	051b      	lsls	r3, r3, #20
 800db46:	429a      	cmp	r2, r3
 800db48:	d1a1      	bne.n	800da8e <_strtod_l+0xa0e>
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	f7f3 f8c3 	bl	8000cd8 <__aeabi_d2lz>
 800db52:	f7f2 fd33 	bl	80005bc <__aeabi_l2d>
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
 800db5a:	4640      	mov	r0, r8
 800db5c:	4649      	mov	r1, r9
 800db5e:	f7f2 fba3 	bl	80002a8 <__aeabi_dsub>
 800db62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db68:	ea43 030a 	orr.w	r3, r3, sl
 800db6c:	4313      	orrs	r3, r2
 800db6e:	4680      	mov	r8, r0
 800db70:	4689      	mov	r9, r1
 800db72:	d055      	beq.n	800dc20 <_strtod_l+0xba0>
 800db74:	a336      	add	r3, pc, #216	; (adr r3, 800dc50 <_strtod_l+0xbd0>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	f7f2 ffbf 	bl	8000afc <__aeabi_dcmplt>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f47f acd0 	bne.w	800d524 <_strtod_l+0x4a4>
 800db84:	a334      	add	r3, pc, #208	; (adr r3, 800dc58 <_strtod_l+0xbd8>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 ffd3 	bl	8000b38 <__aeabi_dcmpgt>
 800db92:	2800      	cmp	r0, #0
 800db94:	f43f af7b 	beq.w	800da8e <_strtod_l+0xa0e>
 800db98:	e4c4      	b.n	800d524 <_strtod_l+0x4a4>
 800db9a:	9b04      	ldr	r3, [sp, #16]
 800db9c:	b333      	cbz	r3, 800dbec <_strtod_l+0xb6c>
 800db9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dba0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dba4:	d822      	bhi.n	800dbec <_strtod_l+0xb6c>
 800dba6:	a32e      	add	r3, pc, #184	; (adr r3, 800dc60 <_strtod_l+0xbe0>)
 800dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbac:	4640      	mov	r0, r8
 800dbae:	4649      	mov	r1, r9
 800dbb0:	f7f2 ffae 	bl	8000b10 <__aeabi_dcmple>
 800dbb4:	b1a0      	cbz	r0, 800dbe0 <_strtod_l+0xb60>
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	4640      	mov	r0, r8
 800dbba:	f7f3 f805 	bl	8000bc8 <__aeabi_d2uiz>
 800dbbe:	2801      	cmp	r0, #1
 800dbc0:	bf38      	it	cc
 800dbc2:	2001      	movcc	r0, #1
 800dbc4:	f7f2 fcae 	bl	8000524 <__aeabi_ui2d>
 800dbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbca:	4680      	mov	r8, r0
 800dbcc:	4689      	mov	r9, r1
 800dbce:	bb23      	cbnz	r3, 800dc1a <_strtod_l+0xb9a>
 800dbd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd4:	9010      	str	r0, [sp, #64]	; 0x40
 800dbd6:	9311      	str	r3, [sp, #68]	; 0x44
 800dbd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dbe8:	1a9b      	subs	r3, r3, r2
 800dbea:	9309      	str	r3, [sp, #36]	; 0x24
 800dbec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbf0:	eeb0 0a48 	vmov.f32	s0, s16
 800dbf4:	eef0 0a68 	vmov.f32	s1, s17
 800dbf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dbfc:	f002 f9ae 	bl	800ff5c <__ulp>
 800dc00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc04:	ec53 2b10 	vmov	r2, r3, d0
 800dc08:	f7f2 fd06 	bl	8000618 <__aeabi_dmul>
 800dc0c:	ec53 2b18 	vmov	r2, r3, d8
 800dc10:	f7f2 fb4c 	bl	80002ac <__adddf3>
 800dc14:	4682      	mov	sl, r0
 800dc16:	468b      	mov	fp, r1
 800dc18:	e78d      	b.n	800db36 <_strtod_l+0xab6>
 800dc1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dc1e:	e7db      	b.n	800dbd8 <_strtod_l+0xb58>
 800dc20:	a311      	add	r3, pc, #68	; (adr r3, 800dc68 <_strtod_l+0xbe8>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 ff69 	bl	8000afc <__aeabi_dcmplt>
 800dc2a:	e7b2      	b.n	800db92 <_strtod_l+0xb12>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	f7ff ba6b 	b.w	800d110 <_strtod_l+0x90>
 800dc3a:	2a65      	cmp	r2, #101	; 0x65
 800dc3c:	f43f ab5f 	beq.w	800d2fe <_strtod_l+0x27e>
 800dc40:	2a45      	cmp	r2, #69	; 0x45
 800dc42:	f43f ab5c 	beq.w	800d2fe <_strtod_l+0x27e>
 800dc46:	2301      	movs	r3, #1
 800dc48:	f7ff bb94 	b.w	800d374 <_strtod_l+0x2f4>
 800dc4c:	f3af 8000 	nop.w
 800dc50:	94a03595 	.word	0x94a03595
 800dc54:	3fdfffff 	.word	0x3fdfffff
 800dc58:	35afe535 	.word	0x35afe535
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	ffc00000 	.word	0xffc00000
 800dc64:	41dfffff 	.word	0x41dfffff
 800dc68:	94a03595 	.word	0x94a03595
 800dc6c:	3fcfffff 	.word	0x3fcfffff
 800dc70:	3ff00000 	.word	0x3ff00000
 800dc74:	7ff00000 	.word	0x7ff00000
 800dc78:	7fe00000 	.word	0x7fe00000
 800dc7c:	7c9fffff 	.word	0x7c9fffff
 800dc80:	3fe00000 	.word	0x3fe00000
 800dc84:	bff00000 	.word	0xbff00000
 800dc88:	7fefffff 	.word	0x7fefffff

0800dc8c <_strtod_r>:
 800dc8c:	4b01      	ldr	r3, [pc, #4]	; (800dc94 <_strtod_r+0x8>)
 800dc8e:	f7ff b9f7 	b.w	800d080 <_strtod_l>
 800dc92:	bf00      	nop
 800dc94:	200000ec 	.word	0x200000ec

0800dc98 <_strtol_l.constprop.0>:
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc9e:	d001      	beq.n	800dca4 <_strtol_l.constprop.0+0xc>
 800dca0:	2b24      	cmp	r3, #36	; 0x24
 800dca2:	d906      	bls.n	800dcb2 <_strtol_l.constprop.0+0x1a>
 800dca4:	f7fd ffe2 	bl	800bc6c <__errno>
 800dca8:	2316      	movs	r3, #22
 800dcaa:	6003      	str	r3, [r0, #0]
 800dcac:	2000      	movs	r0, #0
 800dcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd98 <_strtol_l.constprop.0+0x100>
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	462e      	mov	r6, r5
 800dcba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dcc2:	f017 0708 	ands.w	r7, r7, #8
 800dcc6:	d1f7      	bne.n	800dcb8 <_strtol_l.constprop.0+0x20>
 800dcc8:	2c2d      	cmp	r4, #45	; 0x2d
 800dcca:	d132      	bne.n	800dd32 <_strtol_l.constprop.0+0x9a>
 800dccc:	782c      	ldrb	r4, [r5, #0]
 800dcce:	2701      	movs	r7, #1
 800dcd0:	1cb5      	adds	r5, r6, #2
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d05b      	beq.n	800dd8e <_strtol_l.constprop.0+0xf6>
 800dcd6:	2b10      	cmp	r3, #16
 800dcd8:	d109      	bne.n	800dcee <_strtol_l.constprop.0+0x56>
 800dcda:	2c30      	cmp	r4, #48	; 0x30
 800dcdc:	d107      	bne.n	800dcee <_strtol_l.constprop.0+0x56>
 800dcde:	782c      	ldrb	r4, [r5, #0]
 800dce0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dce4:	2c58      	cmp	r4, #88	; 0x58
 800dce6:	d14d      	bne.n	800dd84 <_strtol_l.constprop.0+0xec>
 800dce8:	786c      	ldrb	r4, [r5, #1]
 800dcea:	2310      	movs	r3, #16
 800dcec:	3502      	adds	r5, #2
 800dcee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dcf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcf6:	f04f 0c00 	mov.w	ip, #0
 800dcfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800dcfe:	4666      	mov	r6, ip
 800dd00:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dd08:	f1be 0f09 	cmp.w	lr, #9
 800dd0c:	d816      	bhi.n	800dd3c <_strtol_l.constprop.0+0xa4>
 800dd0e:	4674      	mov	r4, lr
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	dd24      	ble.n	800dd5e <_strtol_l.constprop.0+0xc6>
 800dd14:	f1bc 0f00 	cmp.w	ip, #0
 800dd18:	db1e      	blt.n	800dd58 <_strtol_l.constprop.0+0xc0>
 800dd1a:	45b1      	cmp	r9, r6
 800dd1c:	d31c      	bcc.n	800dd58 <_strtol_l.constprop.0+0xc0>
 800dd1e:	d101      	bne.n	800dd24 <_strtol_l.constprop.0+0x8c>
 800dd20:	45a2      	cmp	sl, r4
 800dd22:	db19      	blt.n	800dd58 <_strtol_l.constprop.0+0xc0>
 800dd24:	fb06 4603 	mla	r6, r6, r3, r4
 800dd28:	f04f 0c01 	mov.w	ip, #1
 800dd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd30:	e7e8      	b.n	800dd04 <_strtol_l.constprop.0+0x6c>
 800dd32:	2c2b      	cmp	r4, #43	; 0x2b
 800dd34:	bf04      	itt	eq
 800dd36:	782c      	ldrbeq	r4, [r5, #0]
 800dd38:	1cb5      	addeq	r5, r6, #2
 800dd3a:	e7ca      	b.n	800dcd2 <_strtol_l.constprop.0+0x3a>
 800dd3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dd40:	f1be 0f19 	cmp.w	lr, #25
 800dd44:	d801      	bhi.n	800dd4a <_strtol_l.constprop.0+0xb2>
 800dd46:	3c37      	subs	r4, #55	; 0x37
 800dd48:	e7e2      	b.n	800dd10 <_strtol_l.constprop.0+0x78>
 800dd4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dd4e:	f1be 0f19 	cmp.w	lr, #25
 800dd52:	d804      	bhi.n	800dd5e <_strtol_l.constprop.0+0xc6>
 800dd54:	3c57      	subs	r4, #87	; 0x57
 800dd56:	e7db      	b.n	800dd10 <_strtol_l.constprop.0+0x78>
 800dd58:	f04f 3cff 	mov.w	ip, #4294967295
 800dd5c:	e7e6      	b.n	800dd2c <_strtol_l.constprop.0+0x94>
 800dd5e:	f1bc 0f00 	cmp.w	ip, #0
 800dd62:	da05      	bge.n	800dd70 <_strtol_l.constprop.0+0xd8>
 800dd64:	2322      	movs	r3, #34	; 0x22
 800dd66:	6003      	str	r3, [r0, #0]
 800dd68:	4646      	mov	r6, r8
 800dd6a:	b942      	cbnz	r2, 800dd7e <_strtol_l.constprop.0+0xe6>
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	e79e      	b.n	800dcae <_strtol_l.constprop.0+0x16>
 800dd70:	b107      	cbz	r7, 800dd74 <_strtol_l.constprop.0+0xdc>
 800dd72:	4276      	negs	r6, r6
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	d0f9      	beq.n	800dd6c <_strtol_l.constprop.0+0xd4>
 800dd78:	f1bc 0f00 	cmp.w	ip, #0
 800dd7c:	d000      	beq.n	800dd80 <_strtol_l.constprop.0+0xe8>
 800dd7e:	1e69      	subs	r1, r5, #1
 800dd80:	6011      	str	r1, [r2, #0]
 800dd82:	e7f3      	b.n	800dd6c <_strtol_l.constprop.0+0xd4>
 800dd84:	2430      	movs	r4, #48	; 0x30
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1b1      	bne.n	800dcee <_strtol_l.constprop.0+0x56>
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	e7af      	b.n	800dcee <_strtol_l.constprop.0+0x56>
 800dd8e:	2c30      	cmp	r4, #48	; 0x30
 800dd90:	d0a5      	beq.n	800dcde <_strtol_l.constprop.0+0x46>
 800dd92:	230a      	movs	r3, #10
 800dd94:	e7ab      	b.n	800dcee <_strtol_l.constprop.0+0x56>
 800dd96:	bf00      	nop
 800dd98:	08011cc5 	.word	0x08011cc5

0800dd9c <_strtol_r>:
 800dd9c:	f7ff bf7c 	b.w	800dc98 <_strtol_l.constprop.0>

0800dda0 <strtol>:
 800dda0:	4613      	mov	r3, r2
 800dda2:	460a      	mov	r2, r1
 800dda4:	4601      	mov	r1, r0
 800dda6:	4802      	ldr	r0, [pc, #8]	; (800ddb0 <strtol+0x10>)
 800dda8:	6800      	ldr	r0, [r0, #0]
 800ddaa:	f7ff bf75 	b.w	800dc98 <_strtol_l.constprop.0>
 800ddae:	bf00      	nop
 800ddb0:	20000020 	.word	0x20000020

0800ddb4 <_strtoul_l.constprop.0>:
 800ddb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddb8:	4f36      	ldr	r7, [pc, #216]	; (800de94 <_strtoul_l.constprop.0+0xe0>)
 800ddba:	4686      	mov	lr, r0
 800ddbc:	460d      	mov	r5, r1
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddc4:	5de6      	ldrb	r6, [r4, r7]
 800ddc6:	f016 0608 	ands.w	r6, r6, #8
 800ddca:	d1f8      	bne.n	800ddbe <_strtoul_l.constprop.0+0xa>
 800ddcc:	2c2d      	cmp	r4, #45	; 0x2d
 800ddce:	d12f      	bne.n	800de30 <_strtoul_l.constprop.0+0x7c>
 800ddd0:	782c      	ldrb	r4, [r5, #0]
 800ddd2:	2601      	movs	r6, #1
 800ddd4:	1c85      	adds	r5, r0, #2
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d057      	beq.n	800de8a <_strtoul_l.constprop.0+0xd6>
 800ddda:	2b10      	cmp	r3, #16
 800dddc:	d109      	bne.n	800ddf2 <_strtoul_l.constprop.0+0x3e>
 800ddde:	2c30      	cmp	r4, #48	; 0x30
 800dde0:	d107      	bne.n	800ddf2 <_strtoul_l.constprop.0+0x3e>
 800dde2:	7828      	ldrb	r0, [r5, #0]
 800dde4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dde8:	2858      	cmp	r0, #88	; 0x58
 800ddea:	d149      	bne.n	800de80 <_strtoul_l.constprop.0+0xcc>
 800ddec:	786c      	ldrb	r4, [r5, #1]
 800ddee:	2310      	movs	r3, #16
 800ddf0:	3502      	adds	r5, #2
 800ddf2:	f04f 38ff 	mov.w	r8, #4294967295
 800ddf6:	2700      	movs	r7, #0
 800ddf8:	fbb8 f8f3 	udiv	r8, r8, r3
 800ddfc:	fb03 f908 	mul.w	r9, r3, r8
 800de00:	ea6f 0909 	mvn.w	r9, r9
 800de04:	4638      	mov	r0, r7
 800de06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800de0a:	f1bc 0f09 	cmp.w	ip, #9
 800de0e:	d814      	bhi.n	800de3a <_strtoul_l.constprop.0+0x86>
 800de10:	4664      	mov	r4, ip
 800de12:	42a3      	cmp	r3, r4
 800de14:	dd22      	ble.n	800de5c <_strtoul_l.constprop.0+0xa8>
 800de16:	2f00      	cmp	r7, #0
 800de18:	db1d      	blt.n	800de56 <_strtoul_l.constprop.0+0xa2>
 800de1a:	4580      	cmp	r8, r0
 800de1c:	d31b      	bcc.n	800de56 <_strtoul_l.constprop.0+0xa2>
 800de1e:	d101      	bne.n	800de24 <_strtoul_l.constprop.0+0x70>
 800de20:	45a1      	cmp	r9, r4
 800de22:	db18      	blt.n	800de56 <_strtoul_l.constprop.0+0xa2>
 800de24:	fb00 4003 	mla	r0, r0, r3, r4
 800de28:	2701      	movs	r7, #1
 800de2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de2e:	e7ea      	b.n	800de06 <_strtoul_l.constprop.0+0x52>
 800de30:	2c2b      	cmp	r4, #43	; 0x2b
 800de32:	bf04      	itt	eq
 800de34:	782c      	ldrbeq	r4, [r5, #0]
 800de36:	1c85      	addeq	r5, r0, #2
 800de38:	e7cd      	b.n	800ddd6 <_strtoul_l.constprop.0+0x22>
 800de3a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800de3e:	f1bc 0f19 	cmp.w	ip, #25
 800de42:	d801      	bhi.n	800de48 <_strtoul_l.constprop.0+0x94>
 800de44:	3c37      	subs	r4, #55	; 0x37
 800de46:	e7e4      	b.n	800de12 <_strtoul_l.constprop.0+0x5e>
 800de48:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800de4c:	f1bc 0f19 	cmp.w	ip, #25
 800de50:	d804      	bhi.n	800de5c <_strtoul_l.constprop.0+0xa8>
 800de52:	3c57      	subs	r4, #87	; 0x57
 800de54:	e7dd      	b.n	800de12 <_strtoul_l.constprop.0+0x5e>
 800de56:	f04f 37ff 	mov.w	r7, #4294967295
 800de5a:	e7e6      	b.n	800de2a <_strtoul_l.constprop.0+0x76>
 800de5c:	2f00      	cmp	r7, #0
 800de5e:	da07      	bge.n	800de70 <_strtoul_l.constprop.0+0xbc>
 800de60:	2322      	movs	r3, #34	; 0x22
 800de62:	f8ce 3000 	str.w	r3, [lr]
 800de66:	f04f 30ff 	mov.w	r0, #4294967295
 800de6a:	b932      	cbnz	r2, 800de7a <_strtoul_l.constprop.0+0xc6>
 800de6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de70:	b106      	cbz	r6, 800de74 <_strtoul_l.constprop.0+0xc0>
 800de72:	4240      	negs	r0, r0
 800de74:	2a00      	cmp	r2, #0
 800de76:	d0f9      	beq.n	800de6c <_strtoul_l.constprop.0+0xb8>
 800de78:	b107      	cbz	r7, 800de7c <_strtoul_l.constprop.0+0xc8>
 800de7a:	1e69      	subs	r1, r5, #1
 800de7c:	6011      	str	r1, [r2, #0]
 800de7e:	e7f5      	b.n	800de6c <_strtoul_l.constprop.0+0xb8>
 800de80:	2430      	movs	r4, #48	; 0x30
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1b5      	bne.n	800ddf2 <_strtoul_l.constprop.0+0x3e>
 800de86:	2308      	movs	r3, #8
 800de88:	e7b3      	b.n	800ddf2 <_strtoul_l.constprop.0+0x3e>
 800de8a:	2c30      	cmp	r4, #48	; 0x30
 800de8c:	d0a9      	beq.n	800dde2 <_strtoul_l.constprop.0+0x2e>
 800de8e:	230a      	movs	r3, #10
 800de90:	e7af      	b.n	800ddf2 <_strtoul_l.constprop.0+0x3e>
 800de92:	bf00      	nop
 800de94:	08011cc5 	.word	0x08011cc5

0800de98 <_strtoul_r>:
 800de98:	f7ff bf8c 	b.w	800ddb4 <_strtoul_l.constprop.0>

0800de9c <strtoul>:
 800de9c:	4613      	mov	r3, r2
 800de9e:	460a      	mov	r2, r1
 800dea0:	4601      	mov	r1, r0
 800dea2:	4802      	ldr	r0, [pc, #8]	; (800deac <strtoul+0x10>)
 800dea4:	6800      	ldr	r0, [r0, #0]
 800dea6:	f7ff bf85 	b.w	800ddb4 <_strtoul_l.constprop.0>
 800deaa:	bf00      	nop
 800deac:	20000020 	.word	0x20000020

0800deb0 <__tzcalc_limits>:
 800deb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	4605      	mov	r5, r0
 800deb6:	f001 fc9d 	bl	800f7f4 <__gettzinfo>
 800deba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800debe:	429d      	cmp	r5, r3
 800dec0:	f340 8099 	ble.w	800dff6 <__tzcalc_limits+0x146>
 800dec4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800dec8:	18ac      	adds	r4, r5, r2
 800deca:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800dece:	f240 126d 	movw	r2, #365	; 0x16d
 800ded2:	10a4      	asrs	r4, r4, #2
 800ded4:	fb02 4403 	mla	r4, r2, r3, r4
 800ded8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800dedc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800dee0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee4:	441c      	add	r4, r3
 800dee6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800deea:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800deee:	fb95 fcf3 	sdiv	ip, r5, r3
 800def2:	fb03 5c1c 	mls	ip, r3, ip, r5
 800def6:	186a      	adds	r2, r5, r1
 800def8:	fabc f68c 	clz	r6, ip
 800defc:	fbb2 f2f3 	udiv	r2, r2, r3
 800df00:	f005 0303 	and.w	r3, r5, #3
 800df04:	4414      	add	r4, r2
 800df06:	2264      	movs	r2, #100	; 0x64
 800df08:	6045      	str	r5, [r0, #4]
 800df0a:	fb95 f7f2 	sdiv	r7, r5, r2
 800df0e:	0976      	lsrs	r6, r6, #5
 800df10:	fb02 5717 	mls	r7, r2, r7, r5
 800df14:	4601      	mov	r1, r0
 800df16:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	f04f 0a07 	mov.w	sl, #7
 800df20:	7a0d      	ldrb	r5, [r1, #8]
 800df22:	694b      	ldr	r3, [r1, #20]
 800df24:	2d4a      	cmp	r5, #74	; 0x4a
 800df26:	d12d      	bne.n	800df84 <__tzcalc_limits+0xd4>
 800df28:	9a00      	ldr	r2, [sp, #0]
 800df2a:	eb04 0e03 	add.w	lr, r4, r3
 800df2e:	b902      	cbnz	r2, 800df32 <__tzcalc_limits+0x82>
 800df30:	b917      	cbnz	r7, 800df38 <__tzcalc_limits+0x88>
 800df32:	f1bc 0f00 	cmp.w	ip, #0
 800df36:	d123      	bne.n	800df80 <__tzcalc_limits+0xd0>
 800df38:	2b3b      	cmp	r3, #59	; 0x3b
 800df3a:	bfd4      	ite	le
 800df3c:	2300      	movle	r3, #0
 800df3e:	2301      	movgt	r3, #1
 800df40:	4473      	add	r3, lr
 800df42:	3b01      	subs	r3, #1
 800df44:	698d      	ldr	r5, [r1, #24]
 800df46:	4a2d      	ldr	r2, [pc, #180]	; (800dffc <__tzcalc_limits+0x14c>)
 800df48:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800df4c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800df50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800df52:	18ed      	adds	r5, r5, r3
 800df54:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800df58:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800df5c:	3128      	adds	r1, #40	; 0x28
 800df5e:	458b      	cmp	fp, r1
 800df60:	d1de      	bne.n	800df20 <__tzcalc_limits+0x70>
 800df62:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800df66:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800df6a:	428c      	cmp	r4, r1
 800df6c:	eb72 0303 	sbcs.w	r3, r2, r3
 800df70:	bfb4      	ite	lt
 800df72:	2301      	movlt	r3, #1
 800df74:	2300      	movge	r3, #0
 800df76:	6003      	str	r3, [r0, #0]
 800df78:	2001      	movs	r0, #1
 800df7a:	b003      	add	sp, #12
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df80:	2300      	movs	r3, #0
 800df82:	e7dd      	b.n	800df40 <__tzcalc_limits+0x90>
 800df84:	2d44      	cmp	r5, #68	; 0x44
 800df86:	d101      	bne.n	800df8c <__tzcalc_limits+0xdc>
 800df88:	4423      	add	r3, r4
 800df8a:	e7db      	b.n	800df44 <__tzcalc_limits+0x94>
 800df8c:	9a00      	ldr	r2, [sp, #0]
 800df8e:	bb62      	cbnz	r2, 800dfea <__tzcalc_limits+0x13a>
 800df90:	2f00      	cmp	r7, #0
 800df92:	bf0c      	ite	eq
 800df94:	4635      	moveq	r5, r6
 800df96:	2501      	movne	r5, #1
 800df98:	68ca      	ldr	r2, [r1, #12]
 800df9a:	9201      	str	r2, [sp, #4]
 800df9c:	4a18      	ldr	r2, [pc, #96]	; (800e000 <__tzcalc_limits+0x150>)
 800df9e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800dfa2:	fb09 2505 	mla	r5, r9, r5, r2
 800dfa6:	46a6      	mov	lr, r4
 800dfa8:	f04f 0800 	mov.w	r8, #0
 800dfac:	3d04      	subs	r5, #4
 800dfae:	9a01      	ldr	r2, [sp, #4]
 800dfb0:	f108 0801 	add.w	r8, r8, #1
 800dfb4:	4542      	cmp	r2, r8
 800dfb6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800dfba:	dc18      	bgt.n	800dfee <__tzcalc_limits+0x13e>
 800dfbc:	f10e 0504 	add.w	r5, lr, #4
 800dfc0:	fb95 f8fa 	sdiv	r8, r5, sl
 800dfc4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800dfc8:	eba5 0808 	sub.w	r8, r5, r8
 800dfcc:	ebb3 0808 	subs.w	r8, r3, r8
 800dfd0:	690b      	ldr	r3, [r1, #16]
 800dfd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfd6:	bf48      	it	mi
 800dfd8:	f108 0807 	addmi.w	r8, r8, #7
 800dfdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800dfe0:	4443      	add	r3, r8
 800dfe2:	454b      	cmp	r3, r9
 800dfe4:	da05      	bge.n	800dff2 <__tzcalc_limits+0x142>
 800dfe6:	4473      	add	r3, lr
 800dfe8:	e7ac      	b.n	800df44 <__tzcalc_limits+0x94>
 800dfea:	4635      	mov	r5, r6
 800dfec:	e7d4      	b.n	800df98 <__tzcalc_limits+0xe8>
 800dfee:	44ce      	add	lr, r9
 800dff0:	e7dd      	b.n	800dfae <__tzcalc_limits+0xfe>
 800dff2:	3b07      	subs	r3, #7
 800dff4:	e7f5      	b.n	800dfe2 <__tzcalc_limits+0x132>
 800dff6:	2000      	movs	r0, #0
 800dff8:	e7bf      	b.n	800df7a <__tzcalc_limits+0xca>
 800dffa:	bf00      	nop
 800dffc:	00015180 	.word	0x00015180
 800e000:	08011ed0 	.word	0x08011ed0

0800e004 <__tz_lock>:
 800e004:	4801      	ldr	r0, [pc, #4]	; (800e00c <__tz_lock+0x8>)
 800e006:	f001 bbfe 	b.w	800f806 <__retarget_lock_acquire>
 800e00a:	bf00      	nop
 800e00c:	200068b4 	.word	0x200068b4

0800e010 <__tz_unlock>:
 800e010:	4801      	ldr	r0, [pc, #4]	; (800e018 <__tz_unlock+0x8>)
 800e012:	f001 bbfa 	b.w	800f80a <__retarget_lock_release>
 800e016:	bf00      	nop
 800e018:	200068b4 	.word	0x200068b4

0800e01c <_tzset_unlocked>:
 800e01c:	4b01      	ldr	r3, [pc, #4]	; (800e024 <_tzset_unlocked+0x8>)
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	f000 b802 	b.w	800e028 <_tzset_unlocked_r>
 800e024:	20000020 	.word	0x20000020

0800e028 <_tzset_unlocked_r>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	b08d      	sub	sp, #52	; 0x34
 800e02e:	4607      	mov	r7, r0
 800e030:	f001 fbe0 	bl	800f7f4 <__gettzinfo>
 800e034:	49b0      	ldr	r1, [pc, #704]	; (800e2f8 <_tzset_unlocked_r+0x2d0>)
 800e036:	4eb1      	ldr	r6, [pc, #708]	; (800e2fc <_tzset_unlocked_r+0x2d4>)
 800e038:	4605      	mov	r5, r0
 800e03a:	4638      	mov	r0, r7
 800e03c:	f001 fbd2 	bl	800f7e4 <_getenv_r>
 800e040:	4604      	mov	r4, r0
 800e042:	b970      	cbnz	r0, 800e062 <_tzset_unlocked_r+0x3a>
 800e044:	4bae      	ldr	r3, [pc, #696]	; (800e300 <_tzset_unlocked_r+0x2d8>)
 800e046:	4aaf      	ldr	r2, [pc, #700]	; (800e304 <_tzset_unlocked_r+0x2dc>)
 800e048:	6018      	str	r0, [r3, #0]
 800e04a:	4baf      	ldr	r3, [pc, #700]	; (800e308 <_tzset_unlocked_r+0x2e0>)
 800e04c:	6018      	str	r0, [r3, #0]
 800e04e:	4baf      	ldr	r3, [pc, #700]	; (800e30c <_tzset_unlocked_r+0x2e4>)
 800e050:	6830      	ldr	r0, [r6, #0]
 800e052:	e9c3 2200 	strd	r2, r2, [r3]
 800e056:	f001 fbf5 	bl	800f844 <free>
 800e05a:	6034      	str	r4, [r6, #0]
 800e05c:	b00d      	add	sp, #52	; 0x34
 800e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e062:	6831      	ldr	r1, [r6, #0]
 800e064:	2900      	cmp	r1, #0
 800e066:	d162      	bne.n	800e12e <_tzset_unlocked_r+0x106>
 800e068:	6830      	ldr	r0, [r6, #0]
 800e06a:	f001 fbeb 	bl	800f844 <free>
 800e06e:	4620      	mov	r0, r4
 800e070:	f7f2 f8b8 	bl	80001e4 <strlen>
 800e074:	1c41      	adds	r1, r0, #1
 800e076:	4638      	mov	r0, r7
 800e078:	f002 f942 	bl	8010300 <_malloc_r>
 800e07c:	6030      	str	r0, [r6, #0]
 800e07e:	2800      	cmp	r0, #0
 800e080:	d15a      	bne.n	800e138 <_tzset_unlocked_r+0x110>
 800e082:	7823      	ldrb	r3, [r4, #0]
 800e084:	4aa2      	ldr	r2, [pc, #648]	; (800e310 <_tzset_unlocked_r+0x2e8>)
 800e086:	49a3      	ldr	r1, [pc, #652]	; (800e314 <_tzset_unlocked_r+0x2ec>)
 800e088:	2b3a      	cmp	r3, #58	; 0x3a
 800e08a:	bf08      	it	eq
 800e08c:	3401      	addeq	r4, #1
 800e08e:	ae0a      	add	r6, sp, #40	; 0x28
 800e090:	4633      	mov	r3, r6
 800e092:	4620      	mov	r0, r4
 800e094:	f7fe ff3c 	bl	800cf10 <siscanf>
 800e098:	2800      	cmp	r0, #0
 800e09a:	dddf      	ble.n	800e05c <_tzset_unlocked_r+0x34>
 800e09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e09e:	18e7      	adds	r7, r4, r3
 800e0a0:	5ce3      	ldrb	r3, [r4, r3]
 800e0a2:	2b2d      	cmp	r3, #45	; 0x2d
 800e0a4:	d14c      	bne.n	800e140 <_tzset_unlocked_r+0x118>
 800e0a6:	3701      	adds	r7, #1
 800e0a8:	f04f 38ff 	mov.w	r8, #4294967295
 800e0ac:	f10d 0a20 	add.w	sl, sp, #32
 800e0b0:	f10d 0b1e 	add.w	fp, sp, #30
 800e0b4:	2400      	movs	r4, #0
 800e0b6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e0ba:	4997      	ldr	r1, [pc, #604]	; (800e318 <_tzset_unlocked_r+0x2f0>)
 800e0bc:	9603      	str	r6, [sp, #12]
 800e0be:	f8cd b000 	str.w	fp, [sp]
 800e0c2:	4633      	mov	r3, r6
 800e0c4:	aa07      	add	r2, sp, #28
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e0cc:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e0d0:	f7fe ff1e 	bl	800cf10 <siscanf>
 800e0d4:	42a0      	cmp	r0, r4
 800e0d6:	ddc1      	ble.n	800e05c <_tzset_unlocked_r+0x34>
 800e0d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e0dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e0e0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800e324 <_tzset_unlocked_r+0x2fc>
 800e0e4:	213c      	movs	r1, #60	; 0x3c
 800e0e6:	fb01 3302 	mla	r3, r1, r2, r3
 800e0ea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e0ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e0f2:	fb01 3302 	mla	r3, r1, r2, r3
 800e0f6:	fb08 f303 	mul.w	r3, r8, r3
 800e0fa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e30c <_tzset_unlocked_r+0x2e4>
 800e0fe:	62ab      	str	r3, [r5, #40]	; 0x28
 800e100:	4b83      	ldr	r3, [pc, #524]	; (800e310 <_tzset_unlocked_r+0x2e8>)
 800e102:	f8c8 3000 	str.w	r3, [r8]
 800e106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e108:	4982      	ldr	r1, [pc, #520]	; (800e314 <_tzset_unlocked_r+0x2ec>)
 800e10a:	441f      	add	r7, r3
 800e10c:	464a      	mov	r2, r9
 800e10e:	4633      	mov	r3, r6
 800e110:	4638      	mov	r0, r7
 800e112:	f7fe fefd 	bl	800cf10 <siscanf>
 800e116:	42a0      	cmp	r0, r4
 800e118:	dc18      	bgt.n	800e14c <_tzset_unlocked_r+0x124>
 800e11a:	f8d8 3000 	ldr.w	r3, [r8]
 800e11e:	f8c8 3004 	str.w	r3, [r8, #4]
 800e122:	4b77      	ldr	r3, [pc, #476]	; (800e300 <_tzset_unlocked_r+0x2d8>)
 800e124:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	4b77      	ldr	r3, [pc, #476]	; (800e308 <_tzset_unlocked_r+0x2e0>)
 800e12a:	601c      	str	r4, [r3, #0]
 800e12c:	e796      	b.n	800e05c <_tzset_unlocked_r+0x34>
 800e12e:	f7f2 f84f 	bl	80001d0 <strcmp>
 800e132:	2800      	cmp	r0, #0
 800e134:	d198      	bne.n	800e068 <_tzset_unlocked_r+0x40>
 800e136:	e791      	b.n	800e05c <_tzset_unlocked_r+0x34>
 800e138:	4621      	mov	r1, r4
 800e13a:	f7fe ff67 	bl	800d00c <strcpy>
 800e13e:	e7a0      	b.n	800e082 <_tzset_unlocked_r+0x5a>
 800e140:	2b2b      	cmp	r3, #43	; 0x2b
 800e142:	bf08      	it	eq
 800e144:	3701      	addeq	r7, #1
 800e146:	f04f 0801 	mov.w	r8, #1
 800e14a:	e7af      	b.n	800e0ac <_tzset_unlocked_r+0x84>
 800e14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e14e:	f8c8 9004 	str.w	r9, [r8, #4]
 800e152:	18fc      	adds	r4, r7, r3
 800e154:	5cfb      	ldrb	r3, [r7, r3]
 800e156:	2b2d      	cmp	r3, #45	; 0x2d
 800e158:	f040 808b 	bne.w	800e272 <_tzset_unlocked_r+0x24a>
 800e15c:	3401      	adds	r4, #1
 800e15e:	f04f 37ff 	mov.w	r7, #4294967295
 800e162:	2300      	movs	r3, #0
 800e164:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e168:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e16c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e170:	930a      	str	r3, [sp, #40]	; 0x28
 800e172:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e176:	e9cd b600 	strd	fp, r6, [sp]
 800e17a:	4967      	ldr	r1, [pc, #412]	; (800e318 <_tzset_unlocked_r+0x2f0>)
 800e17c:	4633      	mov	r3, r6
 800e17e:	aa07      	add	r2, sp, #28
 800e180:	4620      	mov	r0, r4
 800e182:	f7fe fec5 	bl	800cf10 <siscanf>
 800e186:	2800      	cmp	r0, #0
 800e188:	dc78      	bgt.n	800e27c <_tzset_unlocked_r+0x254>
 800e18a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e18c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800e190:	652b      	str	r3, [r5, #80]	; 0x50
 800e192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e194:	462f      	mov	r7, r5
 800e196:	441c      	add	r4, r3
 800e198:	f04f 0900 	mov.w	r9, #0
 800e19c:	7823      	ldrb	r3, [r4, #0]
 800e19e:	2b2c      	cmp	r3, #44	; 0x2c
 800e1a0:	bf08      	it	eq
 800e1a2:	3401      	addeq	r4, #1
 800e1a4:	f894 8000 	ldrb.w	r8, [r4]
 800e1a8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800e1ac:	d178      	bne.n	800e2a0 <_tzset_unlocked_r+0x278>
 800e1ae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e1b2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e1b6:	ab09      	add	r3, sp, #36	; 0x24
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	4958      	ldr	r1, [pc, #352]	; (800e31c <_tzset_unlocked_r+0x2f4>)
 800e1bc:	9603      	str	r6, [sp, #12]
 800e1be:	4633      	mov	r3, r6
 800e1c0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7fe fea3 	bl	800cf10 <siscanf>
 800e1ca:	2803      	cmp	r0, #3
 800e1cc:	f47f af46 	bne.w	800e05c <_tzset_unlocked_r+0x34>
 800e1d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e1d4:	1e4b      	subs	r3, r1, #1
 800e1d6:	2b0b      	cmp	r3, #11
 800e1d8:	f63f af40 	bhi.w	800e05c <_tzset_unlocked_r+0x34>
 800e1dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e1e0:	1e53      	subs	r3, r2, #1
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	f63f af3a 	bhi.w	800e05c <_tzset_unlocked_r+0x34>
 800e1e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e1ec:	2b06      	cmp	r3, #6
 800e1ee:	f63f af35 	bhi.w	800e05c <_tzset_unlocked_r+0x34>
 800e1f2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e1f6:	f887 8008 	strb.w	r8, [r7, #8]
 800e1fa:	617b      	str	r3, [r7, #20]
 800e1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fe:	eb04 0803 	add.w	r8, r4, r3
 800e202:	2302      	movs	r3, #2
 800e204:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e208:	2300      	movs	r3, #0
 800e20a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e20e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e212:	930a      	str	r3, [sp, #40]	; 0x28
 800e214:	f898 3000 	ldrb.w	r3, [r8]
 800e218:	2b2f      	cmp	r3, #47	; 0x2f
 800e21a:	d109      	bne.n	800e230 <_tzset_unlocked_r+0x208>
 800e21c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e220:	e9cd b600 	strd	fp, r6, [sp]
 800e224:	493e      	ldr	r1, [pc, #248]	; (800e320 <_tzset_unlocked_r+0x2f8>)
 800e226:	4633      	mov	r3, r6
 800e228:	aa07      	add	r2, sp, #28
 800e22a:	4640      	mov	r0, r8
 800e22c:	f7fe fe70 	bl	800cf10 <siscanf>
 800e230:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e234:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e238:	213c      	movs	r1, #60	; 0x3c
 800e23a:	fb01 3302 	mla	r3, r1, r2, r3
 800e23e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e242:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e246:	fb01 3302 	mla	r3, r1, r2, r3
 800e24a:	61bb      	str	r3, [r7, #24]
 800e24c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e24e:	3728      	adds	r7, #40	; 0x28
 800e250:	4444      	add	r4, r8
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	d020      	beq.n	800e29a <_tzset_unlocked_r+0x272>
 800e258:	6868      	ldr	r0, [r5, #4]
 800e25a:	f7ff fe29 	bl	800deb0 <__tzcalc_limits>
 800e25e:	4b28      	ldr	r3, [pc, #160]	; (800e300 <_tzset_unlocked_r+0x2d8>)
 800e260:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e266:	1a9b      	subs	r3, r3, r2
 800e268:	4a27      	ldr	r2, [pc, #156]	; (800e308 <_tzset_unlocked_r+0x2e0>)
 800e26a:	bf18      	it	ne
 800e26c:	2301      	movne	r3, #1
 800e26e:	6013      	str	r3, [r2, #0]
 800e270:	e6f4      	b.n	800e05c <_tzset_unlocked_r+0x34>
 800e272:	2b2b      	cmp	r3, #43	; 0x2b
 800e274:	bf08      	it	eq
 800e276:	3401      	addeq	r4, #1
 800e278:	2701      	movs	r7, #1
 800e27a:	e772      	b.n	800e162 <_tzset_unlocked_r+0x13a>
 800e27c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e280:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e284:	213c      	movs	r1, #60	; 0x3c
 800e286:	fb01 3302 	mla	r3, r1, r2, r3
 800e28a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e28e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e292:	fb01 3302 	mla	r3, r1, r2, r3
 800e296:	437b      	muls	r3, r7
 800e298:	e77a      	b.n	800e190 <_tzset_unlocked_r+0x168>
 800e29a:	f04f 0901 	mov.w	r9, #1
 800e29e:	e77d      	b.n	800e19c <_tzset_unlocked_r+0x174>
 800e2a0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800e2a4:	bf06      	itte	eq
 800e2a6:	3401      	addeq	r4, #1
 800e2a8:	4643      	moveq	r3, r8
 800e2aa:	2344      	movne	r3, #68	; 0x44
 800e2ac:	220a      	movs	r2, #10
 800e2ae:	a90b      	add	r1, sp, #44	; 0x2c
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	9305      	str	r3, [sp, #20]
 800e2b4:	f7ff fdf2 	bl	800de9c <strtoul>
 800e2b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e2bc:	9b05      	ldr	r3, [sp, #20]
 800e2be:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e2c2:	45a0      	cmp	r8, r4
 800e2c4:	d114      	bne.n	800e2f0 <_tzset_unlocked_r+0x2c8>
 800e2c6:	234d      	movs	r3, #77	; 0x4d
 800e2c8:	f1b9 0f00 	cmp.w	r9, #0
 800e2cc:	d107      	bne.n	800e2de <_tzset_unlocked_r+0x2b6>
 800e2ce:	722b      	strb	r3, [r5, #8]
 800e2d0:	2103      	movs	r1, #3
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800e2d8:	f8c5 9014 	str.w	r9, [r5, #20]
 800e2dc:	e791      	b.n	800e202 <_tzset_unlocked_r+0x1da>
 800e2de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800e2e2:	220b      	movs	r2, #11
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e2ee:	e788      	b.n	800e202 <_tzset_unlocked_r+0x1da>
 800e2f0:	b280      	uxth	r0, r0
 800e2f2:	723b      	strb	r3, [r7, #8]
 800e2f4:	6178      	str	r0, [r7, #20]
 800e2f6:	e784      	b.n	800e202 <_tzset_unlocked_r+0x1da>
 800e2f8:	08011c88 	.word	0x08011c88
 800e2fc:	200068a4 	.word	0x200068a4
 800e300:	200068ac 	.word	0x200068ac
 800e304:	08011c8b 	.word	0x08011c8b
 800e308:	200068a8 	.word	0x200068a8
 800e30c:	20000084 	.word	0x20000084
 800e310:	20006897 	.word	0x20006897
 800e314:	08011c8f 	.word	0x08011c8f
 800e318:	08011cb2 	.word	0x08011cb2
 800e31c:	08011c9e 	.word	0x08011c9e
 800e320:	08011cb1 	.word	0x08011cb1
 800e324:	2000688c 	.word	0x2000688c

0800e328 <_write_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4d07      	ldr	r5, [pc, #28]	; (800e348 <_write_r+0x20>)
 800e32c:	4604      	mov	r4, r0
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f4 ffa9 	bl	800328e <_write>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_write_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_write_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	200068c0 	.word	0x200068c0

0800e34c <_close_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d06      	ldr	r5, [pc, #24]	; (800e368 <_close_r+0x1c>)
 800e350:	2300      	movs	r3, #0
 800e352:	4604      	mov	r4, r0
 800e354:	4608      	mov	r0, r1
 800e356:	602b      	str	r3, [r5, #0]
 800e358:	f7f4 ffb5 	bl	80032c6 <_close>
 800e35c:	1c43      	adds	r3, r0, #1
 800e35e:	d102      	bne.n	800e366 <_close_r+0x1a>
 800e360:	682b      	ldr	r3, [r5, #0]
 800e362:	b103      	cbz	r3, 800e366 <_close_r+0x1a>
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	200068c0 	.word	0x200068c0

0800e36c <div>:
 800e36c:	2900      	cmp	r1, #0
 800e36e:	b510      	push	{r4, lr}
 800e370:	fb91 f4f2 	sdiv	r4, r1, r2
 800e374:	fb02 1314 	mls	r3, r2, r4, r1
 800e378:	db06      	blt.n	800e388 <div+0x1c>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	da01      	bge.n	800e382 <div+0x16>
 800e37e:	3401      	adds	r4, #1
 800e380:	1a9b      	subs	r3, r3, r2
 800e382:	e9c0 4300 	strd	r4, r3, [r0]
 800e386:	bd10      	pop	{r4, pc}
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bfc4      	itt	gt
 800e38c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e390:	189b      	addgt	r3, r3, r2
 800e392:	e7f6      	b.n	800e382 <div+0x16>

0800e394 <quorem>:
 800e394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	6903      	ldr	r3, [r0, #16]
 800e39a:	690c      	ldr	r4, [r1, #16]
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	4607      	mov	r7, r0
 800e3a0:	f2c0 8081 	blt.w	800e4a6 <quorem+0x112>
 800e3a4:	3c01      	subs	r4, #1
 800e3a6:	f101 0814 	add.w	r8, r1, #20
 800e3aa:	f100 0514 	add.w	r5, r0, #20
 800e3ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3cc:	d331      	bcc.n	800e432 <quorem+0x9e>
 800e3ce:	f04f 0e00 	mov.w	lr, #0
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	46ac      	mov	ip, r5
 800e3d6:	46f2      	mov	sl, lr
 800e3d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3dc:	b293      	uxth	r3, r2
 800e3de:	fb06 e303 	mla	r3, r6, r3, lr
 800e3e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	ebaa 0303 	sub.w	r3, sl, r3
 800e3ec:	f8dc a000 	ldr.w	sl, [ip]
 800e3f0:	0c12      	lsrs	r2, r2, #16
 800e3f2:	fa13 f38a 	uxtah	r3, r3, sl
 800e3f6:	fb06 e202 	mla	r2, r6, r2, lr
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	9b00      	ldr	r3, [sp, #0]
 800e3fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e402:	b292      	uxth	r2, r2
 800e404:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e40c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e410:	4581      	cmp	r9, r0
 800e412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e416:	f84c 3b04 	str.w	r3, [ip], #4
 800e41a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e41e:	d2db      	bcs.n	800e3d8 <quorem+0x44>
 800e420:	f855 300b 	ldr.w	r3, [r5, fp]
 800e424:	b92b      	cbnz	r3, 800e432 <quorem+0x9e>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	3b04      	subs	r3, #4
 800e42a:	429d      	cmp	r5, r3
 800e42c:	461a      	mov	r2, r3
 800e42e:	d32e      	bcc.n	800e48e <quorem+0xfa>
 800e430:	613c      	str	r4, [r7, #16]
 800e432:	4638      	mov	r0, r7
 800e434:	f001 fcec 	bl	800fe10 <__mcmp>
 800e438:	2800      	cmp	r0, #0
 800e43a:	db24      	blt.n	800e486 <quorem+0xf2>
 800e43c:	3601      	adds	r6, #1
 800e43e:	4628      	mov	r0, r5
 800e440:	f04f 0c00 	mov.w	ip, #0
 800e444:	f858 2b04 	ldr.w	r2, [r8], #4
 800e448:	f8d0 e000 	ldr.w	lr, [r0]
 800e44c:	b293      	uxth	r3, r2
 800e44e:	ebac 0303 	sub.w	r3, ip, r3
 800e452:	0c12      	lsrs	r2, r2, #16
 800e454:	fa13 f38e 	uxtah	r3, r3, lr
 800e458:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e45c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e460:	b29b      	uxth	r3, r3
 800e462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e466:	45c1      	cmp	r9, r8
 800e468:	f840 3b04 	str.w	r3, [r0], #4
 800e46c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e470:	d2e8      	bcs.n	800e444 <quorem+0xb0>
 800e472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e47a:	b922      	cbnz	r2, 800e486 <quorem+0xf2>
 800e47c:	3b04      	subs	r3, #4
 800e47e:	429d      	cmp	r5, r3
 800e480:	461a      	mov	r2, r3
 800e482:	d30a      	bcc.n	800e49a <quorem+0x106>
 800e484:	613c      	str	r4, [r7, #16]
 800e486:	4630      	mov	r0, r6
 800e488:	b003      	add	sp, #12
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48e:	6812      	ldr	r2, [r2, #0]
 800e490:	3b04      	subs	r3, #4
 800e492:	2a00      	cmp	r2, #0
 800e494:	d1cc      	bne.n	800e430 <quorem+0x9c>
 800e496:	3c01      	subs	r4, #1
 800e498:	e7c7      	b.n	800e42a <quorem+0x96>
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	3b04      	subs	r3, #4
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	d1f0      	bne.n	800e484 <quorem+0xf0>
 800e4a2:	3c01      	subs	r4, #1
 800e4a4:	e7eb      	b.n	800e47e <quorem+0xea>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7ee      	b.n	800e488 <quorem+0xf4>
 800e4aa:	0000      	movs	r0, r0
 800e4ac:	0000      	movs	r0, r0
	...

0800e4b0 <_dtoa_r>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	ed2d 8b04 	vpush	{d8-d9}
 800e4b8:	ec57 6b10 	vmov	r6, r7, d0
 800e4bc:	b093      	sub	sp, #76	; 0x4c
 800e4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e4c4:	9106      	str	r1, [sp, #24]
 800e4c6:	ee10 aa10 	vmov	sl, s0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e4d0:	46bb      	mov	fp, r7
 800e4d2:	b975      	cbnz	r5, 800e4f2 <_dtoa_r+0x42>
 800e4d4:	2010      	movs	r0, #16
 800e4d6:	f001 f9ad 	bl	800f834 <malloc>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e4de:	b920      	cbnz	r0, 800e4ea <_dtoa_r+0x3a>
 800e4e0:	4ba7      	ldr	r3, [pc, #668]	; (800e780 <_dtoa_r+0x2d0>)
 800e4e2:	21ea      	movs	r1, #234	; 0xea
 800e4e4:	48a7      	ldr	r0, [pc, #668]	; (800e784 <_dtoa_r+0x2d4>)
 800e4e6:	f002 fcbf 	bl	8010e68 <__assert_func>
 800e4ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e4ee:	6005      	str	r5, [r0, #0]
 800e4f0:	60c5      	str	r5, [r0, #12]
 800e4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4f4:	6819      	ldr	r1, [r3, #0]
 800e4f6:	b151      	cbz	r1, 800e50e <_dtoa_r+0x5e>
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	604a      	str	r2, [r1, #4]
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	4093      	lsls	r3, r2
 800e500:	608b      	str	r3, [r1, #8]
 800e502:	4620      	mov	r0, r4
 800e504:	f001 f9f8 	bl	800f8f8 <_Bfree>
 800e508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
 800e50e:	1e3b      	subs	r3, r7, #0
 800e510:	bfaa      	itet	ge
 800e512:	2300      	movge	r3, #0
 800e514:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e518:	f8c8 3000 	strge.w	r3, [r8]
 800e51c:	4b9a      	ldr	r3, [pc, #616]	; (800e788 <_dtoa_r+0x2d8>)
 800e51e:	bfbc      	itt	lt
 800e520:	2201      	movlt	r2, #1
 800e522:	f8c8 2000 	strlt.w	r2, [r8]
 800e526:	ea33 030b 	bics.w	r3, r3, fp
 800e52a:	d11b      	bne.n	800e564 <_dtoa_r+0xb4>
 800e52c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e52e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e538:	4333      	orrs	r3, r6
 800e53a:	f000 8592 	beq.w	800f062 <_dtoa_r+0xbb2>
 800e53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e540:	b963      	cbnz	r3, 800e55c <_dtoa_r+0xac>
 800e542:	4b92      	ldr	r3, [pc, #584]	; (800e78c <_dtoa_r+0x2dc>)
 800e544:	e022      	b.n	800e58c <_dtoa_r+0xdc>
 800e546:	4b92      	ldr	r3, [pc, #584]	; (800e790 <_dtoa_r+0x2e0>)
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	3308      	adds	r3, #8
 800e54c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	9801      	ldr	r0, [sp, #4]
 800e552:	b013      	add	sp, #76	; 0x4c
 800e554:	ecbd 8b04 	vpop	{d8-d9}
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	4b8b      	ldr	r3, [pc, #556]	; (800e78c <_dtoa_r+0x2dc>)
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	3303      	adds	r3, #3
 800e562:	e7f3      	b.n	800e54c <_dtoa_r+0x9c>
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	4650      	mov	r0, sl
 800e56a:	4659      	mov	r1, fp
 800e56c:	f7f2 fabc 	bl	8000ae8 <__aeabi_dcmpeq>
 800e570:	ec4b ab19 	vmov	d9, sl, fp
 800e574:	4680      	mov	r8, r0
 800e576:	b158      	cbz	r0, 800e590 <_dtoa_r+0xe0>
 800e578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e57a:	2301      	movs	r3, #1
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 856b 	beq.w	800f05c <_dtoa_r+0xbac>
 800e586:	4883      	ldr	r0, [pc, #524]	; (800e794 <_dtoa_r+0x2e4>)
 800e588:	6018      	str	r0, [r3, #0]
 800e58a:	1e43      	subs	r3, r0, #1
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	e7df      	b.n	800e550 <_dtoa_r+0xa0>
 800e590:	ec4b ab10 	vmov	d0, sl, fp
 800e594:	aa10      	add	r2, sp, #64	; 0x40
 800e596:	a911      	add	r1, sp, #68	; 0x44
 800e598:	4620      	mov	r0, r4
 800e59a:	f001 fd5b 	bl	8010054 <__d2b>
 800e59e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e5a2:	ee08 0a10 	vmov	s16, r0
 800e5a6:	2d00      	cmp	r5, #0
 800e5a8:	f000 8084 	beq.w	800e6b4 <_dtoa_r+0x204>
 800e5ac:	ee19 3a90 	vmov	r3, s19
 800e5b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e5b8:	4656      	mov	r6, sl
 800e5ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e5be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e5c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e5c6:	4b74      	ldr	r3, [pc, #464]	; (800e798 <_dtoa_r+0x2e8>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	f7f1 fe6b 	bl	80002a8 <__aeabi_dsub>
 800e5d2:	a365      	add	r3, pc, #404	; (adr r3, 800e768 <_dtoa_r+0x2b8>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f2 f81e 	bl	8000618 <__aeabi_dmul>
 800e5dc:	a364      	add	r3, pc, #400	; (adr r3, 800e770 <_dtoa_r+0x2c0>)
 800e5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e2:	f7f1 fe63 	bl	80002ac <__adddf3>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	460f      	mov	r7, r1
 800e5ec:	f7f1 ffaa 	bl	8000544 <__aeabi_i2d>
 800e5f0:	a361      	add	r3, pc, #388	; (adr r3, 800e778 <_dtoa_r+0x2c8>)
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	f7f2 f80f 	bl	8000618 <__aeabi_dmul>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4630      	mov	r0, r6
 800e600:	4639      	mov	r1, r7
 800e602:	f7f1 fe53 	bl	80002ac <__adddf3>
 800e606:	4606      	mov	r6, r0
 800e608:	460f      	mov	r7, r1
 800e60a:	f7f2 fab5 	bl	8000b78 <__aeabi_d2iz>
 800e60e:	2200      	movs	r2, #0
 800e610:	9000      	str	r0, [sp, #0]
 800e612:	2300      	movs	r3, #0
 800e614:	4630      	mov	r0, r6
 800e616:	4639      	mov	r1, r7
 800e618:	f7f2 fa70 	bl	8000afc <__aeabi_dcmplt>
 800e61c:	b150      	cbz	r0, 800e634 <_dtoa_r+0x184>
 800e61e:	9800      	ldr	r0, [sp, #0]
 800e620:	f7f1 ff90 	bl	8000544 <__aeabi_i2d>
 800e624:	4632      	mov	r2, r6
 800e626:	463b      	mov	r3, r7
 800e628:	f7f2 fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e62c:	b910      	cbnz	r0, 800e634 <_dtoa_r+0x184>
 800e62e:	9b00      	ldr	r3, [sp, #0]
 800e630:	3b01      	subs	r3, #1
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	9b00      	ldr	r3, [sp, #0]
 800e636:	2b16      	cmp	r3, #22
 800e638:	d85a      	bhi.n	800e6f0 <_dtoa_r+0x240>
 800e63a:	9a00      	ldr	r2, [sp, #0]
 800e63c:	4b57      	ldr	r3, [pc, #348]	; (800e79c <_dtoa_r+0x2ec>)
 800e63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	ec51 0b19 	vmov	r0, r1, d9
 800e64a:	f7f2 fa57 	bl	8000afc <__aeabi_dcmplt>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d050      	beq.n	800e6f4 <_dtoa_r+0x244>
 800e652:	9b00      	ldr	r3, [sp, #0]
 800e654:	3b01      	subs	r3, #1
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2300      	movs	r3, #0
 800e65a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e65e:	1b5d      	subs	r5, r3, r5
 800e660:	1e6b      	subs	r3, r5, #1
 800e662:	9305      	str	r3, [sp, #20]
 800e664:	bf45      	ittet	mi
 800e666:	f1c5 0301 	rsbmi	r3, r5, #1
 800e66a:	9304      	strmi	r3, [sp, #16]
 800e66c:	2300      	movpl	r3, #0
 800e66e:	2300      	movmi	r3, #0
 800e670:	bf4c      	ite	mi
 800e672:	9305      	strmi	r3, [sp, #20]
 800e674:	9304      	strpl	r3, [sp, #16]
 800e676:	9b00      	ldr	r3, [sp, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	db3d      	blt.n	800e6f8 <_dtoa_r+0x248>
 800e67c:	9b05      	ldr	r3, [sp, #20]
 800e67e:	9a00      	ldr	r2, [sp, #0]
 800e680:	920a      	str	r2, [sp, #40]	; 0x28
 800e682:	4413      	add	r3, r2
 800e684:	9305      	str	r3, [sp, #20]
 800e686:	2300      	movs	r3, #0
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	9b06      	ldr	r3, [sp, #24]
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	f200 8089 	bhi.w	800e7a4 <_dtoa_r+0x2f4>
 800e692:	2b05      	cmp	r3, #5
 800e694:	bfc4      	itt	gt
 800e696:	3b04      	subgt	r3, #4
 800e698:	9306      	strgt	r3, [sp, #24]
 800e69a:	9b06      	ldr	r3, [sp, #24]
 800e69c:	f1a3 0302 	sub.w	r3, r3, #2
 800e6a0:	bfcc      	ite	gt
 800e6a2:	2500      	movgt	r5, #0
 800e6a4:	2501      	movle	r5, #1
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	f200 8087 	bhi.w	800e7ba <_dtoa_r+0x30a>
 800e6ac:	e8df f003 	tbb	[pc, r3]
 800e6b0:	59383a2d 	.word	0x59383a2d
 800e6b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e6b8:	441d      	add	r5, r3
 800e6ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e6be:	2b20      	cmp	r3, #32
 800e6c0:	bfc1      	itttt	gt
 800e6c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e6c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e6ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800e6ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e6d2:	bfda      	itte	le
 800e6d4:	f1c3 0320 	rsble	r3, r3, #32
 800e6d8:	fa06 f003 	lslle.w	r0, r6, r3
 800e6dc:	4318      	orrgt	r0, r3
 800e6de:	f7f1 ff21 	bl	8000524 <__aeabi_ui2d>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e6ea:	3d01      	subs	r5, #1
 800e6ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e6ee:	e76a      	b.n	800e5c6 <_dtoa_r+0x116>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e7b2      	b.n	800e65a <_dtoa_r+0x1aa>
 800e6f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e6f6:	e7b1      	b.n	800e65c <_dtoa_r+0x1ac>
 800e6f8:	9b04      	ldr	r3, [sp, #16]
 800e6fa:	9a00      	ldr	r2, [sp, #0]
 800e6fc:	1a9b      	subs	r3, r3, r2
 800e6fe:	9304      	str	r3, [sp, #16]
 800e700:	4253      	negs	r3, r2
 800e702:	9307      	str	r3, [sp, #28]
 800e704:	2300      	movs	r3, #0
 800e706:	930a      	str	r3, [sp, #40]	; 0x28
 800e708:	e7bf      	b.n	800e68a <_dtoa_r+0x1da>
 800e70a:	2300      	movs	r3, #0
 800e70c:	9308      	str	r3, [sp, #32]
 800e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	dc55      	bgt.n	800e7c0 <_dtoa_r+0x310>
 800e714:	2301      	movs	r3, #1
 800e716:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e71a:	461a      	mov	r2, r3
 800e71c:	9209      	str	r2, [sp, #36]	; 0x24
 800e71e:	e00c      	b.n	800e73a <_dtoa_r+0x28a>
 800e720:	2301      	movs	r3, #1
 800e722:	e7f3      	b.n	800e70c <_dtoa_r+0x25c>
 800e724:	2300      	movs	r3, #0
 800e726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e728:	9308      	str	r3, [sp, #32]
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	4413      	add	r3, r2
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	3301      	adds	r3, #1
 800e732:	2b01      	cmp	r3, #1
 800e734:	9303      	str	r3, [sp, #12]
 800e736:	bfb8      	it	lt
 800e738:	2301      	movlt	r3, #1
 800e73a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e73c:	2200      	movs	r2, #0
 800e73e:	6042      	str	r2, [r0, #4]
 800e740:	2204      	movs	r2, #4
 800e742:	f102 0614 	add.w	r6, r2, #20
 800e746:	429e      	cmp	r6, r3
 800e748:	6841      	ldr	r1, [r0, #4]
 800e74a:	d93d      	bls.n	800e7c8 <_dtoa_r+0x318>
 800e74c:	4620      	mov	r0, r4
 800e74e:	f001 f893 	bl	800f878 <_Balloc>
 800e752:	9001      	str	r0, [sp, #4]
 800e754:	2800      	cmp	r0, #0
 800e756:	d13b      	bne.n	800e7d0 <_dtoa_r+0x320>
 800e758:	4b11      	ldr	r3, [pc, #68]	; (800e7a0 <_dtoa_r+0x2f0>)
 800e75a:	4602      	mov	r2, r0
 800e75c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e760:	e6c0      	b.n	800e4e4 <_dtoa_r+0x34>
 800e762:	2301      	movs	r3, #1
 800e764:	e7df      	b.n	800e726 <_dtoa_r+0x276>
 800e766:	bf00      	nop
 800e768:	636f4361 	.word	0x636f4361
 800e76c:	3fd287a7 	.word	0x3fd287a7
 800e770:	8b60c8b3 	.word	0x8b60c8b3
 800e774:	3fc68a28 	.word	0x3fc68a28
 800e778:	509f79fb 	.word	0x509f79fb
 800e77c:	3fd34413 	.word	0x3fd34413
 800e780:	08011dd2 	.word	0x08011dd2
 800e784:	08011de9 	.word	0x08011de9
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	08011dce 	.word	0x08011dce
 800e790:	08011dc5 	.word	0x08011dc5
 800e794:	080120a2 	.word	0x080120a2
 800e798:	3ff80000 	.word	0x3ff80000
 800e79c:	08011fb8 	.word	0x08011fb8
 800e7a0:	08011e44 	.word	0x08011e44
 800e7a4:	2501      	movs	r5, #1
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9306      	str	r3, [sp, #24]
 800e7aa:	9508      	str	r5, [sp, #32]
 800e7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2312      	movs	r3, #18
 800e7b8:	e7b0      	b.n	800e71c <_dtoa_r+0x26c>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	e7f5      	b.n	800e7ac <_dtoa_r+0x2fc>
 800e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7c6:	e7b8      	b.n	800e73a <_dtoa_r+0x28a>
 800e7c8:	3101      	adds	r1, #1
 800e7ca:	6041      	str	r1, [r0, #4]
 800e7cc:	0052      	lsls	r2, r2, #1
 800e7ce:	e7b8      	b.n	800e742 <_dtoa_r+0x292>
 800e7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d2:	9a01      	ldr	r2, [sp, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	2b0e      	cmp	r3, #14
 800e7da:	f200 809d 	bhi.w	800e918 <_dtoa_r+0x468>
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	f000 809a 	beq.w	800e918 <_dtoa_r+0x468>
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dd32      	ble.n	800e850 <_dtoa_r+0x3a0>
 800e7ea:	4ab7      	ldr	r2, [pc, #732]	; (800eac8 <_dtoa_r+0x618>)
 800e7ec:	f003 030f 	and.w	r3, r3, #15
 800e7f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7f8:	9b00      	ldr	r3, [sp, #0]
 800e7fa:	05d8      	lsls	r0, r3, #23
 800e7fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e800:	d516      	bpl.n	800e830 <_dtoa_r+0x380>
 800e802:	4bb2      	ldr	r3, [pc, #712]	; (800eacc <_dtoa_r+0x61c>)
 800e804:	ec51 0b19 	vmov	r0, r1, d9
 800e808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e80c:	f7f2 f82e 	bl	800086c <__aeabi_ddiv>
 800e810:	f007 070f 	and.w	r7, r7, #15
 800e814:	4682      	mov	sl, r0
 800e816:	468b      	mov	fp, r1
 800e818:	2503      	movs	r5, #3
 800e81a:	4eac      	ldr	r6, [pc, #688]	; (800eacc <_dtoa_r+0x61c>)
 800e81c:	b957      	cbnz	r7, 800e834 <_dtoa_r+0x384>
 800e81e:	4642      	mov	r2, r8
 800e820:	464b      	mov	r3, r9
 800e822:	4650      	mov	r0, sl
 800e824:	4659      	mov	r1, fp
 800e826:	f7f2 f821 	bl	800086c <__aeabi_ddiv>
 800e82a:	4682      	mov	sl, r0
 800e82c:	468b      	mov	fp, r1
 800e82e:	e028      	b.n	800e882 <_dtoa_r+0x3d2>
 800e830:	2502      	movs	r5, #2
 800e832:	e7f2      	b.n	800e81a <_dtoa_r+0x36a>
 800e834:	07f9      	lsls	r1, r7, #31
 800e836:	d508      	bpl.n	800e84a <_dtoa_r+0x39a>
 800e838:	4640      	mov	r0, r8
 800e83a:	4649      	mov	r1, r9
 800e83c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e840:	f7f1 feea 	bl	8000618 <__aeabi_dmul>
 800e844:	3501      	adds	r5, #1
 800e846:	4680      	mov	r8, r0
 800e848:	4689      	mov	r9, r1
 800e84a:	107f      	asrs	r7, r7, #1
 800e84c:	3608      	adds	r6, #8
 800e84e:	e7e5      	b.n	800e81c <_dtoa_r+0x36c>
 800e850:	f000 809b 	beq.w	800e98a <_dtoa_r+0x4da>
 800e854:	9b00      	ldr	r3, [sp, #0]
 800e856:	4f9d      	ldr	r7, [pc, #628]	; (800eacc <_dtoa_r+0x61c>)
 800e858:	425e      	negs	r6, r3
 800e85a:	4b9b      	ldr	r3, [pc, #620]	; (800eac8 <_dtoa_r+0x618>)
 800e85c:	f006 020f 	and.w	r2, r6, #15
 800e860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	ec51 0b19 	vmov	r0, r1, d9
 800e86c:	f7f1 fed4 	bl	8000618 <__aeabi_dmul>
 800e870:	1136      	asrs	r6, r6, #4
 800e872:	4682      	mov	sl, r0
 800e874:	468b      	mov	fp, r1
 800e876:	2300      	movs	r3, #0
 800e878:	2502      	movs	r5, #2
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	d17a      	bne.n	800e974 <_dtoa_r+0x4c4>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1d3      	bne.n	800e82a <_dtoa_r+0x37a>
 800e882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 8082 	beq.w	800e98e <_dtoa_r+0x4de>
 800e88a:	4b91      	ldr	r3, [pc, #580]	; (800ead0 <_dtoa_r+0x620>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	4650      	mov	r0, sl
 800e890:	4659      	mov	r1, fp
 800e892:	f7f2 f933 	bl	8000afc <__aeabi_dcmplt>
 800e896:	2800      	cmp	r0, #0
 800e898:	d079      	beq.n	800e98e <_dtoa_r+0x4de>
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d076      	beq.n	800e98e <_dtoa_r+0x4de>
 800e8a0:	9b02      	ldr	r3, [sp, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	dd36      	ble.n	800e914 <_dtoa_r+0x464>
 800e8a6:	9b00      	ldr	r3, [sp, #0]
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	4659      	mov	r1, fp
 800e8ac:	1e5f      	subs	r7, r3, #1
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4b88      	ldr	r3, [pc, #544]	; (800ead4 <_dtoa_r+0x624>)
 800e8b2:	f7f1 feb1 	bl	8000618 <__aeabi_dmul>
 800e8b6:	9e02      	ldr	r6, [sp, #8]
 800e8b8:	4682      	mov	sl, r0
 800e8ba:	468b      	mov	fp, r1
 800e8bc:	3501      	adds	r5, #1
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f7f1 fe40 	bl	8000544 <__aeabi_i2d>
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	465b      	mov	r3, fp
 800e8c8:	f7f1 fea6 	bl	8000618 <__aeabi_dmul>
 800e8cc:	4b82      	ldr	r3, [pc, #520]	; (800ead8 <_dtoa_r+0x628>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f7f1 fcec 	bl	80002ac <__adddf3>
 800e8d4:	46d0      	mov	r8, sl
 800e8d6:	46d9      	mov	r9, fp
 800e8d8:	4682      	mov	sl, r0
 800e8da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e8de:	2e00      	cmp	r6, #0
 800e8e0:	d158      	bne.n	800e994 <_dtoa_r+0x4e4>
 800e8e2:	4b7e      	ldr	r3, [pc, #504]	; (800eadc <_dtoa_r+0x62c>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f1 fcdd 	bl	80002a8 <__aeabi_dsub>
 800e8ee:	4652      	mov	r2, sl
 800e8f0:	465b      	mov	r3, fp
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	4689      	mov	r9, r1
 800e8f6:	f7f2 f91f 	bl	8000b38 <__aeabi_dcmpgt>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	f040 8295 	bne.w	800ee2a <_dtoa_r+0x97a>
 800e900:	4652      	mov	r2, sl
 800e902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f2 f8f7 	bl	8000afc <__aeabi_dcmplt>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f040 8289 	bne.w	800ee26 <_dtoa_r+0x976>
 800e914:	ec5b ab19 	vmov	sl, fp, d9
 800e918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f2c0 8148 	blt.w	800ebb0 <_dtoa_r+0x700>
 800e920:	9a00      	ldr	r2, [sp, #0]
 800e922:	2a0e      	cmp	r2, #14
 800e924:	f300 8144 	bgt.w	800ebb0 <_dtoa_r+0x700>
 800e928:	4b67      	ldr	r3, [pc, #412]	; (800eac8 <_dtoa_r+0x618>)
 800e92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e92e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	f280 80d5 	bge.w	800eae4 <_dtoa_r+0x634>
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f300 80d1 	bgt.w	800eae4 <_dtoa_r+0x634>
 800e942:	f040 826f 	bne.w	800ee24 <_dtoa_r+0x974>
 800e946:	4b65      	ldr	r3, [pc, #404]	; (800eadc <_dtoa_r+0x62c>)
 800e948:	2200      	movs	r2, #0
 800e94a:	4640      	mov	r0, r8
 800e94c:	4649      	mov	r1, r9
 800e94e:	f7f1 fe63 	bl	8000618 <__aeabi_dmul>
 800e952:	4652      	mov	r2, sl
 800e954:	465b      	mov	r3, fp
 800e956:	f7f2 f8e5 	bl	8000b24 <__aeabi_dcmpge>
 800e95a:	9e03      	ldr	r6, [sp, #12]
 800e95c:	4637      	mov	r7, r6
 800e95e:	2800      	cmp	r0, #0
 800e960:	f040 8245 	bne.w	800edee <_dtoa_r+0x93e>
 800e964:	9d01      	ldr	r5, [sp, #4]
 800e966:	2331      	movs	r3, #49	; 0x31
 800e968:	f805 3b01 	strb.w	r3, [r5], #1
 800e96c:	9b00      	ldr	r3, [sp, #0]
 800e96e:	3301      	adds	r3, #1
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	e240      	b.n	800edf6 <_dtoa_r+0x946>
 800e974:	07f2      	lsls	r2, r6, #31
 800e976:	d505      	bpl.n	800e984 <_dtoa_r+0x4d4>
 800e978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e97c:	f7f1 fe4c 	bl	8000618 <__aeabi_dmul>
 800e980:	3501      	adds	r5, #1
 800e982:	2301      	movs	r3, #1
 800e984:	1076      	asrs	r6, r6, #1
 800e986:	3708      	adds	r7, #8
 800e988:	e777      	b.n	800e87a <_dtoa_r+0x3ca>
 800e98a:	2502      	movs	r5, #2
 800e98c:	e779      	b.n	800e882 <_dtoa_r+0x3d2>
 800e98e:	9f00      	ldr	r7, [sp, #0]
 800e990:	9e03      	ldr	r6, [sp, #12]
 800e992:	e794      	b.n	800e8be <_dtoa_r+0x40e>
 800e994:	9901      	ldr	r1, [sp, #4]
 800e996:	4b4c      	ldr	r3, [pc, #304]	; (800eac8 <_dtoa_r+0x618>)
 800e998:	4431      	add	r1, r6
 800e99a:	910d      	str	r1, [sp, #52]	; 0x34
 800e99c:	9908      	ldr	r1, [sp, #32]
 800e99e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9a6:	2900      	cmp	r1, #0
 800e9a8:	d043      	beq.n	800ea32 <_dtoa_r+0x582>
 800e9aa:	494d      	ldr	r1, [pc, #308]	; (800eae0 <_dtoa_r+0x630>)
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	f7f1 ff5d 	bl	800086c <__aeabi_ddiv>
 800e9b2:	4652      	mov	r2, sl
 800e9b4:	465b      	mov	r3, fp
 800e9b6:	f7f1 fc77 	bl	80002a8 <__aeabi_dsub>
 800e9ba:	9d01      	ldr	r5, [sp, #4]
 800e9bc:	4682      	mov	sl, r0
 800e9be:	468b      	mov	fp, r1
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	4640      	mov	r0, r8
 800e9c4:	f7f2 f8d8 	bl	8000b78 <__aeabi_d2iz>
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	f7f1 fdbb 	bl	8000544 <__aeabi_i2d>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4640      	mov	r0, r8
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	f7f1 fc67 	bl	80002a8 <__aeabi_dsub>
 800e9da:	3630      	adds	r6, #48	; 0x30
 800e9dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e9e0:	4652      	mov	r2, sl
 800e9e2:	465b      	mov	r3, fp
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	4689      	mov	r9, r1
 800e9e8:	f7f2 f888 	bl	8000afc <__aeabi_dcmplt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d163      	bne.n	800eab8 <_dtoa_r+0x608>
 800e9f0:	4642      	mov	r2, r8
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	4936      	ldr	r1, [pc, #216]	; (800ead0 <_dtoa_r+0x620>)
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f7f1 fc56 	bl	80002a8 <__aeabi_dsub>
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	465b      	mov	r3, fp
 800ea00:	f7f2 f87c 	bl	8000afc <__aeabi_dcmplt>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f040 80b5 	bne.w	800eb74 <_dtoa_r+0x6c4>
 800ea0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea0c:	429d      	cmp	r5, r3
 800ea0e:	d081      	beq.n	800e914 <_dtoa_r+0x464>
 800ea10:	4b30      	ldr	r3, [pc, #192]	; (800ead4 <_dtoa_r+0x624>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	4650      	mov	r0, sl
 800ea16:	4659      	mov	r1, fp
 800ea18:	f7f1 fdfe 	bl	8000618 <__aeabi_dmul>
 800ea1c:	4b2d      	ldr	r3, [pc, #180]	; (800ead4 <_dtoa_r+0x624>)
 800ea1e:	4682      	mov	sl, r0
 800ea20:	468b      	mov	fp, r1
 800ea22:	4640      	mov	r0, r8
 800ea24:	4649      	mov	r1, r9
 800ea26:	2200      	movs	r2, #0
 800ea28:	f7f1 fdf6 	bl	8000618 <__aeabi_dmul>
 800ea2c:	4680      	mov	r8, r0
 800ea2e:	4689      	mov	r9, r1
 800ea30:	e7c6      	b.n	800e9c0 <_dtoa_r+0x510>
 800ea32:	4650      	mov	r0, sl
 800ea34:	4659      	mov	r1, fp
 800ea36:	f7f1 fdef 	bl	8000618 <__aeabi_dmul>
 800ea3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea3c:	9d01      	ldr	r5, [sp, #4]
 800ea3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea40:	4682      	mov	sl, r0
 800ea42:	468b      	mov	fp, r1
 800ea44:	4649      	mov	r1, r9
 800ea46:	4640      	mov	r0, r8
 800ea48:	f7f2 f896 	bl	8000b78 <__aeabi_d2iz>
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	f7f1 fd79 	bl	8000544 <__aeabi_i2d>
 800ea52:	3630      	adds	r6, #48	; 0x30
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f7f1 fc24 	bl	80002a8 <__aeabi_dsub>
 800ea60:	f805 6b01 	strb.w	r6, [r5], #1
 800ea64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea66:	429d      	cmp	r5, r3
 800ea68:	4680      	mov	r8, r0
 800ea6a:	4689      	mov	r9, r1
 800ea6c:	f04f 0200 	mov.w	r2, #0
 800ea70:	d124      	bne.n	800eabc <_dtoa_r+0x60c>
 800ea72:	4b1b      	ldr	r3, [pc, #108]	; (800eae0 <_dtoa_r+0x630>)
 800ea74:	4650      	mov	r0, sl
 800ea76:	4659      	mov	r1, fp
 800ea78:	f7f1 fc18 	bl	80002ac <__adddf3>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4640      	mov	r0, r8
 800ea82:	4649      	mov	r1, r9
 800ea84:	f7f2 f858 	bl	8000b38 <__aeabi_dcmpgt>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d173      	bne.n	800eb74 <_dtoa_r+0x6c4>
 800ea8c:	4652      	mov	r2, sl
 800ea8e:	465b      	mov	r3, fp
 800ea90:	4913      	ldr	r1, [pc, #76]	; (800eae0 <_dtoa_r+0x630>)
 800ea92:	2000      	movs	r0, #0
 800ea94:	f7f1 fc08 	bl	80002a8 <__aeabi_dsub>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	f7f2 f82c 	bl	8000afc <__aeabi_dcmplt>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f43f af35 	beq.w	800e914 <_dtoa_r+0x464>
 800eaaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eaac:	1e6b      	subs	r3, r5, #1
 800eaae:	930f      	str	r3, [sp, #60]	; 0x3c
 800eab0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eab4:	2b30      	cmp	r3, #48	; 0x30
 800eab6:	d0f8      	beq.n	800eaaa <_dtoa_r+0x5fa>
 800eab8:	9700      	str	r7, [sp, #0]
 800eaba:	e049      	b.n	800eb50 <_dtoa_r+0x6a0>
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <_dtoa_r+0x624>)
 800eabe:	f7f1 fdab 	bl	8000618 <__aeabi_dmul>
 800eac2:	4680      	mov	r8, r0
 800eac4:	4689      	mov	r9, r1
 800eac6:	e7bd      	b.n	800ea44 <_dtoa_r+0x594>
 800eac8:	08011fb8 	.word	0x08011fb8
 800eacc:	08011f90 	.word	0x08011f90
 800ead0:	3ff00000 	.word	0x3ff00000
 800ead4:	40240000 	.word	0x40240000
 800ead8:	401c0000 	.word	0x401c0000
 800eadc:	40140000 	.word	0x40140000
 800eae0:	3fe00000 	.word	0x3fe00000
 800eae4:	9d01      	ldr	r5, [sp, #4]
 800eae6:	4656      	mov	r6, sl
 800eae8:	465f      	mov	r7, fp
 800eaea:	4642      	mov	r2, r8
 800eaec:	464b      	mov	r3, r9
 800eaee:	4630      	mov	r0, r6
 800eaf0:	4639      	mov	r1, r7
 800eaf2:	f7f1 febb 	bl	800086c <__aeabi_ddiv>
 800eaf6:	f7f2 f83f 	bl	8000b78 <__aeabi_d2iz>
 800eafa:	4682      	mov	sl, r0
 800eafc:	f7f1 fd22 	bl	8000544 <__aeabi_i2d>
 800eb00:	4642      	mov	r2, r8
 800eb02:	464b      	mov	r3, r9
 800eb04:	f7f1 fd88 	bl	8000618 <__aeabi_dmul>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	4639      	mov	r1, r7
 800eb10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eb14:	f7f1 fbc8 	bl	80002a8 <__aeabi_dsub>
 800eb18:	f805 6b01 	strb.w	r6, [r5], #1
 800eb1c:	9e01      	ldr	r6, [sp, #4]
 800eb1e:	9f03      	ldr	r7, [sp, #12]
 800eb20:	1bae      	subs	r6, r5, r6
 800eb22:	42b7      	cmp	r7, r6
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	d135      	bne.n	800eb96 <_dtoa_r+0x6e6>
 800eb2a:	f7f1 fbbf 	bl	80002ac <__adddf3>
 800eb2e:	4642      	mov	r2, r8
 800eb30:	464b      	mov	r3, r9
 800eb32:	4606      	mov	r6, r0
 800eb34:	460f      	mov	r7, r1
 800eb36:	f7f1 ffff 	bl	8000b38 <__aeabi_dcmpgt>
 800eb3a:	b9d0      	cbnz	r0, 800eb72 <_dtoa_r+0x6c2>
 800eb3c:	4642      	mov	r2, r8
 800eb3e:	464b      	mov	r3, r9
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 ffd0 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb48:	b110      	cbz	r0, 800eb50 <_dtoa_r+0x6a0>
 800eb4a:	f01a 0f01 	tst.w	sl, #1
 800eb4e:	d110      	bne.n	800eb72 <_dtoa_r+0x6c2>
 800eb50:	4620      	mov	r0, r4
 800eb52:	ee18 1a10 	vmov	r1, s16
 800eb56:	f000 fecf 	bl	800f8f8 <_Bfree>
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	9800      	ldr	r0, [sp, #0]
 800eb5e:	702b      	strb	r3, [r5, #0]
 800eb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb62:	3001      	adds	r0, #1
 800eb64:	6018      	str	r0, [r3, #0]
 800eb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f43f acf1 	beq.w	800e550 <_dtoa_r+0xa0>
 800eb6e:	601d      	str	r5, [r3, #0]
 800eb70:	e4ee      	b.n	800e550 <_dtoa_r+0xa0>
 800eb72:	9f00      	ldr	r7, [sp, #0]
 800eb74:	462b      	mov	r3, r5
 800eb76:	461d      	mov	r5, r3
 800eb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb7c:	2a39      	cmp	r2, #57	; 0x39
 800eb7e:	d106      	bne.n	800eb8e <_dtoa_r+0x6de>
 800eb80:	9a01      	ldr	r2, [sp, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d1f7      	bne.n	800eb76 <_dtoa_r+0x6c6>
 800eb86:	9901      	ldr	r1, [sp, #4]
 800eb88:	2230      	movs	r2, #48	; 0x30
 800eb8a:	3701      	adds	r7, #1
 800eb8c:	700a      	strb	r2, [r1, #0]
 800eb8e:	781a      	ldrb	r2, [r3, #0]
 800eb90:	3201      	adds	r2, #1
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	e790      	b.n	800eab8 <_dtoa_r+0x608>
 800eb96:	4ba6      	ldr	r3, [pc, #664]	; (800ee30 <_dtoa_r+0x980>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f7f1 fd3d 	bl	8000618 <__aeabi_dmul>
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2300      	movs	r3, #0
 800eba2:	4606      	mov	r6, r0
 800eba4:	460f      	mov	r7, r1
 800eba6:	f7f1 ff9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d09d      	beq.n	800eaea <_dtoa_r+0x63a>
 800ebae:	e7cf      	b.n	800eb50 <_dtoa_r+0x6a0>
 800ebb0:	9a08      	ldr	r2, [sp, #32]
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	f000 80d7 	beq.w	800ed66 <_dtoa_r+0x8b6>
 800ebb8:	9a06      	ldr	r2, [sp, #24]
 800ebba:	2a01      	cmp	r2, #1
 800ebbc:	f300 80ba 	bgt.w	800ed34 <_dtoa_r+0x884>
 800ebc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	f000 80b2 	beq.w	800ed2c <_dtoa_r+0x87c>
 800ebc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebcc:	9e07      	ldr	r6, [sp, #28]
 800ebce:	9d04      	ldr	r5, [sp, #16]
 800ebd0:	9a04      	ldr	r2, [sp, #16]
 800ebd2:	441a      	add	r2, r3
 800ebd4:	9204      	str	r2, [sp, #16]
 800ebd6:	9a05      	ldr	r2, [sp, #20]
 800ebd8:	2101      	movs	r1, #1
 800ebda:	441a      	add	r2, r3
 800ebdc:	4620      	mov	r0, r4
 800ebde:	9205      	str	r2, [sp, #20]
 800ebe0:	f000 ff8c 	bl	800fafc <__i2b>
 800ebe4:	4607      	mov	r7, r0
 800ebe6:	2d00      	cmp	r5, #0
 800ebe8:	dd0c      	ble.n	800ec04 <_dtoa_r+0x754>
 800ebea:	9b05      	ldr	r3, [sp, #20]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	dd09      	ble.n	800ec04 <_dtoa_r+0x754>
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	9a04      	ldr	r2, [sp, #16]
 800ebf4:	bfa8      	it	ge
 800ebf6:	462b      	movge	r3, r5
 800ebf8:	1ad2      	subs	r2, r2, r3
 800ebfa:	9204      	str	r2, [sp, #16]
 800ebfc:	9a05      	ldr	r2, [sp, #20]
 800ebfe:	1aed      	subs	r5, r5, r3
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	b31b      	cbz	r3, 800ec50 <_dtoa_r+0x7a0>
 800ec08:	9b08      	ldr	r3, [sp, #32]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80af 	beq.w	800ed6e <_dtoa_r+0x8be>
 800ec10:	2e00      	cmp	r6, #0
 800ec12:	dd13      	ble.n	800ec3c <_dtoa_r+0x78c>
 800ec14:	4639      	mov	r1, r7
 800ec16:	4632      	mov	r2, r6
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f001 f82f 	bl	800fc7c <__pow5mult>
 800ec1e:	ee18 2a10 	vmov	r2, s16
 800ec22:	4601      	mov	r1, r0
 800ec24:	4607      	mov	r7, r0
 800ec26:	4620      	mov	r0, r4
 800ec28:	f000 ff7e 	bl	800fb28 <__multiply>
 800ec2c:	ee18 1a10 	vmov	r1, s16
 800ec30:	4680      	mov	r8, r0
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 fe60 	bl	800f8f8 <_Bfree>
 800ec38:	ee08 8a10 	vmov	s16, r8
 800ec3c:	9b07      	ldr	r3, [sp, #28]
 800ec3e:	1b9a      	subs	r2, r3, r6
 800ec40:	d006      	beq.n	800ec50 <_dtoa_r+0x7a0>
 800ec42:	ee18 1a10 	vmov	r1, s16
 800ec46:	4620      	mov	r0, r4
 800ec48:	f001 f818 	bl	800fc7c <__pow5mult>
 800ec4c:	ee08 0a10 	vmov	s16, r0
 800ec50:	2101      	movs	r1, #1
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 ff52 	bl	800fafc <__i2b>
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	f340 8088 	ble.w	800ed72 <_dtoa_r+0x8c2>
 800ec62:	461a      	mov	r2, r3
 800ec64:	4601      	mov	r1, r0
 800ec66:	4620      	mov	r0, r4
 800ec68:	f001 f808 	bl	800fc7c <__pow5mult>
 800ec6c:	9b06      	ldr	r3, [sp, #24]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	4606      	mov	r6, r0
 800ec72:	f340 8081 	ble.w	800ed78 <_dtoa_r+0x8c8>
 800ec76:	f04f 0800 	mov.w	r8, #0
 800ec7a:	6933      	ldr	r3, [r6, #16]
 800ec7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec80:	6918      	ldr	r0, [r3, #16]
 800ec82:	f000 feeb 	bl	800fa5c <__hi0bits>
 800ec86:	f1c0 0020 	rsb	r0, r0, #32
 800ec8a:	9b05      	ldr	r3, [sp, #20]
 800ec8c:	4418      	add	r0, r3
 800ec8e:	f010 001f 	ands.w	r0, r0, #31
 800ec92:	f000 8092 	beq.w	800edba <_dtoa_r+0x90a>
 800ec96:	f1c0 0320 	rsb	r3, r0, #32
 800ec9a:	2b04      	cmp	r3, #4
 800ec9c:	f340 808a 	ble.w	800edb4 <_dtoa_r+0x904>
 800eca0:	f1c0 001c 	rsb	r0, r0, #28
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	4403      	add	r3, r0
 800eca8:	9304      	str	r3, [sp, #16]
 800ecaa:	9b05      	ldr	r3, [sp, #20]
 800ecac:	4403      	add	r3, r0
 800ecae:	4405      	add	r5, r0
 800ecb0:	9305      	str	r3, [sp, #20]
 800ecb2:	9b04      	ldr	r3, [sp, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd07      	ble.n	800ecc8 <_dtoa_r+0x818>
 800ecb8:	ee18 1a10 	vmov	r1, s16
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f001 f836 	bl	800fd30 <__lshift>
 800ecc4:	ee08 0a10 	vmov	s16, r0
 800ecc8:	9b05      	ldr	r3, [sp, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd05      	ble.n	800ecda <_dtoa_r+0x82a>
 800ecce:	4631      	mov	r1, r6
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f001 f82c 	bl	800fd30 <__lshift>
 800ecd8:	4606      	mov	r6, r0
 800ecda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d06e      	beq.n	800edbe <_dtoa_r+0x90e>
 800ece0:	ee18 0a10 	vmov	r0, s16
 800ece4:	4631      	mov	r1, r6
 800ece6:	f001 f893 	bl	800fe10 <__mcmp>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	da67      	bge.n	800edbe <_dtoa_r+0x90e>
 800ecee:	9b00      	ldr	r3, [sp, #0]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	ee18 1a10 	vmov	r1, s16
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	220a      	movs	r2, #10
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f000 fe1d 	bl	800f93c <__multadd>
 800ed02:	9b08      	ldr	r3, [sp, #32]
 800ed04:	ee08 0a10 	vmov	s16, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 81b1 	beq.w	800f070 <_dtoa_r+0xbc0>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	4639      	mov	r1, r7
 800ed12:	220a      	movs	r2, #10
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fe11 	bl	800f93c <__multadd>
 800ed1a:	9b02      	ldr	r3, [sp, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	4607      	mov	r7, r0
 800ed20:	f300 808e 	bgt.w	800ee40 <_dtoa_r+0x990>
 800ed24:	9b06      	ldr	r3, [sp, #24]
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	dc51      	bgt.n	800edce <_dtoa_r+0x91e>
 800ed2a:	e089      	b.n	800ee40 <_dtoa_r+0x990>
 800ed2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed32:	e74b      	b.n	800ebcc <_dtoa_r+0x71c>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	1e5e      	subs	r6, r3, #1
 800ed38:	9b07      	ldr	r3, [sp, #28]
 800ed3a:	42b3      	cmp	r3, r6
 800ed3c:	bfbf      	itttt	lt
 800ed3e:	9b07      	ldrlt	r3, [sp, #28]
 800ed40:	9607      	strlt	r6, [sp, #28]
 800ed42:	1af2      	sublt	r2, r6, r3
 800ed44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ed46:	bfb6      	itet	lt
 800ed48:	189b      	addlt	r3, r3, r2
 800ed4a:	1b9e      	subge	r6, r3, r6
 800ed4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	bfb8      	it	lt
 800ed52:	2600      	movlt	r6, #0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	bfb7      	itett	lt
 800ed58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ed5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ed60:	1a9d      	sublt	r5, r3, r2
 800ed62:	2300      	movlt	r3, #0
 800ed64:	e734      	b.n	800ebd0 <_dtoa_r+0x720>
 800ed66:	9e07      	ldr	r6, [sp, #28]
 800ed68:	9d04      	ldr	r5, [sp, #16]
 800ed6a:	9f08      	ldr	r7, [sp, #32]
 800ed6c:	e73b      	b.n	800ebe6 <_dtoa_r+0x736>
 800ed6e:	9a07      	ldr	r2, [sp, #28]
 800ed70:	e767      	b.n	800ec42 <_dtoa_r+0x792>
 800ed72:	9b06      	ldr	r3, [sp, #24]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	dc18      	bgt.n	800edaa <_dtoa_r+0x8fa>
 800ed78:	f1ba 0f00 	cmp.w	sl, #0
 800ed7c:	d115      	bne.n	800edaa <_dtoa_r+0x8fa>
 800ed7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed82:	b993      	cbnz	r3, 800edaa <_dtoa_r+0x8fa>
 800ed84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed88:	0d1b      	lsrs	r3, r3, #20
 800ed8a:	051b      	lsls	r3, r3, #20
 800ed8c:	b183      	cbz	r3, 800edb0 <_dtoa_r+0x900>
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	3301      	adds	r3, #1
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	9b05      	ldr	r3, [sp, #20]
 800ed96:	3301      	adds	r3, #1
 800ed98:	9305      	str	r3, [sp, #20]
 800ed9a:	f04f 0801 	mov.w	r8, #1
 800ed9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f47f af6a 	bne.w	800ec7a <_dtoa_r+0x7ca>
 800eda6:	2001      	movs	r0, #1
 800eda8:	e76f      	b.n	800ec8a <_dtoa_r+0x7da>
 800edaa:	f04f 0800 	mov.w	r8, #0
 800edae:	e7f6      	b.n	800ed9e <_dtoa_r+0x8ee>
 800edb0:	4698      	mov	r8, r3
 800edb2:	e7f4      	b.n	800ed9e <_dtoa_r+0x8ee>
 800edb4:	f43f af7d 	beq.w	800ecb2 <_dtoa_r+0x802>
 800edb8:	4618      	mov	r0, r3
 800edba:	301c      	adds	r0, #28
 800edbc:	e772      	b.n	800eca4 <_dtoa_r+0x7f4>
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dc37      	bgt.n	800ee34 <_dtoa_r+0x984>
 800edc4:	9b06      	ldr	r3, [sp, #24]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	dd34      	ble.n	800ee34 <_dtoa_r+0x984>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	9302      	str	r3, [sp, #8]
 800edce:	9b02      	ldr	r3, [sp, #8]
 800edd0:	b96b      	cbnz	r3, 800edee <_dtoa_r+0x93e>
 800edd2:	4631      	mov	r1, r6
 800edd4:	2205      	movs	r2, #5
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 fdb0 	bl	800f93c <__multadd>
 800eddc:	4601      	mov	r1, r0
 800edde:	4606      	mov	r6, r0
 800ede0:	ee18 0a10 	vmov	r0, s16
 800ede4:	f001 f814 	bl	800fe10 <__mcmp>
 800ede8:	2800      	cmp	r0, #0
 800edea:	f73f adbb 	bgt.w	800e964 <_dtoa_r+0x4b4>
 800edee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf0:	9d01      	ldr	r5, [sp, #4]
 800edf2:	43db      	mvns	r3, r3
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	f04f 0800 	mov.w	r8, #0
 800edfa:	4631      	mov	r1, r6
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 fd7b 	bl	800f8f8 <_Bfree>
 800ee02:	2f00      	cmp	r7, #0
 800ee04:	f43f aea4 	beq.w	800eb50 <_dtoa_r+0x6a0>
 800ee08:	f1b8 0f00 	cmp.w	r8, #0
 800ee0c:	d005      	beq.n	800ee1a <_dtoa_r+0x96a>
 800ee0e:	45b8      	cmp	r8, r7
 800ee10:	d003      	beq.n	800ee1a <_dtoa_r+0x96a>
 800ee12:	4641      	mov	r1, r8
 800ee14:	4620      	mov	r0, r4
 800ee16:	f000 fd6f 	bl	800f8f8 <_Bfree>
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f000 fd6b 	bl	800f8f8 <_Bfree>
 800ee22:	e695      	b.n	800eb50 <_dtoa_r+0x6a0>
 800ee24:	2600      	movs	r6, #0
 800ee26:	4637      	mov	r7, r6
 800ee28:	e7e1      	b.n	800edee <_dtoa_r+0x93e>
 800ee2a:	9700      	str	r7, [sp, #0]
 800ee2c:	4637      	mov	r7, r6
 800ee2e:	e599      	b.n	800e964 <_dtoa_r+0x4b4>
 800ee30:	40240000 	.word	0x40240000
 800ee34:	9b08      	ldr	r3, [sp, #32]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f000 80ca 	beq.w	800efd0 <_dtoa_r+0xb20>
 800ee3c:	9b03      	ldr	r3, [sp, #12]
 800ee3e:	9302      	str	r3, [sp, #8]
 800ee40:	2d00      	cmp	r5, #0
 800ee42:	dd05      	ble.n	800ee50 <_dtoa_r+0x9a0>
 800ee44:	4639      	mov	r1, r7
 800ee46:	462a      	mov	r2, r5
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 ff71 	bl	800fd30 <__lshift>
 800ee4e:	4607      	mov	r7, r0
 800ee50:	f1b8 0f00 	cmp.w	r8, #0
 800ee54:	d05b      	beq.n	800ef0e <_dtoa_r+0xa5e>
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 fd0d 	bl	800f878 <_Balloc>
 800ee5e:	4605      	mov	r5, r0
 800ee60:	b928      	cbnz	r0, 800ee6e <_dtoa_r+0x9be>
 800ee62:	4b87      	ldr	r3, [pc, #540]	; (800f080 <_dtoa_r+0xbd0>)
 800ee64:	4602      	mov	r2, r0
 800ee66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee6a:	f7ff bb3b 	b.w	800e4e4 <_dtoa_r+0x34>
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	3202      	adds	r2, #2
 800ee72:	0092      	lsls	r2, r2, #2
 800ee74:	f107 010c 	add.w	r1, r7, #12
 800ee78:	300c      	adds	r0, #12
 800ee7a:	f7fc ff21 	bl	800bcc0 <memcpy>
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4629      	mov	r1, r5
 800ee82:	4620      	mov	r0, r4
 800ee84:	f000 ff54 	bl	800fd30 <__lshift>
 800ee88:	9b01      	ldr	r3, [sp, #4]
 800ee8a:	f103 0901 	add.w	r9, r3, #1
 800ee8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ee92:	4413      	add	r3, r2
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	f00a 0301 	and.w	r3, sl, #1
 800ee9a:	46b8      	mov	r8, r7
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	4607      	mov	r7, r0
 800eea0:	4631      	mov	r1, r6
 800eea2:	ee18 0a10 	vmov	r0, s16
 800eea6:	f7ff fa75 	bl	800e394 <quorem>
 800eeaa:	4641      	mov	r1, r8
 800eeac:	9002      	str	r0, [sp, #8]
 800eeae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eeb2:	ee18 0a10 	vmov	r0, s16
 800eeb6:	f000 ffab 	bl	800fe10 <__mcmp>
 800eeba:	463a      	mov	r2, r7
 800eebc:	9003      	str	r0, [sp, #12]
 800eebe:	4631      	mov	r1, r6
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 ffc1 	bl	800fe48 <__mdiff>
 800eec6:	68c2      	ldr	r2, [r0, #12]
 800eec8:	f109 3bff 	add.w	fp, r9, #4294967295
 800eecc:	4605      	mov	r5, r0
 800eece:	bb02      	cbnz	r2, 800ef12 <_dtoa_r+0xa62>
 800eed0:	4601      	mov	r1, r0
 800eed2:	ee18 0a10 	vmov	r0, s16
 800eed6:	f000 ff9b 	bl	800fe10 <__mcmp>
 800eeda:	4602      	mov	r2, r0
 800eedc:	4629      	mov	r1, r5
 800eede:	4620      	mov	r0, r4
 800eee0:	9207      	str	r2, [sp, #28]
 800eee2:	f000 fd09 	bl	800f8f8 <_Bfree>
 800eee6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eeea:	ea43 0102 	orr.w	r1, r3, r2
 800eeee:	9b04      	ldr	r3, [sp, #16]
 800eef0:	430b      	orrs	r3, r1
 800eef2:	464d      	mov	r5, r9
 800eef4:	d10f      	bne.n	800ef16 <_dtoa_r+0xa66>
 800eef6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eefa:	d02a      	beq.n	800ef52 <_dtoa_r+0xaa2>
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	dd02      	ble.n	800ef08 <_dtoa_r+0xa58>
 800ef02:	9b02      	ldr	r3, [sp, #8]
 800ef04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ef08:	f88b a000 	strb.w	sl, [fp]
 800ef0c:	e775      	b.n	800edfa <_dtoa_r+0x94a>
 800ef0e:	4638      	mov	r0, r7
 800ef10:	e7ba      	b.n	800ee88 <_dtoa_r+0x9d8>
 800ef12:	2201      	movs	r2, #1
 800ef14:	e7e2      	b.n	800eedc <_dtoa_r+0xa2c>
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	db04      	blt.n	800ef26 <_dtoa_r+0xa76>
 800ef1c:	9906      	ldr	r1, [sp, #24]
 800ef1e:	430b      	orrs	r3, r1
 800ef20:	9904      	ldr	r1, [sp, #16]
 800ef22:	430b      	orrs	r3, r1
 800ef24:	d122      	bne.n	800ef6c <_dtoa_r+0xabc>
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	ddee      	ble.n	800ef08 <_dtoa_r+0xa58>
 800ef2a:	ee18 1a10 	vmov	r1, s16
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fefd 	bl	800fd30 <__lshift>
 800ef36:	4631      	mov	r1, r6
 800ef38:	ee08 0a10 	vmov	s16, r0
 800ef3c:	f000 ff68 	bl	800fe10 <__mcmp>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	dc03      	bgt.n	800ef4c <_dtoa_r+0xa9c>
 800ef44:	d1e0      	bne.n	800ef08 <_dtoa_r+0xa58>
 800ef46:	f01a 0f01 	tst.w	sl, #1
 800ef4a:	d0dd      	beq.n	800ef08 <_dtoa_r+0xa58>
 800ef4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef50:	d1d7      	bne.n	800ef02 <_dtoa_r+0xa52>
 800ef52:	2339      	movs	r3, #57	; 0x39
 800ef54:	f88b 3000 	strb.w	r3, [fp]
 800ef58:	462b      	mov	r3, r5
 800ef5a:	461d      	mov	r5, r3
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef62:	2a39      	cmp	r2, #57	; 0x39
 800ef64:	d071      	beq.n	800f04a <_dtoa_r+0xb9a>
 800ef66:	3201      	adds	r2, #1
 800ef68:	701a      	strb	r2, [r3, #0]
 800ef6a:	e746      	b.n	800edfa <_dtoa_r+0x94a>
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	dd07      	ble.n	800ef80 <_dtoa_r+0xad0>
 800ef70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef74:	d0ed      	beq.n	800ef52 <_dtoa_r+0xaa2>
 800ef76:	f10a 0301 	add.w	r3, sl, #1
 800ef7a:	f88b 3000 	strb.w	r3, [fp]
 800ef7e:	e73c      	b.n	800edfa <_dtoa_r+0x94a>
 800ef80:	9b05      	ldr	r3, [sp, #20]
 800ef82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ef86:	4599      	cmp	r9, r3
 800ef88:	d047      	beq.n	800f01a <_dtoa_r+0xb6a>
 800ef8a:	ee18 1a10 	vmov	r1, s16
 800ef8e:	2300      	movs	r3, #0
 800ef90:	220a      	movs	r2, #10
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fcd2 	bl	800f93c <__multadd>
 800ef98:	45b8      	cmp	r8, r7
 800ef9a:	ee08 0a10 	vmov	s16, r0
 800ef9e:	f04f 0300 	mov.w	r3, #0
 800efa2:	f04f 020a 	mov.w	r2, #10
 800efa6:	4641      	mov	r1, r8
 800efa8:	4620      	mov	r0, r4
 800efaa:	d106      	bne.n	800efba <_dtoa_r+0xb0a>
 800efac:	f000 fcc6 	bl	800f93c <__multadd>
 800efb0:	4680      	mov	r8, r0
 800efb2:	4607      	mov	r7, r0
 800efb4:	f109 0901 	add.w	r9, r9, #1
 800efb8:	e772      	b.n	800eea0 <_dtoa_r+0x9f0>
 800efba:	f000 fcbf 	bl	800f93c <__multadd>
 800efbe:	4639      	mov	r1, r7
 800efc0:	4680      	mov	r8, r0
 800efc2:	2300      	movs	r3, #0
 800efc4:	220a      	movs	r2, #10
 800efc6:	4620      	mov	r0, r4
 800efc8:	f000 fcb8 	bl	800f93c <__multadd>
 800efcc:	4607      	mov	r7, r0
 800efce:	e7f1      	b.n	800efb4 <_dtoa_r+0xb04>
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	9302      	str	r3, [sp, #8]
 800efd4:	9d01      	ldr	r5, [sp, #4]
 800efd6:	ee18 0a10 	vmov	r0, s16
 800efda:	4631      	mov	r1, r6
 800efdc:	f7ff f9da 	bl	800e394 <quorem>
 800efe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800efe4:	9b01      	ldr	r3, [sp, #4]
 800efe6:	f805 ab01 	strb.w	sl, [r5], #1
 800efea:	1aea      	subs	r2, r5, r3
 800efec:	9b02      	ldr	r3, [sp, #8]
 800efee:	4293      	cmp	r3, r2
 800eff0:	dd09      	ble.n	800f006 <_dtoa_r+0xb56>
 800eff2:	ee18 1a10 	vmov	r1, s16
 800eff6:	2300      	movs	r3, #0
 800eff8:	220a      	movs	r2, #10
 800effa:	4620      	mov	r0, r4
 800effc:	f000 fc9e 	bl	800f93c <__multadd>
 800f000:	ee08 0a10 	vmov	s16, r0
 800f004:	e7e7      	b.n	800efd6 <_dtoa_r+0xb26>
 800f006:	9b02      	ldr	r3, [sp, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	bfc8      	it	gt
 800f00c:	461d      	movgt	r5, r3
 800f00e:	9b01      	ldr	r3, [sp, #4]
 800f010:	bfd8      	it	le
 800f012:	2501      	movle	r5, #1
 800f014:	441d      	add	r5, r3
 800f016:	f04f 0800 	mov.w	r8, #0
 800f01a:	ee18 1a10 	vmov	r1, s16
 800f01e:	2201      	movs	r2, #1
 800f020:	4620      	mov	r0, r4
 800f022:	f000 fe85 	bl	800fd30 <__lshift>
 800f026:	4631      	mov	r1, r6
 800f028:	ee08 0a10 	vmov	s16, r0
 800f02c:	f000 fef0 	bl	800fe10 <__mcmp>
 800f030:	2800      	cmp	r0, #0
 800f032:	dc91      	bgt.n	800ef58 <_dtoa_r+0xaa8>
 800f034:	d102      	bne.n	800f03c <_dtoa_r+0xb8c>
 800f036:	f01a 0f01 	tst.w	sl, #1
 800f03a:	d18d      	bne.n	800ef58 <_dtoa_r+0xaa8>
 800f03c:	462b      	mov	r3, r5
 800f03e:	461d      	mov	r5, r3
 800f040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f044:	2a30      	cmp	r2, #48	; 0x30
 800f046:	d0fa      	beq.n	800f03e <_dtoa_r+0xb8e>
 800f048:	e6d7      	b.n	800edfa <_dtoa_r+0x94a>
 800f04a:	9a01      	ldr	r2, [sp, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d184      	bne.n	800ef5a <_dtoa_r+0xaaa>
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	2331      	movs	r3, #49	; 0x31
 800f058:	7013      	strb	r3, [r2, #0]
 800f05a:	e6ce      	b.n	800edfa <_dtoa_r+0x94a>
 800f05c:	4b09      	ldr	r3, [pc, #36]	; (800f084 <_dtoa_r+0xbd4>)
 800f05e:	f7ff ba95 	b.w	800e58c <_dtoa_r+0xdc>
 800f062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f064:	2b00      	cmp	r3, #0
 800f066:	f47f aa6e 	bne.w	800e546 <_dtoa_r+0x96>
 800f06a:	4b07      	ldr	r3, [pc, #28]	; (800f088 <_dtoa_r+0xbd8>)
 800f06c:	f7ff ba8e 	b.w	800e58c <_dtoa_r+0xdc>
 800f070:	9b02      	ldr	r3, [sp, #8]
 800f072:	2b00      	cmp	r3, #0
 800f074:	dcae      	bgt.n	800efd4 <_dtoa_r+0xb24>
 800f076:	9b06      	ldr	r3, [sp, #24]
 800f078:	2b02      	cmp	r3, #2
 800f07a:	f73f aea8 	bgt.w	800edce <_dtoa_r+0x91e>
 800f07e:	e7a9      	b.n	800efd4 <_dtoa_r+0xb24>
 800f080:	08011e44 	.word	0x08011e44
 800f084:	080120a1 	.word	0x080120a1
 800f088:	08011dc5 	.word	0x08011dc5

0800f08c <rshift>:
 800f08c:	6903      	ldr	r3, [r0, #16]
 800f08e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f096:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f09a:	f100 0414 	add.w	r4, r0, #20
 800f09e:	dd45      	ble.n	800f12c <rshift+0xa0>
 800f0a0:	f011 011f 	ands.w	r1, r1, #31
 800f0a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0ac:	d10c      	bne.n	800f0c8 <rshift+0x3c>
 800f0ae:	f100 0710 	add.w	r7, r0, #16
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	42b1      	cmp	r1, r6
 800f0b6:	d334      	bcc.n	800f122 <rshift+0x96>
 800f0b8:	1a9b      	subs	r3, r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	1eea      	subs	r2, r5, #3
 800f0be:	4296      	cmp	r6, r2
 800f0c0:	bf38      	it	cc
 800f0c2:	2300      	movcc	r3, #0
 800f0c4:	4423      	add	r3, r4
 800f0c6:	e015      	b.n	800f0f4 <rshift+0x68>
 800f0c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f0cc:	f1c1 0820 	rsb	r8, r1, #32
 800f0d0:	40cf      	lsrs	r7, r1
 800f0d2:	f105 0e04 	add.w	lr, r5, #4
 800f0d6:	46a1      	mov	r9, r4
 800f0d8:	4576      	cmp	r6, lr
 800f0da:	46f4      	mov	ip, lr
 800f0dc:	d815      	bhi.n	800f10a <rshift+0x7e>
 800f0de:	1a9a      	subs	r2, r3, r2
 800f0e0:	0092      	lsls	r2, r2, #2
 800f0e2:	3a04      	subs	r2, #4
 800f0e4:	3501      	adds	r5, #1
 800f0e6:	42ae      	cmp	r6, r5
 800f0e8:	bf38      	it	cc
 800f0ea:	2200      	movcc	r2, #0
 800f0ec:	18a3      	adds	r3, r4, r2
 800f0ee:	50a7      	str	r7, [r4, r2]
 800f0f0:	b107      	cbz	r7, 800f0f4 <rshift+0x68>
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	1b1a      	subs	r2, r3, r4
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f0fc:	bf08      	it	eq
 800f0fe:	2300      	moveq	r3, #0
 800f100:	6102      	str	r2, [r0, #16]
 800f102:	bf08      	it	eq
 800f104:	6143      	streq	r3, [r0, #20]
 800f106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f10a:	f8dc c000 	ldr.w	ip, [ip]
 800f10e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f112:	ea4c 0707 	orr.w	r7, ip, r7
 800f116:	f849 7b04 	str.w	r7, [r9], #4
 800f11a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f11e:	40cf      	lsrs	r7, r1
 800f120:	e7da      	b.n	800f0d8 <rshift+0x4c>
 800f122:	f851 cb04 	ldr.w	ip, [r1], #4
 800f126:	f847 cf04 	str.w	ip, [r7, #4]!
 800f12a:	e7c3      	b.n	800f0b4 <rshift+0x28>
 800f12c:	4623      	mov	r3, r4
 800f12e:	e7e1      	b.n	800f0f4 <rshift+0x68>

0800f130 <__hexdig_fun>:
 800f130:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f134:	2b09      	cmp	r3, #9
 800f136:	d802      	bhi.n	800f13e <__hexdig_fun+0xe>
 800f138:	3820      	subs	r0, #32
 800f13a:	b2c0      	uxtb	r0, r0
 800f13c:	4770      	bx	lr
 800f13e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f142:	2b05      	cmp	r3, #5
 800f144:	d801      	bhi.n	800f14a <__hexdig_fun+0x1a>
 800f146:	3847      	subs	r0, #71	; 0x47
 800f148:	e7f7      	b.n	800f13a <__hexdig_fun+0xa>
 800f14a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f14e:	2b05      	cmp	r3, #5
 800f150:	d801      	bhi.n	800f156 <__hexdig_fun+0x26>
 800f152:	3827      	subs	r0, #39	; 0x27
 800f154:	e7f1      	b.n	800f13a <__hexdig_fun+0xa>
 800f156:	2000      	movs	r0, #0
 800f158:	4770      	bx	lr
	...

0800f15c <__gethex>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	ed2d 8b02 	vpush	{d8}
 800f164:	b089      	sub	sp, #36	; 0x24
 800f166:	ee08 0a10 	vmov	s16, r0
 800f16a:	9304      	str	r3, [sp, #16]
 800f16c:	4bb4      	ldr	r3, [pc, #720]	; (800f440 <__gethex+0x2e4>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	468b      	mov	fp, r1
 800f176:	4690      	mov	r8, r2
 800f178:	f7f1 f834 	bl	80001e4 <strlen>
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	f8db 2000 	ldr.w	r2, [fp]
 800f182:	4403      	add	r3, r0
 800f184:	4682      	mov	sl, r0
 800f186:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f18a:	9305      	str	r3, [sp, #20]
 800f18c:	1c93      	adds	r3, r2, #2
 800f18e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f192:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f196:	32fe      	adds	r2, #254	; 0xfe
 800f198:	18d1      	adds	r1, r2, r3
 800f19a:	461f      	mov	r7, r3
 800f19c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f1a0:	9100      	str	r1, [sp, #0]
 800f1a2:	2830      	cmp	r0, #48	; 0x30
 800f1a4:	d0f8      	beq.n	800f198 <__gethex+0x3c>
 800f1a6:	f7ff ffc3 	bl	800f130 <__hexdig_fun>
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d13a      	bne.n	800f226 <__gethex+0xca>
 800f1b0:	9901      	ldr	r1, [sp, #4]
 800f1b2:	4652      	mov	r2, sl
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f001 fdfb 	bl	8010db0 <strncmp>
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d168      	bne.n	800f292 <__gethex+0x136>
 800f1c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f1c4:	eb07 060a 	add.w	r6, r7, sl
 800f1c8:	f7ff ffb2 	bl	800f130 <__hexdig_fun>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d062      	beq.n	800f296 <__gethex+0x13a>
 800f1d0:	4633      	mov	r3, r6
 800f1d2:	7818      	ldrb	r0, [r3, #0]
 800f1d4:	2830      	cmp	r0, #48	; 0x30
 800f1d6:	461f      	mov	r7, r3
 800f1d8:	f103 0301 	add.w	r3, r3, #1
 800f1dc:	d0f9      	beq.n	800f1d2 <__gethex+0x76>
 800f1de:	f7ff ffa7 	bl	800f130 <__hexdig_fun>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	fab0 f480 	clz	r4, r0
 800f1e8:	0964      	lsrs	r4, r4, #5
 800f1ea:	4635      	mov	r5, r6
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	463a      	mov	r2, r7
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	3201      	adds	r2, #1
 800f1f4:	7830      	ldrb	r0, [r6, #0]
 800f1f6:	f7ff ff9b 	bl	800f130 <__hexdig_fun>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d1f8      	bne.n	800f1f0 <__gethex+0x94>
 800f1fe:	9901      	ldr	r1, [sp, #4]
 800f200:	4652      	mov	r2, sl
 800f202:	4630      	mov	r0, r6
 800f204:	f001 fdd4 	bl	8010db0 <strncmp>
 800f208:	b980      	cbnz	r0, 800f22c <__gethex+0xd0>
 800f20a:	b94d      	cbnz	r5, 800f220 <__gethex+0xc4>
 800f20c:	eb06 050a 	add.w	r5, r6, sl
 800f210:	462a      	mov	r2, r5
 800f212:	4616      	mov	r6, r2
 800f214:	3201      	adds	r2, #1
 800f216:	7830      	ldrb	r0, [r6, #0]
 800f218:	f7ff ff8a 	bl	800f130 <__hexdig_fun>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d1f8      	bne.n	800f212 <__gethex+0xb6>
 800f220:	1bad      	subs	r5, r5, r6
 800f222:	00ad      	lsls	r5, r5, #2
 800f224:	e004      	b.n	800f230 <__gethex+0xd4>
 800f226:	2400      	movs	r4, #0
 800f228:	4625      	mov	r5, r4
 800f22a:	e7e0      	b.n	800f1ee <__gethex+0x92>
 800f22c:	2d00      	cmp	r5, #0
 800f22e:	d1f7      	bne.n	800f220 <__gethex+0xc4>
 800f230:	7833      	ldrb	r3, [r6, #0]
 800f232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f236:	2b50      	cmp	r3, #80	; 0x50
 800f238:	d13b      	bne.n	800f2b2 <__gethex+0x156>
 800f23a:	7873      	ldrb	r3, [r6, #1]
 800f23c:	2b2b      	cmp	r3, #43	; 0x2b
 800f23e:	d02c      	beq.n	800f29a <__gethex+0x13e>
 800f240:	2b2d      	cmp	r3, #45	; 0x2d
 800f242:	d02e      	beq.n	800f2a2 <__gethex+0x146>
 800f244:	1c71      	adds	r1, r6, #1
 800f246:	f04f 0900 	mov.w	r9, #0
 800f24a:	7808      	ldrb	r0, [r1, #0]
 800f24c:	f7ff ff70 	bl	800f130 <__hexdig_fun>
 800f250:	1e43      	subs	r3, r0, #1
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2b18      	cmp	r3, #24
 800f256:	d82c      	bhi.n	800f2b2 <__gethex+0x156>
 800f258:	f1a0 0210 	sub.w	r2, r0, #16
 800f25c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f260:	f7ff ff66 	bl	800f130 <__hexdig_fun>
 800f264:	1e43      	subs	r3, r0, #1
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b18      	cmp	r3, #24
 800f26a:	d91d      	bls.n	800f2a8 <__gethex+0x14c>
 800f26c:	f1b9 0f00 	cmp.w	r9, #0
 800f270:	d000      	beq.n	800f274 <__gethex+0x118>
 800f272:	4252      	negs	r2, r2
 800f274:	4415      	add	r5, r2
 800f276:	f8cb 1000 	str.w	r1, [fp]
 800f27a:	b1e4      	cbz	r4, 800f2b6 <__gethex+0x15a>
 800f27c:	9b00      	ldr	r3, [sp, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	bf14      	ite	ne
 800f282:	2700      	movne	r7, #0
 800f284:	2706      	moveq	r7, #6
 800f286:	4638      	mov	r0, r7
 800f288:	b009      	add	sp, #36	; 0x24
 800f28a:	ecbd 8b02 	vpop	{d8}
 800f28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f292:	463e      	mov	r6, r7
 800f294:	4625      	mov	r5, r4
 800f296:	2401      	movs	r4, #1
 800f298:	e7ca      	b.n	800f230 <__gethex+0xd4>
 800f29a:	f04f 0900 	mov.w	r9, #0
 800f29e:	1cb1      	adds	r1, r6, #2
 800f2a0:	e7d3      	b.n	800f24a <__gethex+0xee>
 800f2a2:	f04f 0901 	mov.w	r9, #1
 800f2a6:	e7fa      	b.n	800f29e <__gethex+0x142>
 800f2a8:	230a      	movs	r3, #10
 800f2aa:	fb03 0202 	mla	r2, r3, r2, r0
 800f2ae:	3a10      	subs	r2, #16
 800f2b0:	e7d4      	b.n	800f25c <__gethex+0x100>
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	e7df      	b.n	800f276 <__gethex+0x11a>
 800f2b6:	1bf3      	subs	r3, r6, r7
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	2b07      	cmp	r3, #7
 800f2be:	dc0b      	bgt.n	800f2d8 <__gethex+0x17c>
 800f2c0:	ee18 0a10 	vmov	r0, s16
 800f2c4:	f000 fad8 	bl	800f878 <_Balloc>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	b940      	cbnz	r0, 800f2de <__gethex+0x182>
 800f2cc:	4b5d      	ldr	r3, [pc, #372]	; (800f444 <__gethex+0x2e8>)
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	21de      	movs	r1, #222	; 0xde
 800f2d2:	485d      	ldr	r0, [pc, #372]	; (800f448 <__gethex+0x2ec>)
 800f2d4:	f001 fdc8 	bl	8010e68 <__assert_func>
 800f2d8:	3101      	adds	r1, #1
 800f2da:	105b      	asrs	r3, r3, #1
 800f2dc:	e7ee      	b.n	800f2bc <__gethex+0x160>
 800f2de:	f100 0914 	add.w	r9, r0, #20
 800f2e2:	f04f 0b00 	mov.w	fp, #0
 800f2e6:	f1ca 0301 	rsb	r3, sl, #1
 800f2ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800f2ee:	f8cd b000 	str.w	fp, [sp]
 800f2f2:	9306      	str	r3, [sp, #24]
 800f2f4:	42b7      	cmp	r7, r6
 800f2f6:	d340      	bcc.n	800f37a <__gethex+0x21e>
 800f2f8:	9802      	ldr	r0, [sp, #8]
 800f2fa:	9b00      	ldr	r3, [sp, #0]
 800f2fc:	f840 3b04 	str.w	r3, [r0], #4
 800f300:	eba0 0009 	sub.w	r0, r0, r9
 800f304:	1080      	asrs	r0, r0, #2
 800f306:	0146      	lsls	r6, r0, #5
 800f308:	6120      	str	r0, [r4, #16]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fba6 	bl	800fa5c <__hi0bits>
 800f310:	1a30      	subs	r0, r6, r0
 800f312:	f8d8 6000 	ldr.w	r6, [r8]
 800f316:	42b0      	cmp	r0, r6
 800f318:	dd63      	ble.n	800f3e2 <__gethex+0x286>
 800f31a:	1b87      	subs	r7, r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	4620      	mov	r0, r4
 800f320:	f000 ff4a 	bl	80101b8 <__any_on>
 800f324:	4682      	mov	sl, r0
 800f326:	b1a8      	cbz	r0, 800f354 <__gethex+0x1f8>
 800f328:	1e7b      	subs	r3, r7, #1
 800f32a:	1159      	asrs	r1, r3, #5
 800f32c:	f003 021f 	and.w	r2, r3, #31
 800f330:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f334:	f04f 0a01 	mov.w	sl, #1
 800f338:	fa0a f202 	lsl.w	r2, sl, r2
 800f33c:	420a      	tst	r2, r1
 800f33e:	d009      	beq.n	800f354 <__gethex+0x1f8>
 800f340:	4553      	cmp	r3, sl
 800f342:	dd05      	ble.n	800f350 <__gethex+0x1f4>
 800f344:	1eb9      	subs	r1, r7, #2
 800f346:	4620      	mov	r0, r4
 800f348:	f000 ff36 	bl	80101b8 <__any_on>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d145      	bne.n	800f3dc <__gethex+0x280>
 800f350:	f04f 0a02 	mov.w	sl, #2
 800f354:	4639      	mov	r1, r7
 800f356:	4620      	mov	r0, r4
 800f358:	f7ff fe98 	bl	800f08c <rshift>
 800f35c:	443d      	add	r5, r7
 800f35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f362:	42ab      	cmp	r3, r5
 800f364:	da4c      	bge.n	800f400 <__gethex+0x2a4>
 800f366:	ee18 0a10 	vmov	r0, s16
 800f36a:	4621      	mov	r1, r4
 800f36c:	f000 fac4 	bl	800f8f8 <_Bfree>
 800f370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f372:	2300      	movs	r3, #0
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	27a3      	movs	r7, #163	; 0xa3
 800f378:	e785      	b.n	800f286 <__gethex+0x12a>
 800f37a:	1e73      	subs	r3, r6, #1
 800f37c:	9a05      	ldr	r2, [sp, #20]
 800f37e:	9303      	str	r3, [sp, #12]
 800f380:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f384:	4293      	cmp	r3, r2
 800f386:	d019      	beq.n	800f3bc <__gethex+0x260>
 800f388:	f1bb 0f20 	cmp.w	fp, #32
 800f38c:	d107      	bne.n	800f39e <__gethex+0x242>
 800f38e:	9b02      	ldr	r3, [sp, #8]
 800f390:	9a00      	ldr	r2, [sp, #0]
 800f392:	f843 2b04 	str.w	r2, [r3], #4
 800f396:	9302      	str	r3, [sp, #8]
 800f398:	2300      	movs	r3, #0
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	469b      	mov	fp, r3
 800f39e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f3a2:	f7ff fec5 	bl	800f130 <__hexdig_fun>
 800f3a6:	9b00      	ldr	r3, [sp, #0]
 800f3a8:	f000 000f 	and.w	r0, r0, #15
 800f3ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800f3b0:	4303      	orrs	r3, r0
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	f10b 0b04 	add.w	fp, fp, #4
 800f3b8:	9b03      	ldr	r3, [sp, #12]
 800f3ba:	e00d      	b.n	800f3d8 <__gethex+0x27c>
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	9a06      	ldr	r2, [sp, #24]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	42bb      	cmp	r3, r7
 800f3c4:	d3e0      	bcc.n	800f388 <__gethex+0x22c>
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	9901      	ldr	r1, [sp, #4]
 800f3ca:	9307      	str	r3, [sp, #28]
 800f3cc:	4652      	mov	r2, sl
 800f3ce:	f001 fcef 	bl	8010db0 <strncmp>
 800f3d2:	9b07      	ldr	r3, [sp, #28]
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d1d7      	bne.n	800f388 <__gethex+0x22c>
 800f3d8:	461e      	mov	r6, r3
 800f3da:	e78b      	b.n	800f2f4 <__gethex+0x198>
 800f3dc:	f04f 0a03 	mov.w	sl, #3
 800f3e0:	e7b8      	b.n	800f354 <__gethex+0x1f8>
 800f3e2:	da0a      	bge.n	800f3fa <__gethex+0x29e>
 800f3e4:	1a37      	subs	r7, r6, r0
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	ee18 0a10 	vmov	r0, s16
 800f3ec:	463a      	mov	r2, r7
 800f3ee:	f000 fc9f 	bl	800fd30 <__lshift>
 800f3f2:	1bed      	subs	r5, r5, r7
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	f100 0914 	add.w	r9, r0, #20
 800f3fa:	f04f 0a00 	mov.w	sl, #0
 800f3fe:	e7ae      	b.n	800f35e <__gethex+0x202>
 800f400:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f404:	42a8      	cmp	r0, r5
 800f406:	dd72      	ble.n	800f4ee <__gethex+0x392>
 800f408:	1b45      	subs	r5, r0, r5
 800f40a:	42ae      	cmp	r6, r5
 800f40c:	dc36      	bgt.n	800f47c <__gethex+0x320>
 800f40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f412:	2b02      	cmp	r3, #2
 800f414:	d02a      	beq.n	800f46c <__gethex+0x310>
 800f416:	2b03      	cmp	r3, #3
 800f418:	d02c      	beq.n	800f474 <__gethex+0x318>
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d11c      	bne.n	800f458 <__gethex+0x2fc>
 800f41e:	42ae      	cmp	r6, r5
 800f420:	d11a      	bne.n	800f458 <__gethex+0x2fc>
 800f422:	2e01      	cmp	r6, #1
 800f424:	d112      	bne.n	800f44c <__gethex+0x2f0>
 800f426:	9a04      	ldr	r2, [sp, #16]
 800f428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f42c:	6013      	str	r3, [r2, #0]
 800f42e:	2301      	movs	r3, #1
 800f430:	6123      	str	r3, [r4, #16]
 800f432:	f8c9 3000 	str.w	r3, [r9]
 800f436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f438:	2762      	movs	r7, #98	; 0x62
 800f43a:	601c      	str	r4, [r3, #0]
 800f43c:	e723      	b.n	800f286 <__gethex+0x12a>
 800f43e:	bf00      	nop
 800f440:	08011ebc 	.word	0x08011ebc
 800f444:	08011e44 	.word	0x08011e44
 800f448:	08011e55 	.word	0x08011e55
 800f44c:	1e71      	subs	r1, r6, #1
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 feb2 	bl	80101b8 <__any_on>
 800f454:	2800      	cmp	r0, #0
 800f456:	d1e6      	bne.n	800f426 <__gethex+0x2ca>
 800f458:	ee18 0a10 	vmov	r0, s16
 800f45c:	4621      	mov	r1, r4
 800f45e:	f000 fa4b 	bl	800f8f8 <_Bfree>
 800f462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f464:	2300      	movs	r3, #0
 800f466:	6013      	str	r3, [r2, #0]
 800f468:	2750      	movs	r7, #80	; 0x50
 800f46a:	e70c      	b.n	800f286 <__gethex+0x12a>
 800f46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1f2      	bne.n	800f458 <__gethex+0x2fc>
 800f472:	e7d8      	b.n	800f426 <__gethex+0x2ca>
 800f474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1d5      	bne.n	800f426 <__gethex+0x2ca>
 800f47a:	e7ed      	b.n	800f458 <__gethex+0x2fc>
 800f47c:	1e6f      	subs	r7, r5, #1
 800f47e:	f1ba 0f00 	cmp.w	sl, #0
 800f482:	d131      	bne.n	800f4e8 <__gethex+0x38c>
 800f484:	b127      	cbz	r7, 800f490 <__gethex+0x334>
 800f486:	4639      	mov	r1, r7
 800f488:	4620      	mov	r0, r4
 800f48a:	f000 fe95 	bl	80101b8 <__any_on>
 800f48e:	4682      	mov	sl, r0
 800f490:	117b      	asrs	r3, r7, #5
 800f492:	2101      	movs	r1, #1
 800f494:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f498:	f007 071f 	and.w	r7, r7, #31
 800f49c:	fa01 f707 	lsl.w	r7, r1, r7
 800f4a0:	421f      	tst	r7, r3
 800f4a2:	4629      	mov	r1, r5
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	bf18      	it	ne
 800f4a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f4ac:	1b76      	subs	r6, r6, r5
 800f4ae:	f7ff fded 	bl	800f08c <rshift>
 800f4b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f4b6:	2702      	movs	r7, #2
 800f4b8:	f1ba 0f00 	cmp.w	sl, #0
 800f4bc:	d048      	beq.n	800f550 <__gethex+0x3f4>
 800f4be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d015      	beq.n	800f4f2 <__gethex+0x396>
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d017      	beq.n	800f4fa <__gethex+0x39e>
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d109      	bne.n	800f4e2 <__gethex+0x386>
 800f4ce:	f01a 0f02 	tst.w	sl, #2
 800f4d2:	d006      	beq.n	800f4e2 <__gethex+0x386>
 800f4d4:	f8d9 0000 	ldr.w	r0, [r9]
 800f4d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f4dc:	f01a 0f01 	tst.w	sl, #1
 800f4e0:	d10e      	bne.n	800f500 <__gethex+0x3a4>
 800f4e2:	f047 0710 	orr.w	r7, r7, #16
 800f4e6:	e033      	b.n	800f550 <__gethex+0x3f4>
 800f4e8:	f04f 0a01 	mov.w	sl, #1
 800f4ec:	e7d0      	b.n	800f490 <__gethex+0x334>
 800f4ee:	2701      	movs	r7, #1
 800f4f0:	e7e2      	b.n	800f4b8 <__gethex+0x35c>
 800f4f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4f4:	f1c3 0301 	rsb	r3, r3, #1
 800f4f8:	9315      	str	r3, [sp, #84]	; 0x54
 800f4fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d0f0      	beq.n	800f4e2 <__gethex+0x386>
 800f500:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f504:	f104 0314 	add.w	r3, r4, #20
 800f508:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f50c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f510:	f04f 0c00 	mov.w	ip, #0
 800f514:	4618      	mov	r0, r3
 800f516:	f853 2b04 	ldr.w	r2, [r3], #4
 800f51a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f51e:	d01c      	beq.n	800f55a <__gethex+0x3fe>
 800f520:	3201      	adds	r2, #1
 800f522:	6002      	str	r2, [r0, #0]
 800f524:	2f02      	cmp	r7, #2
 800f526:	f104 0314 	add.w	r3, r4, #20
 800f52a:	d13f      	bne.n	800f5ac <__gethex+0x450>
 800f52c:	f8d8 2000 	ldr.w	r2, [r8]
 800f530:	3a01      	subs	r2, #1
 800f532:	42b2      	cmp	r2, r6
 800f534:	d10a      	bne.n	800f54c <__gethex+0x3f0>
 800f536:	1171      	asrs	r1, r6, #5
 800f538:	2201      	movs	r2, #1
 800f53a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f53e:	f006 061f 	and.w	r6, r6, #31
 800f542:	fa02 f606 	lsl.w	r6, r2, r6
 800f546:	421e      	tst	r6, r3
 800f548:	bf18      	it	ne
 800f54a:	4617      	movne	r7, r2
 800f54c:	f047 0720 	orr.w	r7, r7, #32
 800f550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f552:	601c      	str	r4, [r3, #0]
 800f554:	9b04      	ldr	r3, [sp, #16]
 800f556:	601d      	str	r5, [r3, #0]
 800f558:	e695      	b.n	800f286 <__gethex+0x12a>
 800f55a:	4299      	cmp	r1, r3
 800f55c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f560:	d8d8      	bhi.n	800f514 <__gethex+0x3b8>
 800f562:	68a3      	ldr	r3, [r4, #8]
 800f564:	459b      	cmp	fp, r3
 800f566:	db19      	blt.n	800f59c <__gethex+0x440>
 800f568:	6861      	ldr	r1, [r4, #4]
 800f56a:	ee18 0a10 	vmov	r0, s16
 800f56e:	3101      	adds	r1, #1
 800f570:	f000 f982 	bl	800f878 <_Balloc>
 800f574:	4681      	mov	r9, r0
 800f576:	b918      	cbnz	r0, 800f580 <__gethex+0x424>
 800f578:	4b1a      	ldr	r3, [pc, #104]	; (800f5e4 <__gethex+0x488>)
 800f57a:	4602      	mov	r2, r0
 800f57c:	2184      	movs	r1, #132	; 0x84
 800f57e:	e6a8      	b.n	800f2d2 <__gethex+0x176>
 800f580:	6922      	ldr	r2, [r4, #16]
 800f582:	3202      	adds	r2, #2
 800f584:	f104 010c 	add.w	r1, r4, #12
 800f588:	0092      	lsls	r2, r2, #2
 800f58a:	300c      	adds	r0, #12
 800f58c:	f7fc fb98 	bl	800bcc0 <memcpy>
 800f590:	4621      	mov	r1, r4
 800f592:	ee18 0a10 	vmov	r0, s16
 800f596:	f000 f9af 	bl	800f8f8 <_Bfree>
 800f59a:	464c      	mov	r4, r9
 800f59c:	6923      	ldr	r3, [r4, #16]
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5a4:	6122      	str	r2, [r4, #16]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	615a      	str	r2, [r3, #20]
 800f5aa:	e7bb      	b.n	800f524 <__gethex+0x3c8>
 800f5ac:	6922      	ldr	r2, [r4, #16]
 800f5ae:	455a      	cmp	r2, fp
 800f5b0:	dd0b      	ble.n	800f5ca <__gethex+0x46e>
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f7ff fd69 	bl	800f08c <rshift>
 800f5ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5be:	3501      	adds	r5, #1
 800f5c0:	42ab      	cmp	r3, r5
 800f5c2:	f6ff aed0 	blt.w	800f366 <__gethex+0x20a>
 800f5c6:	2701      	movs	r7, #1
 800f5c8:	e7c0      	b.n	800f54c <__gethex+0x3f0>
 800f5ca:	f016 061f 	ands.w	r6, r6, #31
 800f5ce:	d0fa      	beq.n	800f5c6 <__gethex+0x46a>
 800f5d0:	4453      	add	r3, sl
 800f5d2:	f1c6 0620 	rsb	r6, r6, #32
 800f5d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f5da:	f000 fa3f 	bl	800fa5c <__hi0bits>
 800f5de:	42b0      	cmp	r0, r6
 800f5e0:	dbe7      	blt.n	800f5b2 <__gethex+0x456>
 800f5e2:	e7f0      	b.n	800f5c6 <__gethex+0x46a>
 800f5e4:	08011e44 	.word	0x08011e44

0800f5e8 <L_shift>:
 800f5e8:	f1c2 0208 	rsb	r2, r2, #8
 800f5ec:	0092      	lsls	r2, r2, #2
 800f5ee:	b570      	push	{r4, r5, r6, lr}
 800f5f0:	f1c2 0620 	rsb	r6, r2, #32
 800f5f4:	6843      	ldr	r3, [r0, #4]
 800f5f6:	6804      	ldr	r4, [r0, #0]
 800f5f8:	fa03 f506 	lsl.w	r5, r3, r6
 800f5fc:	432c      	orrs	r4, r5
 800f5fe:	40d3      	lsrs	r3, r2
 800f600:	6004      	str	r4, [r0, #0]
 800f602:	f840 3f04 	str.w	r3, [r0, #4]!
 800f606:	4288      	cmp	r0, r1
 800f608:	d3f4      	bcc.n	800f5f4 <L_shift+0xc>
 800f60a:	bd70      	pop	{r4, r5, r6, pc}

0800f60c <__match>:
 800f60c:	b530      	push	{r4, r5, lr}
 800f60e:	6803      	ldr	r3, [r0, #0]
 800f610:	3301      	adds	r3, #1
 800f612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f616:	b914      	cbnz	r4, 800f61e <__match+0x12>
 800f618:	6003      	str	r3, [r0, #0]
 800f61a:	2001      	movs	r0, #1
 800f61c:	bd30      	pop	{r4, r5, pc}
 800f61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f622:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f626:	2d19      	cmp	r5, #25
 800f628:	bf98      	it	ls
 800f62a:	3220      	addls	r2, #32
 800f62c:	42a2      	cmp	r2, r4
 800f62e:	d0f0      	beq.n	800f612 <__match+0x6>
 800f630:	2000      	movs	r0, #0
 800f632:	e7f3      	b.n	800f61c <__match+0x10>

0800f634 <__hexnan>:
 800f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	680b      	ldr	r3, [r1, #0]
 800f63a:	115e      	asrs	r6, r3, #5
 800f63c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f640:	f013 031f 	ands.w	r3, r3, #31
 800f644:	b087      	sub	sp, #28
 800f646:	bf18      	it	ne
 800f648:	3604      	addne	r6, #4
 800f64a:	2500      	movs	r5, #0
 800f64c:	1f37      	subs	r7, r6, #4
 800f64e:	4690      	mov	r8, r2
 800f650:	6802      	ldr	r2, [r0, #0]
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	4682      	mov	sl, r0
 800f656:	f846 5c04 	str.w	r5, [r6, #-4]
 800f65a:	46b9      	mov	r9, r7
 800f65c:	463c      	mov	r4, r7
 800f65e:	9502      	str	r5, [sp, #8]
 800f660:	46ab      	mov	fp, r5
 800f662:	7851      	ldrb	r1, [r2, #1]
 800f664:	1c53      	adds	r3, r2, #1
 800f666:	9303      	str	r3, [sp, #12]
 800f668:	b341      	cbz	r1, 800f6bc <__hexnan+0x88>
 800f66a:	4608      	mov	r0, r1
 800f66c:	9205      	str	r2, [sp, #20]
 800f66e:	9104      	str	r1, [sp, #16]
 800f670:	f7ff fd5e 	bl	800f130 <__hexdig_fun>
 800f674:	2800      	cmp	r0, #0
 800f676:	d14f      	bne.n	800f718 <__hexnan+0xe4>
 800f678:	9904      	ldr	r1, [sp, #16]
 800f67a:	9a05      	ldr	r2, [sp, #20]
 800f67c:	2920      	cmp	r1, #32
 800f67e:	d818      	bhi.n	800f6b2 <__hexnan+0x7e>
 800f680:	9b02      	ldr	r3, [sp, #8]
 800f682:	459b      	cmp	fp, r3
 800f684:	dd13      	ble.n	800f6ae <__hexnan+0x7a>
 800f686:	454c      	cmp	r4, r9
 800f688:	d206      	bcs.n	800f698 <__hexnan+0x64>
 800f68a:	2d07      	cmp	r5, #7
 800f68c:	dc04      	bgt.n	800f698 <__hexnan+0x64>
 800f68e:	462a      	mov	r2, r5
 800f690:	4649      	mov	r1, r9
 800f692:	4620      	mov	r0, r4
 800f694:	f7ff ffa8 	bl	800f5e8 <L_shift>
 800f698:	4544      	cmp	r4, r8
 800f69a:	d950      	bls.n	800f73e <__hexnan+0x10a>
 800f69c:	2300      	movs	r3, #0
 800f69e:	f1a4 0904 	sub.w	r9, r4, #4
 800f6a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6a6:	f8cd b008 	str.w	fp, [sp, #8]
 800f6aa:	464c      	mov	r4, r9
 800f6ac:	461d      	mov	r5, r3
 800f6ae:	9a03      	ldr	r2, [sp, #12]
 800f6b0:	e7d7      	b.n	800f662 <__hexnan+0x2e>
 800f6b2:	2929      	cmp	r1, #41	; 0x29
 800f6b4:	d156      	bne.n	800f764 <__hexnan+0x130>
 800f6b6:	3202      	adds	r2, #2
 800f6b8:	f8ca 2000 	str.w	r2, [sl]
 800f6bc:	f1bb 0f00 	cmp.w	fp, #0
 800f6c0:	d050      	beq.n	800f764 <__hexnan+0x130>
 800f6c2:	454c      	cmp	r4, r9
 800f6c4:	d206      	bcs.n	800f6d4 <__hexnan+0xa0>
 800f6c6:	2d07      	cmp	r5, #7
 800f6c8:	dc04      	bgt.n	800f6d4 <__hexnan+0xa0>
 800f6ca:	462a      	mov	r2, r5
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f7ff ff8a 	bl	800f5e8 <L_shift>
 800f6d4:	4544      	cmp	r4, r8
 800f6d6:	d934      	bls.n	800f742 <__hexnan+0x10e>
 800f6d8:	f1a8 0204 	sub.w	r2, r8, #4
 800f6dc:	4623      	mov	r3, r4
 800f6de:	f853 1b04 	ldr.w	r1, [r3], #4
 800f6e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f6e6:	429f      	cmp	r7, r3
 800f6e8:	d2f9      	bcs.n	800f6de <__hexnan+0xaa>
 800f6ea:	1b3b      	subs	r3, r7, r4
 800f6ec:	f023 0303 	bic.w	r3, r3, #3
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	3401      	adds	r4, #1
 800f6f4:	3e03      	subs	r6, #3
 800f6f6:	42b4      	cmp	r4, r6
 800f6f8:	bf88      	it	hi
 800f6fa:	2304      	movhi	r3, #4
 800f6fc:	4443      	add	r3, r8
 800f6fe:	2200      	movs	r2, #0
 800f700:	f843 2b04 	str.w	r2, [r3], #4
 800f704:	429f      	cmp	r7, r3
 800f706:	d2fb      	bcs.n	800f700 <__hexnan+0xcc>
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	b91b      	cbnz	r3, 800f714 <__hexnan+0xe0>
 800f70c:	4547      	cmp	r7, r8
 800f70e:	d127      	bne.n	800f760 <__hexnan+0x12c>
 800f710:	2301      	movs	r3, #1
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	2005      	movs	r0, #5
 800f716:	e026      	b.n	800f766 <__hexnan+0x132>
 800f718:	3501      	adds	r5, #1
 800f71a:	2d08      	cmp	r5, #8
 800f71c:	f10b 0b01 	add.w	fp, fp, #1
 800f720:	dd06      	ble.n	800f730 <__hexnan+0xfc>
 800f722:	4544      	cmp	r4, r8
 800f724:	d9c3      	bls.n	800f6ae <__hexnan+0x7a>
 800f726:	2300      	movs	r3, #0
 800f728:	f844 3c04 	str.w	r3, [r4, #-4]
 800f72c:	2501      	movs	r5, #1
 800f72e:	3c04      	subs	r4, #4
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	f000 000f 	and.w	r0, r0, #15
 800f736:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f73a:	6022      	str	r2, [r4, #0]
 800f73c:	e7b7      	b.n	800f6ae <__hexnan+0x7a>
 800f73e:	2508      	movs	r5, #8
 800f740:	e7b5      	b.n	800f6ae <__hexnan+0x7a>
 800f742:	9b01      	ldr	r3, [sp, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0df      	beq.n	800f708 <__hexnan+0xd4>
 800f748:	f04f 32ff 	mov.w	r2, #4294967295
 800f74c:	f1c3 0320 	rsb	r3, r3, #32
 800f750:	fa22 f303 	lsr.w	r3, r2, r3
 800f754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f758:	401a      	ands	r2, r3
 800f75a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f75e:	e7d3      	b.n	800f708 <__hexnan+0xd4>
 800f760:	3f04      	subs	r7, #4
 800f762:	e7d1      	b.n	800f708 <__hexnan+0xd4>
 800f764:	2004      	movs	r0, #4
 800f766:	b007      	add	sp, #28
 800f768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f76c <_findenv_r>:
 800f76c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f770:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f7e0 <_findenv_r+0x74>
 800f774:	4607      	mov	r7, r0
 800f776:	4689      	mov	r9, r1
 800f778:	4616      	mov	r6, r2
 800f77a:	f001 fb93 	bl	8010ea4 <__env_lock>
 800f77e:	f8da 4000 	ldr.w	r4, [sl]
 800f782:	b134      	cbz	r4, 800f792 <_findenv_r+0x26>
 800f784:	464b      	mov	r3, r9
 800f786:	4698      	mov	r8, r3
 800f788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f78c:	b13a      	cbz	r2, 800f79e <_findenv_r+0x32>
 800f78e:	2a3d      	cmp	r2, #61	; 0x3d
 800f790:	d1f9      	bne.n	800f786 <_findenv_r+0x1a>
 800f792:	4638      	mov	r0, r7
 800f794:	f001 fb8c 	bl	8010eb0 <__env_unlock>
 800f798:	2000      	movs	r0, #0
 800f79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f79e:	eba8 0809 	sub.w	r8, r8, r9
 800f7a2:	46a3      	mov	fp, r4
 800f7a4:	f854 0b04 	ldr.w	r0, [r4], #4
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d0f2      	beq.n	800f792 <_findenv_r+0x26>
 800f7ac:	4642      	mov	r2, r8
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	f001 fafe 	bl	8010db0 <strncmp>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d1f4      	bne.n	800f7a2 <_findenv_r+0x36>
 800f7b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f7bc:	eb03 0508 	add.w	r5, r3, r8
 800f7c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f7c4:	2b3d      	cmp	r3, #61	; 0x3d
 800f7c6:	d1ec      	bne.n	800f7a2 <_findenv_r+0x36>
 800f7c8:	f8da 3000 	ldr.w	r3, [sl]
 800f7cc:	ebab 0303 	sub.w	r3, fp, r3
 800f7d0:	109b      	asrs	r3, r3, #2
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	6033      	str	r3, [r6, #0]
 800f7d6:	f001 fb6b 	bl	8010eb0 <__env_unlock>
 800f7da:	1c68      	adds	r0, r5, #1
 800f7dc:	e7dd      	b.n	800f79a <_findenv_r+0x2e>
 800f7de:	bf00      	nop
 800f7e0:	2000000c 	.word	0x2000000c

0800f7e4 <_getenv_r>:
 800f7e4:	b507      	push	{r0, r1, r2, lr}
 800f7e6:	aa01      	add	r2, sp, #4
 800f7e8:	f7ff ffc0 	bl	800f76c <_findenv_r>
 800f7ec:	b003      	add	sp, #12
 800f7ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f7f4 <__gettzinfo>:
 800f7f4:	4800      	ldr	r0, [pc, #0]	; (800f7f8 <__gettzinfo+0x4>)
 800f7f6:	4770      	bx	lr
 800f7f8:	20000090 	.word	0x20000090

0800f7fc <_localeconv_r>:
 800f7fc:	4800      	ldr	r0, [pc, #0]	; (800f800 <_localeconv_r+0x4>)
 800f7fe:	4770      	bx	lr
 800f800:	200001dc 	.word	0x200001dc

0800f804 <__retarget_lock_init_recursive>:
 800f804:	4770      	bx	lr

0800f806 <__retarget_lock_acquire>:
 800f806:	4770      	bx	lr

0800f808 <__retarget_lock_acquire_recursive>:
 800f808:	4770      	bx	lr

0800f80a <__retarget_lock_release>:
 800f80a:	4770      	bx	lr

0800f80c <__retarget_lock_release_recursive>:
 800f80c:	4770      	bx	lr
	...

0800f810 <_lseek_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	; (800f830 <_lseek_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f3 fd78 	bl	8003314 <_lseek>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_lseek_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_lseek_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	200068c0 	.word	0x200068c0

0800f834 <malloc>:
 800f834:	4b02      	ldr	r3, [pc, #8]	; (800f840 <malloc+0xc>)
 800f836:	4601      	mov	r1, r0
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	f000 bd61 	b.w	8010300 <_malloc_r>
 800f83e:	bf00      	nop
 800f840:	20000020 	.word	0x20000020

0800f844 <free>:
 800f844:	4b02      	ldr	r3, [pc, #8]	; (800f850 <free+0xc>)
 800f846:	4601      	mov	r1, r0
 800f848:	6818      	ldr	r0, [r3, #0]
 800f84a:	f000 bced 	b.w	8010228 <_free_r>
 800f84e:	bf00      	nop
 800f850:	20000020 	.word	0x20000020

0800f854 <__ascii_mbtowc>:
 800f854:	b082      	sub	sp, #8
 800f856:	b901      	cbnz	r1, 800f85a <__ascii_mbtowc+0x6>
 800f858:	a901      	add	r1, sp, #4
 800f85a:	b142      	cbz	r2, 800f86e <__ascii_mbtowc+0x1a>
 800f85c:	b14b      	cbz	r3, 800f872 <__ascii_mbtowc+0x1e>
 800f85e:	7813      	ldrb	r3, [r2, #0]
 800f860:	600b      	str	r3, [r1, #0]
 800f862:	7812      	ldrb	r2, [r2, #0]
 800f864:	1e10      	subs	r0, r2, #0
 800f866:	bf18      	it	ne
 800f868:	2001      	movne	r0, #1
 800f86a:	b002      	add	sp, #8
 800f86c:	4770      	bx	lr
 800f86e:	4610      	mov	r0, r2
 800f870:	e7fb      	b.n	800f86a <__ascii_mbtowc+0x16>
 800f872:	f06f 0001 	mvn.w	r0, #1
 800f876:	e7f8      	b.n	800f86a <__ascii_mbtowc+0x16>

0800f878 <_Balloc>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f87c:	4604      	mov	r4, r0
 800f87e:	460d      	mov	r5, r1
 800f880:	b976      	cbnz	r6, 800f8a0 <_Balloc+0x28>
 800f882:	2010      	movs	r0, #16
 800f884:	f7ff ffd6 	bl	800f834 <malloc>
 800f888:	4602      	mov	r2, r0
 800f88a:	6260      	str	r0, [r4, #36]	; 0x24
 800f88c:	b920      	cbnz	r0, 800f898 <_Balloc+0x20>
 800f88e:	4b18      	ldr	r3, [pc, #96]	; (800f8f0 <_Balloc+0x78>)
 800f890:	4818      	ldr	r0, [pc, #96]	; (800f8f4 <_Balloc+0x7c>)
 800f892:	2166      	movs	r1, #102	; 0x66
 800f894:	f001 fae8 	bl	8010e68 <__assert_func>
 800f898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f89c:	6006      	str	r6, [r0, #0]
 800f89e:	60c6      	str	r6, [r0, #12]
 800f8a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8a2:	68f3      	ldr	r3, [r6, #12]
 800f8a4:	b183      	cbz	r3, 800f8c8 <_Balloc+0x50>
 800f8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8ae:	b9b8      	cbnz	r0, 800f8e0 <_Balloc+0x68>
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800f8b6:	1d72      	adds	r2, r6, #5
 800f8b8:	0092      	lsls	r2, r2, #2
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f000 fc9d 	bl	80101fa <_calloc_r>
 800f8c0:	b160      	cbz	r0, 800f8dc <_Balloc+0x64>
 800f8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8c6:	e00e      	b.n	800f8e6 <_Balloc+0x6e>
 800f8c8:	2221      	movs	r2, #33	; 0x21
 800f8ca:	2104      	movs	r1, #4
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f000 fc94 	bl	80101fa <_calloc_r>
 800f8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d4:	60f0      	str	r0, [r6, #12]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1e4      	bne.n	800f8a6 <_Balloc+0x2e>
 800f8dc:	2000      	movs	r0, #0
 800f8de:	bd70      	pop	{r4, r5, r6, pc}
 800f8e0:	6802      	ldr	r2, [r0, #0]
 800f8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8ec:	e7f7      	b.n	800f8de <_Balloc+0x66>
 800f8ee:	bf00      	nop
 800f8f0:	08011dd2 	.word	0x08011dd2
 800f8f4:	08011f30 	.word	0x08011f30

0800f8f8 <_Bfree>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	460c      	mov	r4, r1
 800f900:	b976      	cbnz	r6, 800f920 <_Bfree+0x28>
 800f902:	2010      	movs	r0, #16
 800f904:	f7ff ff96 	bl	800f834 <malloc>
 800f908:	4602      	mov	r2, r0
 800f90a:	6268      	str	r0, [r5, #36]	; 0x24
 800f90c:	b920      	cbnz	r0, 800f918 <_Bfree+0x20>
 800f90e:	4b09      	ldr	r3, [pc, #36]	; (800f934 <_Bfree+0x3c>)
 800f910:	4809      	ldr	r0, [pc, #36]	; (800f938 <_Bfree+0x40>)
 800f912:	218a      	movs	r1, #138	; 0x8a
 800f914:	f001 faa8 	bl	8010e68 <__assert_func>
 800f918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f91c:	6006      	str	r6, [r0, #0]
 800f91e:	60c6      	str	r6, [r0, #12]
 800f920:	b13c      	cbz	r4, 800f932 <_Bfree+0x3a>
 800f922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f924:	6862      	ldr	r2, [r4, #4]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f92c:	6021      	str	r1, [r4, #0]
 800f92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f932:	bd70      	pop	{r4, r5, r6, pc}
 800f934:	08011dd2 	.word	0x08011dd2
 800f938:	08011f30 	.word	0x08011f30

0800f93c <__multadd>:
 800f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f940:	690d      	ldr	r5, [r1, #16]
 800f942:	4607      	mov	r7, r0
 800f944:	460c      	mov	r4, r1
 800f946:	461e      	mov	r6, r3
 800f948:	f101 0c14 	add.w	ip, r1, #20
 800f94c:	2000      	movs	r0, #0
 800f94e:	f8dc 3000 	ldr.w	r3, [ip]
 800f952:	b299      	uxth	r1, r3
 800f954:	fb02 6101 	mla	r1, r2, r1, r6
 800f958:	0c1e      	lsrs	r6, r3, #16
 800f95a:	0c0b      	lsrs	r3, r1, #16
 800f95c:	fb02 3306 	mla	r3, r2, r6, r3
 800f960:	b289      	uxth	r1, r1
 800f962:	3001      	adds	r0, #1
 800f964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f968:	4285      	cmp	r5, r0
 800f96a:	f84c 1b04 	str.w	r1, [ip], #4
 800f96e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f972:	dcec      	bgt.n	800f94e <__multadd+0x12>
 800f974:	b30e      	cbz	r6, 800f9ba <__multadd+0x7e>
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	42ab      	cmp	r3, r5
 800f97a:	dc19      	bgt.n	800f9b0 <__multadd+0x74>
 800f97c:	6861      	ldr	r1, [r4, #4]
 800f97e:	4638      	mov	r0, r7
 800f980:	3101      	adds	r1, #1
 800f982:	f7ff ff79 	bl	800f878 <_Balloc>
 800f986:	4680      	mov	r8, r0
 800f988:	b928      	cbnz	r0, 800f996 <__multadd+0x5a>
 800f98a:	4602      	mov	r2, r0
 800f98c:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <__multadd+0x84>)
 800f98e:	480d      	ldr	r0, [pc, #52]	; (800f9c4 <__multadd+0x88>)
 800f990:	21b5      	movs	r1, #181	; 0xb5
 800f992:	f001 fa69 	bl	8010e68 <__assert_func>
 800f996:	6922      	ldr	r2, [r4, #16]
 800f998:	3202      	adds	r2, #2
 800f99a:	f104 010c 	add.w	r1, r4, #12
 800f99e:	0092      	lsls	r2, r2, #2
 800f9a0:	300c      	adds	r0, #12
 800f9a2:	f7fc f98d 	bl	800bcc0 <memcpy>
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4638      	mov	r0, r7
 800f9aa:	f7ff ffa5 	bl	800f8f8 <_Bfree>
 800f9ae:	4644      	mov	r4, r8
 800f9b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9b4:	3501      	adds	r5, #1
 800f9b6:	615e      	str	r6, [r3, #20]
 800f9b8:	6125      	str	r5, [r4, #16]
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c0:	08011e44 	.word	0x08011e44
 800f9c4:	08011f30 	.word	0x08011f30

0800f9c8 <__s2b>:
 800f9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	4615      	mov	r5, r2
 800f9d0:	461f      	mov	r7, r3
 800f9d2:	2209      	movs	r2, #9
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9dc:	2100      	movs	r1, #0
 800f9de:	2201      	movs	r2, #1
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	db09      	blt.n	800f9f8 <__s2b+0x30>
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	f7ff ff47 	bl	800f878 <_Balloc>
 800f9ea:	b940      	cbnz	r0, 800f9fe <__s2b+0x36>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	4b19      	ldr	r3, [pc, #100]	; (800fa54 <__s2b+0x8c>)
 800f9f0:	4819      	ldr	r0, [pc, #100]	; (800fa58 <__s2b+0x90>)
 800f9f2:	21ce      	movs	r1, #206	; 0xce
 800f9f4:	f001 fa38 	bl	8010e68 <__assert_func>
 800f9f8:	0052      	lsls	r2, r2, #1
 800f9fa:	3101      	adds	r1, #1
 800f9fc:	e7f0      	b.n	800f9e0 <__s2b+0x18>
 800f9fe:	9b08      	ldr	r3, [sp, #32]
 800fa00:	6143      	str	r3, [r0, #20]
 800fa02:	2d09      	cmp	r5, #9
 800fa04:	f04f 0301 	mov.w	r3, #1
 800fa08:	6103      	str	r3, [r0, #16]
 800fa0a:	dd16      	ble.n	800fa3a <__s2b+0x72>
 800fa0c:	f104 0909 	add.w	r9, r4, #9
 800fa10:	46c8      	mov	r8, r9
 800fa12:	442c      	add	r4, r5
 800fa14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa18:	4601      	mov	r1, r0
 800fa1a:	3b30      	subs	r3, #48	; 0x30
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ff8c 	bl	800f93c <__multadd>
 800fa24:	45a0      	cmp	r8, r4
 800fa26:	d1f5      	bne.n	800fa14 <__s2b+0x4c>
 800fa28:	f1a5 0408 	sub.w	r4, r5, #8
 800fa2c:	444c      	add	r4, r9
 800fa2e:	1b2d      	subs	r5, r5, r4
 800fa30:	1963      	adds	r3, r4, r5
 800fa32:	42bb      	cmp	r3, r7
 800fa34:	db04      	blt.n	800fa40 <__s2b+0x78>
 800fa36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa3a:	340a      	adds	r4, #10
 800fa3c:	2509      	movs	r5, #9
 800fa3e:	e7f6      	b.n	800fa2e <__s2b+0x66>
 800fa40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa44:	4601      	mov	r1, r0
 800fa46:	3b30      	subs	r3, #48	; 0x30
 800fa48:	220a      	movs	r2, #10
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7ff ff76 	bl	800f93c <__multadd>
 800fa50:	e7ee      	b.n	800fa30 <__s2b+0x68>
 800fa52:	bf00      	nop
 800fa54:	08011e44 	.word	0x08011e44
 800fa58:	08011f30 	.word	0x08011f30

0800fa5c <__hi0bits>:
 800fa5c:	0c03      	lsrs	r3, r0, #16
 800fa5e:	041b      	lsls	r3, r3, #16
 800fa60:	b9d3      	cbnz	r3, 800fa98 <__hi0bits+0x3c>
 800fa62:	0400      	lsls	r0, r0, #16
 800fa64:	2310      	movs	r3, #16
 800fa66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa6a:	bf04      	itt	eq
 800fa6c:	0200      	lsleq	r0, r0, #8
 800fa6e:	3308      	addeq	r3, #8
 800fa70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa74:	bf04      	itt	eq
 800fa76:	0100      	lsleq	r0, r0, #4
 800fa78:	3304      	addeq	r3, #4
 800fa7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa7e:	bf04      	itt	eq
 800fa80:	0080      	lsleq	r0, r0, #2
 800fa82:	3302      	addeq	r3, #2
 800fa84:	2800      	cmp	r0, #0
 800fa86:	db05      	blt.n	800fa94 <__hi0bits+0x38>
 800fa88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa8c:	f103 0301 	add.w	r3, r3, #1
 800fa90:	bf08      	it	eq
 800fa92:	2320      	moveq	r3, #32
 800fa94:	4618      	mov	r0, r3
 800fa96:	4770      	bx	lr
 800fa98:	2300      	movs	r3, #0
 800fa9a:	e7e4      	b.n	800fa66 <__hi0bits+0xa>

0800fa9c <__lo0bits>:
 800fa9c:	6803      	ldr	r3, [r0, #0]
 800fa9e:	f013 0207 	ands.w	r2, r3, #7
 800faa2:	4601      	mov	r1, r0
 800faa4:	d00b      	beq.n	800fabe <__lo0bits+0x22>
 800faa6:	07da      	lsls	r2, r3, #31
 800faa8:	d423      	bmi.n	800faf2 <__lo0bits+0x56>
 800faaa:	0798      	lsls	r0, r3, #30
 800faac:	bf49      	itett	mi
 800faae:	085b      	lsrmi	r3, r3, #1
 800fab0:	089b      	lsrpl	r3, r3, #2
 800fab2:	2001      	movmi	r0, #1
 800fab4:	600b      	strmi	r3, [r1, #0]
 800fab6:	bf5c      	itt	pl
 800fab8:	600b      	strpl	r3, [r1, #0]
 800faba:	2002      	movpl	r0, #2
 800fabc:	4770      	bx	lr
 800fabe:	b298      	uxth	r0, r3
 800fac0:	b9a8      	cbnz	r0, 800faee <__lo0bits+0x52>
 800fac2:	0c1b      	lsrs	r3, r3, #16
 800fac4:	2010      	movs	r0, #16
 800fac6:	b2da      	uxtb	r2, r3
 800fac8:	b90a      	cbnz	r2, 800face <__lo0bits+0x32>
 800faca:	3008      	adds	r0, #8
 800facc:	0a1b      	lsrs	r3, r3, #8
 800face:	071a      	lsls	r2, r3, #28
 800fad0:	bf04      	itt	eq
 800fad2:	091b      	lsreq	r3, r3, #4
 800fad4:	3004      	addeq	r0, #4
 800fad6:	079a      	lsls	r2, r3, #30
 800fad8:	bf04      	itt	eq
 800fada:	089b      	lsreq	r3, r3, #2
 800fadc:	3002      	addeq	r0, #2
 800fade:	07da      	lsls	r2, r3, #31
 800fae0:	d403      	bmi.n	800faea <__lo0bits+0x4e>
 800fae2:	085b      	lsrs	r3, r3, #1
 800fae4:	f100 0001 	add.w	r0, r0, #1
 800fae8:	d005      	beq.n	800faf6 <__lo0bits+0x5a>
 800faea:	600b      	str	r3, [r1, #0]
 800faec:	4770      	bx	lr
 800faee:	4610      	mov	r0, r2
 800faf0:	e7e9      	b.n	800fac6 <__lo0bits+0x2a>
 800faf2:	2000      	movs	r0, #0
 800faf4:	4770      	bx	lr
 800faf6:	2020      	movs	r0, #32
 800faf8:	4770      	bx	lr
	...

0800fafc <__i2b>:
 800fafc:	b510      	push	{r4, lr}
 800fafe:	460c      	mov	r4, r1
 800fb00:	2101      	movs	r1, #1
 800fb02:	f7ff feb9 	bl	800f878 <_Balloc>
 800fb06:	4602      	mov	r2, r0
 800fb08:	b928      	cbnz	r0, 800fb16 <__i2b+0x1a>
 800fb0a:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <__i2b+0x24>)
 800fb0c:	4805      	ldr	r0, [pc, #20]	; (800fb24 <__i2b+0x28>)
 800fb0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb12:	f001 f9a9 	bl	8010e68 <__assert_func>
 800fb16:	2301      	movs	r3, #1
 800fb18:	6144      	str	r4, [r0, #20]
 800fb1a:	6103      	str	r3, [r0, #16]
 800fb1c:	bd10      	pop	{r4, pc}
 800fb1e:	bf00      	nop
 800fb20:	08011e44 	.word	0x08011e44
 800fb24:	08011f30 	.word	0x08011f30

0800fb28 <__multiply>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	4691      	mov	r9, r2
 800fb2e:	690a      	ldr	r2, [r1, #16]
 800fb30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	bfb8      	it	lt
 800fb38:	460b      	movlt	r3, r1
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	bfbc      	itt	lt
 800fb3e:	464c      	movlt	r4, r9
 800fb40:	4699      	movlt	r9, r3
 800fb42:	6927      	ldr	r7, [r4, #16]
 800fb44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb48:	68a3      	ldr	r3, [r4, #8]
 800fb4a:	6861      	ldr	r1, [r4, #4]
 800fb4c:	eb07 060a 	add.w	r6, r7, sl
 800fb50:	42b3      	cmp	r3, r6
 800fb52:	b085      	sub	sp, #20
 800fb54:	bfb8      	it	lt
 800fb56:	3101      	addlt	r1, #1
 800fb58:	f7ff fe8e 	bl	800f878 <_Balloc>
 800fb5c:	b930      	cbnz	r0, 800fb6c <__multiply+0x44>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	4b44      	ldr	r3, [pc, #272]	; (800fc74 <__multiply+0x14c>)
 800fb62:	4845      	ldr	r0, [pc, #276]	; (800fc78 <__multiply+0x150>)
 800fb64:	f240 115d 	movw	r1, #349	; 0x15d
 800fb68:	f001 f97e 	bl	8010e68 <__assert_func>
 800fb6c:	f100 0514 	add.w	r5, r0, #20
 800fb70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb74:	462b      	mov	r3, r5
 800fb76:	2200      	movs	r2, #0
 800fb78:	4543      	cmp	r3, r8
 800fb7a:	d321      	bcc.n	800fbc0 <__multiply+0x98>
 800fb7c:	f104 0314 	add.w	r3, r4, #20
 800fb80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fb84:	f109 0314 	add.w	r3, r9, #20
 800fb88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb8c:	9202      	str	r2, [sp, #8]
 800fb8e:	1b3a      	subs	r2, r7, r4
 800fb90:	3a15      	subs	r2, #21
 800fb92:	f022 0203 	bic.w	r2, r2, #3
 800fb96:	3204      	adds	r2, #4
 800fb98:	f104 0115 	add.w	r1, r4, #21
 800fb9c:	428f      	cmp	r7, r1
 800fb9e:	bf38      	it	cc
 800fba0:	2204      	movcc	r2, #4
 800fba2:	9201      	str	r2, [sp, #4]
 800fba4:	9a02      	ldr	r2, [sp, #8]
 800fba6:	9303      	str	r3, [sp, #12]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d80c      	bhi.n	800fbc6 <__multiply+0x9e>
 800fbac:	2e00      	cmp	r6, #0
 800fbae:	dd03      	ble.n	800fbb8 <__multiply+0x90>
 800fbb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d05a      	beq.n	800fc6e <__multiply+0x146>
 800fbb8:	6106      	str	r6, [r0, #16]
 800fbba:	b005      	add	sp, #20
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc0:	f843 2b04 	str.w	r2, [r3], #4
 800fbc4:	e7d8      	b.n	800fb78 <__multiply+0x50>
 800fbc6:	f8b3 a000 	ldrh.w	sl, [r3]
 800fbca:	f1ba 0f00 	cmp.w	sl, #0
 800fbce:	d024      	beq.n	800fc1a <__multiply+0xf2>
 800fbd0:	f104 0e14 	add.w	lr, r4, #20
 800fbd4:	46a9      	mov	r9, r5
 800fbd6:	f04f 0c00 	mov.w	ip, #0
 800fbda:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fbde:	f8d9 1000 	ldr.w	r1, [r9]
 800fbe2:	fa1f fb82 	uxth.w	fp, r2
 800fbe6:	b289      	uxth	r1, r1
 800fbe8:	fb0a 110b 	mla	r1, sl, fp, r1
 800fbec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fbf0:	f8d9 2000 	ldr.w	r2, [r9]
 800fbf4:	4461      	add	r1, ip
 800fbf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fbfa:	fb0a c20b 	mla	r2, sl, fp, ip
 800fbfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc02:	b289      	uxth	r1, r1
 800fc04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc08:	4577      	cmp	r7, lr
 800fc0a:	f849 1b04 	str.w	r1, [r9], #4
 800fc0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc12:	d8e2      	bhi.n	800fbda <__multiply+0xb2>
 800fc14:	9a01      	ldr	r2, [sp, #4]
 800fc16:	f845 c002 	str.w	ip, [r5, r2]
 800fc1a:	9a03      	ldr	r2, [sp, #12]
 800fc1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc20:	3304      	adds	r3, #4
 800fc22:	f1b9 0f00 	cmp.w	r9, #0
 800fc26:	d020      	beq.n	800fc6a <__multiply+0x142>
 800fc28:	6829      	ldr	r1, [r5, #0]
 800fc2a:	f104 0c14 	add.w	ip, r4, #20
 800fc2e:	46ae      	mov	lr, r5
 800fc30:	f04f 0a00 	mov.w	sl, #0
 800fc34:	f8bc b000 	ldrh.w	fp, [ip]
 800fc38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fc3c:	fb09 220b 	mla	r2, r9, fp, r2
 800fc40:	4492      	add	sl, r2
 800fc42:	b289      	uxth	r1, r1
 800fc44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fc48:	f84e 1b04 	str.w	r1, [lr], #4
 800fc4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fc50:	f8be 1000 	ldrh.w	r1, [lr]
 800fc54:	0c12      	lsrs	r2, r2, #16
 800fc56:	fb09 1102 	mla	r1, r9, r2, r1
 800fc5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fc5e:	4567      	cmp	r7, ip
 800fc60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fc64:	d8e6      	bhi.n	800fc34 <__multiply+0x10c>
 800fc66:	9a01      	ldr	r2, [sp, #4]
 800fc68:	50a9      	str	r1, [r5, r2]
 800fc6a:	3504      	adds	r5, #4
 800fc6c:	e79a      	b.n	800fba4 <__multiply+0x7c>
 800fc6e:	3e01      	subs	r6, #1
 800fc70:	e79c      	b.n	800fbac <__multiply+0x84>
 800fc72:	bf00      	nop
 800fc74:	08011e44 	.word	0x08011e44
 800fc78:	08011f30 	.word	0x08011f30

0800fc7c <__pow5mult>:
 800fc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4615      	mov	r5, r2
 800fc82:	f012 0203 	ands.w	r2, r2, #3
 800fc86:	4606      	mov	r6, r0
 800fc88:	460f      	mov	r7, r1
 800fc8a:	d007      	beq.n	800fc9c <__pow5mult+0x20>
 800fc8c:	4c25      	ldr	r4, [pc, #148]	; (800fd24 <__pow5mult+0xa8>)
 800fc8e:	3a01      	subs	r2, #1
 800fc90:	2300      	movs	r3, #0
 800fc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc96:	f7ff fe51 	bl	800f93c <__multadd>
 800fc9a:	4607      	mov	r7, r0
 800fc9c:	10ad      	asrs	r5, r5, #2
 800fc9e:	d03d      	beq.n	800fd1c <__pow5mult+0xa0>
 800fca0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fca2:	b97c      	cbnz	r4, 800fcc4 <__pow5mult+0x48>
 800fca4:	2010      	movs	r0, #16
 800fca6:	f7ff fdc5 	bl	800f834 <malloc>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	6270      	str	r0, [r6, #36]	; 0x24
 800fcae:	b928      	cbnz	r0, 800fcbc <__pow5mult+0x40>
 800fcb0:	4b1d      	ldr	r3, [pc, #116]	; (800fd28 <__pow5mult+0xac>)
 800fcb2:	481e      	ldr	r0, [pc, #120]	; (800fd2c <__pow5mult+0xb0>)
 800fcb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcb8:	f001 f8d6 	bl	8010e68 <__assert_func>
 800fcbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcc0:	6004      	str	r4, [r0, #0]
 800fcc2:	60c4      	str	r4, [r0, #12]
 800fcc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fcc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fccc:	b94c      	cbnz	r4, 800fce2 <__pow5mult+0x66>
 800fcce:	f240 2171 	movw	r1, #625	; 0x271
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7ff ff12 	bl	800fafc <__i2b>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcde:	4604      	mov	r4, r0
 800fce0:	6003      	str	r3, [r0, #0]
 800fce2:	f04f 0900 	mov.w	r9, #0
 800fce6:	07eb      	lsls	r3, r5, #31
 800fce8:	d50a      	bpl.n	800fd00 <__pow5mult+0x84>
 800fcea:	4639      	mov	r1, r7
 800fcec:	4622      	mov	r2, r4
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f7ff ff1a 	bl	800fb28 <__multiply>
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	4680      	mov	r8, r0
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f7ff fdfd 	bl	800f8f8 <_Bfree>
 800fcfe:	4647      	mov	r7, r8
 800fd00:	106d      	asrs	r5, r5, #1
 800fd02:	d00b      	beq.n	800fd1c <__pow5mult+0xa0>
 800fd04:	6820      	ldr	r0, [r4, #0]
 800fd06:	b938      	cbnz	r0, 800fd18 <__pow5mult+0x9c>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f7ff ff0b 	bl	800fb28 <__multiply>
 800fd12:	6020      	str	r0, [r4, #0]
 800fd14:	f8c0 9000 	str.w	r9, [r0]
 800fd18:	4604      	mov	r4, r0
 800fd1a:	e7e4      	b.n	800fce6 <__pow5mult+0x6a>
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd22:	bf00      	nop
 800fd24:	08012080 	.word	0x08012080
 800fd28:	08011dd2 	.word	0x08011dd2
 800fd2c:	08011f30 	.word	0x08011f30

0800fd30 <__lshift>:
 800fd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd34:	460c      	mov	r4, r1
 800fd36:	6849      	ldr	r1, [r1, #4]
 800fd38:	6923      	ldr	r3, [r4, #16]
 800fd3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd3e:	68a3      	ldr	r3, [r4, #8]
 800fd40:	4607      	mov	r7, r0
 800fd42:	4691      	mov	r9, r2
 800fd44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd48:	f108 0601 	add.w	r6, r8, #1
 800fd4c:	42b3      	cmp	r3, r6
 800fd4e:	db0b      	blt.n	800fd68 <__lshift+0x38>
 800fd50:	4638      	mov	r0, r7
 800fd52:	f7ff fd91 	bl	800f878 <_Balloc>
 800fd56:	4605      	mov	r5, r0
 800fd58:	b948      	cbnz	r0, 800fd6e <__lshift+0x3e>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	4b2a      	ldr	r3, [pc, #168]	; (800fe08 <__lshift+0xd8>)
 800fd5e:	482b      	ldr	r0, [pc, #172]	; (800fe0c <__lshift+0xdc>)
 800fd60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd64:	f001 f880 	bl	8010e68 <__assert_func>
 800fd68:	3101      	adds	r1, #1
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	e7ee      	b.n	800fd4c <__lshift+0x1c>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	f100 0114 	add.w	r1, r0, #20
 800fd74:	f100 0210 	add.w	r2, r0, #16
 800fd78:	4618      	mov	r0, r3
 800fd7a:	4553      	cmp	r3, sl
 800fd7c:	db37      	blt.n	800fdee <__lshift+0xbe>
 800fd7e:	6920      	ldr	r0, [r4, #16]
 800fd80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd84:	f104 0314 	add.w	r3, r4, #20
 800fd88:	f019 091f 	ands.w	r9, r9, #31
 800fd8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fd94:	d02f      	beq.n	800fdf6 <__lshift+0xc6>
 800fd96:	f1c9 0e20 	rsb	lr, r9, #32
 800fd9a:	468a      	mov	sl, r1
 800fd9c:	f04f 0c00 	mov.w	ip, #0
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	fa02 f209 	lsl.w	r2, r2, r9
 800fda6:	ea42 020c 	orr.w	r2, r2, ip
 800fdaa:	f84a 2b04 	str.w	r2, [sl], #4
 800fdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdb2:	4298      	cmp	r0, r3
 800fdb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fdb8:	d8f2      	bhi.n	800fda0 <__lshift+0x70>
 800fdba:	1b03      	subs	r3, r0, r4
 800fdbc:	3b15      	subs	r3, #21
 800fdbe:	f023 0303 	bic.w	r3, r3, #3
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	f104 0215 	add.w	r2, r4, #21
 800fdc8:	4290      	cmp	r0, r2
 800fdca:	bf38      	it	cc
 800fdcc:	2304      	movcc	r3, #4
 800fdce:	f841 c003 	str.w	ip, [r1, r3]
 800fdd2:	f1bc 0f00 	cmp.w	ip, #0
 800fdd6:	d001      	beq.n	800fddc <__lshift+0xac>
 800fdd8:	f108 0602 	add.w	r6, r8, #2
 800fddc:	3e01      	subs	r6, #1
 800fdde:	4638      	mov	r0, r7
 800fde0:	612e      	str	r6, [r5, #16]
 800fde2:	4621      	mov	r1, r4
 800fde4:	f7ff fd88 	bl	800f8f8 <_Bfree>
 800fde8:	4628      	mov	r0, r5
 800fdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdee:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	e7c1      	b.n	800fd7a <__lshift+0x4a>
 800fdf6:	3904      	subs	r1, #4
 800fdf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe00:	4298      	cmp	r0, r3
 800fe02:	d8f9      	bhi.n	800fdf8 <__lshift+0xc8>
 800fe04:	e7ea      	b.n	800fddc <__lshift+0xac>
 800fe06:	bf00      	nop
 800fe08:	08011e44 	.word	0x08011e44
 800fe0c:	08011f30 	.word	0x08011f30

0800fe10 <__mcmp>:
 800fe10:	b530      	push	{r4, r5, lr}
 800fe12:	6902      	ldr	r2, [r0, #16]
 800fe14:	690c      	ldr	r4, [r1, #16]
 800fe16:	1b12      	subs	r2, r2, r4
 800fe18:	d10e      	bne.n	800fe38 <__mcmp+0x28>
 800fe1a:	f100 0314 	add.w	r3, r0, #20
 800fe1e:	3114      	adds	r1, #20
 800fe20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe30:	42a5      	cmp	r5, r4
 800fe32:	d003      	beq.n	800fe3c <__mcmp+0x2c>
 800fe34:	d305      	bcc.n	800fe42 <__mcmp+0x32>
 800fe36:	2201      	movs	r2, #1
 800fe38:	4610      	mov	r0, r2
 800fe3a:	bd30      	pop	{r4, r5, pc}
 800fe3c:	4283      	cmp	r3, r0
 800fe3e:	d3f3      	bcc.n	800fe28 <__mcmp+0x18>
 800fe40:	e7fa      	b.n	800fe38 <__mcmp+0x28>
 800fe42:	f04f 32ff 	mov.w	r2, #4294967295
 800fe46:	e7f7      	b.n	800fe38 <__mcmp+0x28>

0800fe48 <__mdiff>:
 800fe48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	460c      	mov	r4, r1
 800fe4e:	4606      	mov	r6, r0
 800fe50:	4611      	mov	r1, r2
 800fe52:	4620      	mov	r0, r4
 800fe54:	4690      	mov	r8, r2
 800fe56:	f7ff ffdb 	bl	800fe10 <__mcmp>
 800fe5a:	1e05      	subs	r5, r0, #0
 800fe5c:	d110      	bne.n	800fe80 <__mdiff+0x38>
 800fe5e:	4629      	mov	r1, r5
 800fe60:	4630      	mov	r0, r6
 800fe62:	f7ff fd09 	bl	800f878 <_Balloc>
 800fe66:	b930      	cbnz	r0, 800fe76 <__mdiff+0x2e>
 800fe68:	4b3a      	ldr	r3, [pc, #232]	; (800ff54 <__mdiff+0x10c>)
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	f240 2132 	movw	r1, #562	; 0x232
 800fe70:	4839      	ldr	r0, [pc, #228]	; (800ff58 <__mdiff+0x110>)
 800fe72:	f000 fff9 	bl	8010e68 <__assert_func>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe80:	bfa4      	itt	ge
 800fe82:	4643      	movge	r3, r8
 800fe84:	46a0      	movge	r8, r4
 800fe86:	4630      	mov	r0, r6
 800fe88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe8c:	bfa6      	itte	ge
 800fe8e:	461c      	movge	r4, r3
 800fe90:	2500      	movge	r5, #0
 800fe92:	2501      	movlt	r5, #1
 800fe94:	f7ff fcf0 	bl	800f878 <_Balloc>
 800fe98:	b920      	cbnz	r0, 800fea4 <__mdiff+0x5c>
 800fe9a:	4b2e      	ldr	r3, [pc, #184]	; (800ff54 <__mdiff+0x10c>)
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fea2:	e7e5      	b.n	800fe70 <__mdiff+0x28>
 800fea4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fea8:	6926      	ldr	r6, [r4, #16]
 800feaa:	60c5      	str	r5, [r0, #12]
 800feac:	f104 0914 	add.w	r9, r4, #20
 800feb0:	f108 0514 	add.w	r5, r8, #20
 800feb4:	f100 0e14 	add.w	lr, r0, #20
 800feb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800febc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fec0:	f108 0210 	add.w	r2, r8, #16
 800fec4:	46f2      	mov	sl, lr
 800fec6:	2100      	movs	r1, #0
 800fec8:	f859 3b04 	ldr.w	r3, [r9], #4
 800fecc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fed0:	fa1f f883 	uxth.w	r8, r3
 800fed4:	fa11 f18b 	uxtah	r1, r1, fp
 800fed8:	0c1b      	lsrs	r3, r3, #16
 800feda:	eba1 0808 	sub.w	r8, r1, r8
 800fede:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fee2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fee6:	fa1f f888 	uxth.w	r8, r8
 800feea:	1419      	asrs	r1, r3, #16
 800feec:	454e      	cmp	r6, r9
 800feee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fef2:	f84a 3b04 	str.w	r3, [sl], #4
 800fef6:	d8e7      	bhi.n	800fec8 <__mdiff+0x80>
 800fef8:	1b33      	subs	r3, r6, r4
 800fefa:	3b15      	subs	r3, #21
 800fefc:	f023 0303 	bic.w	r3, r3, #3
 800ff00:	3304      	adds	r3, #4
 800ff02:	3415      	adds	r4, #21
 800ff04:	42a6      	cmp	r6, r4
 800ff06:	bf38      	it	cc
 800ff08:	2304      	movcc	r3, #4
 800ff0a:	441d      	add	r5, r3
 800ff0c:	4473      	add	r3, lr
 800ff0e:	469e      	mov	lr, r3
 800ff10:	462e      	mov	r6, r5
 800ff12:	4566      	cmp	r6, ip
 800ff14:	d30e      	bcc.n	800ff34 <__mdiff+0xec>
 800ff16:	f10c 0203 	add.w	r2, ip, #3
 800ff1a:	1b52      	subs	r2, r2, r5
 800ff1c:	f022 0203 	bic.w	r2, r2, #3
 800ff20:	3d03      	subs	r5, #3
 800ff22:	45ac      	cmp	ip, r5
 800ff24:	bf38      	it	cc
 800ff26:	2200      	movcc	r2, #0
 800ff28:	441a      	add	r2, r3
 800ff2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff2e:	b17b      	cbz	r3, 800ff50 <__mdiff+0x108>
 800ff30:	6107      	str	r7, [r0, #16]
 800ff32:	e7a3      	b.n	800fe7c <__mdiff+0x34>
 800ff34:	f856 8b04 	ldr.w	r8, [r6], #4
 800ff38:	fa11 f288 	uxtah	r2, r1, r8
 800ff3c:	1414      	asrs	r4, r2, #16
 800ff3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ff42:	b292      	uxth	r2, r2
 800ff44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ff48:	f84e 2b04 	str.w	r2, [lr], #4
 800ff4c:	1421      	asrs	r1, r4, #16
 800ff4e:	e7e0      	b.n	800ff12 <__mdiff+0xca>
 800ff50:	3f01      	subs	r7, #1
 800ff52:	e7ea      	b.n	800ff2a <__mdiff+0xe2>
 800ff54:	08011e44 	.word	0x08011e44
 800ff58:	08011f30 	.word	0x08011f30

0800ff5c <__ulp>:
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	ed8d 0b00 	vstr	d0, [sp]
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	4912      	ldr	r1, [pc, #72]	; (800ffb0 <__ulp+0x54>)
 800ff66:	4019      	ands	r1, r3
 800ff68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff6c:	2900      	cmp	r1, #0
 800ff6e:	dd05      	ble.n	800ff7c <__ulp+0x20>
 800ff70:	2200      	movs	r2, #0
 800ff72:	460b      	mov	r3, r1
 800ff74:	ec43 2b10 	vmov	d0, r2, r3
 800ff78:	b002      	add	sp, #8
 800ff7a:	4770      	bx	lr
 800ff7c:	4249      	negs	r1, r1
 800ff7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff82:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff86:	f04f 0200 	mov.w	r2, #0
 800ff8a:	f04f 0300 	mov.w	r3, #0
 800ff8e:	da04      	bge.n	800ff9a <__ulp+0x3e>
 800ff90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff94:	fa41 f300 	asr.w	r3, r1, r0
 800ff98:	e7ec      	b.n	800ff74 <__ulp+0x18>
 800ff9a:	f1a0 0114 	sub.w	r1, r0, #20
 800ff9e:	291e      	cmp	r1, #30
 800ffa0:	bfda      	itte	le
 800ffa2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ffa6:	fa20 f101 	lsrle.w	r1, r0, r1
 800ffaa:	2101      	movgt	r1, #1
 800ffac:	460a      	mov	r2, r1
 800ffae:	e7e1      	b.n	800ff74 <__ulp+0x18>
 800ffb0:	7ff00000 	.word	0x7ff00000

0800ffb4 <__b2d>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	6905      	ldr	r5, [r0, #16]
 800ffb8:	f100 0714 	add.w	r7, r0, #20
 800ffbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ffc0:	1f2e      	subs	r6, r5, #4
 800ffc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f7ff fd48 	bl	800fa5c <__hi0bits>
 800ffcc:	f1c0 0320 	rsb	r3, r0, #32
 800ffd0:	280a      	cmp	r0, #10
 800ffd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010050 <__b2d+0x9c>
 800ffd6:	600b      	str	r3, [r1, #0]
 800ffd8:	dc14      	bgt.n	8010004 <__b2d+0x50>
 800ffda:	f1c0 0e0b 	rsb	lr, r0, #11
 800ffde:	fa24 f10e 	lsr.w	r1, r4, lr
 800ffe2:	42b7      	cmp	r7, r6
 800ffe4:	ea41 030c 	orr.w	r3, r1, ip
 800ffe8:	bf34      	ite	cc
 800ffea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffee:	2100      	movcs	r1, #0
 800fff0:	3015      	adds	r0, #21
 800fff2:	fa04 f000 	lsl.w	r0, r4, r0
 800fff6:	fa21 f10e 	lsr.w	r1, r1, lr
 800fffa:	ea40 0201 	orr.w	r2, r0, r1
 800fffe:	ec43 2b10 	vmov	d0, r2, r3
 8010002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010004:	42b7      	cmp	r7, r6
 8010006:	bf3a      	itte	cc
 8010008:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801000c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010010:	2100      	movcs	r1, #0
 8010012:	380b      	subs	r0, #11
 8010014:	d017      	beq.n	8010046 <__b2d+0x92>
 8010016:	f1c0 0c20 	rsb	ip, r0, #32
 801001a:	fa04 f500 	lsl.w	r5, r4, r0
 801001e:	42be      	cmp	r6, r7
 8010020:	fa21 f40c 	lsr.w	r4, r1, ip
 8010024:	ea45 0504 	orr.w	r5, r5, r4
 8010028:	bf8c      	ite	hi
 801002a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801002e:	2400      	movls	r4, #0
 8010030:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010034:	fa01 f000 	lsl.w	r0, r1, r0
 8010038:	fa24 f40c 	lsr.w	r4, r4, ip
 801003c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010040:	ea40 0204 	orr.w	r2, r0, r4
 8010044:	e7db      	b.n	800fffe <__b2d+0x4a>
 8010046:	ea44 030c 	orr.w	r3, r4, ip
 801004a:	460a      	mov	r2, r1
 801004c:	e7d7      	b.n	800fffe <__b2d+0x4a>
 801004e:	bf00      	nop
 8010050:	3ff00000 	.word	0x3ff00000

08010054 <__d2b>:
 8010054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010058:	4689      	mov	r9, r1
 801005a:	2101      	movs	r1, #1
 801005c:	ec57 6b10 	vmov	r6, r7, d0
 8010060:	4690      	mov	r8, r2
 8010062:	f7ff fc09 	bl	800f878 <_Balloc>
 8010066:	4604      	mov	r4, r0
 8010068:	b930      	cbnz	r0, 8010078 <__d2b+0x24>
 801006a:	4602      	mov	r2, r0
 801006c:	4b25      	ldr	r3, [pc, #148]	; (8010104 <__d2b+0xb0>)
 801006e:	4826      	ldr	r0, [pc, #152]	; (8010108 <__d2b+0xb4>)
 8010070:	f240 310a 	movw	r1, #778	; 0x30a
 8010074:	f000 fef8 	bl	8010e68 <__assert_func>
 8010078:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801007c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010080:	bb35      	cbnz	r5, 80100d0 <__d2b+0x7c>
 8010082:	2e00      	cmp	r6, #0
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	d028      	beq.n	80100da <__d2b+0x86>
 8010088:	4668      	mov	r0, sp
 801008a:	9600      	str	r6, [sp, #0]
 801008c:	f7ff fd06 	bl	800fa9c <__lo0bits>
 8010090:	9900      	ldr	r1, [sp, #0]
 8010092:	b300      	cbz	r0, 80100d6 <__d2b+0x82>
 8010094:	9a01      	ldr	r2, [sp, #4]
 8010096:	f1c0 0320 	rsb	r3, r0, #32
 801009a:	fa02 f303 	lsl.w	r3, r2, r3
 801009e:	430b      	orrs	r3, r1
 80100a0:	40c2      	lsrs	r2, r0
 80100a2:	6163      	str	r3, [r4, #20]
 80100a4:	9201      	str	r2, [sp, #4]
 80100a6:	9b01      	ldr	r3, [sp, #4]
 80100a8:	61a3      	str	r3, [r4, #24]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	bf14      	ite	ne
 80100ae:	2202      	movne	r2, #2
 80100b0:	2201      	moveq	r2, #1
 80100b2:	6122      	str	r2, [r4, #16]
 80100b4:	b1d5      	cbz	r5, 80100ec <__d2b+0x98>
 80100b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80100ba:	4405      	add	r5, r0
 80100bc:	f8c9 5000 	str.w	r5, [r9]
 80100c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80100c4:	f8c8 0000 	str.w	r0, [r8]
 80100c8:	4620      	mov	r0, r4
 80100ca:	b003      	add	sp, #12
 80100cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100d4:	e7d5      	b.n	8010082 <__d2b+0x2e>
 80100d6:	6161      	str	r1, [r4, #20]
 80100d8:	e7e5      	b.n	80100a6 <__d2b+0x52>
 80100da:	a801      	add	r0, sp, #4
 80100dc:	f7ff fcde 	bl	800fa9c <__lo0bits>
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	6163      	str	r3, [r4, #20]
 80100e4:	2201      	movs	r2, #1
 80100e6:	6122      	str	r2, [r4, #16]
 80100e8:	3020      	adds	r0, #32
 80100ea:	e7e3      	b.n	80100b4 <__d2b+0x60>
 80100ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100f4:	f8c9 0000 	str.w	r0, [r9]
 80100f8:	6918      	ldr	r0, [r3, #16]
 80100fa:	f7ff fcaf 	bl	800fa5c <__hi0bits>
 80100fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010102:	e7df      	b.n	80100c4 <__d2b+0x70>
 8010104:	08011e44 	.word	0x08011e44
 8010108:	08011f30 	.word	0x08011f30

0801010c <__ratio>:
 801010c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	4688      	mov	r8, r1
 8010112:	4669      	mov	r1, sp
 8010114:	4681      	mov	r9, r0
 8010116:	f7ff ff4d 	bl	800ffb4 <__b2d>
 801011a:	a901      	add	r1, sp, #4
 801011c:	4640      	mov	r0, r8
 801011e:	ec55 4b10 	vmov	r4, r5, d0
 8010122:	f7ff ff47 	bl	800ffb4 <__b2d>
 8010126:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801012a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801012e:	eba3 0c02 	sub.w	ip, r3, r2
 8010132:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010136:	1a9b      	subs	r3, r3, r2
 8010138:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801013c:	ec51 0b10 	vmov	r0, r1, d0
 8010140:	2b00      	cmp	r3, #0
 8010142:	bfd6      	itet	le
 8010144:	460a      	movle	r2, r1
 8010146:	462a      	movgt	r2, r5
 8010148:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801014c:	468b      	mov	fp, r1
 801014e:	462f      	mov	r7, r5
 8010150:	bfd4      	ite	le
 8010152:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010156:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801015a:	4620      	mov	r0, r4
 801015c:	ee10 2a10 	vmov	r2, s0
 8010160:	465b      	mov	r3, fp
 8010162:	4639      	mov	r1, r7
 8010164:	f7f0 fb82 	bl	800086c <__aeabi_ddiv>
 8010168:	ec41 0b10 	vmov	d0, r0, r1
 801016c:	b003      	add	sp, #12
 801016e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010172 <__copybits>:
 8010172:	3901      	subs	r1, #1
 8010174:	b570      	push	{r4, r5, r6, lr}
 8010176:	1149      	asrs	r1, r1, #5
 8010178:	6914      	ldr	r4, [r2, #16]
 801017a:	3101      	adds	r1, #1
 801017c:	f102 0314 	add.w	r3, r2, #20
 8010180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010184:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010188:	1f05      	subs	r5, r0, #4
 801018a:	42a3      	cmp	r3, r4
 801018c:	d30c      	bcc.n	80101a8 <__copybits+0x36>
 801018e:	1aa3      	subs	r3, r4, r2
 8010190:	3b11      	subs	r3, #17
 8010192:	f023 0303 	bic.w	r3, r3, #3
 8010196:	3211      	adds	r2, #17
 8010198:	42a2      	cmp	r2, r4
 801019a:	bf88      	it	hi
 801019c:	2300      	movhi	r3, #0
 801019e:	4418      	add	r0, r3
 80101a0:	2300      	movs	r3, #0
 80101a2:	4288      	cmp	r0, r1
 80101a4:	d305      	bcc.n	80101b2 <__copybits+0x40>
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80101ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80101b0:	e7eb      	b.n	801018a <__copybits+0x18>
 80101b2:	f840 3b04 	str.w	r3, [r0], #4
 80101b6:	e7f4      	b.n	80101a2 <__copybits+0x30>

080101b8 <__any_on>:
 80101b8:	f100 0214 	add.w	r2, r0, #20
 80101bc:	6900      	ldr	r0, [r0, #16]
 80101be:	114b      	asrs	r3, r1, #5
 80101c0:	4298      	cmp	r0, r3
 80101c2:	b510      	push	{r4, lr}
 80101c4:	db11      	blt.n	80101ea <__any_on+0x32>
 80101c6:	dd0a      	ble.n	80101de <__any_on+0x26>
 80101c8:	f011 011f 	ands.w	r1, r1, #31
 80101cc:	d007      	beq.n	80101de <__any_on+0x26>
 80101ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101d2:	fa24 f001 	lsr.w	r0, r4, r1
 80101d6:	fa00 f101 	lsl.w	r1, r0, r1
 80101da:	428c      	cmp	r4, r1
 80101dc:	d10b      	bne.n	80101f6 <__any_on+0x3e>
 80101de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d803      	bhi.n	80101ee <__any_on+0x36>
 80101e6:	2000      	movs	r0, #0
 80101e8:	bd10      	pop	{r4, pc}
 80101ea:	4603      	mov	r3, r0
 80101ec:	e7f7      	b.n	80101de <__any_on+0x26>
 80101ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101f2:	2900      	cmp	r1, #0
 80101f4:	d0f5      	beq.n	80101e2 <__any_on+0x2a>
 80101f6:	2001      	movs	r0, #1
 80101f8:	e7f6      	b.n	80101e8 <__any_on+0x30>

080101fa <_calloc_r>:
 80101fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101fc:	fba1 2402 	umull	r2, r4, r1, r2
 8010200:	b94c      	cbnz	r4, 8010216 <_calloc_r+0x1c>
 8010202:	4611      	mov	r1, r2
 8010204:	9201      	str	r2, [sp, #4]
 8010206:	f000 f87b 	bl	8010300 <_malloc_r>
 801020a:	9a01      	ldr	r2, [sp, #4]
 801020c:	4605      	mov	r5, r0
 801020e:	b930      	cbnz	r0, 801021e <_calloc_r+0x24>
 8010210:	4628      	mov	r0, r5
 8010212:	b003      	add	sp, #12
 8010214:	bd30      	pop	{r4, r5, pc}
 8010216:	220c      	movs	r2, #12
 8010218:	6002      	str	r2, [r0, #0]
 801021a:	2500      	movs	r5, #0
 801021c:	e7f8      	b.n	8010210 <_calloc_r+0x16>
 801021e:	4621      	mov	r1, r4
 8010220:	f7fb fd5c 	bl	800bcdc <memset>
 8010224:	e7f4      	b.n	8010210 <_calloc_r+0x16>
	...

08010228 <_free_r>:
 8010228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801022a:	2900      	cmp	r1, #0
 801022c:	d044      	beq.n	80102b8 <_free_r+0x90>
 801022e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010232:	9001      	str	r0, [sp, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	f1a1 0404 	sub.w	r4, r1, #4
 801023a:	bfb8      	it	lt
 801023c:	18e4      	addlt	r4, r4, r3
 801023e:	f001 f821 	bl	8011284 <__malloc_lock>
 8010242:	4a1e      	ldr	r2, [pc, #120]	; (80102bc <_free_r+0x94>)
 8010244:	9801      	ldr	r0, [sp, #4]
 8010246:	6813      	ldr	r3, [r2, #0]
 8010248:	b933      	cbnz	r3, 8010258 <_free_r+0x30>
 801024a:	6063      	str	r3, [r4, #4]
 801024c:	6014      	str	r4, [r2, #0]
 801024e:	b003      	add	sp, #12
 8010250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010254:	f001 b81c 	b.w	8011290 <__malloc_unlock>
 8010258:	42a3      	cmp	r3, r4
 801025a:	d908      	bls.n	801026e <_free_r+0x46>
 801025c:	6825      	ldr	r5, [r4, #0]
 801025e:	1961      	adds	r1, r4, r5
 8010260:	428b      	cmp	r3, r1
 8010262:	bf01      	itttt	eq
 8010264:	6819      	ldreq	r1, [r3, #0]
 8010266:	685b      	ldreq	r3, [r3, #4]
 8010268:	1949      	addeq	r1, r1, r5
 801026a:	6021      	streq	r1, [r4, #0]
 801026c:	e7ed      	b.n	801024a <_free_r+0x22>
 801026e:	461a      	mov	r2, r3
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	b10b      	cbz	r3, 8010278 <_free_r+0x50>
 8010274:	42a3      	cmp	r3, r4
 8010276:	d9fa      	bls.n	801026e <_free_r+0x46>
 8010278:	6811      	ldr	r1, [r2, #0]
 801027a:	1855      	adds	r5, r2, r1
 801027c:	42a5      	cmp	r5, r4
 801027e:	d10b      	bne.n	8010298 <_free_r+0x70>
 8010280:	6824      	ldr	r4, [r4, #0]
 8010282:	4421      	add	r1, r4
 8010284:	1854      	adds	r4, r2, r1
 8010286:	42a3      	cmp	r3, r4
 8010288:	6011      	str	r1, [r2, #0]
 801028a:	d1e0      	bne.n	801024e <_free_r+0x26>
 801028c:	681c      	ldr	r4, [r3, #0]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	6053      	str	r3, [r2, #4]
 8010292:	4421      	add	r1, r4
 8010294:	6011      	str	r1, [r2, #0]
 8010296:	e7da      	b.n	801024e <_free_r+0x26>
 8010298:	d902      	bls.n	80102a0 <_free_r+0x78>
 801029a:	230c      	movs	r3, #12
 801029c:	6003      	str	r3, [r0, #0]
 801029e:	e7d6      	b.n	801024e <_free_r+0x26>
 80102a0:	6825      	ldr	r5, [r4, #0]
 80102a2:	1961      	adds	r1, r4, r5
 80102a4:	428b      	cmp	r3, r1
 80102a6:	bf04      	itt	eq
 80102a8:	6819      	ldreq	r1, [r3, #0]
 80102aa:	685b      	ldreq	r3, [r3, #4]
 80102ac:	6063      	str	r3, [r4, #4]
 80102ae:	bf04      	itt	eq
 80102b0:	1949      	addeq	r1, r1, r5
 80102b2:	6021      	streq	r1, [r4, #0]
 80102b4:	6054      	str	r4, [r2, #4]
 80102b6:	e7ca      	b.n	801024e <_free_r+0x26>
 80102b8:	b003      	add	sp, #12
 80102ba:	bd30      	pop	{r4, r5, pc}
 80102bc:	200068b8 	.word	0x200068b8

080102c0 <sbrk_aligned>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	4e0e      	ldr	r6, [pc, #56]	; (80102fc <sbrk_aligned+0x3c>)
 80102c4:	460c      	mov	r4, r1
 80102c6:	6831      	ldr	r1, [r6, #0]
 80102c8:	4605      	mov	r5, r0
 80102ca:	b911      	cbnz	r1, 80102d2 <sbrk_aligned+0x12>
 80102cc:	f000 fd28 	bl	8010d20 <_sbrk_r>
 80102d0:	6030      	str	r0, [r6, #0]
 80102d2:	4621      	mov	r1, r4
 80102d4:	4628      	mov	r0, r5
 80102d6:	f000 fd23 	bl	8010d20 <_sbrk_r>
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	d00a      	beq.n	80102f4 <sbrk_aligned+0x34>
 80102de:	1cc4      	adds	r4, r0, #3
 80102e0:	f024 0403 	bic.w	r4, r4, #3
 80102e4:	42a0      	cmp	r0, r4
 80102e6:	d007      	beq.n	80102f8 <sbrk_aligned+0x38>
 80102e8:	1a21      	subs	r1, r4, r0
 80102ea:	4628      	mov	r0, r5
 80102ec:	f000 fd18 	bl	8010d20 <_sbrk_r>
 80102f0:	3001      	adds	r0, #1
 80102f2:	d101      	bne.n	80102f8 <sbrk_aligned+0x38>
 80102f4:	f04f 34ff 	mov.w	r4, #4294967295
 80102f8:	4620      	mov	r0, r4
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	200068bc 	.word	0x200068bc

08010300 <_malloc_r>:
 8010300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010304:	1ccd      	adds	r5, r1, #3
 8010306:	f025 0503 	bic.w	r5, r5, #3
 801030a:	3508      	adds	r5, #8
 801030c:	2d0c      	cmp	r5, #12
 801030e:	bf38      	it	cc
 8010310:	250c      	movcc	r5, #12
 8010312:	2d00      	cmp	r5, #0
 8010314:	4607      	mov	r7, r0
 8010316:	db01      	blt.n	801031c <_malloc_r+0x1c>
 8010318:	42a9      	cmp	r1, r5
 801031a:	d905      	bls.n	8010328 <_malloc_r+0x28>
 801031c:	230c      	movs	r3, #12
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	2600      	movs	r6, #0
 8010322:	4630      	mov	r0, r6
 8010324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010328:	4e2e      	ldr	r6, [pc, #184]	; (80103e4 <_malloc_r+0xe4>)
 801032a:	f000 ffab 	bl	8011284 <__malloc_lock>
 801032e:	6833      	ldr	r3, [r6, #0]
 8010330:	461c      	mov	r4, r3
 8010332:	bb34      	cbnz	r4, 8010382 <_malloc_r+0x82>
 8010334:	4629      	mov	r1, r5
 8010336:	4638      	mov	r0, r7
 8010338:	f7ff ffc2 	bl	80102c0 <sbrk_aligned>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	4604      	mov	r4, r0
 8010340:	d14d      	bne.n	80103de <_malloc_r+0xde>
 8010342:	6834      	ldr	r4, [r6, #0]
 8010344:	4626      	mov	r6, r4
 8010346:	2e00      	cmp	r6, #0
 8010348:	d140      	bne.n	80103cc <_malloc_r+0xcc>
 801034a:	6823      	ldr	r3, [r4, #0]
 801034c:	4631      	mov	r1, r6
 801034e:	4638      	mov	r0, r7
 8010350:	eb04 0803 	add.w	r8, r4, r3
 8010354:	f000 fce4 	bl	8010d20 <_sbrk_r>
 8010358:	4580      	cmp	r8, r0
 801035a:	d13a      	bne.n	80103d2 <_malloc_r+0xd2>
 801035c:	6821      	ldr	r1, [r4, #0]
 801035e:	3503      	adds	r5, #3
 8010360:	1a6d      	subs	r5, r5, r1
 8010362:	f025 0503 	bic.w	r5, r5, #3
 8010366:	3508      	adds	r5, #8
 8010368:	2d0c      	cmp	r5, #12
 801036a:	bf38      	it	cc
 801036c:	250c      	movcc	r5, #12
 801036e:	4629      	mov	r1, r5
 8010370:	4638      	mov	r0, r7
 8010372:	f7ff ffa5 	bl	80102c0 <sbrk_aligned>
 8010376:	3001      	adds	r0, #1
 8010378:	d02b      	beq.n	80103d2 <_malloc_r+0xd2>
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	442b      	add	r3, r5
 801037e:	6023      	str	r3, [r4, #0]
 8010380:	e00e      	b.n	80103a0 <_malloc_r+0xa0>
 8010382:	6822      	ldr	r2, [r4, #0]
 8010384:	1b52      	subs	r2, r2, r5
 8010386:	d41e      	bmi.n	80103c6 <_malloc_r+0xc6>
 8010388:	2a0b      	cmp	r2, #11
 801038a:	d916      	bls.n	80103ba <_malloc_r+0xba>
 801038c:	1961      	adds	r1, r4, r5
 801038e:	42a3      	cmp	r3, r4
 8010390:	6025      	str	r5, [r4, #0]
 8010392:	bf18      	it	ne
 8010394:	6059      	strne	r1, [r3, #4]
 8010396:	6863      	ldr	r3, [r4, #4]
 8010398:	bf08      	it	eq
 801039a:	6031      	streq	r1, [r6, #0]
 801039c:	5162      	str	r2, [r4, r5]
 801039e:	604b      	str	r3, [r1, #4]
 80103a0:	4638      	mov	r0, r7
 80103a2:	f104 060b 	add.w	r6, r4, #11
 80103a6:	f000 ff73 	bl	8011290 <__malloc_unlock>
 80103aa:	f026 0607 	bic.w	r6, r6, #7
 80103ae:	1d23      	adds	r3, r4, #4
 80103b0:	1af2      	subs	r2, r6, r3
 80103b2:	d0b6      	beq.n	8010322 <_malloc_r+0x22>
 80103b4:	1b9b      	subs	r3, r3, r6
 80103b6:	50a3      	str	r3, [r4, r2]
 80103b8:	e7b3      	b.n	8010322 <_malloc_r+0x22>
 80103ba:	6862      	ldr	r2, [r4, #4]
 80103bc:	42a3      	cmp	r3, r4
 80103be:	bf0c      	ite	eq
 80103c0:	6032      	streq	r2, [r6, #0]
 80103c2:	605a      	strne	r2, [r3, #4]
 80103c4:	e7ec      	b.n	80103a0 <_malloc_r+0xa0>
 80103c6:	4623      	mov	r3, r4
 80103c8:	6864      	ldr	r4, [r4, #4]
 80103ca:	e7b2      	b.n	8010332 <_malloc_r+0x32>
 80103cc:	4634      	mov	r4, r6
 80103ce:	6876      	ldr	r6, [r6, #4]
 80103d0:	e7b9      	b.n	8010346 <_malloc_r+0x46>
 80103d2:	230c      	movs	r3, #12
 80103d4:	603b      	str	r3, [r7, #0]
 80103d6:	4638      	mov	r0, r7
 80103d8:	f000 ff5a 	bl	8011290 <__malloc_unlock>
 80103dc:	e7a1      	b.n	8010322 <_malloc_r+0x22>
 80103de:	6025      	str	r5, [r4, #0]
 80103e0:	e7de      	b.n	80103a0 <_malloc_r+0xa0>
 80103e2:	bf00      	nop
 80103e4:	200068b8 	.word	0x200068b8

080103e8 <__ssputs_r>:
 80103e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ec:	688e      	ldr	r6, [r1, #8]
 80103ee:	429e      	cmp	r6, r3
 80103f0:	4682      	mov	sl, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	4690      	mov	r8, r2
 80103f6:	461f      	mov	r7, r3
 80103f8:	d838      	bhi.n	801046c <__ssputs_r+0x84>
 80103fa:	898a      	ldrh	r2, [r1, #12]
 80103fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010400:	d032      	beq.n	8010468 <__ssputs_r+0x80>
 8010402:	6825      	ldr	r5, [r4, #0]
 8010404:	6909      	ldr	r1, [r1, #16]
 8010406:	eba5 0901 	sub.w	r9, r5, r1
 801040a:	6965      	ldr	r5, [r4, #20]
 801040c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010414:	3301      	adds	r3, #1
 8010416:	444b      	add	r3, r9
 8010418:	106d      	asrs	r5, r5, #1
 801041a:	429d      	cmp	r5, r3
 801041c:	bf38      	it	cc
 801041e:	461d      	movcc	r5, r3
 8010420:	0553      	lsls	r3, r2, #21
 8010422:	d531      	bpl.n	8010488 <__ssputs_r+0xa0>
 8010424:	4629      	mov	r1, r5
 8010426:	f7ff ff6b 	bl	8010300 <_malloc_r>
 801042a:	4606      	mov	r6, r0
 801042c:	b950      	cbnz	r0, 8010444 <__ssputs_r+0x5c>
 801042e:	230c      	movs	r3, #12
 8010430:	f8ca 3000 	str.w	r3, [sl]
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801043a:	81a3      	strh	r3, [r4, #12]
 801043c:	f04f 30ff 	mov.w	r0, #4294967295
 8010440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010444:	6921      	ldr	r1, [r4, #16]
 8010446:	464a      	mov	r2, r9
 8010448:	f7fb fc3a 	bl	800bcc0 <memcpy>
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010456:	81a3      	strh	r3, [r4, #12]
 8010458:	6126      	str	r6, [r4, #16]
 801045a:	6165      	str	r5, [r4, #20]
 801045c:	444e      	add	r6, r9
 801045e:	eba5 0509 	sub.w	r5, r5, r9
 8010462:	6026      	str	r6, [r4, #0]
 8010464:	60a5      	str	r5, [r4, #8]
 8010466:	463e      	mov	r6, r7
 8010468:	42be      	cmp	r6, r7
 801046a:	d900      	bls.n	801046e <__ssputs_r+0x86>
 801046c:	463e      	mov	r6, r7
 801046e:	6820      	ldr	r0, [r4, #0]
 8010470:	4632      	mov	r2, r6
 8010472:	4641      	mov	r1, r8
 8010474:	f000 feeb 	bl	801124e <memmove>
 8010478:	68a3      	ldr	r3, [r4, #8]
 801047a:	1b9b      	subs	r3, r3, r6
 801047c:	60a3      	str	r3, [r4, #8]
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	4433      	add	r3, r6
 8010482:	6023      	str	r3, [r4, #0]
 8010484:	2000      	movs	r0, #0
 8010486:	e7db      	b.n	8010440 <__ssputs_r+0x58>
 8010488:	462a      	mov	r2, r5
 801048a:	f000 ff07 	bl	801129c <_realloc_r>
 801048e:	4606      	mov	r6, r0
 8010490:	2800      	cmp	r0, #0
 8010492:	d1e1      	bne.n	8010458 <__ssputs_r+0x70>
 8010494:	6921      	ldr	r1, [r4, #16]
 8010496:	4650      	mov	r0, sl
 8010498:	f7ff fec6 	bl	8010228 <_free_r>
 801049c:	e7c7      	b.n	801042e <__ssputs_r+0x46>
	...

080104a0 <_svfiprintf_r>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	4698      	mov	r8, r3
 80104a6:	898b      	ldrh	r3, [r1, #12]
 80104a8:	061b      	lsls	r3, r3, #24
 80104aa:	b09d      	sub	sp, #116	; 0x74
 80104ac:	4607      	mov	r7, r0
 80104ae:	460d      	mov	r5, r1
 80104b0:	4614      	mov	r4, r2
 80104b2:	d50e      	bpl.n	80104d2 <_svfiprintf_r+0x32>
 80104b4:	690b      	ldr	r3, [r1, #16]
 80104b6:	b963      	cbnz	r3, 80104d2 <_svfiprintf_r+0x32>
 80104b8:	2140      	movs	r1, #64	; 0x40
 80104ba:	f7ff ff21 	bl	8010300 <_malloc_r>
 80104be:	6028      	str	r0, [r5, #0]
 80104c0:	6128      	str	r0, [r5, #16]
 80104c2:	b920      	cbnz	r0, 80104ce <_svfiprintf_r+0x2e>
 80104c4:	230c      	movs	r3, #12
 80104c6:	603b      	str	r3, [r7, #0]
 80104c8:	f04f 30ff 	mov.w	r0, #4294967295
 80104cc:	e0d1      	b.n	8010672 <_svfiprintf_r+0x1d2>
 80104ce:	2340      	movs	r3, #64	; 0x40
 80104d0:	616b      	str	r3, [r5, #20]
 80104d2:	2300      	movs	r3, #0
 80104d4:	9309      	str	r3, [sp, #36]	; 0x24
 80104d6:	2320      	movs	r3, #32
 80104d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80104e0:	2330      	movs	r3, #48	; 0x30
 80104e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801068c <_svfiprintf_r+0x1ec>
 80104e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104ea:	f04f 0901 	mov.w	r9, #1
 80104ee:	4623      	mov	r3, r4
 80104f0:	469a      	mov	sl, r3
 80104f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f6:	b10a      	cbz	r2, 80104fc <_svfiprintf_r+0x5c>
 80104f8:	2a25      	cmp	r2, #37	; 0x25
 80104fa:	d1f9      	bne.n	80104f0 <_svfiprintf_r+0x50>
 80104fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010500:	d00b      	beq.n	801051a <_svfiprintf_r+0x7a>
 8010502:	465b      	mov	r3, fp
 8010504:	4622      	mov	r2, r4
 8010506:	4629      	mov	r1, r5
 8010508:	4638      	mov	r0, r7
 801050a:	f7ff ff6d 	bl	80103e8 <__ssputs_r>
 801050e:	3001      	adds	r0, #1
 8010510:	f000 80aa 	beq.w	8010668 <_svfiprintf_r+0x1c8>
 8010514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010516:	445a      	add	r2, fp
 8010518:	9209      	str	r2, [sp, #36]	; 0x24
 801051a:	f89a 3000 	ldrb.w	r3, [sl]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f000 80a2 	beq.w	8010668 <_svfiprintf_r+0x1c8>
 8010524:	2300      	movs	r3, #0
 8010526:	f04f 32ff 	mov.w	r2, #4294967295
 801052a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801052e:	f10a 0a01 	add.w	sl, sl, #1
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	9307      	str	r3, [sp, #28]
 8010536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801053a:	931a      	str	r3, [sp, #104]	; 0x68
 801053c:	4654      	mov	r4, sl
 801053e:	2205      	movs	r2, #5
 8010540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010544:	4851      	ldr	r0, [pc, #324]	; (801068c <_svfiprintf_r+0x1ec>)
 8010546:	f7ef fe5b 	bl	8000200 <memchr>
 801054a:	9a04      	ldr	r2, [sp, #16]
 801054c:	b9d8      	cbnz	r0, 8010586 <_svfiprintf_r+0xe6>
 801054e:	06d0      	lsls	r0, r2, #27
 8010550:	bf44      	itt	mi
 8010552:	2320      	movmi	r3, #32
 8010554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010558:	0711      	lsls	r1, r2, #28
 801055a:	bf44      	itt	mi
 801055c:	232b      	movmi	r3, #43	; 0x2b
 801055e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010562:	f89a 3000 	ldrb.w	r3, [sl]
 8010566:	2b2a      	cmp	r3, #42	; 0x2a
 8010568:	d015      	beq.n	8010596 <_svfiprintf_r+0xf6>
 801056a:	9a07      	ldr	r2, [sp, #28]
 801056c:	4654      	mov	r4, sl
 801056e:	2000      	movs	r0, #0
 8010570:	f04f 0c0a 	mov.w	ip, #10
 8010574:	4621      	mov	r1, r4
 8010576:	f811 3b01 	ldrb.w	r3, [r1], #1
 801057a:	3b30      	subs	r3, #48	; 0x30
 801057c:	2b09      	cmp	r3, #9
 801057e:	d94e      	bls.n	801061e <_svfiprintf_r+0x17e>
 8010580:	b1b0      	cbz	r0, 80105b0 <_svfiprintf_r+0x110>
 8010582:	9207      	str	r2, [sp, #28]
 8010584:	e014      	b.n	80105b0 <_svfiprintf_r+0x110>
 8010586:	eba0 0308 	sub.w	r3, r0, r8
 801058a:	fa09 f303 	lsl.w	r3, r9, r3
 801058e:	4313      	orrs	r3, r2
 8010590:	9304      	str	r3, [sp, #16]
 8010592:	46a2      	mov	sl, r4
 8010594:	e7d2      	b.n	801053c <_svfiprintf_r+0x9c>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	1d19      	adds	r1, r3, #4
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	9103      	str	r1, [sp, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	bfbb      	ittet	lt
 80105a2:	425b      	neglt	r3, r3
 80105a4:	f042 0202 	orrlt.w	r2, r2, #2
 80105a8:	9307      	strge	r3, [sp, #28]
 80105aa:	9307      	strlt	r3, [sp, #28]
 80105ac:	bfb8      	it	lt
 80105ae:	9204      	strlt	r2, [sp, #16]
 80105b0:	7823      	ldrb	r3, [r4, #0]
 80105b2:	2b2e      	cmp	r3, #46	; 0x2e
 80105b4:	d10c      	bne.n	80105d0 <_svfiprintf_r+0x130>
 80105b6:	7863      	ldrb	r3, [r4, #1]
 80105b8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ba:	d135      	bne.n	8010628 <_svfiprintf_r+0x188>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	1d1a      	adds	r2, r3, #4
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	9203      	str	r2, [sp, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	bfb8      	it	lt
 80105c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80105cc:	3402      	adds	r4, #2
 80105ce:	9305      	str	r3, [sp, #20]
 80105d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801069c <_svfiprintf_r+0x1fc>
 80105d4:	7821      	ldrb	r1, [r4, #0]
 80105d6:	2203      	movs	r2, #3
 80105d8:	4650      	mov	r0, sl
 80105da:	f7ef fe11 	bl	8000200 <memchr>
 80105de:	b140      	cbz	r0, 80105f2 <_svfiprintf_r+0x152>
 80105e0:	2340      	movs	r3, #64	; 0x40
 80105e2:	eba0 000a 	sub.w	r0, r0, sl
 80105e6:	fa03 f000 	lsl.w	r0, r3, r0
 80105ea:	9b04      	ldr	r3, [sp, #16]
 80105ec:	4303      	orrs	r3, r0
 80105ee:	3401      	adds	r4, #1
 80105f0:	9304      	str	r3, [sp, #16]
 80105f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f6:	4826      	ldr	r0, [pc, #152]	; (8010690 <_svfiprintf_r+0x1f0>)
 80105f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105fc:	2206      	movs	r2, #6
 80105fe:	f7ef fdff 	bl	8000200 <memchr>
 8010602:	2800      	cmp	r0, #0
 8010604:	d038      	beq.n	8010678 <_svfiprintf_r+0x1d8>
 8010606:	4b23      	ldr	r3, [pc, #140]	; (8010694 <_svfiprintf_r+0x1f4>)
 8010608:	bb1b      	cbnz	r3, 8010652 <_svfiprintf_r+0x1b2>
 801060a:	9b03      	ldr	r3, [sp, #12]
 801060c:	3307      	adds	r3, #7
 801060e:	f023 0307 	bic.w	r3, r3, #7
 8010612:	3308      	adds	r3, #8
 8010614:	9303      	str	r3, [sp, #12]
 8010616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010618:	4433      	add	r3, r6
 801061a:	9309      	str	r3, [sp, #36]	; 0x24
 801061c:	e767      	b.n	80104ee <_svfiprintf_r+0x4e>
 801061e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010622:	460c      	mov	r4, r1
 8010624:	2001      	movs	r0, #1
 8010626:	e7a5      	b.n	8010574 <_svfiprintf_r+0xd4>
 8010628:	2300      	movs	r3, #0
 801062a:	3401      	adds	r4, #1
 801062c:	9305      	str	r3, [sp, #20]
 801062e:	4619      	mov	r1, r3
 8010630:	f04f 0c0a 	mov.w	ip, #10
 8010634:	4620      	mov	r0, r4
 8010636:	f810 2b01 	ldrb.w	r2, [r0], #1
 801063a:	3a30      	subs	r2, #48	; 0x30
 801063c:	2a09      	cmp	r2, #9
 801063e:	d903      	bls.n	8010648 <_svfiprintf_r+0x1a8>
 8010640:	2b00      	cmp	r3, #0
 8010642:	d0c5      	beq.n	80105d0 <_svfiprintf_r+0x130>
 8010644:	9105      	str	r1, [sp, #20]
 8010646:	e7c3      	b.n	80105d0 <_svfiprintf_r+0x130>
 8010648:	fb0c 2101 	mla	r1, ip, r1, r2
 801064c:	4604      	mov	r4, r0
 801064e:	2301      	movs	r3, #1
 8010650:	e7f0      	b.n	8010634 <_svfiprintf_r+0x194>
 8010652:	ab03      	add	r3, sp, #12
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	462a      	mov	r2, r5
 8010658:	4b0f      	ldr	r3, [pc, #60]	; (8010698 <_svfiprintf_r+0x1f8>)
 801065a:	a904      	add	r1, sp, #16
 801065c:	4638      	mov	r0, r7
 801065e:	f7fb fe57 	bl	800c310 <_printf_float>
 8010662:	1c42      	adds	r2, r0, #1
 8010664:	4606      	mov	r6, r0
 8010666:	d1d6      	bne.n	8010616 <_svfiprintf_r+0x176>
 8010668:	89ab      	ldrh	r3, [r5, #12]
 801066a:	065b      	lsls	r3, r3, #25
 801066c:	f53f af2c 	bmi.w	80104c8 <_svfiprintf_r+0x28>
 8010670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010672:	b01d      	add	sp, #116	; 0x74
 8010674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	462a      	mov	r2, r5
 801067e:	4b06      	ldr	r3, [pc, #24]	; (8010698 <_svfiprintf_r+0x1f8>)
 8010680:	a904      	add	r1, sp, #16
 8010682:	4638      	mov	r0, r7
 8010684:	f7fc f8e8 	bl	800c858 <_printf_i>
 8010688:	e7eb      	b.n	8010662 <_svfiprintf_r+0x1c2>
 801068a:	bf00      	nop
 801068c:	0801208c 	.word	0x0801208c
 8010690:	08012096 	.word	0x08012096
 8010694:	0800c311 	.word	0x0800c311
 8010698:	080103e9 	.word	0x080103e9
 801069c:	08012092 	.word	0x08012092

080106a0 <_sungetc_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	1c4b      	adds	r3, r1, #1
 80106a4:	4614      	mov	r4, r2
 80106a6:	d103      	bne.n	80106b0 <_sungetc_r+0x10>
 80106a8:	f04f 35ff 	mov.w	r5, #4294967295
 80106ac:	4628      	mov	r0, r5
 80106ae:	bd38      	pop	{r3, r4, r5, pc}
 80106b0:	8993      	ldrh	r3, [r2, #12]
 80106b2:	f023 0320 	bic.w	r3, r3, #32
 80106b6:	8193      	strh	r3, [r2, #12]
 80106b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106ba:	6852      	ldr	r2, [r2, #4]
 80106bc:	b2cd      	uxtb	r5, r1
 80106be:	b18b      	cbz	r3, 80106e4 <_sungetc_r+0x44>
 80106c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106c2:	4293      	cmp	r3, r2
 80106c4:	dd08      	ble.n	80106d8 <_sungetc_r+0x38>
 80106c6:	6823      	ldr	r3, [r4, #0]
 80106c8:	1e5a      	subs	r2, r3, #1
 80106ca:	6022      	str	r2, [r4, #0]
 80106cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80106d0:	6863      	ldr	r3, [r4, #4]
 80106d2:	3301      	adds	r3, #1
 80106d4:	6063      	str	r3, [r4, #4]
 80106d6:	e7e9      	b.n	80106ac <_sungetc_r+0xc>
 80106d8:	4621      	mov	r1, r4
 80106da:	f000 fb7d 	bl	8010dd8 <__submore>
 80106de:	2800      	cmp	r0, #0
 80106e0:	d0f1      	beq.n	80106c6 <_sungetc_r+0x26>
 80106e2:	e7e1      	b.n	80106a8 <_sungetc_r+0x8>
 80106e4:	6921      	ldr	r1, [r4, #16]
 80106e6:	6823      	ldr	r3, [r4, #0]
 80106e8:	b151      	cbz	r1, 8010700 <_sungetc_r+0x60>
 80106ea:	4299      	cmp	r1, r3
 80106ec:	d208      	bcs.n	8010700 <_sungetc_r+0x60>
 80106ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80106f2:	42a9      	cmp	r1, r5
 80106f4:	d104      	bne.n	8010700 <_sungetc_r+0x60>
 80106f6:	3b01      	subs	r3, #1
 80106f8:	3201      	adds	r2, #1
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	6062      	str	r2, [r4, #4]
 80106fe:	e7d5      	b.n	80106ac <_sungetc_r+0xc>
 8010700:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010708:	6363      	str	r3, [r4, #52]	; 0x34
 801070a:	2303      	movs	r3, #3
 801070c:	63a3      	str	r3, [r4, #56]	; 0x38
 801070e:	4623      	mov	r3, r4
 8010710:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	2301      	movs	r3, #1
 8010718:	e7dc      	b.n	80106d4 <_sungetc_r+0x34>

0801071a <__ssrefill_r>:
 801071a:	b510      	push	{r4, lr}
 801071c:	460c      	mov	r4, r1
 801071e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010720:	b169      	cbz	r1, 801073e <__ssrefill_r+0x24>
 8010722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010726:	4299      	cmp	r1, r3
 8010728:	d001      	beq.n	801072e <__ssrefill_r+0x14>
 801072a:	f7ff fd7d 	bl	8010228 <_free_r>
 801072e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010730:	6063      	str	r3, [r4, #4]
 8010732:	2000      	movs	r0, #0
 8010734:	6360      	str	r0, [r4, #52]	; 0x34
 8010736:	b113      	cbz	r3, 801073e <__ssrefill_r+0x24>
 8010738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801073a:	6023      	str	r3, [r4, #0]
 801073c:	bd10      	pop	{r4, pc}
 801073e:	6923      	ldr	r3, [r4, #16]
 8010740:	6023      	str	r3, [r4, #0]
 8010742:	2300      	movs	r3, #0
 8010744:	6063      	str	r3, [r4, #4]
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	f043 0320 	orr.w	r3, r3, #32
 801074c:	81a3      	strh	r3, [r4, #12]
 801074e:	f04f 30ff 	mov.w	r0, #4294967295
 8010752:	e7f3      	b.n	801073c <__ssrefill_r+0x22>

08010754 <__ssvfiscanf_r>:
 8010754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010758:	460c      	mov	r4, r1
 801075a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801075e:	2100      	movs	r1, #0
 8010760:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010764:	49a6      	ldr	r1, [pc, #664]	; (8010a00 <__ssvfiscanf_r+0x2ac>)
 8010766:	91a0      	str	r1, [sp, #640]	; 0x280
 8010768:	f10d 0804 	add.w	r8, sp, #4
 801076c:	49a5      	ldr	r1, [pc, #660]	; (8010a04 <__ssvfiscanf_r+0x2b0>)
 801076e:	4fa6      	ldr	r7, [pc, #664]	; (8010a08 <__ssvfiscanf_r+0x2b4>)
 8010770:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010a0c <__ssvfiscanf_r+0x2b8>
 8010774:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010778:	4606      	mov	r6, r0
 801077a:	91a1      	str	r1, [sp, #644]	; 0x284
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	7813      	ldrb	r3, [r2, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 815a 	beq.w	8010a3a <__ssvfiscanf_r+0x2e6>
 8010786:	5dd9      	ldrb	r1, [r3, r7]
 8010788:	f011 0108 	ands.w	r1, r1, #8
 801078c:	f102 0501 	add.w	r5, r2, #1
 8010790:	d019      	beq.n	80107c6 <__ssvfiscanf_r+0x72>
 8010792:	6863      	ldr	r3, [r4, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dd0f      	ble.n	80107b8 <__ssvfiscanf_r+0x64>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	781a      	ldrb	r2, [r3, #0]
 801079c:	5cba      	ldrb	r2, [r7, r2]
 801079e:	0712      	lsls	r2, r2, #28
 80107a0:	d401      	bmi.n	80107a6 <__ssvfiscanf_r+0x52>
 80107a2:	462a      	mov	r2, r5
 80107a4:	e7eb      	b.n	801077e <__ssvfiscanf_r+0x2a>
 80107a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107a8:	3201      	adds	r2, #1
 80107aa:	9245      	str	r2, [sp, #276]	; 0x114
 80107ac:	6862      	ldr	r2, [r4, #4]
 80107ae:	3301      	adds	r3, #1
 80107b0:	3a01      	subs	r2, #1
 80107b2:	6062      	str	r2, [r4, #4]
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	e7ec      	b.n	8010792 <__ssvfiscanf_r+0x3e>
 80107b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107ba:	4621      	mov	r1, r4
 80107bc:	4630      	mov	r0, r6
 80107be:	4798      	blx	r3
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d0e9      	beq.n	8010798 <__ssvfiscanf_r+0x44>
 80107c4:	e7ed      	b.n	80107a2 <__ssvfiscanf_r+0x4e>
 80107c6:	2b25      	cmp	r3, #37	; 0x25
 80107c8:	d012      	beq.n	80107f0 <__ssvfiscanf_r+0x9c>
 80107ca:	469a      	mov	sl, r3
 80107cc:	6863      	ldr	r3, [r4, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f340 8091 	ble.w	80108f6 <__ssvfiscanf_r+0x1a2>
 80107d4:	6822      	ldr	r2, [r4, #0]
 80107d6:	7813      	ldrb	r3, [r2, #0]
 80107d8:	4553      	cmp	r3, sl
 80107da:	f040 812e 	bne.w	8010a3a <__ssvfiscanf_r+0x2e6>
 80107de:	6863      	ldr	r3, [r4, #4]
 80107e0:	3b01      	subs	r3, #1
 80107e2:	6063      	str	r3, [r4, #4]
 80107e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80107e6:	3201      	adds	r2, #1
 80107e8:	3301      	adds	r3, #1
 80107ea:	6022      	str	r2, [r4, #0]
 80107ec:	9345      	str	r3, [sp, #276]	; 0x114
 80107ee:	e7d8      	b.n	80107a2 <__ssvfiscanf_r+0x4e>
 80107f0:	9141      	str	r1, [sp, #260]	; 0x104
 80107f2:	9143      	str	r1, [sp, #268]	; 0x10c
 80107f4:	7853      	ldrb	r3, [r2, #1]
 80107f6:	2b2a      	cmp	r3, #42	; 0x2a
 80107f8:	bf02      	ittt	eq
 80107fa:	2310      	moveq	r3, #16
 80107fc:	1c95      	addeq	r5, r2, #2
 80107fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8010800:	220a      	movs	r2, #10
 8010802:	46aa      	mov	sl, r5
 8010804:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010808:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801080c:	2b09      	cmp	r3, #9
 801080e:	d91d      	bls.n	801084c <__ssvfiscanf_r+0xf8>
 8010810:	487e      	ldr	r0, [pc, #504]	; (8010a0c <__ssvfiscanf_r+0x2b8>)
 8010812:	2203      	movs	r2, #3
 8010814:	f7ef fcf4 	bl	8000200 <memchr>
 8010818:	b140      	cbz	r0, 801082c <__ssvfiscanf_r+0xd8>
 801081a:	2301      	movs	r3, #1
 801081c:	eba0 0009 	sub.w	r0, r0, r9
 8010820:	fa03 f000 	lsl.w	r0, r3, r0
 8010824:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010826:	4318      	orrs	r0, r3
 8010828:	9041      	str	r0, [sp, #260]	; 0x104
 801082a:	4655      	mov	r5, sl
 801082c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010830:	2b78      	cmp	r3, #120	; 0x78
 8010832:	d806      	bhi.n	8010842 <__ssvfiscanf_r+0xee>
 8010834:	2b57      	cmp	r3, #87	; 0x57
 8010836:	d810      	bhi.n	801085a <__ssvfiscanf_r+0x106>
 8010838:	2b25      	cmp	r3, #37	; 0x25
 801083a:	d0c6      	beq.n	80107ca <__ssvfiscanf_r+0x76>
 801083c:	d856      	bhi.n	80108ec <__ssvfiscanf_r+0x198>
 801083e:	2b00      	cmp	r3, #0
 8010840:	d064      	beq.n	801090c <__ssvfiscanf_r+0x1b8>
 8010842:	2303      	movs	r3, #3
 8010844:	9347      	str	r3, [sp, #284]	; 0x11c
 8010846:	230a      	movs	r3, #10
 8010848:	9342      	str	r3, [sp, #264]	; 0x108
 801084a:	e071      	b.n	8010930 <__ssvfiscanf_r+0x1dc>
 801084c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801084e:	fb02 1103 	mla	r1, r2, r3, r1
 8010852:	3930      	subs	r1, #48	; 0x30
 8010854:	9143      	str	r1, [sp, #268]	; 0x10c
 8010856:	4655      	mov	r5, sl
 8010858:	e7d3      	b.n	8010802 <__ssvfiscanf_r+0xae>
 801085a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801085e:	2a20      	cmp	r2, #32
 8010860:	d8ef      	bhi.n	8010842 <__ssvfiscanf_r+0xee>
 8010862:	a101      	add	r1, pc, #4	; (adr r1, 8010868 <__ssvfiscanf_r+0x114>)
 8010864:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010868:	0801091b 	.word	0x0801091b
 801086c:	08010843 	.word	0x08010843
 8010870:	08010843 	.word	0x08010843
 8010874:	08010979 	.word	0x08010979
 8010878:	08010843 	.word	0x08010843
 801087c:	08010843 	.word	0x08010843
 8010880:	08010843 	.word	0x08010843
 8010884:	08010843 	.word	0x08010843
 8010888:	08010843 	.word	0x08010843
 801088c:	08010843 	.word	0x08010843
 8010890:	08010843 	.word	0x08010843
 8010894:	0801098f 	.word	0x0801098f
 8010898:	08010965 	.word	0x08010965
 801089c:	080108f3 	.word	0x080108f3
 80108a0:	080108f3 	.word	0x080108f3
 80108a4:	080108f3 	.word	0x080108f3
 80108a8:	08010843 	.word	0x08010843
 80108ac:	08010969 	.word	0x08010969
 80108b0:	08010843 	.word	0x08010843
 80108b4:	08010843 	.word	0x08010843
 80108b8:	08010843 	.word	0x08010843
 80108bc:	08010843 	.word	0x08010843
 80108c0:	0801099f 	.word	0x0801099f
 80108c4:	08010971 	.word	0x08010971
 80108c8:	08010913 	.word	0x08010913
 80108cc:	08010843 	.word	0x08010843
 80108d0:	08010843 	.word	0x08010843
 80108d4:	0801099b 	.word	0x0801099b
 80108d8:	08010843 	.word	0x08010843
 80108dc:	08010965 	.word	0x08010965
 80108e0:	08010843 	.word	0x08010843
 80108e4:	08010843 	.word	0x08010843
 80108e8:	0801091b 	.word	0x0801091b
 80108ec:	3b45      	subs	r3, #69	; 0x45
 80108ee:	2b02      	cmp	r3, #2
 80108f0:	d8a7      	bhi.n	8010842 <__ssvfiscanf_r+0xee>
 80108f2:	2305      	movs	r3, #5
 80108f4:	e01b      	b.n	801092e <__ssvfiscanf_r+0x1da>
 80108f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80108f8:	4621      	mov	r1, r4
 80108fa:	4630      	mov	r0, r6
 80108fc:	4798      	blx	r3
 80108fe:	2800      	cmp	r0, #0
 8010900:	f43f af68 	beq.w	80107d4 <__ssvfiscanf_r+0x80>
 8010904:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010906:	2800      	cmp	r0, #0
 8010908:	f040 808d 	bne.w	8010a26 <__ssvfiscanf_r+0x2d2>
 801090c:	f04f 30ff 	mov.w	r0, #4294967295
 8010910:	e08f      	b.n	8010a32 <__ssvfiscanf_r+0x2de>
 8010912:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010914:	f042 0220 	orr.w	r2, r2, #32
 8010918:	9241      	str	r2, [sp, #260]	; 0x104
 801091a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801091c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010920:	9241      	str	r2, [sp, #260]	; 0x104
 8010922:	2210      	movs	r2, #16
 8010924:	2b6f      	cmp	r3, #111	; 0x6f
 8010926:	9242      	str	r2, [sp, #264]	; 0x108
 8010928:	bf34      	ite	cc
 801092a:	2303      	movcc	r3, #3
 801092c:	2304      	movcs	r3, #4
 801092e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010930:	6863      	ldr	r3, [r4, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	dd42      	ble.n	80109bc <__ssvfiscanf_r+0x268>
 8010936:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010938:	0659      	lsls	r1, r3, #25
 801093a:	d404      	bmi.n	8010946 <__ssvfiscanf_r+0x1f2>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	781a      	ldrb	r2, [r3, #0]
 8010940:	5cba      	ldrb	r2, [r7, r2]
 8010942:	0712      	lsls	r2, r2, #28
 8010944:	d441      	bmi.n	80109ca <__ssvfiscanf_r+0x276>
 8010946:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010948:	2b02      	cmp	r3, #2
 801094a:	dc50      	bgt.n	80109ee <__ssvfiscanf_r+0x29a>
 801094c:	466b      	mov	r3, sp
 801094e:	4622      	mov	r2, r4
 8010950:	a941      	add	r1, sp, #260	; 0x104
 8010952:	4630      	mov	r0, r6
 8010954:	f000 f876 	bl	8010a44 <_scanf_chars>
 8010958:	2801      	cmp	r0, #1
 801095a:	d06e      	beq.n	8010a3a <__ssvfiscanf_r+0x2e6>
 801095c:	2802      	cmp	r0, #2
 801095e:	f47f af20 	bne.w	80107a2 <__ssvfiscanf_r+0x4e>
 8010962:	e7cf      	b.n	8010904 <__ssvfiscanf_r+0x1b0>
 8010964:	220a      	movs	r2, #10
 8010966:	e7dd      	b.n	8010924 <__ssvfiscanf_r+0x1d0>
 8010968:	2300      	movs	r3, #0
 801096a:	9342      	str	r3, [sp, #264]	; 0x108
 801096c:	2303      	movs	r3, #3
 801096e:	e7de      	b.n	801092e <__ssvfiscanf_r+0x1da>
 8010970:	2308      	movs	r3, #8
 8010972:	9342      	str	r3, [sp, #264]	; 0x108
 8010974:	2304      	movs	r3, #4
 8010976:	e7da      	b.n	801092e <__ssvfiscanf_r+0x1da>
 8010978:	4629      	mov	r1, r5
 801097a:	4640      	mov	r0, r8
 801097c:	f000 f9e0 	bl	8010d40 <__sccl>
 8010980:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010986:	9341      	str	r3, [sp, #260]	; 0x104
 8010988:	4605      	mov	r5, r0
 801098a:	2301      	movs	r3, #1
 801098c:	e7cf      	b.n	801092e <__ssvfiscanf_r+0x1da>
 801098e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010994:	9341      	str	r3, [sp, #260]	; 0x104
 8010996:	2300      	movs	r3, #0
 8010998:	e7c9      	b.n	801092e <__ssvfiscanf_r+0x1da>
 801099a:	2302      	movs	r3, #2
 801099c:	e7c7      	b.n	801092e <__ssvfiscanf_r+0x1da>
 801099e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80109a0:	06c3      	lsls	r3, r0, #27
 80109a2:	f53f aefe 	bmi.w	80107a2 <__ssvfiscanf_r+0x4e>
 80109a6:	9b00      	ldr	r3, [sp, #0]
 80109a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80109aa:	1d19      	adds	r1, r3, #4
 80109ac:	9100      	str	r1, [sp, #0]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f010 0f01 	tst.w	r0, #1
 80109b4:	bf14      	ite	ne
 80109b6:	801a      	strhne	r2, [r3, #0]
 80109b8:	601a      	streq	r2, [r3, #0]
 80109ba:	e6f2      	b.n	80107a2 <__ssvfiscanf_r+0x4e>
 80109bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80109be:	4621      	mov	r1, r4
 80109c0:	4630      	mov	r0, r6
 80109c2:	4798      	blx	r3
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d0b6      	beq.n	8010936 <__ssvfiscanf_r+0x1e2>
 80109c8:	e79c      	b.n	8010904 <__ssvfiscanf_r+0x1b0>
 80109ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80109cc:	3201      	adds	r2, #1
 80109ce:	9245      	str	r2, [sp, #276]	; 0x114
 80109d0:	6862      	ldr	r2, [r4, #4]
 80109d2:	3a01      	subs	r2, #1
 80109d4:	2a00      	cmp	r2, #0
 80109d6:	6062      	str	r2, [r4, #4]
 80109d8:	dd02      	ble.n	80109e0 <__ssvfiscanf_r+0x28c>
 80109da:	3301      	adds	r3, #1
 80109dc:	6023      	str	r3, [r4, #0]
 80109de:	e7ad      	b.n	801093c <__ssvfiscanf_r+0x1e8>
 80109e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80109e2:	4621      	mov	r1, r4
 80109e4:	4630      	mov	r0, r6
 80109e6:	4798      	blx	r3
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d0a7      	beq.n	801093c <__ssvfiscanf_r+0x1e8>
 80109ec:	e78a      	b.n	8010904 <__ssvfiscanf_r+0x1b0>
 80109ee:	2b04      	cmp	r3, #4
 80109f0:	dc0e      	bgt.n	8010a10 <__ssvfiscanf_r+0x2bc>
 80109f2:	466b      	mov	r3, sp
 80109f4:	4622      	mov	r2, r4
 80109f6:	a941      	add	r1, sp, #260	; 0x104
 80109f8:	4630      	mov	r0, r6
 80109fa:	f000 f87d 	bl	8010af8 <_scanf_i>
 80109fe:	e7ab      	b.n	8010958 <__ssvfiscanf_r+0x204>
 8010a00:	080106a1 	.word	0x080106a1
 8010a04:	0801071b 	.word	0x0801071b
 8010a08:	08011cc5 	.word	0x08011cc5
 8010a0c:	08012092 	.word	0x08012092
 8010a10:	4b0b      	ldr	r3, [pc, #44]	; (8010a40 <__ssvfiscanf_r+0x2ec>)
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f43f aec5 	beq.w	80107a2 <__ssvfiscanf_r+0x4e>
 8010a18:	466b      	mov	r3, sp
 8010a1a:	4622      	mov	r2, r4
 8010a1c:	a941      	add	r1, sp, #260	; 0x104
 8010a1e:	4630      	mov	r0, r6
 8010a20:	f7fc f840 	bl	800caa4 <_scanf_float>
 8010a24:	e798      	b.n	8010958 <__ssvfiscanf_r+0x204>
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010a2c:	bf18      	it	ne
 8010a2e:	f04f 30ff 	movne.w	r0, #4294967295
 8010a32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010a3c:	e7f9      	b.n	8010a32 <__ssvfiscanf_r+0x2de>
 8010a3e:	bf00      	nop
 8010a40:	0800caa5 	.word	0x0800caa5

08010a44 <_scanf_chars>:
 8010a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a48:	4615      	mov	r5, r2
 8010a4a:	688a      	ldr	r2, [r1, #8]
 8010a4c:	4680      	mov	r8, r0
 8010a4e:	460c      	mov	r4, r1
 8010a50:	b932      	cbnz	r2, 8010a60 <_scanf_chars+0x1c>
 8010a52:	698a      	ldr	r2, [r1, #24]
 8010a54:	2a00      	cmp	r2, #0
 8010a56:	bf0c      	ite	eq
 8010a58:	2201      	moveq	r2, #1
 8010a5a:	f04f 32ff 	movne.w	r2, #4294967295
 8010a5e:	608a      	str	r2, [r1, #8]
 8010a60:	6822      	ldr	r2, [r4, #0]
 8010a62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010af4 <_scanf_chars+0xb0>
 8010a66:	06d1      	lsls	r1, r2, #27
 8010a68:	bf5f      	itttt	pl
 8010a6a:	681a      	ldrpl	r2, [r3, #0]
 8010a6c:	1d11      	addpl	r1, r2, #4
 8010a6e:	6019      	strpl	r1, [r3, #0]
 8010a70:	6816      	ldrpl	r6, [r2, #0]
 8010a72:	2700      	movs	r7, #0
 8010a74:	69a0      	ldr	r0, [r4, #24]
 8010a76:	b188      	cbz	r0, 8010a9c <_scanf_chars+0x58>
 8010a78:	2801      	cmp	r0, #1
 8010a7a:	d107      	bne.n	8010a8c <_scanf_chars+0x48>
 8010a7c:	682a      	ldr	r2, [r5, #0]
 8010a7e:	7811      	ldrb	r1, [r2, #0]
 8010a80:	6962      	ldr	r2, [r4, #20]
 8010a82:	5c52      	ldrb	r2, [r2, r1]
 8010a84:	b952      	cbnz	r2, 8010a9c <_scanf_chars+0x58>
 8010a86:	2f00      	cmp	r7, #0
 8010a88:	d031      	beq.n	8010aee <_scanf_chars+0xaa>
 8010a8a:	e022      	b.n	8010ad2 <_scanf_chars+0x8e>
 8010a8c:	2802      	cmp	r0, #2
 8010a8e:	d120      	bne.n	8010ad2 <_scanf_chars+0x8e>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010a98:	071b      	lsls	r3, r3, #28
 8010a9a:	d41a      	bmi.n	8010ad2 <_scanf_chars+0x8e>
 8010a9c:	6823      	ldr	r3, [r4, #0]
 8010a9e:	06da      	lsls	r2, r3, #27
 8010aa0:	bf5e      	ittt	pl
 8010aa2:	682b      	ldrpl	r3, [r5, #0]
 8010aa4:	781b      	ldrbpl	r3, [r3, #0]
 8010aa6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010aaa:	682a      	ldr	r2, [r5, #0]
 8010aac:	686b      	ldr	r3, [r5, #4]
 8010aae:	3201      	adds	r2, #1
 8010ab0:	602a      	str	r2, [r5, #0]
 8010ab2:	68a2      	ldr	r2, [r4, #8]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	3a01      	subs	r2, #1
 8010ab8:	606b      	str	r3, [r5, #4]
 8010aba:	3701      	adds	r7, #1
 8010abc:	60a2      	str	r2, [r4, #8]
 8010abe:	b142      	cbz	r2, 8010ad2 <_scanf_chars+0x8e>
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dcd7      	bgt.n	8010a74 <_scanf_chars+0x30>
 8010ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010ac8:	4629      	mov	r1, r5
 8010aca:	4640      	mov	r0, r8
 8010acc:	4798      	blx	r3
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d0d0      	beq.n	8010a74 <_scanf_chars+0x30>
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	f013 0310 	ands.w	r3, r3, #16
 8010ad8:	d105      	bne.n	8010ae6 <_scanf_chars+0xa2>
 8010ada:	68e2      	ldr	r2, [r4, #12]
 8010adc:	3201      	adds	r2, #1
 8010ade:	60e2      	str	r2, [r4, #12]
 8010ae0:	69a2      	ldr	r2, [r4, #24]
 8010ae2:	b102      	cbz	r2, 8010ae6 <_scanf_chars+0xa2>
 8010ae4:	7033      	strb	r3, [r6, #0]
 8010ae6:	6923      	ldr	r3, [r4, #16]
 8010ae8:	443b      	add	r3, r7
 8010aea:	6123      	str	r3, [r4, #16]
 8010aec:	2000      	movs	r0, #0
 8010aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010af2:	bf00      	nop
 8010af4:	08011cc5 	.word	0x08011cc5

08010af8 <_scanf_i>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	4698      	mov	r8, r3
 8010afe:	4b76      	ldr	r3, [pc, #472]	; (8010cd8 <_scanf_i+0x1e0>)
 8010b00:	460c      	mov	r4, r1
 8010b02:	4682      	mov	sl, r0
 8010b04:	4616      	mov	r6, r2
 8010b06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	ab03      	add	r3, sp, #12
 8010b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010b12:	4b72      	ldr	r3, [pc, #456]	; (8010cdc <_scanf_i+0x1e4>)
 8010b14:	69a1      	ldr	r1, [r4, #24]
 8010b16:	4a72      	ldr	r2, [pc, #456]	; (8010ce0 <_scanf_i+0x1e8>)
 8010b18:	2903      	cmp	r1, #3
 8010b1a:	bf18      	it	ne
 8010b1c:	461a      	movne	r2, r3
 8010b1e:	68a3      	ldr	r3, [r4, #8]
 8010b20:	9201      	str	r2, [sp, #4]
 8010b22:	1e5a      	subs	r2, r3, #1
 8010b24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010b28:	bf88      	it	hi
 8010b2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010b2e:	4627      	mov	r7, r4
 8010b30:	bf82      	ittt	hi
 8010b32:	eb03 0905 	addhi.w	r9, r3, r5
 8010b36:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010b3a:	60a3      	strhi	r3, [r4, #8]
 8010b3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010b40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010b44:	bf98      	it	ls
 8010b46:	f04f 0900 	movls.w	r9, #0
 8010b4a:	6023      	str	r3, [r4, #0]
 8010b4c:	463d      	mov	r5, r7
 8010b4e:	f04f 0b00 	mov.w	fp, #0
 8010b52:	6831      	ldr	r1, [r6, #0]
 8010b54:	ab03      	add	r3, sp, #12
 8010b56:	7809      	ldrb	r1, [r1, #0]
 8010b58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010b5c:	2202      	movs	r2, #2
 8010b5e:	f7ef fb4f 	bl	8000200 <memchr>
 8010b62:	b328      	cbz	r0, 8010bb0 <_scanf_i+0xb8>
 8010b64:	f1bb 0f01 	cmp.w	fp, #1
 8010b68:	d159      	bne.n	8010c1e <_scanf_i+0x126>
 8010b6a:	6862      	ldr	r2, [r4, #4]
 8010b6c:	b92a      	cbnz	r2, 8010b7a <_scanf_i+0x82>
 8010b6e:	6822      	ldr	r2, [r4, #0]
 8010b70:	2308      	movs	r3, #8
 8010b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b76:	6063      	str	r3, [r4, #4]
 8010b78:	6022      	str	r2, [r4, #0]
 8010b7a:	6822      	ldr	r2, [r4, #0]
 8010b7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010b80:	6022      	str	r2, [r4, #0]
 8010b82:	68a2      	ldr	r2, [r4, #8]
 8010b84:	1e51      	subs	r1, r2, #1
 8010b86:	60a1      	str	r1, [r4, #8]
 8010b88:	b192      	cbz	r2, 8010bb0 <_scanf_i+0xb8>
 8010b8a:	6832      	ldr	r2, [r6, #0]
 8010b8c:	1c51      	adds	r1, r2, #1
 8010b8e:	6031      	str	r1, [r6, #0]
 8010b90:	7812      	ldrb	r2, [r2, #0]
 8010b92:	f805 2b01 	strb.w	r2, [r5], #1
 8010b96:	6872      	ldr	r2, [r6, #4]
 8010b98:	3a01      	subs	r2, #1
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	6072      	str	r2, [r6, #4]
 8010b9e:	dc07      	bgt.n	8010bb0 <_scanf_i+0xb8>
 8010ba0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010ba4:	4631      	mov	r1, r6
 8010ba6:	4650      	mov	r0, sl
 8010ba8:	4790      	blx	r2
 8010baa:	2800      	cmp	r0, #0
 8010bac:	f040 8085 	bne.w	8010cba <_scanf_i+0x1c2>
 8010bb0:	f10b 0b01 	add.w	fp, fp, #1
 8010bb4:	f1bb 0f03 	cmp.w	fp, #3
 8010bb8:	d1cb      	bne.n	8010b52 <_scanf_i+0x5a>
 8010bba:	6863      	ldr	r3, [r4, #4]
 8010bbc:	b90b      	cbnz	r3, 8010bc2 <_scanf_i+0xca>
 8010bbe:	230a      	movs	r3, #10
 8010bc0:	6063      	str	r3, [r4, #4]
 8010bc2:	6863      	ldr	r3, [r4, #4]
 8010bc4:	4947      	ldr	r1, [pc, #284]	; (8010ce4 <_scanf_i+0x1ec>)
 8010bc6:	6960      	ldr	r0, [r4, #20]
 8010bc8:	1ac9      	subs	r1, r1, r3
 8010bca:	f000 f8b9 	bl	8010d40 <__sccl>
 8010bce:	f04f 0b00 	mov.w	fp, #0
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	6822      	ldr	r2, [r4, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d03d      	beq.n	8010c56 <_scanf_i+0x15e>
 8010bda:	6831      	ldr	r1, [r6, #0]
 8010bdc:	6960      	ldr	r0, [r4, #20]
 8010bde:	f891 c000 	ldrb.w	ip, [r1]
 8010be2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d035      	beq.n	8010c56 <_scanf_i+0x15e>
 8010bea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010bee:	d124      	bne.n	8010c3a <_scanf_i+0x142>
 8010bf0:	0510      	lsls	r0, r2, #20
 8010bf2:	d522      	bpl.n	8010c3a <_scanf_i+0x142>
 8010bf4:	f10b 0b01 	add.w	fp, fp, #1
 8010bf8:	f1b9 0f00 	cmp.w	r9, #0
 8010bfc:	d003      	beq.n	8010c06 <_scanf_i+0x10e>
 8010bfe:	3301      	adds	r3, #1
 8010c00:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c04:	60a3      	str	r3, [r4, #8]
 8010c06:	6873      	ldr	r3, [r6, #4]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	6073      	str	r3, [r6, #4]
 8010c0e:	dd1b      	ble.n	8010c48 <_scanf_i+0x150>
 8010c10:	6833      	ldr	r3, [r6, #0]
 8010c12:	3301      	adds	r3, #1
 8010c14:	6033      	str	r3, [r6, #0]
 8010c16:	68a3      	ldr	r3, [r4, #8]
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	60a3      	str	r3, [r4, #8]
 8010c1c:	e7d9      	b.n	8010bd2 <_scanf_i+0xda>
 8010c1e:	f1bb 0f02 	cmp.w	fp, #2
 8010c22:	d1ae      	bne.n	8010b82 <_scanf_i+0x8a>
 8010c24:	6822      	ldr	r2, [r4, #0]
 8010c26:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010c2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010c2e:	d1bf      	bne.n	8010bb0 <_scanf_i+0xb8>
 8010c30:	2310      	movs	r3, #16
 8010c32:	6063      	str	r3, [r4, #4]
 8010c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c38:	e7a2      	b.n	8010b80 <_scanf_i+0x88>
 8010c3a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010c3e:	6022      	str	r2, [r4, #0]
 8010c40:	780b      	ldrb	r3, [r1, #0]
 8010c42:	f805 3b01 	strb.w	r3, [r5], #1
 8010c46:	e7de      	b.n	8010c06 <_scanf_i+0x10e>
 8010c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010c4c:	4631      	mov	r1, r6
 8010c4e:	4650      	mov	r0, sl
 8010c50:	4798      	blx	r3
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d0df      	beq.n	8010c16 <_scanf_i+0x11e>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	05db      	lsls	r3, r3, #23
 8010c5a:	d50d      	bpl.n	8010c78 <_scanf_i+0x180>
 8010c5c:	42bd      	cmp	r5, r7
 8010c5e:	d909      	bls.n	8010c74 <_scanf_i+0x17c>
 8010c60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c68:	4632      	mov	r2, r6
 8010c6a:	4650      	mov	r0, sl
 8010c6c:	4798      	blx	r3
 8010c6e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010c72:	464d      	mov	r5, r9
 8010c74:	42bd      	cmp	r5, r7
 8010c76:	d02d      	beq.n	8010cd4 <_scanf_i+0x1dc>
 8010c78:	6822      	ldr	r2, [r4, #0]
 8010c7a:	f012 0210 	ands.w	r2, r2, #16
 8010c7e:	d113      	bne.n	8010ca8 <_scanf_i+0x1b0>
 8010c80:	702a      	strb	r2, [r5, #0]
 8010c82:	6863      	ldr	r3, [r4, #4]
 8010c84:	9e01      	ldr	r6, [sp, #4]
 8010c86:	4639      	mov	r1, r7
 8010c88:	4650      	mov	r0, sl
 8010c8a:	47b0      	blx	r6
 8010c8c:	6821      	ldr	r1, [r4, #0]
 8010c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c92:	f011 0f20 	tst.w	r1, #32
 8010c96:	d013      	beq.n	8010cc0 <_scanf_i+0x1c8>
 8010c98:	1d1a      	adds	r2, r3, #4
 8010c9a:	f8c8 2000 	str.w	r2, [r8]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	6018      	str	r0, [r3, #0]
 8010ca2:	68e3      	ldr	r3, [r4, #12]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	60e3      	str	r3, [r4, #12]
 8010ca8:	1bed      	subs	r5, r5, r7
 8010caa:	44ab      	add	fp, r5
 8010cac:	6925      	ldr	r5, [r4, #16]
 8010cae:	445d      	add	r5, fp
 8010cb0:	6125      	str	r5, [r4, #16]
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	b007      	add	sp, #28
 8010cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cba:	f04f 0b00 	mov.w	fp, #0
 8010cbe:	e7ca      	b.n	8010c56 <_scanf_i+0x15e>
 8010cc0:	1d1a      	adds	r2, r3, #4
 8010cc2:	f8c8 2000 	str.w	r2, [r8]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f011 0f01 	tst.w	r1, #1
 8010ccc:	bf14      	ite	ne
 8010cce:	8018      	strhne	r0, [r3, #0]
 8010cd0:	6018      	streq	r0, [r3, #0]
 8010cd2:	e7e6      	b.n	8010ca2 <_scanf_i+0x1aa>
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	e7ed      	b.n	8010cb4 <_scanf_i+0x1bc>
 8010cd8:	08011a30 	.word	0x08011a30
 8010cdc:	0800de99 	.word	0x0800de99
 8010ce0:	0800dd9d 	.word	0x0800dd9d
 8010ce4:	080120b6 	.word	0x080120b6

08010ce8 <_read_r>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4d07      	ldr	r5, [pc, #28]	; (8010d08 <_read_r+0x20>)
 8010cec:	4604      	mov	r4, r0
 8010cee:	4608      	mov	r0, r1
 8010cf0:	4611      	mov	r1, r2
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	602a      	str	r2, [r5, #0]
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	f7f2 faac 	bl	8003254 <_read>
 8010cfc:	1c43      	adds	r3, r0, #1
 8010cfe:	d102      	bne.n	8010d06 <_read_r+0x1e>
 8010d00:	682b      	ldr	r3, [r5, #0]
 8010d02:	b103      	cbz	r3, 8010d06 <_read_r+0x1e>
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	200068c0 	.word	0x200068c0
 8010d0c:	00000000 	.word	0x00000000

08010d10 <nan>:
 8010d10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010d18 <nan+0x8>
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	7ff80000 	.word	0x7ff80000

08010d20 <_sbrk_r>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	4d06      	ldr	r5, [pc, #24]	; (8010d3c <_sbrk_r+0x1c>)
 8010d24:	2300      	movs	r3, #0
 8010d26:	4604      	mov	r4, r0
 8010d28:	4608      	mov	r0, r1
 8010d2a:	602b      	str	r3, [r5, #0]
 8010d2c:	f7f2 fb00 	bl	8003330 <_sbrk>
 8010d30:	1c43      	adds	r3, r0, #1
 8010d32:	d102      	bne.n	8010d3a <_sbrk_r+0x1a>
 8010d34:	682b      	ldr	r3, [r5, #0]
 8010d36:	b103      	cbz	r3, 8010d3a <_sbrk_r+0x1a>
 8010d38:	6023      	str	r3, [r4, #0]
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	200068c0 	.word	0x200068c0

08010d40 <__sccl>:
 8010d40:	b570      	push	{r4, r5, r6, lr}
 8010d42:	780b      	ldrb	r3, [r1, #0]
 8010d44:	4604      	mov	r4, r0
 8010d46:	2b5e      	cmp	r3, #94	; 0x5e
 8010d48:	bf0b      	itete	eq
 8010d4a:	784b      	ldrbeq	r3, [r1, #1]
 8010d4c:	1c48      	addne	r0, r1, #1
 8010d4e:	1c88      	addeq	r0, r1, #2
 8010d50:	2200      	movne	r2, #0
 8010d52:	bf08      	it	eq
 8010d54:	2201      	moveq	r2, #1
 8010d56:	1e61      	subs	r1, r4, #1
 8010d58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010d5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010d60:	42a9      	cmp	r1, r5
 8010d62:	d1fb      	bne.n	8010d5c <__sccl+0x1c>
 8010d64:	b90b      	cbnz	r3, 8010d6a <__sccl+0x2a>
 8010d66:	3801      	subs	r0, #1
 8010d68:	bd70      	pop	{r4, r5, r6, pc}
 8010d6a:	f082 0201 	eor.w	r2, r2, #1
 8010d6e:	54e2      	strb	r2, [r4, r3]
 8010d70:	4605      	mov	r5, r0
 8010d72:	4628      	mov	r0, r5
 8010d74:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010d78:	292d      	cmp	r1, #45	; 0x2d
 8010d7a:	d006      	beq.n	8010d8a <__sccl+0x4a>
 8010d7c:	295d      	cmp	r1, #93	; 0x5d
 8010d7e:	d0f3      	beq.n	8010d68 <__sccl+0x28>
 8010d80:	b909      	cbnz	r1, 8010d86 <__sccl+0x46>
 8010d82:	4628      	mov	r0, r5
 8010d84:	e7f0      	b.n	8010d68 <__sccl+0x28>
 8010d86:	460b      	mov	r3, r1
 8010d88:	e7f1      	b.n	8010d6e <__sccl+0x2e>
 8010d8a:	786e      	ldrb	r6, [r5, #1]
 8010d8c:	2e5d      	cmp	r6, #93	; 0x5d
 8010d8e:	d0fa      	beq.n	8010d86 <__sccl+0x46>
 8010d90:	42b3      	cmp	r3, r6
 8010d92:	dcf8      	bgt.n	8010d86 <__sccl+0x46>
 8010d94:	3502      	adds	r5, #2
 8010d96:	4619      	mov	r1, r3
 8010d98:	3101      	adds	r1, #1
 8010d9a:	428e      	cmp	r6, r1
 8010d9c:	5462      	strb	r2, [r4, r1]
 8010d9e:	dcfb      	bgt.n	8010d98 <__sccl+0x58>
 8010da0:	1af1      	subs	r1, r6, r3
 8010da2:	3901      	subs	r1, #1
 8010da4:	1c58      	adds	r0, r3, #1
 8010da6:	42b3      	cmp	r3, r6
 8010da8:	bfa8      	it	ge
 8010daa:	2100      	movge	r1, #0
 8010dac:	1843      	adds	r3, r0, r1
 8010dae:	e7e0      	b.n	8010d72 <__sccl+0x32>

08010db0 <strncmp>:
 8010db0:	b510      	push	{r4, lr}
 8010db2:	b17a      	cbz	r2, 8010dd4 <strncmp+0x24>
 8010db4:	4603      	mov	r3, r0
 8010db6:	3901      	subs	r1, #1
 8010db8:	1884      	adds	r4, r0, r2
 8010dba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010dbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010dc2:	4290      	cmp	r0, r2
 8010dc4:	d101      	bne.n	8010dca <strncmp+0x1a>
 8010dc6:	42a3      	cmp	r3, r4
 8010dc8:	d101      	bne.n	8010dce <strncmp+0x1e>
 8010dca:	1a80      	subs	r0, r0, r2
 8010dcc:	bd10      	pop	{r4, pc}
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d1f3      	bne.n	8010dba <strncmp+0xa>
 8010dd2:	e7fa      	b.n	8010dca <strncmp+0x1a>
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	e7f9      	b.n	8010dcc <strncmp+0x1c>

08010dd8 <__submore>:
 8010dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ddc:	460c      	mov	r4, r1
 8010dde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010de4:	4299      	cmp	r1, r3
 8010de6:	d11d      	bne.n	8010e24 <__submore+0x4c>
 8010de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010dec:	f7ff fa88 	bl	8010300 <_malloc_r>
 8010df0:	b918      	cbnz	r0, 8010dfa <__submore+0x22>
 8010df2:	f04f 30ff 	mov.w	r0, #4294967295
 8010df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dfe:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010e04:	6360      	str	r0, [r4, #52]	; 0x34
 8010e06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010e0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010e0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010e12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010e1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010e1e:	6020      	str	r0, [r4, #0]
 8010e20:	2000      	movs	r0, #0
 8010e22:	e7e8      	b.n	8010df6 <__submore+0x1e>
 8010e24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010e26:	0077      	lsls	r7, r6, #1
 8010e28:	463a      	mov	r2, r7
 8010e2a:	f000 fa37 	bl	801129c <_realloc_r>
 8010e2e:	4605      	mov	r5, r0
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d0de      	beq.n	8010df2 <__submore+0x1a>
 8010e34:	eb00 0806 	add.w	r8, r0, r6
 8010e38:	4601      	mov	r1, r0
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	4640      	mov	r0, r8
 8010e3e:	f7fa ff3f 	bl	800bcc0 <memcpy>
 8010e42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010e46:	f8c4 8000 	str.w	r8, [r4]
 8010e4a:	e7e9      	b.n	8010e20 <__submore+0x48>

08010e4c <__ascii_wctomb>:
 8010e4c:	b149      	cbz	r1, 8010e62 <__ascii_wctomb+0x16>
 8010e4e:	2aff      	cmp	r2, #255	; 0xff
 8010e50:	bf85      	ittet	hi
 8010e52:	238a      	movhi	r3, #138	; 0x8a
 8010e54:	6003      	strhi	r3, [r0, #0]
 8010e56:	700a      	strbls	r2, [r1, #0]
 8010e58:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e5c:	bf98      	it	ls
 8010e5e:	2001      	movls	r0, #1
 8010e60:	4770      	bx	lr
 8010e62:	4608      	mov	r0, r1
 8010e64:	4770      	bx	lr
	...

08010e68 <__assert_func>:
 8010e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e6a:	4614      	mov	r4, r2
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4b09      	ldr	r3, [pc, #36]	; (8010e94 <__assert_func+0x2c>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	4605      	mov	r5, r0
 8010e74:	68d8      	ldr	r0, [r3, #12]
 8010e76:	b14c      	cbz	r4, 8010e8c <__assert_func+0x24>
 8010e78:	4b07      	ldr	r3, [pc, #28]	; (8010e98 <__assert_func+0x30>)
 8010e7a:	9100      	str	r1, [sp, #0]
 8010e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e80:	4906      	ldr	r1, [pc, #24]	; (8010e9c <__assert_func+0x34>)
 8010e82:	462b      	mov	r3, r5
 8010e84:	f000 f9b2 	bl	80111ec <fiprintf>
 8010e88:	f000 fc50 	bl	801172c <abort>
 8010e8c:	4b04      	ldr	r3, [pc, #16]	; (8010ea0 <__assert_func+0x38>)
 8010e8e:	461c      	mov	r4, r3
 8010e90:	e7f3      	b.n	8010e7a <__assert_func+0x12>
 8010e92:	bf00      	nop
 8010e94:	20000020 	.word	0x20000020
 8010e98:	080120b8 	.word	0x080120b8
 8010e9c:	080120c5 	.word	0x080120c5
 8010ea0:	080120f3 	.word	0x080120f3

08010ea4 <__env_lock>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	; (8010eac <__env_lock+0x8>)
 8010ea6:	f7fe bcaf 	b.w	800f808 <__retarget_lock_acquire_recursive>
 8010eaa:	bf00      	nop
 8010eac:	200068b0 	.word	0x200068b0

08010eb0 <__env_unlock>:
 8010eb0:	4801      	ldr	r0, [pc, #4]	; (8010eb8 <__env_unlock+0x8>)
 8010eb2:	f7fe bcab 	b.w	800f80c <__retarget_lock_release_recursive>
 8010eb6:	bf00      	nop
 8010eb8:	200068b0 	.word	0x200068b0

08010ebc <__sflush_r>:
 8010ebc:	898a      	ldrh	r2, [r1, #12]
 8010ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	0710      	lsls	r0, r2, #28
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	d458      	bmi.n	8010f7c <__sflush_r+0xc0>
 8010eca:	684b      	ldr	r3, [r1, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dc05      	bgt.n	8010edc <__sflush_r+0x20>
 8010ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	dc02      	bgt.n	8010edc <__sflush_r+0x20>
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ede:	2e00      	cmp	r6, #0
 8010ee0:	d0f9      	beq.n	8010ed6 <__sflush_r+0x1a>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ee8:	682f      	ldr	r7, [r5, #0]
 8010eea:	602b      	str	r3, [r5, #0]
 8010eec:	d032      	beq.n	8010f54 <__sflush_r+0x98>
 8010eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	075a      	lsls	r2, r3, #29
 8010ef4:	d505      	bpl.n	8010f02 <__sflush_r+0x46>
 8010ef6:	6863      	ldr	r3, [r4, #4]
 8010ef8:	1ac0      	subs	r0, r0, r3
 8010efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010efc:	b10b      	cbz	r3, 8010f02 <__sflush_r+0x46>
 8010efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f00:	1ac0      	subs	r0, r0, r3
 8010f02:	2300      	movs	r3, #0
 8010f04:	4602      	mov	r2, r0
 8010f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f08:	6a21      	ldr	r1, [r4, #32]
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	47b0      	blx	r6
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	89a3      	ldrh	r3, [r4, #12]
 8010f12:	d106      	bne.n	8010f22 <__sflush_r+0x66>
 8010f14:	6829      	ldr	r1, [r5, #0]
 8010f16:	291d      	cmp	r1, #29
 8010f18:	d82c      	bhi.n	8010f74 <__sflush_r+0xb8>
 8010f1a:	4a2a      	ldr	r2, [pc, #168]	; (8010fc4 <__sflush_r+0x108>)
 8010f1c:	40ca      	lsrs	r2, r1
 8010f1e:	07d6      	lsls	r6, r2, #31
 8010f20:	d528      	bpl.n	8010f74 <__sflush_r+0xb8>
 8010f22:	2200      	movs	r2, #0
 8010f24:	6062      	str	r2, [r4, #4]
 8010f26:	04d9      	lsls	r1, r3, #19
 8010f28:	6922      	ldr	r2, [r4, #16]
 8010f2a:	6022      	str	r2, [r4, #0]
 8010f2c:	d504      	bpl.n	8010f38 <__sflush_r+0x7c>
 8010f2e:	1c42      	adds	r2, r0, #1
 8010f30:	d101      	bne.n	8010f36 <__sflush_r+0x7a>
 8010f32:	682b      	ldr	r3, [r5, #0]
 8010f34:	b903      	cbnz	r3, 8010f38 <__sflush_r+0x7c>
 8010f36:	6560      	str	r0, [r4, #84]	; 0x54
 8010f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f3a:	602f      	str	r7, [r5, #0]
 8010f3c:	2900      	cmp	r1, #0
 8010f3e:	d0ca      	beq.n	8010ed6 <__sflush_r+0x1a>
 8010f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f44:	4299      	cmp	r1, r3
 8010f46:	d002      	beq.n	8010f4e <__sflush_r+0x92>
 8010f48:	4628      	mov	r0, r5
 8010f4a:	f7ff f96d 	bl	8010228 <_free_r>
 8010f4e:	2000      	movs	r0, #0
 8010f50:	6360      	str	r0, [r4, #52]	; 0x34
 8010f52:	e7c1      	b.n	8010ed8 <__sflush_r+0x1c>
 8010f54:	6a21      	ldr	r1, [r4, #32]
 8010f56:	2301      	movs	r3, #1
 8010f58:	4628      	mov	r0, r5
 8010f5a:	47b0      	blx	r6
 8010f5c:	1c41      	adds	r1, r0, #1
 8010f5e:	d1c7      	bne.n	8010ef0 <__sflush_r+0x34>
 8010f60:	682b      	ldr	r3, [r5, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d0c4      	beq.n	8010ef0 <__sflush_r+0x34>
 8010f66:	2b1d      	cmp	r3, #29
 8010f68:	d001      	beq.n	8010f6e <__sflush_r+0xb2>
 8010f6a:	2b16      	cmp	r3, #22
 8010f6c:	d101      	bne.n	8010f72 <__sflush_r+0xb6>
 8010f6e:	602f      	str	r7, [r5, #0]
 8010f70:	e7b1      	b.n	8010ed6 <__sflush_r+0x1a>
 8010f72:	89a3      	ldrh	r3, [r4, #12]
 8010f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f78:	81a3      	strh	r3, [r4, #12]
 8010f7a:	e7ad      	b.n	8010ed8 <__sflush_r+0x1c>
 8010f7c:	690f      	ldr	r7, [r1, #16]
 8010f7e:	2f00      	cmp	r7, #0
 8010f80:	d0a9      	beq.n	8010ed6 <__sflush_r+0x1a>
 8010f82:	0793      	lsls	r3, r2, #30
 8010f84:	680e      	ldr	r6, [r1, #0]
 8010f86:	bf08      	it	eq
 8010f88:	694b      	ldreq	r3, [r1, #20]
 8010f8a:	600f      	str	r7, [r1, #0]
 8010f8c:	bf18      	it	ne
 8010f8e:	2300      	movne	r3, #0
 8010f90:	eba6 0807 	sub.w	r8, r6, r7
 8010f94:	608b      	str	r3, [r1, #8]
 8010f96:	f1b8 0f00 	cmp.w	r8, #0
 8010f9a:	dd9c      	ble.n	8010ed6 <__sflush_r+0x1a>
 8010f9c:	6a21      	ldr	r1, [r4, #32]
 8010f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fa0:	4643      	mov	r3, r8
 8010fa2:	463a      	mov	r2, r7
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	47b0      	blx	r6
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	dc06      	bgt.n	8010fba <__sflush_r+0xfe>
 8010fac:	89a3      	ldrh	r3, [r4, #12]
 8010fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fb2:	81a3      	strh	r3, [r4, #12]
 8010fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb8:	e78e      	b.n	8010ed8 <__sflush_r+0x1c>
 8010fba:	4407      	add	r7, r0
 8010fbc:	eba8 0800 	sub.w	r8, r8, r0
 8010fc0:	e7e9      	b.n	8010f96 <__sflush_r+0xda>
 8010fc2:	bf00      	nop
 8010fc4:	20400001 	.word	0x20400001

08010fc8 <_fflush_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	690b      	ldr	r3, [r1, #16]
 8010fcc:	4605      	mov	r5, r0
 8010fce:	460c      	mov	r4, r1
 8010fd0:	b913      	cbnz	r3, 8010fd8 <_fflush_r+0x10>
 8010fd2:	2500      	movs	r5, #0
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	bd38      	pop	{r3, r4, r5, pc}
 8010fd8:	b118      	cbz	r0, 8010fe2 <_fflush_r+0x1a>
 8010fda:	6983      	ldr	r3, [r0, #24]
 8010fdc:	b90b      	cbnz	r3, 8010fe2 <_fflush_r+0x1a>
 8010fde:	f000 f887 	bl	80110f0 <__sinit>
 8010fe2:	4b14      	ldr	r3, [pc, #80]	; (8011034 <_fflush_r+0x6c>)
 8010fe4:	429c      	cmp	r4, r3
 8010fe6:	d11b      	bne.n	8011020 <_fflush_r+0x58>
 8010fe8:	686c      	ldr	r4, [r5, #4]
 8010fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d0ef      	beq.n	8010fd2 <_fflush_r+0xa>
 8010ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ff4:	07d0      	lsls	r0, r2, #31
 8010ff6:	d404      	bmi.n	8011002 <_fflush_r+0x3a>
 8010ff8:	0599      	lsls	r1, r3, #22
 8010ffa:	d402      	bmi.n	8011002 <_fflush_r+0x3a>
 8010ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ffe:	f7fe fc03 	bl	800f808 <__retarget_lock_acquire_recursive>
 8011002:	4628      	mov	r0, r5
 8011004:	4621      	mov	r1, r4
 8011006:	f7ff ff59 	bl	8010ebc <__sflush_r>
 801100a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801100c:	07da      	lsls	r2, r3, #31
 801100e:	4605      	mov	r5, r0
 8011010:	d4e0      	bmi.n	8010fd4 <_fflush_r+0xc>
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	059b      	lsls	r3, r3, #22
 8011016:	d4dd      	bmi.n	8010fd4 <_fflush_r+0xc>
 8011018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801101a:	f7fe fbf7 	bl	800f80c <__retarget_lock_release_recursive>
 801101e:	e7d9      	b.n	8010fd4 <_fflush_r+0xc>
 8011020:	4b05      	ldr	r3, [pc, #20]	; (8011038 <_fflush_r+0x70>)
 8011022:	429c      	cmp	r4, r3
 8011024:	d101      	bne.n	801102a <_fflush_r+0x62>
 8011026:	68ac      	ldr	r4, [r5, #8]
 8011028:	e7df      	b.n	8010fea <_fflush_r+0x22>
 801102a:	4b04      	ldr	r3, [pc, #16]	; (801103c <_fflush_r+0x74>)
 801102c:	429c      	cmp	r4, r3
 801102e:	bf08      	it	eq
 8011030:	68ec      	ldreq	r4, [r5, #12]
 8011032:	e7da      	b.n	8010fea <_fflush_r+0x22>
 8011034:	08012114 	.word	0x08012114
 8011038:	08012134 	.word	0x08012134
 801103c:	080120f4 	.word	0x080120f4

08011040 <std>:
 8011040:	2300      	movs	r3, #0
 8011042:	b510      	push	{r4, lr}
 8011044:	4604      	mov	r4, r0
 8011046:	e9c0 3300 	strd	r3, r3, [r0]
 801104a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801104e:	6083      	str	r3, [r0, #8]
 8011050:	8181      	strh	r1, [r0, #12]
 8011052:	6643      	str	r3, [r0, #100]	; 0x64
 8011054:	81c2      	strh	r2, [r0, #14]
 8011056:	6183      	str	r3, [r0, #24]
 8011058:	4619      	mov	r1, r3
 801105a:	2208      	movs	r2, #8
 801105c:	305c      	adds	r0, #92	; 0x5c
 801105e:	f7fa fe3d 	bl	800bcdc <memset>
 8011062:	4b05      	ldr	r3, [pc, #20]	; (8011078 <std+0x38>)
 8011064:	6263      	str	r3, [r4, #36]	; 0x24
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <std+0x3c>)
 8011068:	62a3      	str	r3, [r4, #40]	; 0x28
 801106a:	4b05      	ldr	r3, [pc, #20]	; (8011080 <std+0x40>)
 801106c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801106e:	4b05      	ldr	r3, [pc, #20]	; (8011084 <std+0x44>)
 8011070:	6224      	str	r4, [r4, #32]
 8011072:	6323      	str	r3, [r4, #48]	; 0x30
 8011074:	bd10      	pop	{r4, pc}
 8011076:	bf00      	nop
 8011078:	0800cf69 	.word	0x0800cf69
 801107c:	0800cf8f 	.word	0x0800cf8f
 8011080:	0800cfc7 	.word	0x0800cfc7
 8011084:	0800cfeb 	.word	0x0800cfeb

08011088 <_cleanup_r>:
 8011088:	4901      	ldr	r1, [pc, #4]	; (8011090 <_cleanup_r+0x8>)
 801108a:	f000 b8c1 	b.w	8011210 <_fwalk_reent>
 801108e:	bf00      	nop
 8011090:	08010fc9 	.word	0x08010fc9

08011094 <__sfmoreglue>:
 8011094:	b570      	push	{r4, r5, r6, lr}
 8011096:	2268      	movs	r2, #104	; 0x68
 8011098:	1e4d      	subs	r5, r1, #1
 801109a:	4355      	muls	r5, r2
 801109c:	460e      	mov	r6, r1
 801109e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110a2:	f7ff f92d 	bl	8010300 <_malloc_r>
 80110a6:	4604      	mov	r4, r0
 80110a8:	b140      	cbz	r0, 80110bc <__sfmoreglue+0x28>
 80110aa:	2100      	movs	r1, #0
 80110ac:	e9c0 1600 	strd	r1, r6, [r0]
 80110b0:	300c      	adds	r0, #12
 80110b2:	60a0      	str	r0, [r4, #8]
 80110b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110b8:	f7fa fe10 	bl	800bcdc <memset>
 80110bc:	4620      	mov	r0, r4
 80110be:	bd70      	pop	{r4, r5, r6, pc}

080110c0 <__sfp_lock_acquire>:
 80110c0:	4801      	ldr	r0, [pc, #4]	; (80110c8 <__sfp_lock_acquire+0x8>)
 80110c2:	f7fe bba1 	b.w	800f808 <__retarget_lock_acquire_recursive>
 80110c6:	bf00      	nop
 80110c8:	200068b2 	.word	0x200068b2

080110cc <__sfp_lock_release>:
 80110cc:	4801      	ldr	r0, [pc, #4]	; (80110d4 <__sfp_lock_release+0x8>)
 80110ce:	f7fe bb9d 	b.w	800f80c <__retarget_lock_release_recursive>
 80110d2:	bf00      	nop
 80110d4:	200068b2 	.word	0x200068b2

080110d8 <__sinit_lock_acquire>:
 80110d8:	4801      	ldr	r0, [pc, #4]	; (80110e0 <__sinit_lock_acquire+0x8>)
 80110da:	f7fe bb95 	b.w	800f808 <__retarget_lock_acquire_recursive>
 80110de:	bf00      	nop
 80110e0:	200068b3 	.word	0x200068b3

080110e4 <__sinit_lock_release>:
 80110e4:	4801      	ldr	r0, [pc, #4]	; (80110ec <__sinit_lock_release+0x8>)
 80110e6:	f7fe bb91 	b.w	800f80c <__retarget_lock_release_recursive>
 80110ea:	bf00      	nop
 80110ec:	200068b3 	.word	0x200068b3

080110f0 <__sinit>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	4604      	mov	r4, r0
 80110f4:	f7ff fff0 	bl	80110d8 <__sinit_lock_acquire>
 80110f8:	69a3      	ldr	r3, [r4, #24]
 80110fa:	b11b      	cbz	r3, 8011104 <__sinit+0x14>
 80110fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011100:	f7ff bff0 	b.w	80110e4 <__sinit_lock_release>
 8011104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011108:	6523      	str	r3, [r4, #80]	; 0x50
 801110a:	4b13      	ldr	r3, [pc, #76]	; (8011158 <__sinit+0x68>)
 801110c:	4a13      	ldr	r2, [pc, #76]	; (801115c <__sinit+0x6c>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	62a2      	str	r2, [r4, #40]	; 0x28
 8011112:	42a3      	cmp	r3, r4
 8011114:	bf04      	itt	eq
 8011116:	2301      	moveq	r3, #1
 8011118:	61a3      	streq	r3, [r4, #24]
 801111a:	4620      	mov	r0, r4
 801111c:	f000 f820 	bl	8011160 <__sfp>
 8011120:	6060      	str	r0, [r4, #4]
 8011122:	4620      	mov	r0, r4
 8011124:	f000 f81c 	bl	8011160 <__sfp>
 8011128:	60a0      	str	r0, [r4, #8]
 801112a:	4620      	mov	r0, r4
 801112c:	f000 f818 	bl	8011160 <__sfp>
 8011130:	2200      	movs	r2, #0
 8011132:	60e0      	str	r0, [r4, #12]
 8011134:	2104      	movs	r1, #4
 8011136:	6860      	ldr	r0, [r4, #4]
 8011138:	f7ff ff82 	bl	8011040 <std>
 801113c:	68a0      	ldr	r0, [r4, #8]
 801113e:	2201      	movs	r2, #1
 8011140:	2109      	movs	r1, #9
 8011142:	f7ff ff7d 	bl	8011040 <std>
 8011146:	68e0      	ldr	r0, [r4, #12]
 8011148:	2202      	movs	r2, #2
 801114a:	2112      	movs	r1, #18
 801114c:	f7ff ff78 	bl	8011040 <std>
 8011150:	2301      	movs	r3, #1
 8011152:	61a3      	str	r3, [r4, #24]
 8011154:	e7d2      	b.n	80110fc <__sinit+0xc>
 8011156:	bf00      	nop
 8011158:	08011b9c 	.word	0x08011b9c
 801115c:	08011089 	.word	0x08011089

08011160 <__sfp>:
 8011160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011162:	4607      	mov	r7, r0
 8011164:	f7ff ffac 	bl	80110c0 <__sfp_lock_acquire>
 8011168:	4b1e      	ldr	r3, [pc, #120]	; (80111e4 <__sfp+0x84>)
 801116a:	681e      	ldr	r6, [r3, #0]
 801116c:	69b3      	ldr	r3, [r6, #24]
 801116e:	b913      	cbnz	r3, 8011176 <__sfp+0x16>
 8011170:	4630      	mov	r0, r6
 8011172:	f7ff ffbd 	bl	80110f0 <__sinit>
 8011176:	3648      	adds	r6, #72	; 0x48
 8011178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801117c:	3b01      	subs	r3, #1
 801117e:	d503      	bpl.n	8011188 <__sfp+0x28>
 8011180:	6833      	ldr	r3, [r6, #0]
 8011182:	b30b      	cbz	r3, 80111c8 <__sfp+0x68>
 8011184:	6836      	ldr	r6, [r6, #0]
 8011186:	e7f7      	b.n	8011178 <__sfp+0x18>
 8011188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801118c:	b9d5      	cbnz	r5, 80111c4 <__sfp+0x64>
 801118e:	4b16      	ldr	r3, [pc, #88]	; (80111e8 <__sfp+0x88>)
 8011190:	60e3      	str	r3, [r4, #12]
 8011192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011196:	6665      	str	r5, [r4, #100]	; 0x64
 8011198:	f7fe fb34 	bl	800f804 <__retarget_lock_init_recursive>
 801119c:	f7ff ff96 	bl	80110cc <__sfp_lock_release>
 80111a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80111a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80111a8:	6025      	str	r5, [r4, #0]
 80111aa:	61a5      	str	r5, [r4, #24]
 80111ac:	2208      	movs	r2, #8
 80111ae:	4629      	mov	r1, r5
 80111b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80111b4:	f7fa fd92 	bl	800bcdc <memset>
 80111b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111c0:	4620      	mov	r0, r4
 80111c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111c4:	3468      	adds	r4, #104	; 0x68
 80111c6:	e7d9      	b.n	801117c <__sfp+0x1c>
 80111c8:	2104      	movs	r1, #4
 80111ca:	4638      	mov	r0, r7
 80111cc:	f7ff ff62 	bl	8011094 <__sfmoreglue>
 80111d0:	4604      	mov	r4, r0
 80111d2:	6030      	str	r0, [r6, #0]
 80111d4:	2800      	cmp	r0, #0
 80111d6:	d1d5      	bne.n	8011184 <__sfp+0x24>
 80111d8:	f7ff ff78 	bl	80110cc <__sfp_lock_release>
 80111dc:	230c      	movs	r3, #12
 80111de:	603b      	str	r3, [r7, #0]
 80111e0:	e7ee      	b.n	80111c0 <__sfp+0x60>
 80111e2:	bf00      	nop
 80111e4:	08011b9c 	.word	0x08011b9c
 80111e8:	ffff0001 	.word	0xffff0001

080111ec <fiprintf>:
 80111ec:	b40e      	push	{r1, r2, r3}
 80111ee:	b503      	push	{r0, r1, lr}
 80111f0:	4601      	mov	r1, r0
 80111f2:	ab03      	add	r3, sp, #12
 80111f4:	4805      	ldr	r0, [pc, #20]	; (801120c <fiprintf+0x20>)
 80111f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fa:	6800      	ldr	r0, [r0, #0]
 80111fc:	9301      	str	r3, [sp, #4]
 80111fe:	f000 f8a5 	bl	801134c <_vfiprintf_r>
 8011202:	b002      	add	sp, #8
 8011204:	f85d eb04 	ldr.w	lr, [sp], #4
 8011208:	b003      	add	sp, #12
 801120a:	4770      	bx	lr
 801120c:	20000020 	.word	0x20000020

08011210 <_fwalk_reent>:
 8011210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011214:	4606      	mov	r6, r0
 8011216:	4688      	mov	r8, r1
 8011218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801121c:	2700      	movs	r7, #0
 801121e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011222:	f1b9 0901 	subs.w	r9, r9, #1
 8011226:	d505      	bpl.n	8011234 <_fwalk_reent+0x24>
 8011228:	6824      	ldr	r4, [r4, #0]
 801122a:	2c00      	cmp	r4, #0
 801122c:	d1f7      	bne.n	801121e <_fwalk_reent+0xe>
 801122e:	4638      	mov	r0, r7
 8011230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011234:	89ab      	ldrh	r3, [r5, #12]
 8011236:	2b01      	cmp	r3, #1
 8011238:	d907      	bls.n	801124a <_fwalk_reent+0x3a>
 801123a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801123e:	3301      	adds	r3, #1
 8011240:	d003      	beq.n	801124a <_fwalk_reent+0x3a>
 8011242:	4629      	mov	r1, r5
 8011244:	4630      	mov	r0, r6
 8011246:	47c0      	blx	r8
 8011248:	4307      	orrs	r7, r0
 801124a:	3568      	adds	r5, #104	; 0x68
 801124c:	e7e9      	b.n	8011222 <_fwalk_reent+0x12>

0801124e <memmove>:
 801124e:	4288      	cmp	r0, r1
 8011250:	b510      	push	{r4, lr}
 8011252:	eb01 0402 	add.w	r4, r1, r2
 8011256:	d902      	bls.n	801125e <memmove+0x10>
 8011258:	4284      	cmp	r4, r0
 801125a:	4623      	mov	r3, r4
 801125c:	d807      	bhi.n	801126e <memmove+0x20>
 801125e:	1e43      	subs	r3, r0, #1
 8011260:	42a1      	cmp	r1, r4
 8011262:	d008      	beq.n	8011276 <memmove+0x28>
 8011264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011268:	f803 2f01 	strb.w	r2, [r3, #1]!
 801126c:	e7f8      	b.n	8011260 <memmove+0x12>
 801126e:	4402      	add	r2, r0
 8011270:	4601      	mov	r1, r0
 8011272:	428a      	cmp	r2, r1
 8011274:	d100      	bne.n	8011278 <memmove+0x2a>
 8011276:	bd10      	pop	{r4, pc}
 8011278:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801127c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011280:	e7f7      	b.n	8011272 <memmove+0x24>
	...

08011284 <__malloc_lock>:
 8011284:	4801      	ldr	r0, [pc, #4]	; (801128c <__malloc_lock+0x8>)
 8011286:	f7fe babf 	b.w	800f808 <__retarget_lock_acquire_recursive>
 801128a:	bf00      	nop
 801128c:	200068b1 	.word	0x200068b1

08011290 <__malloc_unlock>:
 8011290:	4801      	ldr	r0, [pc, #4]	; (8011298 <__malloc_unlock+0x8>)
 8011292:	f7fe babb 	b.w	800f80c <__retarget_lock_release_recursive>
 8011296:	bf00      	nop
 8011298:	200068b1 	.word	0x200068b1

0801129c <_realloc_r>:
 801129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a0:	4680      	mov	r8, r0
 80112a2:	4614      	mov	r4, r2
 80112a4:	460e      	mov	r6, r1
 80112a6:	b921      	cbnz	r1, 80112b2 <_realloc_r+0x16>
 80112a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	4611      	mov	r1, r2
 80112ae:	f7ff b827 	b.w	8010300 <_malloc_r>
 80112b2:	b92a      	cbnz	r2, 80112c0 <_realloc_r+0x24>
 80112b4:	f7fe ffb8 	bl	8010228 <_free_r>
 80112b8:	4625      	mov	r5, r4
 80112ba:	4628      	mov	r0, r5
 80112bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c0:	f000 faa0 	bl	8011804 <_malloc_usable_size_r>
 80112c4:	4284      	cmp	r4, r0
 80112c6:	4607      	mov	r7, r0
 80112c8:	d802      	bhi.n	80112d0 <_realloc_r+0x34>
 80112ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112ce:	d812      	bhi.n	80112f6 <_realloc_r+0x5a>
 80112d0:	4621      	mov	r1, r4
 80112d2:	4640      	mov	r0, r8
 80112d4:	f7ff f814 	bl	8010300 <_malloc_r>
 80112d8:	4605      	mov	r5, r0
 80112da:	2800      	cmp	r0, #0
 80112dc:	d0ed      	beq.n	80112ba <_realloc_r+0x1e>
 80112de:	42bc      	cmp	r4, r7
 80112e0:	4622      	mov	r2, r4
 80112e2:	4631      	mov	r1, r6
 80112e4:	bf28      	it	cs
 80112e6:	463a      	movcs	r2, r7
 80112e8:	f7fa fcea 	bl	800bcc0 <memcpy>
 80112ec:	4631      	mov	r1, r6
 80112ee:	4640      	mov	r0, r8
 80112f0:	f7fe ff9a 	bl	8010228 <_free_r>
 80112f4:	e7e1      	b.n	80112ba <_realloc_r+0x1e>
 80112f6:	4635      	mov	r5, r6
 80112f8:	e7df      	b.n	80112ba <_realloc_r+0x1e>

080112fa <__sfputc_r>:
 80112fa:	6893      	ldr	r3, [r2, #8]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	b410      	push	{r4}
 8011302:	6093      	str	r3, [r2, #8]
 8011304:	da08      	bge.n	8011318 <__sfputc_r+0x1e>
 8011306:	6994      	ldr	r4, [r2, #24]
 8011308:	42a3      	cmp	r3, r4
 801130a:	db01      	blt.n	8011310 <__sfputc_r+0x16>
 801130c:	290a      	cmp	r1, #10
 801130e:	d103      	bne.n	8011318 <__sfputc_r+0x1e>
 8011310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011314:	f000 b94a 	b.w	80115ac <__swbuf_r>
 8011318:	6813      	ldr	r3, [r2, #0]
 801131a:	1c58      	adds	r0, r3, #1
 801131c:	6010      	str	r0, [r2, #0]
 801131e:	7019      	strb	r1, [r3, #0]
 8011320:	4608      	mov	r0, r1
 8011322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011326:	4770      	bx	lr

08011328 <__sfputs_r>:
 8011328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	4614      	mov	r4, r2
 8011330:	18d5      	adds	r5, r2, r3
 8011332:	42ac      	cmp	r4, r5
 8011334:	d101      	bne.n	801133a <__sfputs_r+0x12>
 8011336:	2000      	movs	r0, #0
 8011338:	e007      	b.n	801134a <__sfputs_r+0x22>
 801133a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133e:	463a      	mov	r2, r7
 8011340:	4630      	mov	r0, r6
 8011342:	f7ff ffda 	bl	80112fa <__sfputc_r>
 8011346:	1c43      	adds	r3, r0, #1
 8011348:	d1f3      	bne.n	8011332 <__sfputs_r+0xa>
 801134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801134c <_vfiprintf_r>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	460d      	mov	r5, r1
 8011352:	b09d      	sub	sp, #116	; 0x74
 8011354:	4614      	mov	r4, r2
 8011356:	4698      	mov	r8, r3
 8011358:	4606      	mov	r6, r0
 801135a:	b118      	cbz	r0, 8011364 <_vfiprintf_r+0x18>
 801135c:	6983      	ldr	r3, [r0, #24]
 801135e:	b90b      	cbnz	r3, 8011364 <_vfiprintf_r+0x18>
 8011360:	f7ff fec6 	bl	80110f0 <__sinit>
 8011364:	4b89      	ldr	r3, [pc, #548]	; (801158c <_vfiprintf_r+0x240>)
 8011366:	429d      	cmp	r5, r3
 8011368:	d11b      	bne.n	80113a2 <_vfiprintf_r+0x56>
 801136a:	6875      	ldr	r5, [r6, #4]
 801136c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801136e:	07d9      	lsls	r1, r3, #31
 8011370:	d405      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	059a      	lsls	r2, r3, #22
 8011376:	d402      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137a:	f7fe fa45 	bl	800f808 <__retarget_lock_acquire_recursive>
 801137e:	89ab      	ldrh	r3, [r5, #12]
 8011380:	071b      	lsls	r3, r3, #28
 8011382:	d501      	bpl.n	8011388 <_vfiprintf_r+0x3c>
 8011384:	692b      	ldr	r3, [r5, #16]
 8011386:	b9eb      	cbnz	r3, 80113c4 <_vfiprintf_r+0x78>
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f000 f960 	bl	8011650 <__swsetup_r>
 8011390:	b1c0      	cbz	r0, 80113c4 <_vfiprintf_r+0x78>
 8011392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011394:	07dc      	lsls	r4, r3, #31
 8011396:	d50e      	bpl.n	80113b6 <_vfiprintf_r+0x6a>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295
 801139c:	b01d      	add	sp, #116	; 0x74
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	4b7b      	ldr	r3, [pc, #492]	; (8011590 <_vfiprintf_r+0x244>)
 80113a4:	429d      	cmp	r5, r3
 80113a6:	d101      	bne.n	80113ac <_vfiprintf_r+0x60>
 80113a8:	68b5      	ldr	r5, [r6, #8]
 80113aa:	e7df      	b.n	801136c <_vfiprintf_r+0x20>
 80113ac:	4b79      	ldr	r3, [pc, #484]	; (8011594 <_vfiprintf_r+0x248>)
 80113ae:	429d      	cmp	r5, r3
 80113b0:	bf08      	it	eq
 80113b2:	68f5      	ldreq	r5, [r6, #12]
 80113b4:	e7da      	b.n	801136c <_vfiprintf_r+0x20>
 80113b6:	89ab      	ldrh	r3, [r5, #12]
 80113b8:	0598      	lsls	r0, r3, #22
 80113ba:	d4ed      	bmi.n	8011398 <_vfiprintf_r+0x4c>
 80113bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113be:	f7fe fa25 	bl	800f80c <__retarget_lock_release_recursive>
 80113c2:	e7e9      	b.n	8011398 <_vfiprintf_r+0x4c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	9309      	str	r3, [sp, #36]	; 0x24
 80113c8:	2320      	movs	r3, #32
 80113ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d2:	2330      	movs	r3, #48	; 0x30
 80113d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011598 <_vfiprintf_r+0x24c>
 80113d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113dc:	f04f 0901 	mov.w	r9, #1
 80113e0:	4623      	mov	r3, r4
 80113e2:	469a      	mov	sl, r3
 80113e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e8:	b10a      	cbz	r2, 80113ee <_vfiprintf_r+0xa2>
 80113ea:	2a25      	cmp	r2, #37	; 0x25
 80113ec:	d1f9      	bne.n	80113e2 <_vfiprintf_r+0x96>
 80113ee:	ebba 0b04 	subs.w	fp, sl, r4
 80113f2:	d00b      	beq.n	801140c <_vfiprintf_r+0xc0>
 80113f4:	465b      	mov	r3, fp
 80113f6:	4622      	mov	r2, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ff ff94 	bl	8011328 <__sfputs_r>
 8011400:	3001      	adds	r0, #1
 8011402:	f000 80aa 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011408:	445a      	add	r2, fp
 801140a:	9209      	str	r2, [sp, #36]	; 0x24
 801140c:	f89a 3000 	ldrb.w	r3, [sl]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80a2 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011416:	2300      	movs	r3, #0
 8011418:	f04f 32ff 	mov.w	r2, #4294967295
 801141c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011420:	f10a 0a01 	add.w	sl, sl, #1
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9307      	str	r3, [sp, #28]
 8011428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801142c:	931a      	str	r3, [sp, #104]	; 0x68
 801142e:	4654      	mov	r4, sl
 8011430:	2205      	movs	r2, #5
 8011432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011436:	4858      	ldr	r0, [pc, #352]	; (8011598 <_vfiprintf_r+0x24c>)
 8011438:	f7ee fee2 	bl	8000200 <memchr>
 801143c:	9a04      	ldr	r2, [sp, #16]
 801143e:	b9d8      	cbnz	r0, 8011478 <_vfiprintf_r+0x12c>
 8011440:	06d1      	lsls	r1, r2, #27
 8011442:	bf44      	itt	mi
 8011444:	2320      	movmi	r3, #32
 8011446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801144a:	0713      	lsls	r3, r2, #28
 801144c:	bf44      	itt	mi
 801144e:	232b      	movmi	r3, #43	; 0x2b
 8011450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011454:	f89a 3000 	ldrb.w	r3, [sl]
 8011458:	2b2a      	cmp	r3, #42	; 0x2a
 801145a:	d015      	beq.n	8011488 <_vfiprintf_r+0x13c>
 801145c:	9a07      	ldr	r2, [sp, #28]
 801145e:	4654      	mov	r4, sl
 8011460:	2000      	movs	r0, #0
 8011462:	f04f 0c0a 	mov.w	ip, #10
 8011466:	4621      	mov	r1, r4
 8011468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801146c:	3b30      	subs	r3, #48	; 0x30
 801146e:	2b09      	cmp	r3, #9
 8011470:	d94e      	bls.n	8011510 <_vfiprintf_r+0x1c4>
 8011472:	b1b0      	cbz	r0, 80114a2 <_vfiprintf_r+0x156>
 8011474:	9207      	str	r2, [sp, #28]
 8011476:	e014      	b.n	80114a2 <_vfiprintf_r+0x156>
 8011478:	eba0 0308 	sub.w	r3, r0, r8
 801147c:	fa09 f303 	lsl.w	r3, r9, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	9304      	str	r3, [sp, #16]
 8011484:	46a2      	mov	sl, r4
 8011486:	e7d2      	b.n	801142e <_vfiprintf_r+0xe2>
 8011488:	9b03      	ldr	r3, [sp, #12]
 801148a:	1d19      	adds	r1, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	9103      	str	r1, [sp, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	bfbb      	ittet	lt
 8011494:	425b      	neglt	r3, r3
 8011496:	f042 0202 	orrlt.w	r2, r2, #2
 801149a:	9307      	strge	r3, [sp, #28]
 801149c:	9307      	strlt	r3, [sp, #28]
 801149e:	bfb8      	it	lt
 80114a0:	9204      	strlt	r2, [sp, #16]
 80114a2:	7823      	ldrb	r3, [r4, #0]
 80114a4:	2b2e      	cmp	r3, #46	; 0x2e
 80114a6:	d10c      	bne.n	80114c2 <_vfiprintf_r+0x176>
 80114a8:	7863      	ldrb	r3, [r4, #1]
 80114aa:	2b2a      	cmp	r3, #42	; 0x2a
 80114ac:	d135      	bne.n	801151a <_vfiprintf_r+0x1ce>
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	9203      	str	r2, [sp, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfb8      	it	lt
 80114ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80114be:	3402      	adds	r4, #2
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115a8 <_vfiprintf_r+0x25c>
 80114c6:	7821      	ldrb	r1, [r4, #0]
 80114c8:	2203      	movs	r2, #3
 80114ca:	4650      	mov	r0, sl
 80114cc:	f7ee fe98 	bl	8000200 <memchr>
 80114d0:	b140      	cbz	r0, 80114e4 <_vfiprintf_r+0x198>
 80114d2:	2340      	movs	r3, #64	; 0x40
 80114d4:	eba0 000a 	sub.w	r0, r0, sl
 80114d8:	fa03 f000 	lsl.w	r0, r3, r0
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	4303      	orrs	r3, r0
 80114e0:	3401      	adds	r4, #1
 80114e2:	9304      	str	r3, [sp, #16]
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	482c      	ldr	r0, [pc, #176]	; (801159c <_vfiprintf_r+0x250>)
 80114ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ee:	2206      	movs	r2, #6
 80114f0:	f7ee fe86 	bl	8000200 <memchr>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d03f      	beq.n	8011578 <_vfiprintf_r+0x22c>
 80114f8:	4b29      	ldr	r3, [pc, #164]	; (80115a0 <_vfiprintf_r+0x254>)
 80114fa:	bb1b      	cbnz	r3, 8011544 <_vfiprintf_r+0x1f8>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	3307      	adds	r3, #7
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	3308      	adds	r3, #8
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150a:	443b      	add	r3, r7
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	e767      	b.n	80113e0 <_vfiprintf_r+0x94>
 8011510:	fb0c 3202 	mla	r2, ip, r2, r3
 8011514:	460c      	mov	r4, r1
 8011516:	2001      	movs	r0, #1
 8011518:	e7a5      	b.n	8011466 <_vfiprintf_r+0x11a>
 801151a:	2300      	movs	r3, #0
 801151c:	3401      	adds	r4, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0c0a 	mov.w	ip, #10
 8011526:	4620      	mov	r0, r4
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	3a30      	subs	r2, #48	; 0x30
 801152e:	2a09      	cmp	r2, #9
 8011530:	d903      	bls.n	801153a <_vfiprintf_r+0x1ee>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0c5      	beq.n	80114c2 <_vfiprintf_r+0x176>
 8011536:	9105      	str	r1, [sp, #20]
 8011538:	e7c3      	b.n	80114c2 <_vfiprintf_r+0x176>
 801153a:	fb0c 2101 	mla	r1, ip, r1, r2
 801153e:	4604      	mov	r4, r0
 8011540:	2301      	movs	r3, #1
 8011542:	e7f0      	b.n	8011526 <_vfiprintf_r+0x1da>
 8011544:	ab03      	add	r3, sp, #12
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	462a      	mov	r2, r5
 801154a:	4b16      	ldr	r3, [pc, #88]	; (80115a4 <_vfiprintf_r+0x258>)
 801154c:	a904      	add	r1, sp, #16
 801154e:	4630      	mov	r0, r6
 8011550:	f7fa fede 	bl	800c310 <_printf_float>
 8011554:	4607      	mov	r7, r0
 8011556:	1c78      	adds	r0, r7, #1
 8011558:	d1d6      	bne.n	8011508 <_vfiprintf_r+0x1bc>
 801155a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801155c:	07d9      	lsls	r1, r3, #31
 801155e:	d405      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011560:	89ab      	ldrh	r3, [r5, #12]
 8011562:	059a      	lsls	r2, r3, #22
 8011564:	d402      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011568:	f7fe f950 	bl	800f80c <__retarget_lock_release_recursive>
 801156c:	89ab      	ldrh	r3, [r5, #12]
 801156e:	065b      	lsls	r3, r3, #25
 8011570:	f53f af12 	bmi.w	8011398 <_vfiprintf_r+0x4c>
 8011574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011576:	e711      	b.n	801139c <_vfiprintf_r+0x50>
 8011578:	ab03      	add	r3, sp, #12
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	462a      	mov	r2, r5
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_vfiprintf_r+0x258>)
 8011580:	a904      	add	r1, sp, #16
 8011582:	4630      	mov	r0, r6
 8011584:	f7fb f968 	bl	800c858 <_printf_i>
 8011588:	e7e4      	b.n	8011554 <_vfiprintf_r+0x208>
 801158a:	bf00      	nop
 801158c:	08012114 	.word	0x08012114
 8011590:	08012134 	.word	0x08012134
 8011594:	080120f4 	.word	0x080120f4
 8011598:	0801208c 	.word	0x0801208c
 801159c:	08012096 	.word	0x08012096
 80115a0:	0800c311 	.word	0x0800c311
 80115a4:	08011329 	.word	0x08011329
 80115a8:	08012092 	.word	0x08012092

080115ac <__swbuf_r>:
 80115ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ae:	460e      	mov	r6, r1
 80115b0:	4614      	mov	r4, r2
 80115b2:	4605      	mov	r5, r0
 80115b4:	b118      	cbz	r0, 80115be <__swbuf_r+0x12>
 80115b6:	6983      	ldr	r3, [r0, #24]
 80115b8:	b90b      	cbnz	r3, 80115be <__swbuf_r+0x12>
 80115ba:	f7ff fd99 	bl	80110f0 <__sinit>
 80115be:	4b21      	ldr	r3, [pc, #132]	; (8011644 <__swbuf_r+0x98>)
 80115c0:	429c      	cmp	r4, r3
 80115c2:	d12b      	bne.n	801161c <__swbuf_r+0x70>
 80115c4:	686c      	ldr	r4, [r5, #4]
 80115c6:	69a3      	ldr	r3, [r4, #24]
 80115c8:	60a3      	str	r3, [r4, #8]
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	071a      	lsls	r2, r3, #28
 80115ce:	d52f      	bpl.n	8011630 <__swbuf_r+0x84>
 80115d0:	6923      	ldr	r3, [r4, #16]
 80115d2:	b36b      	cbz	r3, 8011630 <__swbuf_r+0x84>
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	1ac0      	subs	r0, r0, r3
 80115da:	6963      	ldr	r3, [r4, #20]
 80115dc:	b2f6      	uxtb	r6, r6
 80115de:	4283      	cmp	r3, r0
 80115e0:	4637      	mov	r7, r6
 80115e2:	dc04      	bgt.n	80115ee <__swbuf_r+0x42>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f7ff fcee 	bl	8010fc8 <_fflush_r>
 80115ec:	bb30      	cbnz	r0, 801163c <__swbuf_r+0x90>
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	3b01      	subs	r3, #1
 80115f2:	60a3      	str	r3, [r4, #8]
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	701e      	strb	r6, [r3, #0]
 80115fc:	6963      	ldr	r3, [r4, #20]
 80115fe:	3001      	adds	r0, #1
 8011600:	4283      	cmp	r3, r0
 8011602:	d004      	beq.n	801160e <__swbuf_r+0x62>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	07db      	lsls	r3, r3, #31
 8011608:	d506      	bpl.n	8011618 <__swbuf_r+0x6c>
 801160a:	2e0a      	cmp	r6, #10
 801160c:	d104      	bne.n	8011618 <__swbuf_r+0x6c>
 801160e:	4621      	mov	r1, r4
 8011610:	4628      	mov	r0, r5
 8011612:	f7ff fcd9 	bl	8010fc8 <_fflush_r>
 8011616:	b988      	cbnz	r0, 801163c <__swbuf_r+0x90>
 8011618:	4638      	mov	r0, r7
 801161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <__swbuf_r+0x9c>)
 801161e:	429c      	cmp	r4, r3
 8011620:	d101      	bne.n	8011626 <__swbuf_r+0x7a>
 8011622:	68ac      	ldr	r4, [r5, #8]
 8011624:	e7cf      	b.n	80115c6 <__swbuf_r+0x1a>
 8011626:	4b09      	ldr	r3, [pc, #36]	; (801164c <__swbuf_r+0xa0>)
 8011628:	429c      	cmp	r4, r3
 801162a:	bf08      	it	eq
 801162c:	68ec      	ldreq	r4, [r5, #12]
 801162e:	e7ca      	b.n	80115c6 <__swbuf_r+0x1a>
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f000 f80c 	bl	8011650 <__swsetup_r>
 8011638:	2800      	cmp	r0, #0
 801163a:	d0cb      	beq.n	80115d4 <__swbuf_r+0x28>
 801163c:	f04f 37ff 	mov.w	r7, #4294967295
 8011640:	e7ea      	b.n	8011618 <__swbuf_r+0x6c>
 8011642:	bf00      	nop
 8011644:	08012114 	.word	0x08012114
 8011648:	08012134 	.word	0x08012134
 801164c:	080120f4 	.word	0x080120f4

08011650 <__swsetup_r>:
 8011650:	4b32      	ldr	r3, [pc, #200]	; (801171c <__swsetup_r+0xcc>)
 8011652:	b570      	push	{r4, r5, r6, lr}
 8011654:	681d      	ldr	r5, [r3, #0]
 8011656:	4606      	mov	r6, r0
 8011658:	460c      	mov	r4, r1
 801165a:	b125      	cbz	r5, 8011666 <__swsetup_r+0x16>
 801165c:	69ab      	ldr	r3, [r5, #24]
 801165e:	b913      	cbnz	r3, 8011666 <__swsetup_r+0x16>
 8011660:	4628      	mov	r0, r5
 8011662:	f7ff fd45 	bl	80110f0 <__sinit>
 8011666:	4b2e      	ldr	r3, [pc, #184]	; (8011720 <__swsetup_r+0xd0>)
 8011668:	429c      	cmp	r4, r3
 801166a:	d10f      	bne.n	801168c <__swsetup_r+0x3c>
 801166c:	686c      	ldr	r4, [r5, #4]
 801166e:	89a3      	ldrh	r3, [r4, #12]
 8011670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011674:	0719      	lsls	r1, r3, #28
 8011676:	d42c      	bmi.n	80116d2 <__swsetup_r+0x82>
 8011678:	06dd      	lsls	r5, r3, #27
 801167a:	d411      	bmi.n	80116a0 <__swsetup_r+0x50>
 801167c:	2309      	movs	r3, #9
 801167e:	6033      	str	r3, [r6, #0]
 8011680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011684:	81a3      	strh	r3, [r4, #12]
 8011686:	f04f 30ff 	mov.w	r0, #4294967295
 801168a:	e03e      	b.n	801170a <__swsetup_r+0xba>
 801168c:	4b25      	ldr	r3, [pc, #148]	; (8011724 <__swsetup_r+0xd4>)
 801168e:	429c      	cmp	r4, r3
 8011690:	d101      	bne.n	8011696 <__swsetup_r+0x46>
 8011692:	68ac      	ldr	r4, [r5, #8]
 8011694:	e7eb      	b.n	801166e <__swsetup_r+0x1e>
 8011696:	4b24      	ldr	r3, [pc, #144]	; (8011728 <__swsetup_r+0xd8>)
 8011698:	429c      	cmp	r4, r3
 801169a:	bf08      	it	eq
 801169c:	68ec      	ldreq	r4, [r5, #12]
 801169e:	e7e6      	b.n	801166e <__swsetup_r+0x1e>
 80116a0:	0758      	lsls	r0, r3, #29
 80116a2:	d512      	bpl.n	80116ca <__swsetup_r+0x7a>
 80116a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116a6:	b141      	cbz	r1, 80116ba <__swsetup_r+0x6a>
 80116a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116ac:	4299      	cmp	r1, r3
 80116ae:	d002      	beq.n	80116b6 <__swsetup_r+0x66>
 80116b0:	4630      	mov	r0, r6
 80116b2:	f7fe fdb9 	bl	8010228 <_free_r>
 80116b6:	2300      	movs	r3, #0
 80116b8:	6363      	str	r3, [r4, #52]	; 0x34
 80116ba:	89a3      	ldrh	r3, [r4, #12]
 80116bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116c0:	81a3      	strh	r3, [r4, #12]
 80116c2:	2300      	movs	r3, #0
 80116c4:	6063      	str	r3, [r4, #4]
 80116c6:	6923      	ldr	r3, [r4, #16]
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	f043 0308 	orr.w	r3, r3, #8
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	6923      	ldr	r3, [r4, #16]
 80116d4:	b94b      	cbnz	r3, 80116ea <__swsetup_r+0x9a>
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116e0:	d003      	beq.n	80116ea <__swsetup_r+0x9a>
 80116e2:	4621      	mov	r1, r4
 80116e4:	4630      	mov	r0, r6
 80116e6:	f000 f84d 	bl	8011784 <__smakebuf_r>
 80116ea:	89a0      	ldrh	r0, [r4, #12]
 80116ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116f0:	f010 0301 	ands.w	r3, r0, #1
 80116f4:	d00a      	beq.n	801170c <__swsetup_r+0xbc>
 80116f6:	2300      	movs	r3, #0
 80116f8:	60a3      	str	r3, [r4, #8]
 80116fa:	6963      	ldr	r3, [r4, #20]
 80116fc:	425b      	negs	r3, r3
 80116fe:	61a3      	str	r3, [r4, #24]
 8011700:	6923      	ldr	r3, [r4, #16]
 8011702:	b943      	cbnz	r3, 8011716 <__swsetup_r+0xc6>
 8011704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011708:	d1ba      	bne.n	8011680 <__swsetup_r+0x30>
 801170a:	bd70      	pop	{r4, r5, r6, pc}
 801170c:	0781      	lsls	r1, r0, #30
 801170e:	bf58      	it	pl
 8011710:	6963      	ldrpl	r3, [r4, #20]
 8011712:	60a3      	str	r3, [r4, #8]
 8011714:	e7f4      	b.n	8011700 <__swsetup_r+0xb0>
 8011716:	2000      	movs	r0, #0
 8011718:	e7f7      	b.n	801170a <__swsetup_r+0xba>
 801171a:	bf00      	nop
 801171c:	20000020 	.word	0x20000020
 8011720:	08012114 	.word	0x08012114
 8011724:	08012134 	.word	0x08012134
 8011728:	080120f4 	.word	0x080120f4

0801172c <abort>:
 801172c:	b508      	push	{r3, lr}
 801172e:	2006      	movs	r0, #6
 8011730:	f000 f898 	bl	8011864 <raise>
 8011734:	2001      	movs	r0, #1
 8011736:	f7f1 fd83 	bl	8003240 <_exit>

0801173a <__swhatbuf_r>:
 801173a:	b570      	push	{r4, r5, r6, lr}
 801173c:	460e      	mov	r6, r1
 801173e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011742:	2900      	cmp	r1, #0
 8011744:	b096      	sub	sp, #88	; 0x58
 8011746:	4614      	mov	r4, r2
 8011748:	461d      	mov	r5, r3
 801174a:	da08      	bge.n	801175e <__swhatbuf_r+0x24>
 801174c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	602a      	str	r2, [r5, #0]
 8011754:	061a      	lsls	r2, r3, #24
 8011756:	d410      	bmi.n	801177a <__swhatbuf_r+0x40>
 8011758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801175c:	e00e      	b.n	801177c <__swhatbuf_r+0x42>
 801175e:	466a      	mov	r2, sp
 8011760:	f000 f89c 	bl	801189c <_fstat_r>
 8011764:	2800      	cmp	r0, #0
 8011766:	dbf1      	blt.n	801174c <__swhatbuf_r+0x12>
 8011768:	9a01      	ldr	r2, [sp, #4]
 801176a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801176e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011772:	425a      	negs	r2, r3
 8011774:	415a      	adcs	r2, r3
 8011776:	602a      	str	r2, [r5, #0]
 8011778:	e7ee      	b.n	8011758 <__swhatbuf_r+0x1e>
 801177a:	2340      	movs	r3, #64	; 0x40
 801177c:	2000      	movs	r0, #0
 801177e:	6023      	str	r3, [r4, #0]
 8011780:	b016      	add	sp, #88	; 0x58
 8011782:	bd70      	pop	{r4, r5, r6, pc}

08011784 <__smakebuf_r>:
 8011784:	898b      	ldrh	r3, [r1, #12]
 8011786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011788:	079d      	lsls	r5, r3, #30
 801178a:	4606      	mov	r6, r0
 801178c:	460c      	mov	r4, r1
 801178e:	d507      	bpl.n	80117a0 <__smakebuf_r+0x1c>
 8011790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	6123      	str	r3, [r4, #16]
 8011798:	2301      	movs	r3, #1
 801179a:	6163      	str	r3, [r4, #20]
 801179c:	b002      	add	sp, #8
 801179e:	bd70      	pop	{r4, r5, r6, pc}
 80117a0:	ab01      	add	r3, sp, #4
 80117a2:	466a      	mov	r2, sp
 80117a4:	f7ff ffc9 	bl	801173a <__swhatbuf_r>
 80117a8:	9900      	ldr	r1, [sp, #0]
 80117aa:	4605      	mov	r5, r0
 80117ac:	4630      	mov	r0, r6
 80117ae:	f7fe fda7 	bl	8010300 <_malloc_r>
 80117b2:	b948      	cbnz	r0, 80117c8 <__smakebuf_r+0x44>
 80117b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b8:	059a      	lsls	r2, r3, #22
 80117ba:	d4ef      	bmi.n	801179c <__smakebuf_r+0x18>
 80117bc:	f023 0303 	bic.w	r3, r3, #3
 80117c0:	f043 0302 	orr.w	r3, r3, #2
 80117c4:	81a3      	strh	r3, [r4, #12]
 80117c6:	e7e3      	b.n	8011790 <__smakebuf_r+0xc>
 80117c8:	4b0d      	ldr	r3, [pc, #52]	; (8011800 <__smakebuf_r+0x7c>)
 80117ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80117cc:	89a3      	ldrh	r3, [r4, #12]
 80117ce:	6020      	str	r0, [r4, #0]
 80117d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117d4:	81a3      	strh	r3, [r4, #12]
 80117d6:	9b00      	ldr	r3, [sp, #0]
 80117d8:	6163      	str	r3, [r4, #20]
 80117da:	9b01      	ldr	r3, [sp, #4]
 80117dc:	6120      	str	r0, [r4, #16]
 80117de:	b15b      	cbz	r3, 80117f8 <__smakebuf_r+0x74>
 80117e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117e4:	4630      	mov	r0, r6
 80117e6:	f000 f86b 	bl	80118c0 <_isatty_r>
 80117ea:	b128      	cbz	r0, 80117f8 <__smakebuf_r+0x74>
 80117ec:	89a3      	ldrh	r3, [r4, #12]
 80117ee:	f023 0303 	bic.w	r3, r3, #3
 80117f2:	f043 0301 	orr.w	r3, r3, #1
 80117f6:	81a3      	strh	r3, [r4, #12]
 80117f8:	89a0      	ldrh	r0, [r4, #12]
 80117fa:	4305      	orrs	r5, r0
 80117fc:	81a5      	strh	r5, [r4, #12]
 80117fe:	e7cd      	b.n	801179c <__smakebuf_r+0x18>
 8011800:	08011089 	.word	0x08011089

08011804 <_malloc_usable_size_r>:
 8011804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011808:	1f18      	subs	r0, r3, #4
 801180a:	2b00      	cmp	r3, #0
 801180c:	bfbc      	itt	lt
 801180e:	580b      	ldrlt	r3, [r1, r0]
 8011810:	18c0      	addlt	r0, r0, r3
 8011812:	4770      	bx	lr

08011814 <_raise_r>:
 8011814:	291f      	cmp	r1, #31
 8011816:	b538      	push	{r3, r4, r5, lr}
 8011818:	4604      	mov	r4, r0
 801181a:	460d      	mov	r5, r1
 801181c:	d904      	bls.n	8011828 <_raise_r+0x14>
 801181e:	2316      	movs	r3, #22
 8011820:	6003      	str	r3, [r0, #0]
 8011822:	f04f 30ff 	mov.w	r0, #4294967295
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801182a:	b112      	cbz	r2, 8011832 <_raise_r+0x1e>
 801182c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011830:	b94b      	cbnz	r3, 8011846 <_raise_r+0x32>
 8011832:	4620      	mov	r0, r4
 8011834:	f000 f830 	bl	8011898 <_getpid_r>
 8011838:	462a      	mov	r2, r5
 801183a:	4601      	mov	r1, r0
 801183c:	4620      	mov	r0, r4
 801183e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011842:	f000 b817 	b.w	8011874 <_kill_r>
 8011846:	2b01      	cmp	r3, #1
 8011848:	d00a      	beq.n	8011860 <_raise_r+0x4c>
 801184a:	1c59      	adds	r1, r3, #1
 801184c:	d103      	bne.n	8011856 <_raise_r+0x42>
 801184e:	2316      	movs	r3, #22
 8011850:	6003      	str	r3, [r0, #0]
 8011852:	2001      	movs	r0, #1
 8011854:	e7e7      	b.n	8011826 <_raise_r+0x12>
 8011856:	2400      	movs	r4, #0
 8011858:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801185c:	4628      	mov	r0, r5
 801185e:	4798      	blx	r3
 8011860:	2000      	movs	r0, #0
 8011862:	e7e0      	b.n	8011826 <_raise_r+0x12>

08011864 <raise>:
 8011864:	4b02      	ldr	r3, [pc, #8]	; (8011870 <raise+0xc>)
 8011866:	4601      	mov	r1, r0
 8011868:	6818      	ldr	r0, [r3, #0]
 801186a:	f7ff bfd3 	b.w	8011814 <_raise_r>
 801186e:	bf00      	nop
 8011870:	20000020 	.word	0x20000020

08011874 <_kill_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d07      	ldr	r5, [pc, #28]	; (8011894 <_kill_r+0x20>)
 8011878:	2300      	movs	r3, #0
 801187a:	4604      	mov	r4, r0
 801187c:	4608      	mov	r0, r1
 801187e:	4611      	mov	r1, r2
 8011880:	602b      	str	r3, [r5, #0]
 8011882:	f7f1 fccd 	bl	8003220 <_kill>
 8011886:	1c43      	adds	r3, r0, #1
 8011888:	d102      	bne.n	8011890 <_kill_r+0x1c>
 801188a:	682b      	ldr	r3, [r5, #0]
 801188c:	b103      	cbz	r3, 8011890 <_kill_r+0x1c>
 801188e:	6023      	str	r3, [r4, #0]
 8011890:	bd38      	pop	{r3, r4, r5, pc}
 8011892:	bf00      	nop
 8011894:	200068c0 	.word	0x200068c0

08011898 <_getpid_r>:
 8011898:	f7f1 bcba 	b.w	8003210 <_getpid>

0801189c <_fstat_r>:
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4d07      	ldr	r5, [pc, #28]	; (80118bc <_fstat_r+0x20>)
 80118a0:	2300      	movs	r3, #0
 80118a2:	4604      	mov	r4, r0
 80118a4:	4608      	mov	r0, r1
 80118a6:	4611      	mov	r1, r2
 80118a8:	602b      	str	r3, [r5, #0]
 80118aa:	f7f1 fd18 	bl	80032de <_fstat>
 80118ae:	1c43      	adds	r3, r0, #1
 80118b0:	d102      	bne.n	80118b8 <_fstat_r+0x1c>
 80118b2:	682b      	ldr	r3, [r5, #0]
 80118b4:	b103      	cbz	r3, 80118b8 <_fstat_r+0x1c>
 80118b6:	6023      	str	r3, [r4, #0]
 80118b8:	bd38      	pop	{r3, r4, r5, pc}
 80118ba:	bf00      	nop
 80118bc:	200068c0 	.word	0x200068c0

080118c0 <_isatty_r>:
 80118c0:	b538      	push	{r3, r4, r5, lr}
 80118c2:	4d06      	ldr	r5, [pc, #24]	; (80118dc <_isatty_r+0x1c>)
 80118c4:	2300      	movs	r3, #0
 80118c6:	4604      	mov	r4, r0
 80118c8:	4608      	mov	r0, r1
 80118ca:	602b      	str	r3, [r5, #0]
 80118cc:	f7f1 fd17 	bl	80032fe <_isatty>
 80118d0:	1c43      	adds	r3, r0, #1
 80118d2:	d102      	bne.n	80118da <_isatty_r+0x1a>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b103      	cbz	r3, 80118da <_isatty_r+0x1a>
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	200068c0 	.word	0x200068c0

080118e0 <_init>:
 80118e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e2:	bf00      	nop
 80118e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118e6:	bc08      	pop	{r3}
 80118e8:	469e      	mov	lr, r3
 80118ea:	4770      	bx	lr

080118ec <_fini>:
 80118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ee:	bf00      	nop
 80118f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118f2:	bc08      	pop	{r3}
 80118f4:	469e      	mov	lr, r3
 80118f6:	4770      	bx	lr
