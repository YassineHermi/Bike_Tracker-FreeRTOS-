
Test_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080119d8  080119d8  000219d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012234  08012234  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08012234  08012234  00022234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801223c  0801223c  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801223c  0801223c  0002223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08012244  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000666c  20000258  0801249c  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068c4  0801249c  000368c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002226c  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471e  00000000  00000000  000524f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00056c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  000587e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b092  00000000  00000000  0005a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4bc  00000000  00000000  00085282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038f3  00000000  00000000  000a473e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef0  00000000  00000000  001a8084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119c0 	.word	0x080119c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	080119c0 	.word	0x080119c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <send_data>:



//function to send data when connected
void send_data(uint8_t * send_data_buffer, int *flag,int*end_history)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	*flag = History_Flag;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <send_data+0x70>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]

	if(strcmp((char *)send_data_test_buffer,(char *)send_data_buffer)!=0)
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <send_data+0x74>)
 8001030:	f7ff f8ce 	bl	80001d0 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <send_data+0x36>
	    {
		    HAL_UART_Transmit(&huart1, send_data_buffer, 15, 100);
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	220f      	movs	r2, #15
 800103e:	68f9      	ldr	r1, [r7, #12]
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <send_data+0x78>)
 8001042:	f005 fc71 	bl	8006928 <HAL_UART_Transmit>
		    strcpy((char *)send_data_test_buffer,(char *)send_data_buffer);
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <send_data+0x74>)
 800104a:	f00c f84f 	bl	800d0ec <strcpy>
	    }


	HAL_Delay(8);
 800104e:	2008      	movs	r0, #8
 8001050:	f002 fa88 	bl	8003564 <HAL_Delay>
	huart1.pRxBuffPtr = (uint8_t *)buffer;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <send_data+0x78>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <send_data+0x7c>)
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
	huart1.RxXferCount = sizeof(buffer);
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <send_data+0x78>)
 800105c:	2214      	movs	r2, #20
 800105e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if ((*end_history==1)||(((buffer[0]=='\005')&&(buffer[19]=='\005'))))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d007      	beq.n	800107a <send_data+0x62>
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <send_data+0x7c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d106      	bne.n	8001080 <send_data+0x68>
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <send_data+0x7c>)
 8001074:	7cdb      	ldrb	r3, [r3, #19]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d102      	bne.n	8001080 <send_data+0x68>
	{
		History_Flag = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <send_data+0x70>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

	}

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002f8 	.word	0x200002f8
 800108c:	20000324 	.word	0x20000324
 8001090:	20000274 	.word	0x20000274
 8001094:	200002fc 	.word	0x200002fc

08001098 <History_Range>:

void History_Range(uint32_t * start_epoch, uint32_t  * end_epoch)
{
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b08d      	sub	sp, #52	; 0x34
 800109c:	af08      	add	r7, sp, #32
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]

if (buffer[0] == '\001')
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <History_Range+0x150>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	f040 809a 	bne.w	80011e0 <History_Range+0x148>

	    {
	       memcpy((char*)epoch1, buffer, 10);
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <History_Range+0x154>)
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <History_Range+0x150>)
 80010b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b2:	c303      	stmia	r3!, {r0, r1}
 80010b4:	801a      	strh	r2, [r3, #0]
	       sprintf(int_epoch1,"%d%d%d%d%d%d%d%d%d%d",epoch1[0],epoch1[1],epoch1[2],epoch1[3],epoch1[4],epoch1[5],epoch1[6],epoch1[7],epoch1[8],epoch1[9]);
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <History_Range+0x154>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	469c      	mov	ip, r3
 80010bc:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <History_Range+0x154>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	469e      	mov	lr, r3
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <History_Range+0x154>)
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <History_Range+0x154>)
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <History_Range+0x154>)
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <History_Range+0x154>)
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	461c      	mov	r4, r3
 80010da:	4b44      	ldr	r3, [pc, #272]	; (80011ec <History_Range+0x154>)
 80010dc:	799b      	ldrb	r3, [r3, #6]
 80010de:	461d      	mov	r5, r3
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <History_Range+0x154>)
 80010e2:	79db      	ldrb	r3, [r3, #7]
 80010e4:	461e      	mov	r6, r3
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <History_Range+0x154>)
 80010e8:	7a1b      	ldrb	r3, [r3, #8]
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <History_Range+0x154>)
 80010ee:	7a5b      	ldrb	r3, [r3, #9]
 80010f0:	9307      	str	r3, [sp, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	9605      	str	r6, [sp, #20]
 80010f8:	9504      	str	r5, [sp, #16]
 80010fa:	9403      	str	r4, [sp, #12]
 80010fc:	9002      	str	r0, [sp, #8]
 80010fe:	9101      	str	r1, [sp, #4]
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	4673      	mov	r3, lr
 8001104:	4662      	mov	r2, ip
 8001106:	493a      	ldr	r1, [pc, #232]	; (80011f0 <History_Range+0x158>)
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <History_Range+0x15c>)
 800110a:	f00b ff51 	bl	800cfb0 <siprintf>
	       x1=strtol(int_epoch1, NULL, 10);
 800110e:	220a      	movs	r2, #10
 8001110:	2100      	movs	r1, #0
 8001112:	4838      	ldr	r0, [pc, #224]	; (80011f4 <History_Range+0x15c>)
 8001114:	f00c feb4 	bl	800de80 <strtol>
 8001118:	4603      	mov	r3, r0
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <History_Range+0x160>)
 800111c:	6013      	str	r3, [r2, #0]
	       sprintf(hexa_epoch1,"%x",x1);
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <History_Range+0x160>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <History_Range+0x164>)
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <History_Range+0x168>)
 8001128:	f00b ff42 	bl	800cfb0 <siprintf>
	       epoch11_value = strtoul(hexa_epoch1,NULL,16);
 800112c:	2210      	movs	r2, #16
 800112e:	2100      	movs	r1, #0
 8001130:	4833      	ldr	r0, [pc, #204]	; (8001200 <History_Range+0x168>)
 8001132:	f00c ff23 	bl	800df7c <strtoul>
 8001136:	4603      	mov	r3, r0
 8001138:	4a32      	ldr	r2, [pc, #200]	; (8001204 <History_Range+0x16c>)
 800113a:	6013      	str	r3, [r2, #0]

	       memcpy((char*)epoch2, (buffer) + 10, 10);
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <History_Range+0x170>)
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <History_Range+0x174>)
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	6851      	ldr	r1, [r2, #4]
 8001144:	c303      	stmia	r3!, {r0, r1}
 8001146:	8912      	ldrh	r2, [r2, #8]
 8001148:	801a      	strh	r2, [r3, #0]
	       sprintf(int_epoch2,"%d%d%d%d%d%d%d%d%d%d",epoch2[0],epoch2[1],epoch2[2],epoch2[3],epoch2[4],epoch2[5],epoch2[6],epoch2[7],epoch2[8],epoch2[9]);
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <History_Range+0x174>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	469c      	mov	ip, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <History_Range+0x174>)
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	469e      	mov	lr, r3
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <History_Range+0x174>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	461a      	mov	r2, r3
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <History_Range+0x174>)
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	4619      	mov	r1, r3
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <History_Range+0x174>)
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <History_Range+0x174>)
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	461c      	mov	r4, r3
 800116e:	4b27      	ldr	r3, [pc, #156]	; (800120c <History_Range+0x174>)
 8001170:	799b      	ldrb	r3, [r3, #6]
 8001172:	461d      	mov	r5, r3
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <History_Range+0x174>)
 8001176:	79db      	ldrb	r3, [r3, #7]
 8001178:	461e      	mov	r6, r3
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <History_Range+0x174>)
 800117c:	7a1b      	ldrb	r3, [r3, #8]
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <History_Range+0x174>)
 8001182:	7a5b      	ldrb	r3, [r3, #9]
 8001184:	9307      	str	r3, [sp, #28]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	9306      	str	r3, [sp, #24]
 800118a:	9605      	str	r6, [sp, #20]
 800118c:	9504      	str	r5, [sp, #16]
 800118e:	9403      	str	r4, [sp, #12]
 8001190:	9002      	str	r0, [sp, #8]
 8001192:	9101      	str	r1, [sp, #4]
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	4673      	mov	r3, lr
 8001198:	4662      	mov	r2, ip
 800119a:	4915      	ldr	r1, [pc, #84]	; (80011f0 <History_Range+0x158>)
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <History_Range+0x178>)
 800119e:	f00b ff07 	bl	800cfb0 <siprintf>
	       x2 = strtol(int_epoch2, NULL, 10);
 80011a2:	220a      	movs	r2, #10
 80011a4:	2100      	movs	r1, #0
 80011a6:	481a      	ldr	r0, [pc, #104]	; (8001210 <History_Range+0x178>)
 80011a8:	f00c fe6a 	bl	800de80 <strtol>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <History_Range+0x17c>)
 80011b0:	6013      	str	r3, [r2, #0]
	       sprintf(hexa_epoch2,"%x",x2);
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <History_Range+0x17c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <History_Range+0x164>)
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <History_Range+0x180>)
 80011bc:	f00b fef8 	bl	800cfb0 <siprintf>
	       epoch22_value = strtoul(hexa_epoch2,NULL,16);
 80011c0:	2210      	movs	r2, #16
 80011c2:	2100      	movs	r1, #0
 80011c4:	4814      	ldr	r0, [pc, #80]	; (8001218 <History_Range+0x180>)
 80011c6:	f00c fed9 	bl	800df7c <strtoul>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <History_Range+0x184>)
 80011ce:	6013      	str	r3, [r2, #0]

	       *start_epoch = epoch11_value;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <History_Range+0x16c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	601a      	str	r2, [r3, #0]
	       *end_epoch = epoch22_value;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <History_Range+0x184>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	601a      	str	r2, [r3, #0]


	    }

}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e8:	200002fc 	.word	0x200002fc
 80011ec:	20000334 	.word	0x20000334
 80011f0:	080119e0 	.word	0x080119e0
 80011f4:	2000034c 	.word	0x2000034c
 80011f8:	20000374 	.word	0x20000374
 80011fc:	080119f8 	.word	0x080119f8
 8001200:	20000358 	.word	0x20000358
 8001204:	2000037c 	.word	0x2000037c
 8001208:	20000306 	.word	0x20000306
 800120c:	20000340 	.word	0x20000340
 8001210:	20000360 	.word	0x20000360
 8001214:	20000378 	.word	0x20000378
 8001218:	2000036c 	.word	0x2000036c
 800121c:	20000380 	.word	0x20000380

08001220 <MX_USART1_UART_Init>:

//function to config usart1
static void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART1_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001264:	f005 fb12 	bl	800688c <HAL_UART_Init>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000274 	.word	0x20000274
 8001270:	40013800 	.word	0x40013800

08001274 <BLE_State_Pin_Init>:


static void BLE_State_Pin_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /*Configure BLE STATE GPIO PIN (PD0) */
  GPIO_InitStruct.Pin = BLE_STATE_GPIO_PIN ;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <BLE_State_Pin_Init+0x24>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <BLE_State_Pin_Init+0x24>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <BLE_State_Pin_Init+0x24>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128a:	4903      	ldr	r1, [pc, #12]	; (8001298 <BLE_State_Pin_Init+0x24>)
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <BLE_State_Pin_Init+0x28>)
 800128e:	f002 fce5 	bl	8003c5c <HAL_GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000310 	.word	0x20000310
 800129c:	48000c00 	.word	0x48000c00

080012a0 <BLE_Init>:

void BLE_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 80012a4:	f7ff ffbc 	bl	8001220 <MX_USART1_UART_Init>
	BLE_State_Pin_Init();
 80012a8:	f7ff ffe4 	bl	8001274 <BLE_State_Pin_Init>
	HAL_UART_Receive_DMA(&huart1,(uint8_t *) buffer, 20);
 80012ac:	2214      	movs	r2, #20
 80012ae:	4903      	ldr	r1, [pc, #12]	; (80012bc <BLE_Init+0x1c>)
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <BLE_Init+0x20>)
 80012b2:	f005 fc91 	bl	8006bd8 <HAL_UART_Receive_DMA>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002fc 	.word	0x200002fc
 80012c0:	20000274 	.word	0x20000274

080012c4 <HAL_UART_RxHalfCpltCallback>:


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer,20);
 80012cc:	2214      	movs	r2, #20
 80012ce:	4907      	ldr	r1, [pc, #28]	; (80012ec <HAL_UART_RxHalfCpltCallback+0x28>)
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80012d2:	f005 fc81 	bl	8006bd8 <HAL_UART_Receive_DMA>

	  if ((buffer[0]=='\001'))
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_UART_RxHalfCpltCallback+0x28>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_UART_RxHalfCpltCallback+0x20>
	  {

	      History_Flag=1;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x30>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
	  }

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002fc 	.word	0x200002fc
 80012f0:	20000274 	.word	0x20000274
 80012f4:	200002f8 	.word	0x200002f8

080012f8 <Memory_Init>:
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
*/

void Memory_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <Memory_Init+0x84>)
 8001300:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <Memory_Init+0x88>)
 8001302:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  HAL_QSPI_DeInit(&QSPIHandle);
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <Memory_Init+0x84>)
 8001306:	f003 f88b 	bl	8004420 <HAL_QSPI_DeInit>

  /* System level initialization */
  QSPI_MspInit();
 800130a:	f000 fad1 	bl	80018b0 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <Memory_Init+0x84>)
 8001310:	2201      	movs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <Memory_Init+0x84>)
 8001316:	2204      	movs	r2, #4
 8001318:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.FlashSize = 23;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <Memory_Init+0x84>)
 800131c:	2217      	movs	r2, #23
 800131e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <Memory_Init+0x84>)
 8001322:	2210      	movs	r2, #16
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <Memory_Init+0x4a>
  {
    return 32U;
 800133e:	2320      	movs	r3, #32
 8001340:	e003      	b.n	800134a <Memory_Init+0x52>
  }
  return __builtin_clz(value);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800134a:	3b01      	subs	r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <Memory_Init+0x84>)
 8001350:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <Memory_Init+0x84>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <Memory_Init+0x84>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]

  HAL_QSPI_Init(&QSPIHandle);
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <Memory_Init+0x84>)
 8001360:	f002 ffe8 	bl	8004334 <HAL_QSPI_Init>

  /* QSPI memory reset */
  QSPI_ResetMemory(&QSPIHandle);
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <Memory_Init+0x84>)
 8001366:	f000 faef 	bl	8001948 <QSPI_ResetMemory>

  /* Configuration of the dummy cucles on QSPI memory side */
  QSPI_DummyCyclesCfg(&QSPIHandle);
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <Memory_Init+0x84>)
 800136c:	f000 fb30 	bl	80019d0 <QSPI_DummyCyclesCfg>

  USART2_UART_Init();
 8001370:	f000 fc32 	bl	8001bd8 <USART2_UART_Init>

}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000384 	.word	0x20000384
 8001380:	a0001000 	.word	0xa0001000

08001384 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
void BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b092      	sub	sp, #72	; 0x48
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001396:	23eb      	movs	r3, #235	; 0xeb
 8001398:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800139a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80013ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80013b4:	230a      	movs	r3, #10
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013c0:	2300      	movs	r3, #0
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013c4:	2300      	movs	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <BSP_QSPI_Read+0x68>)
 80013d4:	f003 f848 	bl	8004468 <HAL_QSPI_Command>

  /* Reception of the data */
  HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <BSP_QSPI_Read+0x68>)
 80013e0:	f003 f937 	bl	8004652 <HAL_QSPI_Receive>


}
 80013e4:	bf00      	nop
 80013e6:	3748      	adds	r7, #72	; 0x48
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000384 	.word	0x20000384

080013f0 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
void BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b096      	sub	sp, #88	; 0x58
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001404:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8001406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	d901      	bls.n	8001412 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8001424:	2312      	movs	r3, #18
 8001426:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001428:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001438:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001446:	2300      	movs	r3, #0
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800144a:	2300      	movs	r3, #0
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800144e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001450:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8001452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    QSPI_WriteEnable(&QSPIHandle);
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <BSP_QSPI_Write+0xd0>)
 8001458:	f000 fb38 	bl	8001acc <QSPI_WriteEnable>

    /* Configure the command */
    HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4619      	mov	r1, r3
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <BSP_QSPI_Write+0xd0>)
 8001468:	f002 fffe 	bl	8004468 <HAL_QSPI_Command>

    /* Transmission of the data */
    HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <BSP_QSPI_Write+0xd0>)
 8001474:	f003 f856 	bl	8004524 <HAL_QSPI_Transmit>

    /* Configure automatic polling mode to wait for end of program */
    QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001478:	f241 3188 	movw	r1, #5000	; 0x1388
 800147c:	4810      	ldr	r0, [pc, #64]	; (80014c0 <BSP_QSPI_Write+0xd0>)
 800147e:	f000 fb71 	bl	8001b64 <QSPI_AutoPollingMemReady>

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001482:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001486:	4413      	add	r3, r2
 8001488:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8001492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001494:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800149a:	429a      	cmp	r2, r3
 800149c:	d203      	bcs.n	80014a6 <BSP_QSPI_Write+0xb6>
 800149e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	e001      	b.n	80014aa <BSP_QSPI_Write+0xba>
 80014a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
  }
  while (current_addr < end_addr);
 80014ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3cc      	bcc.n	800144e <BSP_QSPI_Write+0x5e>

}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3758      	adds	r7, #88	; 0x58
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000384 	.word	0x20000384

080014c4 <Store_Data>:
  * @brief  Stores an amount of data to the QSPI memory.
  * @param  pData: Pointer to data to be stored
  * @param  Size: Size of data to store
 */
void Store_Data(uint8_t *pData, int Size)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]

	if (store==1)
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <Store_Data+0x70>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d12a      	bne.n	800152c <Store_Data+0x68>
	{

		if (Mem_pleine(Size))
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f000 fc16 	bl	8001d08 <Mem_pleine>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <Store_Data+0x26>
				{
				  Erase_Subsector(Size);
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f000 fd0a 	bl	8001efc <Erase_Subsector>
 80014e8:	e003      	b.n	80014f2 <Store_Data+0x2e>
				}
		else
				{
				  Write_Data(pData,Size);
 80014ea:	6839      	ldr	r1, [r7, #0]
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fc77 	bl	8001de0 <Write_Data>
				}

		// Reset du compteur :
		if ((comp==compteur_final)&&(Est_Vide(Hexadecimal(comp*Size),Size)==false))
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <Store_Data+0x74>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <Store_Data+0x78>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d116      	bne.n	800152c <Store_Data+0x68>
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <Store_Data+0x74>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fb8f 	bl	8001c2c <Hexadecimal>
 800150e:	4602      	mov	r2, r0
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f000 fba3 	bl	8001c60 <Est_Vide>
 800151a:	4603      	mov	r3, r0
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Store_Data+0x68>
				{
				   comp=0;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <Store_Data+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
				}
	}
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000044d 	.word	0x2000044d
 8001538:	20000004 	.word	0x20000004
 800153c:	20000000 	.word	0x20000000

08001540 <get_history>:

void get_history(uint8_t buff[13], int size,bool *flg)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	int debut=0;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buffer[13];

	if (call_flg == false)
 8001550:	4b6e      	ldr	r3, [pc, #440]	; (800170c <get_history+0x1cc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80e4 	beq.w	8001728 <get_history+0x1e8>
    {
        // recevoir l'intervalle de l'historique

		v= false;
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <get_history+0x1d0>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
		History_Range(&epoch1_value,&epoch2_value);
 8001566:	496b      	ldr	r1, [pc, #428]	; (8001714 <get_history+0x1d4>)
 8001568:	486b      	ldr	r0, [pc, #428]	; (8001718 <get_history+0x1d8>)
 800156a:	f7ff fd95 	bl	8001098 <History_Range>


        // chercher début de l'historique

        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 800156e:	4b6b      	ldr	r3, [pc, #428]	; (800171c <get_history+0x1dc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fb57 	bl	8001c2c <Hexadecimal>
 800157e:	4602      	mov	r2, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f000 fb6b 	bl	8001c60 <Est_Vide>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d130      	bne.n	80015f2 <get_history+0xb2>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <get_history+0x1dc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fb46 	bl	8001c2c <Hexadecimal>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f000 fb5a 	bl	8001c60 <Est_Vide>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d026      	beq.n	8001606 <get_history+0xc6>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fb37 	bl	8001c2c <Hexadecimal>
 80015be:	4602      	mov	r2, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4610      	mov	r0, r2
 80015c6:	f000 fb4b 	bl	8001c60 <Est_Vide>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d017      	beq.n	8001606 <get_history+0xc6>
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fd23 	bl	8002024 <hexa_of_epoch>
 80015de:	4604      	mov	r4, r0
 80015e0:	4b4e      	ldr	r3, [pc, #312]	; (800171c <get_history+0x1dc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd1c 	bl	8002024 <hexa_of_epoch>
 80015ec:	4603      	mov	r3, r0
 80015ee:	429c      	cmp	r4, r3
 80015f0:	d209      	bcs.n	8001606 <get_history+0xc6>
            {
                debut = start_of_history(0,comp,epoch1_value,size);
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <get_history+0x1e0>)
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <get_history+0x1d8>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 fd4d 	bl	800209c <start_of_history>
 8001602:	6278      	str	r0, [r7, #36]	; 0x24
 8001604:	e07b      	b.n	80016fe <get_history+0x1be>
            }
        else if((Est_Vide(Hexadecimal(0),size))&&(!Est_Vide(Hexadecimal(256*size),size)))
 8001606:	2000      	movs	r0, #0
 8001608:	f000 fb10 	bl	8001c2c <Hexadecimal>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f000 fb24 	bl	8001c60 <Est_Vide>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01b      	beq.n	8001656 <get_history+0x116>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fb02 	bl	8001c2c <Hexadecimal>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 fb16 	bl	8001c60 <Est_Vide>
 8001634:	4603      	mov	r3, r0
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00a      	beq.n	8001656 <get_history+0x116>
            {
                debut = start_of_history(256,compteur_final,epoch1_value,size);
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <get_history+0x1dc>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <get_history+0x1d8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800164e:	f000 fd25 	bl	800209c <start_of_history>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24
 8001654:	e053      	b.n	80016fe <get_history+0x1be>
            }
        else
            {
                if((hexa_of_epoch(((comp/256)+1)*256,size)<= epoch1_value)&&(hexa_of_epoch(compteur_final,size)>= epoch1_value))
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <get_history+0x1e0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da00      	bge.n	8001660 <get_history+0x120>
 800165e:	33ff      	adds	r3, #255	; 0xff
 8001660:	121b      	asrs	r3, r3, #8
 8001662:	3301      	adds	r3, #1
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fcdb 	bl	8002024 <hexa_of_epoch>
 800166e:	4602      	mov	r2, r0
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <get_history+0x1d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d81b      	bhi.n	80016b0 <get_history+0x170>
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <get_history+0x1dc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fcd0 	bl	8002024 <hexa_of_epoch>
 8001684:	4602      	mov	r2, r0
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <get_history+0x1d8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d310      	bcc.n	80016b0 <get_history+0x170>
                    debut = start_of_history(((comp/256)+1)*256,compteur_final,epoch1_value,size);
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <get_history+0x1e0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	da00      	bge.n	8001698 <get_history+0x158>
 8001696:	33ff      	adds	r3, #255	; 0xff
 8001698:	121b      	asrs	r3, r3, #8
 800169a:	3301      	adds	r3, #1
 800169c:	0218      	lsls	r0, r3, #8
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <get_history+0x1dc>)
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <get_history+0x1d8>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f000 fcf8 	bl	800209c <start_of_history>
 80016ac:	6278      	str	r0, [r7, #36]	; 0x24
 80016ae:	e026      	b.n	80016fe <get_history+0x1be>

                else if ((hexa_of_epoch(0,size)<= epoch1_value)&&(hexa_of_epoch(comp,size)>= epoch1_value))
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 fcb6 	bl	8002024 <hexa_of_epoch>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <get_history+0x1d8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d814      	bhi.n	80016ec <get_history+0x1ac>
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <get_history+0x1e0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fcab 	bl	8002024 <hexa_of_epoch>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <get_history+0x1d8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d309      	bcc.n	80016ec <get_history+0x1ac>
                    debut = start_of_history(0,comp,epoch1_value,size);
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <get_history+0x1e0>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <get_history+0x1d8>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fcda 	bl	800209c <start_of_history>
 80016e8:	6278      	str	r0, [r7, #36]	; 0x24
 80016ea:	e008      	b.n	80016fe <get_history+0x1be>
                else
                    debut = ((comp/256)+1)*256;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <get_history+0x1e0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da00      	bge.n	80016f6 <get_history+0x1b6>
 80016f4:	33ff      	adds	r3, #255	; 0xff
 80016f6:	121b      	asrs	r3, r3, #8
 80016f8:	3301      	adds	r3, #1
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        call_flg = true;
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <get_history+0x1cc>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        comteur_history = debut;
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <get_history+0x1e4>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e07a      	b.n	8001802 <get_history+0x2c2>
 800170c:	200004ac 	.word	0x200004ac
 8001710:	200004ad 	.word	0x200004ad
 8001714:	20000498 	.word	0x20000498
 8001718:	20000494 	.word	0x20000494
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004
 8001724:	20000450 	.word	0x20000450

    }
    else
    {
    	nv_epoch1_value = epoch1_value;
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <get_history+0x2d4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <get_history+0x2d8>)
 800172e:	6013      	str	r3, [r2, #0]
    	nv_epoch2_value = epoch2_value;
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <get_history+0x2dc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a3a      	ldr	r2, [pc, #232]	; (8001820 <get_history+0x2e0>)
 8001736:	6013      	str	r3, [r2, #0]
    	History_Range(&start_epoch_value,&end_epoch_value);
 8001738:	493a      	ldr	r1, [pc, #232]	; (8001824 <get_history+0x2e4>)
 800173a:	483b      	ldr	r0, [pc, #236]	; (8001828 <get_history+0x2e8>)
 800173c:	f7ff fcac 	bl	8001098 <History_Range>
    	// envoyer les données

        BSP_QSPI_Read(buffer,Hexadecimal(comteur_history*size),size);
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <get_history+0x2ec>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fa6e 	bl	8001c2c <Hexadecimal>
 8001750:	4601      	mov	r1, r0
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fe13 	bl	8001384 <BSP_QSPI_Read>
        Inversion(buffer,buff);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 ffcd 	bl	8002704 <Inversion>

        HAL_UART_Transmit_IT(&huart2, (uint8_t*)"compteur_history\n\n",20);
 800176a:	2214      	movs	r2, #20
 800176c:	4930      	ldr	r1, [pc, #192]	; (8001830 <get_history+0x2f0>)
 800176e:	4831      	ldr	r0, [pc, #196]	; (8001834 <get_history+0x2f4>)
 8001770:	f005 f96e 	bl	8006a50 <HAL_UART_Transmit_IT>

        if ((nv_epoch1_value != start_epoch_value)||(nv_epoch2_value != end_epoch_value))
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <get_history+0x2d8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <get_history+0x2e8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d105      	bne.n	800178c <get_history+0x24c>
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <get_history+0x2e0>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <get_history+0x2e4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d002      	beq.n	8001792 <get_history+0x252>
            {call_flg=false;}
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <get_history+0x2f8>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	    if(comteur_history==compteur_final+1)
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <get_history+0x2fc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <get_history+0x2ec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d102      	bne.n	80017a6 <get_history+0x266>
			{comteur_history=0;}
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <get_history+0x2ec>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]


	    if (((hexa_of_epoch(comteur_history,size) >= epoch2_value)&&(!Est_Vide(Hexadecimal(comteur_history*size),size)))||(comteur_history==comp))
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <get_history+0x2ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fc39 	bl	8002024 <hexa_of_epoch>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <get_history+0x2dc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d313      	bcc.n	80017e4 <get_history+0x2a4>
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <get_history+0x2ec>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fa30 	bl	8001c2c <Hexadecimal>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f000 fa44 	bl	8001c60 <Est_Vide>
 80017d8:	4603      	mov	r3, r0
 80017da:	f083 0301 	eor.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <get_history+0x2b0>
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <get_history+0x2ec>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <get_history+0x300>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d108      	bne.n	8001802 <get_history+0x2c2>
			{
				call_flg=false;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <get_history+0x2f8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
				v=true;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <get_history+0x304>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
				comteur_history=0;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <get_history+0x2ec>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

			}

    }
	*flg=v;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <get_history+0x304>)
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	701a      	strb	r2, [r3, #0]

}
 800180a:	bf00      	nop
 800180c:	372c      	adds	r7, #44	; 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000494 	.word	0x20000494
 8001818:	200004a4 	.word	0x200004a4
 800181c:	20000498 	.word	0x20000498
 8001820:	200004a8 	.word	0x200004a8
 8001824:	200004a0 	.word	0x200004a0
 8001828:	2000049c 	.word	0x2000049c
 800182c:	20000450 	.word	0x20000450
 8001830:	080119fc 	.word	0x080119fc
 8001834:	200003c8 	.word	0x200003c8
 8001838:	200004ac 	.word	0x200004ac
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004
 8001844:	200004ad 	.word	0x200004ad

08001848 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
void BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 8001856:	2320      	movs	r3, #32
 8001858:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800185a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800186a:	2300      	movs	r3, #0
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800187e:	2300      	movs	r3, #0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  QSPI_WriteEnable(&QSPIHandle);
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <BSP_QSPI_Erase_Block+0x64>)
 8001884:	f000 f922 	bl	8001acc <QSPI_WriteEnable>

  /* Send the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <BSP_QSPI_Erase_Block+0x64>)
 8001894:	f002 fde8 	bl	8004468 <HAL_QSPI_Command>

  /* Configure automatic polling mode to wait for end of erase */
  QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME);
 8001898:	f44f 7148 	mov.w	r1, #800	; 0x320
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <BSP_QSPI_Erase_Block+0x64>)
 800189e:	f000 f961 	bl	8001b64 <QSPI_AutoPollingMemReady>

}
 80018a2:	bf00      	nop
 80018a4:	3740      	adds	r7, #64	; 0x40
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000384 	.word	0x20000384

080018b0 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <QSPI_MspInit+0x90>)
 80018b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <QSPI_MspInit+0x90>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6513      	str	r3, [r2, #80]	; 0x50
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <QSPI_MspInit+0x90>)
 80018c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <QSPI_MspInit+0x90>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <QSPI_MspInit+0x90>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <QSPI_MspInit+0x90>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <QSPI_MspInit+0x90>)
 80018e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <QSPI_MspInit+0x90>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <QSPI_MspInit+0x90>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <QSPI_MspInit+0x90>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 80018fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001908:	2301      	movs	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001910:	230a      	movs	r3, #10
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4619      	mov	r1, r3
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <QSPI_MspInit+0x94>)
 800191c:	f002 f99e 	bl	8003c5c <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8001920:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8001924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4619      	mov	r1, r3
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <QSPI_MspInit+0x94>)
 8001932:	f002 f993 	bl	8003c5c <HAL_GPIO_Init>
}
 8001936:	bf00      	nop
 8001938:	3720      	adds	r7, #32
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	48001000 	.word	0x48001000

08001948 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b090      	sub	sp, #64	; 0x40
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001954:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8001956:	2366      	movs	r3, #102	; 0x66
 8001958:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4619      	mov	r1, r3
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <QSPI_ResetMemory+0x84>)
 8001982:	f002 fd71 	bl	8004468 <HAL_QSPI_Command>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e019      	b.n	80019c4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001990:	2399      	movs	r3, #153	; 0x99
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4619      	mov	r1, r3
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <QSPI_ResetMemory+0x84>)
 80019a0:	f002 fd62 	bl	8004468 <HAL_QSPI_Command>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00a      	b.n	80019c4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80019ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <QSPI_ResetMemory+0x84>)
 80019b4:	f000 f8d6 	bl	8001b64 <QSPI_AutoPollingMemReady>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3740      	adds	r7, #64	; 0x40
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000384 	.word	0x20000384

080019d0 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80019d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80019de:	2385      	movs	r3, #133	; 0x85
 80019e0:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80019ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a00:	2300      	movs	r3, #0
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	482e      	ldr	r0, [pc, #184]	; (8001ac8 <QSPI_DummyCyclesCfg+0xf8>)
 8001a10:	f002 fd2a 	bl	8004468 <HAL_QSPI_Command>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e04f      	b.n	8001abe <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a1e:	f107 030b 	add.w	r3, r7, #11
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4619      	mov	r1, r3
 8001a28:	4827      	ldr	r0, [pc, #156]	; (8001ac8 <QSPI_DummyCyclesCfg+0xf8>)
 8001a2a:	f002 fe12 	bl	8004652 <HAL_QSPI_Receive>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e042      	b.n	8001abe <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001a38:	4823      	ldr	r0, [pc, #140]	; (8001ac8 <QSPI_DummyCyclesCfg+0xf8>)
 8001a3a:	f000 f847 	bl	8001acc <QSPI_WriteEnable>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e03a      	b.n	8001abe <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001a48:	2381      	movs	r3, #129	; 0x81
 8001a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	23f0      	movs	r3, #240	; 0xf0
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8001a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 8001a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	408b      	lsls	r3, r1
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <QSPI_DummyCyclesCfg+0xf8>)
 8001a94:	f002 fce8 	bl	8004468 <HAL_QSPI_Command>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00d      	b.n	8001abe <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001aa2:	f107 030b 	add.w	r3, r7, #11
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <QSPI_DummyCyclesCfg+0xf8>)
 8001aae:	f002 fd39 	bl	8004524 <HAL_QSPI_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000384 	.word	0x20000384

08001acc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001ada:	2306      	movs	r3, #6
 8001adc:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001af2:	2300      	movs	r3, #0
 8001af4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001af6:	2300      	movs	r3, #0
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4619      	mov	r1, r3
 8001b04:	4816      	ldr	r0, [pc, #88]	; (8001b60 <QSPI_WriteEnable+0x94>)
 8001b06:	f002 fcaf 	bl	8004468 <HAL_QSPI_Command>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e020      	b.n	8001b56 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001b24:	2310      	movs	r3, #16
 8001b26:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b38:	f107 0208 	add.w	r2, r7, #8
 8001b3c:	f107 0120 	add.w	r1, r7, #32
 8001b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <QSPI_WriteEnable+0x94>)
 8001b46:	f002 fe26 	bl	8004796 <HAL_QSPI_AutoPolling>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3758      	adds	r7, #88	; 0x58
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000384 	.word	0x20000384

08001b64 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	; 0x58
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001b74:	2305      	movs	r3, #5
 8001b76:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001b92:	2300      	movs	r3, #0
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001baa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bae:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001bb0:	f107 0208 	add.w	r2, r7, #8
 8001bb4:	f107 0120 	add.w	r1, r7, #32
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <QSPI_AutoPollingMemReady+0x70>)
 8001bbc:	f002 fdeb 	bl	8004796 <HAL_QSPI_AutoPolling>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3758      	adds	r7, #88	; 0x58
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000384 	.word	0x20000384

08001bd8 <USART2_UART_Init>:

static void USART2_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <USART2_UART_Init+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART2_UART_Init+0x4c>)
 8001c1c:	f004 fe36 	bl	800688c <HAL_UART_Init>

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200003c8 	.word	0x200003c8
 8001c28:	40004400 	.word	0x40004400

08001c2c <Hexadecimal>:

/**
 * convert decimal to hexadecimal
 */
  static uint32_t Hexadecimal(int nombre)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	uint32_t Adresse;
	char Hexa[10];
	sprintf(Hexa,"%x",nombre);
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <Hexadecimal+0x30>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00b f9b7 	bl	800cfb0 <siprintf>
    Adresse = strtoul(Hexa,NULL,16);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2210      	movs	r2, #16
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00c f996 	bl	800df7c <strtoul>
 8001c50:	6178      	str	r0, [r7, #20]
    return Adresse;
 8001c52:	697b      	ldr	r3, [r7, #20]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08011a10 	.word	0x08011a10

08001c60 <Est_Vide>:

/**
 * tester si le block d'adresse ADDR est vide ou nn
 */
static bool Est_Vide(uint32_t ADDR, uint32_t Size)
{
 8001c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
 8001c6c:	466b      	mov	r3, sp
 8001c6e:	461e      	mov	r6, r3
	uint8_t buffer[Size];
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4688      	mov	r8, r1
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c92:	2300      	movs	r3, #0
 8001c94:	460c      	mov	r4, r1
 8001c96:	461d      	mov	r5, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	00eb      	lsls	r3, r5, #3
 8001ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca6:	00e2      	lsls	r2, r4, #3
 8001ca8:	1dcb      	adds	r3, r1, #7
 8001caa:	08db      	lsrs	r3, r3, #3
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb2:	466b      	mov	r3, sp
 8001cb4:	3300      	adds	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
	int i=0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
	int nb=0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
	BSP_QSPI_Read(buffer, ADDR, Size);
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	68b8      	ldr	r0, [r7, #8]
 8001cc6:	f7ff fb5d 	bl	8001384 <BSP_QSPI_Read>
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001cca:	e005      	b.n	8001cd8 <Est_Vide+0x78>
		{
			 nb++;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
		     i++;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2bff      	cmp	r3, #255	; 0xff
 8001ce2:	d103      	bne.n	8001cec <Est_Vide+0x8c>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8ef      	bhi.n	8001ccc <Est_Vide+0x6c>
		}
	if (nb==Size)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d101      	bne.n	8001cf8 <Est_Vide+0x98>
		return true;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <Est_Vide+0x9a>
	else
		return false;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	46b5      	mov	sp, r6

}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001d08 <Mem_pleine>:
/**
 * Tester si la mémoire est pleine ou non
 */

 static bool Mem_pleine(int Size)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	int nb_data_per_subsector=(int)(4096/Size);
 8001d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d1a:	60bb      	str	r3, [r7, #8]
	int i=nb_data_per_subsector-1;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001d22:	e003      	b.n	8001d2c <Mem_pleine+0x24>
		{
		  i = i+ nb_data_per_subsector;
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <Mem_pleine+0x70>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dc12      	bgt.n	8001d5c <Mem_pleine+0x54>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff74 	bl	8001c2c <Hexadecimal>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff ff88 	bl	8001c60 <Est_Vide>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e3      	bne.n	8001d24 <Mem_pleine+0x1c>
		}
	if (i==(compteur_final+nb_data_per_subsector))
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <Mem_pleine+0x70>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4413      	add	r3, r2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d101      	bne.n	8001d6e <Mem_pleine+0x66>
		return true;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <Mem_pleine+0x68>
	else
		return false;
 8001d6e:	2300      	movs	r3, #0

}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000

08001d7c <inversion_hex>:

 /**
  * la fonction ci-dessous permet d'inverser tableau de caractères hexadécimale de la façon suivante : "acbe12h5" ==> "h512beac"
  */
static void inversion_hex(char hex[8], char hexinv[8])
 {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
     int k=0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
     for(int i=6;i>=0;i=i-2)
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e018      	b.n	8001dc2 <inversion_hex+0x46>
     {
         for(int j=i;j<i+2;j++)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e00d      	b.n	8001db2 <inversion_hex+0x36>
         {
             hexinv[k]=hex[j];
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	440b      	add	r3, r1
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
             k++;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
         for(int j=i;j<i+2;j++)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	ddec      	ble.n	8001d96 <inversion_hex+0x1a>
     for(int i=6;i>=0;i=i-2)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	3b02      	subs	r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	dae3      	bge.n	8001d90 <inversion_hex+0x14>
         }
     }
     hexinv[k]='\0';
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
 }
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <Write_Data>:

/**
 * la fonction ci-dessous permet de chercher une case vide dans la mémoire puis écrire les données
 */
static void Write_Data(uint8_t *pData, int Size)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	int nb_data_per_subsector = (int)(4096/Size);
 8001dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001df4:	613b      	str	r3, [r7, #16]
	uint32_t ADDR = Hexadecimal(comp*Size);
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <Write_Data+0x110>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff13 	bl	8001c2c <Hexadecimal>
 8001e06:	60f8      	str	r0, [r7, #12]
	if (Est_Vide(ADDR,Size)==true)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff ff27 	bl	8001c60 <Est_Vide>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <Write_Data+0x4c>
		{
			a=true;
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <Write_Data+0x114>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
			BSP_QSPI_Write(pData, ADDR, Size);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fae3 	bl	80013f0 <BSP_QSPI_Write>
					comp = j;
				}

			}
		}
}
 8001e2a:	e05c      	b.n	8001ee6 <Write_Data+0x106>
			if ((comp%nb_data_per_subsector == 0)&&(a==false))
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <Write_Data+0x110>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e36:	6939      	ldr	r1, [r7, #16]
 8001e38:	fb01 f202 	mul.w	r2, r1, r2
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d151      	bne.n	8001ee6 <Write_Data+0x106>
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <Write_Data+0x114>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d04a      	beq.n	8001ee6 <Write_Data+0x106>
				if ((Est_Vide(Hexadecimal((comp+(nb_data_per_subsector-1))*Size),Size)==false)&&((comp+(nb_data_per_subsector-1)) < compteur_final))
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1e5a      	subs	r2, r3, #1
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <Write_Data+0x110>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fee3 	bl	8001c2c <Hexadecimal>
 8001e66:	4602      	mov	r2, r0
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f7ff fef7 	bl	8001c60 <Est_Vide>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f083 0301 	eor.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00f      	beq.n	8001e9e <Write_Data+0xbe>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <Write_Data+0x110>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	441a      	add	r2, r3
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <Write_Data+0x118>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	da06      	bge.n	8001e9e <Write_Data+0xbe>
					comp = comp + nb_data_per_subsector;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <Write_Data+0x110>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <Write_Data+0x110>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	e023      	b.n	8001ee6 <Write_Data+0x106>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <Write_Data+0x110>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e012      	b.n	8001ece <Write_Data+0xee>
						  if (Est_Vide(Hexadecimal(j*Size),Size))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff febb 	bl	8001c2c <Hexadecimal>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7ff fecf 	bl	8001c60 <Est_Vide>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <Write_Data+0xfe>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Write_Data+0x110>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbe5      	blt.n	8001ea8 <Write_Data+0xc8>
 8001edc:	e000      	b.n	8001ee0 <Write_Data+0x100>
						  break;
 8001ede:	bf00      	nop
					comp = j;
 8001ee0:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <Write_Data+0x110>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	2000044c 	.word	0x2000044c
 8001ef8:	20000000 	.word	0x20000000

08001efc <Erase_Subsector>:
/**
 * la fonction ci dessous permet d'effacer un subsector de la mémoire de façon circulaire
 */
static void Erase_Subsector(int Size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]

	    int nb_data_per_subsector = (int)(4096/Size); // = 256
 8001f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
	    uint8_t buff1[4], buff2[4];
	    BSP_QSPI_Read(buff1,0,4);
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2204      	movs	r2, #4
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fa33 	bl	8001384 <BSP_QSPI_Read>
	    sprintf(hex, "%02x%02x%02x%02x", buff1[0], buff1[1], buff1[2], buff1[3]);
 8001f1e:	7c3b      	ldrb	r3, [r7, #16]
 8001f20:	4619      	mov	r1, r3
 8001f22:	7c7b      	ldrb	r3, [r7, #17]
 8001f24:	4618      	mov	r0, r3
 8001f26:	7cbb      	ldrb	r3, [r7, #18]
 8001f28:	7cfa      	ldrb	r2, [r7, #19]
 8001f2a:	9201      	str	r2, [sp, #4]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460a      	mov	r2, r1
 8001f32:	4932      	ldr	r1, [pc, #200]	; (8001ffc <Erase_Subsector+0x100>)
 8001f34:	4832      	ldr	r0, [pc, #200]	; (8002000 <Erase_Subsector+0x104>)
 8001f36:	f00b f83b 	bl	800cfb0 <siprintf>
	    inversion_hex(hex,hexinv);
 8001f3a:	4932      	ldr	r1, [pc, #200]	; (8002004 <Erase_Subsector+0x108>)
 8001f3c:	4830      	ldr	r0, [pc, #192]	; (8002000 <Erase_Subsector+0x104>)
 8001f3e:	f7ff ff1d 	bl	8001d7c <inversion_hex>
	    value = strtoul(hexinv,NULL,16);
 8001f42:	2210      	movs	r2, #16
 8001f44:	2100      	movs	r1, #0
 8001f46:	482f      	ldr	r0, [pc, #188]	; (8002004 <Erase_Subsector+0x108>)
 8001f48:	f00c f818 	bl	800df7c <strtoul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a2e      	ldr	r2, [pc, #184]	; (8002008 <Erase_Subsector+0x10c>)
 8001f50:	6013      	str	r3, [r2, #0]
	    min = value;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <Erase_Subsector+0x10c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <Erase_Subsector+0x110>)
 8001f58:	6013      	str	r3, [r2, #0]
	    int j;
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e035      	b.n	8001fcc <Erase_Subsector+0xd0>
	      	     {
	      	    	 BSP_QSPI_Read(buff2,Hexadecimal(i*16),4);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe61 	bl	8001c2c <Hexadecimal>
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2204      	movs	r2, #4
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fa06 	bl	8001384 <BSP_QSPI_Read>
	      	         sprintf(hex2, "%02x%02x%02x%02x", buff2[0], buff2[1], buff2[2], buff2[3]);
 8001f78:	7b3b      	ldrb	r3, [r7, #12]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	7b7b      	ldrb	r3, [r7, #13]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	9201      	str	r2, [sp, #4]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <Erase_Subsector+0x100>)
 8001f8e:	4820      	ldr	r0, [pc, #128]	; (8002010 <Erase_Subsector+0x114>)
 8001f90:	f00b f80e 	bl	800cfb0 <siprintf>
	      	         inversion_hex(hex2,hex2inv);
 8001f94:	491f      	ldr	r1, [pc, #124]	; (8002014 <Erase_Subsector+0x118>)
 8001f96:	481e      	ldr	r0, [pc, #120]	; (8002010 <Erase_Subsector+0x114>)
 8001f98:	f7ff fef0 	bl	8001d7c <inversion_hex>
	      	         value2 = strtoul(hex2inv,NULL,16);
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	481c      	ldr	r0, [pc, #112]	; (8002014 <Erase_Subsector+0x118>)
 8001fa2:	f00b ffeb 	bl	800df7c <strtoul>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <Erase_Subsector+0x11c>)
 8001faa:	6013      	str	r3, [r2, #0]
	      	         if (value2 <= min)
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <Erase_Subsector+0x11c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <Erase_Subsector+0x110>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d805      	bhi.n	8001fc4 <Erase_Subsector+0xc8>
	      	         {
	      	             min = value2;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <Erase_Subsector+0x11c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <Erase_Subsector+0x110>)
 8001fbe:	6013      	str	r3, [r2, #0]
	      	             j=i;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	61fb      	str	r3, [r7, #28]
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	4413      	add	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <Erase_Subsector+0x120>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3bfe      	subs	r3, #254	; 0xfe
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbc3      	blt.n	8001f60 <Erase_Subsector+0x64>
	      	         }
	      	     }
	    BSP_QSPI_Erase_Block(Hexadecimal(j*Size));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fe23 	bl	8001c2c <Hexadecimal>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc2d 	bl	8001848 <BSP_QSPI_Erase_Block>
	    comp= j;
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <Erase_Subsector+0x124>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	6013      	str	r3, [r2, #0]

}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	08011a14 	.word	0x08011a14
 8002000:	20000454 	.word	0x20000454
 8002004:	20000460 	.word	0x20000460
 8002008:	20000488 	.word	0x20000488
 800200c:	20000484 	.word	0x20000484
 8002010:	2000046c 	.word	0x2000046c
 8002014:	20000478 	.word	0x20000478
 8002018:	2000048c 	.word	0x2000048c
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <hexa_of_epoch>:

 static uint32_t hexa_of_epoch(int compteur,int size)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint8_t buffer[4];
  BSP_QSPI_Read(buffer,Hexadecimal(compteur*size),4);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fdf8 	bl	8001c2c <Hexadecimal>
 800203c:	4601      	mov	r1, r0
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2204      	movs	r2, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f99d 	bl	8001384 <BSP_QSPI_Read>
  sprintf(hex, "%02x%02x%02x%02x", buffer[0], buffer[1], buffer[2], buffer[3]);
 800204a:	7b3b      	ldrb	r3, [r7, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	7b7b      	ldrb	r3, [r7, #13]
 8002050:	4618      	mov	r0, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	9201      	str	r2, [sp, #4]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	490b      	ldr	r1, [pc, #44]	; (800208c <hexa_of_epoch+0x68>)
 8002060:	480b      	ldr	r0, [pc, #44]	; (8002090 <hexa_of_epoch+0x6c>)
 8002062:	f00a ffa5 	bl	800cfb0 <siprintf>
  inversion_hex(hex,hexinv);
 8002066:	490b      	ldr	r1, [pc, #44]	; (8002094 <hexa_of_epoch+0x70>)
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <hexa_of_epoch+0x6c>)
 800206a:	f7ff fe87 	bl	8001d7c <inversion_hex>
  hexa_value = strtoul(hexinv,NULL,16);
 800206e:	2210      	movs	r2, #16
 8002070:	2100      	movs	r1, #0
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <hexa_of_epoch+0x70>)
 8002074:	f00b ff82 	bl	800df7c <strtoul>
 8002078:	4603      	mov	r3, r0
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <hexa_of_epoch+0x74>)
 800207c:	6013      	str	r3, [r2, #0]
  return hexa_value;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <hexa_of_epoch+0x74>)
 8002080:	681b      	ldr	r3, [r3, #0]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	08011a14 	.word	0x08011a14
 8002090:	20000454 	.word	0x20000454
 8002094:	20000460 	.word	0x20000460
 8002098:	20000490 	.word	0x20000490

0800209c <start_of_history>:
 static int start_of_history(int debut, int fin, uint32_t x,int size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
    int milieu;
    if(x < hexa_of_epoch(debut,size))
 80020aa:	6839      	ldr	r1, [r7, #0]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff ffb9 	bl	8002024 <hexa_of_epoch>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d222      	bcs.n	8002100 <start_of_history+0x64>
       return debut;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	e025      	b.n	800210a <start_of_history+0x6e>
    else
    {
        while(debut <= fin)
        {
            milieu = (debut+fin)/2;
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	0fda      	lsrs	r2, r3, #31
 80020c6:	4413      	add	r3, r2
 80020c8:	105b      	asrs	r3, r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
            if (hexa_of_epoch(milieu,size)==x)
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ffa8 	bl	8002024 <hexa_of_epoch>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <start_of_history+0x46>
             {
                 debut=milieu;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	60fb      	str	r3, [r7, #12]
                 break;
 80020e0:	e012      	b.n	8002108 <start_of_history+0x6c>
             }
             else if(x < hexa_of_epoch(milieu,size))
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	6978      	ldr	r0, [r7, #20]
 80020e6:	f7ff ff9d 	bl	8002024 <hexa_of_epoch>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d203      	bcs.n	80020fa <start_of_history+0x5e>
                fin = milieu-1;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	e002      	b.n	8002100 <start_of_history+0x64>
            else
               debut = milieu +1;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
        while(debut <= fin)
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	ddda      	ble.n	80020be <start_of_history+0x22>
        }
      return debut;
 8002108:	68fb      	ldr	r3, [r7, #12]
    }

}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_UART_TxCpltCallback>:

/**
 * la fonction ci-dessous est appellé lorsqu'une donnée est prète à stocker dans la mémoire
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if (call_flg==true)
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_UART_TxCpltCallback+0x38>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_UART_TxCpltCallback+0x1c>
	    comteur_history++;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_UART_TxCpltCallback+0x3c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_UART_TxCpltCallback+0x3c>)
 800212c:	6013      	str	r3, [r2, #0]
	{
		store=1;
		comp++;
	}

}
 800212e:	e007      	b.n	8002140 <HAL_UART_TxCpltCallback+0x2c>
		store=1;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_UART_TxCpltCallback+0x40>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		comp++;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_UART_TxCpltCallback+0x44>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <HAL_UART_TxCpltCallback+0x44>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	200004ac 	.word	0x200004ac
 8002150:	20000450 	.word	0x20000450
 8002154:	2000044d 	.word	0x2000044d
 8002158:	20000004 	.word	0x20000004

0800215c <Get_Data>:


/* Exported Functions -----------------------------------------------------------------------------*/

void Get_Data(uint8_t buffer[15],uint8_t buff[15], int  * compteur_vit_null)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af04      	add	r7, sp, #16
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]

	if (Flag == 1)
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <Get_Data+0x100>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d170      	bne.n	8002252 <Get_Data+0xf6>
	  {

		// Extraction de la ligne GPRMC
		indice=0;
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <Get_Data+0x104>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)Rxdata);
 8002176:	493b      	ldr	r1, [pc, #236]	; (8002264 <Get_Data+0x108>)
 8002178:	483b      	ldr	r0, [pc, #236]	; (8002268 <Get_Data+0x10c>)
 800217a:	f00a ffb7 	bl	800d0ec <strcpy>
		p= strstr(Txdata,"GPRMC");
 800217e:	493b      	ldr	r1, [pc, #236]	; (800226c <Get_Data+0x110>)
 8002180:	4839      	ldr	r0, [pc, #228]	; (8002268 <Get_Data+0x10c>)
 8002182:	f00a ffbb 	bl	800d0fc <strstr>
 8002186:	4603      	mov	r3, r0
 8002188:	4a39      	ldr	r2, [pc, #228]	; (8002270 <Get_Data+0x114>)
 800218a:	6013      	str	r3, [r2, #0]
		// chercher l'indice de '\n'(retour à la ligne) dans la ligne de GPRMC
		x = strchr(p, '\n');
 800218c:	4b38      	ldr	r3, [pc, #224]	; (8002270 <Get_Data+0x114>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	210a      	movs	r1, #10
 8002192:	4618      	mov	r0, r3
 8002194:	f00a ff9d 	bl	800d0d2 <strchr>
 8002198:	4603      	mov	r3, r0
 800219a:	4a36      	ldr	r2, [pc, #216]	; (8002274 <Get_Data+0x118>)
 800219c:	6013      	str	r3, [r2, #0]
		ind = x - p;
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <Get_Data+0x118>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <Get_Data+0x114>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a33      	ldr	r2, [pc, #204]	; (8002278 <Get_Data+0x11c>)
 80021aa:	6013      	str	r3, [r2, #0]
		// continuer l'extraction
		if (*p == 'G')
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <Get_Data+0x114>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b47      	cmp	r3, #71	; 0x47
 80021b4:	d14d      	bne.n	8002252 <Get_Data+0xf6>
		 {
			for( indice =0;indice<=ind;indice++)
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <Get_Data+0x104>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e014      	b.n	80021e8 <Get_Data+0x8c>
			        {

				     	 Ligne_GPRMC[indice]=*p;
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <Get_Data+0x114>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <Get_Data+0x104>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	7811      	ldrb	r1, [r2, #0]
 80021c8:	4a2c      	ldr	r2, [pc, #176]	; (800227c <Get_Data+0x120>)
 80021ca:	54d1      	strb	r1, [r2, r3]
				     	 *p=*(p+indice);
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <Get_Data+0x114>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <Get_Data+0x104>)
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	441a      	add	r2, r3
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <Get_Data+0x114>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
			for( indice =0;indice<=ind;indice++)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <Get_Data+0x104>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <Get_Data+0x104>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <Get_Data+0x104>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <Get_Data+0x11c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dde4      	ble.n	80021be <Get_Data+0x62>

			        }

			Ligne_GPRMC[indice]= '\0';
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <Get_Data+0x104>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a20      	ldr	r2, [pc, #128]	; (800227c <Get_Data+0x120>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	54d1      	strb	r1, [r2, r3]
		  // Extraction de chaque information dans la ligne
		  sscanf(Ligne_GPRMC,"GGPRMC,%f,A,%f,N,%f,E,%f,,%d",&Temps,&Latitude,&Longitude,&Vitesse,&Date);
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <Get_Data+0x124>)
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <Get_Data+0x128>)
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <Get_Data+0x12c>)
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <Get_Data+0x130>)
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <Get_Data+0x134>)
 800220e:	4921      	ldr	r1, [pc, #132]	; (8002294 <Get_Data+0x138>)
 8002210:	481a      	ldr	r0, [pc, #104]	; (800227c <Get_Data+0x120>)
 8002212:	f00a feed 	bl	800cff0 <siscanf>

		  // Format des données
		  Format_data(Date, Temps, Latitude, Longitude, Vitesse,buffer,buff, compteur_vit_null);
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <Get_Data+0x124>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <Get_Data+0x134>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <Get_Data+0x130>)
 8002222:	ed93 7a00 	vldr	s14, [r3]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <Get_Data+0x12c>)
 8002228:	edd3 6a00 	vldr	s13, [r3]
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <Get_Data+0x128>)
 800222e:	ed93 6a00 	vldr	s12, [r3]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	eef0 1a46 	vmov.f32	s3, s12
 800223c:	eeb0 1a66 	vmov.f32	s2, s13
 8002240:	eef0 0a47 	vmov.f32	s1, s14
 8002244:	eeb0 0a67 	vmov.f32	s0, s15
 8002248:	f000 f85a 	bl	8002300 <Format_data>
		  Flag=0;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <Get_Data+0x100>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]

		}
	  }

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000b82 	.word	0x20000b82
 8002260:	20000b84 	.word	0x20000b84
 8002264:	20000534 	.word	0x20000534
 8002268:	20000824 	.word	0x20000824
 800226c:	08011a28 	.word	0x08011a28
 8002270:	20000b88 	.word	0x20000b88
 8002274:	20000bc0 	.word	0x20000bc0
 8002278:	20000bc4 	.word	0x20000bc4
 800227c:	20000b14 	.word	0x20000b14
 8002280:	20000ba0 	.word	0x20000ba0
 8002284:	20000b98 	.word	0x20000b98
 8002288:	20000b90 	.word	0x20000b90
 800228c:	20000b94 	.word	0x20000b94
 8002290:	20000b8c 	.word	0x20000b8c
 8002294:	08011a30 	.word	0x08011a30

08002298 <GPS_Init>:


void GPS_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <GPS_Init+0x58>)
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <GPS_Init+0x5c>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <GPS_Init+0x58>)
 80022a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <GPS_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <GPS_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <GPS_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <GPS_Init+0x58>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <GPS_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <GPS_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <GPS_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <GPS_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart4);
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <GPS_Init+0x58>)
 80022dc:	f004 fad6 	bl	800688c <HAL_UART_Init>

  HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 80022e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <GPS_Init+0x60>)
 80022e6:	4802      	ldr	r0, [pc, #8]	; (80022f0 <GPS_Init+0x58>)
 80022e8:	f004 fc20 	bl	8006b2c <HAL_UART_Receive_IT>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200004b0 	.word	0x200004b0
 80022f4:	40004c00 	.word	0x40004c00
 80022f8:	20000534 	.word	0x20000534
 80022fc:	00000000 	.word	0x00000000

08002300 <Format_data>:

/* Private Functions --------------------------------------------------------------------------*/

static void Format_data(int Date, float Temps, float Latitude, float Longitude, float Vitesse,uint8_t buffer[15],uint8_t buff[15],int * compteur_vit_null)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b092      	sub	sp, #72	; 0x48
 8002304:	af02      	add	r7, sp, #8
 8002306:	6278      	str	r0, [r7, #36]	; 0x24
 8002308:	ed87 0a08 	vstr	s0, [r7, #32]
 800230c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002310:	ed87 1a06 	vstr	s2, [r7, #24]
 8002314:	edc7 1a05 	vstr	s3, [r7, #20]
 8002318:	6139      	str	r1, [r7, #16]
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	60bb      	str	r3, [r7, #8]

  // Date  :  ddmmaa ==> dd/mm/aa

  Jour = (int)(Date/10000);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	4ab7      	ldr	r2, [pc, #732]	; (8002600 <Format_data+0x300>)
 8002322:	fb82 1203 	smull	r1, r2, r2, r3
 8002326:	1312      	asrs	r2, r2, #12
 8002328:	17db      	asrs	r3, r3, #31
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4ab5      	ldr	r2, [pc, #724]	; (8002604 <Format_data+0x304>)
 800232e:	6013      	str	r3, [r2, #0]
  Mois = (int)((Date-(Jour*10000))/100);
 8002330:	4bb4      	ldr	r3, [pc, #720]	; (8002604 <Format_data+0x304>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4ab4      	ldr	r2, [pc, #720]	; (8002608 <Format_data+0x308>)
 8002336:	fb03 f202 	mul.w	r2, r3, r2
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	4413      	add	r3, r2
 800233e:	4ab3      	ldr	r2, [pc, #716]	; (800260c <Format_data+0x30c>)
 8002340:	fb82 1203 	smull	r1, r2, r2, r3
 8002344:	1152      	asrs	r2, r2, #5
 8002346:	17db      	asrs	r3, r3, #31
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	4ab1      	ldr	r2, [pc, #708]	; (8002610 <Format_data+0x310>)
 800234c:	6013      	str	r3, [r2, #0]
  Annee = (int)(Date-((Jour*10000)+(Mois*100)));
 800234e:	4bad      	ldr	r3, [pc, #692]	; (8002604 <Format_data+0x304>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f242 7210 	movw	r2, #10000	; 0x2710
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	4bad      	ldr	r3, [pc, #692]	; (8002610 <Format_data+0x310>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2164      	movs	r1, #100	; 0x64
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	4aaa      	ldr	r2, [pc, #680]	; (8002614 <Format_data+0x314>)
 800236c:	6013      	str	r3, [r2, #0]

  // Temps :  hhmmss ==> hh:mm:ss
  Heures = (int)(Temps/10000);
 800236e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002372:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8002618 <Format_data+0x318>
 8002376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 2a90 	vmov	r2, s15
 8002382:	4ba6      	ldr	r3, [pc, #664]	; (800261c <Format_data+0x31c>)
 8002384:	601a      	str	r2, [r3, #0]
  Minutes = (int)((Temps-(Heures*10000))/100);
 8002386:	4ba5      	ldr	r3, [pc, #660]	; (800261c <Format_data+0x31c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f242 7210 	movw	r2, #10000	; 0x2710
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800239a:	ed97 7a08 	vldr	s14, [r7, #32]
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002620 <Format_data+0x320>
 80023a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ae:	ee17 2a90 	vmov	r2, s15
 80023b2:	4b9c      	ldr	r3, [pc, #624]	; (8002624 <Format_data+0x324>)
 80023b4:	601a      	str	r2, [r3, #0]
  Secondes = (int)(Temps-((Heures*10000)+(Minutes*100)));
 80023b6:	4b99      	ldr	r3, [pc, #612]	; (800261c <Format_data+0x31c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80023be:	fb03 f202 	mul.w	r2, r3, r2
 80023c2:	4b98      	ldr	r3, [pc, #608]	; (8002624 <Format_data+0x324>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2164      	movs	r1, #100	; 0x64
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80023da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e2:	ee17 2a90 	vmov	r2, s15
 80023e6:	4b90      	ldr	r3, [pc, #576]	; (8002628 <Format_data+0x328>)
 80023e8:	601a      	str	r2, [r3, #0]

  // Timestamp en secondes :

  Epoch_Time = Get_Epoch_Time(Jour,Mois,2000+Annee,Heures,Minutes,Secondes);
 80023ea:	4b86      	ldr	r3, [pc, #536]	; (8002604 <Format_data+0x304>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <Format_data+0x310>)
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	4b88      	ldr	r3, [pc, #544]	; (8002614 <Format_data+0x314>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80023fa:	4b88      	ldr	r3, [pc, #544]	; (800261c <Format_data+0x31c>)
 80023fc:	681d      	ldr	r5, [r3, #0]
 80023fe:	4b89      	ldr	r3, [pc, #548]	; (8002624 <Format_data+0x324>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a89      	ldr	r2, [pc, #548]	; (8002628 <Format_data+0x328>)
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	462b      	mov	r3, r5
 800240c:	4622      	mov	r2, r4
 800240e:	f000 f955 	bl	80026bc <Get_Epoch_Time>
 8002412:	4603      	mov	r3, r0
 8002414:	4a85      	ldr	r2, [pc, #532]	; (800262c <Format_data+0x32c>)
 8002416:	6013      	str	r3, [r2, #0]

  // Vitesse :  vitesse en noeuds ==> vitesse en km/h
  Vitesse = Vitesse * 1.852;
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f7fe f8a5 	bl	8000568 <__aeabi_f2d>
 800241e:	a374      	add	r3, pc, #464	; (adr r3, 80025f0 <Format_data+0x2f0>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f8f8 	bl	8000618 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbea 	bl	8000c08 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	617b      	str	r3, [r7, #20]

  if (Vitesse <= 5)
 8002438:	edd7 7a05 	vldr	s15, [r7, #20]
 800243c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d805      	bhi.n	8002456 <Format_data+0x156>
	  (*compteur_vit_null)++;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e002      	b.n	800245c <Format_data+0x15c>
  else
	  (*compteur_vit_null)=0;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

  if ((*compteur_vit_null) == 30)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b1e      	cmp	r3, #30
 8002462:	d102      	bne.n	800246a <Format_data+0x16a>
	  (*compteur_vit_null)=0;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

  //Distance parcourue en km:

  dist = dist + Vitesse * (1.5/3600);
 800246a:	4b71      	ldr	r3, [pc, #452]	; (8002630 <Format_data+0x330>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f87a 	bl	8000568 <__aeabi_f2d>
 8002474:	4604      	mov	r4, r0
 8002476:	460d      	mov	r5, r1
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7fe f875 	bl	8000568 <__aeabi_f2d>
 800247e:	a35e      	add	r3, pc, #376	; (adr r3, 80025f8 <Format_data+0x2f8>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f8c8 	bl	8000618 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff0c 	bl	80002ac <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbb4 	bl	8000c08 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a63      	ldr	r2, [pc, #396]	; (8002630 <Format_data+0x330>)
 80024a4:	6013      	str	r3, [r2, #0]

  // Latitude : ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_lat = (int)(Latitude/100);
 80024a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80024aa:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002620 <Format_data+0x320>
 80024ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  Latitude = degre_lat + ((Latitude- (degre_lat*100))/60);
 80024bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80024da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024de:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8002634 <Format_data+0x334>
 80024e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ea:	edc7 7a07 	vstr	s15, [r7, #28]

  // Longitude :   ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_long = (int)(Longitude/100);
 80024ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80024f2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002620 <Format_data+0x320>
 80024f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fe:	ee17 3a90 	vmov	r3, s15
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
  Longitude = degre_long + ((Longitude- (degre_long*100))/60);
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	2264      	movs	r2, #100	; 0x64
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002522:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002526:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8002634 <Format_data+0x334>
 800252a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	edc7 7a06 	vstr	s15, [r7, #24]




  Data_from_GPS mydata = {
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <Format_data+0x32c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
 8002544:	edd7 7a05 	vldr	s15, [r7, #20]
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <Format_data+0x330>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002562:	edc7 7a01 	vstr	s15, [r7, #4]
 8002566:	793b      	ldrb	r3, [r7, #4]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     .speed= Vitesse,
     .Distance = dist,
  };


  memcpy(buffer, &mydata, sizeof(mydata));
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	461c      	mov	r4, r3
 8002572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002576:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002578:	6020      	str	r0, [r4, #0]
 800257a:	6061      	str	r1, [r4, #4]
 800257c:	60a2      	str	r2, [r4, #8]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	81a3      	strh	r3, [r4, #12]

  // niveau de charge de la batterie :

  led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002582:	2104      	movs	r1, #4
 8002584:	482c      	ldr	r0, [pc, #176]	; (8002638 <Format_data+0x338>)
 8002586:	f001 fe07 	bl	8004198 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <Format_data+0x33c>)
 8002590:	601a      	str	r2, [r3, #0]
  	  led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8002592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <Format_data+0x340>)
 8002598:	f001 fdfe 	bl	8004198 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <Format_data+0x344>)
 80025a2:	601a      	str	r2, [r3, #0]
  	  led3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80025a4:	2108      	movs	r1, #8
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f001 fdf5 	bl	8004198 <HAL_GPIO_ReadPin>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <Format_data+0x348>)
 80025b4:	601a      	str	r2, [r3, #0]
  	  led4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80025b6:	2120      	movs	r1, #32
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f001 fdec 	bl	8004198 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <Format_data+0x34c>)
 80025c6:	601a      	str	r2, [r3, #0]

  	  if (led4==1)
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <Format_data+0x34c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d103      	bne.n	80025d8 <Format_data+0x2d8>
  		  niv=100;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <Format_data+0x350>)
 80025d2:	2264      	movs	r2, #100	; 0x64
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e058      	b.n	800268a <Format_data+0x38a>
  	  else if ((led4==0)&&(led3==1))
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <Format_data+0x34c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d139      	bne.n	8002654 <Format_data+0x354>
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <Format_data+0x348>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d135      	bne.n	8002654 <Format_data+0x354>
  		  niv=75;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <Format_data+0x350>)
 80025ea:	224b      	movs	r2, #75	; 0x4b
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e04c      	b.n	800268a <Format_data+0x38a>
 80025f0:	c083126f 	.word	0xc083126f
 80025f4:	3ffda1ca 	.word	0x3ffda1ca
 80025f8:	b4e81b4f 	.word	0xb4e81b4f
 80025fc:	3f3b4e81 	.word	0x3f3b4e81
 8002600:	68db8bad 	.word	0x68db8bad
 8002604:	20000ba4 	.word	0x20000ba4
 8002608:	ffffd8f0 	.word	0xffffd8f0
 800260c:	51eb851f 	.word	0x51eb851f
 8002610:	20000ba8 	.word	0x20000ba8
 8002614:	20000bac 	.word	0x20000bac
 8002618:	461c4000 	.word	0x461c4000
 800261c:	20000bb0 	.word	0x20000bb0
 8002620:	42c80000 	.word	0x42c80000
 8002624:	20000bb4 	.word	0x20000bb4
 8002628:	20000bb8 	.word	0x20000bb8
 800262c:	20000bbc 	.word	0x20000bbc
 8002630:	20000b9c 	.word	0x20000b9c
 8002634:	42700000 	.word	0x42700000
 8002638:	48000400 	.word	0x48000400
 800263c:	20000bc8 	.word	0x20000bc8
 8002640:	48001000 	.word	0x48001000
 8002644:	20000bcc 	.word	0x20000bcc
 8002648:	20000bd0 	.word	0x20000bd0
 800264c:	20000bd4 	.word	0x20000bd4
 8002650:	20000bd8 	.word	0x20000bd8
  	  else if ((led3==0)&&(led2==1))
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <Format_data+0x3a4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <Format_data+0x36c>
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <Format_data+0x3a8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d103      	bne.n	800266c <Format_data+0x36c>
  		  niv=50;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <Format_data+0x3ac>)
 8002666:	2232      	movs	r2, #50	; 0x32
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00e      	b.n	800268a <Format_data+0x38a>
  	  else if ((led2==0)&&(led1==1))
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <Format_data+0x3a8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <Format_data+0x384>
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <Format_data+0x3b0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d103      	bne.n	8002684 <Format_data+0x384>
  		  niv=25;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <Format_data+0x3ac>)
 800267e:	2219      	movs	r2, #25
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e002      	b.n	800268a <Format_data+0x38a>
  	  else
  		  niv=0;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <Format_data+0x3ac>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  Inversion(buffer,buff);
 800268a:	68f9      	ldr	r1, [r7, #12]
 800268c:	6938      	ldr	r0, [r7, #16]
 800268e:	f000 f839 	bl	8002704 <Inversion>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"==> Ready to store\r\n",22);
 8002692:	2216      	movs	r2, #22
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <Format_data+0x3b4>)
 8002696:	4808      	ldr	r0, [pc, #32]	; (80026b8 <Format_data+0x3b8>)
 8002698:	f004 f9da 	bl	8006a50 <HAL_UART_Transmit_IT>

}
 800269c:	bf00      	nop
 800269e:	3740      	adds	r7, #64	; 0x40
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdb0      	pop	{r4, r5, r7, pc}
 80026a4:	20000bd0 	.word	0x20000bd0
 80026a8:	20000bcc 	.word	0x20000bcc
 80026ac:	20000bd8 	.word	0x20000bd8
 80026b0:	20000bc8 	.word	0x20000bc8
 80026b4:	08011a50 	.word	0x08011a50
 80026b8:	200003c8 	.word	0x200003c8

080026bc <Get_Epoch_Time>:

/**
 * la fonction ci-dessous a pour but de convertir date et temps en une valeur en secondes (epoch_time)
 */
static uint32_t Get_Epoch_Time(int jour,int mois,int annee,int heures,int minutes,int secondes)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b090      	sub	sp, #64	; 0x40
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
	    struct tm t;
	    time_t t_of_day;

	    t.tm_year = annee-1900;  // Year - 1900
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
	    t.tm_mon = mois-1;           // Month, where 0 = jan
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
	    t.tm_mday = jour;          // Day of the month
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	623b      	str	r3, [r7, #32]
	    t.tm_hour = heures+1;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
	    t.tm_min = minutes;
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	61bb      	str	r3, [r7, #24]
	    t.tm_sec = secondes;
 80026e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e8:	617b      	str	r3, [r7, #20]
	    t_of_day = mktime(&t);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 fc44 	bl	800bf7c <mktime>
 80026f4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	    return (t_of_day);
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3740      	adds	r7, #64	; 0x40
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <Inversion>:

/**
 * la fonction ci-dessous a pour but d'inverser le contenu d'un buffer de la façon suivante : "abcdefghijklp" ==> "dcbahgfelkjip"
 */
void Inversion(uint8_t buffer[15],uint8_t buff[15])
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	int k =0;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
	  for (int i=0; i<=8; i=i+4)
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e018      	b.n	800274a <Inversion+0x46>
	  {
	      for (int j =i+3; j>=i;j--)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3303      	adds	r3, #3
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e00d      	b.n	800273c <Inversion+0x38>
	      {
	          buff[k]=buffer[j];
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	441a      	add	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	440b      	add	r3, r1
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
	          k++;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
	      for (int j =i+3; j>=i;j--)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3b01      	subs	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	daed      	bge.n	8002720 <Inversion+0x1c>
	  for (int i=0; i<=8; i=i+4)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	3304      	adds	r3, #4
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b08      	cmp	r3, #8
 800274e:	dde3      	ble.n	8002718 <Inversion+0x14>
	      }
	  }

	  buff[12]=buffer[12];
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	7b12      	ldrb	r2, [r2, #12]
 8002758:	701a      	strb	r2, [r3, #0]
	  buff[13] = buffer[13];
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	330d      	adds	r3, #13
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	7b52      	ldrb	r2, [r2, #13]
 8002762:	701a      	strb	r2, [r3, #0]
	  buff[14]= niv;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <Inversion+0x78>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	330e      	adds	r3, #14
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	20000bd8 	.word	0x20000bd8

08002780 <HAL_UART_RxCpltCallback>:
/**
 * la fonction ci-dessous est appellé après la réception de chaque donnée du module GPS
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

	 Flag=1;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_UART_RxCpltCallback+0x24>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
     HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 800278e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002792:	4905      	ldr	r1, [pc, #20]	; (80027a8 <HAL_UART_RxCpltCallback+0x28>)
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_UART_RxCpltCallback+0x2c>)
 8002796:	f004 f9c9 	bl	8006b2c <HAL_UART_Receive_IT>


}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000b82 	.word	0x20000b82
 80027a8:	20000534 	.word	0x20000534
 80027ac:	200004b0 	.word	0x200004b0

080027b0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  	if (GPIO_Pin == GPIO_PIN_2)
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d111      	bne.n	80027e4 <HAL_GPIO_EXTI_Callback+0x34>
  		{
  		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80027c0:	2104      	movs	r1, #4
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c6:	f001 fce7 	bl	8004198 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d103      	bne.n	80027d8 <HAL_GPIO_EXTI_Callback+0x28>
  		   bouton = 1;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e002      	b.n	80027de <HAL_GPIO_EXTI_Callback+0x2e>
  		 else
  		   bouton = 0;
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_GPIO_EXTI_Callback+0x3c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x40>)
 80027e0:	221f      	movs	r2, #31
 80027e2:	619a      	str	r2, [r3, #24]
  		}

  }
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000cb0 	.word	0x20000cb0
 80027f0:	40007000 	.word	0x40007000

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027f8:	f000 fe7b 	bl	80034f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fc:	f000 f89c 	bl	8002938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002800:	f000 f90a 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002804:	f000 f8ea 	bl	80029dc <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  BLE_Init();
 8002808:	f7fe fd4a 	bl	80012a0 <BLE_Init>
  GPS_Init();
 800280c:	f7ff fd44 	bl	8002298 <GPS_Init>
  Memory_Init();
 8002810:	f7fe fd72 	bl	80012f8 <Memory_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002814:	f005 ff26 	bl	8008664 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8002818:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <main+0xdc>)
 800281a:	2100      	movs	r1, #0
 800281c:	2001      	movs	r0, #1
 800281e:	f005 fffd 	bl	800881c <osSemaphoreNew>
 8002822:	4603      	mov	r3, r0
 8002824:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <main+0xe0>)
 8002826:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 8002828:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <main+0xe4>)
 800282a:	2100      	movs	r1, #0
 800282c:	2001      	movs	r0, #1
 800282e:	f005 fff5 	bl	800881c <osSemaphoreNew>
 8002832:	4603      	mov	r3, r0
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <main+0xe8>)
 8002836:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore3 */
  Semaphore3Handle = osSemaphoreNew(1, 0, &Semaphore3_attributes);
 8002838:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <main+0xec>)
 800283a:	2100      	movs	r1, #0
 800283c:	2001      	movs	r0, #1
 800283e:	f005 ffed 	bl	800881c <osSemaphoreNew>
 8002842:	4603      	mov	r3, r0
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <main+0xf0>)
 8002846:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore0 */
  Semaphore0Handle = osSemaphoreNew(1, 1, &Semaphore0_attributes);
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <main+0xf4>)
 800284a:	2101      	movs	r1, #1
 800284c:	2001      	movs	r0, #1
 800284e:	f005 ffe5 	bl	800881c <osSemaphoreNew>
 8002852:	4603      	mov	r3, r0
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <main+0xf8>)
 8002856:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue01_attributes);
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <main+0xfc>)
 800285a:	2101      	movs	r1, #1
 800285c:	200f      	movs	r0, #15
 800285e:	f006 f8fd 	bl	8008a5c <osMessageQueueNew>
 8002862:	4603      	mov	r3, r0
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <main+0x100>)
 8002866:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue02_attributes);
 8002868:	4a23      	ldr	r2, [pc, #140]	; (80028f8 <main+0x104>)
 800286a:	2101      	movs	r1, #1
 800286c:	200f      	movs	r0, #15
 800286e:	f006 f8f5 	bl	8008a5c <osMessageQueueNew>
 8002872:	4603      	mov	r3, r0
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <main+0x108>)
 8002876:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (15, sizeof(uint8_t), &myQueue03_attributes);
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <main+0x10c>)
 800287a:	2101      	movs	r1, #1
 800287c:	200f      	movs	r0, #15
 800287e:	f006 f8ed 	bl	8008a5c <osMessageQueueNew>
 8002882:	4603      	mov	r3, r0
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <main+0x110>)
 8002886:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GPS_Get_Data */
  GPS_Get_DataHandle = osThreadNew(StartGPS_Get_Data, NULL, &GPS_Get_Data_attributes);
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <main+0x114>)
 800288a:	2100      	movs	r1, #0
 800288c:	481f      	ldr	r0, [pc, #124]	; (800290c <main+0x118>)
 800288e:	f005 ff33 	bl	80086f8 <osThreadNew>
 8002892:	4603      	mov	r3, r0
 8002894:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <main+0x11c>)
 8002896:	6013      	str	r3, [r2, #0]

  /* creation of Mem_Access_Data */
  Mem_Access_DataHandle = osThreadNew(StartMem_Access_Data, NULL, &Mem_Access_Data_attributes);
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <main+0x120>)
 800289a:	2100      	movs	r1, #0
 800289c:	481e      	ldr	r0, [pc, #120]	; (8002918 <main+0x124>)
 800289e:	f005 ff2b 	bl	80086f8 <osThreadNew>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <main+0x128>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* creation of BLE_Send_Data */
  BLE_Send_DataHandle = osThreadNew(StartBLE_Send_Data, NULL, &BLE_Send_Data_attributes);
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <main+0x12c>)
 80028aa:	2100      	movs	r1, #0
 80028ac:	481d      	ldr	r0, [pc, #116]	; (8002924 <main+0x130>)
 80028ae:	f005 ff23 	bl	80086f8 <osThreadNew>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <main+0x134>)
 80028b6:	6013      	str	r3, [r2, #0]

  /* creation of Bike_state */
  Bike_stateHandle = osThreadNew(StartBike_state, NULL, &Bike_state_attributes);
 80028b8:	4a1c      	ldr	r2, [pc, #112]	; (800292c <main+0x138>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <main+0x13c>)
 80028be:	f005 ff1b 	bl	80086f8 <osThreadNew>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <main+0x140>)
 80028c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80028c8:	f005 fef0 	bl	80086ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <main+0xd8>
 80028ce:	bf00      	nop
 80028d0:	08011bf4 	.word	0x08011bf4
 80028d4:	20000bf8 	.word	0x20000bf8
 80028d8:	08011c04 	.word	0x08011c04
 80028dc:	20000bfc 	.word	0x20000bfc
 80028e0:	08011c14 	.word	0x08011c14
 80028e4:	20000c00 	.word	0x20000c00
 80028e8:	08011c24 	.word	0x08011c24
 80028ec:	20000c04 	.word	0x20000c04
 80028f0:	08011bac 	.word	0x08011bac
 80028f4:	20000bec 	.word	0x20000bec
 80028f8:	08011bc4 	.word	0x08011bc4
 80028fc:	20000bf0 	.word	0x20000bf0
 8002900:	08011bdc 	.word	0x08011bdc
 8002904:	20000bf4 	.word	0x20000bf4
 8002908:	08011b1c 	.word	0x08011b1c
 800290c:	08002b35 	.word	0x08002b35
 8002910:	20000bdc 	.word	0x20000bdc
 8002914:	08011b40 	.word	0x08011b40
 8002918:	08002bc1 	.word	0x08002bc1
 800291c:	20000be0 	.word	0x20000be0
 8002920:	08011b64 	.word	0x08011b64
 8002924:	08002c89 	.word	0x08002c89
 8002928:	20000be4 	.word	0x20000be4
 800292c:	08011b88 	.word	0x08011b88
 8002930:	08002d55 	.word	0x08002d55
 8002934:	20000be8 	.word	0x20000be8

08002938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b096      	sub	sp, #88	; 0x58
 800293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	2244      	movs	r2, #68	; 0x44
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f009 fa38 	bl	800bdbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294c:	463b      	mov	r3, r7
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800295a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800295e:	f001 fc93 	bl	8004288 <HAL_PWREx_ControlVoltageScaling>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002968:	f000 fa3c 	bl	8002de4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800296c:	2310      	movs	r3, #16
 800296e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002970:	2301      	movs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002978:	2360      	movs	r3, #96	; 0x60
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297c:	2302      	movs	r3, #2
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002980:	2301      	movs	r3, #1
 8002982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002988:	2328      	movs	r3, #40	; 0x28
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800298c:	2307      	movs	r3, #7
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002990:	2302      	movs	r3, #2
 8002992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002994:	2302      	movs	r3, #2
 8002996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4618      	mov	r0, r3
 800299e:	f002 f9b5 	bl	8004d0c <HAL_RCC_OscConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80029a8:	f000 fa1c 	bl	8002de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
 80029ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b0:	2303      	movs	r3, #3
 80029b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	2104      	movs	r1, #4
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 fd7d 	bl	80054c4 <HAL_RCC_ClockConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029d0:	f000 fa08 	bl	8002de4 <Error_Handler>
  }
}
 80029d4:	bf00      	nop
 80029d6:	3758      	adds	r7, #88	; 0x58
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_DMA_Init+0x38>)
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <MX_DMA_Init+0x38>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6493      	str	r3, [r2, #72]	; 0x48
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_DMA_Init+0x38>)
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2105      	movs	r1, #5
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 fe8c 	bl	800371c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002a04:	200f      	movs	r0, #15
 8002a06:	f000 fea5 	bl	8003754 <HAL_NVIC_EnableIRQ>

}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	4a37      	ldr	r2, [pc, #220]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a52:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	4a25      	ldr	r2, [pc, #148]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a94:	f043 0308 	orr.w	r3, r3, #8
 8002a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <MX_GPIO_Init+0x110>)
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002aaa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002abe:	f001 f8cd 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad8:	f001 f8c0 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002adc:	2304      	movs	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	480f      	ldr	r0, [pc, #60]	; (8002b2c <MX_GPIO_Init+0x114>)
 8002af0:	f001 f8b4 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <MX_GPIO_Init+0x118>)
 8002b0a:	f001 f8a7 	bl	8003c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2105      	movs	r1, #5
 8002b12:	2008      	movs	r0, #8
 8002b14:	f000 fe02 	bl	800371c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b18:	2008      	movs	r0, #8
 8002b1a:	f000 fe1b 	bl	8003754 <HAL_NVIC_EnableIRQ>

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000400 	.word	0x48000400
 8002b30:	48001000 	.word	0x48001000

08002b34 <StartGPS_Get_Data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS_Get_Data */
void StartGPS_Get_Data(void *argument)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <StartGPS_Get_Data+0x6c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 fef3 	bl	8008930 <osSemaphoreAcquire>

	  if (history_flag==0)
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <StartGPS_Get_Data+0x70>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <StartGPS_Get_Data+0x5e>
	  {

		  Get_Data(GPS_Data, BLE_Data,&Temps_vit_null);
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <StartGPS_Get_Data+0x74>)
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <StartGPS_Get_Data+0x78>)
 8002b56:	4816      	ldr	r0, [pc, #88]	; (8002bb0 <StartGPS_Get_Data+0x7c>)
 8002b58:	f7ff fb00 	bl	800215c <Get_Data>

		  for (int j=0;j<15;j++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e014      	b.n	8002b8c <StartGPS_Get_Data+0x58>

			  {
				osMessageQueuePut(myQueue01Handle, &(GPS_Data[j]), sizeof(GPS_Data[j]), 100);
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <StartGPS_Get_Data+0x80>)
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <StartGPS_Get_Data+0x7c>)
 8002b6a:	1899      	adds	r1, r3, r2
 8002b6c:	2364      	movs	r3, #100	; 0x64
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f005 ffe8 	bl	8008b44 <osMessageQueuePut>
				osMessageQueuePut(myQueue02Handle, &(BLE_Data[j]), sizeof(BLE_Data[j]), 100);
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <StartGPS_Get_Data+0x84>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <StartGPS_Get_Data+0x78>)
 8002b7c:	1899      	adds	r1, r3, r2
 8002b7e:	2364      	movs	r3, #100	; 0x64
 8002b80:	2201      	movs	r2, #1
 8002b82:	f005 ffdf 	bl	8008b44 <osMessageQueuePut>
		  for (int j=0;j<15;j++)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b0e      	cmp	r3, #14
 8002b90:	dde7      	ble.n	8002b62 <StartGPS_Get_Data+0x2e>
			  }

	  }
	  osSemaphoreRelease(Semaphore2Handle);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <StartGPS_Get_Data+0x88>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 ff1c 	bl	80089d4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002b9c:	e7ce      	b.n	8002b3c <StartGPS_Get_Data+0x8>
 8002b9e:	bf00      	nop
 8002ba0:	20000bf8 	.word	0x20000bf8
 8002ba4:	20000cbc 	.word	0x20000cbc
 8002ba8:	20000cb4 	.word	0x20000cb4
 8002bac:	20000c60 	.word	0x20000c60
 8002bb0:	20000c50 	.word	0x20000c50
 8002bb4:	20000bec 	.word	0x20000bec
 8002bb8:	20000bf0 	.word	0x20000bf0
 8002bbc:	20000bfc 	.word	0x20000bfc

08002bc0 <StartMem_Access_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMem_Access_Data */
void StartMem_Access_Data(void *argument)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMem_Access_Data */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <StartMem_Access_Data+0x9c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f005 fead 	bl	8008930 <osSemaphoreAcquire>


	      if (history_flag==0)
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <StartMem_Access_Data+0xa0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <StartMem_Access_Data+0x50>
	      {

			  for (int k=0;k<15;k++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e00b      	b.n	8002bfc <StartMem_Access_Data+0x3c>

					  {
						osMessageQueueGet(myQueue01Handle, &(buffer_queue1[k]), &size, 100);
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <StartMem_Access_Data+0xa4>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <StartMem_Access_Data+0xa8>)
 8002bec:	1899      	adds	r1, r3, r2
 8002bee:	2364      	movs	r3, #100	; 0x64
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <StartMem_Access_Data+0xac>)
 8002bf2:	f006 f807 	bl	8008c04 <osMessageQueueGet>
			  for (int k=0;k<15;k++)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b0e      	cmp	r3, #14
 8002c00:	ddf0      	ble.n	8002be4 <StartMem_Access_Data+0x24>
					  }

			  Store_Data(buffer_queue1,Data_size);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <StartMem_Access_Data+0xb0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4817      	ldr	r0, [pc, #92]	; (8002c68 <StartMem_Access_Data+0xa8>)
 8002c0a:	f7fe fc5b 	bl	80014c4 <Store_Data>
 8002c0e:	e01c      	b.n	8002c4a <StartMem_Access_Data+0x8a>

	      }
	      else
	      {

	    	  if(End_History==0)
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <StartMem_Access_Data+0xb4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <StartMem_Access_Data+0x66>
	    	     get_history(memory_data,Data_size,&flg_hist);
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <StartMem_Access_Data+0xb0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <StartMem_Access_Data+0xb8>)
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4816      	ldr	r0, [pc, #88]	; (8002c7c <StartMem_Access_Data+0xbc>)
 8002c22:	f7fe fc8d 	bl	8001540 <get_history>

	    	  for (int j=0;j<15;j++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	e00b      	b.n	8002c44 <StartMem_Access_Data+0x84>

	    	  		  {
	    	  		    osMessageQueuePut(myQueue03Handle, &(memory_data[j]), sizeof(memory_data[j]), 100);
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <StartMem_Access_Data+0xc0>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <StartMem_Access_Data+0xbc>)
 8002c34:	1899      	adds	r1, r3, r2
 8002c36:	2364      	movs	r3, #100	; 0x64
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f005 ff83 	bl	8008b44 <osMessageQueuePut>
	    	  for (int j=0;j<15;j++)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b0e      	cmp	r3, #14
 8002c48:	ddf0      	ble.n	8002c2c <StartMem_Access_Data+0x6c>
	    	  		  }

	      }

	      End_History=0;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <StartMem_Access_Data+0xb4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
	 	  osSemaphoreRelease(Semaphore3Handle);
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <StartMem_Access_Data+0xc4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 febd 	bl	80089d4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002c5a:	e7b5      	b.n	8002bc8 <StartMem_Access_Data+0x8>
 8002c5c:	20000bfc 	.word	0x20000bfc
 8002c60:	20000cbc 	.word	0x20000cbc
 8002c64:	20000bec 	.word	0x20000bec
 8002c68:	20000c80 	.word	0x20000c80
 8002c6c:	20000caf 	.word	0x20000caf
 8002c70:	20000008 	.word	0x20000008
 8002c74:	20000cc0 	.word	0x20000cc0
 8002c78:	20000cb8 	.word	0x20000cb8
 8002c7c:	20000c70 	.word	0x20000c70
 8002c80:	20000bf4 	.word	0x20000bf4
 8002c84:	20000c00 	.word	0x20000c00

08002c88 <StartBLE_Send_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBLE_Send_Data */
void StartBLE_Send_Data(void *argument)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBLE_Send_Data */
  /* Infinite loop */
  for(;;)
  {
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <StartBLE_Send_Data+0xa4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 fe49 	bl	8008930 <osSemaphoreAcquire>

	      if (flg_hist==true)
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <StartBLE_Send_Data+0xa8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <StartBLE_Send_Data+0x30>
	      		{

	      		    End_History=1;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <StartBLE_Send_Data+0xac>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
	      		    history_flag=0;
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <StartBLE_Send_Data+0xb0>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
	      		    flg_hist = false;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <StartBLE_Send_Data+0xa8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]

	      		 }

	      if (history_flag==0)
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <StartBLE_Send_Data+0xb0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d117      	bne.n	8002cf0 <StartBLE_Send_Data+0x68>
	      {
			  for (int l=0;l<15;l++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00b      	b.n	8002cde <StartBLE_Send_Data+0x56>

					  {
						osMessageQueueGet(myQueue02Handle, &(buffer_queue2[l]), &size, 100);
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <StartBLE_Send_Data+0xb4>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <StartBLE_Send_Data+0xb8>)
 8002cce:	1899      	adds	r1, r3, r2
 8002cd0:	2364      	movs	r3, #100	; 0x64
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <StartBLE_Send_Data+0xbc>)
 8002cd4:	f005 ff96 	bl	8008c04 <osMessageQueueGet>
			  for (int l=0;l<15;l++)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b0e      	cmp	r3, #14
 8002ce2:	ddf0      	ble.n	8002cc6 <StartBLE_Send_Data+0x3e>
					  }


			  send_data(buffer_queue2,&history_flag,&End_History);
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <StartBLE_Send_Data+0xac>)
 8002ce6:	4914      	ldr	r1, [pc, #80]	; (8002d38 <StartBLE_Send_Data+0xb0>)
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <StartBLE_Send_Data+0xb8>)
 8002cea:	f7fe f995 	bl	8001018 <send_data>
 8002cee:	e016      	b.n	8002d1e <StartBLE_Send_Data+0x96>
	      }
	      else
	      {
	    	  for (int l=0;l<15;l++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	e00b      	b.n	8002d0e <StartBLE_Send_Data+0x86>

	    	  	  {
	    	  	  	osMessageQueueGet(myQueue03Handle, &(buffer_queue3[l]), &size, 100);
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <StartBLE_Send_Data+0xc0>)
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <StartBLE_Send_Data+0xc4>)
 8002cfe:	1899      	adds	r1, r3, r2
 8002d00:	2364      	movs	r3, #100	; 0x64
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <StartBLE_Send_Data+0xbc>)
 8002d04:	f005 ff7e 	bl	8008c04 <osMessageQueueGet>
	    	  for (int l=0;l<15;l++)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b0e      	cmp	r3, #14
 8002d12:	ddf0      	ble.n	8002cf6 <StartBLE_Send_Data+0x6e>
	    	  	  }


	    	  send_data(buffer_queue3,&history_flag,&End_History);
 8002d14:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <StartBLE_Send_Data+0xac>)
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <StartBLE_Send_Data+0xb0>)
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <StartBLE_Send_Data+0xc4>)
 8002d1a:	f7fe f97d 	bl	8001018 <send_data>
	      }


	  	  osSemaphoreRelease(Semaphore0Handle);
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <StartBLE_Send_Data+0xc8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fe56 	bl	80089d4 <osSemaphoreRelease>
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002d28:	e7b2      	b.n	8002c90 <StartBLE_Send_Data+0x8>
 8002d2a:	bf00      	nop
 8002d2c:	20000c00 	.word	0x20000c00
 8002d30:	20000cb8 	.word	0x20000cb8
 8002d34:	20000cc0 	.word	0x20000cc0
 8002d38:	20000cbc 	.word	0x20000cbc
 8002d3c:	20000bf0 	.word	0x20000bf0
 8002d40:	20000c90 	.word	0x20000c90
 8002d44:	20000caf 	.word	0x20000caf
 8002d48:	20000bf4 	.word	0x20000bf4
 8002d4c:	20000ca0 	.word	0x20000ca0
 8002d50:	20000c04 	.word	0x20000c04

08002d54 <StartBike_state>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBike_state */
void StartBike_state(void *argument)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBike_state */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <StartBike_state+0x5c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fde3 	bl	8008930 <osSemaphoreAcquire>

	  if ((bouton==0) && (Temps_vit_null>=27))
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <StartBike_state+0x60>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <StartBike_state+0x36>
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <StartBike_state+0x64>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b1a      	cmp	r3, #26
 8002d78:	dd07      	ble.n	8002d8a <StartBike_state+0x36>
		  {
		      HAL_SuspendTick();
 8002d7a:	f000 fa45 	bl	8003208 <HAL_SuspendTick>
		      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 8002d7e:	2008      	movs	r0, #8
 8002d80:	f001 fa3a 	bl	80041f8 <HAL_PWR_EnableWakeUpPin>
		      HAL_PWR_EnterSTANDBYMode();
 8002d84:	f001 fa58 	bl	8004238 <HAL_PWR_EnterSTANDBYMode>
 8002d88:	e00c      	b.n	8002da4 <StartBike_state+0x50>

		  }
	  else
		  {
              HAL_ResumeTick();
 8002d8a:	f000 fa4f 	bl	800322c <HAL_ResumeTick>
              if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8002d8e:	2104      	movs	r1, #4
 8002d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d94:	f001 fa00 	bl	8004198 <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <StartBike_state+0x50>
               		   bouton = 1;
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <StartBike_state+0x60>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
		  }

	  osSemaphoreRelease(Semaphore1Handle);
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <StartBike_state+0x68>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f005 fe13 	bl	80089d4 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002dae:	e7d5      	b.n	8002d5c <StartBike_state+0x8>
 8002db0:	20000c04 	.word	0x20000c04
 8002db4:	20000cb0 	.word	0x20000cb0
 8002db8:	20000cb4 	.word	0x20000cb4
 8002dbc:	20000bf8 	.word	0x20000bf8

08002dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dd2:	f000 fba7 	bl	8003524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40001000 	.word	0x40001000

08002de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002de8:	b672      	cpsid	i
}
 8002dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dec:	e7fe      	b.n	8002dec <Error_Handler+0x8>
	...

08002df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_MspInit+0x4c>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <HAL_MspInit+0x4c>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6613      	str	r3, [r2, #96]	; 0x60
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_MspInit+0x4c>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	210f      	movs	r1, #15
 8002e2a:	f06f 0001 	mvn.w	r0, #1
 8002e2e:	f000 fc75 	bl	800371c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000

08002e40 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_QSPI_MspInit+0x7c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d128      	bne.n	8002eb4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6513      	str	r3, [r2, #80]	; 0x50
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_QSPI_MspInit+0x80>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002e92:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002e96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ea4:	230a      	movs	r3, #10
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_QSPI_MspInit+0x84>)
 8002eb0:	f000 fed4 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	a0001000 	.word	0xa0001000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	48001000 	.word	0x48001000

08002ec8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_QSPI_MspDeInit+0x30>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_QSPI_MspDeInit+0x34>)
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_QSPI_MspDeInit+0x34>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002ee6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <HAL_QSPI_MspDeInit+0x38>)
 8002eec:	f001 f860 	bl	8003fb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	a0001000 	.word	0xa0001000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	48001000 	.word	0x48001000

08002f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b0b0      	sub	sp, #192	; 0xc0
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	2288      	movs	r2, #136	; 0x88
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f008 ff49 	bl	800bdbc <memset>
  if(huart->Instance==UART4)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a83      	ldr	r2, [pc, #524]	; (800313c <HAL_UART_MspInit+0x238>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d145      	bne.n	8002fc0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f34:	2308      	movs	r3, #8
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fd15 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f4c:	f7ff ff4a 	bl	8002de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f50:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b78      	ldr	r3, [pc, #480]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b75      	ldr	r3, [pc, #468]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4a74      	ldr	r2, [pc, #464]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    PA15 (JTDI)     ------> UART4_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8002f80:	f248 0303 	movw	r3, #32771	; 0x8003
 8002f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002faa:	f000 fe57 	bl	8003c5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	2034      	movs	r0, #52	; 0x34
 8002fb4:	f000 fbb2 	bl	800371c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002fb8:	2034      	movs	r0, #52	; 0x34
 8002fba:	f000 fbcb 	bl	8003754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fbe:	e0b9      	b.n	8003134 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <HAL_UART_MspInit+0x240>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d16c      	bne.n	80030a4 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fcca 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002fe2:	f7ff feff 	bl	8002de4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe6:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	4a55      	ldr	r2, [pc, #340]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff2:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_UART_MspInit+0x23c>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <HAL_UART_MspInit+0x23c>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003016:	23c0      	movs	r3, #192	; 0xc0
 8003018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800302e:	2307      	movs	r3, #7
 8003030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003038:	4619      	mov	r1, r3
 800303a:	4843      	ldr	r0, [pc, #268]	; (8003148 <HAL_UART_MspInit+0x244>)
 800303c:	f000 fe0e 	bl	8003c5c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <HAL_UART_MspInit+0x248>)
 8003042:	4a43      	ldr	r2, [pc, #268]	; (8003150 <HAL_UART_MspInit+0x24c>)
 8003044:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8003046:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_UART_MspInit+0x248>)
 8003048:	2202      	movs	r2, #2
 800304a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_UART_MspInit+0x248>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_UART_MspInit+0x248>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_UART_MspInit+0x248>)
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_UART_MspInit+0x248>)
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003064:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_UART_MspInit+0x248>)
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_UART_MspInit+0x248>)
 800306c:	2220      	movs	r2, #32
 800306e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_UART_MspInit+0x248>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003076:	4835      	ldr	r0, [pc, #212]	; (800314c <HAL_UART_MspInit+0x248>)
 8003078:	f000 fb7a 	bl	8003770 <HAL_DMA_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003082:	f7ff feaf 	bl	8002de4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_UART_MspInit+0x248>)
 800308a:	671a      	str	r2, [r3, #112]	; 0x70
 800308c:	4a2f      	ldr	r2, [pc, #188]	; (800314c <HAL_UART_MspInit+0x248>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2105      	movs	r1, #5
 8003096:	2025      	movs	r0, #37	; 0x25
 8003098:	f000 fb40 	bl	800371c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800309c:	2025      	movs	r0, #37	; 0x25
 800309e:	f000 fb59 	bl	8003754 <HAL_NVIC_EnableIRQ>
}
 80030a2:	e047      	b.n	8003134 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <HAL_UART_MspInit+0x250>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d142      	bne.n	8003134 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030ae:	2302      	movs	r3, #2
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fc58 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 80030c6:	f7ff fe8d 	bl	8002de4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	6593      	str	r3, [r2, #88]	; 0x58
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_UART_MspInit+0x23c>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80030fa:	2360      	movs	r3, #96	; 0x60
 80030fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003112:	2307      	movs	r3, #7
 8003114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003118:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800311c:	4619      	mov	r1, r3
 800311e:	480e      	ldr	r0, [pc, #56]	; (8003158 <HAL_UART_MspInit+0x254>)
 8003120:	f000 fd9c 	bl	8003c5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2105      	movs	r1, #5
 8003128:	2026      	movs	r0, #38	; 0x26
 800312a:	f000 faf7 	bl	800371c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800312e:	2026      	movs	r0, #38	; 0x26
 8003130:	f000 fb10 	bl	8003754 <HAL_NVIC_EnableIRQ>
}
 8003134:	bf00      	nop
 8003136:	37c0      	adds	r7, #192	; 0xc0
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40004c00 	.word	0x40004c00
 8003140:	40021000 	.word	0x40021000
 8003144:	40013800 	.word	0x40013800
 8003148:	48000400 	.word	0x48000400
 800314c:	20000c08 	.word	0x20000c08
 8003150:	40020058 	.word	0x40020058
 8003154:	40004400 	.word	0x40004400
 8003158:	48000c00 	.word	0x48000c00

0800315c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	2036      	movs	r0, #54	; 0x36
 8003172:	f000 fad3 	bl	800371c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003176:	2036      	movs	r0, #54	; 0x36
 8003178:	f000 faec 	bl	8003754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_InitTick+0x9c>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_InitTick+0x9c>)
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_InitTick+0x9c>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003194:	f107 0210 	add.w	r2, r7, #16
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fb54 	bl	800584c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031a4:	f002 fb26 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 80031a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_InitTick+0xa0>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	3b01      	subs	r3, #1
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_InitTick+0xa4>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <HAL_InitTick+0xa8>)
 80031bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_InitTick+0xa4>)
 80031c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <HAL_InitTick+0xa4>)
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_InitTick+0xa4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_InitTick+0xa4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80031d8:	4809      	ldr	r0, [pc, #36]	; (8003200 <HAL_InitTick+0xa4>)
 80031da:	f003 f885 	bl	80062e8 <HAL_TIM_Base_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031e4:	4806      	ldr	r0, [pc, #24]	; (8003200 <HAL_InitTick+0xa4>)
 80031e6:	f003 f8e1 	bl	80063ac <HAL_TIM_Base_Start_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	e000      	b.n	80031f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3730      	adds	r7, #48	; 0x30
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	431bde83 	.word	0x431bde83
 8003200:	20000cc4 	.word	0x20000cc4
 8003204:	40001000 	.word	0x40001000

08003208 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_SuspendTick+0x20>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_SuspendTick+0x20>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000cc4 	.word	0x20000cc4

0800322c <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_ResumeTick+0x20>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_ResumeTick+0x20>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	60da      	str	r2, [r3, #12]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000cc4 	.word	0x20000cc4

08003250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <NMI_Handler+0x4>

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <HardFault_Handler+0x4>

0800325c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <MemManage_Handler+0x4>

08003262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler+0x4>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <UsageFault_Handler+0x4>

0800326e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003280:	2004      	movs	r0, #4
 8003282:	f000 ffa1 	bl	80041c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <DMA1_Channel5_IRQHandler+0x10>)
 8003292:	f000 fc04 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000c08 	.word	0x20000c08

080032a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <USART1_IRQHandler+0x10>)
 80032a6:	f003 fced 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000274 	.word	0x20000274

080032b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <USART2_IRQHandler+0x10>)
 80032ba:	f003 fce3 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200003c8 	.word	0x200003c8

080032c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <UART4_IRQHandler+0x10>)
 80032ce:	f003 fcd9 	bl	8006c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200004b0 	.word	0x200004b0

080032dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <TIM6_DAC_IRQHandler+0x10>)
 80032e2:	f003 f8d3 	bl	800648c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000cc4 	.word	0x20000cc4

080032f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
	return 1;
 80032f4:	2301      	movs	r3, #1
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_kill>:

int _kill(int pid, int sig)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800330a:	f008 fd1f 	bl	800bd4c <__errno>
 800330e:	4603      	mov	r3, r0
 8003310:	2216      	movs	r2, #22
 8003312:	601a      	str	r2, [r3, #0]
	return -1;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_exit>:

void _exit (int status)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffe7 	bl	8003300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003332:	e7fe      	b.n	8003332 <_exit+0x12>

08003334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00a      	b.n	800335c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003346:	f3af 8000 	nop.w
 800334a:	4601      	mov	r1, r0
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	60ba      	str	r2, [r7, #8]
 8003352:	b2ca      	uxtb	r2, r1
 8003354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	dbf0      	blt.n	8003346 <_read+0x12>
	}

return len;
 8003364:	687b      	ldr	r3, [r7, #4]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e009      	b.n	8003394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	60ba      	str	r2, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	dbf1      	blt.n	8003380 <_write+0x12>
	}
	return len;
 800339c:	687b      	ldr	r3, [r7, #4]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_close>:

int _close(int file)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	return -1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ce:	605a      	str	r2, [r3, #4]
	return 0;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_isatty>:

int _isatty(int file)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
	return 1;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	return 0;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <_sbrk+0x5c>)
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <_sbrk+0x60>)
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <_sbrk+0x64>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <_sbrk+0x64>)
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <_sbrk+0x68>)
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <_sbrk+0x64>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	429a      	cmp	r2, r3
 800343e:	d207      	bcs.n	8003450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003440:	f008 fc84 	bl	800bd4c <__errno>
 8003444:	4603      	mov	r3, r0
 8003446:	220c      	movs	r2, #12
 8003448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	e009      	b.n	8003464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <_sbrk+0x64>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <_sbrk+0x64>)
 8003460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20018000 	.word	0x20018000
 8003470:	00000400 	.word	0x00000400
 8003474:	20000d14 	.word	0x20000d14
 8003478:	200068c8 	.word	0x200068c8

0800347c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <SystemInit+0x20>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <SystemInit+0x20>)
 8003488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800348c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034a4:	f7ff ffea 	bl	800347c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a8:	480c      	ldr	r0, [pc, #48]	; (80034dc <LoopForever+0x6>)
  ldr r1, =_edata
 80034aa:	490d      	ldr	r1, [pc, #52]	; (80034e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034ac:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <LoopForever+0xe>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b0:	e002      	b.n	80034b8 <LoopCopyDataInit>

080034b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034b6:	3304      	adds	r3, #4

080034b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034bc:	d3f9      	bcc.n	80034b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034c0:	4c0a      	ldr	r4, [pc, #40]	; (80034ec <LoopForever+0x16>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c4:	e001      	b.n	80034ca <LoopFillZerobss>

080034c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c8:	3204      	adds	r2, #4

080034ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034cc:	d3fb      	bcc.n	80034c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ce:	f008 fc43 	bl	800bd58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034d2:	f7ff f98f 	bl	80027f4 <main>

080034d6 <LoopForever>:

LoopForever:
    b LoopForever
 80034d6:	e7fe      	b.n	80034d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e0:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80034e4:	08012244 	.word	0x08012244
  ldr r2, =_sbss
 80034e8:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80034ec:	200068c4 	.word	0x200068c4

080034f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034f0:	e7fe      	b.n	80034f0 <ADC1_2_IRQHandler>

080034f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 f902 	bl	8003706 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003502:	200f      	movs	r0, #15
 8003504:	f7ff fe2a 	bl	800315c <HAL_InitTick>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	71fb      	strb	r3, [r7, #7]
 8003512:	e001      	b.n	8003518 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003514:	f7ff fc6c 	bl	8002df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003518:	79fb      	ldrb	r3, [r7, #7]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000018 	.word	0x20000018
 8003548:	20000d18 	.word	0x20000d18

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000d18 	.word	0x20000d18

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000018 	.word	0x20000018

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	60d3      	str	r3, [r2, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	; (8003648 <__NVIC_EnableIRQ+0x38>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	db0a      	blt.n	8003676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	490c      	ldr	r1, [pc, #48]	; (8003698 <__NVIC_SetPriority+0x4c>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	440b      	add	r3, r1
 8003670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003674:	e00a      	b.n	800368c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <__NVIC_SetPriority+0x50>)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	3b04      	subs	r3, #4
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	440b      	add	r3, r1
 800368a:	761a      	strb	r2, [r3, #24]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f1c3 0307 	rsb	r3, r3, #7
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf28      	it	cs
 80036be:	2304      	movcs	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d902      	bls.n	80036d0 <NVIC_EncodePriority+0x30>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b03      	subs	r3, #3
 80036ce:	e000      	b.n	80036d2 <NVIC_EncodePriority+0x32>
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	4313      	orrs	r3, r2
         );
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ff4c 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372e:	f7ff ff61 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003732:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	6978      	ldr	r0, [r7, #20]
 800373a:	f7ff ffb1 	bl	80036a0 <NVIC_EncodePriority>
 800373e:	4602      	mov	r2, r0
 8003740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff80 	bl	800364c <__NVIC_SetPriority>
}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff54 	bl	8003610 <__NVIC_EnableIRQ>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e098      	b.n	80038b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <HAL_DMA_Init+0x150>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d80f      	bhi.n	80037ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_DMA_Init+0x154>)
 8003796:	4413      	add	r3, r2
 8003798:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <HAL_DMA_Init+0x158>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a48      	ldr	r2, [pc, #288]	; (80038cc <HAL_DMA_Init+0x15c>)
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
 80037ac:	e00e      	b.n	80037cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_DMA_Init+0x160>)
 80037b6:	4413      	add	r3, r2
 80037b8:	4a43      	ldr	r2, [pc, #268]	; (80038c8 <HAL_DMA_Init+0x158>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <HAL_DMA_Init+0x164>)
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003826:	d039      	beq.n	800389c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_DMA_Init+0x15c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d11a      	bne.n	8003868 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_DMA_Init+0x168>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f003 031c 	and.w	r3, r3, #28
 800383e:	210f      	movs	r1, #15
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	4924      	ldr	r1, [pc, #144]	; (80038d8 <HAL_DMA_Init+0x168>)
 8003848:	4013      	ands	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_DMA_Init+0x168>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 031c 	and.w	r3, r3, #28
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	491d      	ldr	r1, [pc, #116]	; (80038d8 <HAL_DMA_Init+0x168>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
 8003866:	e019      	b.n	800389c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003868:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <HAL_DMA_Init+0x16c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f003 031c 	and.w	r3, r3, #28
 8003874:	210f      	movs	r1, #15
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	4917      	ldr	r1, [pc, #92]	; (80038dc <HAL_DMA_Init+0x16c>)
 800387e:	4013      	ands	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_DMA_Init+0x16c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 031c 	and.w	r3, r3, #28
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	4911      	ldr	r1, [pc, #68]	; (80038dc <HAL_DMA_Init+0x16c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40020407 	.word	0x40020407
 80038c4:	bffdfff8 	.word	0xbffdfff8
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	40020000 	.word	0x40020000
 80038d0:	bffdfbf8 	.word	0xbffdfbf8
 80038d4:	40020400 	.word	0x40020400
 80038d8:	400200a8 	.word	0x400200a8
 80038dc:	400204a8 	.word	0x400204a8

080038e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_DMA_Start_IT+0x20>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e04b      	b.n	8003998 <HAL_DMA_Start_IT+0xb8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d13a      	bne.n	800398a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f95f 	bl	8003bfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 020e 	orr.w	r2, r2, #14
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00f      	b.n	8003978 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 020a 	orr.w	r2, r2, #10
 8003976:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d005      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e029      	b.n	8003a94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 020e 	bic.w	r2, r2, #14
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f003 021c 	and.w	r2, r3, #28
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
    }
  }
  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f003 031c 	and.w	r3, r3, #28
 8003abe:	2204      	movs	r2, #4
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d026      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x7a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d021      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 021c 	and.w	r2, r3, #28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2104      	movs	r1, #4
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d071      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003b16:	e06c      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f003 031c 	and.w	r3, r3, #28
 8003b20:	2202      	movs	r2, #2
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02e      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xec>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d029      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 020a 	bic.w	r2, r2, #10
 8003b52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f003 021c 	and.w	r2, r3, #28
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2102      	movs	r1, #2
 8003b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d038      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b88:	e033      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 031c 	and.w	r3, r3, #28
 8003b92:	2208      	movs	r2, #8
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d025      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 020e 	bic.w	r2, r2, #14
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f003 021c 	and.w	r2, r3, #28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
}
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d108      	bne.n	8003c40 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c3e:	e007      	b.n	8003c50 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c6a:	e17f      	b.n	8003f6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8171 	beq.w	8003f66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d005      	beq.n	8003c9c <HAL_GPIO_Init+0x40>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d130      	bne.n	8003cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 0201 	and.w	r2, r3, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d118      	bne.n	8003d3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d10:	2201      	movs	r2, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f003 0201 	and.w	r2, r3, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d017      	beq.n	8003d78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80ac 	beq.w	8003f66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	; (8003f8c <HAL_GPIO_Init+0x330>)
 8003e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e12:	4a5e      	ldr	r2, [pc, #376]	; (8003f8c <HAL_GPIO_Init+0x330>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6613      	str	r3, [r2, #96]	; 0x60
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	; (8003f8c <HAL_GPIO_Init+0x330>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e26:	4a5a      	ldr	r2, [pc, #360]	; (8003f90 <HAL_GPIO_Init+0x334>)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	220f      	movs	r2, #15
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_Init+0x242>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4f      	ldr	r2, [pc, #316]	; (8003f94 <HAL_GPIO_Init+0x338>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_Init+0x23e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_GPIO_Init+0x33c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_Init+0x23a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4d      	ldr	r2, [pc, #308]	; (8003f9c <HAL_GPIO_Init+0x340>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0x236>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	; (8003fa0 <HAL_GPIO_Init+0x344>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_Init+0x232>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4b      	ldr	r2, [pc, #300]	; (8003fa4 <HAL_GPIO_Init+0x348>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x22e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_GPIO_Init+0x34c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_Init+0x22a>
 8003e82:	2306      	movs	r3, #6
 8003e84:	e00c      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e00a      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003eb0:	4937      	ldr	r1, [pc, #220]	; (8003f90 <HAL_GPIO_Init+0x334>)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee2:	4a32      	ldr	r2, [pc, #200]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f36:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f60:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f47f ae78 	bne.w	8003c6c <HAL_GPIO_Init+0x10>
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010000 	.word	0x40010000
 8003f94:	48000400 	.word	0x48000400
 8003f98:	48000800 	.word	0x48000800
 8003f9c:	48000c00 	.word	0x48000c00
 8003fa0:	48001000 	.word	0x48001000
 8003fa4:	48001400 	.word	0x48001400
 8003fa8:	48001800 	.word	0x48001800
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003fbe:	e0cd      	b.n	800415c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80c0 	beq.w	8004156 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003fd6:	4a68      	ldr	r2, [pc, #416]	; (8004178 <HAL_GPIO_DeInit+0x1c8>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ffe:	d025      	beq.n	800404c <HAL_GPIO_DeInit+0x9c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a5e      	ldr	r2, [pc, #376]	; (800417c <HAL_GPIO_DeInit+0x1cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01f      	beq.n	8004048 <HAL_GPIO_DeInit+0x98>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <HAL_GPIO_DeInit+0x1d0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d019      	beq.n	8004044 <HAL_GPIO_DeInit+0x94>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_GPIO_DeInit+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_GPIO_DeInit+0x90>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_GPIO_DeInit+0x1d8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00d      	beq.n	800403c <HAL_GPIO_DeInit+0x8c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_GPIO_DeInit+0x1dc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <HAL_GPIO_DeInit+0x88>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a59      	ldr	r2, [pc, #356]	; (8004190 <HAL_GPIO_DeInit+0x1e0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_GPIO_DeInit+0x84>
 8004030:	2306      	movs	r3, #6
 8004032:	e00c      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004034:	2307      	movs	r3, #7
 8004036:	e00a      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004038:	2305      	movs	r3, #5
 800403a:	e008      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 800403c:	2304      	movs	r3, #4
 800403e:	e006      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004040:	2303      	movs	r3, #3
 8004042:	e004      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004044:	2302      	movs	r3, #2
 8004046:	e002      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 800404c:	2300      	movs	r3, #0
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	f002 0203 	and.w	r2, r2, #3
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	4093      	lsls	r3, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	429a      	cmp	r2, r3
 800405c:	d132      	bne.n	80040c4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800405e:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	494b      	ldr	r1, [pc, #300]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004068:	4013      	ands	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800406c:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	43db      	mvns	r3, r3
 8004074:	4947      	ldr	r1, [pc, #284]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004076:	4013      	ands	r3, r2
 8004078:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	4944      	ldr	r1, [pc, #272]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004084:	4013      	ands	r3, r2
 8004086:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	4940      	ldr	r1, [pc, #256]	; (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004092:	4013      	ands	r3, r2
 8004094:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80040a6:	4a34      	ldr	r2, [pc, #208]	; (8004178 <HAL_GPIO_DeInit+0x1c8>)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	3302      	adds	r3, #2
 80040ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	4830      	ldr	r0, [pc, #192]	; (8004178 <HAL_GPIO_DeInit+0x1c8>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	400a      	ands	r2, r1
 80040be:	3302      	adds	r3, #2
 80040c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2103      	movs	r1, #3
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	08d2      	lsrs	r2, r2, #3
 80040f8:	4019      	ands	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2103      	movs	r1, #3
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	2101      	movs	r1, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2103      	movs	r1, #3
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	2101      	movs	r1, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3301      	adds	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f af2b 	bne.w	8003fc0 <HAL_GPIO_DeInit+0x10>
  }
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40010000 	.word	0x40010000
 800417c:	48000400 	.word	0x48000400
 8004180:	48000800 	.word	0x48000800
 8004184:	48000c00 	.word	0x48000c00
 8004188:	48001000 	.word	0x48001000
 800418c:	48001400 	.word	0x48001400
 8004190:	48001800 	.word	0x48001800
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fae2 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40010400 	.word	0x40010400

080041f8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	43db      	mvns	r3, r3
 800420c:	401a      	ands	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	4904      	ldr	r1, [pc, #16]	; (8004234 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]


}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40007000 	.word	0x40007000

08004238 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0307 	bic.w	r3, r3, #7
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004246:	f043 0303 	orr.w	r3, r3, #3
 800424a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004252:	f043 0304 	orr.w	r3, r3, #4
 8004256:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004258:	bf30      	wfi
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40007000 	.word	0x40007000
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_PWREx_GetVoltageRange+0x18>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d130      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d038      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2232      	movs	r2, #50	; 0x32
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042cc:	e002      	b.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d102      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d110      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d007      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40007000 	.word	0x40007000
 800432c:	20000010 	.word	0x20000010
 8004330:	431bde83 	.word	0x431bde83

08004334 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800433c:	f7ff f906 	bl	800354c <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e063      	b.n	8004414 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fe fd6d 	bl	8002e40 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004366:	f241 3188 	movw	r1, #5000	; 0x1388
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fb03 	bl	8004976 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	2120      	movs	r1, #32
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fafb 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d131      	bne.n	800440a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6852      	ldr	r2, [r2, #4]
 80043b8:	0611      	lsls	r1, r2, #24
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68d2      	ldr	r2, [r2, #12]
 80043be:	4311      	orrs	r1, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_QSPI_Init+0xe8>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6912      	ldr	r2, [r2, #16]
 80043d6:	0411      	lsls	r1, r2, #16
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6952      	ldr	r2, [r2, #20]
 80043dc:	4311      	orrs	r1, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6992      	ldr	r2, [r2, #24]
 80043e2:	4311      	orrs	r1, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004412:	7afb      	ldrb	r3, [r7, #11]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	ffe0f8fe 	.word	0xffe0f8fe

08004420 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e016      	b.n	8004460 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe fd40 	bl	8002ec8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff f86a 	bl	800354c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_QSPI_Command+0x22>
 8004486:	2302      	movs	r3, #2
 8004488:	e048      	b.n	800451c <HAL_QSPI_Command+0xb4>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d137      	bne.n	800450e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2120      	movs	r1, #32
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa6b 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d125      	bne.n	8004512 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80044c6:	2200      	movs	r2, #0
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa98 	bl	8004a00 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d115      	bne.n	8004504 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2201      	movs	r2, #1
 80044e0:	2102      	movs	r1, #2
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fa55 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2202      	movs	r2, #2
 80044f8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004502:	e006      	b.n	8004512 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800450c:	e001      	b.n	8004512 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004534:	f7ff f80a 	bl	800354c <HAL_GetTick>
 8004538:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3320      	adds	r3, #32
 8004540:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_QSPI_Transmit+0x2e>
 800454e:	2302      	movs	r3, #2
 8004550:	e07b      	b.n	800464a <HAL_QSPI_Transmit+0x126>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d16a      	bne.n	800463c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d05b      	beq.n	800462a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2212      	movs	r2, #18
 8004576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80045a6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80045a8:	e01b      	b.n	80045e2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2201      	movs	r2, #1
 80045b2:	2104      	movs	r1, #4
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f9ec 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d113      	bne.n	80045ec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1df      	bne.n	80045aa <HAL_QSPI_Transmit+0x86>
 80045ea:	e000      	b.n	80045ee <HAL_QSPI_Transmit+0xca>
          break;
 80045ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d115      	bne.n	8004620 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2201      	movs	r2, #1
 80045fc:	2102      	movs	r1, #2
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f9c7 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004608:	7ffb      	ldrb	r3, [r7, #31]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2202      	movs	r2, #2
 8004614:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f934 	bl	8004884 <HAL_QSPI_Abort>
 800461c:	4603      	mov	r3, r0
 800461e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004628:	e00a      	b.n	8004640 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	f043 0208 	orr.w	r2, r3, #8
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e001      	b.n	8004640 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004648:	7ffb      	ldrb	r3, [r7, #31]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af02      	add	r7, sp, #8
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004662:	f7fe ff73 	bl	800354c <HAL_GetTick>
 8004666:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3320      	adds	r3, #32
 8004676:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_QSPI_Receive+0x36>
 8004684:	2302      	movs	r3, #2
 8004686:	e082      	b.n	800478e <HAL_QSPI_Receive+0x13c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d171      	bne.n	8004780 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d062      	beq.n	800476e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2222      	movs	r2, #34	; 0x22
 80046ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046e0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80046ea:	e01c      	b.n	8004726 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2201      	movs	r2, #1
 80046f4:	2106      	movs	r1, #6
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f94b 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004700:	7ffb      	ldrb	r3, [r7, #31]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1de      	bne.n	80046ec <HAL_QSPI_Receive+0x9a>
 800472e:	e000      	b.n	8004732 <HAL_QSPI_Receive+0xe0>
          break;
 8004730:	bf00      	nop
      }

      if (status == HAL_OK)
 8004732:	7ffb      	ldrb	r3, [r7, #31]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d115      	bne.n	8004764 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2201      	movs	r2, #1
 8004740:	2102      	movs	r1, #2
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f925 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2202      	movs	r2, #2
 8004758:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f892 	bl	8004884 <HAL_QSPI_Abort>
 8004760:	4603      	mov	r3, r0
 8004762:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800476c:	e00a      	b.n	8004784 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	f043 0208 	orr.w	r2, r3, #8
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e001      	b.n	8004784 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004780:	2302      	movs	r3, #2
 8004782:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800478c:	7ffb      	ldrb	r3, [r7, #31]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af02      	add	r7, sp, #8
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fe fed2 	bl	800354c <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_QSPI_AutoPolling+0x24>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e060      	b.n	800487c <HAL_QSPI_AutoPolling+0xe6>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d14f      	bne.n	800486e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2242      	movs	r2, #66	; 0x42
 80047d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2200      	movs	r2, #0
 80047e4:	2120      	movs	r1, #32
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8d3 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13d      	bne.n	8004872 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6852      	ldr	r2, [r2, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	431a      	orrs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800482c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f8df 	bl	8004a00 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2201      	movs	r2, #1
 800484a:	2108      	movs	r1, #8
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f8a0 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2208      	movs	r2, #8
 8004862:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800486c:	e001      	b.n	8004872 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800486e:	2302      	movs	r3, #2
 8004870:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7fe fe5c 	bl	800354c <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d062      	beq.n	800496c <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d017      	beq.n	80048ec <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff f865 	bl	80039a0 <HAL_DMA_Abort>
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d034      	beq.n	8004964 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0202 	orr.w	r2, r2, #2
 8004908:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2201      	movs	r2, #1
 8004914:	2102      	movs	r1, #2
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f83b 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10e      	bne.n	8004944 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2202      	movs	r2, #2
 800492c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	2120      	movs	r1, #32
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f829 	bl	8004992 <QSPI_WaitFlagStateUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004958:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004962:	e003      	b.n	800496c <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049a2:	e01a      	b.n	80049da <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d016      	beq.n	80049da <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ac:	f7fe fdce 	bl	800354c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2204      	movs	r2, #4
 80049c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00e      	b.n	80049f8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d1d6      	bne.n	80049a4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <QSPI_Config+0x28>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a1a:	d005      	beq.n	8004a28 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3a01      	subs	r2, #1
 8004a26:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80b9 	beq.w	8004ba4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d05f      	beq.n	8004afa <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	049b      	lsls	r3, r3, #18
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	ea42 0103 	orr.w	r1, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004aa0:	f000 812e 	beq.w	8004d00 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	6852      	ldr	r2, [r2, #4]
 8004aac:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004aae:	e127      	b.n	8004d00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	049b      	lsls	r3, r3, #18
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	615a      	str	r2, [r3, #20]
}
 8004af8:	e102      	b.n	8004d00 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d02e      	beq.n	8004b60 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	049b      	lsls	r3, r3, #18
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	ea42 0103 	orr.w	r1, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b50:	f000 80d6 	beq.w	8004d00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	6852      	ldr	r2, [r2, #4]
 8004b5c:	619a      	str	r2, [r3, #24]
}
 8004b5e:	e0cf      	b.n	8004d00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	049b      	lsls	r3, r3, #18
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	ea42 0103 	orr.w	r1, r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	e0ad      	b.n	8004d00 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d058      	beq.n	8004c5e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	6892      	ldr	r2, [r2, #8]
 8004bb4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02d      	beq.n	8004c1a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	049b      	lsls	r3, r3, #18
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	ea42 0103 	orr.w	r1, r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c0c:	d078      	beq.n	8004d00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	6852      	ldr	r2, [r2, #4]
 8004c16:	619a      	str	r2, [r3, #24]
}
 8004c18:	e072      	b.n	8004d00 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	049b      	lsls	r3, r3, #18
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	615a      	str	r2, [r3, #20]
}
 8004c5c:	e050      	b.n	8004d00 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02a      	beq.n	8004cbc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	049b      	lsls	r3, r3, #18
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	ea42 0103 	orr.w	r1, r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004cae:	d027      	beq.n	8004d00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	6852      	ldr	r2, [r2, #4]
 8004cb8:	619a      	str	r2, [r3, #24]
}
 8004cba:	e021      	b.n	8004d00 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01d      	beq.n	8004d00 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	049b      	lsls	r3, r3, #18
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	615a      	str	r2, [r3, #20]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e3ca      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1e:	4b97      	ldr	r3, [pc, #604]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	4b94      	ldr	r3, [pc, #592]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80e4 	beq.w	8004f08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_RCC_OscConfig+0x4a>
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	f040 808b 	bne.w	8004e64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 8087 	bne.w	8004e64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d56:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_RCC_OscConfig+0x62>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e3a2      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	4b82      	ldr	r3, [pc, #520]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <HAL_RCC_OscConfig+0x7c>
 8004d7e:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_OscConfig+0x88>
 8004d88:	4b7c      	ldr	r3, [pc, #496]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d223      	bcs.n	8004de0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fd87 	bl	80058b0 <RCC_SetFlashLatencyFromMSIRange>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e383      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dac:	4b73      	ldr	r3, [pc, #460]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a72      	ldr	r2, [pc, #456]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004db2:	f043 0308 	orr.w	r3, r3, #8
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b70      	ldr	r3, [pc, #448]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	496d      	ldr	r1, [pc, #436]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dca:	4b6c      	ldr	r3, [pc, #432]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	4968      	ldr	r1, [pc, #416]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
 8004dde:	e025      	b.n	8004e2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004de0:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004de6:	f043 0308 	orr.w	r3, r3, #8
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4960      	ldr	r1, [pc, #384]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	495b      	ldr	r1, [pc, #364]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fd47 	bl	80058b0 <RCC_SetFlashLatencyFromMSIRange>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e343      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e2c:	f000 fc4a 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	4950      	ldr	r1, [pc, #320]	; (8004f80 <HAL_RCC_OscConfig+0x274>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	4a4e      	ldr	r2, [pc, #312]	; (8004f84 <HAL_RCC_OscConfig+0x278>)
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e4c:	4b4e      	ldr	r3, [pc, #312]	; (8004f88 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe f983 	bl	800315c <HAL_InitTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d052      	beq.n	8004f06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	e327      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d032      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a42      	ldr	r2, [pc, #264]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e78:	f7fe fb68 	bl	800354c <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e80:	f7fe fb64 	bl	800354c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e310      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e92:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a36      	ldr	r2, [pc, #216]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ea4:	f043 0308 	orr.w	r3, r3, #8
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	4931      	ldr	r1, [pc, #196]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ebc:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	492c      	ldr	r1, [pc, #176]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
 8004ed0:	e01a      	b.n	8004f08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ede:	f7fe fb35 	bl	800354c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ee6:	f7fe fb31 	bl	800354c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e2dd      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ef8:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x1da>
 8004f04:	e000      	b.n	8004f08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d074      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d005      	beq.n	8004f26 <HAL_RCC_OscConfig+0x21a>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d10e      	bne.n	8004f3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d10b      	bne.n	8004f3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d064      	beq.n	8004ffc <HAL_RCC_OscConfig+0x2f0>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d160      	bne.n	8004ffc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e2ba      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x24a>
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e026      	b.n	8004fa4 <HAL_RCC_OscConfig+0x298>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f5e:	d115      	bne.n	8004f8c <HAL_RCC_OscConfig+0x280>
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a02      	ldr	r2, [pc, #8]	; (8004f7c <HAL_RCC_OscConfig+0x270>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e014      	b.n	8004fa4 <HAL_RCC_OscConfig+0x298>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08011c34 	.word	0x08011c34
 8004f84:	20000010 	.word	0x20000010
 8004f88:	20000014 	.word	0x20000014
 8004f8c:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a9f      	ldr	r2, [pc, #636]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b9d      	ldr	r3, [pc, #628]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a9c      	ldr	r2, [pc, #624]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d013      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fe face 	bl	800354c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb4:	f7fe faca 	bl	800354c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	; 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e276      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc6:	4b92      	ldr	r3, [pc, #584]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x2a8>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe faba 	bl	800354c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fe fab6 	bl	800354c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e262      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fee:	4b88      	ldr	r3, [pc, #544]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x2d0>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d060      	beq.n	80050cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d005      	beq.n	800501c <HAL_RCC_OscConfig+0x310>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b0c      	cmp	r3, #12
 8005014:	d119      	bne.n	800504a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d116      	bne.n	800504a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501c:	4b7c      	ldr	r3, [pc, #496]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_OscConfig+0x328>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e23f      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b76      	ldr	r3, [pc, #472]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	4973      	ldr	r1, [pc, #460]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005048:	e040      	b.n	80050cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d023      	beq.n	800509a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005052:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fe fa75 	bl	800354c <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005066:	f7fe fa71 	bl	800354c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e21d      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005078:	4b65      	ldr	r3, [pc, #404]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005084:	4b62      	ldr	r3, [pc, #392]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	495f      	ldr	r1, [pc, #380]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	e018      	b.n	80050cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	4b5d      	ldr	r3, [pc, #372]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5c      	ldr	r2, [pc, #368]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80050a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fe fa51 	bl	800354c <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ae:	f7fe fa4d 	bl	800354c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e1f9      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d03c      	beq.n	8005152 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01c      	beq.n	800511a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	4a4a      	ldr	r2, [pc, #296]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fe fa2c 	bl	800354c <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f8:	f7fe fa28 	bl	800354c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1d4      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800510a:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800510c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ef      	beq.n	80050f8 <HAL_RCC_OscConfig+0x3ec>
 8005118:	e01b      	b.n	8005152 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800511a:	4b3d      	ldr	r3, [pc, #244]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800511c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005120:	4a3b      	ldr	r2, [pc, #236]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fe fa0f 	bl	800354c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005132:	f7fe fa0b 	bl	800354c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1b7      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005144:	4b32      	ldr	r3, [pc, #200]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1ef      	bne.n	8005132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80a6 	beq.w	80052ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005160:	2300      	movs	r3, #0
 8005162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005164:	4b2a      	ldr	r3, [pc, #168]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	4a26      	ldr	r2, [pc, #152]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	6593      	str	r3, [r2, #88]	; 0x58
 800517c:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005188:	2301      	movs	r3, #1
 800518a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_RCC_OscConfig+0x508>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d118      	bne.n	80051ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCC_OscConfig+0x508>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_RCC_OscConfig+0x508>)
 800519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a4:	f7fe f9d2 	bl	800354c <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ac:	f7fe f9ce 	bl	800354c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e17a      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <HAL_RCC_OscConfig+0x508>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d108      	bne.n	80051e4 <HAL_RCC_OscConfig+0x4d8>
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051e2:	e029      	b.n	8005238 <HAL_RCC_OscConfig+0x52c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d115      	bne.n	8005218 <HAL_RCC_OscConfig+0x50c>
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	4a03      	ldr	r2, [pc, #12]	; (8005210 <HAL_RCC_OscConfig+0x504>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800520c:	e014      	b.n	8005238 <HAL_RCC_OscConfig+0x52c>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
 8005218:	4b9c      	ldr	r3, [pc, #624]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	4a9b      	ldr	r2, [pc, #620]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005228:	4b98      	ldr	r3, [pc, #608]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	4a97      	ldr	r2, [pc, #604]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005230:	f023 0304 	bic.w	r3, r3, #4
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d016      	beq.n	800526e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005240:	f7fe f984 	bl	800354c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	e00a      	b.n	800525e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f7fe f980 	bl	800354c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f241 3288 	movw	r2, #5000	; 0x1388
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e12a      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525e:	4b8b      	ldr	r3, [pc, #556]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ed      	beq.n	8005248 <HAL_RCC_OscConfig+0x53c>
 800526c:	e015      	b.n	800529a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fe f96d 	bl	800354c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005274:	e00a      	b.n	800528c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fe f969 	bl	800354c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e113      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800528c:	4b7f      	ldr	r3, [pc, #508]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ed      	bne.n	8005276 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d105      	bne.n	80052ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a0:	4b7a      	ldr	r3, [pc, #488]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	4a79      	ldr	r2, [pc, #484]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80052a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80fe 	beq.w	80054b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	f040 80d0 	bne.w	8005460 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052c0:	4b72      	ldr	r3, [pc, #456]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d130      	bne.n	8005336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	3b01      	subs	r3, #1
 80052e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d127      	bne.n	8005336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d11f      	bne.n	8005336 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005300:	2a07      	cmp	r2, #7
 8005302:	bf14      	ite	ne
 8005304:	2201      	movne	r2, #1
 8005306:	2200      	moveq	r2, #0
 8005308:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800530a:	4293      	cmp	r3, r2
 800530c:	d113      	bne.n	8005336 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	3b01      	subs	r3, #1
 800531c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d109      	bne.n	8005336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d06e      	beq.n	8005414 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d069      	beq.n	8005410 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800533c:	4b53      	ldr	r3, [pc, #332]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005348:	4b50      	ldr	r3, [pc, #320]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0ad      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4b      	ldr	r2, [pc, #300]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005364:	f7fe f8f2 	bl	800354c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fe f8ee 	bl	800354c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e09a      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800537e:	4b43      	ldr	r3, [pc, #268]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800538a:	4b40      	ldr	r3, [pc, #256]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <HAL_RCC_OscConfig+0x784>)
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800539a:	3a01      	subs	r2, #1
 800539c:	0112      	lsls	r2, r2, #4
 800539e:	4311      	orrs	r1, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053a4:	0212      	lsls	r2, r2, #8
 80053a6:	4311      	orrs	r1, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053ac:	0852      	lsrs	r2, r2, #1
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0552      	lsls	r2, r2, #21
 80053b2:	4311      	orrs	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053b8:	0852      	lsrs	r2, r2, #1
 80053ba:	3a01      	subs	r2, #1
 80053bc:	0652      	lsls	r2, r2, #25
 80053be:	4311      	orrs	r1, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c4:	0912      	lsrs	r2, r2, #4
 80053c6:	0452      	lsls	r2, r2, #17
 80053c8:	430a      	orrs	r2, r1
 80053ca:	4930      	ldr	r1, [pc, #192]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80053d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	; (800548c <HAL_RCC_OscConfig+0x780>)
 80053e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053e8:	f7fe f8b0 	bl	800354c <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fe f8ac 	bl	800354c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e058      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800540e:	e050      	b.n	80054b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e04f      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d148      	bne.n	80054b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800542a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005438:	f7fe f888 	bl	800354c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fe f884 	bl	800354c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e030      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x734>
 800545e:	e028      	b.n	80054b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d023      	beq.n	80054ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_OscConfig+0x780>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a08      	ldr	r2, [pc, #32]	; (800548c <HAL_RCC_OscConfig+0x780>)
 800546c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fe f86b 	bl	800354c <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005478:	e00c      	b.n	8005494 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547a:	f7fe f867 	bl	800354c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d905      	bls.n	8005494 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e013      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
 800548c:	40021000 	.word	0x40021000
 8005490:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_OscConfig+0x7b0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1ec      	bne.n	800547a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_RCC_OscConfig+0x7b0>)
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	4905      	ldr	r1, [pc, #20]	; (80054bc <HAL_RCC_OscConfig+0x7b0>)
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCC_OscConfig+0x7b4>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60cb      	str	r3, [r1, #12]
 80054ac:	e001      	b.n	80054b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000
 80054c0:	feeefffc 	.word	0xfeeefffc

080054c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0e7      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d8:	4b75      	ldr	r3, [pc, #468]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d910      	bls.n	8005508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 0207 	bic.w	r2, r3, #7
 80054ee:	4970      	ldr	r1, [pc, #448]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b6e      	ldr	r3, [pc, #440]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0cf      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005520:	429a      	cmp	r2, r3
 8005522:	d908      	bls.n	8005536 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005524:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4960      	ldr	r1, [pc, #384]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d04c      	beq.n	80055dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554a:	4b5a      	ldr	r3, [pc, #360]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d121      	bne.n	800559a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0a6      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d107      	bne.n	8005572 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005562:	4b54      	ldr	r3, [pc, #336]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d115      	bne.n	800559a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e09a      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800557a:	4b4e      	ldr	r3, [pc, #312]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e08e      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800558a:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e086      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800559a:	4b46      	ldr	r3, [pc, #280]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 0203 	bic.w	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4943      	ldr	r1, [pc, #268]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ac:	f7fd ffce 	bl	800354c <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b4:	f7fd ffca 	bl	800354c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e06e      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	4b3a      	ldr	r3, [pc, #232]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 020c 	and.w	r2, r3, #12
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1eb      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d208      	bcs.n	800560a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	492b      	ldr	r1, [pc, #172]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560a:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d210      	bcs.n	800563a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005618:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 0207 	bic.w	r2, r3, #7
 8005620:	4923      	ldr	r1, [pc, #140]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <HAL_RCC_ClockConfig+0x1ec>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d001      	beq.n	800563a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e036      	b.n	80056a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4918      	ldr	r1, [pc, #96]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4910      	ldr	r1, [pc, #64]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005674:	4313      	orrs	r3, r2
 8005676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005678:	f000 f824 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	490b      	ldr	r1, [pc, #44]	; (80056b8 <HAL_RCC_ClockConfig+0x1f4>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	4a09      	ldr	r2, [pc, #36]	; (80056bc <HAL_RCC_ClockConfig+0x1f8>)
 8005696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <HAL_RCC_ClockConfig+0x1fc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fd fd5d 	bl	800315c <HAL_InitTick>
 80056a2:	4603      	mov	r3, r0
 80056a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80056a6:	7afb      	ldrb	r3, [r7, #11]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40022000 	.word	0x40022000
 80056b4:	40021000 	.word	0x40021000
 80056b8:	08011c34 	.word	0x08011c34
 80056bc:	20000010 	.word	0x20000010
 80056c0:	20000014 	.word	0x20000014

080056c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056dc:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x34>
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d121      	bne.n	8005736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d11e      	bne.n	8005736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056f8:	4b34      	ldr	r3, [pc, #208]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005704:	4b31      	ldr	r3, [pc, #196]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e005      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005714:	4b2d      	ldr	r3, [pc, #180]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005720:	4a2b      	ldr	r2, [pc, #172]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005734:	e00a      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b04      	cmp	r3, #4
 800573a:	d102      	bne.n	8005742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e004      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d101      	bne.n	800574c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800574a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d134      	bne.n	80057bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d003      	beq.n	800576a <HAL_RCC_GetSysClockFreq+0xa6>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d003      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0xac>
 8005768:	e005      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800576a:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800576c:	617b      	str	r3, [r7, #20]
      break;
 800576e:	e005      	b.n	800577c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005772:	617b      	str	r3, [r7, #20]
      break;
 8005774:	e002      	b.n	800577c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	617b      	str	r3, [r7, #20]
      break;
 800577a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	3301      	adds	r3, #1
 8005788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	fb03 f202 	mul.w	r2, r3, r2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCC_GetSysClockFreq+0x108>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	0e5b      	lsrs	r3, r3, #25
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	3301      	adds	r3, #1
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057bc:	69bb      	ldr	r3, [r7, #24]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	08011c4c 	.word	0x08011c4c
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	007a1200 	.word	0x007a1200

080057dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e2:	681b      	ldr	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000010 	.word	0x20000010

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057f8:	f7ff fff0 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	0a1b      	lsrs	r3, r3, #8
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4904      	ldr	r1, [pc, #16]	; (800581c <HAL_RCC_GetPCLK1Freq+0x28>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	08011c44 	.word	0x08011c44

08005820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005824:	f7ff ffda 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b06      	ldr	r3, [pc, #24]	; (8005844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0adb      	lsrs	r3, r3, #11
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4904      	ldr	r1, [pc, #16]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	08011c44 	.word	0x08011c44

0800584c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	220f      	movs	r2, #15
 800585a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <HAL_RCC_GetClockConfig+0x60>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0207 	and.w	r2, r3, #7
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40022000 	.word	0x40022000

080058b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058c8:	f7fe fcd0 	bl	800426c <HAL_PWREx_GetVoltageRange>
 80058cc:	6178      	str	r0, [r7, #20]
 80058ce:	e014      	b.n	80058fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6593      	str	r3, [r2, #88]	; 0x58
 80058dc:	4b22      	ldr	r3, [pc, #136]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058e8:	f7fe fcc0 	bl	800426c <HAL_PWREx_GetVoltageRange>
 80058ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058ee:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005900:	d10b      	bne.n	800591a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d919      	bls.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2ba0      	cmp	r3, #160	; 0xa0
 800590c:	d902      	bls.n	8005914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800590e:	2302      	movs	r3, #2
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	e013      	b.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005914:	2301      	movs	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e010      	b.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d902      	bls.n	8005926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005920:	2303      	movs	r3, #3
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	e00a      	b.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d102      	bne.n	8005932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800592c:	2302      	movs	r3, #2
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e004      	b.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b70      	cmp	r3, #112	; 0x70
 8005936:	d101      	bne.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005938:	2301      	movs	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 0207 	bic.w	r2, r3, #7
 8005944:	4909      	ldr	r1, [pc, #36]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d001      	beq.n	800595e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000
 800596c:	40022000 	.word	0x40022000

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005978:	2300      	movs	r3, #0
 800597a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800597c:	2300      	movs	r3, #0
 800597e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005988:	2b00      	cmp	r3, #0
 800598a:	d041      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005994:	d02a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800599a:	d824      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800599c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059a0:	d008      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059a6:	d81e      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b0:	d010      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059b2:	e018      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059b4:	4b86      	ldr	r3, [pc, #536]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a85      	ldr	r2, [pc, #532]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c0:	e015      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fabb 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3320      	adds	r3, #32
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fba6 	bl	800612c <RCCEx_PLLSAI2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	74fb      	strb	r3, [r7, #19]
      break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059f4:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a02:	4973      	ldr	r1, [pc, #460]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a0a:	e001      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d041      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a24:	d02a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a2a:	d824      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a30:	d008      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a36:	d81e      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a40:	d010      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a42:	e018      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a44:	4b62      	ldr	r3, [pc, #392]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a61      	ldr	r2, [pc, #388]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a50:	e015      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa73 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a62:	e00c      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3320      	adds	r3, #32
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fb5e 	bl	800612c <RCCEx_PLLSAI2_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	74fb      	strb	r3, [r7, #19]
      break;
 8005a7a:	e000      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a84:	4b52      	ldr	r3, [pc, #328]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a92:	494f      	ldr	r1, [pc, #316]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a9a:	e001      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a0 	beq.w	8005bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	4a40      	ldr	r2, [pc, #256]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af0:	f7fd fd2c 	bl	800354c <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005af6:	e009      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fd fd28 	bl	800354c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d902      	bls.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	74fb      	strb	r3, [r7, #19]
        break;
 8005b0a:	e005      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ef      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b18:	7cfb      	ldrb	r3, [r7, #19]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d15c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01f      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d019      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b68:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d016      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fd fce7 	bl	800354c <HAL_GetTick>
 8005b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b80:	e00b      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fd fce3 	bl	800354c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d902      	bls.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	74fb      	strb	r3, [r7, #19]
            break;
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ec      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ba8:	7cfb      	ldrb	r3, [r7, #19]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bae:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	4904      	ldr	r1, [pc, #16]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bc6:	e009      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	74bb      	strb	r3, [r7, #18]
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bdc:	7c7b      	ldrb	r3, [r7, #17]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be2:	4b9e      	ldr	r3, [pc, #632]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	4a9d      	ldr	r2, [pc, #628]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bfa:	4b98      	ldr	r3, [pc, #608]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f023 0203 	bic.w	r2, r3, #3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	4994      	ldr	r1, [pc, #592]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c1c:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 020c 	bic.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	498c      	ldr	r1, [pc, #560]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c3e:	4b87      	ldr	r3, [pc, #540]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	4983      	ldr	r1, [pc, #524]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c60:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	497b      	ldr	r1, [pc, #492]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c82:	4b76      	ldr	r3, [pc, #472]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	4972      	ldr	r1, [pc, #456]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ca4:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	496a      	ldr	r1, [pc, #424]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	4961      	ldr	r1, [pc, #388]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce8:	4b5c      	ldr	r3, [pc, #368]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf6:	4959      	ldr	r1, [pc, #356]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d0a:	4b54      	ldr	r3, [pc, #336]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d18:	4950      	ldr	r1, [pc, #320]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3a:	4948      	ldr	r1, [pc, #288]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d4e:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	493f      	ldr	r1, [pc, #252]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d028      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d70:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	4937      	ldr	r1, [pc, #220]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a31      	ldr	r2, [pc, #196]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d9a:	60d3      	str	r3, [r2, #12]
 8005d9c:	e011      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	2101      	movs	r1, #1
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f8c8 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005dbe:	7cfb      	ldrb	r3, [r7, #19]
 8005dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d028      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	491f      	ldr	r1, [pc, #124]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dec:	d106      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df8:	60d3      	str	r3, [r2, #12]
 8005dfa:	e011      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f899 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e16:	7cfb      	ldrb	r3, [r7, #19]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
 8005e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02b      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3a:	4908      	ldr	r1, [pc, #32]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d109      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a02      	ldr	r2, [pc, #8]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
 8005e58:	e014      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f867 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02f      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e90:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9e:	4928      	ldr	r1, [pc, #160]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f844 	bl	8005f44 <RCCEx_PLLSAI1_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ec0:	7cfb      	ldrb	r3, [r7, #19]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d014      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ec6:	7cfb      	ldrb	r3, [r7, #19]
 8005ec8:	74bb      	strb	r3, [r7, #18]
 8005eca:	e011      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3320      	adds	r3, #32
 8005eda:	2102      	movs	r1, #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 f925 	bl	800612c <RCCEx_PLLSAI2_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0a:	490d      	ldr	r1, [pc, #52]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2e:	4904      	ldr	r1, [pc, #16]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000

08005f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f52:	4b75      	ldr	r3, [pc, #468]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d018      	beq.n	8005f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f5e:	4b72      	ldr	r3, [pc, #456]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0203 	and.w	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d10d      	bne.n	8005f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
       ||
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
       ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d047      	beq.n	800601a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
 8005f8e:	e044      	b.n	800601a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d018      	beq.n	8005fca <RCCEx_PLLSAI1_Config+0x86>
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d825      	bhi.n	8005fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d002      	beq.n	8005fa6 <RCCEx_PLLSAI1_Config+0x62>
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d009      	beq.n	8005fb8 <RCCEx_PLLSAI1_Config+0x74>
 8005fa4:	e020      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa6:	4b60      	ldr	r3, [pc, #384]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11d      	bne.n	8005fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb6:	e01a      	b.n	8005fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb8:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc8:	e013      	b.n	8005ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fca:	4b57      	ldr	r3, [pc, #348]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd6:	4b54      	ldr	r3, [pc, #336]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe6:	e006      	b.n	8005ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e004      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	3b01      	subs	r3, #1
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	430b      	orrs	r3, r1
 8006014:	4944      	ldr	r1, [pc, #272]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d17d      	bne.n	800611c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006020:	4b41      	ldr	r3, [pc, #260]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a40      	ldr	r2, [pc, #256]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800602a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800602c:	f7fd fa8e 	bl	800354c <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006032:	e009      	b.n	8006048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006034:	f7fd fa8a 	bl	800354c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d902      	bls.n	8006048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
        break;
 8006046:	e005      	b.n	8006054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006048:	4b37      	ldr	r3, [pc, #220]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1ef      	bne.n	8006034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d160      	bne.n	800611c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d111      	bne.n	8006084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6892      	ldr	r2, [r2, #8]
 8006070:	0211      	lsls	r1, r2, #8
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	0912      	lsrs	r2, r2, #4
 8006078:	0452      	lsls	r2, r2, #17
 800607a:	430a      	orrs	r2, r1
 800607c:	492a      	ldr	r1, [pc, #168]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800607e:	4313      	orrs	r3, r2
 8006080:	610b      	str	r3, [r1, #16]
 8006082:	e027      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d112      	bne.n	80060b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800608a:	4b27      	ldr	r3, [pc, #156]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6892      	ldr	r2, [r2, #8]
 800609a:	0211      	lsls	r1, r2, #8
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6912      	ldr	r2, [r2, #16]
 80060a0:	0852      	lsrs	r2, r2, #1
 80060a2:	3a01      	subs	r2, #1
 80060a4:	0552      	lsls	r2, r2, #21
 80060a6:	430a      	orrs	r2, r1
 80060a8:	491f      	ldr	r1, [pc, #124]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	610b      	str	r3, [r1, #16]
 80060ae:	e011      	b.n	80060d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6892      	ldr	r2, [r2, #8]
 80060c0:	0211      	lsls	r1, r2, #8
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6952      	ldr	r2, [r2, #20]
 80060c6:	0852      	lsrs	r2, r2, #1
 80060c8:	3a01      	subs	r2, #1
 80060ca:	0652      	lsls	r2, r2, #25
 80060cc:	430a      	orrs	r2, r1
 80060ce:	4916      	ldr	r1, [pc, #88]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060d4:	4b14      	ldr	r3, [pc, #80]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fd fa34 	bl	800354c <HAL_GetTick>
 80060e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060e6:	e009      	b.n	80060fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060e8:	f7fd fa30 	bl	800354c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d902      	bls.n	80060fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	73fb      	strb	r3, [r7, #15]
          break;
 80060fa:	e005      	b.n	8006108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0ef      	beq.n	80060e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	4904      	ldr	r1, [pc, #16]	; (8006128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000

0800612c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800613a:	4b6a      	ldr	r3, [pc, #424]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d018      	beq.n	8006178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006146:	4b67      	ldr	r3, [pc, #412]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0203 	and.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d10d      	bne.n	8006172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
       ||
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800615e:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
       ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d047      	beq.n	8006202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
 8006176:	e044      	b.n	8006202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d018      	beq.n	80061b2 <RCCEx_PLLSAI2_Config+0x86>
 8006180:	2b03      	cmp	r3, #3
 8006182:	d825      	bhi.n	80061d0 <RCCEx_PLLSAI2_Config+0xa4>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d002      	beq.n	800618e <RCCEx_PLLSAI2_Config+0x62>
 8006188:	2b02      	cmp	r3, #2
 800618a:	d009      	beq.n	80061a0 <RCCEx_PLLSAI2_Config+0x74>
 800618c:	e020      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800618e:	4b55      	ldr	r3, [pc, #340]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d11d      	bne.n	80061d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619e:	e01a      	b.n	80061d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061a0:	4b50      	ldr	r3, [pc, #320]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b0:	e013      	b.n	80061da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061b2:	4b4c      	ldr	r3, [pc, #304]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061be:	4b49      	ldr	r3, [pc, #292]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061ce:	e006      	b.n	80061de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
      break;
 80061d4:	e004      	b.n	80061e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061d6:	bf00      	nop
 80061d8:	e002      	b.n	80061e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061de:	bf00      	nop
    }

    if(status == HAL_OK)
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10d      	bne.n	8006202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	430b      	orrs	r3, r1
 80061fc:	4939      	ldr	r1, [pc, #228]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d167      	bne.n	80062d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006208:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a35      	ldr	r2, [pc, #212]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800620e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006214:	f7fd f99a 	bl	800354c <HAL_GetTick>
 8006218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800621a:	e009      	b.n	8006230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800621c:	f7fd f996 	bl	800354c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d902      	bls.n	8006230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	73fb      	strb	r3, [r7, #15]
        break;
 800622e:	e005      	b.n	800623c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006230:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ef      	bne.n	800621c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d14a      	bne.n	80062d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006248:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6892      	ldr	r2, [r2, #8]
 8006258:	0211      	lsls	r1, r2, #8
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68d2      	ldr	r2, [r2, #12]
 800625e:	0912      	lsrs	r2, r2, #4
 8006260:	0452      	lsls	r2, r2, #17
 8006262:	430a      	orrs	r2, r1
 8006264:	491f      	ldr	r1, [pc, #124]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	614b      	str	r3, [r1, #20]
 800626a:	e011      	b.n	8006290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6892      	ldr	r2, [r2, #8]
 800627c:	0211      	lsls	r1, r2, #8
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6912      	ldr	r2, [r2, #16]
 8006282:	0852      	lsrs	r2, r2, #1
 8006284:	3a01      	subs	r2, #1
 8006286:	0652      	lsls	r2, r2, #25
 8006288:	430a      	orrs	r2, r1
 800628a:	4916      	ldr	r1, [pc, #88]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800628c:	4313      	orrs	r3, r2
 800628e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006290:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fd f956 	bl	800354c <HAL_GetTick>
 80062a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062a2:	e009      	b.n	80062b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a4:	f7fd f952 	bl	800354c <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d902      	bls.n	80062b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	73fb      	strb	r3, [r7, #15]
          break;
 80062b6:	e005      	b.n	80062c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0ef      	beq.n	80062a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4904      	ldr	r1, [pc, #16]	; (80062e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	40021000 	.word	0x40021000

080062e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e049      	b.n	800638e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f841 	bl	8006396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f000 f9f8 	bl	800671c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d001      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e04f      	b.n	8006464 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a23      	ldr	r2, [pc, #140]	; (8006470 <HAL_TIM_Base_Start_IT+0xc4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01d      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d018      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <HAL_TIM_Base_Start_IT+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_TIM_Base_Start_IT+0xcc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_TIM_Base_Start_IT+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_TIM_Base_Start_IT+0xd4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_TIM_Base_Start_IT+0x76>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <HAL_TIM_Base_Start_IT+0xd8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d115      	bne.n	800644e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	4b17      	ldr	r3, [pc, #92]	; (8006488 <HAL_TIM_Base_Start_IT+0xdc>)
 800642a:	4013      	ands	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b06      	cmp	r3, #6
 8006432:	d015      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0xb4>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643a:	d011      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	e008      	b.n	8006460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e000      	b.n	8006462 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40013400 	.word	0x40013400
 8006484:	40014000 	.word	0x40014000
 8006488:	00010007 	.word	0x00010007

0800648c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0202 	mvn.w	r2, #2
 80064b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f905 	bl	80066de <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8f7 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f908 	bl	80066f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0204 	mvn.w	r2, #4
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8db 	bl	80066de <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8cd 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f8de 	bl	80066f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b08      	cmp	r3, #8
 8006548:	d122      	bne.n	8006590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d11b      	bne.n	8006590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0208 	mvn.w	r2, #8
 8006560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8b1 	bl	80066de <HAL_TIM_IC_CaptureCallback>
 800657c:	e005      	b.n	800658a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8a3 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f8b4 	bl	80066f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b10      	cmp	r3, #16
 800659c:	d122      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d11b      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0210 	mvn.w	r2, #16
 80065b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2208      	movs	r2, #8
 80065ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f887 	bl	80066de <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f879 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f88a 	bl	80066f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d10e      	bne.n	8006610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0201 	mvn.w	r2, #1
 8006608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fbd8 	bl	8002dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d10e      	bne.n	800663c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d107      	bne.n	800663c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f914 	bl	8006864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664a:	d10e      	bne.n	800666a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d107      	bne.n	800666a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f907 	bl	8006878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d10e      	bne.n	8006696 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d107      	bne.n	8006696 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f838 	bl	8006706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d10e      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d107      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f06f 0220 	mvn.w	r2, #32
 80066ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f8c7 	bl	8006850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a40      	ldr	r2, [pc, #256]	; (8006830 <TIM_Base_SetConfig+0x114>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d013      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673a:	d00f      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3d      	ldr	r2, [pc, #244]	; (8006834 <TIM_Base_SetConfig+0x118>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00b      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3c      	ldr	r2, [pc, #240]	; (8006838 <TIM_Base_SetConfig+0x11c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a3b      	ldr	r2, [pc, #236]	; (800683c <TIM_Base_SetConfig+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_Base_SetConfig+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a3a      	ldr	r2, [pc, #232]	; (8006840 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d108      	bne.n	800676e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2f      	ldr	r2, [pc, #188]	; (8006830 <TIM_Base_SetConfig+0x114>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01f      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	d01b      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <TIM_Base_SetConfig+0x118>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d017      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <TIM_Base_SetConfig+0x11c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2a      	ldr	r2, [pc, #168]	; (800683c <TIM_Base_SetConfig+0x120>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <TIM_Base_SetConfig+0x124>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a28      	ldr	r2, [pc, #160]	; (8006844 <TIM_Base_SetConfig+0x128>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <TIM_Base_SetConfig+0x12c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_Base_SetConfig+0x9a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a26      	ldr	r2, [pc, #152]	; (800684c <TIM_Base_SetConfig+0x130>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d108      	bne.n	80067c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a10      	ldr	r2, [pc, #64]	; (8006830 <TIM_Base_SetConfig+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00f      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a12      	ldr	r2, [pc, #72]	; (8006840 <TIM_Base_SetConfig+0x124>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00b      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <TIM_Base_SetConfig+0x128>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <TIM_Base_SetConfig+0x12c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0xf8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a0f      	ldr	r2, [pc, #60]	; (800684c <TIM_Base_SetConfig+0x130>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e040      	b.n	8006920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fc fb28 	bl	8002f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2224      	movs	r2, #36	; 0x24
 80068b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0201 	bic.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fcd2 	bl	8007274 <UART_SetConfig>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e022      	b.n	8006920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 ff7e 	bl	80077e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 f805 	bl	8007928 <UART_CheckIdleState>
 800691e:	4603      	mov	r3, r0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693c:	2b20      	cmp	r3, #32
 800693e:	f040 8082 	bne.w	8006a46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_Transmit+0x26>
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07a      	b.n	8006a48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UART_Transmit+0x38>
 800695c:	2302      	movs	r3, #2
 800695e:	e073      	b.n	8006a48 <HAL_UART_Transmit+0x120>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2221      	movs	r2, #33	; 0x21
 8006974:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006976:	f7fc fde9 	bl	800354c <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	88fa      	ldrh	r2, [r7, #6]
 8006988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d108      	bne.n	80069a8 <HAL_UART_Transmit+0x80>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e003      	b.n	80069b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069b8:	e02d      	b.n	8006a16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	2180      	movs	r1, #128	; 0x80
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fff8 	bl	80079ba <UART_WaitOnFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e039      	b.n	8006a48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	881a      	ldrh	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e6:	b292      	uxth	r2, r2
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	3302      	adds	r3, #2
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e008      	b.n	8006a04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	b292      	uxth	r2, r2
 80069fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3301      	adds	r3, #1
 8006a02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1cb      	bne.n	80069ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2140      	movs	r1, #64	; 0x40
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 ffc4 	bl	80079ba <UART_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e005      	b.n	8006a48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3720      	adds	r7, #32
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b08b      	sub	sp, #44	; 0x2c
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d156      	bne.n	8006b14 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_UART_Transmit_IT+0x22>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e04f      	b.n	8006b16 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_UART_Transmit_IT+0x34>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e048      	b.n	8006b16 <HAL_UART_Transmit_IT+0xc6>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2221      	movs	r2, #33	; 0x21
 8006ab4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006abe:	d107      	bne.n	8006ad0 <HAL_UART_Transmit_IT+0x80>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_UART_Transmit_IT+0xd4>)
 8006acc:	669a      	str	r2, [r3, #104]	; 0x68
 8006ace:	e002      	b.n	8006ad6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <HAL_UART_Transmit_IT+0xd8>)
 8006ad4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	613b      	str	r3, [r7, #16]
   return(result);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	372c      	adds	r7, #44	; 0x2c
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	080081f3 	.word	0x080081f3
 8006b28:	0800813b 	.word	0x0800813b

08006b2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d142      	bne.n	8006bc8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_UART_Receive_IT+0x22>
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e03b      	b.n	8006bca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_UART_Receive_IT+0x34>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e034      	b.n	8006bca <HAL_UART_Receive_IT+0x9e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <HAL_UART_Receive_IT+0xa8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d01f      	beq.n	8006bb8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d018      	beq.n	8006bb8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69f9      	ldr	r1, [r7, #28]
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 ffc0 	bl	8007b44 <UART_Start_Receive_IT>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	e000      	b.n	8006bca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40008000 	.word	0x40008000

08006bd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d142      	bne.n	8006c74 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_UART_Receive_DMA+0x22>
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e03b      	b.n	8006c76 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UART_Receive_DMA+0x34>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e034      	b.n	8006c76 <HAL_UART_Receive_DMA+0x9e>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <HAL_UART_Receive_DMA+0xa8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d01f      	beq.n	8006c64 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	69f9      	ldr	r1, [r7, #28]
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 f834 	bl	8007cd8 <UART_Start_Receive_DMA>
 8006c70:	4603      	mov	r3, r0
 8006c72:	e000      	b.n	8006c76 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3728      	adds	r7, #40	; 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40008000 	.word	0x40008000

08006c84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b0ba      	sub	sp, #232	; 0xe8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006caa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006cae:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d115      	bne.n	8006cec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00f      	beq.n	8006cec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 82a6 	beq.w	800722e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
      }
      return;
 8006cea:	e2a0      	b.n	800722e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8117 	beq.w	8006f24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d06:	4b85      	ldr	r3, [pc, #532]	; (8006f1c <HAL_UART_IRQHandler+0x298>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 810a 	beq.w	8006f24 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d011      	beq.n	8006d40 <HAL_UART_IRQHandler+0xbc>
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d011      	beq.n	8006d70 <HAL_UART_IRQHandler+0xec>
 8006d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00b      	beq.n	8006d70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d011      	beq.n	8006da0 <HAL_UART_IRQHandler+0x11c>
 8006d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd2:	f043 0208 	orr.w	r2, r3, #8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <HAL_UART_IRQHandler+0x18a>
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 820c 	beq.w	8007232 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d005      	beq.n	8006e66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d04f      	beq.n	8006f06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f802 	bl	8007e70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d141      	bne.n	8006efe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1d9      	bne.n	8006e7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d013      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <HAL_UART_IRQHandler+0x29c>)
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fc fd9e 	bl	8003a1c <HAL_DMA_Abort_IT>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d017      	beq.n	8006f16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e00f      	b.n	8006f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9a6 	bl	8007248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006efc:	e00b      	b.n	8006f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9a2 	bl	8007248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f04:	e007      	b.n	8006f16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f99e 	bl	8007248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006f14:	e18d      	b.n	8007232 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f16:	bf00      	nop
    return;
 8006f18:	e18b      	b.n	8007232 <HAL_UART_IRQHandler+0x5ae>
 8006f1a:	bf00      	nop
 8006f1c:	04000120 	.word	0x04000120
 8006f20:	0800810f 	.word	0x0800810f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	f040 8146 	bne.w	80071ba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 813f 	beq.w	80071ba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8138 	beq.w	80071ba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	f040 80b4 	bne.w	80070ca <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 815f 	beq.w	8007236 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f82:	429a      	cmp	r2, r3
 8006f84:	f080 8157 	bcs.w	8007236 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 8085 	bne.w	80070ae <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1da      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800701a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e1      	bne.n	8006fee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800704e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800705c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e3      	bne.n	800702a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800707c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007090:	65bb      	str	r3, [r7, #88]	; 0x58
 8007092:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800709e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e4      	bne.n	800706e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fc fc79 	bl	80039a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8ca 	bl	800725c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070c8:	e0b5      	b.n	8007236 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80a7 	beq.w	800723a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80070ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80a2 	beq.w	800723a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800710a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007118:	647b      	str	r3, [r7, #68]	; 0x44
 800711a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800711e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e4      	bne.n	80070f6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	623b      	str	r3, [r7, #32]
   return(result);
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007150:	633a      	str	r2, [r7, #48]	; 0x30
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e3      	bne.n	800712c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60fb      	str	r3, [r7, #12]
   return(result);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	617b      	str	r3, [r7, #20]
   return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e4      	bne.n	8007176 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f852 	bl	800725c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071b8:	e03f      	b.n	800723a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00e      	beq.n	80071e4 <HAL_UART_IRQHandler+0x560>
 80071c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d008      	beq.n	80071e4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f9f2 	bl	80085c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071e2:	e02d      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01c      	beq.n	800723e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
    }
    return;
 800720c:	e017      	b.n	800723e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d012      	beq.n	8007240 <HAL_UART_IRQHandler+0x5bc>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f843 	bl	80082b2 <UART_EndTransmit_IT>
    return;
 800722c:	e008      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
      return;
 800722e:	bf00      	nop
 8007230:	e006      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007232:	bf00      	nop
 8007234:	e004      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007236:	bf00      	nop
 8007238:	e002      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
      return;
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <HAL_UART_IRQHandler+0x5bc>
    return;
 800723e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007240:	37e8      	adds	r7, #232	; 0xe8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop

08007248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007278:	b08a      	sub	sp, #40	; 0x28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	431a      	orrs	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	4313      	orrs	r3, r2
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4ba4      	ldr	r3, [pc, #656]	; (8007534 <UART_SetConfig+0x2c0>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a99      	ldr	r2, [pc, #612]	; (8007538 <UART_SetConfig+0x2c4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d004      	beq.n	80072e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072dc:	4313      	orrs	r3, r2
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	430a      	orrs	r2, r1
 80072f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a90      	ldr	r2, [pc, #576]	; (800753c <UART_SetConfig+0x2c8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d126      	bne.n	800734c <UART_SetConfig+0xd8>
 80072fe:	4b90      	ldr	r3, [pc, #576]	; (8007540 <UART_SetConfig+0x2cc>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d81b      	bhi.n	8007344 <UART_SetConfig+0xd0>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0xa0>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007325 	.word	0x08007325
 8007318:	08007335 	.word	0x08007335
 800731c:	0800732d 	.word	0x0800732d
 8007320:	0800733d 	.word	0x0800733d
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732a:	e116      	b.n	800755a <UART_SetConfig+0x2e6>
 800732c:	2302      	movs	r3, #2
 800732e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007332:	e112      	b.n	800755a <UART_SetConfig+0x2e6>
 8007334:	2304      	movs	r3, #4
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733a:	e10e      	b.n	800755a <UART_SetConfig+0x2e6>
 800733c:	2308      	movs	r3, #8
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007342:	e10a      	b.n	800755a <UART_SetConfig+0x2e6>
 8007344:	2310      	movs	r3, #16
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734a:	e106      	b.n	800755a <UART_SetConfig+0x2e6>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a7c      	ldr	r2, [pc, #496]	; (8007544 <UART_SetConfig+0x2d0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d138      	bne.n	80073c8 <UART_SetConfig+0x154>
 8007356:	4b7a      	ldr	r3, [pc, #488]	; (8007540 <UART_SetConfig+0x2cc>)
 8007358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735c:	f003 030c 	and.w	r3, r3, #12
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d82d      	bhi.n	80073c0 <UART_SetConfig+0x14c>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0xf8>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	080073a1 	.word	0x080073a1
 8007370:	080073c1 	.word	0x080073c1
 8007374:	080073c1 	.word	0x080073c1
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073c1 	.word	0x080073c1
 8007384:	080073c1 	.word	0x080073c1
 8007388:	080073c1 	.word	0x080073c1
 800738c:	080073a9 	.word	0x080073a9
 8007390:	080073c1 	.word	0x080073c1
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073c1 	.word	0x080073c1
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a6:	e0d8      	b.n	800755a <UART_SetConfig+0x2e6>
 80073a8:	2302      	movs	r3, #2
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ae:	e0d4      	b.n	800755a <UART_SetConfig+0x2e6>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b6:	e0d0      	b.n	800755a <UART_SetConfig+0x2e6>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073be:	e0cc      	b.n	800755a <UART_SetConfig+0x2e6>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c6:	e0c8      	b.n	800755a <UART_SetConfig+0x2e6>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a5e      	ldr	r2, [pc, #376]	; (8007548 <UART_SetConfig+0x2d4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d125      	bne.n	800741e <UART_SetConfig+0x1aa>
 80073d2:	4b5b      	ldr	r3, [pc, #364]	; (8007540 <UART_SetConfig+0x2cc>)
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073dc:	2b30      	cmp	r3, #48	; 0x30
 80073de:	d016      	beq.n	800740e <UART_SetConfig+0x19a>
 80073e0:	2b30      	cmp	r3, #48	; 0x30
 80073e2:	d818      	bhi.n	8007416 <UART_SetConfig+0x1a2>
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d00a      	beq.n	80073fe <UART_SetConfig+0x18a>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d814      	bhi.n	8007416 <UART_SetConfig+0x1a2>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <UART_SetConfig+0x182>
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d008      	beq.n	8007406 <UART_SetConfig+0x192>
 80073f4:	e00f      	b.n	8007416 <UART_SetConfig+0x1a2>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fc:	e0ad      	b.n	800755a <UART_SetConfig+0x2e6>
 80073fe:	2302      	movs	r3, #2
 8007400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007404:	e0a9      	b.n	800755a <UART_SetConfig+0x2e6>
 8007406:	2304      	movs	r3, #4
 8007408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740c:	e0a5      	b.n	800755a <UART_SetConfig+0x2e6>
 800740e:	2308      	movs	r3, #8
 8007410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007414:	e0a1      	b.n	800755a <UART_SetConfig+0x2e6>
 8007416:	2310      	movs	r3, #16
 8007418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800741c:	e09d      	b.n	800755a <UART_SetConfig+0x2e6>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a4a      	ldr	r2, [pc, #296]	; (800754c <UART_SetConfig+0x2d8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d125      	bne.n	8007474 <UART_SetConfig+0x200>
 8007428:	4b45      	ldr	r3, [pc, #276]	; (8007540 <UART_SetConfig+0x2cc>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007432:	2bc0      	cmp	r3, #192	; 0xc0
 8007434:	d016      	beq.n	8007464 <UART_SetConfig+0x1f0>
 8007436:	2bc0      	cmp	r3, #192	; 0xc0
 8007438:	d818      	bhi.n	800746c <UART_SetConfig+0x1f8>
 800743a:	2b80      	cmp	r3, #128	; 0x80
 800743c:	d00a      	beq.n	8007454 <UART_SetConfig+0x1e0>
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d814      	bhi.n	800746c <UART_SetConfig+0x1f8>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <UART_SetConfig+0x1d8>
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d008      	beq.n	800745c <UART_SetConfig+0x1e8>
 800744a:	e00f      	b.n	800746c <UART_SetConfig+0x1f8>
 800744c:	2300      	movs	r3, #0
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e082      	b.n	800755a <UART_SetConfig+0x2e6>
 8007454:	2302      	movs	r3, #2
 8007456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745a:	e07e      	b.n	800755a <UART_SetConfig+0x2e6>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007462:	e07a      	b.n	800755a <UART_SetConfig+0x2e6>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746a:	e076      	b.n	800755a <UART_SetConfig+0x2e6>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007472:	e072      	b.n	800755a <UART_SetConfig+0x2e6>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a35      	ldr	r2, [pc, #212]	; (8007550 <UART_SetConfig+0x2dc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d12a      	bne.n	80074d4 <UART_SetConfig+0x260>
 800747e:	4b30      	ldr	r3, [pc, #192]	; (8007540 <UART_SetConfig+0x2cc>)
 8007480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748c:	d01a      	beq.n	80074c4 <UART_SetConfig+0x250>
 800748e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007492:	d81b      	bhi.n	80074cc <UART_SetConfig+0x258>
 8007494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007498:	d00c      	beq.n	80074b4 <UART_SetConfig+0x240>
 800749a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800749e:	d815      	bhi.n	80074cc <UART_SetConfig+0x258>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <UART_SetConfig+0x238>
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a8:	d008      	beq.n	80074bc <UART_SetConfig+0x248>
 80074aa:	e00f      	b.n	80074cc <UART_SetConfig+0x258>
 80074ac:	2300      	movs	r3, #0
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e052      	b.n	800755a <UART_SetConfig+0x2e6>
 80074b4:	2302      	movs	r3, #2
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ba:	e04e      	b.n	800755a <UART_SetConfig+0x2e6>
 80074bc:	2304      	movs	r3, #4
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e04a      	b.n	800755a <UART_SetConfig+0x2e6>
 80074c4:	2308      	movs	r3, #8
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e046      	b.n	800755a <UART_SetConfig+0x2e6>
 80074cc:	2310      	movs	r3, #16
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d2:	e042      	b.n	800755a <UART_SetConfig+0x2e6>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a17      	ldr	r2, [pc, #92]	; (8007538 <UART_SetConfig+0x2c4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d13a      	bne.n	8007554 <UART_SetConfig+0x2e0>
 80074de:	4b18      	ldr	r3, [pc, #96]	; (8007540 <UART_SetConfig+0x2cc>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ec:	d01a      	beq.n	8007524 <UART_SetConfig+0x2b0>
 80074ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074f2:	d81b      	bhi.n	800752c <UART_SetConfig+0x2b8>
 80074f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f8:	d00c      	beq.n	8007514 <UART_SetConfig+0x2a0>
 80074fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074fe:	d815      	bhi.n	800752c <UART_SetConfig+0x2b8>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <UART_SetConfig+0x298>
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d008      	beq.n	800751c <UART_SetConfig+0x2a8>
 800750a:	e00f      	b.n	800752c <UART_SetConfig+0x2b8>
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007512:	e022      	b.n	800755a <UART_SetConfig+0x2e6>
 8007514:	2302      	movs	r3, #2
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751a:	e01e      	b.n	800755a <UART_SetConfig+0x2e6>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007522:	e01a      	b.n	800755a <UART_SetConfig+0x2e6>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752a:	e016      	b.n	800755a <UART_SetConfig+0x2e6>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007532:	e012      	b.n	800755a <UART_SetConfig+0x2e6>
 8007534:	efff69f3 	.word	0xefff69f3
 8007538:	40008000 	.word	0x40008000
 800753c:	40013800 	.word	0x40013800
 8007540:	40021000 	.word	0x40021000
 8007544:	40004400 	.word	0x40004400
 8007548:	40004800 	.word	0x40004800
 800754c:	40004c00 	.word	0x40004c00
 8007550:	40005000 	.word	0x40005000
 8007554:	2310      	movs	r3, #16
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a9f      	ldr	r2, [pc, #636]	; (80077dc <UART_SetConfig+0x568>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d17a      	bne.n	800765a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007568:	2b08      	cmp	r3, #8
 800756a:	d824      	bhi.n	80075b6 <UART_SetConfig+0x342>
 800756c:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <UART_SetConfig+0x300>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	08007599 	.word	0x08007599
 8007578:	080075b7 	.word	0x080075b7
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075b7 	.word	0x080075b7
 8007584:	080075a7 	.word	0x080075a7
 8007588:	080075b7 	.word	0x080075b7
 800758c:	080075b7 	.word	0x080075b7
 8007590:	080075b7 	.word	0x080075b7
 8007594:	080075af 	.word	0x080075af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007598:	f7fe f92c 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 800759c:	61f8      	str	r0, [r7, #28]
        break;
 800759e:	e010      	b.n	80075c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a0:	4b8f      	ldr	r3, [pc, #572]	; (80077e0 <UART_SetConfig+0x56c>)
 80075a2:	61fb      	str	r3, [r7, #28]
        break;
 80075a4:	e00d      	b.n	80075c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fe f88d 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 80075aa:	61f8      	str	r0, [r7, #28]
        break;
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b2:	61fb      	str	r3, [r7, #28]
        break;
 80075b4:	e005      	b.n	80075c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80fb 	beq.w	80077c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d305      	bcc.n	80075e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d903      	bls.n	80075ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075ec:	e0e8      	b.n	80077c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	2200      	movs	r2, #0
 80075f2:	461c      	mov	r4, r3
 80075f4:	4615      	mov	r5, r2
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	022b      	lsls	r3, r5, #8
 8007600:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007604:	0222      	lsls	r2, r4, #8
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	6849      	ldr	r1, [r1, #4]
 800760a:	0849      	lsrs	r1, r1, #1
 800760c:	2000      	movs	r0, #0
 800760e:	4688      	mov	r8, r1
 8007610:	4681      	mov	r9, r0
 8007612:	eb12 0a08 	adds.w	sl, r2, r8
 8007616:	eb43 0b09 	adc.w	fp, r3, r9
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007628:	4650      	mov	r0, sl
 800762a:	4659      	mov	r1, fp
 800762c:	f7f9 fb3c 	bl	8000ca8 <__aeabi_uldivmod>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4613      	mov	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763e:	d308      	bcc.n	8007652 <UART_SetConfig+0x3de>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007646:	d204      	bcs.n	8007652 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	60da      	str	r2, [r3, #12]
 8007650:	e0b6      	b.n	80077c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007658:	e0b2      	b.n	80077c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007662:	d15e      	bne.n	8007722 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007668:	2b08      	cmp	r3, #8
 800766a:	d828      	bhi.n	80076be <UART_SetConfig+0x44a>
 800766c:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <UART_SetConfig+0x400>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	08007699 	.word	0x08007699
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a9 	.word	0x080076a9
 8007680:	080076bf 	.word	0x080076bf
 8007684:	080076af 	.word	0x080076af
 8007688:	080076bf 	.word	0x080076bf
 800768c:	080076bf 	.word	0x080076bf
 8007690:	080076bf 	.word	0x080076bf
 8007694:	080076b7 	.word	0x080076b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fe f8ac 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 800769c:	61f8      	str	r0, [r7, #28]
        break;
 800769e:	e014      	b.n	80076ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7fe f8be 	bl	8005820 <HAL_RCC_GetPCLK2Freq>
 80076a4:	61f8      	str	r0, [r7, #28]
        break;
 80076a6:	e010      	b.n	80076ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b4d      	ldr	r3, [pc, #308]	; (80077e0 <UART_SetConfig+0x56c>)
 80076aa:	61fb      	str	r3, [r7, #28]
        break;
 80076ac:	e00d      	b.n	80076ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ae:	f7fe f809 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 80076b2:	61f8      	str	r0, [r7, #28]
        break;
 80076b4:	e009      	b.n	80076ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ba:	61fb      	str	r3, [r7, #28]
        break;
 80076bc:	e005      	b.n	80076ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d077      	beq.n	80077c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	005a      	lsls	r2, r3, #1
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	441a      	add	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d916      	bls.n	800771a <UART_SetConfig+0x4a6>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f2:	d212      	bcs.n	800771a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f023 030f 	bic.w	r3, r3, #15
 80076fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	085b      	lsrs	r3, r3, #1
 8007702:	b29b      	uxth	r3, r3
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	b29a      	uxth	r2, r3
 800770a:	8afb      	ldrh	r3, [r7, #22]
 800770c:	4313      	orrs	r3, r2
 800770e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	8afa      	ldrh	r2, [r7, #22]
 8007716:	60da      	str	r2, [r3, #12]
 8007718:	e052      	b.n	80077c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007720:	e04e      	b.n	80077c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007726:	2b08      	cmp	r3, #8
 8007728:	d827      	bhi.n	800777a <UART_SetConfig+0x506>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0x4bc>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007755 	.word	0x08007755
 8007734:	0800775d 	.word	0x0800775d
 8007738:	08007765 	.word	0x08007765
 800773c:	0800777b 	.word	0x0800777b
 8007740:	0800776b 	.word	0x0800776b
 8007744:	0800777b 	.word	0x0800777b
 8007748:	0800777b 	.word	0x0800777b
 800774c:	0800777b 	.word	0x0800777b
 8007750:	08007773 	.word	0x08007773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fe f84e 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8007758:	61f8      	str	r0, [r7, #28]
        break;
 800775a:	e014      	b.n	8007786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fe f860 	bl	8005820 <HAL_RCC_GetPCLK2Freq>
 8007760:	61f8      	str	r0, [r7, #28]
        break;
 8007762:	e010      	b.n	8007786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <UART_SetConfig+0x56c>)
 8007766:	61fb      	str	r3, [r7, #28]
        break;
 8007768:	e00d      	b.n	8007786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776a:	f7fd ffab 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 800776e:	61f8      	str	r0, [r7, #28]
        break;
 8007770:	e009      	b.n	8007786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	61fb      	str	r3, [r7, #28]
        break;
 8007778:	e005      	b.n	8007786 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007784:	bf00      	nop
    }

    if (pclk != 0U)
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d019      	beq.n	80077c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	085a      	lsrs	r2, r3, #1
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	441a      	add	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b0f      	cmp	r3, #15
 80077a4:	d909      	bls.n	80077ba <UART_SetConfig+0x546>
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ac:	d205      	bcs.n	80077ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60da      	str	r2, [r3, #12]
 80077b8:	e002      	b.n	80077c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80077cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3728      	adds	r7, #40	; 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077da:	bf00      	nop
 80077dc:	40008000 	.word	0x40008000
 80077e0:	00f42400 	.word	0x00f42400

080077e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00a      	beq.n	800780e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01a      	beq.n	80078fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e2:	d10a      	bne.n	80078fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007938:	f7fb fe08 	bl	800354c <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b08      	cmp	r3, #8
 800794a:	d10e      	bne.n	800796a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800794c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f82d 	bl	80079ba <UART_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e023      	b.n	80079b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b04      	cmp	r3, #4
 8007976:	d10e      	bne.n	8007996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f817 	bl	80079ba <UART_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e00d      	b.n	80079b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b09c      	sub	sp, #112	; 0x70
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ca:	e0a5      	b.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	f000 80a1 	beq.w	8007b18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d6:	f7fb fdb9 	bl	800354c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d302      	bcc.n	80079ec <UART_WaitOnFlagUntilTimeout+0x32>
 80079e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d13e      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a00:	667b      	str	r3, [r7, #100]	; 0x64
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	663b      	str	r3, [r7, #96]	; 0x60
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e067      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d04f      	beq.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a86:	d147      	bne.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a90:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ae4:	623a      	str	r2, [r7, #32]
 8007ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	69f9      	ldr	r1, [r7, #28]
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e5      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e010      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69da      	ldr	r2, [r3, #28]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4013      	ands	r3, r2
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	f43f af4a 	beq.w	80079cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3770      	adds	r7, #112	; 0x70
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b097      	sub	sp, #92	; 0x5c
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d10e      	bne.n	8007b96 <UART_Start_Receive_IT+0x52>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <UART_Start_Receive_IT+0x48>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b8a:	e02d      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	22ff      	movs	r2, #255	; 0xff
 8007b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b94:	e028      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <UART_Start_Receive_IT+0x76>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <UART_Start_Receive_IT+0x6c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	22ff      	movs	r2, #255	; 0xff
 8007baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bae:	e01b      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	227f      	movs	r2, #127	; 0x7f
 8007bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bb8:	e016      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bc2:	d10d      	bne.n	8007be0 <UART_Start_Receive_IT+0x9c>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <UART_Start_Receive_IT+0x92>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	227f      	movs	r2, #127	; 0x7f
 8007bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bd4:	e008      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	223f      	movs	r2, #63	; 0x3f
 8007bda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bde:	e003      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2222      	movs	r2, #34	; 0x22
 8007bf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e5      	bne.n	8007bf6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c32:	d107      	bne.n	8007c44 <UART_Start_Receive_IT+0x100>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <UART_Start_Receive_IT+0x18c>)
 8007c40:	665a      	str	r2, [r3, #100]	; 0x64
 8007c42:	e002      	b.n	8007c4a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a23      	ldr	r2, [pc, #140]	; (8007cd4 <UART_Start_Receive_IT+0x190>)
 8007c48:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d019      	beq.n	8007c8e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_Start_Receive_IT+0x116>
 8007c8c:	e018      	b.n	8007cc0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f043 0320 	orr.w	r3, r3, #32
 8007ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e6      	bne.n	8007c8e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	375c      	adds	r7, #92	; 0x5c
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	08008467 	.word	0x08008467
 8007cd4:	08008307 	.word	0x08008307

08007cd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b096      	sub	sp, #88	; 0x58
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	88fa      	ldrh	r2, [r7, #6]
 8007cf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2222      	movs	r2, #34	; 0x22
 8007d00:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d02b      	beq.n	8007d62 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	4a42      	ldr	r2, [pc, #264]	; (8007e18 <UART_Start_Receive_DMA+0x140>)
 8007d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	4a41      	ldr	r2, [pc, #260]	; (8007e1c <UART_Start_Receive_DMA+0x144>)
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1e:	4a40      	ldr	r2, [pc, #256]	; (8007e20 <UART_Start_Receive_DMA+0x148>)
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d26:	2200      	movs	r2, #0
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3324      	adds	r3, #36	; 0x24
 8007d34:	4619      	mov	r1, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	f7fb fdcf 	bl	80038e0 <HAL_DMA_Start_IT>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e055      	b.n	8007e0e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d018      	beq.n	8007da4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d86:	657b      	str	r3, [r7, #84]	; 0x54
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d92:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	653b      	str	r3, [r7, #80]	; 0x50
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dc4:	637a      	str	r2, [r7, #52]	; 0x34
 8007dc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	613b      	str	r3, [r7, #16]
   return(result);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007df8:	623a      	str	r2, [r7, #32]
 8007dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	69f9      	ldr	r1, [r7, #28]
 8007dfe:	6a3a      	ldr	r2, [r7, #32]
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e5      	bne.n	8007dd8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3758      	adds	r7, #88	; 0x58
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	08007f37 	.word	0x08007f37
 8007e1c:	0800805b 	.word	0x0800805b
 8007e20:	08008093 	.word	0x08008093

08007e24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007e64:	bf00      	nop
 8007e66:	3724      	adds	r7, #36	; 0x24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b095      	sub	sp, #84	; 0x54
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e96:	643b      	str	r3, [r7, #64]	; 0x40
 8007e98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e6      	bne.n	8007e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d118      	bne.n	8007f18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f023 0310 	bic.w	r3, r3, #16
 8007efa:	647b      	str	r3, [r7, #68]	; 0x44
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6979      	ldr	r1, [r7, #20]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	613b      	str	r3, [r7, #16]
   return(result);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e6      	bne.n	8007ee6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f2a:	bf00      	nop
 8007f2c:	3754      	adds	r7, #84	; 0x54
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b09c      	sub	sp, #112	; 0x70
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d170      	bne.n	8008034 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f78:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e6      	bne.n	8007f5a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8007fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fac:	647a      	str	r2, [r7, #68]	; 0x44
 8007fae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8007fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fe0:	633a      	str	r2, [r7, #48]	; 0x30
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d118      	bne.n	8008034 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0310 	bic.w	r3, r3, #16
 8008016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	69b9      	ldr	r1, [r7, #24]
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	617b      	str	r3, [r7, #20]
   return(result);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e6      	bne.n	8008002 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008038:	2b01      	cmp	r3, #1
 800803a:	d107      	bne.n	800804c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008042:	4619      	mov	r1, r3
 8008044:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008046:	f7ff f909 	bl	800725c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800804a:	e002      	b.n	8008052 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800804c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800804e:	f7fa fb97 	bl	8002780 <HAL_UART_RxCpltCallback>
}
 8008052:	bf00      	nop
 8008054:	3770      	adds	r7, #112	; 0x70
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806c:	2b01      	cmp	r3, #1
 800806e:	d109      	bne.n	8008084 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	b29b      	uxth	r3, r3
 800807a:	4619      	mov	r1, r3
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff f8ed 	bl	800725c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008082:	e002      	b.n	800808a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7f9 f91d 	bl	80012c4 <HAL_UART_RxHalfCpltCallback>
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	d109      	bne.n	80080ce <UART_DMAError+0x3c>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b21      	cmp	r3, #33	; 0x21
 80080be:	d106      	bne.n	80080ce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80080c8:	6978      	ldr	r0, [r7, #20]
 80080ca:	f7ff feab 	bl	8007e24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d109      	bne.n	80080f0 <UART_DMAError+0x5e>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b22      	cmp	r3, #34	; 0x22
 80080e0:	d106      	bne.n	80080f0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80080ea:	6978      	ldr	r0, [r7, #20]
 80080ec:	f7ff fec0 	bl	8007e70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080f6:	f043 0210 	orr.w	r2, r3, #16
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008100:	6978      	ldr	r0, [r7, #20]
 8008102:	f7ff f8a1 	bl	8007248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008106:	bf00      	nop
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff f88b 	bl	8007248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800813a:	b480      	push	{r7}
 800813c:	b08f      	sub	sp, #60	; 0x3c
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008146:	2b21      	cmp	r3, #33	; 0x21
 8008148:	d14d      	bne.n	80081e6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d132      	bne.n	80081bc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	61fb      	str	r3, [r7, #28]
   return(result);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008176:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800817a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	60bb      	str	r3, [r7, #8]
   return(result);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819c:	633b      	str	r3, [r7, #48]	; 0x30
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	613b      	str	r3, [r7, #16]
   return(result);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e6      	bne.n	8008188 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80081ba:	e014      	b.n	80081e6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c0:	781a      	ldrb	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	b292      	uxth	r2, r2
 80081c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081e6:	bf00      	nop
 80081e8:	373c      	adds	r7, #60	; 0x3c
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b091      	sub	sp, #68	; 0x44
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081fe:	2b21      	cmp	r3, #33	; 0x21
 8008200:	d151      	bne.n	80082a6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d132      	bne.n	8008274 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	623b      	str	r3, [r7, #32]
   return(result);
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
 800822e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e6      	bne.n	800820e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	60fb      	str	r3, [r7, #12]
   return(result);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	69b9      	ldr	r1, [r7, #24]
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	617b      	str	r3, [r7, #20]
   return(result);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008272:	e018      	b.n	80082a6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800827a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827c:	881a      	ldrh	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008286:	b292      	uxth	r2, r2
 8008288:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	1c9a      	adds	r2, r3, #2
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80082a6:	bf00      	nop
 80082a8:	3744      	adds	r7, #68	; 0x44
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b088      	sub	sp, #32
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6979      	ldr	r1, [r7, #20]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	613b      	str	r3, [r7, #16]
   return(result);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e6      	bne.n	80082ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f9 ff0b 	bl	8002114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fe:	bf00      	nop
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b096      	sub	sp, #88	; 0x58
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008314:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831c:	2b22      	cmp	r3, #34	; 0x22
 800831e:	f040 8094 	bne.w	800844a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008328:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800832c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008330:	b2d9      	uxtb	r1, r3
 8008332:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008336:	b2da      	uxtb	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	400a      	ands	r2, r1
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d179      	bne.n	800845e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837e:	653b      	str	r3, [r7, #80]	; 0x50
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008388:	647b      	str	r3, [r7, #68]	; 0x44
 800838a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800838e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	623b      	str	r3, [r7, #32]
   return(result);
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083bc:	633a      	str	r2, [r7, #48]	; 0x30
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d12e      	bne.n	8008442 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69b9      	ldr	r1, [r7, #24]
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	617b      	str	r3, [r7, #20]
   return(result);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b10      	cmp	r3, #16
 8008428:	d103      	bne.n	8008432 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2210      	movs	r2, #16
 8008430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe ff0e 	bl	800725c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008440:	e00d      	b.n	800845e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fa f99c 	bl	8002780 <HAL_UART_RxCpltCallback>
}
 8008448:	e009      	b.n	800845e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	8b1b      	ldrh	r3, [r3, #24]
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0208 	orr.w	r2, r2, #8
 800845a:	b292      	uxth	r2, r2
 800845c:	831a      	strh	r2, [r3, #24]
}
 800845e:	bf00      	nop
 8008460:	3758      	adds	r7, #88	; 0x58
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b096      	sub	sp, #88	; 0x58
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008474:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847c:	2b22      	cmp	r3, #34	; 0x22
 800847e:	f040 8094 	bne.w	80085aa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008488:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008490:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008492:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008496:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800849a:	4013      	ands	r3, r2
 800849c:	b29a      	uxth	r2, r3
 800849e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	1c9a      	adds	r2, r3, #2
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d179      	bne.n	80085be <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e8:	643b      	str	r3, [r7, #64]	; 0x40
 80084ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e6      	bne.n	80084ca <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3308      	adds	r3, #8
 8008502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	61fb      	str	r3, [r7, #28]
   return(result);
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f023 0301 	bic.w	r3, r3, #1
 8008512:	64bb      	str	r3, [r7, #72]	; 0x48
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3308      	adds	r3, #8
 800851a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800851c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e5      	bne.n	80084fc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008540:	2b01      	cmp	r3, #1
 8008542:	d12e      	bne.n	80085a2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60bb      	str	r3, [r7, #8]
   return(result);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	647b      	str	r3, [r7, #68]	; 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	613b      	str	r3, [r7, #16]
   return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b10      	cmp	r3, #16
 8008588:	d103      	bne.n	8008592 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2210      	movs	r2, #16
 8008590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fe fe5e 	bl	800725c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085a0:	e00d      	b.n	80085be <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fa f8ec 	bl	8002780 <HAL_UART_RxCpltCallback>
}
 80085a8:	e009      	b.n	80085be <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	8b1b      	ldrh	r3, [r3, #24]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0208 	orr.w	r2, r2, #8
 80085ba:	b292      	uxth	r2, r2
 80085bc:	831a      	strh	r2, [r3, #24]
}
 80085be:	bf00      	nop
 80085c0:	3758      	adds	r7, #88	; 0x58
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <__NVIC_SetPriority>:
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	db0a      	blt.n	8008606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	490c      	ldr	r1, [pc, #48]	; (8008628 <__NVIC_SetPriority+0x4c>)
 80085f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	440b      	add	r3, r1
 8008600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008604:	e00a      	b.n	800861c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	b2da      	uxtb	r2, r3
 800860a:	4908      	ldr	r1, [pc, #32]	; (800862c <__NVIC_SetPriority+0x50>)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	3b04      	subs	r3, #4
 8008614:	0112      	lsls	r2, r2, #4
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	440b      	add	r3, r1
 800861a:	761a      	strb	r2, [r3, #24]
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	e000e100 	.word	0xe000e100
 800862c:	e000ed00 	.word	0xe000ed00

08008630 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <SysTick_Handler+0x1c>)
 8008636:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008638:	f002 fa22 	bl	800aa80 <xTaskGetSchedulerState>
 800863c:	4603      	mov	r3, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	d001      	beq.n	8008646 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008642:	f003 f909 	bl	800b858 <xPortSysTickHandler>
  }
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	e000e010 	.word	0xe000e010

08008650 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008654:	2100      	movs	r1, #0
 8008656:	f06f 0004 	mvn.w	r0, #4
 800865a:	f7ff ffbf 	bl	80085dc <__NVIC_SetPriority>
#endif
}
 800865e:	bf00      	nop
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800866a:	f3ef 8305 	mrs	r3, IPSR
 800866e:	603b      	str	r3, [r7, #0]
  return(result);
 8008670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008676:	f06f 0305 	mvn.w	r3, #5
 800867a:	607b      	str	r3, [r7, #4]
 800867c:	e00c      	b.n	8008698 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800867e:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <osKernelInitialize+0x44>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <osKernelInitialize+0x44>)
 8008688:	2201      	movs	r2, #1
 800868a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800868c:	2300      	movs	r3, #0
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	e002      	b.n	8008698 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008698:	687b      	ldr	r3, [r7, #4]
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000d1c 	.word	0x20000d1c

080086ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086b2:	f3ef 8305 	mrs	r3, IPSR
 80086b6:	603b      	str	r3, [r7, #0]
  return(result);
 80086b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80086be:	f06f 0305 	mvn.w	r3, #5
 80086c2:	607b      	str	r3, [r7, #4]
 80086c4:	e010      	b.n	80086e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <osKernelStart+0x48>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d109      	bne.n	80086e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086ce:	f7ff ffbf 	bl	8008650 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <osKernelStart+0x48>)
 80086d4:	2202      	movs	r2, #2
 80086d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086d8:	f001 fd8a 	bl	800a1f0 <vTaskStartScheduler>
      stat = osOK;
 80086dc:	2300      	movs	r3, #0
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	e002      	b.n	80086e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086e2:	f04f 33ff 	mov.w	r3, #4294967295
 80086e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086e8:	687b      	ldr	r3, [r7, #4]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000d1c 	.word	0x20000d1c

080086f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008708:	f3ef 8305 	mrs	r3, IPSR
 800870c:	617b      	str	r3, [r7, #20]
  return(result);
 800870e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008710:	2b00      	cmp	r3, #0
 8008712:	d17e      	bne.n	8008812 <osThreadNew+0x11a>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d07b      	beq.n	8008812 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800871a:	2380      	movs	r3, #128	; 0x80
 800871c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800871e:	2318      	movs	r3, #24
 8008720:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295
 800872a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d045      	beq.n	80087be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <osThreadNew+0x48>
        name = attr->name;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <osThreadNew+0x6e>
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2b38      	cmp	r3, #56	; 0x38
 8008758:	d805      	bhi.n	8008766 <osThreadNew+0x6e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <osThreadNew+0x72>
        return (NULL);
 8008766:	2300      	movs	r3, #0
 8008768:	e054      	b.n	8008814 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	089b      	lsrs	r3, r3, #2
 8008778:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <osThreadNew+0xa8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b5b      	cmp	r3, #91	; 0x5b
 8008788:	d90a      	bls.n	80087a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <osThreadNew+0xa8>
        mem = 1;
 800879a:	2301      	movs	r3, #1
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	e010      	b.n	80087c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10c      	bne.n	80087c2 <osThreadNew+0xca>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d108      	bne.n	80087c2 <osThreadNew+0xca>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <osThreadNew+0xca>
          mem = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
 80087bc:	e001      	b.n	80087c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d110      	bne.n	80087ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6a3a      	ldr	r2, [r7, #32]
 80087dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f001 fb64 	bl	8009eac <xTaskCreateStatic>
 80087e4:	4603      	mov	r3, r0
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e013      	b.n	8008812 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d110      	bne.n	8008812 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	f107 0310 	add.w	r3, r7, #16
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f001 fbaf 	bl	8009f66 <xTaskCreate>
 8008808:	4603      	mov	r3, r0
 800880a:	2b01      	cmp	r3, #1
 800880c:	d001      	beq.n	8008812 <osThreadNew+0x11a>
            hTask = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008812:	693b      	ldr	r3, [r7, #16]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3728      	adds	r7, #40	; 0x28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882c:	f3ef 8305 	mrs	r3, IPSR
 8008830:	613b      	str	r3, [r7, #16]
  return(result);
 8008832:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008834:	2b00      	cmp	r3, #0
 8008836:	d175      	bne.n	8008924 <osSemaphoreNew+0x108>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d072      	beq.n	8008924 <osSemaphoreNew+0x108>
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	429a      	cmp	r2, r3
 8008844:	d86e      	bhi.n	8008924 <osSemaphoreNew+0x108>
    mem = -1;
 8008846:	f04f 33ff 	mov.w	r3, #4294967295
 800884a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d015      	beq.n	800887e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <osSemaphoreNew+0x4c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b4f      	cmp	r3, #79	; 0x4f
 8008860:	d902      	bls.n	8008868 <osSemaphoreNew+0x4c>
        mem = 1;
 8008862:	2301      	movs	r3, #1
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	e00c      	b.n	8008882 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d108      	bne.n	8008882 <osSemaphoreNew+0x66>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <osSemaphoreNew+0x66>
          mem = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	e001      	b.n	8008882 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d04c      	beq.n	8008924 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d128      	bne.n	80088e2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d10a      	bne.n	80088ac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2203      	movs	r2, #3
 800889c:	9200      	str	r2, [sp, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	2001      	movs	r0, #1
 80088a4:	f000 fb5c 	bl	8008f60 <xQueueGenericCreateStatic>
 80088a8:	61f8      	str	r0, [r7, #28]
 80088aa:	e005      	b.n	80088b8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80088ac:	2203      	movs	r2, #3
 80088ae:	2100      	movs	r1, #0
 80088b0:	2001      	movs	r0, #1
 80088b2:	f000 fbcd 	bl	8009050 <xQueueGenericCreate>
 80088b6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d022      	beq.n	8008904 <osSemaphoreNew+0xe8>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d01f      	beq.n	8008904 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	2200      	movs	r2, #0
 80088c8:	2100      	movs	r1, #0
 80088ca:	69f8      	ldr	r0, [r7, #28]
 80088cc:	f000 fc88 	bl	80091e0 <xQueueGenericSend>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d016      	beq.n	8008904 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80088d6:	69f8      	ldr	r0, [r7, #28]
 80088d8:	f001 f914 	bl	8009b04 <vQueueDelete>
            hSemaphore = NULL;
 80088dc:	2300      	movs	r3, #0
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	e010      	b.n	8008904 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d108      	bne.n	80088fa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	461a      	mov	r2, r3
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fc0a 	bl	800910a <xQueueCreateCountingSemaphoreStatic>
 80088f6:	61f8      	str	r0, [r7, #28]
 80088f8:	e004      	b.n	8008904 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 fc3b 	bl	8009178 <xQueueCreateCountingSemaphore>
 8008902:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	e001      	b.n	800891c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	69f8      	ldr	r0, [r7, #28]
 8008920:	f001 fa3c 	bl	8009d9c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008924:	69fb      	ldr	r3, [r7, #28]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008948:	f06f 0303 	mvn.w	r3, #3
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e039      	b.n	80089c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008950:	f3ef 8305 	mrs	r3, IPSR
 8008954:	60fb      	str	r3, [r7, #12]
  return(result);
 8008956:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008958:	2b00      	cmp	r3, #0
 800895a:	d022      	beq.n	80089a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008962:	f06f 0303 	mvn.w	r3, #3
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e02c      	b.n	80089c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800896a:	2300      	movs	r3, #0
 800896c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800896e:	f107 0308 	add.w	r3, r7, #8
 8008972:	461a      	mov	r2, r3
 8008974:	2100      	movs	r1, #0
 8008976:	6938      	ldr	r0, [r7, #16]
 8008978:	f001 f844 	bl	8009a04 <xQueueReceiveFromISR>
 800897c:	4603      	mov	r3, r0
 800897e:	2b01      	cmp	r3, #1
 8008980:	d003      	beq.n	800898a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008982:	f06f 0302 	mvn.w	r3, #2
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e01c      	b.n	80089c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d019      	beq.n	80089c4 <osSemaphoreAcquire+0x94>
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <osSemaphoreAcquire+0xa0>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	e010      	b.n	80089c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f000 ff21 	bl	80097ec <xQueueSemaphoreTake>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d009      	beq.n	80089c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80089b6:	f06f 0301 	mvn.w	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	e002      	b.n	80089c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80089be:	f06f 0302 	mvn.w	r3, #2
 80089c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80089c4:	697b      	ldr	r3, [r7, #20]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80089ea:	f06f 0303 	mvn.w	r3, #3
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	e02c      	b.n	8008a4c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f2:	f3ef 8305 	mrs	r3, IPSR
 80089f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d01a      	beq.n	8008a34 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	4619      	mov	r1, r3
 8008a08:	6938      	ldr	r0, [r7, #16]
 8008a0a:	f000 fd82 	bl	8009512 <xQueueGiveFromISR>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d003      	beq.n	8008a1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008a14:	f06f 0302 	mvn.w	r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	e017      	b.n	8008a4c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d014      	beq.n	8008a4c <osSemaphoreRelease+0x78>
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <osSemaphoreRelease+0x84>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	e00b      	b.n	8008a4c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a34:	2300      	movs	r3, #0
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	6938      	ldr	r0, [r7, #16]
 8008a3c:	f000 fbd0 	bl	80091e0 <xQueueGenericSend>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d002      	beq.n	8008a4c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008a46:	f06f 0302 	mvn.w	r3, #2
 8008a4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008a4c:	697b      	ldr	r3, [r7, #20]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6c:	f3ef 8305 	mrs	r3, IPSR
 8008a70:	613b      	str	r3, [r7, #16]
  return(result);
 8008a72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d15f      	bne.n	8008b38 <osMessageQueueNew+0xdc>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d05c      	beq.n	8008b38 <osMessageQueueNew+0xdc>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d059      	beq.n	8008b38 <osMessageQueueNew+0xdc>
    mem = -1;
 8008a84:	f04f 33ff 	mov.w	r3, #4294967295
 8008a88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d029      	beq.n	8008ae4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <osMessageQueueNew+0x62>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b4f      	cmp	r3, #79	; 0x4f
 8008a9e:	d90e      	bls.n	8008abe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695a      	ldr	r2, [r3, #20]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d302      	bcc.n	8008abe <osMessageQueueNew+0x62>
        mem = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	61bb      	str	r3, [r7, #24]
 8008abc:	e014      	b.n	8008ae8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d110      	bne.n	8008ae8 <osMessageQueueNew+0x8c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d108      	bne.n	8008ae8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <osMessageQueueNew+0x8c>
          mem = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	e001      	b.n	8008ae8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10b      	bne.n	8008b06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691a      	ldr	r2, [r3, #16]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	2100      	movs	r1, #0
 8008af8:	9100      	str	r1, [sp, #0]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fa2f 	bl	8008f60 <xQueueGenericCreateStatic>
 8008b02:	61f8      	str	r0, [r7, #28]
 8008b04:	e008      	b.n	8008b18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d105      	bne.n	8008b18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fa9d 	bl	8009050 <xQueueGenericCreate>
 8008b16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00c      	beq.n	8008b38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e001      	b.n	8008b30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69f8      	ldr	r0, [r7, #28]
 8008b34:	f001 f932 	bl	8009d9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b38:	69fb      	ldr	r3, [r7, #28]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b5c:	f3ef 8305 	mrs	r3, IPSR
 8008b60:	617b      	str	r3, [r7, #20]
  return(result);
 8008b62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d028      	beq.n	8008bba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <osMessageQueuePut+0x36>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <osMessageQueuePut+0x36>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008b7a:	f06f 0303 	mvn.w	r3, #3
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e038      	b.n	8008bf4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008b86:	f107 0210 	add.w	r2, r7, #16
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	69b8      	ldr	r0, [r7, #24]
 8008b90:	f000 fc24 	bl	80093dc <xQueueGenericSendFromISR>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d003      	beq.n	8008ba2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008b9a:	f06f 0302 	mvn.w	r3, #2
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e028      	b.n	8008bf4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d025      	beq.n	8008bf4 <osMessageQueuePut+0xb0>
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <osMessageQueuePut+0xbc>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	e01c      	b.n	8008bf4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <osMessageQueuePut+0x82>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008bc6:	f06f 0303 	mvn.w	r3, #3
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e012      	b.n	8008bf4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bce:	2300      	movs	r3, #0
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	69b8      	ldr	r0, [r7, #24]
 8008bd6:	f000 fb03 	bl	80091e0 <xQueueGenericSend>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d009      	beq.n	8008bf4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008be6:	f06f 0301 	mvn.w	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e002      	b.n	8008bf4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008bee:	f06f 0302 	mvn.w	r3, #2
 8008bf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008bf4:	69fb      	ldr	r3, [r7, #28]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3720      	adds	r7, #32
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1a:	f3ef 8305 	mrs	r3, IPSR
 8008c1e:	617b      	str	r3, [r7, #20]
  return(result);
 8008c20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d028      	beq.n	8008c78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <osMessageQueueGet+0x34>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <osMessageQueueGet+0x34>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c38:	f06f 0303 	mvn.w	r3, #3
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	e037      	b.n	8008cb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	461a      	mov	r2, r3
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	69b8      	ldr	r0, [r7, #24]
 8008c4e:	f000 fed9 	bl	8009a04 <xQueueReceiveFromISR>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d003      	beq.n	8008c60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c58:	f06f 0302 	mvn.w	r3, #2
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e027      	b.n	8008cb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d024      	beq.n	8008cb0 <osMessageQueueGet+0xac>
 8008c66:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <osMessageQueueGet+0xb8>)
 8008c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	e01b      	b.n	8008cb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <osMessageQueueGet+0x80>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008c84:	f06f 0303 	mvn.w	r3, #3
 8008c88:	61fb      	str	r3, [r7, #28]
 8008c8a:	e011      	b.n	8008cb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f000 fccb 	bl	800962c <xQueueReceive>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d009      	beq.n	8008cb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008ca2:	f06f 0301 	mvn.w	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	e002      	b.n	8008cb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008caa:	f06f 0302 	mvn.w	r3, #2
 8008cae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cb0:	69fb      	ldr	r3, [r7, #28]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4a07      	ldr	r2, [pc, #28]	; (8008cec <vApplicationGetIdleTaskMemory+0x2c>)
 8008cd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <vApplicationGetIdleTaskMemory+0x30>)
 8008cd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2280      	movs	r2, #128	; 0x80
 8008cdc:	601a      	str	r2, [r3, #0]
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20000d20 	.word	0x20000d20
 8008cf0:	20000d7c 	.word	0x20000d7c

08008cf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a07      	ldr	r2, [pc, #28]	; (8008d20 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <vApplicationGetTimerTaskMemory+0x30>)
 8008d0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000f7c 	.word	0x20000f7c
 8008d24:	20000fd8 	.word	0x20000fd8

08008d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f103 0208 	add.w	r2, r3, #8
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f103 0208 	add.w	r2, r3, #8
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f103 0208 	add.w	r2, r3, #8
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d103      	bne.n	8008dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	e00c      	b.n	8008e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3308      	adds	r3, #8
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e002      	b.n	8008df8 <vListInsert+0x2e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d2f6      	bcs.n	8008df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	601a      	str	r2, [r3, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6892      	ldr	r2, [r2, #8]
 8008e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6852      	ldr	r2, [r2, #4]
 8008e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d103      	bne.n	8008e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1e5a      	subs	r2, r3, #1
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008eba:	f002 fc3b 	bl	800b734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008eca:	fb01 f303 	mul.w	r3, r1, r3
 8008ece:	441a      	add	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eea:	3b01      	subs	r3, #1
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d114      	bne.n	8008f3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01a      	beq.n	8008f4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fbf1 	bl	800a704 <xTaskRemoveFromEventList>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d012      	beq.n	8008f4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <xQueueGenericReset+0xcc>)
 8008f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	e009      	b.n	8008f4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fef2 	bl	8008d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff feed 	bl	8008d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f4e:	f002 fc21 	bl	800b794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f52:	2301      	movs	r3, #1
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	e000ed04 	.word	0xe000ed04

08008f60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08e      	sub	sp, #56	; 0x38
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <xQueueGenericCreateStatic+0x52>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <xQueueGenericCreateStatic+0x56>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <xQueueGenericCreateStatic+0x58>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	623b      	str	r3, [r7, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <xQueueGenericCreateStatic+0x7e>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <xQueueGenericCreateStatic+0x82>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueGenericCreateStatic+0x84>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61fb      	str	r3, [r7, #28]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ffe:	2350      	movs	r3, #80	; 0x50
 8009000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b50      	cmp	r3, #80	; 0x50
 8009006:	d00a      	beq.n	800901e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	61bb      	str	r3, [r7, #24]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800901e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4613      	mov	r3, r2
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f83f 	bl	80090c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009048:	4618      	mov	r0, r3
 800904a:	3730      	adds	r7, #48	; 0x30
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af02      	add	r7, sp, #8
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10a      	bne.n	800907a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	613b      	str	r3, [r7, #16]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	3350      	adds	r3, #80	; 0x50
 8009088:	4618      	mov	r0, r3
 800908a:	f002 fc75 	bl	800b978 <pvPortMalloc>
 800908e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d011      	beq.n	80090ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	3350      	adds	r3, #80	; 0x50
 800909e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090a8:	79fa      	ldrb	r2, [r7, #7]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4613      	mov	r3, r2
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f805 	bl	80090c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090ba:	69bb      	ldr	r3, [r7, #24]
	}
 80090bc:	4618      	mov	r0, r3
 80090be:	3720      	adds	r7, #32
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d103      	bne.n	80090e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e002      	b.n	80090e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090f2:	2101      	movs	r1, #1
 80090f4:	69b8      	ldr	r0, [r7, #24]
 80090f6:	f7ff fecb 	bl	8008e90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08a      	sub	sp, #40	; 0x28
 800910e:	af02      	add	r7, sp, #8
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	61bb      	str	r3, [r7, #24]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	429a      	cmp	r2, r3
 8009138:	d90a      	bls.n	8009150 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	617b      	str	r3, [r7, #20]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009150:	2302      	movs	r3, #2
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	2100      	movs	r1, #0
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f7ff ff00 	bl	8008f60 <xQueueGenericCreateStatic>
 8009160:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d002      	beq.n	800916e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800916e:	69fb      	ldr	r3, [r7, #28]
	}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	613b      	str	r3, [r7, #16]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90a      	bls.n	80091bc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60fb      	str	r3, [r7, #12]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091bc:	2202      	movs	r2, #2
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff ff45 	bl	8009050 <xQueueGenericCreate>
 80091c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d002      	beq.n	80091d4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80091d4:	697b      	ldr	r3, [r7, #20]
	}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08e      	sub	sp, #56	; 0x38
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091ee:	2300      	movs	r3, #0
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSend+0x32>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <xQueueGenericSend+0x40>
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <xQueueGenericSend+0x44>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <xQueueGenericSend+0x46>
 8009224:	2300      	movs	r3, #0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueGenericSend+0x60>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d103      	bne.n	800924e <xQueueGenericSend+0x6e>
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <xQueueGenericSend+0x72>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSend+0x74>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericSend+0x8e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926e:	f001 fc07 	bl	800aa80 <xTaskGetSchedulerState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueGenericSend+0x9e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueGenericSend+0xa2>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSend+0xa4>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericSend+0xbe>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f002 fa49 	bl	800b734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <xQueueGenericSend+0xd4>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d129      	bne.n	8009308 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ba:	f000 fc5e 	bl	8009b7a <prvCopyDataToQueue>
 80092be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 fa19 	bl	800a704 <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092d8:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	e00a      	b.n	8009300 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092f0:	4b39      	ldr	r3, [pc, #228]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009300:	f002 fa48 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 8009304:	2301      	movs	r3, #1
 8009306:	e063      	b.n	80093d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d103      	bne.n	8009316 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800930e:	f002 fa41 	bl	800b794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009312:	2300      	movs	r3, #0
 8009314:	e05c      	b.n	80093d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4618      	mov	r0, r3
 8009322:	f001 fa53 	bl	800a7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800932a:	f002 fa33 	bl	800b794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800932e:	f000 ffc5 	bl	800a2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009332:	f002 f9ff 	bl	800b734 <vPortEnterCritical>
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800933c:	b25b      	sxtb	r3, r3
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d103      	bne.n	800934c <xQueueGenericSend+0x16c>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009352:	b25b      	sxtb	r3, r3
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009358:	d103      	bne.n	8009362 <xQueueGenericSend+0x182>
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009362:	f002 fa17 	bl	800b794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f001 fa42 	bl	800a7f8 <xTaskCheckForTimeOut>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d124      	bne.n	80093c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800937a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800937c:	f000 fcf5 	bl	8009d6a <prvIsQueueFull>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d018      	beq.n	80093b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	3310      	adds	r3, #16
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f968 	bl	800a664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009396:	f000 fc80 	bl	8009c9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800939a:	f000 ff9d 	bl	800a2d8 <xTaskResumeAll>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af7c 	bne.w	800929e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e772      	b.n	800929e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ba:	f000 fc6e 	bl	8009c9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093be:	f000 ff8b 	bl	800a2d8 <xTaskResumeAll>
 80093c2:	e76c      	b.n	800929e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c6:	f000 fc68 	bl	8009c9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ca:	f000 ff85 	bl	800a2d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	; 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b090      	sub	sp, #64	; 0x40
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <xQueueGenericSendFromISR+0x3c>
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <xQueueGenericSendFromISR+0x40>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <xQueueGenericSendFromISR+0x42>
 800941c:	2300      	movs	r3, #0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSendFromISR+0x6a>
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSendFromISR+0x6e>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSendFromISR+0x70>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	623b      	str	r3, [r7, #32]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009466:	f002 fa47 	bl	800b8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800946a:	f3ef 8211 	mrs	r2, BASEPRI
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009482:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	429a      	cmp	r2, r3
 8009490:	d302      	bcc.n	8009498 <xQueueGenericSendFromISR+0xbc>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d12f      	bne.n	80094f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800949e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ae:	f000 fb64 	bl	8009b7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d112      	bne.n	80094e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	3324      	adds	r3, #36	; 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f91b 	bl	800a704 <xTaskRemoveFromEventList>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e007      	b.n	80094f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	b25a      	sxtb	r2, r3
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094f2:	2301      	movs	r3, #1
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80094f6:	e001      	b.n	80094fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009506:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800950a:	4618      	mov	r0, r3
 800950c:	3740      	adds	r7, #64	; 0x40
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b08e      	sub	sp, #56	; 0x38
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	623b      	str	r3, [r7, #32]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	61fb      	str	r3, [r7, #28]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d103      	bne.n	800956a <xQueueGiveFromISR+0x58>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <xQueueGiveFromISR+0x5c>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGiveFromISR+0x5e>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	61bb      	str	r3, [r7, #24]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800958a:	f002 f9b5 	bl	800b8f8 <vPortValidateInterruptPriority>
	__asm volatile
 800958e:	f3ef 8211 	mrs	r2, BASEPRI
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	617a      	str	r2, [r7, #20]
 80095a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80095a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d22b      	bcs.n	8009612 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d112      	bne.n	80095fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d016      	beq.n	800960c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	3324      	adds	r3, #36	; 0x24
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 f88e 	bl	800a704 <xTaskRemoveFromEventList>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2201      	movs	r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	e007      	b.n	800960c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009600:	3301      	adds	r3, #1
 8009602:	b2db      	uxtb	r3, r3
 8009604:	b25a      	sxtb	r2, r3
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800960c:	2301      	movs	r3, #1
 800960e:	637b      	str	r3, [r7, #52]	; 0x34
 8009610:	e001      	b.n	8009616 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009612:	2300      	movs	r3, #0
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f383 8811 	msr	BASEPRI, r3
}
 8009620:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009624:	4618      	mov	r0, r3
 8009626:	3738      	adds	r7, #56	; 0x38
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08c      	sub	sp, #48	; 0x30
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009638:	2300      	movs	r3, #0
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <xQueueReceive+0x30>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	623b      	str	r3, [r7, #32]
}
 8009658:	bf00      	nop
 800965a:	e7fe      	b.n	800965a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <xQueueReceive+0x3e>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <xQueueReceive+0x42>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <xQueueReceive+0x44>
 800966e:	2300      	movs	r3, #0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xQueueReceive+0x5e>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	61fb      	str	r3, [r7, #28]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800968a:	f001 f9f9 	bl	800aa80 <xTaskGetSchedulerState>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <xQueueReceive+0x6e>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <xQueueReceive+0x72>
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <xQueueReceive+0x74>
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xQueueReceive+0x8e>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	61bb      	str	r3, [r7, #24]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ba:	f002 f83b 	bl	800b734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01f      	beq.n	800970a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ce:	f000 fabe 	bl	8009c4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	1e5a      	subs	r2, r3, #1
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00f      	beq.n	8009702 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	3310      	adds	r3, #16
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 f80c 	bl	800a704 <xTaskRemoveFromEventList>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d007      	beq.n	8009702 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096f2:	4b3d      	ldr	r3, [pc, #244]	; (80097e8 <xQueueReceive+0x1bc>)
 80096f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009702:	f002 f847 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 8009706:	2301      	movs	r3, #1
 8009708:	e069      	b.n	80097de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009710:	f002 f840 	bl	800b794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009714:	2300      	movs	r3, #0
 8009716:	e062      	b.n	80097de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d106      	bne.n	800972c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800971e:	f107 0310 	add.w	r3, r7, #16
 8009722:	4618      	mov	r0, r3
 8009724:	f001 f852 	bl	800a7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800972c:	f002 f832 	bl	800b794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009730:	f000 fdc4 	bl	800a2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009734:	f001 fffe 	bl	800b734 <vPortEnterCritical>
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800973e:	b25b      	sxtb	r3, r3
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d103      	bne.n	800974e <xQueueReceive+0x122>
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009754:	b25b      	sxtb	r3, r3
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d103      	bne.n	8009764 <xQueueReceive+0x138>
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009764:	f002 f816 	bl	800b794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009768:	1d3a      	adds	r2, r7, #4
 800976a:	f107 0310 	add.w	r3, r7, #16
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f001 f841 	bl	800a7f8 <xTaskCheckForTimeOut>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d123      	bne.n	80097c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800977c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977e:	f000 fade 	bl	8009d3e <prvIsQueueEmpty>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d017      	beq.n	80097b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	3324      	adds	r3, #36	; 0x24
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 ff67 	bl	800a664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009798:	f000 fa7f 	bl	8009c9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800979c:	f000 fd9c 	bl	800a2d8 <xTaskResumeAll>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d189      	bne.n	80096ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <xQueueReceive+0x1bc>)
 80097a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	e780      	b.n	80096ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ba:	f000 fa6e 	bl	8009c9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097be:	f000 fd8b 	bl	800a2d8 <xTaskResumeAll>
 80097c2:	e77a      	b.n	80096ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c6:	f000 fa68 	bl	8009c9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097ca:	f000 fd85 	bl	800a2d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d0:	f000 fab5 	bl	8009d3e <prvIsQueueEmpty>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f43f af6f 	beq.w	80096ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3730      	adds	r7, #48	; 0x30
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08e      	sub	sp, #56	; 0x38
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80097fe:	2300      	movs	r3, #0
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	623b      	str	r3, [r7, #32]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	61fb      	str	r3, [r7, #28]
}
 8009838:	bf00      	nop
 800983a:	e7fe      	b.n	800983a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983c:	f001 f920 	bl	800aa80 <xTaskGetSchedulerState>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <xQueueSemaphoreTake+0x60>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <xQueueSemaphoreTake+0x64>
 800984c:	2301      	movs	r3, #1
 800984e:	e000      	b.n	8009852 <xQueueSemaphoreTake+0x66>
 8009850:	2300      	movs	r3, #0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	61bb      	str	r3, [r7, #24]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800986c:	f001 ff62 	bl	800b734 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	2b00      	cmp	r3, #0
 800987a:	d024      	beq.n	80098c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800988c:	f001 fa6e 	bl	800ad6c <pvTaskIncrementMutexHeldCount>
 8009890:	4602      	mov	r2, r0
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	3310      	adds	r3, #16
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 ff2e 	bl	800a704 <xTaskRemoveFromEventList>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098ae:	4b54      	ldr	r3, [pc, #336]	; (8009a00 <xQueueSemaphoreTake+0x214>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098be:	f001 ff69 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e097      	b.n	80099f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d111      	bne.n	80098f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	617b      	str	r3, [r7, #20]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80098e8:	f001 ff54 	bl	800b794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098ec:	2300      	movs	r3, #0
 80098ee:	e082      	b.n	80099f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d106      	bne.n	8009904 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098f6:	f107 030c 	add.w	r3, r7, #12
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 ff66 	bl	800a7cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009904:	f001 ff46 	bl	800b794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009908:	f000 fcd8 	bl	800a2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800990c:	f001 ff12 	bl	800b734 <vPortEnterCritical>
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009916:	b25b      	sxtb	r3, r3
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d103      	bne.n	8009926 <xQueueSemaphoreTake+0x13a>
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800992c:	b25b      	sxtb	r3, r3
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009932:	d103      	bne.n	800993c <xQueueSemaphoreTake+0x150>
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800993c:	f001 ff2a 	bl	800b794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009940:	463a      	mov	r2, r7
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f000 ff55 	bl	800a7f8 <xTaskCheckForTimeOut>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d132      	bne.n	80099ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009956:	f000 f9f2 	bl	8009d3e <prvIsQueueEmpty>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d026      	beq.n	80099ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d109      	bne.n	800997c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009968:	f001 fee4 	bl	800b734 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f8a3 	bl	800aabc <xTaskPriorityInherit>
 8009976:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009978:	f001 ff0c 	bl	800b794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fe6d 	bl	800a664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800998a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998c:	f000 f985 	bl	8009c9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009990:	f000 fca2 	bl	800a2d8 <xTaskResumeAll>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	f47f af68 	bne.w	800986c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800999c:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <xQueueSemaphoreTake+0x214>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	e75e      	b.n	800986c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80099ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099b0:	f000 f973 	bl	8009c9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099b4:	f000 fc90 	bl	800a2d8 <xTaskResumeAll>
 80099b8:	e758      	b.n	800986c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80099ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099bc:	f000 f96d 	bl	8009c9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099c0:	f000 fc8a 	bl	800a2d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099c6:	f000 f9ba 	bl	8009d3e <prvIsQueueEmpty>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f43f af4d 	beq.w	800986c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00d      	beq.n	80099f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80099d8:	f001 feac 	bl	800b734 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80099dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099de:	f000 f8b4 	bl	8009b4a <prvGetDisinheritPriorityAfterTimeout>
 80099e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 f93c 	bl	800ac68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80099f0:	f001 fed0 	bl	800b794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3738      	adds	r7, #56	; 0x38
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08e      	sub	sp, #56	; 0x38
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	623b      	str	r3, [r7, #32]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d103      	bne.n	8009a3e <xQueueReceiveFromISR+0x3a>
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <xQueueReceiveFromISR+0x3e>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <xQueueReceiveFromISR+0x40>
 8009a42:	2300      	movs	r3, #0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	61fb      	str	r3, [r7, #28]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a5e:	f001 ff4b 	bl	800b8f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009a62:	f3ef 8211 	mrs	r2, BASEPRI
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	61ba      	str	r2, [r7, #24]
 8009a78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009a7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d02f      	beq.n	8009aea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a98:	f000 f8d9 	bl	8009c4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d112      	bne.n	8009ad4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d016      	beq.n	8009ae4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	3310      	adds	r3, #16
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fe22 	bl	800a704 <xTaskRemoveFromEventList>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00e      	beq.n	8009ae4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e007      	b.n	8009ae4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	b25a      	sxtb	r2, r3
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ae8:	e001      	b.n	8009aee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	637b      	str	r3, [r7, #52]	; 0x34
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f383 8811 	msr	BASEPRI, r3
}
 8009af8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3738      	adds	r7, #56	; 0x38
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <vQueueDelete+0x28>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f95f 	bl	8009df0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f001 ffe7 	bl	800bb10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	e001      	b.n	8009b6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10d      	bne.n	8009bb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d14d      	bne.n	8009c3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 fff1 	bl	800ab8c <xTaskPriorityDisinherit>
 8009baa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	609a      	str	r2, [r3, #8]
 8009bb2:	e043      	b.n	8009c3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d119      	bne.n	8009bee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6858      	ldr	r0, [r3, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	f002 f8eb 	bl	800bda0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd2:	441a      	add	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d32b      	bcc.n	8009c3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	605a      	str	r2, [r3, #4]
 8009bec:	e026      	b.n	8009c3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	68d8      	ldr	r0, [r3, #12]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	f002 f8d1 	bl	800bda0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	425b      	negs	r3, r3
 8009c08:	441a      	add	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d207      	bcs.n	8009c2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	425b      	negs	r3, r3
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d105      	bne.n	8009c3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c44:	697b      	ldr	r3, [r7, #20]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d018      	beq.n	8009c92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c68:	441a      	add	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d303      	bcc.n	8009c82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68d9      	ldr	r1, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6838      	ldr	r0, [r7, #0]
 8009c8e:	f002 f887 	bl	800bda0 <memcpy>
	}
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ca2:	f001 fd47 	bl	800b734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cae:	e011      	b.n	8009cd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d012      	beq.n	8009cde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fd21 	bl	800a704 <xTaskRemoveFromEventList>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cc8:	f000 fdf8 	bl	800a8bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dce9      	bgt.n	8009cb0 <prvUnlockQueue+0x16>
 8009cdc:	e000      	b.n	8009ce0 <prvUnlockQueue+0x46>
					break;
 8009cde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	22ff      	movs	r2, #255	; 0xff
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ce8:	f001 fd54 	bl	800b794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cec:	f001 fd22 	bl	800b734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cf6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cf8:	e011      	b.n	8009d1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d012      	beq.n	8009d28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	3310      	adds	r3, #16
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fcfc 	bl	800a704 <xTaskRemoveFromEventList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d12:	f000 fdd3 	bl	800a8bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dce9      	bgt.n	8009cfa <prvUnlockQueue+0x60>
 8009d26:	e000      	b.n	8009d2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d32:	f001 fd2f 	bl	800b794 <vPortExitCritical>
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d46:	f001 fcf5 	bl	800b734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d52:	2301      	movs	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]
 8009d56:	e001      	b.n	8009d5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d5c:	f001 fd1a 	bl	800b794 <vPortExitCritical>

	return xReturn;
 8009d60:	68fb      	ldr	r3, [r7, #12]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d72:	f001 fcdf 	bl	800b734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d102      	bne.n	8009d88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d82:	2301      	movs	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e001      	b.n	8009d8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d8c:	f001 fd02 	bl	800b794 <vPortExitCritical>

	return xReturn;
 8009d90:	68fb      	ldr	r3, [r7, #12]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e014      	b.n	8009dd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009dac:	4a0f      	ldr	r2, [pc, #60]	; (8009dec <vQueueAddToRegistry+0x50>)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10b      	bne.n	8009dd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009db8:	490c      	ldr	r1, [pc, #48]	; (8009dec <vQueueAddToRegistry+0x50>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dc2:	4a0a      	ldr	r2, [pc, #40]	; (8009dec <vQueueAddToRegistry+0x50>)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	4413      	add	r3, r2
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dce:	e006      	b.n	8009dde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b07      	cmp	r3, #7
 8009dda:	d9e7      	bls.n	8009dac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ddc:	bf00      	nop
 8009dde:	bf00      	nop
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	200013d8 	.word	0x200013d8

08009df0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e016      	b.n	8009e2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009dfe:	4a10      	ldr	r2, [pc, #64]	; (8009e40 <vQueueUnregisterQueue+0x50>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4413      	add	r3, r2
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d10b      	bne.n	8009e26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e0e:	4a0c      	ldr	r2, [pc, #48]	; (8009e40 <vQueueUnregisterQueue+0x50>)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2100      	movs	r1, #0
 8009e14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e18:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <vQueueUnregisterQueue+0x50>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	4413      	add	r3, r2
 8009e20:	2200      	movs	r2, #0
 8009e22:	605a      	str	r2, [r3, #4]
				break;
 8009e24:	e006      	b.n	8009e34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b07      	cmp	r3, #7
 8009e30:	d9e5      	bls.n	8009dfe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	200013d8 	.word	0x200013d8

08009e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e54:	f001 fc6e 	bl	800b734 <vPortEnterCritical>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d103      	bne.n	8009e6e <vQueueWaitForMessageRestricted+0x2a>
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <vQueueWaitForMessageRestricted+0x40>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e84:	f001 fc86 	bl	800b794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fc07 	bl	800a6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f7ff fefb 	bl	8009c9a <prvUnlockQueue>
	}
 8009ea4:	bf00      	nop
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08e      	sub	sp, #56	; 0x38
 8009eb0:	af04      	add	r7, sp, #16
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10a      	bne.n	8009ed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	623b      	str	r3, [r7, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	61fb      	str	r3, [r7, #28]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ef2:	235c      	movs	r3, #92	; 0x5c
 8009ef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8009efa:	d00a      	beq.n	8009f12 <xTaskCreateStatic+0x66>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	61bb      	str	r3, [r7, #24]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01e      	beq.n	8009f58 <xTaskCreateStatic+0xac>
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01b      	beq.n	8009f58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f32:	2300      	movs	r3, #0
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	f107 0314 	add.w	r3, r7, #20
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 f850 	bl	8009ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f52:	f000 f8dd 	bl	800a110 <prvAddNewTaskToReadyList>
 8009f56:	e001      	b.n	8009f5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f5c:	697b      	ldr	r3, [r7, #20]
	}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	; 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b08c      	sub	sp, #48	; 0x30
 8009f6a:	af04      	add	r7, sp, #16
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 fcfc 	bl	800b978 <pvPortMalloc>
 8009f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f88:	205c      	movs	r0, #92	; 0x5c
 8009f8a:	f001 fcf5 	bl	800b978 <pvPortMalloc>
 8009f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8009f9c:	e005      	b.n	8009faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f9e:	6978      	ldr	r0, [r7, #20]
 8009fa0:	f001 fdb6 	bl	800bb10 <vPortFree>
 8009fa4:	e001      	b.n	8009faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d017      	beq.n	8009fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fb8:	88fa      	ldrh	r2, [r7, #6]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9303      	str	r3, [sp, #12]
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	9302      	str	r3, [sp, #8]
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f80e 	bl	8009ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fd4:	69f8      	ldr	r0, [r7, #28]
 8009fd6:	f000 f89b 	bl	800a110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	61bb      	str	r3, [r7, #24]
 8009fde:	e002      	b.n	8009fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	461a      	mov	r2, r3
 800a008:	21a5      	movs	r1, #165	; 0xa5
 800a00a:	f001 fed7 	bl	800bdbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a018:	3b01      	subs	r3, #1
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f023 0307 	bic.w	r3, r3, #7
 800a026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	617b      	str	r3, [r7, #20]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d01f      	beq.n	800a08e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	e012      	b.n	800a07a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	7819      	ldrb	r1, [r3, #0]
 800a05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	4413      	add	r3, r2
 800a062:	3334      	adds	r3, #52	; 0x34
 800a064:	460a      	mov	r2, r1
 800a066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	3301      	adds	r3, #1
 800a078:	61fb      	str	r3, [r7, #28]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	2b0f      	cmp	r3, #15
 800a07e:	d9e9      	bls.n	800a054 <prvInitialiseNewTask+0x64>
 800a080:	e000      	b.n	800a084 <prvInitialiseNewTask+0x94>
			{
				break;
 800a082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a08c:	e003      	b.n	800a096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	2b37      	cmp	r3, #55	; 0x37
 800a09a:	d901      	bls.n	800a0a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a09c:	2337      	movs	r3, #55	; 0x37
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fe56 	bl	8008d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	3318      	adds	r3, #24
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe fe51 	bl	8008d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	2200      	movs	r2, #0
 800a0e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	69b8      	ldr	r0, [r7, #24]
 800a0f0:	f001 f9f2 	bl	800b4d8 <pxPortInitialiseStack>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a106:	bf00      	nop
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a118:	f001 fb0c 	bl	800b734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a11c:	4b2d      	ldr	r3, [pc, #180]	; (800a1d4 <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	4a2c      	ldr	r2, [pc, #176]	; (800a1d4 <prvAddNewTaskToReadyList+0xc4>)
 800a124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a126:	4b2c      	ldr	r3, [pc, #176]	; (800a1d8 <prvAddNewTaskToReadyList+0xc8>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d109      	bne.n	800a142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a12e:	4a2a      	ldr	r2, [pc, #168]	; (800a1d8 <prvAddNewTaskToReadyList+0xc8>)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a134:	4b27      	ldr	r3, [pc, #156]	; (800a1d4 <prvAddNewTaskToReadyList+0xc4>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d110      	bne.n	800a15e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a13c:	f000 fbe2 	bl	800a904 <prvInitialiseTaskLists>
 800a140:	e00d      	b.n	800a15e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a142:	4b26      	ldr	r3, [pc, #152]	; (800a1dc <prvAddNewTaskToReadyList+0xcc>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a14a:	4b23      	ldr	r3, [pc, #140]	; (800a1d8 <prvAddNewTaskToReadyList+0xc8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	429a      	cmp	r2, r3
 800a156:	d802      	bhi.n	800a15e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a158:	4a1f      	ldr	r2, [pc, #124]	; (800a1d8 <prvAddNewTaskToReadyList+0xc8>)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a15e:	4b20      	ldr	r3, [pc, #128]	; (800a1e0 <prvAddNewTaskToReadyList+0xd0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <prvAddNewTaskToReadyList+0xd0>)
 800a166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a168:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <prvAddNewTaskToReadyList+0xd0>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4b1b      	ldr	r3, [pc, #108]	; (800a1e4 <prvAddNewTaskToReadyList+0xd4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d903      	bls.n	800a184 <prvAddNewTaskToReadyList+0x74>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	4a18      	ldr	r2, [pc, #96]	; (800a1e4 <prvAddNewTaskToReadyList+0xd4>)
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <prvAddNewTaskToReadyList+0xd8>)
 800a192:	441a      	add	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7fe fdf1 	bl	8008d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1a0:	f001 faf8 	bl	800b794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1a4:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <prvAddNewTaskToReadyList+0xcc>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00e      	beq.n	800a1ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <prvAddNewTaskToReadyList+0xc8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d207      	bcs.n	800a1ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <prvAddNewTaskToReadyList+0xdc>)
 800a1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1ca:	bf00      	nop
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200018ec 	.word	0x200018ec
 800a1d8:	20001418 	.word	0x20001418
 800a1dc:	200018f8 	.word	0x200018f8
 800a1e0:	20001908 	.word	0x20001908
 800a1e4:	200018f4 	.word	0x200018f4
 800a1e8:	2000141c 	.word	0x2000141c
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	; 0x28
 800a1f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1fe:	463a      	mov	r2, r7
 800a200:	1d39      	adds	r1, r7, #4
 800a202:	f107 0308 	add.w	r3, r7, #8
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe fd5a 	bl	8008cc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	9202      	str	r2, [sp, #8]
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	2300      	movs	r3, #0
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	460a      	mov	r2, r1
 800a21e:	4921      	ldr	r1, [pc, #132]	; (800a2a4 <vTaskStartScheduler+0xb4>)
 800a220:	4821      	ldr	r0, [pc, #132]	; (800a2a8 <vTaskStartScheduler+0xb8>)
 800a222:	f7ff fe43 	bl	8009eac <xTaskCreateStatic>
 800a226:	4603      	mov	r3, r0
 800a228:	4a20      	ldr	r2, [pc, #128]	; (800a2ac <vTaskStartScheduler+0xbc>)
 800a22a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a22c:	4b1f      	ldr	r3, [pc, #124]	; (800a2ac <vTaskStartScheduler+0xbc>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a234:	2301      	movs	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e001      	b.n	800a23e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d102      	bne.n	800a24a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a244:	f000 fdfa 	bl	800ae3c <xTimerCreateTimerTask>
 800a248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d116      	bne.n	800a27e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	613b      	str	r3, [r7, #16]
}
 800a262:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a264:	4b12      	ldr	r3, [pc, #72]	; (800a2b0 <vTaskStartScheduler+0xc0>)
 800a266:	f04f 32ff 	mov.w	r2, #4294967295
 800a26a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a26c:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <vTaskStartScheduler+0xc4>)
 800a26e:	2201      	movs	r2, #1
 800a270:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <vTaskStartScheduler+0xc8>)
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a278:	f001 f9ba 	bl	800b5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a27c:	e00e      	b.n	800a29c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a284:	d10a      	bne.n	800a29c <vTaskStartScheduler+0xac>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	60fb      	str	r3, [r7, #12]
}
 800a298:	bf00      	nop
 800a29a:	e7fe      	b.n	800a29a <vTaskStartScheduler+0xaa>
}
 800a29c:	bf00      	nop
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	08011af8 	.word	0x08011af8
 800a2a8:	0800a8d5 	.word	0x0800a8d5
 800a2ac:	20001910 	.word	0x20001910
 800a2b0:	2000190c 	.word	0x2000190c
 800a2b4:	200018f8 	.word	0x200018f8
 800a2b8:	200018f0 	.word	0x200018f0

0800a2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <vTaskSuspendAll+0x18>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	4a03      	ldr	r2, [pc, #12]	; (800a2d4 <vTaskSuspendAll+0x18>)
 800a2c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	20001914 	.word	0x20001914

0800a2d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2e6:	4b42      	ldr	r3, [pc, #264]	; (800a3f0 <xTaskResumeAll+0x118>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	603b      	str	r3, [r7, #0]
}
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a304:	f001 fa16 	bl	800b734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a308:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <xTaskResumeAll+0x118>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	4a38      	ldr	r2, [pc, #224]	; (800a3f0 <xTaskResumeAll+0x118>)
 800a310:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a312:	4b37      	ldr	r3, [pc, #220]	; (800a3f0 <xTaskResumeAll+0x118>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d162      	bne.n	800a3e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a31a:	4b36      	ldr	r3, [pc, #216]	; (800a3f4 <xTaskResumeAll+0x11c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d05e      	beq.n	800a3e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a322:	e02f      	b.n	800a384 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a324:	4b34      	ldr	r3, [pc, #208]	; (800a3f8 <xTaskResumeAll+0x120>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3318      	adds	r3, #24
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fd83 	bl	8008e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3304      	adds	r3, #4
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fd7e 	bl	8008e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4b2d      	ldr	r3, [pc, #180]	; (800a3fc <xTaskResumeAll+0x124>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d903      	bls.n	800a354 <xTaskResumeAll+0x7c>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a2a      	ldr	r2, [pc, #168]	; (800a3fc <xTaskResumeAll+0x124>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a27      	ldr	r2, [pc, #156]	; (800a400 <xTaskResumeAll+0x128>)
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe fd09 	bl	8008d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4b23      	ldr	r3, [pc, #140]	; (800a404 <xTaskResumeAll+0x12c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d302      	bcc.n	800a384 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a37e:	4b22      	ldr	r3, [pc, #136]	; (800a408 <xTaskResumeAll+0x130>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a384:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <xTaskResumeAll+0x120>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1cb      	bne.n	800a324 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a392:	f000 fb55 	bl	800aa40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <xTaskResumeAll+0x134>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f000 f847 	bl	800a434 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3ac:	4b16      	ldr	r3, [pc, #88]	; (800a408 <xTaskResumeAll+0x130>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f1      	bne.n	800a3a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3be:	4b13      	ldr	r3, [pc, #76]	; (800a40c <xTaskResumeAll+0x134>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3c4:	4b10      	ldr	r3, [pc, #64]	; (800a408 <xTaskResumeAll+0x130>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <xTaskResumeAll+0x138>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e0:	f001 f9d8 	bl	800b794 <vPortExitCritical>

	return xAlreadyYielded;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20001914 	.word	0x20001914
 800a3f4:	200018ec 	.word	0x200018ec
 800a3f8:	200018ac 	.word	0x200018ac
 800a3fc:	200018f4 	.word	0x200018f4
 800a400:	2000141c 	.word	0x2000141c
 800a404:	20001418 	.word	0x20001418
 800a408:	20001900 	.word	0x20001900
 800a40c:	200018fc 	.word	0x200018fc
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <xTaskGetTickCount+0x1c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a420:	687b      	ldr	r3, [r7, #4]
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	200018f0 	.word	0x200018f0

0800a434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a43e:	4b4f      	ldr	r3, [pc, #316]	; (800a57c <xTaskIncrementTick+0x148>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f040 808f 	bne.w	800a566 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a448:	4b4d      	ldr	r3, [pc, #308]	; (800a580 <xTaskIncrementTick+0x14c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3301      	adds	r3, #1
 800a44e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a450:	4a4b      	ldr	r2, [pc, #300]	; (800a580 <xTaskIncrementTick+0x14c>)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d120      	bne.n	800a49e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a45c:	4b49      	ldr	r3, [pc, #292]	; (800a584 <xTaskIncrementTick+0x150>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <xTaskIncrementTick+0x48>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	603b      	str	r3, [r7, #0]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <xTaskIncrementTick+0x46>
 800a47c:	4b41      	ldr	r3, [pc, #260]	; (800a584 <xTaskIncrementTick+0x150>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	4b41      	ldr	r3, [pc, #260]	; (800a588 <xTaskIncrementTick+0x154>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a3f      	ldr	r2, [pc, #252]	; (800a584 <xTaskIncrementTick+0x150>)
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	4a3f      	ldr	r2, [pc, #252]	; (800a588 <xTaskIncrementTick+0x154>)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	4b3e      	ldr	r3, [pc, #248]	; (800a58c <xTaskIncrementTick+0x158>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	4a3d      	ldr	r2, [pc, #244]	; (800a58c <xTaskIncrementTick+0x158>)
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	f000 fad1 	bl	800aa40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a49e:	4b3c      	ldr	r3, [pc, #240]	; (800a590 <xTaskIncrementTick+0x15c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d349      	bcc.n	800a53c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4a8:	4b36      	ldr	r3, [pc, #216]	; (800a584 <xTaskIncrementTick+0x150>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b2:	4b37      	ldr	r3, [pc, #220]	; (800a590 <xTaskIncrementTick+0x15c>)
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b8:	601a      	str	r2, [r3, #0]
					break;
 800a4ba:	e03f      	b.n	800a53c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4bc:	4b31      	ldr	r3, [pc, #196]	; (800a584 <xTaskIncrementTick+0x150>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d203      	bcs.n	800a4dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4d4:	4a2e      	ldr	r2, [pc, #184]	; (800a590 <xTaskIncrementTick+0x15c>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4da:	e02f      	b.n	800a53c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe fcab 	bl	8008e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3318      	adds	r3, #24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fca2 	bl	8008e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	4b25      	ldr	r3, [pc, #148]	; (800a594 <xTaskIncrementTick+0x160>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d903      	bls.n	800a50c <xTaskIncrementTick+0xd8>
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	4a22      	ldr	r2, [pc, #136]	; (800a594 <xTaskIncrementTick+0x160>)
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <xTaskIncrementTick+0x164>)
 800a51a:	441a      	add	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7fe fc2d 	bl	8008d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <xTaskIncrementTick+0x168>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	429a      	cmp	r2, r3
 800a534:	d3b8      	bcc.n	800a4a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a536:	2301      	movs	r3, #1
 800a538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a53a:	e7b5      	b.n	800a4a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a53c:	4b17      	ldr	r3, [pc, #92]	; (800a59c <xTaskIncrementTick+0x168>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	4915      	ldr	r1, [pc, #84]	; (800a598 <xTaskIncrementTick+0x164>)
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	440b      	add	r3, r1
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d901      	bls.n	800a558 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a558:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <xTaskIncrementTick+0x16c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d007      	beq.n	800a570 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e004      	b.n	800a570 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <xTaskIncrementTick+0x170>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	4a0d      	ldr	r2, [pc, #52]	; (800a5a4 <xTaskIncrementTick+0x170>)
 800a56e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a570:	697b      	ldr	r3, [r7, #20]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20001914 	.word	0x20001914
 800a580:	200018f0 	.word	0x200018f0
 800a584:	200018a4 	.word	0x200018a4
 800a588:	200018a8 	.word	0x200018a8
 800a58c:	20001904 	.word	0x20001904
 800a590:	2000190c 	.word	0x2000190c
 800a594:	200018f4 	.word	0x200018f4
 800a598:	2000141c 	.word	0x2000141c
 800a59c:	20001418 	.word	0x20001418
 800a5a0:	20001900 	.word	0x20001900
 800a5a4:	200018fc 	.word	0x200018fc

0800a5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5ae:	4b28      	ldr	r3, [pc, #160]	; (800a650 <vTaskSwitchContext+0xa8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5b6:	4b27      	ldr	r3, [pc, #156]	; (800a654 <vTaskSwitchContext+0xac>)
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5bc:	e041      	b.n	800a642 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5be:	4b25      	ldr	r3, [pc, #148]	; (800a654 <vTaskSwitchContext+0xac>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c4:	4b24      	ldr	r3, [pc, #144]	; (800a658 <vTaskSwitchContext+0xb0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e010      	b.n	800a5ee <vTaskSwitchContext+0x46>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	607b      	str	r3, [r7, #4]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <vTaskSwitchContext+0x3e>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	491b      	ldr	r1, [pc, #108]	; (800a65c <vTaskSwitchContext+0xb4>)
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0e4      	beq.n	800a5cc <vTaskSwitchContext+0x24>
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4a13      	ldr	r2, [pc, #76]	; (800a65c <vTaskSwitchContext+0xb4>)
 800a60e:	4413      	add	r3, r2
 800a610:	60bb      	str	r3, [r7, #8]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	605a      	str	r2, [r3, #4]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	3308      	adds	r3, #8
 800a624:	429a      	cmp	r2, r3
 800a626:	d104      	bne.n	800a632 <vTaskSwitchContext+0x8a>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	605a      	str	r2, [r3, #4]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	4a09      	ldr	r2, [pc, #36]	; (800a660 <vTaskSwitchContext+0xb8>)
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	4a06      	ldr	r2, [pc, #24]	; (800a658 <vTaskSwitchContext+0xb0>)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6013      	str	r3, [r2, #0]
}
 800a642:	bf00      	nop
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20001914 	.word	0x20001914
 800a654:	20001900 	.word	0x20001900
 800a658:	200018f4 	.word	0x200018f4
 800a65c:	2000141c 	.word	0x2000141c
 800a660:	20001418 	.word	0x20001418

0800a664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <vTaskPlaceOnEventList+0x44>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3318      	adds	r3, #24
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe fb99 	bl	8008dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a698:	2101      	movs	r1, #1
 800a69a:	6838      	ldr	r0, [r7, #0]
 800a69c:	f000 fb7a 	bl	800ad94 <prvAddCurrentTaskToDelayedList>
}
 800a6a0:	bf00      	nop
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20001418 	.word	0x20001418

0800a6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	617b      	str	r3, [r7, #20]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d4:	4b0a      	ldr	r3, [pc, #40]	; (800a700 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3318      	adds	r3, #24
 800a6da:	4619      	mov	r1, r3
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7fe fb50 	bl	8008d82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	68b8      	ldr	r0, [r7, #8]
 800a6f2:	f000 fb4f 	bl	800ad94 <prvAddCurrentTaskToDelayedList>
	}
 800a6f6:	bf00      	nop
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20001418 	.word	0x20001418

0800a704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60fb      	str	r3, [r7, #12]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3318      	adds	r3, #24
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fb81 	bl	8008e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a73a:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <xTaskRemoveFromEventList+0xb0>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d11d      	bne.n	800a77e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	3304      	adds	r3, #4
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fb78 	bl	8008e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a750:	4b19      	ldr	r3, [pc, #100]	; (800a7b8 <xTaskRemoveFromEventList+0xb4>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	d903      	bls.n	800a760 <xTaskRemoveFromEventList+0x5c>
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <xTaskRemoveFromEventList+0xb4>)
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4a13      	ldr	r2, [pc, #76]	; (800a7bc <xTaskRemoveFromEventList+0xb8>)
 800a76e:	441a      	add	r2, r3
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	3304      	adds	r3, #4
 800a774:	4619      	mov	r1, r3
 800a776:	4610      	mov	r0, r2
 800a778:	f7fe fb03 	bl	8008d82 <vListInsertEnd>
 800a77c:	e005      	b.n	800a78a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	3318      	adds	r3, #24
 800a782:	4619      	mov	r1, r3
 800a784:	480e      	ldr	r0, [pc, #56]	; (800a7c0 <xTaskRemoveFromEventList+0xbc>)
 800a786:	f7fe fafc 	bl	8008d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <xTaskRemoveFromEventList+0xc0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	429a      	cmp	r2, r3
 800a796:	d905      	bls.n	800a7a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a798:	2301      	movs	r3, #1
 800a79a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <xTaskRemoveFromEventList+0xc4>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e001      	b.n	800a7a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7a8:	697b      	ldr	r3, [r7, #20]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20001914 	.word	0x20001914
 800a7b8:	200018f4 	.word	0x200018f4
 800a7bc:	2000141c 	.word	0x2000141c
 800a7c0:	200018ac 	.word	0x200018ac
 800a7c4:	20001418 	.word	0x20001418
 800a7c8:	20001900 	.word	0x20001900

0800a7cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7d4:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <vTaskInternalSetTimeOutState+0x24>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <vTaskInternalSetTimeOutState+0x28>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	605a      	str	r2, [r3, #4]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20001904 	.word	0x20001904
 800a7f4:	200018f0 	.word	0x200018f0

0800a7f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	613b      	str	r3, [r7, #16]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10a      	bne.n	800a83a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	60fb      	str	r3, [r7, #12]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a83a:	f000 ff7b 	bl	800b734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a83e:	4b1d      	ldr	r3, [pc, #116]	; (800a8b4 <xTaskCheckForTimeOut+0xbc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a856:	d102      	bne.n	800a85e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e023      	b.n	800a8a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <xTaskCheckForTimeOut+0xc0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d007      	beq.n	800a87a <xTaskCheckForTimeOut+0x82>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	429a      	cmp	r2, r3
 800a872:	d302      	bcc.n	800a87a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a874:	2301      	movs	r3, #1
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	e015      	b.n	800a8a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	429a      	cmp	r2, r3
 800a882:	d20b      	bcs.n	800a89c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	1ad2      	subs	r2, r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff ff9b 	bl	800a7cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	e004      	b.n	800a8a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8a6:	f000 ff75 	bl	800b794 <vPortExitCritical>

	return xReturn;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3720      	adds	r7, #32
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	200018f0 	.word	0x200018f0
 800a8b8:	20001904 	.word	0x20001904

0800a8bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8c0:	4b03      	ldr	r3, [pc, #12]	; (800a8d0 <vTaskMissedYield+0x14>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
}
 800a8c6:	bf00      	nop
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20001900 	.word	0x20001900

0800a8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8dc:	f000 f852 	bl	800a984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <prvIdleTask+0x28>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d9f9      	bls.n	800a8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <prvIdleTask+0x2c>)
 800a8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8f8:	e7f0      	b.n	800a8dc <prvIdleTask+0x8>
 800a8fa:	bf00      	nop
 800a8fc:	2000141c 	.word	0x2000141c
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a90a:	2300      	movs	r3, #0
 800a90c:	607b      	str	r3, [r7, #4]
 800a90e:	e00c      	b.n	800a92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4a12      	ldr	r2, [pc, #72]	; (800a964 <prvInitialiseTaskLists+0x60>)
 800a91c:	4413      	add	r3, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fa02 	bl	8008d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3301      	adds	r3, #1
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b37      	cmp	r3, #55	; 0x37
 800a92e:	d9ef      	bls.n	800a910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a930:	480d      	ldr	r0, [pc, #52]	; (800a968 <prvInitialiseTaskLists+0x64>)
 800a932:	f7fe f9f9 	bl	8008d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a936:	480d      	ldr	r0, [pc, #52]	; (800a96c <prvInitialiseTaskLists+0x68>)
 800a938:	f7fe f9f6 	bl	8008d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a93c:	480c      	ldr	r0, [pc, #48]	; (800a970 <prvInitialiseTaskLists+0x6c>)
 800a93e:	f7fe f9f3 	bl	8008d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a942:	480c      	ldr	r0, [pc, #48]	; (800a974 <prvInitialiseTaskLists+0x70>)
 800a944:	f7fe f9f0 	bl	8008d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a948:	480b      	ldr	r0, [pc, #44]	; (800a978 <prvInitialiseTaskLists+0x74>)
 800a94a:	f7fe f9ed 	bl	8008d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a94e:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <prvInitialiseTaskLists+0x78>)
 800a950:	4a05      	ldr	r2, [pc, #20]	; (800a968 <prvInitialiseTaskLists+0x64>)
 800a952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <prvInitialiseTaskLists+0x7c>)
 800a956:	4a05      	ldr	r2, [pc, #20]	; (800a96c <prvInitialiseTaskLists+0x68>)
 800a958:	601a      	str	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	2000141c 	.word	0x2000141c
 800a968:	2000187c 	.word	0x2000187c
 800a96c:	20001890 	.word	0x20001890
 800a970:	200018ac 	.word	0x200018ac
 800a974:	200018c0 	.word	0x200018c0
 800a978:	200018d8 	.word	0x200018d8
 800a97c:	200018a4 	.word	0x200018a4
 800a980:	200018a8 	.word	0x200018a8

0800a984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a98a:	e019      	b.n	800a9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a98c:	f000 fed2 	bl	800b734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a990:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <prvCheckTasksWaitingTermination+0x50>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fa4d 	bl	8008e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <prvCheckTasksWaitingTermination+0x54>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <prvCheckTasksWaitingTermination+0x54>)
 800a9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <prvCheckTasksWaitingTermination+0x58>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <prvCheckTasksWaitingTermination+0x58>)
 800a9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9b6:	f000 feed 	bl	800b794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f810 	bl	800a9e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <prvCheckTasksWaitingTermination+0x58>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e1      	bne.n	800a98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9c8:	bf00      	nop
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	200018c0 	.word	0x200018c0
 800a9d8:	200018ec 	.word	0x200018ec
 800a9dc:	200018d4 	.word	0x200018d4

0800a9e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d108      	bne.n	800aa04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 f88a 	bl	800bb10 <vPortFree>
				vPortFree( pxTCB );
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 f887 	bl	800bb10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa02:	e018      	b.n	800aa36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d103      	bne.n	800aa16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 f87e 	bl	800bb10 <vPortFree>
	}
 800aa14:	e00f      	b.n	800aa36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d00a      	beq.n	800aa36 <prvDeleteTCB+0x56>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <prvDeleteTCB+0x54>
	}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa46:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <prvResetNextTaskUnblockTime+0x38>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <prvResetNextTaskUnblockTime+0x3c>)
 800aa52:	f04f 32ff 	mov.w	r2, #4294967295
 800aa56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa58:	e008      	b.n	800aa6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5a:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <prvResetNextTaskUnblockTime+0x38>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a04      	ldr	r2, [pc, #16]	; (800aa7c <prvResetNextTaskUnblockTime+0x3c>)
 800aa6a:	6013      	str	r3, [r2, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	200018a4 	.word	0x200018a4
 800aa7c:	2000190c 	.word	0x2000190c

0800aa80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <xTaskGetSchedulerState+0x34>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	607b      	str	r3, [r7, #4]
 800aa92:	e008      	b.n	800aaa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa94:	4b08      	ldr	r3, [pc, #32]	; (800aab8 <xTaskGetSchedulerState+0x38>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	607b      	str	r3, [r7, #4]
 800aaa0:	e001      	b.n	800aaa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaa6:	687b      	ldr	r3, [r7, #4]
	}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200018f8 	.word	0x200018f8
 800aab8:	20001914 	.word	0x20001914

0800aabc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d051      	beq.n	800ab76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad6:	4b2a      	ldr	r3, [pc, #168]	; (800ab80 <xTaskPriorityInherit+0xc4>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	429a      	cmp	r2, r3
 800aade:	d241      	bcs.n	800ab64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	db06      	blt.n	800aaf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae8:	4b25      	ldr	r3, [pc, #148]	; (800ab80 <xTaskPriorityInherit+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6959      	ldr	r1, [r3, #20]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4a1f      	ldr	r2, [pc, #124]	; (800ab84 <xTaskPriorityInherit+0xc8>)
 800ab08:	4413      	add	r3, r2
 800ab0a:	4299      	cmp	r1, r3
 800ab0c:	d122      	bne.n	800ab54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f992 	bl	8008e3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab18:	4b19      	ldr	r3, [pc, #100]	; (800ab80 <xTaskPriorityInherit+0xc4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab26:	4b18      	ldr	r3, [pc, #96]	; (800ab88 <xTaskPriorityInherit+0xcc>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d903      	bls.n	800ab36 <xTaskPriorityInherit+0x7a>
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab32:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <xTaskPriorityInherit+0xcc>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4a10      	ldr	r2, [pc, #64]	; (800ab84 <xTaskPriorityInherit+0xc8>)
 800ab44:	441a      	add	r2, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7fe f918 	bl	8008d82 <vListInsertEnd>
 800ab52:	e004      	b.n	800ab5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <xTaskPriorityInherit+0xc4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	e008      	b.n	800ab76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <xTaskPriorityInherit+0xc4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d201      	bcs.n	800ab76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab72:	2301      	movs	r3, #1
 800ab74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab76:	68fb      	ldr	r3, [r7, #12]
	}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20001418 	.word	0x20001418
 800ab84:	2000141c 	.word	0x2000141c
 800ab88:	200018f4 	.word	0x200018f4

0800ab8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d056      	beq.n	800ac50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aba2:	4b2e      	ldr	r3, [pc, #184]	; (800ac5c <xTaskPriorityDisinherit+0xd0>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d00a      	beq.n	800abc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	60fb      	str	r3, [r7, #12]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	60bb      	str	r3, [r7, #8]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe4:	1e5a      	subs	r2, r3, #1
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d02c      	beq.n	800ac50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d128      	bne.n	800ac50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe f91a 	bl	8008e3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac20:	4b0f      	ldr	r3, [pc, #60]	; (800ac60 <xTaskPriorityDisinherit+0xd4>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d903      	bls.n	800ac30 <xTaskPriorityDisinherit+0xa4>
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	4a0c      	ldr	r2, [pc, #48]	; (800ac60 <xTaskPriorityDisinherit+0xd4>)
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <xTaskPriorityDisinherit+0xd8>)
 800ac3e:	441a      	add	r2, r3
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f7fe f89b 	bl	8008d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac50:	697b      	ldr	r3, [r7, #20]
	}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20001418 	.word	0x20001418
 800ac60:	200018f4 	.word	0x200018f4
 800ac64:	2000141c 	.word	0x2000141c

0800ac68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac76:	2301      	movs	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d06a      	beq.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	60fb      	str	r3, [r7, #12]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d902      	bls.n	800acae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	e002      	b.n	800acb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d04b      	beq.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d146      	bne.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acc8:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69ba      	ldr	r2, [r7, #24]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d10a      	bne.n	800ace8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	60bb      	str	r3, [r7, #8]
}
 800ace4:	bf00      	nop
 800ace6:	e7fe      	b.n	800ace6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	69fa      	ldr	r2, [r7, #28]
 800acf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	db04      	blt.n	800ad06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	6959      	ldr	r1, [r3, #20]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad16:	4413      	add	r3, r2
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d11c      	bne.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe f88b 	bl	8008e3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d903      	bls.n	800ad3a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4a0c      	ldr	r2, [pc, #48]	; (800ad68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3e:	4613      	mov	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4a07      	ldr	r2, [pc, #28]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad48:	441a      	add	r2, r3
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4610      	mov	r0, r2
 800ad52:	f7fe f816 	bl	8008d82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad56:	bf00      	nop
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20001418 	.word	0x20001418
 800ad64:	2000141c 	.word	0x2000141c
 800ad68:	200018f4 	.word	0x200018f4

0800ad6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad7e:	3201      	adds	r2, #1
 800ad80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ad82:	4b03      	ldr	r3, [pc, #12]	; (800ad90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad84:	681b      	ldr	r3, [r3, #0]
	}
 800ad86:	4618      	mov	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	20001418 	.word	0x20001418

0800ad94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad9e:	4b21      	ldr	r3, [pc, #132]	; (800ae24 <prvAddCurrentTaskToDelayedList+0x90>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada4:	4b20      	ldr	r3, [pc, #128]	; (800ae28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3304      	adds	r3, #4
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe f846 	bl	8008e3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb6:	d10a      	bne.n	800adce <prvAddCurrentTaskToDelayedList+0x3a>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adbe:	4b1a      	ldr	r3, [pc, #104]	; (800ae28 <prvAddCurrentTaskToDelayedList+0x94>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3304      	adds	r3, #4
 800adc4:	4619      	mov	r1, r3
 800adc6:	4819      	ldr	r0, [pc, #100]	; (800ae2c <prvAddCurrentTaskToDelayedList+0x98>)
 800adc8:	f7fd ffdb 	bl	8008d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800adcc:	e026      	b.n	800ae1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4413      	add	r3, r2
 800add4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <prvAddCurrentTaskToDelayedList+0x94>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d209      	bcs.n	800adfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ade6:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <prvAddCurrentTaskToDelayedList+0x94>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7fd ffe9 	bl	8008dca <vListInsert>
}
 800adf8:	e010      	b.n	800ae1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adfa:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7fd ffdf 	bl	8008dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d202      	bcs.n	800ae1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae16:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	6013      	str	r3, [r2, #0]
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	200018f0 	.word	0x200018f0
 800ae28:	20001418 	.word	0x20001418
 800ae2c:	200018d8 	.word	0x200018d8
 800ae30:	200018a8 	.word	0x200018a8
 800ae34:	200018a4 	.word	0x200018a4
 800ae38:	2000190c 	.word	0x2000190c

0800ae3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae46:	f000 fb07 	bl	800b458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae4a:	4b1c      	ldr	r3, [pc, #112]	; (800aebc <xTimerCreateTimerTask+0x80>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d021      	beq.n	800ae96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae5a:	1d3a      	adds	r2, r7, #4
 800ae5c:	f107 0108 	add.w	r1, r7, #8
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fd ff45 	bl	8008cf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	9202      	str	r2, [sp, #8]
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	2302      	movs	r3, #2
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	460a      	mov	r2, r1
 800ae7c:	4910      	ldr	r1, [pc, #64]	; (800aec0 <xTimerCreateTimerTask+0x84>)
 800ae7e:	4811      	ldr	r0, [pc, #68]	; (800aec4 <xTimerCreateTimerTask+0x88>)
 800ae80:	f7ff f814 	bl	8009eac <xTaskCreateStatic>
 800ae84:	4603      	mov	r3, r0
 800ae86:	4a10      	ldr	r2, [pc, #64]	; (800aec8 <xTimerCreateTimerTask+0x8c>)
 800ae88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae8a:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <xTimerCreateTimerTask+0x8c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae92:	2301      	movs	r3, #1
 800ae94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	613b      	str	r3, [r7, #16]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aeb2:	697b      	ldr	r3, [r7, #20]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	20001948 	.word	0x20001948
 800aec0:	08011b00 	.word	0x08011b00
 800aec4:	0800b001 	.word	0x0800b001
 800aec8:	2000194c 	.word	0x2000194c

0800aecc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <xTimerGenericCommand+0x2e>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	623b      	str	r3, [r7, #32]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <xTimerGenericCommand+0x98>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d02a      	beq.n	800af58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b05      	cmp	r3, #5
 800af12:	dc18      	bgt.n	800af46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af14:	f7ff fdb4 	bl	800aa80 <xTaskGetSchedulerState>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d109      	bne.n	800af32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <xTimerGenericCommand+0x98>)
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f107 0110 	add.w	r1, r7, #16
 800af26:	2300      	movs	r3, #0
 800af28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2a:	f7fe f959 	bl	80091e0 <xQueueGenericSend>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24
 800af30:	e012      	b.n	800af58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <xTimerGenericCommand+0x98>)
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f107 0110 	add.w	r1, r7, #16
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	f7fe f94f 	bl	80091e0 <xQueueGenericSend>
 800af42:	6278      	str	r0, [r7, #36]	; 0x24
 800af44:	e008      	b.n	800af58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <xTimerGenericCommand+0x98>)
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f107 0110 	add.w	r1, r7, #16
 800af4e:	2300      	movs	r3, #0
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f7fe fa43 	bl	80093dc <xQueueGenericSendFromISR>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3728      	adds	r7, #40	; 0x28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20001948 	.word	0x20001948

0800af68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af72:	4b22      	ldr	r3, [pc, #136]	; (800affc <prvProcessExpiredTimer+0x94>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	3304      	adds	r3, #4
 800af80:	4618      	mov	r0, r3
 800af82:	f7fd ff5b 	bl	8008e3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d022      	beq.n	800afda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	699a      	ldr	r2, [r3, #24]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	18d1      	adds	r1, r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	6978      	ldr	r0, [r7, #20]
 800afa2:	f000 f8d1 	bl	800b148 <prvInsertTimerInActiveList>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01f      	beq.n	800afec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afac:	2300      	movs	r3, #0
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	2300      	movs	r3, #0
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	2100      	movs	r1, #0
 800afb6:	6978      	ldr	r0, [r7, #20]
 800afb8:	f7ff ff88 	bl	800aecc <xTimerGenericCommand>
 800afbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d113      	bne.n	800afec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afe0:	f023 0301 	bic.w	r3, r3, #1
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	6978      	ldr	r0, [r7, #20]
 800aff2:	4798      	blx	r3
}
 800aff4:	bf00      	nop
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20001940 	.word	0x20001940

0800b000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f857 	bl	800b0c0 <prvGetNextExpireTime>
 800b012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	4619      	mov	r1, r3
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f803 	bl	800b024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b01e:	f000 f8d5 	bl	800b1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b022:	e7f1      	b.n	800b008 <prvTimerTask+0x8>

0800b024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b02e:	f7ff f945 	bl	800a2bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f866 	bl	800b108 <prvSampleTimeNow>
 800b03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d130      	bne.n	800b0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d806      	bhi.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b052:	f7ff f941 	bl	800a2d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff ff85 	bl	800af68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b05e:	e024      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d008      	beq.n	800b078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b066:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <prvProcessTimerOrBlockTask+0x90>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x50>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <prvProcessTimerOrBlockTask+0x52>
 800b074:	2300      	movs	r3, #0
 800b076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b078:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <prvProcessTimerOrBlockTask+0x94>)
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	4619      	mov	r1, r3
 800b086:	f7fe fedd 	bl	8009e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b08a:	f7ff f925 	bl	800a2d8 <xTaskResumeAll>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <prvProcessTimerOrBlockTask+0x98>)
 800b096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	f3bf 8f6f 	isb	sy
}
 800b0a4:	e001      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0a6:	f7ff f917 	bl	800a2d8 <xTaskResumeAll>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001944 	.word	0x20001944
 800b0b8:	20001948 	.word	0x20001948
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <prvGetNextExpireTime+0x44>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <prvGetNextExpireTime+0x16>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	e000      	b.n	800b0d8 <prvGetNextExpireTime+0x18>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d105      	bne.n	800b0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <prvGetNextExpireTime+0x44>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e001      	b.n	800b0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20001940 	.word	0x20001940

0800b108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b110:	f7ff f980 	bl	800a414 <xTaskGetTickCount>
 800b114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <prvSampleTimeNow+0x3c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d205      	bcs.n	800b12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b120:	f000 f936 	bl	800b390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	e002      	b.n	800b132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b132:	4a04      	ldr	r2, [pc, #16]	; (800b144 <prvSampleTimeNow+0x3c>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b138:	68fb      	ldr	r3, [r7, #12]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20001950 	.word	0x20001950

0800b148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d812      	bhi.n	800b194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d302      	bcc.n	800b182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b17c:	2301      	movs	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e01b      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <prvInsertTimerInActiveList+0x7c>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3304      	adds	r3, #4
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	f7fd fe1c 	bl	8008dca <vListInsert>
 800b192:	e012      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d206      	bcs.n	800b1aa <prvInsertTimerInActiveList+0x62>
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d302      	bcc.n	800b1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e007      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1aa:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <prvInsertTimerInActiveList+0x80>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7fd fe08 	bl	8008dca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20001944 	.word	0x20001944
 800b1c8:	20001940 	.word	0x20001940

0800b1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08e      	sub	sp, #56	; 0x38
 800b1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1d2:	e0ca      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da18      	bge.n	800b20c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	3304      	adds	r3, #4
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	61fb      	str	r3, [r7, #28]
}
 800b1f8:	bf00      	nop
 800b1fa:	e7fe      	b.n	800b1fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b202:	6850      	ldr	r0, [r2, #4]
 800b204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b206:	6892      	ldr	r2, [r2, #8]
 800b208:	4611      	mov	r1, r2
 800b20a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f2c0 80aa 	blt.w	800b368 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	3304      	adds	r3, #4
 800b224:	4618      	mov	r0, r3
 800b226:	f7fd fe09 	bl	8008e3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b22a:	463b      	mov	r3, r7
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff ff6b 	bl	800b108 <prvSampleTimeNow>
 800b232:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b09      	cmp	r3, #9
 800b238:	f200 8097 	bhi.w	800b36a <prvProcessReceivedCommands+0x19e>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <prvProcessReceivedCommands+0x78>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b26d 	.word	0x0800b26d
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b26d 	.word	0x0800b26d
 800b250:	0800b2e1 	.word	0x0800b2e1
 800b254:	0800b2f5 	.word	0x0800b2f5
 800b258:	0800b33f 	.word	0x0800b33f
 800b25c:	0800b26d 	.word	0x0800b26d
 800b260:	0800b26d 	.word	0x0800b26d
 800b264:	0800b2e1 	.word	0x0800b2e1
 800b268:	0800b2f5 	.word	0x0800b2f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	18d1      	adds	r1, r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28c:	f7ff ff5c 	bl	800b148 <prvInsertTimerInActiveList>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d069      	beq.n	800b36a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d05e      	beq.n	800b36a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	441a      	add	r2, r3
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2be:	f7ff fe05 	bl	800aecc <xTimerGenericCommand>
 800b2c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d14f      	bne.n	800b36a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	61bb      	str	r3, [r7, #24]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2f2:	e03a      	b.n	800b36a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	617b      	str	r3, [r7, #20]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	18d1      	adds	r1, r2, r3
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b338:	f7ff ff06 	bl	800b148 <prvInsertTimerInActiveList>
					break;
 800b33c:	e015      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b34e:	f000 fbdf 	bl	800bb10 <vPortFree>
 800b352:	e00a      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b366:	e000      	b.n	800b36a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b36a:	4b08      	ldr	r3, [pc, #32]	; (800b38c <prvProcessReceivedCommands+0x1c0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	1d39      	adds	r1, r7, #4
 800b370:	2200      	movs	r2, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe f95a 	bl	800962c <xQueueReceive>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f47f af2a 	bne.w	800b1d4 <prvProcessReceivedCommands+0x8>
	}
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	3730      	adds	r7, #48	; 0x30
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20001948 	.word	0x20001948

0800b390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b396:	e048      	b.n	800b42a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b398:	4b2d      	ldr	r3, [pc, #180]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a2:	4b2b      	ldr	r3, [pc, #172]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fd fd43 	bl	8008e3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d02e      	beq.n	800b42a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d90e      	bls.n	800b3fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f7fd fce8 	bl	8008dca <vListInsert>
 800b3fa:	e016      	b.n	800b42a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	2100      	movs	r1, #0
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff fd60 	bl	800aecc <xTimerGenericCommand>
 800b40c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10a      	bne.n	800b42a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	603b      	str	r3, [r7, #0]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b42a:	4b09      	ldr	r3, [pc, #36]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1b1      	bne.n	800b398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b43a:	4b06      	ldr	r3, [pc, #24]	; (800b454 <prvSwitchTimerLists+0xc4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a04      	ldr	r2, [pc, #16]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b440:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b442:	4a04      	ldr	r2, [pc, #16]	; (800b454 <prvSwitchTimerLists+0xc4>)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	6013      	str	r3, [r2, #0]
}
 800b448:	bf00      	nop
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20001940 	.word	0x20001940
 800b454:	20001944 	.word	0x20001944

0800b458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b45e:	f000 f969 	bl	800b734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d120      	bne.n	800b4ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b46a:	4814      	ldr	r0, [pc, #80]	; (800b4bc <prvCheckForValidListAndQueue+0x64>)
 800b46c:	f7fd fc5c 	bl	8008d28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b470:	4813      	ldr	r0, [pc, #76]	; (800b4c0 <prvCheckForValidListAndQueue+0x68>)
 800b472:	f7fd fc59 	bl	8008d28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b476:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <prvCheckForValidListAndQueue+0x6c>)
 800b478:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <prvCheckForValidListAndQueue+0x64>)
 800b47a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b47c:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <prvCheckForValidListAndQueue+0x70>)
 800b47e:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <prvCheckForValidListAndQueue+0x68>)
 800b480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b482:	2300      	movs	r3, #0
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <prvCheckForValidListAndQueue+0x74>)
 800b488:	4a11      	ldr	r2, [pc, #68]	; (800b4d0 <prvCheckForValidListAndQueue+0x78>)
 800b48a:	2110      	movs	r1, #16
 800b48c:	200a      	movs	r0, #10
 800b48e:	f7fd fd67 	bl	8008f60 <xQueueGenericCreateStatic>
 800b492:	4603      	mov	r3, r0
 800b494:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b496:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	490b      	ldr	r1, [pc, #44]	; (800b4d4 <prvCheckForValidListAndQueue+0x7c>)
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fc78 	bl	8009d9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4ac:	f000 f972 	bl	800b794 <vPortExitCritical>
}
 800b4b0:	bf00      	nop
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001948 	.word	0x20001948
 800b4bc:	20001918 	.word	0x20001918
 800b4c0:	2000192c 	.word	0x2000192c
 800b4c4:	20001940 	.word	0x20001940
 800b4c8:	20001944 	.word	0x20001944
 800b4cc:	200019f4 	.word	0x200019f4
 800b4d0:	20001954 	.word	0x20001954
 800b4d4:	08011b08 	.word	0x08011b08

0800b4d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3b04      	subs	r3, #4
 800b4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f023 0201 	bic.w	r2, r3, #1
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3b04      	subs	r3, #4
 800b506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b508:	4a0c      	ldr	r2, [pc, #48]	; (800b53c <pxPortInitialiseStack+0x64>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b14      	subs	r3, #20
 800b512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3b04      	subs	r3, #4
 800b51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f06f 0202 	mvn.w	r2, #2
 800b526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3b20      	subs	r3, #32
 800b52c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b52e:	68fb      	ldr	r3, [r7, #12]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	0800b541 	.word	0x0800b541

0800b540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <prvTaskExitError+0x54>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b552:	d00a      	beq.n	800b56a <prvTaskExitError+0x2a>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	60fb      	str	r3, [r7, #12]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <prvTaskExitError+0x28>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	60bb      	str	r3, [r7, #8]
}
 800b57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b57e:	bf00      	nop
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d0fc      	beq.n	800b580 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b586:	bf00      	nop
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	2000001c 	.word	0x2000001c
	...

0800b5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5a0:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <pxCurrentTCBConst2>)
 800b5a2:	6819      	ldr	r1, [r3, #0]
 800b5a4:	6808      	ldr	r0, [r1, #0]
 800b5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5aa:	f380 8809 	msr	PSP, r0
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f04f 0000 	mov.w	r0, #0
 800b5b6:	f380 8811 	msr	BASEPRI, r0
 800b5ba:	4770      	bx	lr
 800b5bc:	f3af 8000 	nop.w

0800b5c0 <pxCurrentTCBConst2>:
 800b5c0:	20001418 	.word	0x20001418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop

0800b5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5c8:	4808      	ldr	r0, [pc, #32]	; (800b5ec <prvPortStartFirstTask+0x24>)
 800b5ca:	6800      	ldr	r0, [r0, #0]
 800b5cc:	6800      	ldr	r0, [r0, #0]
 800b5ce:	f380 8808 	msr	MSP, r0
 800b5d2:	f04f 0000 	mov.w	r0, #0
 800b5d6:	f380 8814 	msr	CONTROL, r0
 800b5da:	b662      	cpsie	i
 800b5dc:	b661      	cpsie	f
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	df00      	svc	0
 800b5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5ea:	bf00      	nop
 800b5ec:	e000ed08 	.word	0xe000ed08

0800b5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5f6:	4b46      	ldr	r3, [pc, #280]	; (800b710 <xPortStartScheduler+0x120>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a46      	ldr	r2, [pc, #280]	; (800b714 <xPortStartScheduler+0x124>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d10a      	bne.n	800b616 <xPortStartScheduler+0x26>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	613b      	str	r3, [r7, #16]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b616:	4b3e      	ldr	r3, [pc, #248]	; (800b710 <xPortStartScheduler+0x120>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a3f      	ldr	r2, [pc, #252]	; (800b718 <xPortStartScheduler+0x128>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d10a      	bne.n	800b636 <xPortStartScheduler+0x46>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	60fb      	str	r3, [r7, #12]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b636:	4b39      	ldr	r3, [pc, #228]	; (800b71c <xPortStartScheduler+0x12c>)
 800b638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	22ff      	movs	r2, #255	; 0xff
 800b646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	4b31      	ldr	r3, [pc, #196]	; (800b720 <xPortStartScheduler+0x130>)
 800b65c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b65e:	4b31      	ldr	r3, [pc, #196]	; (800b724 <xPortStartScheduler+0x134>)
 800b660:	2207      	movs	r2, #7
 800b662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b664:	e009      	b.n	800b67a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b666:	4b2f      	ldr	r3, [pc, #188]	; (800b724 <xPortStartScheduler+0x134>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4a2d      	ldr	r2, [pc, #180]	; (800b724 <xPortStartScheduler+0x134>)
 800b66e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b670:	78fb      	ldrb	r3, [r7, #3]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b682:	2b80      	cmp	r3, #128	; 0x80
 800b684:	d0ef      	beq.n	800b666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b686:	4b27      	ldr	r3, [pc, #156]	; (800b724 <xPortStartScheduler+0x134>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1c3 0307 	rsb	r3, r3, #7
 800b68e:	2b04      	cmp	r3, #4
 800b690:	d00a      	beq.n	800b6a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	60bb      	str	r3, [r7, #8]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <xPortStartScheduler+0x134>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <xPortStartScheduler+0x134>)
 800b6b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6b2:	4b1c      	ldr	r3, [pc, #112]	; (800b724 <xPortStartScheduler+0x134>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ba:	4a1a      	ldr	r2, [pc, #104]	; (800b724 <xPortStartScheduler+0x134>)
 800b6bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6c6:	4b18      	ldr	r3, [pc, #96]	; (800b728 <xPortStartScheduler+0x138>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <xPortStartScheduler+0x138>)
 800b6cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6d2:	4b15      	ldr	r3, [pc, #84]	; (800b728 <xPortStartScheduler+0x138>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a14      	ldr	r2, [pc, #80]	; (800b728 <xPortStartScheduler+0x138>)
 800b6d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6de:	f000 f8dd 	bl	800b89c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6e2:	4b12      	ldr	r3, [pc, #72]	; (800b72c <xPortStartScheduler+0x13c>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6e8:	f000 f8fc 	bl	800b8e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6ec:	4b10      	ldr	r3, [pc, #64]	; (800b730 <xPortStartScheduler+0x140>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a0f      	ldr	r2, [pc, #60]	; (800b730 <xPortStartScheduler+0x140>)
 800b6f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6f8:	f7ff ff66 	bl	800b5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6fc:	f7fe ff54 	bl	800a5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b700:	f7ff ff1e 	bl	800b540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	e000ed00 	.word	0xe000ed00
 800b714:	410fc271 	.word	0x410fc271
 800b718:	410fc270 	.word	0x410fc270
 800b71c:	e000e400 	.word	0xe000e400
 800b720:	20001a44 	.word	0x20001a44
 800b724:	20001a48 	.word	0x20001a48
 800b728:	e000ed20 	.word	0xe000ed20
 800b72c:	2000001c 	.word	0x2000001c
 800b730:	e000ef34 	.word	0xe000ef34

0800b734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	607b      	str	r3, [r7, #4]
}
 800b74c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <vPortEnterCritical+0x58>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a0d      	ldr	r2, [pc, #52]	; (800b78c <vPortEnterCritical+0x58>)
 800b756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b758:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <vPortEnterCritical+0x58>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d10f      	bne.n	800b780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b760:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <vPortEnterCritical+0x5c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00a      	beq.n	800b780 <vPortEnterCritical+0x4c>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	603b      	str	r3, [r7, #0]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <vPortEnterCritical+0x4a>
	}
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	2000001c 	.word	0x2000001c
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b79a:	4b12      	ldr	r3, [pc, #72]	; (800b7e4 <vPortExitCritical+0x50>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <vPortExitCritical+0x24>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	607b      	str	r3, [r7, #4]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <vPortExitCritical+0x50>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	4a09      	ldr	r2, [pc, #36]	; (800b7e4 <vPortExitCritical+0x50>)
 800b7c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7c2:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <vPortExitCritical+0x50>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d105      	bne.n	800b7d6 <vPortExitCritical+0x42>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	f383 8811 	msr	BASEPRI, r3
}
 800b7d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	2000001c 	.word	0x2000001c
	...

0800b7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7f0:	f3ef 8009 	mrs	r0, PSP
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4b15      	ldr	r3, [pc, #84]	; (800b850 <pxCurrentTCBConst>)
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	f01e 0f10 	tst.w	lr, #16
 800b800:	bf08      	it	eq
 800b802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80a:	6010      	str	r0, [r2, #0]
 800b80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b810:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b814:	f380 8811 	msr	BASEPRI, r0
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f7fe fec2 	bl	800a5a8 <vTaskSwitchContext>
 800b824:	f04f 0000 	mov.w	r0, #0
 800b828:	f380 8811 	msr	BASEPRI, r0
 800b82c:	bc09      	pop	{r0, r3}
 800b82e:	6819      	ldr	r1, [r3, #0]
 800b830:	6808      	ldr	r0, [r1, #0]
 800b832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b836:	f01e 0f10 	tst.w	lr, #16
 800b83a:	bf08      	it	eq
 800b83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b840:	f380 8809 	msr	PSP, r0
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w

0800b850 <pxCurrentTCBConst>:
 800b850:	20001418 	.word	0x20001418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop

0800b858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	607b      	str	r3, [r7, #4]
}
 800b870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b872:	f7fe fddf 	bl	800a434 <xTaskIncrementTick>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <xPortSysTickHandler+0x40>)
 800b87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	2300      	movs	r3, #0
 800b886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	f383 8811 	msr	BASEPRI, r3
}
 800b88e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8a0:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <vPortSetupTimerInterrupt+0x34>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <vPortSetupTimerInterrupt+0x38>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <vPortSetupTimerInterrupt+0x3c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <vPortSetupTimerInterrupt+0x40>)
 800b8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b6:	099b      	lsrs	r3, r3, #6
 800b8b8:	4a09      	ldr	r2, [pc, #36]	; (800b8e0 <vPortSetupTimerInterrupt+0x44>)
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8be:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <vPortSetupTimerInterrupt+0x34>)
 800b8c0:	2207      	movs	r2, #7
 800b8c2:	601a      	str	r2, [r3, #0]
}
 800b8c4:	bf00      	nop
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	e000e010 	.word	0xe000e010
 800b8d4:	e000e018 	.word	0xe000e018
 800b8d8:	20000010 	.word	0x20000010
 800b8dc:	10624dd3 	.word	0x10624dd3
 800b8e0:	e000e014 	.word	0xe000e014

0800b8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8f4 <vPortEnableVFP+0x10>
 800b8e8:	6801      	ldr	r1, [r0, #0]
 800b8ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8ee:	6001      	str	r1, [r0, #0]
 800b8f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8f2:	bf00      	nop
 800b8f4:	e000ed88 	.word	0xe000ed88

0800b8f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8fe:	f3ef 8305 	mrs	r3, IPSR
 800b902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b0f      	cmp	r3, #15
 800b908:	d914      	bls.n	800b934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b90a:	4a17      	ldr	r2, [pc, #92]	; (800b968 <vPortValidateInterruptPriority+0x70>)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b914:	4b15      	ldr	r3, [pc, #84]	; (800b96c <vPortValidateInterruptPriority+0x74>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	7afa      	ldrb	r2, [r7, #11]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d20a      	bcs.n	800b934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	607b      	str	r3, [r7, #4]
}
 800b930:	bf00      	nop
 800b932:	e7fe      	b.n	800b932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b934:	4b0e      	ldr	r3, [pc, #56]	; (800b970 <vPortValidateInterruptPriority+0x78>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b93c:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <vPortValidateInterruptPriority+0x7c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	429a      	cmp	r2, r3
 800b942:	d90a      	bls.n	800b95a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	603b      	str	r3, [r7, #0]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <vPortValidateInterruptPriority+0x60>
	}
 800b95a:	bf00      	nop
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	e000e3f0 	.word	0xe000e3f0
 800b96c:	20001a44 	.word	0x20001a44
 800b970:	e000ed0c 	.word	0xe000ed0c
 800b974:	20001a48 	.word	0x20001a48

0800b978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b08a      	sub	sp, #40	; 0x28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b984:	f7fe fc9a 	bl	800a2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b988:	4b5b      	ldr	r3, [pc, #364]	; (800baf8 <pvPortMalloc+0x180>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b990:	f000 f920 	bl	800bbd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b994:	4b59      	ldr	r3, [pc, #356]	; (800bafc <pvPortMalloc+0x184>)
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4013      	ands	r3, r2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f040 8093 	bne.w	800bac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01d      	beq.n	800b9e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b9a8:	2208      	movs	r2, #8
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f003 0307 	and.w	r3, r3, #7
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d014      	beq.n	800b9e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f023 0307 	bic.w	r3, r3, #7
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	617b      	str	r3, [r7, #20]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d06e      	beq.n	800bac8 <pvPortMalloc+0x150>
 800b9ea:	4b45      	ldr	r3, [pc, #276]	; (800bb00 <pvPortMalloc+0x188>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d869      	bhi.n	800bac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9f4:	4b43      	ldr	r3, [pc, #268]	; (800bb04 <pvPortMalloc+0x18c>)
 800b9f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9f8:	4b42      	ldr	r3, [pc, #264]	; (800bb04 <pvPortMalloc+0x18c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9fe:	e004      	b.n	800ba0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d903      	bls.n	800ba1c <pvPortMalloc+0xa4>
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1f1      	bne.n	800ba00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba1c:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <pvPortMalloc+0x180>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d050      	beq.n	800bac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2208      	movs	r2, #8
 800ba2c:	4413      	add	r3, r2
 800ba2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	2308      	movs	r3, #8
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d91f      	bls.n	800ba88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	f003 0307 	and.w	r3, r3, #7
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <pvPortMalloc+0xf8>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	613b      	str	r3, [r7, #16]
}
 800ba6c:	bf00      	nop
 800ba6e:	e7fe      	b.n	800ba6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba82:	69b8      	ldr	r0, [r7, #24]
 800ba84:	f000 f908 	bl	800bc98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba88:	4b1d      	ldr	r3, [pc, #116]	; (800bb00 <pvPortMalloc+0x188>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	4a1b      	ldr	r2, [pc, #108]	; (800bb00 <pvPortMalloc+0x188>)
 800ba94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <pvPortMalloc+0x188>)
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <pvPortMalloc+0x190>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d203      	bcs.n	800baaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800baa2:	4b17      	ldr	r3, [pc, #92]	; (800bb00 <pvPortMalloc+0x188>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a18      	ldr	r2, [pc, #96]	; (800bb08 <pvPortMalloc+0x190>)
 800baa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	4b13      	ldr	r3, [pc, #76]	; (800bafc <pvPortMalloc+0x184>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	431a      	orrs	r2, r3
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <pvPortMalloc+0x194>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <pvPortMalloc+0x194>)
 800bac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bac8:	f7fe fc06 	bl	800a2d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	f003 0307 	and.w	r3, r3, #7
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <pvPortMalloc+0x174>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	60fb      	str	r3, [r7, #12]
}
 800bae8:	bf00      	nop
 800baea:	e7fe      	b.n	800baea <pvPortMalloc+0x172>
	return pvReturn;
 800baec:	69fb      	ldr	r3, [r7, #28]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3728      	adds	r7, #40	; 0x28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20006874 	.word	0x20006874
 800bafc:	20006888 	.word	0x20006888
 800bb00:	20006878 	.word	0x20006878
 800bb04:	2000686c 	.word	0x2000686c
 800bb08:	2000687c 	.word	0x2000687c
 800bb0c:	20006880 	.word	0x20006880

0800bb10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d04d      	beq.n	800bbbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb22:	2308      	movs	r3, #8
 800bb24:	425b      	negs	r3, r3
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4413      	add	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	4b24      	ldr	r3, [pc, #144]	; (800bbc8 <vPortFree+0xb8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4013      	ands	r3, r2
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10a      	bne.n	800bb54 <vPortFree+0x44>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	60fb      	str	r3, [r7, #12]
}
 800bb50:	bf00      	nop
 800bb52:	e7fe      	b.n	800bb52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00a      	beq.n	800bb72 <vPortFree+0x62>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60bb      	str	r3, [r7, #8]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	4b14      	ldr	r3, [pc, #80]	; (800bbc8 <vPortFree+0xb8>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01e      	beq.n	800bbbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11a      	bne.n	800bbbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <vPortFree+0xb8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	43db      	mvns	r3, r3
 800bb92:	401a      	ands	r2, r3
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb98:	f7fe fb90 	bl	800a2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <vPortFree+0xbc>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	4a09      	ldr	r2, [pc, #36]	; (800bbcc <vPortFree+0xbc>)
 800bba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbaa:	6938      	ldr	r0, [r7, #16]
 800bbac:	f000 f874 	bl	800bc98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <vPortFree+0xc0>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	4a06      	ldr	r2, [pc, #24]	; (800bbd0 <vPortFree+0xc0>)
 800bbb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbba:	f7fe fb8d 	bl	800a2d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20006888 	.word	0x20006888
 800bbcc:	20006878 	.word	0x20006878
 800bbd0:	20006884 	.word	0x20006884

0800bbd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbda:	f644 6320 	movw	r3, #20000	; 0x4e20
 800bbde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbe0:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <prvHeapInit+0xac>)
 800bbe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3307      	adds	r3, #7
 800bbf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	4a1f      	ldr	r2, [pc, #124]	; (800bc80 <prvHeapInit+0xac>)
 800bc04:	4413      	add	r3, r2
 800bc06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc0c:	4a1d      	ldr	r2, [pc, #116]	; (800bc84 <prvHeapInit+0xb0>)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <prvHeapInit+0xb0>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc20:	2208      	movs	r2, #8
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4a15      	ldr	r2, [pc, #84]	; (800bc88 <prvHeapInit+0xb4>)
 800bc34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc36:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <prvHeapInit+0xb4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc3e:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <prvHeapInit+0xb4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	1ad2      	subs	r2, r2, r3
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <prvHeapInit+0xb4>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4a0a      	ldr	r2, [pc, #40]	; (800bc8c <prvHeapInit+0xb8>)
 800bc62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	4a09      	ldr	r2, [pc, #36]	; (800bc90 <prvHeapInit+0xbc>)
 800bc6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc6c:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <prvHeapInit+0xc0>)
 800bc6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc72:	601a      	str	r2, [r3, #0]
}
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20001a4c 	.word	0x20001a4c
 800bc84:	2000686c 	.word	0x2000686c
 800bc88:	20006874 	.word	0x20006874
 800bc8c:	2000687c 	.word	0x2000687c
 800bc90:	20006878 	.word	0x20006878
 800bc94:	20006888 	.word	0x20006888

0800bc98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bca0:	4b28      	ldr	r3, [pc, #160]	; (800bd44 <prvInsertBlockIntoFreeList+0xac>)
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e002      	b.n	800bcac <prvInsertBlockIntoFreeList+0x14>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d8f7      	bhi.n	800bca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d108      	bne.n	800bcda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	441a      	add	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	441a      	add	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d118      	bne.n	800bd20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	4b15      	ldr	r3, [pc, #84]	; (800bd48 <prvInsertBlockIntoFreeList+0xb0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d00d      	beq.n	800bd16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	441a      	add	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e008      	b.n	800bd28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd16:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <prvInsertBlockIntoFreeList+0xb0>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e003      	b.n	800bd28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d002      	beq.n	800bd36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2000686c 	.word	0x2000686c
 800bd48:	20006874 	.word	0x20006874

0800bd4c <__errno>:
 800bd4c:	4b01      	ldr	r3, [pc, #4]	; (800bd54 <__errno+0x8>)
 800bd4e:	6818      	ldr	r0, [r3, #0]
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	20000020 	.word	0x20000020

0800bd58 <__libc_init_array>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	4d0d      	ldr	r5, [pc, #52]	; (800bd90 <__libc_init_array+0x38>)
 800bd5c:	4c0d      	ldr	r4, [pc, #52]	; (800bd94 <__libc_init_array+0x3c>)
 800bd5e:	1b64      	subs	r4, r4, r5
 800bd60:	10a4      	asrs	r4, r4, #2
 800bd62:	2600      	movs	r6, #0
 800bd64:	42a6      	cmp	r6, r4
 800bd66:	d109      	bne.n	800bd7c <__libc_init_array+0x24>
 800bd68:	4d0b      	ldr	r5, [pc, #44]	; (800bd98 <__libc_init_array+0x40>)
 800bd6a:	4c0c      	ldr	r4, [pc, #48]	; (800bd9c <__libc_init_array+0x44>)
 800bd6c:	f005 fe28 	bl	80119c0 <_init>
 800bd70:	1b64      	subs	r4, r4, r5
 800bd72:	10a4      	asrs	r4, r4, #2
 800bd74:	2600      	movs	r6, #0
 800bd76:	42a6      	cmp	r6, r4
 800bd78:	d105      	bne.n	800bd86 <__libc_init_array+0x2e>
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd80:	4798      	blx	r3
 800bd82:	3601      	adds	r6, #1
 800bd84:	e7ee      	b.n	800bd64 <__libc_init_array+0xc>
 800bd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8a:	4798      	blx	r3
 800bd8c:	3601      	adds	r6, #1
 800bd8e:	e7f2      	b.n	800bd76 <__libc_init_array+0x1e>
 800bd90:	0801223c 	.word	0x0801223c
 800bd94:	0801223c 	.word	0x0801223c
 800bd98:	0801223c 	.word	0x0801223c
 800bd9c:	08012240 	.word	0x08012240

0800bda0 <memcpy>:
 800bda0:	440a      	add	r2, r1
 800bda2:	4291      	cmp	r1, r2
 800bda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bda8:	d100      	bne.n	800bdac <memcpy+0xc>
 800bdaa:	4770      	bx	lr
 800bdac:	b510      	push	{r4, lr}
 800bdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdb6:	4291      	cmp	r1, r2
 800bdb8:	d1f9      	bne.n	800bdae <memcpy+0xe>
 800bdba:	bd10      	pop	{r4, pc}

0800bdbc <memset>:
 800bdbc:	4402      	add	r2, r0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d100      	bne.n	800bdc6 <memset+0xa>
 800bdc4:	4770      	bx	lr
 800bdc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdca:	e7f9      	b.n	800bdc0 <memset+0x4>

0800bdcc <validate_structure>:
 800bdcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdce:	6801      	ldr	r1, [r0, #0]
 800bdd0:	293b      	cmp	r1, #59	; 0x3b
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	d911      	bls.n	800bdfa <validate_structure+0x2e>
 800bdd6:	223c      	movs	r2, #60	; 0x3c
 800bdd8:	4668      	mov	r0, sp
 800bdda:	f002 fb37 	bl	800e44c <div>
 800bdde:	9a01      	ldr	r2, [sp, #4]
 800bde0:	6863      	ldr	r3, [r4, #4]
 800bde2:	9900      	ldr	r1, [sp, #0]
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	440b      	add	r3, r1
 800bde8:	6063      	str	r3, [r4, #4]
 800bdea:	bfbb      	ittet	lt
 800bdec:	323c      	addlt	r2, #60	; 0x3c
 800bdee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bdf2:	6022      	strge	r2, [r4, #0]
 800bdf4:	6022      	strlt	r2, [r4, #0]
 800bdf6:	bfb8      	it	lt
 800bdf8:	6063      	strlt	r3, [r4, #4]
 800bdfa:	6861      	ldr	r1, [r4, #4]
 800bdfc:	293b      	cmp	r1, #59	; 0x3b
 800bdfe:	d911      	bls.n	800be24 <validate_structure+0x58>
 800be00:	223c      	movs	r2, #60	; 0x3c
 800be02:	4668      	mov	r0, sp
 800be04:	f002 fb22 	bl	800e44c <div>
 800be08:	9a01      	ldr	r2, [sp, #4]
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	9900      	ldr	r1, [sp, #0]
 800be0e:	2a00      	cmp	r2, #0
 800be10:	440b      	add	r3, r1
 800be12:	60a3      	str	r3, [r4, #8]
 800be14:	bfbb      	ittet	lt
 800be16:	323c      	addlt	r2, #60	; 0x3c
 800be18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be1c:	6062      	strge	r2, [r4, #4]
 800be1e:	6062      	strlt	r2, [r4, #4]
 800be20:	bfb8      	it	lt
 800be22:	60a3      	strlt	r3, [r4, #8]
 800be24:	68a1      	ldr	r1, [r4, #8]
 800be26:	2917      	cmp	r1, #23
 800be28:	d911      	bls.n	800be4e <validate_structure+0x82>
 800be2a:	2218      	movs	r2, #24
 800be2c:	4668      	mov	r0, sp
 800be2e:	f002 fb0d 	bl	800e44c <div>
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	68e3      	ldr	r3, [r4, #12]
 800be36:	9900      	ldr	r1, [sp, #0]
 800be38:	2a00      	cmp	r2, #0
 800be3a:	440b      	add	r3, r1
 800be3c:	60e3      	str	r3, [r4, #12]
 800be3e:	bfbb      	ittet	lt
 800be40:	3218      	addlt	r2, #24
 800be42:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be46:	60a2      	strge	r2, [r4, #8]
 800be48:	60a2      	strlt	r2, [r4, #8]
 800be4a:	bfb8      	it	lt
 800be4c:	60e3      	strlt	r3, [r4, #12]
 800be4e:	6921      	ldr	r1, [r4, #16]
 800be50:	290b      	cmp	r1, #11
 800be52:	d911      	bls.n	800be78 <validate_structure+0xac>
 800be54:	220c      	movs	r2, #12
 800be56:	4668      	mov	r0, sp
 800be58:	f002 faf8 	bl	800e44c <div>
 800be5c:	9a01      	ldr	r2, [sp, #4]
 800be5e:	6963      	ldr	r3, [r4, #20]
 800be60:	9900      	ldr	r1, [sp, #0]
 800be62:	2a00      	cmp	r2, #0
 800be64:	440b      	add	r3, r1
 800be66:	6163      	str	r3, [r4, #20]
 800be68:	bfbb      	ittet	lt
 800be6a:	320c      	addlt	r2, #12
 800be6c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be70:	6122      	strge	r2, [r4, #16]
 800be72:	6122      	strlt	r2, [r4, #16]
 800be74:	bfb8      	it	lt
 800be76:	6163      	strlt	r3, [r4, #20]
 800be78:	6963      	ldr	r3, [r4, #20]
 800be7a:	0798      	lsls	r0, r3, #30
 800be7c:	d120      	bne.n	800bec0 <validate_structure+0xf4>
 800be7e:	2164      	movs	r1, #100	; 0x64
 800be80:	fb93 f2f1 	sdiv	r2, r3, r1
 800be84:	fb01 3212 	mls	r2, r1, r2, r3
 800be88:	b9e2      	cbnz	r2, 800bec4 <validate_structure+0xf8>
 800be8a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800be8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800be92:	fb93 f1f2 	sdiv	r1, r3, r2
 800be96:	fb02 3311 	mls	r3, r2, r1, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	bf14      	ite	ne
 800be9e:	231c      	movne	r3, #28
 800bea0:	231d      	moveq	r3, #29
 800bea2:	68e2      	ldr	r2, [r4, #12]
 800bea4:	2a00      	cmp	r2, #0
 800bea6:	dc0f      	bgt.n	800bec8 <validate_structure+0xfc>
 800bea8:	4f33      	ldr	r7, [pc, #204]	; (800bf78 <validate_structure+0x1ac>)
 800beaa:	260b      	movs	r6, #11
 800beac:	2064      	movs	r0, #100	; 0x64
 800beae:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800beb2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800beb6:	f1bc 0f00 	cmp.w	ip, #0
 800beba:	dd31      	ble.n	800bf20 <validate_structure+0x154>
 800bebc:	b003      	add	sp, #12
 800bebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec0:	231c      	movs	r3, #28
 800bec2:	e7ee      	b.n	800bea2 <validate_structure+0xd6>
 800bec4:	231d      	movs	r3, #29
 800bec6:	e7ec      	b.n	800bea2 <validate_structure+0xd6>
 800bec8:	4e2b      	ldr	r6, [pc, #172]	; (800bf78 <validate_structure+0x1ac>)
 800beca:	2700      	movs	r7, #0
 800becc:	2064      	movs	r0, #100	; 0x64
 800bece:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bed2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bed6:	2a01      	cmp	r2, #1
 800bed8:	bf14      	ite	ne
 800beda:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800bede:	469c      	moveq	ip, r3
 800bee0:	4561      	cmp	r1, ip
 800bee2:	ddeb      	ble.n	800bebc <validate_structure+0xf0>
 800bee4:	3201      	adds	r2, #1
 800bee6:	eba1 010c 	sub.w	r1, r1, ip
 800beea:	2a0c      	cmp	r2, #12
 800beec:	60e1      	str	r1, [r4, #12]
 800beee:	6122      	str	r2, [r4, #16]
 800bef0:	d1ef      	bne.n	800bed2 <validate_structure+0x106>
 800bef2:	6963      	ldr	r3, [r4, #20]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	0791      	lsls	r1, r2, #30
 800bef8:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800befc:	d137      	bne.n	800bf6e <validate_structure+0x1a2>
 800befe:	fb92 f1f0 	sdiv	r1, r2, r0
 800bf02:	fb00 2211 	mls	r2, r0, r1, r2
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	d133      	bne.n	800bf72 <validate_structure+0x1a6>
 800bf0a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800bf0e:	fb93 f2f5 	sdiv	r2, r3, r5
 800bf12:	fb05 3312 	mls	r3, r5, r2, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bf14      	ite	ne
 800bf1a:	231c      	movne	r3, #28
 800bf1c:	231d      	moveq	r3, #29
 800bf1e:	e7d8      	b.n	800bed2 <validate_structure+0x106>
 800bf20:	6921      	ldr	r1, [r4, #16]
 800bf22:	3901      	subs	r1, #1
 800bf24:	6121      	str	r1, [r4, #16]
 800bf26:	3101      	adds	r1, #1
 800bf28:	d114      	bne.n	800bf54 <validate_structure+0x188>
 800bf2a:	6963      	ldr	r3, [r4, #20]
 800bf2c:	1e5a      	subs	r2, r3, #1
 800bf2e:	0791      	lsls	r1, r2, #30
 800bf30:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800bf34:	d117      	bne.n	800bf66 <validate_structure+0x19a>
 800bf36:	fb92 f1f0 	sdiv	r1, r2, r0
 800bf3a:	fb00 2211 	mls	r2, r0, r1, r2
 800bf3e:	b9a2      	cbnz	r2, 800bf6a <validate_structure+0x19e>
 800bf40:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800bf44:	fb93 f2f5 	sdiv	r2, r3, r5
 800bf48:	fb05 3312 	mls	r3, r5, r2, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bf14      	ite	ne
 800bf50:	231c      	movne	r3, #28
 800bf52:	231d      	moveq	r3, #29
 800bf54:	6922      	ldr	r2, [r4, #16]
 800bf56:	2a01      	cmp	r2, #1
 800bf58:	bf14      	ite	ne
 800bf5a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800bf5e:	461a      	moveq	r2, r3
 800bf60:	4462      	add	r2, ip
 800bf62:	60e2      	str	r2, [r4, #12]
 800bf64:	e7a5      	b.n	800beb2 <validate_structure+0xe6>
 800bf66:	231c      	movs	r3, #28
 800bf68:	e7f4      	b.n	800bf54 <validate_structure+0x188>
 800bf6a:	231d      	movs	r3, #29
 800bf6c:	e7f2      	b.n	800bf54 <validate_structure+0x188>
 800bf6e:	231c      	movs	r3, #28
 800bf70:	e7af      	b.n	800bed2 <validate_structure+0x106>
 800bf72:	231d      	movs	r3, #29
 800bf74:	e7ad      	b.n	800bed2 <validate_structure+0x106>
 800bf76:	bf00      	nop
 800bf78:	08011c80 	.word	0x08011c80

0800bf7c <mktime>:
 800bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	b085      	sub	sp, #20
 800bf82:	4607      	mov	r7, r0
 800bf84:	f003 fca6 	bl	800f8d4 <__gettzinfo>
 800bf88:	4681      	mov	r9, r0
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ff1e 	bl	800bdcc <validate_structure>
 800bf90:	e9d7 4000 	ldrd	r4, r0, [r7]
 800bf94:	233c      	movs	r3, #60	; 0x3c
 800bf96:	fb03 4400 	mla	r4, r3, r0, r4
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	4abc      	ldr	r2, [pc, #752]	; (800c290 <mktime+0x314>)
 800bf9e:	697e      	ldr	r6, [r7, #20]
 800bfa0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bfa4:	fb03 4400 	mla	r4, r3, r0, r4
 800bfa8:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800bfac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bfb0:	3d01      	subs	r5, #1
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	4415      	add	r5, r2
 800bfb6:	dd11      	ble.n	800bfdc <mktime+0x60>
 800bfb8:	07b1      	lsls	r1, r6, #30
 800bfba:	d10f      	bne.n	800bfdc <mktime+0x60>
 800bfbc:	2264      	movs	r2, #100	; 0x64
 800bfbe:	fb96 f3f2 	sdiv	r3, r6, r2
 800bfc2:	fb02 6313 	mls	r3, r2, r3, r6
 800bfc6:	b943      	cbnz	r3, 800bfda <mktime+0x5e>
 800bfc8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800bfcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bfd0:	fb93 f1f2 	sdiv	r1, r3, r2
 800bfd4:	fb02 3311 	mls	r3, r2, r1, r3
 800bfd8:	b903      	cbnz	r3, 800bfdc <mktime+0x60>
 800bfda:	3501      	adds	r5, #1
 800bfdc:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800bfe0:	3310      	adds	r3, #16
 800bfe2:	f644 6220 	movw	r2, #20000	; 0x4e20
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	61fd      	str	r5, [r7, #28]
 800bfea:	f200 815d 	bhi.w	800c2a8 <mktime+0x32c>
 800bfee:	2e46      	cmp	r6, #70	; 0x46
 800bff0:	dd71      	ble.n	800c0d6 <mktime+0x15a>
 800bff2:	2346      	movs	r3, #70	; 0x46
 800bff4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bff8:	2164      	movs	r1, #100	; 0x64
 800bffa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bffe:	079a      	lsls	r2, r3, #30
 800c000:	d163      	bne.n	800c0ca <mktime+0x14e>
 800c002:	fb93 f2f1 	sdiv	r2, r3, r1
 800c006:	fb01 3212 	mls	r2, r1, r2, r3
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d160      	bne.n	800c0d0 <mktime+0x154>
 800c00e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c012:	fb92 fef0 	sdiv	lr, r2, r0
 800c016:	fb00 221e 	mls	r2, r0, lr, r2
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	bf14      	ite	ne
 800c01e:	4662      	movne	r2, ip
 800c020:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c024:	3301      	adds	r3, #1
 800c026:	429e      	cmp	r6, r3
 800c028:	4415      	add	r5, r2
 800c02a:	d1e8      	bne.n	800bffe <mktime+0x82>
 800c02c:	4b99      	ldr	r3, [pc, #612]	; (800c294 <mktime+0x318>)
 800c02e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c032:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c036:	f002 f855 	bl	800e0e4 <__tz_lock>
 800c03a:	f002 f85f 	bl	800e0fc <_tzset_unlocked>
 800c03e:	4b96      	ldr	r3, [pc, #600]	; (800c298 <mktime+0x31c>)
 800c040:	f8d3 b000 	ldr.w	fp, [r3]
 800c044:	f1bb 0f00 	cmp.w	fp, #0
 800c048:	d039      	beq.n	800c0be <mktime+0x142>
 800c04a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c04e:	6978      	ldr	r0, [r7, #20]
 800c050:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c054:	f1bb 0f01 	cmp.w	fp, #1
 800c058:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c05c:	46da      	mov	sl, fp
 800c05e:	bfa8      	it	ge
 800c060:	f04f 0a01 	movge.w	sl, #1
 800c064:	4283      	cmp	r3, r0
 800c066:	d178      	bne.n	800c15a <mktime+0x1de>
 800c068:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c06c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c070:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c074:	1a5b      	subs	r3, r3, r1
 800c076:	9302      	str	r3, [sp, #8]
 800c078:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c07c:	9303      	str	r3, [sp, #12]
 800c07e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c082:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c086:	9301      	str	r3, [sp, #4]
 800c088:	ebb3 0c02 	subs.w	ip, r3, r2
 800c08c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c090:	4564      	cmp	r4, ip
 800c092:	eb78 0300 	sbcs.w	r3, r8, r0
 800c096:	da66      	bge.n	800c166 <mktime+0x1ea>
 800c098:	f8d9 3000 	ldr.w	r3, [r9]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d06f      	beq.n	800c180 <mktime+0x204>
 800c0a0:	9b02      	ldr	r3, [sp, #8]
 800c0a2:	429c      	cmp	r4, r3
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	eb78 0303 	sbcs.w	r3, r8, r3
 800c0aa:	db03      	blt.n	800c0b4 <mktime+0x138>
 800c0ac:	4564      	cmp	r4, ip
 800c0ae:	eb78 0300 	sbcs.w	r3, r8, r0
 800c0b2:	db6b      	blt.n	800c18c <mktime+0x210>
 800c0b4:	f1bb 0f00 	cmp.w	fp, #0
 800c0b8:	f04f 0b00 	mov.w	fp, #0
 800c0bc:	da6b      	bge.n	800c196 <mktime+0x21a>
 800c0be:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c0c2:	190c      	adds	r4, r1, r4
 800c0c4:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c0c8:	e0a9      	b.n	800c21e <mktime+0x2a2>
 800c0ca:	f240 126d 	movw	r2, #365	; 0x16d
 800c0ce:	e7a9      	b.n	800c024 <mktime+0xa8>
 800c0d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c0d4:	e7a6      	b.n	800c024 <mktime+0xa8>
 800c0d6:	d0a9      	beq.n	800c02c <mktime+0xb0>
 800c0d8:	2345      	movs	r3, #69	; 0x45
 800c0da:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c0de:	2164      	movs	r1, #100	; 0x64
 800c0e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c0e4:	e012      	b.n	800c10c <mktime+0x190>
 800c0e6:	bb62      	cbnz	r2, 800c142 <mktime+0x1c6>
 800c0e8:	fb93 f2f1 	sdiv	r2, r3, r1
 800c0ec:	fb01 3212 	mls	r2, r1, r2, r3
 800c0f0:	bb52      	cbnz	r2, 800c148 <mktime+0x1cc>
 800c0f2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c0f6:	fb92 fef0 	sdiv	lr, r2, r0
 800c0fa:	fb00 221e 	mls	r2, r0, lr, r2
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	bf14      	ite	ne
 800c102:	4662      	movne	r2, ip
 800c104:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c108:	1aad      	subs	r5, r5, r2
 800c10a:	3b01      	subs	r3, #1
 800c10c:	429e      	cmp	r6, r3
 800c10e:	f003 0203 	and.w	r2, r3, #3
 800c112:	dbe8      	blt.n	800c0e6 <mktime+0x16a>
 800c114:	b9da      	cbnz	r2, 800c14e <mktime+0x1d2>
 800c116:	2264      	movs	r2, #100	; 0x64
 800c118:	fb96 f3f2 	sdiv	r3, r6, r2
 800c11c:	fb02 6313 	mls	r3, r2, r3, r6
 800c120:	b9c3      	cbnz	r3, 800c154 <mktime+0x1d8>
 800c122:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c126:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c12a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c12e:	fb02 3311 	mls	r3, r2, r1, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	f240 136d 	movw	r3, #365	; 0x16d
 800c138:	bf08      	it	eq
 800c13a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c13e:	1aed      	subs	r5, r5, r3
 800c140:	e774      	b.n	800c02c <mktime+0xb0>
 800c142:	f240 126d 	movw	r2, #365	; 0x16d
 800c146:	e7df      	b.n	800c108 <mktime+0x18c>
 800c148:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c14c:	e7dc      	b.n	800c108 <mktime+0x18c>
 800c14e:	f240 136d 	movw	r3, #365	; 0x16d
 800c152:	e7f4      	b.n	800c13e <mktime+0x1c2>
 800c154:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c158:	e7f1      	b.n	800c13e <mktime+0x1c2>
 800c15a:	f001 ff19 	bl	800df90 <__tzcalc_limits>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d182      	bne.n	800c068 <mktime+0xec>
 800c162:	46d3      	mov	fp, sl
 800c164:	e050      	b.n	800c208 <mktime+0x28c>
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	1a5b      	subs	r3, r3, r1
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c170:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	429c      	cmp	r4, r3
 800c178:	eb78 030e 	sbcs.w	r3, r8, lr
 800c17c:	dbf1      	blt.n	800c162 <mktime+0x1e6>
 800c17e:	e78b      	b.n	800c098 <mktime+0x11c>
 800c180:	9b02      	ldr	r3, [sp, #8]
 800c182:	429c      	cmp	r4, r3
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	eb78 0303 	sbcs.w	r3, r8, r3
 800c18a:	db8f      	blt.n	800c0ac <mktime+0x130>
 800c18c:	f1bb 0f00 	cmp.w	fp, #0
 800c190:	db3e      	blt.n	800c210 <mktime+0x294>
 800c192:	f04f 0b01 	mov.w	fp, #1
 800c196:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c19a:	f1ba 0f01 	cmp.w	sl, #1
 800c19e:	d133      	bne.n	800c208 <mktime+0x28c>
 800c1a0:	f1bb 0f00 	cmp.w	fp, #0
 800c1a4:	d04e      	beq.n	800c244 <mktime+0x2c8>
 800c1a6:	1a52      	subs	r2, r2, r1
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	1914      	adds	r4, r2, r4
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c1ba:	f7ff fe07 	bl	800bdcc <validate_structure>
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	ebb2 020a 	subs.w	r2, r2, sl
 800c1c4:	d020      	beq.n	800c208 <mktime+0x28c>
 800c1c6:	2a01      	cmp	r2, #1
 800c1c8:	dc3e      	bgt.n	800c248 <mktime+0x2cc>
 800c1ca:	1c90      	adds	r0, r2, #2
 800c1cc:	bfd8      	it	le
 800c1ce:	2201      	movle	r2, #1
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	18d3      	adds	r3, r2, r3
 800c1d4:	4415      	add	r5, r2
 800c1d6:	d540      	bpl.n	800c25a <mktime+0x2de>
 800c1d8:	1e73      	subs	r3, r6, #1
 800c1da:	0799      	lsls	r1, r3, #30
 800c1dc:	d137      	bne.n	800c24e <mktime+0x2d2>
 800c1de:	2264      	movs	r2, #100	; 0x64
 800c1e0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1e4:	fb02 3311 	mls	r3, r2, r1, r3
 800c1e8:	bba3      	cbnz	r3, 800c254 <mktime+0x2d8>
 800c1ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c1ee:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c1f2:	fb96 f2f3 	sdiv	r2, r6, r3
 800c1f6:	fb03 6612 	mls	r6, r3, r2, r6
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	f240 136d 	movw	r3, #365	; 0x16d
 800c200:	bf18      	it	ne
 800c202:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c206:	61fb      	str	r3, [r7, #28]
 800c208:	f1bb 0f01 	cmp.w	fp, #1
 800c20c:	f47f af57 	bne.w	800c0be <mktime+0x142>
 800c210:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c214:	190c      	adds	r4, r1, r4
 800c216:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c21a:	f04f 0b01 	mov.w	fp, #1
 800c21e:	f001 ff67 	bl	800e0f0 <__tz_unlock>
 800c222:	3504      	adds	r5, #4
 800c224:	2307      	movs	r3, #7
 800c226:	fb95 f3f3 	sdiv	r3, r5, r3
 800c22a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c22e:	1aed      	subs	r5, r5, r3
 800c230:	bf48      	it	mi
 800c232:	3507      	addmi	r5, #7
 800c234:	f8c7 b020 	str.w	fp, [r7, #32]
 800c238:	61bd      	str	r5, [r7, #24]
 800c23a:	4620      	mov	r0, r4
 800c23c:	4641      	mov	r1, r8
 800c23e:	b005      	add	sp, #20
 800c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c244:	1a8a      	subs	r2, r1, r2
 800c246:	e7af      	b.n	800c1a8 <mktime+0x22c>
 800c248:	f04f 32ff 	mov.w	r2, #4294967295
 800c24c:	e7c0      	b.n	800c1d0 <mktime+0x254>
 800c24e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c252:	e7d8      	b.n	800c206 <mktime+0x28a>
 800c254:	f240 136d 	movw	r3, #365	; 0x16d
 800c258:	e7d5      	b.n	800c206 <mktime+0x28a>
 800c25a:	07b2      	lsls	r2, r6, #30
 800c25c:	d11e      	bne.n	800c29c <mktime+0x320>
 800c25e:	2164      	movs	r1, #100	; 0x64
 800c260:	fb96 f2f1 	sdiv	r2, r6, r1
 800c264:	fb01 6212 	mls	r2, r1, r2, r6
 800c268:	b9da      	cbnz	r2, 800c2a2 <mktime+0x326>
 800c26a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c26e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c272:	fb96 f1f2 	sdiv	r1, r6, r2
 800c276:	fb02 6611 	mls	r6, r2, r1, r6
 800c27a:	2e00      	cmp	r6, #0
 800c27c:	f240 126d 	movw	r2, #365	; 0x16d
 800c280:	bf08      	it	eq
 800c282:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c286:	4293      	cmp	r3, r2
 800c288:	bfa8      	it	ge
 800c28a:	1a9b      	subge	r3, r3, r2
 800c28c:	e7bb      	b.n	800c206 <mktime+0x28a>
 800c28e:	bf00      	nop
 800c290:	08011cb0 	.word	0x08011cb0
 800c294:	00015180 	.word	0x00015180
 800c298:	200068a8 	.word	0x200068a8
 800c29c:	f240 126d 	movw	r2, #365	; 0x16d
 800c2a0:	e7f1      	b.n	800c286 <mktime+0x30a>
 800c2a2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c2a6:	e7ee      	b.n	800c286 <mktime+0x30a>
 800c2a8:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ac:	46a0      	mov	r8, r4
 800c2ae:	e7c4      	b.n	800c23a <mktime+0x2be>

0800c2b0 <__cvt>:
 800c2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	ec55 4b10 	vmov	r4, r5, d0
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	4619      	mov	r1, r3
 800c2be:	462b      	mov	r3, r5
 800c2c0:	bfbb      	ittet	lt
 800c2c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2c6:	461d      	movlt	r5, r3
 800c2c8:	2300      	movge	r3, #0
 800c2ca:	232d      	movlt	r3, #45	; 0x2d
 800c2cc:	700b      	strb	r3, [r1, #0]
 800c2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c2d4:	4691      	mov	r9, r2
 800c2d6:	f023 0820 	bic.w	r8, r3, #32
 800c2da:	bfbc      	itt	lt
 800c2dc:	4622      	movlt	r2, r4
 800c2de:	4614      	movlt	r4, r2
 800c2e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2e4:	d005      	beq.n	800c2f2 <__cvt+0x42>
 800c2e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c2ea:	d100      	bne.n	800c2ee <__cvt+0x3e>
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	2102      	movs	r1, #2
 800c2f0:	e000      	b.n	800c2f4 <__cvt+0x44>
 800c2f2:	2103      	movs	r1, #3
 800c2f4:	ab03      	add	r3, sp, #12
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	ab02      	add	r3, sp, #8
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	ec45 4b10 	vmov	d0, r4, r5
 800c300:	4653      	mov	r3, sl
 800c302:	4632      	mov	r2, r6
 800c304:	f002 f944 	bl	800e590 <_dtoa_r>
 800c308:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c30c:	4607      	mov	r7, r0
 800c30e:	d102      	bne.n	800c316 <__cvt+0x66>
 800c310:	f019 0f01 	tst.w	r9, #1
 800c314:	d022      	beq.n	800c35c <__cvt+0xac>
 800c316:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c31a:	eb07 0906 	add.w	r9, r7, r6
 800c31e:	d110      	bne.n	800c342 <__cvt+0x92>
 800c320:	783b      	ldrb	r3, [r7, #0]
 800c322:	2b30      	cmp	r3, #48	; 0x30
 800c324:	d10a      	bne.n	800c33c <__cvt+0x8c>
 800c326:	2200      	movs	r2, #0
 800c328:	2300      	movs	r3, #0
 800c32a:	4620      	mov	r0, r4
 800c32c:	4629      	mov	r1, r5
 800c32e:	f7f4 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800c332:	b918      	cbnz	r0, 800c33c <__cvt+0x8c>
 800c334:	f1c6 0601 	rsb	r6, r6, #1
 800c338:	f8ca 6000 	str.w	r6, [sl]
 800c33c:	f8da 3000 	ldr.w	r3, [sl]
 800c340:	4499      	add	r9, r3
 800c342:	2200      	movs	r2, #0
 800c344:	2300      	movs	r3, #0
 800c346:	4620      	mov	r0, r4
 800c348:	4629      	mov	r1, r5
 800c34a:	f7f4 fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c34e:	b108      	cbz	r0, 800c354 <__cvt+0xa4>
 800c350:	f8cd 900c 	str.w	r9, [sp, #12]
 800c354:	2230      	movs	r2, #48	; 0x30
 800c356:	9b03      	ldr	r3, [sp, #12]
 800c358:	454b      	cmp	r3, r9
 800c35a:	d307      	bcc.n	800c36c <__cvt+0xbc>
 800c35c:	9b03      	ldr	r3, [sp, #12]
 800c35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c360:	1bdb      	subs	r3, r3, r7
 800c362:	4638      	mov	r0, r7
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	b004      	add	sp, #16
 800c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36c:	1c59      	adds	r1, r3, #1
 800c36e:	9103      	str	r1, [sp, #12]
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	e7f0      	b.n	800c356 <__cvt+0xa6>

0800c374 <__exponent>:
 800c374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c376:	4603      	mov	r3, r0
 800c378:	2900      	cmp	r1, #0
 800c37a:	bfb8      	it	lt
 800c37c:	4249      	neglt	r1, r1
 800c37e:	f803 2b02 	strb.w	r2, [r3], #2
 800c382:	bfb4      	ite	lt
 800c384:	222d      	movlt	r2, #45	; 0x2d
 800c386:	222b      	movge	r2, #43	; 0x2b
 800c388:	2909      	cmp	r1, #9
 800c38a:	7042      	strb	r2, [r0, #1]
 800c38c:	dd2a      	ble.n	800c3e4 <__exponent+0x70>
 800c38e:	f10d 0407 	add.w	r4, sp, #7
 800c392:	46a4      	mov	ip, r4
 800c394:	270a      	movs	r7, #10
 800c396:	46a6      	mov	lr, r4
 800c398:	460a      	mov	r2, r1
 800c39a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c39e:	fb07 1516 	mls	r5, r7, r6, r1
 800c3a2:	3530      	adds	r5, #48	; 0x30
 800c3a4:	2a63      	cmp	r2, #99	; 0x63
 800c3a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	dcf1      	bgt.n	800c396 <__exponent+0x22>
 800c3b2:	3130      	adds	r1, #48	; 0x30
 800c3b4:	f1ae 0502 	sub.w	r5, lr, #2
 800c3b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c3bc:	1c44      	adds	r4, r0, #1
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4561      	cmp	r1, ip
 800c3c2:	d30a      	bcc.n	800c3da <__exponent+0x66>
 800c3c4:	f10d 0209 	add.w	r2, sp, #9
 800c3c8:	eba2 020e 	sub.w	r2, r2, lr
 800c3cc:	4565      	cmp	r5, ip
 800c3ce:	bf88      	it	hi
 800c3d0:	2200      	movhi	r2, #0
 800c3d2:	4413      	add	r3, r2
 800c3d4:	1a18      	subs	r0, r3, r0
 800c3d6:	b003      	add	sp, #12
 800c3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c3e2:	e7ed      	b.n	800c3c0 <__exponent+0x4c>
 800c3e4:	2330      	movs	r3, #48	; 0x30
 800c3e6:	3130      	adds	r1, #48	; 0x30
 800c3e8:	7083      	strb	r3, [r0, #2]
 800c3ea:	70c1      	strb	r1, [r0, #3]
 800c3ec:	1d03      	adds	r3, r0, #4
 800c3ee:	e7f1      	b.n	800c3d4 <__exponent+0x60>

0800c3f0 <_printf_float>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	ed2d 8b02 	vpush	{d8}
 800c3f8:	b08d      	sub	sp, #52	; 0x34
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c400:	4616      	mov	r6, r2
 800c402:	461f      	mov	r7, r3
 800c404:	4605      	mov	r5, r0
 800c406:	f003 fa69 	bl	800f8dc <_localeconv_r>
 800c40a:	f8d0 a000 	ldr.w	sl, [r0]
 800c40e:	4650      	mov	r0, sl
 800c410:	f7f3 fee8 	bl	80001e4 <strlen>
 800c414:	2300      	movs	r3, #0
 800c416:	930a      	str	r3, [sp, #40]	; 0x28
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	9305      	str	r3, [sp, #20]
 800c41c:	f8d8 3000 	ldr.w	r3, [r8]
 800c420:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c424:	3307      	adds	r3, #7
 800c426:	f023 0307 	bic.w	r3, r3, #7
 800c42a:	f103 0208 	add.w	r2, r3, #8
 800c42e:	f8c8 2000 	str.w	r2, [r8]
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c43a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c43e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	f8cd 8018 	str.w	r8, [sp, #24]
 800c448:	ee08 0a10 	vmov	s16, r0
 800c44c:	4b9f      	ldr	r3, [pc, #636]	; (800c6cc <_printf_float+0x2dc>)
 800c44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c452:	f04f 32ff 	mov.w	r2, #4294967295
 800c456:	f7f4 fb79 	bl	8000b4c <__aeabi_dcmpun>
 800c45a:	bb88      	cbnz	r0, 800c4c0 <_printf_float+0xd0>
 800c45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c460:	4b9a      	ldr	r3, [pc, #616]	; (800c6cc <_printf_float+0x2dc>)
 800c462:	f04f 32ff 	mov.w	r2, #4294967295
 800c466:	f7f4 fb53 	bl	8000b10 <__aeabi_dcmple>
 800c46a:	bb48      	cbnz	r0, 800c4c0 <_printf_float+0xd0>
 800c46c:	2200      	movs	r2, #0
 800c46e:	2300      	movs	r3, #0
 800c470:	4640      	mov	r0, r8
 800c472:	4649      	mov	r1, r9
 800c474:	f7f4 fb42 	bl	8000afc <__aeabi_dcmplt>
 800c478:	b110      	cbz	r0, 800c480 <_printf_float+0x90>
 800c47a:	232d      	movs	r3, #45	; 0x2d
 800c47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c480:	4b93      	ldr	r3, [pc, #588]	; (800c6d0 <_printf_float+0x2e0>)
 800c482:	4894      	ldr	r0, [pc, #592]	; (800c6d4 <_printf_float+0x2e4>)
 800c484:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c488:	bf94      	ite	ls
 800c48a:	4698      	movls	r8, r3
 800c48c:	4680      	movhi	r8, r0
 800c48e:	2303      	movs	r3, #3
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	9b05      	ldr	r3, [sp, #20]
 800c494:	f023 0204 	bic.w	r2, r3, #4
 800c498:	6022      	str	r2, [r4, #0]
 800c49a:	f04f 0900 	mov.w	r9, #0
 800c49e:	9700      	str	r7, [sp, #0]
 800c4a0:	4633      	mov	r3, r6
 800c4a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f000 f9d8 	bl	800c85c <_printf_common>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f040 8090 	bne.w	800c5d2 <_printf_float+0x1e2>
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	b00d      	add	sp, #52	; 0x34
 800c4b8:	ecbd 8b02 	vpop	{d8}
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	f7f4 fb40 	bl	8000b4c <__aeabi_dcmpun>
 800c4cc:	b140      	cbz	r0, 800c4e0 <_printf_float+0xf0>
 800c4ce:	464b      	mov	r3, r9
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	bfbc      	itt	lt
 800c4d4:	232d      	movlt	r3, #45	; 0x2d
 800c4d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4da:	487f      	ldr	r0, [pc, #508]	; (800c6d8 <_printf_float+0x2e8>)
 800c4dc:	4b7f      	ldr	r3, [pc, #508]	; (800c6dc <_printf_float+0x2ec>)
 800c4de:	e7d1      	b.n	800c484 <_printf_float+0x94>
 800c4e0:	6863      	ldr	r3, [r4, #4]
 800c4e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c4e6:	9206      	str	r2, [sp, #24]
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	d13f      	bne.n	800c56c <_printf_float+0x17c>
 800c4ec:	2306      	movs	r3, #6
 800c4ee:	6063      	str	r3, [r4, #4]
 800c4f0:	9b05      	ldr	r3, [sp, #20]
 800c4f2:	6861      	ldr	r1, [r4, #4]
 800c4f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9303      	str	r3, [sp, #12]
 800c4fc:	ab0a      	add	r3, sp, #40	; 0x28
 800c4fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c502:	ab09      	add	r3, sp, #36	; 0x24
 800c504:	ec49 8b10 	vmov	d0, r8, r9
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	6022      	str	r2, [r4, #0]
 800c50c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c510:	4628      	mov	r0, r5
 800c512:	f7ff fecd 	bl	800c2b0 <__cvt>
 800c516:	9b06      	ldr	r3, [sp, #24]
 800c518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c51a:	2b47      	cmp	r3, #71	; 0x47
 800c51c:	4680      	mov	r8, r0
 800c51e:	d108      	bne.n	800c532 <_printf_float+0x142>
 800c520:	1cc8      	adds	r0, r1, #3
 800c522:	db02      	blt.n	800c52a <_printf_float+0x13a>
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	4299      	cmp	r1, r3
 800c528:	dd41      	ble.n	800c5ae <_printf_float+0x1be>
 800c52a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c52e:	fa5f fb8b 	uxtb.w	fp, fp
 800c532:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c536:	d820      	bhi.n	800c57a <_printf_float+0x18a>
 800c538:	3901      	subs	r1, #1
 800c53a:	465a      	mov	r2, fp
 800c53c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c540:	9109      	str	r1, [sp, #36]	; 0x24
 800c542:	f7ff ff17 	bl	800c374 <__exponent>
 800c546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c548:	1813      	adds	r3, r2, r0
 800c54a:	2a01      	cmp	r2, #1
 800c54c:	4681      	mov	r9, r0
 800c54e:	6123      	str	r3, [r4, #16]
 800c550:	dc02      	bgt.n	800c558 <_printf_float+0x168>
 800c552:	6822      	ldr	r2, [r4, #0]
 800c554:	07d2      	lsls	r2, r2, #31
 800c556:	d501      	bpl.n	800c55c <_printf_float+0x16c>
 800c558:	3301      	adds	r3, #1
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c560:	2b00      	cmp	r3, #0
 800c562:	d09c      	beq.n	800c49e <_printf_float+0xae>
 800c564:	232d      	movs	r3, #45	; 0x2d
 800c566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c56a:	e798      	b.n	800c49e <_printf_float+0xae>
 800c56c:	9a06      	ldr	r2, [sp, #24]
 800c56e:	2a47      	cmp	r2, #71	; 0x47
 800c570:	d1be      	bne.n	800c4f0 <_printf_float+0x100>
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1bc      	bne.n	800c4f0 <_printf_float+0x100>
 800c576:	2301      	movs	r3, #1
 800c578:	e7b9      	b.n	800c4ee <_printf_float+0xfe>
 800c57a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c57e:	d118      	bne.n	800c5b2 <_printf_float+0x1c2>
 800c580:	2900      	cmp	r1, #0
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	dd0b      	ble.n	800c59e <_printf_float+0x1ae>
 800c586:	6121      	str	r1, [r4, #16]
 800c588:	b913      	cbnz	r3, 800c590 <_printf_float+0x1a0>
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	07d0      	lsls	r0, r2, #31
 800c58e:	d502      	bpl.n	800c596 <_printf_float+0x1a6>
 800c590:	3301      	adds	r3, #1
 800c592:	440b      	add	r3, r1
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	65a1      	str	r1, [r4, #88]	; 0x58
 800c598:	f04f 0900 	mov.w	r9, #0
 800c59c:	e7de      	b.n	800c55c <_printf_float+0x16c>
 800c59e:	b913      	cbnz	r3, 800c5a6 <_printf_float+0x1b6>
 800c5a0:	6822      	ldr	r2, [r4, #0]
 800c5a2:	07d2      	lsls	r2, r2, #31
 800c5a4:	d501      	bpl.n	800c5aa <_printf_float+0x1ba>
 800c5a6:	3302      	adds	r3, #2
 800c5a8:	e7f4      	b.n	800c594 <_printf_float+0x1a4>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e7f2      	b.n	800c594 <_printf_float+0x1a4>
 800c5ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	db05      	blt.n	800c5c4 <_printf_float+0x1d4>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	6121      	str	r1, [r4, #16]
 800c5bc:	07d8      	lsls	r0, r3, #31
 800c5be:	d5ea      	bpl.n	800c596 <_printf_float+0x1a6>
 800c5c0:	1c4b      	adds	r3, r1, #1
 800c5c2:	e7e7      	b.n	800c594 <_printf_float+0x1a4>
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	bfd4      	ite	le
 800c5c8:	f1c1 0202 	rsble	r2, r1, #2
 800c5cc:	2201      	movgt	r2, #1
 800c5ce:	4413      	add	r3, r2
 800c5d0:	e7e0      	b.n	800c594 <_printf_float+0x1a4>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	055a      	lsls	r2, r3, #21
 800c5d6:	d407      	bmi.n	800c5e8 <_printf_float+0x1f8>
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	4642      	mov	r2, r8
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d12c      	bne.n	800c640 <_printf_float+0x250>
 800c5e6:	e764      	b.n	800c4b2 <_printf_float+0xc2>
 800c5e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5ec:	f240 80e0 	bls.w	800c7b0 <_printf_float+0x3c0>
 800c5f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f7f4 fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d034      	beq.n	800c66a <_printf_float+0x27a>
 800c600:	4a37      	ldr	r2, [pc, #220]	; (800c6e0 <_printf_float+0x2f0>)
 800c602:	2301      	movs	r3, #1
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	f43f af51 	beq.w	800c4b2 <_printf_float+0xc2>
 800c610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c614:	429a      	cmp	r2, r3
 800c616:	db02      	blt.n	800c61e <_printf_float+0x22e>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	07d8      	lsls	r0, r3, #31
 800c61c:	d510      	bpl.n	800c640 <_printf_float+0x250>
 800c61e:	ee18 3a10 	vmov	r3, s16
 800c622:	4652      	mov	r2, sl
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	f43f af41 	beq.w	800c4b2 <_printf_float+0xc2>
 800c630:	f04f 0800 	mov.w	r8, #0
 800c634:	f104 091a 	add.w	r9, r4, #26
 800c638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63a:	3b01      	subs	r3, #1
 800c63c:	4543      	cmp	r3, r8
 800c63e:	dc09      	bgt.n	800c654 <_printf_float+0x264>
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	079b      	lsls	r3, r3, #30
 800c644:	f100 8105 	bmi.w	800c852 <_printf_float+0x462>
 800c648:	68e0      	ldr	r0, [r4, #12]
 800c64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c64c:	4298      	cmp	r0, r3
 800c64e:	bfb8      	it	lt
 800c650:	4618      	movlt	r0, r3
 800c652:	e730      	b.n	800c4b6 <_printf_float+0xc6>
 800c654:	2301      	movs	r3, #1
 800c656:	464a      	mov	r2, r9
 800c658:	4631      	mov	r1, r6
 800c65a:	4628      	mov	r0, r5
 800c65c:	47b8      	blx	r7
 800c65e:	3001      	adds	r0, #1
 800c660:	f43f af27 	beq.w	800c4b2 <_printf_float+0xc2>
 800c664:	f108 0801 	add.w	r8, r8, #1
 800c668:	e7e6      	b.n	800c638 <_printf_float+0x248>
 800c66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc39      	bgt.n	800c6e4 <_printf_float+0x2f4>
 800c670:	4a1b      	ldr	r2, [pc, #108]	; (800c6e0 <_printf_float+0x2f0>)
 800c672:	2301      	movs	r3, #1
 800c674:	4631      	mov	r1, r6
 800c676:	4628      	mov	r0, r5
 800c678:	47b8      	blx	r7
 800c67a:	3001      	adds	r0, #1
 800c67c:	f43f af19 	beq.w	800c4b2 <_printf_float+0xc2>
 800c680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c684:	4313      	orrs	r3, r2
 800c686:	d102      	bne.n	800c68e <_printf_float+0x29e>
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	07d9      	lsls	r1, r3, #31
 800c68c:	d5d8      	bpl.n	800c640 <_printf_float+0x250>
 800c68e:	ee18 3a10 	vmov	r3, s16
 800c692:	4652      	mov	r2, sl
 800c694:	4631      	mov	r1, r6
 800c696:	4628      	mov	r0, r5
 800c698:	47b8      	blx	r7
 800c69a:	3001      	adds	r0, #1
 800c69c:	f43f af09 	beq.w	800c4b2 <_printf_float+0xc2>
 800c6a0:	f04f 0900 	mov.w	r9, #0
 800c6a4:	f104 0a1a 	add.w	sl, r4, #26
 800c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6aa:	425b      	negs	r3, r3
 800c6ac:	454b      	cmp	r3, r9
 800c6ae:	dc01      	bgt.n	800c6b4 <_printf_float+0x2c4>
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b2:	e792      	b.n	800c5da <_printf_float+0x1ea>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	4652      	mov	r2, sl
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	47b8      	blx	r7
 800c6be:	3001      	adds	r0, #1
 800c6c0:	f43f aef7 	beq.w	800c4b2 <_printf_float+0xc2>
 800c6c4:	f109 0901 	add.w	r9, r9, #1
 800c6c8:	e7ee      	b.n	800c6a8 <_printf_float+0x2b8>
 800c6ca:	bf00      	nop
 800c6cc:	7fefffff 	.word	0x7fefffff
 800c6d0:	08011ce0 	.word	0x08011ce0
 800c6d4:	08011ce4 	.word	0x08011ce4
 800c6d8:	08011cec 	.word	0x08011cec
 800c6dc:	08011ce8 	.word	0x08011ce8
 800c6e0:	08012181 	.word	0x08012181
 800c6e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	bfa8      	it	ge
 800c6ec:	461a      	movge	r2, r3
 800c6ee:	2a00      	cmp	r2, #0
 800c6f0:	4691      	mov	r9, r2
 800c6f2:	dc37      	bgt.n	800c764 <_printf_float+0x374>
 800c6f4:	f04f 0b00 	mov.w	fp, #0
 800c6f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6fc:	f104 021a 	add.w	r2, r4, #26
 800c700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	eba3 0309 	sub.w	r3, r3, r9
 800c708:	455b      	cmp	r3, fp
 800c70a:	dc33      	bgt.n	800c774 <_printf_float+0x384>
 800c70c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c710:	429a      	cmp	r2, r3
 800c712:	db3b      	blt.n	800c78c <_printf_float+0x39c>
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	07da      	lsls	r2, r3, #31
 800c718:	d438      	bmi.n	800c78c <_printf_float+0x39c>
 800c71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c71c:	9a05      	ldr	r2, [sp, #20]
 800c71e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c720:	1a9a      	subs	r2, r3, r2
 800c722:	eba3 0901 	sub.w	r9, r3, r1
 800c726:	4591      	cmp	r9, r2
 800c728:	bfa8      	it	ge
 800c72a:	4691      	movge	r9, r2
 800c72c:	f1b9 0f00 	cmp.w	r9, #0
 800c730:	dc35      	bgt.n	800c79e <_printf_float+0x3ae>
 800c732:	f04f 0800 	mov.w	r8, #0
 800c736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c73a:	f104 0a1a 	add.w	sl, r4, #26
 800c73e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c742:	1a9b      	subs	r3, r3, r2
 800c744:	eba3 0309 	sub.w	r3, r3, r9
 800c748:	4543      	cmp	r3, r8
 800c74a:	f77f af79 	ble.w	800c640 <_printf_float+0x250>
 800c74e:	2301      	movs	r3, #1
 800c750:	4652      	mov	r2, sl
 800c752:	4631      	mov	r1, r6
 800c754:	4628      	mov	r0, r5
 800c756:	47b8      	blx	r7
 800c758:	3001      	adds	r0, #1
 800c75a:	f43f aeaa 	beq.w	800c4b2 <_printf_float+0xc2>
 800c75e:	f108 0801 	add.w	r8, r8, #1
 800c762:	e7ec      	b.n	800c73e <_printf_float+0x34e>
 800c764:	4613      	mov	r3, r2
 800c766:	4631      	mov	r1, r6
 800c768:	4642      	mov	r2, r8
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	d1c0      	bne.n	800c6f4 <_printf_float+0x304>
 800c772:	e69e      	b.n	800c4b2 <_printf_float+0xc2>
 800c774:	2301      	movs	r3, #1
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	9205      	str	r2, [sp, #20]
 800c77c:	47b8      	blx	r7
 800c77e:	3001      	adds	r0, #1
 800c780:	f43f ae97 	beq.w	800c4b2 <_printf_float+0xc2>
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	f10b 0b01 	add.w	fp, fp, #1
 800c78a:	e7b9      	b.n	800c700 <_printf_float+0x310>
 800c78c:	ee18 3a10 	vmov	r3, s16
 800c790:	4652      	mov	r2, sl
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	d1be      	bne.n	800c71a <_printf_float+0x32a>
 800c79c:	e689      	b.n	800c4b2 <_printf_float+0xc2>
 800c79e:	9a05      	ldr	r2, [sp, #20]
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	4442      	add	r2, r8
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	47b8      	blx	r7
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	d1c1      	bne.n	800c732 <_printf_float+0x342>
 800c7ae:	e680      	b.n	800c4b2 <_printf_float+0xc2>
 800c7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7b2:	2a01      	cmp	r2, #1
 800c7b4:	dc01      	bgt.n	800c7ba <_printf_float+0x3ca>
 800c7b6:	07db      	lsls	r3, r3, #31
 800c7b8:	d538      	bpl.n	800c82c <_printf_float+0x43c>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4642      	mov	r2, r8
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b8      	blx	r7
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	f43f ae74 	beq.w	800c4b2 <_printf_float+0xc2>
 800c7ca:	ee18 3a10 	vmov	r3, s16
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b8      	blx	r7
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	f43f ae6b 	beq.w	800c4b2 <_printf_float+0xc2>
 800c7dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f7f4 f980 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7e8:	b9d8      	cbnz	r0, 800c822 <_printf_float+0x432>
 800c7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ec:	f108 0201 	add.w	r2, r8, #1
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b8      	blx	r7
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d10e      	bne.n	800c81a <_printf_float+0x42a>
 800c7fc:	e659      	b.n	800c4b2 <_printf_float+0xc2>
 800c7fe:	2301      	movs	r3, #1
 800c800:	4652      	mov	r2, sl
 800c802:	4631      	mov	r1, r6
 800c804:	4628      	mov	r0, r5
 800c806:	47b8      	blx	r7
 800c808:	3001      	adds	r0, #1
 800c80a:	f43f ae52 	beq.w	800c4b2 <_printf_float+0xc2>
 800c80e:	f108 0801 	add.w	r8, r8, #1
 800c812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c814:	3b01      	subs	r3, #1
 800c816:	4543      	cmp	r3, r8
 800c818:	dcf1      	bgt.n	800c7fe <_printf_float+0x40e>
 800c81a:	464b      	mov	r3, r9
 800c81c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c820:	e6dc      	b.n	800c5dc <_printf_float+0x1ec>
 800c822:	f04f 0800 	mov.w	r8, #0
 800c826:	f104 0a1a 	add.w	sl, r4, #26
 800c82a:	e7f2      	b.n	800c812 <_printf_float+0x422>
 800c82c:	2301      	movs	r3, #1
 800c82e:	4642      	mov	r2, r8
 800c830:	e7df      	b.n	800c7f2 <_printf_float+0x402>
 800c832:	2301      	movs	r3, #1
 800c834:	464a      	mov	r2, r9
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	47b8      	blx	r7
 800c83c:	3001      	adds	r0, #1
 800c83e:	f43f ae38 	beq.w	800c4b2 <_printf_float+0xc2>
 800c842:	f108 0801 	add.w	r8, r8, #1
 800c846:	68e3      	ldr	r3, [r4, #12]
 800c848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c84a:	1a5b      	subs	r3, r3, r1
 800c84c:	4543      	cmp	r3, r8
 800c84e:	dcf0      	bgt.n	800c832 <_printf_float+0x442>
 800c850:	e6fa      	b.n	800c648 <_printf_float+0x258>
 800c852:	f04f 0800 	mov.w	r8, #0
 800c856:	f104 0919 	add.w	r9, r4, #25
 800c85a:	e7f4      	b.n	800c846 <_printf_float+0x456>

0800c85c <_printf_common>:
 800c85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c860:	4616      	mov	r6, r2
 800c862:	4699      	mov	r9, r3
 800c864:	688a      	ldr	r2, [r1, #8]
 800c866:	690b      	ldr	r3, [r1, #16]
 800c868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bfb8      	it	lt
 800c870:	4613      	movlt	r3, r2
 800c872:	6033      	str	r3, [r6, #0]
 800c874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c878:	4607      	mov	r7, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b10a      	cbz	r2, 800c882 <_printf_common+0x26>
 800c87e:	3301      	adds	r3, #1
 800c880:	6033      	str	r3, [r6, #0]
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	0699      	lsls	r1, r3, #26
 800c886:	bf42      	ittt	mi
 800c888:	6833      	ldrmi	r3, [r6, #0]
 800c88a:	3302      	addmi	r3, #2
 800c88c:	6033      	strmi	r3, [r6, #0]
 800c88e:	6825      	ldr	r5, [r4, #0]
 800c890:	f015 0506 	ands.w	r5, r5, #6
 800c894:	d106      	bne.n	800c8a4 <_printf_common+0x48>
 800c896:	f104 0a19 	add.w	sl, r4, #25
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	6832      	ldr	r2, [r6, #0]
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dc26      	bgt.n	800c8f2 <_printf_common+0x96>
 800c8a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8a8:	1e13      	subs	r3, r2, #0
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	bf18      	it	ne
 800c8ae:	2301      	movne	r3, #1
 800c8b0:	0692      	lsls	r2, r2, #26
 800c8b2:	d42b      	bmi.n	800c90c <_printf_common+0xb0>
 800c8b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	47c0      	blx	r8
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d01e      	beq.n	800c900 <_printf_common+0xa4>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	68e5      	ldr	r5, [r4, #12]
 800c8c6:	6832      	ldr	r2, [r6, #0]
 800c8c8:	f003 0306 	and.w	r3, r3, #6
 800c8cc:	2b04      	cmp	r3, #4
 800c8ce:	bf08      	it	eq
 800c8d0:	1aad      	subeq	r5, r5, r2
 800c8d2:	68a3      	ldr	r3, [r4, #8]
 800c8d4:	6922      	ldr	r2, [r4, #16]
 800c8d6:	bf0c      	ite	eq
 800c8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8dc:	2500      	movne	r5, #0
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	bfc4      	itt	gt
 800c8e2:	1a9b      	subgt	r3, r3, r2
 800c8e4:	18ed      	addgt	r5, r5, r3
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	341a      	adds	r4, #26
 800c8ea:	42b5      	cmp	r5, r6
 800c8ec:	d11a      	bne.n	800c924 <_printf_common+0xc8>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	e008      	b.n	800c904 <_printf_common+0xa8>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	47c0      	blx	r8
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d103      	bne.n	800c908 <_printf_common+0xac>
 800c900:	f04f 30ff 	mov.w	r0, #4294967295
 800c904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c908:	3501      	adds	r5, #1
 800c90a:	e7c6      	b.n	800c89a <_printf_common+0x3e>
 800c90c:	18e1      	adds	r1, r4, r3
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	2030      	movs	r0, #48	; 0x30
 800c912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c916:	4422      	add	r2, r4
 800c918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c91c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c920:	3302      	adds	r3, #2
 800c922:	e7c7      	b.n	800c8b4 <_printf_common+0x58>
 800c924:	2301      	movs	r3, #1
 800c926:	4622      	mov	r2, r4
 800c928:	4649      	mov	r1, r9
 800c92a:	4638      	mov	r0, r7
 800c92c:	47c0      	blx	r8
 800c92e:	3001      	adds	r0, #1
 800c930:	d0e6      	beq.n	800c900 <_printf_common+0xa4>
 800c932:	3601      	adds	r6, #1
 800c934:	e7d9      	b.n	800c8ea <_printf_common+0x8e>
	...

0800c938 <_printf_i>:
 800c938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	7e0f      	ldrb	r7, [r1, #24]
 800c93e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c940:	2f78      	cmp	r7, #120	; 0x78
 800c942:	4691      	mov	r9, r2
 800c944:	4680      	mov	r8, r0
 800c946:	460c      	mov	r4, r1
 800c948:	469a      	mov	sl, r3
 800c94a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c94e:	d807      	bhi.n	800c960 <_printf_i+0x28>
 800c950:	2f62      	cmp	r7, #98	; 0x62
 800c952:	d80a      	bhi.n	800c96a <_printf_i+0x32>
 800c954:	2f00      	cmp	r7, #0
 800c956:	f000 80d8 	beq.w	800cb0a <_printf_i+0x1d2>
 800c95a:	2f58      	cmp	r7, #88	; 0x58
 800c95c:	f000 80a3 	beq.w	800caa6 <_printf_i+0x16e>
 800c960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c968:	e03a      	b.n	800c9e0 <_printf_i+0xa8>
 800c96a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c96e:	2b15      	cmp	r3, #21
 800c970:	d8f6      	bhi.n	800c960 <_printf_i+0x28>
 800c972:	a101      	add	r1, pc, #4	; (adr r1, 800c978 <_printf_i+0x40>)
 800c974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c978:	0800c9d1 	.word	0x0800c9d1
 800c97c:	0800c9e5 	.word	0x0800c9e5
 800c980:	0800c961 	.word	0x0800c961
 800c984:	0800c961 	.word	0x0800c961
 800c988:	0800c961 	.word	0x0800c961
 800c98c:	0800c961 	.word	0x0800c961
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800c961 	.word	0x0800c961
 800c998:	0800c961 	.word	0x0800c961
 800c99c:	0800c961 	.word	0x0800c961
 800c9a0:	0800c961 	.word	0x0800c961
 800c9a4:	0800caf1 	.word	0x0800caf1
 800c9a8:	0800ca15 	.word	0x0800ca15
 800c9ac:	0800cad3 	.word	0x0800cad3
 800c9b0:	0800c961 	.word	0x0800c961
 800c9b4:	0800c961 	.word	0x0800c961
 800c9b8:	0800cb13 	.word	0x0800cb13
 800c9bc:	0800c961 	.word	0x0800c961
 800c9c0:	0800ca15 	.word	0x0800ca15
 800c9c4:	0800c961 	.word	0x0800c961
 800c9c8:	0800c961 	.word	0x0800c961
 800c9cc:	0800cadb 	.word	0x0800cadb
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	1d1a      	adds	r2, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	602a      	str	r2, [r5, #0]
 800c9d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e0a3      	b.n	800cb2c <_printf_i+0x1f4>
 800c9e4:	6820      	ldr	r0, [r4, #0]
 800c9e6:	6829      	ldr	r1, [r5, #0]
 800c9e8:	0606      	lsls	r6, r0, #24
 800c9ea:	f101 0304 	add.w	r3, r1, #4
 800c9ee:	d50a      	bpl.n	800ca06 <_printf_i+0xce>
 800c9f0:	680e      	ldr	r6, [r1, #0]
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	2e00      	cmp	r6, #0
 800c9f6:	da03      	bge.n	800ca00 <_printf_i+0xc8>
 800c9f8:	232d      	movs	r3, #45	; 0x2d
 800c9fa:	4276      	negs	r6, r6
 800c9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca00:	485e      	ldr	r0, [pc, #376]	; (800cb7c <_printf_i+0x244>)
 800ca02:	230a      	movs	r3, #10
 800ca04:	e019      	b.n	800ca3a <_printf_i+0x102>
 800ca06:	680e      	ldr	r6, [r1, #0]
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca0e:	bf18      	it	ne
 800ca10:	b236      	sxthne	r6, r6
 800ca12:	e7ef      	b.n	800c9f4 <_printf_i+0xbc>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	6820      	ldr	r0, [r4, #0]
 800ca18:	1d19      	adds	r1, r3, #4
 800ca1a:	6029      	str	r1, [r5, #0]
 800ca1c:	0601      	lsls	r1, r0, #24
 800ca1e:	d501      	bpl.n	800ca24 <_printf_i+0xec>
 800ca20:	681e      	ldr	r6, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <_printf_i+0xf2>
 800ca24:	0646      	lsls	r6, r0, #25
 800ca26:	d5fb      	bpl.n	800ca20 <_printf_i+0xe8>
 800ca28:	881e      	ldrh	r6, [r3, #0]
 800ca2a:	4854      	ldr	r0, [pc, #336]	; (800cb7c <_printf_i+0x244>)
 800ca2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ca2e:	bf0c      	ite	eq
 800ca30:	2308      	moveq	r3, #8
 800ca32:	230a      	movne	r3, #10
 800ca34:	2100      	movs	r1, #0
 800ca36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca3a:	6865      	ldr	r5, [r4, #4]
 800ca3c:	60a5      	str	r5, [r4, #8]
 800ca3e:	2d00      	cmp	r5, #0
 800ca40:	bfa2      	ittt	ge
 800ca42:	6821      	ldrge	r1, [r4, #0]
 800ca44:	f021 0104 	bicge.w	r1, r1, #4
 800ca48:	6021      	strge	r1, [r4, #0]
 800ca4a:	b90e      	cbnz	r6, 800ca50 <_printf_i+0x118>
 800ca4c:	2d00      	cmp	r5, #0
 800ca4e:	d04d      	beq.n	800caec <_printf_i+0x1b4>
 800ca50:	4615      	mov	r5, r2
 800ca52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca56:	fb03 6711 	mls	r7, r3, r1, r6
 800ca5a:	5dc7      	ldrb	r7, [r0, r7]
 800ca5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca60:	4637      	mov	r7, r6
 800ca62:	42bb      	cmp	r3, r7
 800ca64:	460e      	mov	r6, r1
 800ca66:	d9f4      	bls.n	800ca52 <_printf_i+0x11a>
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d10b      	bne.n	800ca84 <_printf_i+0x14c>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	07de      	lsls	r6, r3, #31
 800ca70:	d508      	bpl.n	800ca84 <_printf_i+0x14c>
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	6861      	ldr	r1, [r4, #4]
 800ca76:	4299      	cmp	r1, r3
 800ca78:	bfde      	ittt	le
 800ca7a:	2330      	movle	r3, #48	; 0x30
 800ca7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca80:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca84:	1b52      	subs	r2, r2, r5
 800ca86:	6122      	str	r2, [r4, #16]
 800ca88:	f8cd a000 	str.w	sl, [sp]
 800ca8c:	464b      	mov	r3, r9
 800ca8e:	aa03      	add	r2, sp, #12
 800ca90:	4621      	mov	r1, r4
 800ca92:	4640      	mov	r0, r8
 800ca94:	f7ff fee2 	bl	800c85c <_printf_common>
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d14c      	bne.n	800cb36 <_printf_i+0x1fe>
 800ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 800caa0:	b004      	add	sp, #16
 800caa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa6:	4835      	ldr	r0, [pc, #212]	; (800cb7c <_printf_i+0x244>)
 800caa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caac:	6829      	ldr	r1, [r5, #0]
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cab4:	6029      	str	r1, [r5, #0]
 800cab6:	061d      	lsls	r5, r3, #24
 800cab8:	d514      	bpl.n	800cae4 <_printf_i+0x1ac>
 800caba:	07df      	lsls	r7, r3, #31
 800cabc:	bf44      	itt	mi
 800cabe:	f043 0320 	orrmi.w	r3, r3, #32
 800cac2:	6023      	strmi	r3, [r4, #0]
 800cac4:	b91e      	cbnz	r6, 800cace <_printf_i+0x196>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	f023 0320 	bic.w	r3, r3, #32
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	2310      	movs	r3, #16
 800cad0:	e7b0      	b.n	800ca34 <_printf_i+0xfc>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	f043 0320 	orr.w	r3, r3, #32
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	2378      	movs	r3, #120	; 0x78
 800cadc:	4828      	ldr	r0, [pc, #160]	; (800cb80 <_printf_i+0x248>)
 800cade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cae2:	e7e3      	b.n	800caac <_printf_i+0x174>
 800cae4:	0659      	lsls	r1, r3, #25
 800cae6:	bf48      	it	mi
 800cae8:	b2b6      	uxthmi	r6, r6
 800caea:	e7e6      	b.n	800caba <_printf_i+0x182>
 800caec:	4615      	mov	r5, r2
 800caee:	e7bb      	b.n	800ca68 <_printf_i+0x130>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	6826      	ldr	r6, [r4, #0]
 800caf4:	6961      	ldr	r1, [r4, #20]
 800caf6:	1d18      	adds	r0, r3, #4
 800caf8:	6028      	str	r0, [r5, #0]
 800cafa:	0635      	lsls	r5, r6, #24
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	d501      	bpl.n	800cb04 <_printf_i+0x1cc>
 800cb00:	6019      	str	r1, [r3, #0]
 800cb02:	e002      	b.n	800cb0a <_printf_i+0x1d2>
 800cb04:	0670      	lsls	r0, r6, #25
 800cb06:	d5fb      	bpl.n	800cb00 <_printf_i+0x1c8>
 800cb08:	8019      	strh	r1, [r3, #0]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	6123      	str	r3, [r4, #16]
 800cb0e:	4615      	mov	r5, r2
 800cb10:	e7ba      	b.n	800ca88 <_printf_i+0x150>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	1d1a      	adds	r2, r3, #4
 800cb16:	602a      	str	r2, [r5, #0]
 800cb18:	681d      	ldr	r5, [r3, #0]
 800cb1a:	6862      	ldr	r2, [r4, #4]
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f7f3 fb6e 	bl	8000200 <memchr>
 800cb24:	b108      	cbz	r0, 800cb2a <_printf_i+0x1f2>
 800cb26:	1b40      	subs	r0, r0, r5
 800cb28:	6060      	str	r0, [r4, #4]
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb34:	e7a8      	b.n	800ca88 <_printf_i+0x150>
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	462a      	mov	r2, r5
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	47d0      	blx	sl
 800cb40:	3001      	adds	r0, #1
 800cb42:	d0ab      	beq.n	800ca9c <_printf_i+0x164>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	079b      	lsls	r3, r3, #30
 800cb48:	d413      	bmi.n	800cb72 <_printf_i+0x23a>
 800cb4a:	68e0      	ldr	r0, [r4, #12]
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	4298      	cmp	r0, r3
 800cb50:	bfb8      	it	lt
 800cb52:	4618      	movlt	r0, r3
 800cb54:	e7a4      	b.n	800caa0 <_printf_i+0x168>
 800cb56:	2301      	movs	r3, #1
 800cb58:	4632      	mov	r2, r6
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	47d0      	blx	sl
 800cb60:	3001      	adds	r0, #1
 800cb62:	d09b      	beq.n	800ca9c <_printf_i+0x164>
 800cb64:	3501      	adds	r5, #1
 800cb66:	68e3      	ldr	r3, [r4, #12]
 800cb68:	9903      	ldr	r1, [sp, #12]
 800cb6a:	1a5b      	subs	r3, r3, r1
 800cb6c:	42ab      	cmp	r3, r5
 800cb6e:	dcf2      	bgt.n	800cb56 <_printf_i+0x21e>
 800cb70:	e7eb      	b.n	800cb4a <_printf_i+0x212>
 800cb72:	2500      	movs	r5, #0
 800cb74:	f104 0619 	add.w	r6, r4, #25
 800cb78:	e7f5      	b.n	800cb66 <_printf_i+0x22e>
 800cb7a:	bf00      	nop
 800cb7c:	08011cf0 	.word	0x08011cf0
 800cb80:	08011d01 	.word	0x08011d01

0800cb84 <_scanf_float>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	b087      	sub	sp, #28
 800cb8a:	4617      	mov	r7, r2
 800cb8c:	9303      	str	r3, [sp, #12]
 800cb8e:	688b      	ldr	r3, [r1, #8]
 800cb90:	1e5a      	subs	r2, r3, #1
 800cb92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb96:	bf83      	ittte	hi
 800cb98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cb9c:	195b      	addhi	r3, r3, r5
 800cb9e:	9302      	strhi	r3, [sp, #8]
 800cba0:	2300      	movls	r3, #0
 800cba2:	bf86      	itte	hi
 800cba4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cba8:	608b      	strhi	r3, [r1, #8]
 800cbaa:	9302      	strls	r3, [sp, #8]
 800cbac:	680b      	ldr	r3, [r1, #0]
 800cbae:	468b      	mov	fp, r1
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cbb6:	f84b 3b1c 	str.w	r3, [fp], #28
 800cbba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	465e      	mov	r6, fp
 800cbc4:	46aa      	mov	sl, r5
 800cbc6:	46a9      	mov	r9, r5
 800cbc8:	9501      	str	r5, [sp, #4]
 800cbca:	68a2      	ldr	r2, [r4, #8]
 800cbcc:	b152      	cbz	r2, 800cbe4 <_scanf_float+0x60>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2b4e      	cmp	r3, #78	; 0x4e
 800cbd4:	d864      	bhi.n	800cca0 <_scanf_float+0x11c>
 800cbd6:	2b40      	cmp	r3, #64	; 0x40
 800cbd8:	d83c      	bhi.n	800cc54 <_scanf_float+0xd0>
 800cbda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cbde:	b2c8      	uxtb	r0, r1
 800cbe0:	280e      	cmp	r0, #14
 800cbe2:	d93a      	bls.n	800cc5a <_scanf_float+0xd6>
 800cbe4:	f1b9 0f00 	cmp.w	r9, #0
 800cbe8:	d003      	beq.n	800cbf2 <_scanf_float+0x6e>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbf6:	f1ba 0f01 	cmp.w	sl, #1
 800cbfa:	f200 8113 	bhi.w	800ce24 <_scanf_float+0x2a0>
 800cbfe:	455e      	cmp	r6, fp
 800cc00:	f200 8105 	bhi.w	800ce0e <_scanf_float+0x28a>
 800cc04:	2501      	movs	r5, #1
 800cc06:	4628      	mov	r0, r5
 800cc08:	b007      	add	sp, #28
 800cc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cc12:	2a0d      	cmp	r2, #13
 800cc14:	d8e6      	bhi.n	800cbe4 <_scanf_float+0x60>
 800cc16:	a101      	add	r1, pc, #4	; (adr r1, 800cc1c <_scanf_float+0x98>)
 800cc18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc1c:	0800cd5b 	.word	0x0800cd5b
 800cc20:	0800cbe5 	.word	0x0800cbe5
 800cc24:	0800cbe5 	.word	0x0800cbe5
 800cc28:	0800cbe5 	.word	0x0800cbe5
 800cc2c:	0800cdbb 	.word	0x0800cdbb
 800cc30:	0800cd93 	.word	0x0800cd93
 800cc34:	0800cbe5 	.word	0x0800cbe5
 800cc38:	0800cbe5 	.word	0x0800cbe5
 800cc3c:	0800cd69 	.word	0x0800cd69
 800cc40:	0800cbe5 	.word	0x0800cbe5
 800cc44:	0800cbe5 	.word	0x0800cbe5
 800cc48:	0800cbe5 	.word	0x0800cbe5
 800cc4c:	0800cbe5 	.word	0x0800cbe5
 800cc50:	0800cd21 	.word	0x0800cd21
 800cc54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cc58:	e7db      	b.n	800cc12 <_scanf_float+0x8e>
 800cc5a:	290e      	cmp	r1, #14
 800cc5c:	d8c2      	bhi.n	800cbe4 <_scanf_float+0x60>
 800cc5e:	a001      	add	r0, pc, #4	; (adr r0, 800cc64 <_scanf_float+0xe0>)
 800cc60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc64:	0800cd13 	.word	0x0800cd13
 800cc68:	0800cbe5 	.word	0x0800cbe5
 800cc6c:	0800cd13 	.word	0x0800cd13
 800cc70:	0800cda7 	.word	0x0800cda7
 800cc74:	0800cbe5 	.word	0x0800cbe5
 800cc78:	0800ccc1 	.word	0x0800ccc1
 800cc7c:	0800ccfd 	.word	0x0800ccfd
 800cc80:	0800ccfd 	.word	0x0800ccfd
 800cc84:	0800ccfd 	.word	0x0800ccfd
 800cc88:	0800ccfd 	.word	0x0800ccfd
 800cc8c:	0800ccfd 	.word	0x0800ccfd
 800cc90:	0800ccfd 	.word	0x0800ccfd
 800cc94:	0800ccfd 	.word	0x0800ccfd
 800cc98:	0800ccfd 	.word	0x0800ccfd
 800cc9c:	0800ccfd 	.word	0x0800ccfd
 800cca0:	2b6e      	cmp	r3, #110	; 0x6e
 800cca2:	d809      	bhi.n	800ccb8 <_scanf_float+0x134>
 800cca4:	2b60      	cmp	r3, #96	; 0x60
 800cca6:	d8b2      	bhi.n	800cc0e <_scanf_float+0x8a>
 800cca8:	2b54      	cmp	r3, #84	; 0x54
 800ccaa:	d077      	beq.n	800cd9c <_scanf_float+0x218>
 800ccac:	2b59      	cmp	r3, #89	; 0x59
 800ccae:	d199      	bne.n	800cbe4 <_scanf_float+0x60>
 800ccb0:	2d07      	cmp	r5, #7
 800ccb2:	d197      	bne.n	800cbe4 <_scanf_float+0x60>
 800ccb4:	2508      	movs	r5, #8
 800ccb6:	e029      	b.n	800cd0c <_scanf_float+0x188>
 800ccb8:	2b74      	cmp	r3, #116	; 0x74
 800ccba:	d06f      	beq.n	800cd9c <_scanf_float+0x218>
 800ccbc:	2b79      	cmp	r3, #121	; 0x79
 800ccbe:	e7f6      	b.n	800ccae <_scanf_float+0x12a>
 800ccc0:	6821      	ldr	r1, [r4, #0]
 800ccc2:	05c8      	lsls	r0, r1, #23
 800ccc4:	d51a      	bpl.n	800ccfc <_scanf_float+0x178>
 800ccc6:	9b02      	ldr	r3, [sp, #8]
 800ccc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cccc:	6021      	str	r1, [r4, #0]
 800ccce:	f109 0901 	add.w	r9, r9, #1
 800ccd2:	b11b      	cbz	r3, 800ccdc <_scanf_float+0x158>
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	3201      	adds	r2, #1
 800ccd8:	9302      	str	r3, [sp, #8]
 800ccda:	60a2      	str	r2, [r4, #8]
 800ccdc:	68a3      	ldr	r3, [r4, #8]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	60a3      	str	r3, [r4, #8]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	3301      	adds	r3, #1
 800cce6:	6123      	str	r3, [r4, #16]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	607b      	str	r3, [r7, #4]
 800ccf0:	f340 8084 	ble.w	800cdfc <_scanf_float+0x278>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	603b      	str	r3, [r7, #0]
 800ccfa:	e766      	b.n	800cbca <_scanf_float+0x46>
 800ccfc:	eb1a 0f05 	cmn.w	sl, r5
 800cd00:	f47f af70 	bne.w	800cbe4 <_scanf_float+0x60>
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cd0a:	6022      	str	r2, [r4, #0]
 800cd0c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd10:	e7e4      	b.n	800ccdc <_scanf_float+0x158>
 800cd12:	6822      	ldr	r2, [r4, #0]
 800cd14:	0610      	lsls	r0, r2, #24
 800cd16:	f57f af65 	bpl.w	800cbe4 <_scanf_float+0x60>
 800cd1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd1e:	e7f4      	b.n	800cd0a <_scanf_float+0x186>
 800cd20:	f1ba 0f00 	cmp.w	sl, #0
 800cd24:	d10e      	bne.n	800cd44 <_scanf_float+0x1c0>
 800cd26:	f1b9 0f00 	cmp.w	r9, #0
 800cd2a:	d10e      	bne.n	800cd4a <_scanf_float+0x1c6>
 800cd2c:	6822      	ldr	r2, [r4, #0]
 800cd2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd36:	d108      	bne.n	800cd4a <_scanf_float+0x1c6>
 800cd38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd3c:	6022      	str	r2, [r4, #0]
 800cd3e:	f04f 0a01 	mov.w	sl, #1
 800cd42:	e7e3      	b.n	800cd0c <_scanf_float+0x188>
 800cd44:	f1ba 0f02 	cmp.w	sl, #2
 800cd48:	d055      	beq.n	800cdf6 <_scanf_float+0x272>
 800cd4a:	2d01      	cmp	r5, #1
 800cd4c:	d002      	beq.n	800cd54 <_scanf_float+0x1d0>
 800cd4e:	2d04      	cmp	r5, #4
 800cd50:	f47f af48 	bne.w	800cbe4 <_scanf_float+0x60>
 800cd54:	3501      	adds	r5, #1
 800cd56:	b2ed      	uxtb	r5, r5
 800cd58:	e7d8      	b.n	800cd0c <_scanf_float+0x188>
 800cd5a:	f1ba 0f01 	cmp.w	sl, #1
 800cd5e:	f47f af41 	bne.w	800cbe4 <_scanf_float+0x60>
 800cd62:	f04f 0a02 	mov.w	sl, #2
 800cd66:	e7d1      	b.n	800cd0c <_scanf_float+0x188>
 800cd68:	b97d      	cbnz	r5, 800cd8a <_scanf_float+0x206>
 800cd6a:	f1b9 0f00 	cmp.w	r9, #0
 800cd6e:	f47f af3c 	bne.w	800cbea <_scanf_float+0x66>
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd7c:	f47f af39 	bne.w	800cbf2 <_scanf_float+0x6e>
 800cd80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd84:	6022      	str	r2, [r4, #0]
 800cd86:	2501      	movs	r5, #1
 800cd88:	e7c0      	b.n	800cd0c <_scanf_float+0x188>
 800cd8a:	2d03      	cmp	r5, #3
 800cd8c:	d0e2      	beq.n	800cd54 <_scanf_float+0x1d0>
 800cd8e:	2d05      	cmp	r5, #5
 800cd90:	e7de      	b.n	800cd50 <_scanf_float+0x1cc>
 800cd92:	2d02      	cmp	r5, #2
 800cd94:	f47f af26 	bne.w	800cbe4 <_scanf_float+0x60>
 800cd98:	2503      	movs	r5, #3
 800cd9a:	e7b7      	b.n	800cd0c <_scanf_float+0x188>
 800cd9c:	2d06      	cmp	r5, #6
 800cd9e:	f47f af21 	bne.w	800cbe4 <_scanf_float+0x60>
 800cda2:	2507      	movs	r5, #7
 800cda4:	e7b2      	b.n	800cd0c <_scanf_float+0x188>
 800cda6:	6822      	ldr	r2, [r4, #0]
 800cda8:	0591      	lsls	r1, r2, #22
 800cdaa:	f57f af1b 	bpl.w	800cbe4 <_scanf_float+0x60>
 800cdae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cdb2:	6022      	str	r2, [r4, #0]
 800cdb4:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdb8:	e7a8      	b.n	800cd0c <_scanf_float+0x188>
 800cdba:	6822      	ldr	r2, [r4, #0]
 800cdbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cdc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cdc4:	d006      	beq.n	800cdd4 <_scanf_float+0x250>
 800cdc6:	0550      	lsls	r0, r2, #21
 800cdc8:	f57f af0c 	bpl.w	800cbe4 <_scanf_float+0x60>
 800cdcc:	f1b9 0f00 	cmp.w	r9, #0
 800cdd0:	f43f af0f 	beq.w	800cbf2 <_scanf_float+0x6e>
 800cdd4:	0591      	lsls	r1, r2, #22
 800cdd6:	bf58      	it	pl
 800cdd8:	9901      	ldrpl	r1, [sp, #4]
 800cdda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cdde:	bf58      	it	pl
 800cde0:	eba9 0101 	subpl.w	r1, r9, r1
 800cde4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cde8:	bf58      	it	pl
 800cdea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cdee:	6022      	str	r2, [r4, #0]
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	e78a      	b.n	800cd0c <_scanf_float+0x188>
 800cdf6:	f04f 0a03 	mov.w	sl, #3
 800cdfa:	e787      	b.n	800cd0c <_scanf_float+0x188>
 800cdfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce00:	4639      	mov	r1, r7
 800ce02:	4640      	mov	r0, r8
 800ce04:	4798      	blx	r3
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f43f aedf 	beq.w	800cbca <_scanf_float+0x46>
 800ce0c:	e6ea      	b.n	800cbe4 <_scanf_float+0x60>
 800ce0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce16:	463a      	mov	r2, r7
 800ce18:	4640      	mov	r0, r8
 800ce1a:	4798      	blx	r3
 800ce1c:	6923      	ldr	r3, [r4, #16]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	6123      	str	r3, [r4, #16]
 800ce22:	e6ec      	b.n	800cbfe <_scanf_float+0x7a>
 800ce24:	1e6b      	subs	r3, r5, #1
 800ce26:	2b06      	cmp	r3, #6
 800ce28:	d825      	bhi.n	800ce76 <_scanf_float+0x2f2>
 800ce2a:	2d02      	cmp	r5, #2
 800ce2c:	d836      	bhi.n	800ce9c <_scanf_float+0x318>
 800ce2e:	455e      	cmp	r6, fp
 800ce30:	f67f aee8 	bls.w	800cc04 <_scanf_float+0x80>
 800ce34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce3c:	463a      	mov	r2, r7
 800ce3e:	4640      	mov	r0, r8
 800ce40:	4798      	blx	r3
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	e7f1      	b.n	800ce2e <_scanf_float+0x2aa>
 800ce4a:	9802      	ldr	r0, [sp, #8]
 800ce4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	463a      	mov	r2, r7
 800ce58:	4640      	mov	r0, r8
 800ce5a:	4798      	blx	r3
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	6123      	str	r3, [r4, #16]
 800ce62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce66:	fa5f fa8a 	uxtb.w	sl, sl
 800ce6a:	f1ba 0f02 	cmp.w	sl, #2
 800ce6e:	d1ec      	bne.n	800ce4a <_scanf_float+0x2c6>
 800ce70:	3d03      	subs	r5, #3
 800ce72:	b2ed      	uxtb	r5, r5
 800ce74:	1b76      	subs	r6, r6, r5
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	05da      	lsls	r2, r3, #23
 800ce7a:	d52f      	bpl.n	800cedc <_scanf_float+0x358>
 800ce7c:	055b      	lsls	r3, r3, #21
 800ce7e:	d510      	bpl.n	800cea2 <_scanf_float+0x31e>
 800ce80:	455e      	cmp	r6, fp
 800ce82:	f67f aebf 	bls.w	800cc04 <_scanf_float+0x80>
 800ce86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce8e:	463a      	mov	r2, r7
 800ce90:	4640      	mov	r0, r8
 800ce92:	4798      	blx	r3
 800ce94:	6923      	ldr	r3, [r4, #16]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	e7f1      	b.n	800ce80 <_scanf_float+0x2fc>
 800ce9c:	46aa      	mov	sl, r5
 800ce9e:	9602      	str	r6, [sp, #8]
 800cea0:	e7df      	b.n	800ce62 <_scanf_float+0x2de>
 800cea2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cea6:	6923      	ldr	r3, [r4, #16]
 800cea8:	2965      	cmp	r1, #101	; 0x65
 800ceaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800ceae:	f106 35ff 	add.w	r5, r6, #4294967295
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	d00c      	beq.n	800ced0 <_scanf_float+0x34c>
 800ceb6:	2945      	cmp	r1, #69	; 0x45
 800ceb8:	d00a      	beq.n	800ced0 <_scanf_float+0x34c>
 800ceba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cebe:	463a      	mov	r2, r7
 800cec0:	4640      	mov	r0, r8
 800cec2:	4798      	blx	r3
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	1eb5      	subs	r5, r6, #2
 800cece:	6123      	str	r3, [r4, #16]
 800ced0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ced4:	463a      	mov	r2, r7
 800ced6:	4640      	mov	r0, r8
 800ced8:	4798      	blx	r3
 800ceda:	462e      	mov	r6, r5
 800cedc:	6825      	ldr	r5, [r4, #0]
 800cede:	f015 0510 	ands.w	r5, r5, #16
 800cee2:	d159      	bne.n	800cf98 <_scanf_float+0x414>
 800cee4:	7035      	strb	r5, [r6, #0]
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ceec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cef0:	d11b      	bne.n	800cf2a <_scanf_float+0x3a6>
 800cef2:	9b01      	ldr	r3, [sp, #4]
 800cef4:	454b      	cmp	r3, r9
 800cef6:	eba3 0209 	sub.w	r2, r3, r9
 800cefa:	d123      	bne.n	800cf44 <_scanf_float+0x3c0>
 800cefc:	2200      	movs	r2, #0
 800cefe:	4659      	mov	r1, fp
 800cf00:	4640      	mov	r0, r8
 800cf02:	f000 ff33 	bl	800dd6c <_strtod_r>
 800cf06:	6822      	ldr	r2, [r4, #0]
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	f012 0f02 	tst.w	r2, #2
 800cf0e:	ec57 6b10 	vmov	r6, r7, d0
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	d021      	beq.n	800cf5a <_scanf_float+0x3d6>
 800cf16:	9903      	ldr	r1, [sp, #12]
 800cf18:	1d1a      	adds	r2, r3, #4
 800cf1a:	600a      	str	r2, [r1, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	e9c3 6700 	strd	r6, r7, [r3]
 800cf22:	68e3      	ldr	r3, [r4, #12]
 800cf24:	3301      	adds	r3, #1
 800cf26:	60e3      	str	r3, [r4, #12]
 800cf28:	e66d      	b.n	800cc06 <_scanf_float+0x82>
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0e5      	beq.n	800cefc <_scanf_float+0x378>
 800cf30:	9905      	ldr	r1, [sp, #20]
 800cf32:	230a      	movs	r3, #10
 800cf34:	462a      	mov	r2, r5
 800cf36:	3101      	adds	r1, #1
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f000 ff9f 	bl	800de7c <_strtol_r>
 800cf3e:	9b04      	ldr	r3, [sp, #16]
 800cf40:	9e05      	ldr	r6, [sp, #20]
 800cf42:	1ac2      	subs	r2, r0, r3
 800cf44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cf48:	429e      	cmp	r6, r3
 800cf4a:	bf28      	it	cs
 800cf4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cf50:	4912      	ldr	r1, [pc, #72]	; (800cf9c <_scanf_float+0x418>)
 800cf52:	4630      	mov	r0, r6
 800cf54:	f000 f82c 	bl	800cfb0 <siprintf>
 800cf58:	e7d0      	b.n	800cefc <_scanf_float+0x378>
 800cf5a:	9903      	ldr	r1, [sp, #12]
 800cf5c:	f012 0f04 	tst.w	r2, #4
 800cf60:	f103 0204 	add.w	r2, r3, #4
 800cf64:	600a      	str	r2, [r1, #0]
 800cf66:	d1d9      	bne.n	800cf1c <_scanf_float+0x398>
 800cf68:	f8d3 8000 	ldr.w	r8, [r3]
 800cf6c:	ee10 2a10 	vmov	r2, s0
 800cf70:	ee10 0a10 	vmov	r0, s0
 800cf74:	463b      	mov	r3, r7
 800cf76:	4639      	mov	r1, r7
 800cf78:	f7f3 fde8 	bl	8000b4c <__aeabi_dcmpun>
 800cf7c:	b128      	cbz	r0, 800cf8a <_scanf_float+0x406>
 800cf7e:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <_scanf_float+0x41c>)
 800cf80:	f000 f810 	bl	800cfa4 <nanf>
 800cf84:	ed88 0a00 	vstr	s0, [r8]
 800cf88:	e7cb      	b.n	800cf22 <_scanf_float+0x39e>
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	f7f3 fe3b 	bl	8000c08 <__aeabi_d2f>
 800cf92:	f8c8 0000 	str.w	r0, [r8]
 800cf96:	e7c4      	b.n	800cf22 <_scanf_float+0x39e>
 800cf98:	2500      	movs	r5, #0
 800cf9a:	e634      	b.n	800cc06 <_scanf_float+0x82>
 800cf9c:	08011d12 	.word	0x08011d12
 800cfa0:	080121d3 	.word	0x080121d3

0800cfa4 <nanf>:
 800cfa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cfac <nanf+0x8>
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	7fc00000 	.word	0x7fc00000

0800cfb0 <siprintf>:
 800cfb0:	b40e      	push	{r1, r2, r3}
 800cfb2:	b500      	push	{lr}
 800cfb4:	b09c      	sub	sp, #112	; 0x70
 800cfb6:	ab1d      	add	r3, sp, #116	; 0x74
 800cfb8:	9002      	str	r0, [sp, #8]
 800cfba:	9006      	str	r0, [sp, #24]
 800cfbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfc0:	4809      	ldr	r0, [pc, #36]	; (800cfe8 <siprintf+0x38>)
 800cfc2:	9107      	str	r1, [sp, #28]
 800cfc4:	9104      	str	r1, [sp, #16]
 800cfc6:	4909      	ldr	r1, [pc, #36]	; (800cfec <siprintf+0x3c>)
 800cfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfcc:	9105      	str	r1, [sp, #20]
 800cfce:	6800      	ldr	r0, [r0, #0]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	a902      	add	r1, sp, #8
 800cfd4:	f003 fad4 	bl	8010580 <_svfiprintf_r>
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	b01c      	add	sp, #112	; 0x70
 800cfe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe4:	b003      	add	sp, #12
 800cfe6:	4770      	bx	lr
 800cfe8:	20000020 	.word	0x20000020
 800cfec:	ffff0208 	.word	0xffff0208

0800cff0 <siscanf>:
 800cff0:	b40e      	push	{r1, r2, r3}
 800cff2:	b510      	push	{r4, lr}
 800cff4:	b09f      	sub	sp, #124	; 0x7c
 800cff6:	ac21      	add	r4, sp, #132	; 0x84
 800cff8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cffc:	f854 2b04 	ldr.w	r2, [r4], #4
 800d000:	9201      	str	r2, [sp, #4]
 800d002:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d006:	9004      	str	r0, [sp, #16]
 800d008:	9008      	str	r0, [sp, #32]
 800d00a:	f7f3 f8eb 	bl	80001e4 <strlen>
 800d00e:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <siscanf+0x50>)
 800d010:	9005      	str	r0, [sp, #20]
 800d012:	9009      	str	r0, [sp, #36]	; 0x24
 800d014:	930d      	str	r3, [sp, #52]	; 0x34
 800d016:	480b      	ldr	r0, [pc, #44]	; (800d044 <siscanf+0x54>)
 800d018:	9a01      	ldr	r2, [sp, #4]
 800d01a:	6800      	ldr	r0, [r0, #0]
 800d01c:	9403      	str	r4, [sp, #12]
 800d01e:	2300      	movs	r3, #0
 800d020:	9311      	str	r3, [sp, #68]	; 0x44
 800d022:	9316      	str	r3, [sp, #88]	; 0x58
 800d024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d028:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d02c:	a904      	add	r1, sp, #16
 800d02e:	4623      	mov	r3, r4
 800d030:	f003 fc00 	bl	8010834 <__ssvfiscanf_r>
 800d034:	b01f      	add	sp, #124	; 0x7c
 800d036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03a:	b003      	add	sp, #12
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	0800d06b 	.word	0x0800d06b
 800d044:	20000020 	.word	0x20000020

0800d048 <__sread>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	f003 feba 	bl	8010dc8 <_read_r>
 800d054:	2800      	cmp	r0, #0
 800d056:	bfab      	itete	ge
 800d058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d05a:	89a3      	ldrhlt	r3, [r4, #12]
 800d05c:	181b      	addge	r3, r3, r0
 800d05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d062:	bfac      	ite	ge
 800d064:	6563      	strge	r3, [r4, #84]	; 0x54
 800d066:	81a3      	strhlt	r3, [r4, #12]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__seofread>:
 800d06a:	2000      	movs	r0, #0
 800d06c:	4770      	bx	lr

0800d06e <__swrite>:
 800d06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d072:	461f      	mov	r7, r3
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	05db      	lsls	r3, r3, #23
 800d078:	4605      	mov	r5, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	4616      	mov	r6, r2
 800d07e:	d505      	bpl.n	800d08c <__swrite+0x1e>
 800d080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d084:	2302      	movs	r3, #2
 800d086:	2200      	movs	r2, #0
 800d088:	f002 fc32 	bl	800f8f0 <_lseek_r>
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	4632      	mov	r2, r6
 800d09a:	463b      	mov	r3, r7
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a2:	f001 b9b1 	b.w	800e408 <_write_r>

0800d0a6 <__sseek>:
 800d0a6:	b510      	push	{r4, lr}
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ae:	f002 fc1f 	bl	800f8f0 <_lseek_r>
 800d0b2:	1c43      	adds	r3, r0, #1
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	bf15      	itete	ne
 800d0b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0c2:	81a3      	strheq	r3, [r4, #12]
 800d0c4:	bf18      	it	ne
 800d0c6:	81a3      	strhne	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__sclose>:
 800d0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ce:	f001 b9ad 	b.w	800e42c <_close_r>

0800d0d2 <strchr>:
 800d0d2:	b2c9      	uxtb	r1, r1
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0da:	b11a      	cbz	r2, 800d0e4 <strchr+0x12>
 800d0dc:	428a      	cmp	r2, r1
 800d0de:	d1f9      	bne.n	800d0d4 <strchr+0x2>
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	4770      	bx	lr
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	bf18      	it	ne
 800d0e8:	2300      	movne	r3, #0
 800d0ea:	e7f9      	b.n	800d0e0 <strchr+0xe>

0800d0ec <strcpy>:
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0f2:	f803 2b01 	strb.w	r2, [r3], #1
 800d0f6:	2a00      	cmp	r2, #0
 800d0f8:	d1f9      	bne.n	800d0ee <strcpy+0x2>
 800d0fa:	4770      	bx	lr

0800d0fc <strstr>:
 800d0fc:	780a      	ldrb	r2, [r1, #0]
 800d0fe:	b570      	push	{r4, r5, r6, lr}
 800d100:	b96a      	cbnz	r2, 800d11e <strstr+0x22>
 800d102:	bd70      	pop	{r4, r5, r6, pc}
 800d104:	429a      	cmp	r2, r3
 800d106:	d109      	bne.n	800d11c <strstr+0x20>
 800d108:	460c      	mov	r4, r1
 800d10a:	4605      	mov	r5, r0
 800d10c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d110:	2b00      	cmp	r3, #0
 800d112:	d0f6      	beq.n	800d102 <strstr+0x6>
 800d114:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d118:	429e      	cmp	r6, r3
 800d11a:	d0f7      	beq.n	800d10c <strstr+0x10>
 800d11c:	3001      	adds	r0, #1
 800d11e:	7803      	ldrb	r3, [r0, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1ef      	bne.n	800d104 <strstr+0x8>
 800d124:	4618      	mov	r0, r3
 800d126:	e7ec      	b.n	800d102 <strstr+0x6>

0800d128 <sulp>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	ec45 4b10 	vmov	d0, r4, r5
 800d132:	4616      	mov	r6, r2
 800d134:	f002 ff82 	bl	801003c <__ulp>
 800d138:	ec51 0b10 	vmov	r0, r1, d0
 800d13c:	b17e      	cbz	r6, 800d15e <sulp+0x36>
 800d13e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d146:	2b00      	cmp	r3, #0
 800d148:	dd09      	ble.n	800d15e <sulp+0x36>
 800d14a:	051b      	lsls	r3, r3, #20
 800d14c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d150:	2400      	movs	r4, #0
 800d152:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d156:	4622      	mov	r2, r4
 800d158:	462b      	mov	r3, r5
 800d15a:	f7f3 fa5d 	bl	8000618 <__aeabi_dmul>
 800d15e:	bd70      	pop	{r4, r5, r6, pc}

0800d160 <_strtod_l>:
 800d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d164:	ed2d 8b02 	vpush	{d8}
 800d168:	b09d      	sub	sp, #116	; 0x74
 800d16a:	461f      	mov	r7, r3
 800d16c:	2300      	movs	r3, #0
 800d16e:	9318      	str	r3, [sp, #96]	; 0x60
 800d170:	4ba2      	ldr	r3, [pc, #648]	; (800d3fc <_strtod_l+0x29c>)
 800d172:	9213      	str	r2, [sp, #76]	; 0x4c
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	9305      	str	r3, [sp, #20]
 800d178:	4604      	mov	r4, r0
 800d17a:	4618      	mov	r0, r3
 800d17c:	4688      	mov	r8, r1
 800d17e:	f7f3 f831 	bl	80001e4 <strlen>
 800d182:	f04f 0a00 	mov.w	sl, #0
 800d186:	4605      	mov	r5, r0
 800d188:	f04f 0b00 	mov.w	fp, #0
 800d18c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d192:	781a      	ldrb	r2, [r3, #0]
 800d194:	2a2b      	cmp	r2, #43	; 0x2b
 800d196:	d04e      	beq.n	800d236 <_strtod_l+0xd6>
 800d198:	d83b      	bhi.n	800d212 <_strtod_l+0xb2>
 800d19a:	2a0d      	cmp	r2, #13
 800d19c:	d834      	bhi.n	800d208 <_strtod_l+0xa8>
 800d19e:	2a08      	cmp	r2, #8
 800d1a0:	d834      	bhi.n	800d20c <_strtod_l+0xac>
 800d1a2:	2a00      	cmp	r2, #0
 800d1a4:	d03e      	beq.n	800d224 <_strtod_l+0xc4>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d1ac:	7833      	ldrb	r3, [r6, #0]
 800d1ae:	2b30      	cmp	r3, #48	; 0x30
 800d1b0:	f040 80b0 	bne.w	800d314 <_strtod_l+0x1b4>
 800d1b4:	7873      	ldrb	r3, [r6, #1]
 800d1b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1ba:	2b58      	cmp	r3, #88	; 0x58
 800d1bc:	d168      	bne.n	800d290 <_strtod_l+0x130>
 800d1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	ab18      	add	r3, sp, #96	; 0x60
 800d1c4:	9702      	str	r7, [sp, #8]
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	4a8d      	ldr	r2, [pc, #564]	; (800d400 <_strtod_l+0x2a0>)
 800d1ca:	ab19      	add	r3, sp, #100	; 0x64
 800d1cc:	a917      	add	r1, sp, #92	; 0x5c
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f002 f834 	bl	800f23c <__gethex>
 800d1d4:	f010 0707 	ands.w	r7, r0, #7
 800d1d8:	4605      	mov	r5, r0
 800d1da:	d005      	beq.n	800d1e8 <_strtod_l+0x88>
 800d1dc:	2f06      	cmp	r7, #6
 800d1de:	d12c      	bne.n	800d23a <_strtod_l+0xda>
 800d1e0:	3601      	adds	r6, #1
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f040 8590 	bne.w	800dd10 <_strtod_l+0xbb0>
 800d1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f2:	b1eb      	cbz	r3, 800d230 <_strtod_l+0xd0>
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1fa:	ec43 2b10 	vmov	d0, r2, r3
 800d1fe:	b01d      	add	sp, #116	; 0x74
 800d200:	ecbd 8b02 	vpop	{d8}
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	2a20      	cmp	r2, #32
 800d20a:	d1cc      	bne.n	800d1a6 <_strtod_l+0x46>
 800d20c:	3301      	adds	r3, #1
 800d20e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d210:	e7be      	b.n	800d190 <_strtod_l+0x30>
 800d212:	2a2d      	cmp	r2, #45	; 0x2d
 800d214:	d1c7      	bne.n	800d1a6 <_strtod_l+0x46>
 800d216:	2201      	movs	r2, #1
 800d218:	920a      	str	r2, [sp, #40]	; 0x28
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1c2      	bne.n	800d1aa <_strtod_l+0x4a>
 800d224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d226:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f040 856e 	bne.w	800dd0c <_strtod_l+0xbac>
 800d230:	4652      	mov	r2, sl
 800d232:	465b      	mov	r3, fp
 800d234:	e7e1      	b.n	800d1fa <_strtod_l+0x9a>
 800d236:	2200      	movs	r2, #0
 800d238:	e7ee      	b.n	800d218 <_strtod_l+0xb8>
 800d23a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d23c:	b13a      	cbz	r2, 800d24e <_strtod_l+0xee>
 800d23e:	2135      	movs	r1, #53	; 0x35
 800d240:	a81a      	add	r0, sp, #104	; 0x68
 800d242:	f003 f806 	bl	8010252 <__copybits>
 800d246:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d248:	4620      	mov	r0, r4
 800d24a:	f002 fbc5 	bl	800f9d8 <_Bfree>
 800d24e:	3f01      	subs	r7, #1
 800d250:	2f04      	cmp	r7, #4
 800d252:	d806      	bhi.n	800d262 <_strtod_l+0x102>
 800d254:	e8df f007 	tbb	[pc, r7]
 800d258:	1714030a 	.word	0x1714030a
 800d25c:	0a          	.byte	0x0a
 800d25d:	00          	.byte	0x00
 800d25e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d262:	0728      	lsls	r0, r5, #28
 800d264:	d5c0      	bpl.n	800d1e8 <_strtod_l+0x88>
 800d266:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d26a:	e7bd      	b.n	800d1e8 <_strtod_l+0x88>
 800d26c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d272:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d276:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d27a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d27e:	e7f0      	b.n	800d262 <_strtod_l+0x102>
 800d280:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d404 <_strtod_l+0x2a4>
 800d284:	e7ed      	b.n	800d262 <_strtod_l+0x102>
 800d286:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d28a:	f04f 3aff 	mov.w	sl, #4294967295
 800d28e:	e7e8      	b.n	800d262 <_strtod_l+0x102>
 800d290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	9217      	str	r2, [sp, #92]	; 0x5c
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	2b30      	cmp	r3, #48	; 0x30
 800d29a:	d0f9      	beq.n	800d290 <_strtod_l+0x130>
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d0a3      	beq.n	800d1e8 <_strtod_l+0x88>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f04f 0900 	mov.w	r9, #0
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2aa:	9308      	str	r3, [sp, #32]
 800d2ac:	f8cd 901c 	str.w	r9, [sp, #28]
 800d2b0:	464f      	mov	r7, r9
 800d2b2:	220a      	movs	r2, #10
 800d2b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d2b6:	7806      	ldrb	r6, [r0, #0]
 800d2b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d2bc:	b2d9      	uxtb	r1, r3
 800d2be:	2909      	cmp	r1, #9
 800d2c0:	d92a      	bls.n	800d318 <_strtod_l+0x1b8>
 800d2c2:	9905      	ldr	r1, [sp, #20]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	f003 fde3 	bl	8010e90 <strncmp>
 800d2ca:	b398      	cbz	r0, 800d334 <_strtod_l+0x1d4>
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	4632      	mov	r2, r6
 800d2d0:	463d      	mov	r5, r7
 800d2d2:	9005      	str	r0, [sp, #20]
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2a65      	cmp	r2, #101	; 0x65
 800d2d8:	d001      	beq.n	800d2de <_strtod_l+0x17e>
 800d2da:	2a45      	cmp	r2, #69	; 0x45
 800d2dc:	d118      	bne.n	800d310 <_strtod_l+0x1b0>
 800d2de:	b91d      	cbnz	r5, 800d2e8 <_strtod_l+0x188>
 800d2e0:	9a04      	ldr	r2, [sp, #16]
 800d2e2:	4302      	orrs	r2, r0
 800d2e4:	d09e      	beq.n	800d224 <_strtod_l+0xc4>
 800d2e6:	2500      	movs	r5, #0
 800d2e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d2ec:	f108 0201 	add.w	r2, r8, #1
 800d2f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d2f6:	2a2b      	cmp	r2, #43	; 0x2b
 800d2f8:	d075      	beq.n	800d3e6 <_strtod_l+0x286>
 800d2fa:	2a2d      	cmp	r2, #45	; 0x2d
 800d2fc:	d07b      	beq.n	800d3f6 <_strtod_l+0x296>
 800d2fe:	f04f 0c00 	mov.w	ip, #0
 800d302:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d306:	2909      	cmp	r1, #9
 800d308:	f240 8082 	bls.w	800d410 <_strtod_l+0x2b0>
 800d30c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d310:	2600      	movs	r6, #0
 800d312:	e09d      	b.n	800d450 <_strtod_l+0x2f0>
 800d314:	2300      	movs	r3, #0
 800d316:	e7c4      	b.n	800d2a2 <_strtod_l+0x142>
 800d318:	2f08      	cmp	r7, #8
 800d31a:	bfd8      	it	le
 800d31c:	9907      	ldrle	r1, [sp, #28]
 800d31e:	f100 0001 	add.w	r0, r0, #1
 800d322:	bfda      	itte	le
 800d324:	fb02 3301 	mlale	r3, r2, r1, r3
 800d328:	9307      	strle	r3, [sp, #28]
 800d32a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d32e:	3701      	adds	r7, #1
 800d330:	9017      	str	r0, [sp, #92]	; 0x5c
 800d332:	e7bf      	b.n	800d2b4 <_strtod_l+0x154>
 800d334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d336:	195a      	adds	r2, r3, r5
 800d338:	9217      	str	r2, [sp, #92]	; 0x5c
 800d33a:	5d5a      	ldrb	r2, [r3, r5]
 800d33c:	2f00      	cmp	r7, #0
 800d33e:	d037      	beq.n	800d3b0 <_strtod_l+0x250>
 800d340:	9005      	str	r0, [sp, #20]
 800d342:	463d      	mov	r5, r7
 800d344:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d348:	2b09      	cmp	r3, #9
 800d34a:	d912      	bls.n	800d372 <_strtod_l+0x212>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e7c2      	b.n	800d2d6 <_strtod_l+0x176>
 800d350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	9217      	str	r2, [sp, #92]	; 0x5c
 800d356:	785a      	ldrb	r2, [r3, #1]
 800d358:	3001      	adds	r0, #1
 800d35a:	2a30      	cmp	r2, #48	; 0x30
 800d35c:	d0f8      	beq.n	800d350 <_strtod_l+0x1f0>
 800d35e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d362:	2b08      	cmp	r3, #8
 800d364:	f200 84d9 	bhi.w	800dd1a <_strtod_l+0xbba>
 800d368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d36a:	9005      	str	r0, [sp, #20]
 800d36c:	2000      	movs	r0, #0
 800d36e:	9308      	str	r3, [sp, #32]
 800d370:	4605      	mov	r5, r0
 800d372:	3a30      	subs	r2, #48	; 0x30
 800d374:	f100 0301 	add.w	r3, r0, #1
 800d378:	d014      	beq.n	800d3a4 <_strtod_l+0x244>
 800d37a:	9905      	ldr	r1, [sp, #20]
 800d37c:	4419      	add	r1, r3
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	462b      	mov	r3, r5
 800d382:	eb00 0e05 	add.w	lr, r0, r5
 800d386:	210a      	movs	r1, #10
 800d388:	4573      	cmp	r3, lr
 800d38a:	d113      	bne.n	800d3b4 <_strtod_l+0x254>
 800d38c:	182b      	adds	r3, r5, r0
 800d38e:	2b08      	cmp	r3, #8
 800d390:	f105 0501 	add.w	r5, r5, #1
 800d394:	4405      	add	r5, r0
 800d396:	dc1c      	bgt.n	800d3d2 <_strtod_l+0x272>
 800d398:	9907      	ldr	r1, [sp, #28]
 800d39a:	230a      	movs	r3, #10
 800d39c:	fb03 2301 	mla	r3, r3, r1, r2
 800d3a0:	9307      	str	r3, [sp, #28]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d3a6:	1c51      	adds	r1, r2, #1
 800d3a8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d3aa:	7852      	ldrb	r2, [r2, #1]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	e7c9      	b.n	800d344 <_strtod_l+0x1e4>
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	e7d2      	b.n	800d35a <_strtod_l+0x1fa>
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	dc04      	bgt.n	800d3c2 <_strtod_l+0x262>
 800d3b8:	9e07      	ldr	r6, [sp, #28]
 800d3ba:	434e      	muls	r6, r1
 800d3bc:	9607      	str	r6, [sp, #28]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	e7e2      	b.n	800d388 <_strtod_l+0x228>
 800d3c2:	f103 0c01 	add.w	ip, r3, #1
 800d3c6:	f1bc 0f10 	cmp.w	ip, #16
 800d3ca:	bfd8      	it	le
 800d3cc:	fb01 f909 	mulle.w	r9, r1, r9
 800d3d0:	e7f5      	b.n	800d3be <_strtod_l+0x25e>
 800d3d2:	2d10      	cmp	r5, #16
 800d3d4:	bfdc      	itt	le
 800d3d6:	230a      	movle	r3, #10
 800d3d8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d3dc:	e7e1      	b.n	800d3a2 <_strtod_l+0x242>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	9305      	str	r3, [sp, #20]
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e77c      	b.n	800d2e0 <_strtod_l+0x180>
 800d3e6:	f04f 0c00 	mov.w	ip, #0
 800d3ea:	f108 0202 	add.w	r2, r8, #2
 800d3ee:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d3f4:	e785      	b.n	800d302 <_strtod_l+0x1a2>
 800d3f6:	f04f 0c01 	mov.w	ip, #1
 800d3fa:	e7f6      	b.n	800d3ea <_strtod_l+0x28a>
 800d3fc:	08011f9c 	.word	0x08011f9c
 800d400:	08011d18 	.word	0x08011d18
 800d404:	7ff00000 	.word	0x7ff00000
 800d408:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d40a:	1c51      	adds	r1, r2, #1
 800d40c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d40e:	7852      	ldrb	r2, [r2, #1]
 800d410:	2a30      	cmp	r2, #48	; 0x30
 800d412:	d0f9      	beq.n	800d408 <_strtod_l+0x2a8>
 800d414:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d418:	2908      	cmp	r1, #8
 800d41a:	f63f af79 	bhi.w	800d310 <_strtod_l+0x1b0>
 800d41e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d422:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d424:	9206      	str	r2, [sp, #24]
 800d426:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d428:	1c51      	adds	r1, r2, #1
 800d42a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d42c:	7852      	ldrb	r2, [r2, #1]
 800d42e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d432:	2e09      	cmp	r6, #9
 800d434:	d937      	bls.n	800d4a6 <_strtod_l+0x346>
 800d436:	9e06      	ldr	r6, [sp, #24]
 800d438:	1b89      	subs	r1, r1, r6
 800d43a:	2908      	cmp	r1, #8
 800d43c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d440:	dc02      	bgt.n	800d448 <_strtod_l+0x2e8>
 800d442:	4576      	cmp	r6, lr
 800d444:	bfa8      	it	ge
 800d446:	4676      	movge	r6, lr
 800d448:	f1bc 0f00 	cmp.w	ip, #0
 800d44c:	d000      	beq.n	800d450 <_strtod_l+0x2f0>
 800d44e:	4276      	negs	r6, r6
 800d450:	2d00      	cmp	r5, #0
 800d452:	d14d      	bne.n	800d4f0 <_strtod_l+0x390>
 800d454:	9904      	ldr	r1, [sp, #16]
 800d456:	4301      	orrs	r1, r0
 800d458:	f47f aec6 	bne.w	800d1e8 <_strtod_l+0x88>
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f47f aee1 	bne.w	800d224 <_strtod_l+0xc4>
 800d462:	2a69      	cmp	r2, #105	; 0x69
 800d464:	d027      	beq.n	800d4b6 <_strtod_l+0x356>
 800d466:	dc24      	bgt.n	800d4b2 <_strtod_l+0x352>
 800d468:	2a49      	cmp	r2, #73	; 0x49
 800d46a:	d024      	beq.n	800d4b6 <_strtod_l+0x356>
 800d46c:	2a4e      	cmp	r2, #78	; 0x4e
 800d46e:	f47f aed9 	bne.w	800d224 <_strtod_l+0xc4>
 800d472:	499f      	ldr	r1, [pc, #636]	; (800d6f0 <_strtod_l+0x590>)
 800d474:	a817      	add	r0, sp, #92	; 0x5c
 800d476:	f002 f939 	bl	800f6ec <__match>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f43f aed2 	beq.w	800d224 <_strtod_l+0xc4>
 800d480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b28      	cmp	r3, #40	; 0x28
 800d486:	d12d      	bne.n	800d4e4 <_strtod_l+0x384>
 800d488:	499a      	ldr	r1, [pc, #616]	; (800d6f4 <_strtod_l+0x594>)
 800d48a:	aa1a      	add	r2, sp, #104	; 0x68
 800d48c:	a817      	add	r0, sp, #92	; 0x5c
 800d48e:	f002 f941 	bl	800f714 <__hexnan>
 800d492:	2805      	cmp	r0, #5
 800d494:	d126      	bne.n	800d4e4 <_strtod_l+0x384>
 800d496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d498:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d49c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d4a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d4a4:	e6a0      	b.n	800d1e8 <_strtod_l+0x88>
 800d4a6:	210a      	movs	r1, #10
 800d4a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d4ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d4b0:	e7b9      	b.n	800d426 <_strtod_l+0x2c6>
 800d4b2:	2a6e      	cmp	r2, #110	; 0x6e
 800d4b4:	e7db      	b.n	800d46e <_strtod_l+0x30e>
 800d4b6:	4990      	ldr	r1, [pc, #576]	; (800d6f8 <_strtod_l+0x598>)
 800d4b8:	a817      	add	r0, sp, #92	; 0x5c
 800d4ba:	f002 f917 	bl	800f6ec <__match>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	f43f aeb0 	beq.w	800d224 <_strtod_l+0xc4>
 800d4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4c6:	498d      	ldr	r1, [pc, #564]	; (800d6fc <_strtod_l+0x59c>)
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	a817      	add	r0, sp, #92	; 0x5c
 800d4cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4ce:	f002 f90d 	bl	800f6ec <__match>
 800d4d2:	b910      	cbnz	r0, 800d4da <_strtod_l+0x37a>
 800d4d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d70c <_strtod_l+0x5ac>
 800d4de:	f04f 0a00 	mov.w	sl, #0
 800d4e2:	e681      	b.n	800d1e8 <_strtod_l+0x88>
 800d4e4:	4886      	ldr	r0, [pc, #536]	; (800d700 <_strtod_l+0x5a0>)
 800d4e6:	f003 fc83 	bl	8010df0 <nan>
 800d4ea:	ec5b ab10 	vmov	sl, fp, d0
 800d4ee:	e67b      	b.n	800d1e8 <_strtod_l+0x88>
 800d4f0:	9b05      	ldr	r3, [sp, #20]
 800d4f2:	9807      	ldr	r0, [sp, #28]
 800d4f4:	1af3      	subs	r3, r6, r3
 800d4f6:	2f00      	cmp	r7, #0
 800d4f8:	bf08      	it	eq
 800d4fa:	462f      	moveq	r7, r5
 800d4fc:	2d10      	cmp	r5, #16
 800d4fe:	9306      	str	r3, [sp, #24]
 800d500:	46a8      	mov	r8, r5
 800d502:	bfa8      	it	ge
 800d504:	f04f 0810 	movge.w	r8, #16
 800d508:	f7f3 f80c 	bl	8000524 <__aeabi_ui2d>
 800d50c:	2d09      	cmp	r5, #9
 800d50e:	4682      	mov	sl, r0
 800d510:	468b      	mov	fp, r1
 800d512:	dd13      	ble.n	800d53c <_strtod_l+0x3dc>
 800d514:	4b7b      	ldr	r3, [pc, #492]	; (800d704 <_strtod_l+0x5a4>)
 800d516:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d51a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d51e:	f7f3 f87b 	bl	8000618 <__aeabi_dmul>
 800d522:	4682      	mov	sl, r0
 800d524:	4648      	mov	r0, r9
 800d526:	468b      	mov	fp, r1
 800d528:	f7f2 fffc 	bl	8000524 <__aeabi_ui2d>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4650      	mov	r0, sl
 800d532:	4659      	mov	r1, fp
 800d534:	f7f2 feba 	bl	80002ac <__adddf3>
 800d538:	4682      	mov	sl, r0
 800d53a:	468b      	mov	fp, r1
 800d53c:	2d0f      	cmp	r5, #15
 800d53e:	dc38      	bgt.n	800d5b2 <_strtod_l+0x452>
 800d540:	9b06      	ldr	r3, [sp, #24]
 800d542:	2b00      	cmp	r3, #0
 800d544:	f43f ae50 	beq.w	800d1e8 <_strtod_l+0x88>
 800d548:	dd24      	ble.n	800d594 <_strtod_l+0x434>
 800d54a:	2b16      	cmp	r3, #22
 800d54c:	dc0b      	bgt.n	800d566 <_strtod_l+0x406>
 800d54e:	496d      	ldr	r1, [pc, #436]	; (800d704 <_strtod_l+0x5a4>)
 800d550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d554:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d558:	4652      	mov	r2, sl
 800d55a:	465b      	mov	r3, fp
 800d55c:	f7f3 f85c 	bl	8000618 <__aeabi_dmul>
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	e640      	b.n	800d1e8 <_strtod_l+0x88>
 800d566:	9a06      	ldr	r2, [sp, #24]
 800d568:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d56c:	4293      	cmp	r3, r2
 800d56e:	db20      	blt.n	800d5b2 <_strtod_l+0x452>
 800d570:	4c64      	ldr	r4, [pc, #400]	; (800d704 <_strtod_l+0x5a4>)
 800d572:	f1c5 050f 	rsb	r5, r5, #15
 800d576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d57a:	4652      	mov	r2, sl
 800d57c:	465b      	mov	r3, fp
 800d57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d582:	f7f3 f849 	bl	8000618 <__aeabi_dmul>
 800d586:	9b06      	ldr	r3, [sp, #24]
 800d588:	1b5d      	subs	r5, r3, r5
 800d58a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d58e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d592:	e7e3      	b.n	800d55c <_strtod_l+0x3fc>
 800d594:	9b06      	ldr	r3, [sp, #24]
 800d596:	3316      	adds	r3, #22
 800d598:	db0b      	blt.n	800d5b2 <_strtod_l+0x452>
 800d59a:	9b05      	ldr	r3, [sp, #20]
 800d59c:	1b9e      	subs	r6, r3, r6
 800d59e:	4b59      	ldr	r3, [pc, #356]	; (800d704 <_strtod_l+0x5a4>)
 800d5a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5a8:	4650      	mov	r0, sl
 800d5aa:	4659      	mov	r1, fp
 800d5ac:	f7f3 f95e 	bl	800086c <__aeabi_ddiv>
 800d5b0:	e7d6      	b.n	800d560 <_strtod_l+0x400>
 800d5b2:	9b06      	ldr	r3, [sp, #24]
 800d5b4:	eba5 0808 	sub.w	r8, r5, r8
 800d5b8:	4498      	add	r8, r3
 800d5ba:	f1b8 0f00 	cmp.w	r8, #0
 800d5be:	dd74      	ble.n	800d6aa <_strtod_l+0x54a>
 800d5c0:	f018 030f 	ands.w	r3, r8, #15
 800d5c4:	d00a      	beq.n	800d5dc <_strtod_l+0x47c>
 800d5c6:	494f      	ldr	r1, [pc, #316]	; (800d704 <_strtod_l+0x5a4>)
 800d5c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5cc:	4652      	mov	r2, sl
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5d4:	f7f3 f820 	bl	8000618 <__aeabi_dmul>
 800d5d8:	4682      	mov	sl, r0
 800d5da:	468b      	mov	fp, r1
 800d5dc:	f038 080f 	bics.w	r8, r8, #15
 800d5e0:	d04f      	beq.n	800d682 <_strtod_l+0x522>
 800d5e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d5e6:	dd22      	ble.n	800d62e <_strtod_l+0x4ce>
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	462e      	mov	r6, r5
 800d5ec:	9507      	str	r5, [sp, #28]
 800d5ee:	9505      	str	r5, [sp, #20]
 800d5f0:	2322      	movs	r3, #34	; 0x22
 800d5f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d70c <_strtod_l+0x5ac>
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	f04f 0a00 	mov.w	sl, #0
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f43f adf2 	beq.w	800d1e8 <_strtod_l+0x88>
 800d604:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d606:	4620      	mov	r0, r4
 800d608:	f002 f9e6 	bl	800f9d8 <_Bfree>
 800d60c:	9905      	ldr	r1, [sp, #20]
 800d60e:	4620      	mov	r0, r4
 800d610:	f002 f9e2 	bl	800f9d8 <_Bfree>
 800d614:	4631      	mov	r1, r6
 800d616:	4620      	mov	r0, r4
 800d618:	f002 f9de 	bl	800f9d8 <_Bfree>
 800d61c:	9907      	ldr	r1, [sp, #28]
 800d61e:	4620      	mov	r0, r4
 800d620:	f002 f9da 	bl	800f9d8 <_Bfree>
 800d624:	4629      	mov	r1, r5
 800d626:	4620      	mov	r0, r4
 800d628:	f002 f9d6 	bl	800f9d8 <_Bfree>
 800d62c:	e5dc      	b.n	800d1e8 <_strtod_l+0x88>
 800d62e:	4b36      	ldr	r3, [pc, #216]	; (800d708 <_strtod_l+0x5a8>)
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	2300      	movs	r3, #0
 800d634:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d638:	4650      	mov	r0, sl
 800d63a:	4659      	mov	r1, fp
 800d63c:	4699      	mov	r9, r3
 800d63e:	f1b8 0f01 	cmp.w	r8, #1
 800d642:	dc21      	bgt.n	800d688 <_strtod_l+0x528>
 800d644:	b10b      	cbz	r3, 800d64a <_strtod_l+0x4ea>
 800d646:	4682      	mov	sl, r0
 800d648:	468b      	mov	fp, r1
 800d64a:	4b2f      	ldr	r3, [pc, #188]	; (800d708 <_strtod_l+0x5a8>)
 800d64c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d650:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d654:	4652      	mov	r2, sl
 800d656:	465b      	mov	r3, fp
 800d658:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d65c:	f7f2 ffdc 	bl	8000618 <__aeabi_dmul>
 800d660:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <_strtod_l+0x5ac>)
 800d662:	460a      	mov	r2, r1
 800d664:	400b      	ands	r3, r1
 800d666:	492a      	ldr	r1, [pc, #168]	; (800d710 <_strtod_l+0x5b0>)
 800d668:	428b      	cmp	r3, r1
 800d66a:	4682      	mov	sl, r0
 800d66c:	d8bc      	bhi.n	800d5e8 <_strtod_l+0x488>
 800d66e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d672:	428b      	cmp	r3, r1
 800d674:	bf86      	itte	hi
 800d676:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d714 <_strtod_l+0x5b4>
 800d67a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d67e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d682:	2300      	movs	r3, #0
 800d684:	9304      	str	r3, [sp, #16]
 800d686:	e084      	b.n	800d792 <_strtod_l+0x632>
 800d688:	f018 0f01 	tst.w	r8, #1
 800d68c:	d005      	beq.n	800d69a <_strtod_l+0x53a>
 800d68e:	9b04      	ldr	r3, [sp, #16]
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 ffc0 	bl	8000618 <__aeabi_dmul>
 800d698:	2301      	movs	r3, #1
 800d69a:	9a04      	ldr	r2, [sp, #16]
 800d69c:	3208      	adds	r2, #8
 800d69e:	f109 0901 	add.w	r9, r9, #1
 800d6a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d6a6:	9204      	str	r2, [sp, #16]
 800d6a8:	e7c9      	b.n	800d63e <_strtod_l+0x4de>
 800d6aa:	d0ea      	beq.n	800d682 <_strtod_l+0x522>
 800d6ac:	f1c8 0800 	rsb	r8, r8, #0
 800d6b0:	f018 020f 	ands.w	r2, r8, #15
 800d6b4:	d00a      	beq.n	800d6cc <_strtod_l+0x56c>
 800d6b6:	4b13      	ldr	r3, [pc, #76]	; (800d704 <_strtod_l+0x5a4>)
 800d6b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6bc:	4650      	mov	r0, sl
 800d6be:	4659      	mov	r1, fp
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f3 f8d2 	bl	800086c <__aeabi_ddiv>
 800d6c8:	4682      	mov	sl, r0
 800d6ca:	468b      	mov	fp, r1
 800d6cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d6d0:	d0d7      	beq.n	800d682 <_strtod_l+0x522>
 800d6d2:	f1b8 0f1f 	cmp.w	r8, #31
 800d6d6:	dd1f      	ble.n	800d718 <_strtod_l+0x5b8>
 800d6d8:	2500      	movs	r5, #0
 800d6da:	462e      	mov	r6, r5
 800d6dc:	9507      	str	r5, [sp, #28]
 800d6de:	9505      	str	r5, [sp, #20]
 800d6e0:	2322      	movs	r3, #34	; 0x22
 800d6e2:	f04f 0a00 	mov.w	sl, #0
 800d6e6:	f04f 0b00 	mov.w	fp, #0
 800d6ea:	6023      	str	r3, [r4, #0]
 800d6ec:	e786      	b.n	800d5fc <_strtod_l+0x49c>
 800d6ee:	bf00      	nop
 800d6f0:	08011ced 	.word	0x08011ced
 800d6f4:	08011d2c 	.word	0x08011d2c
 800d6f8:	08011ce5 	.word	0x08011ce5
 800d6fc:	08011ea8 	.word	0x08011ea8
 800d700:	080121d3 	.word	0x080121d3
 800d704:	08012098 	.word	0x08012098
 800d708:	08012070 	.word	0x08012070
 800d70c:	7ff00000 	.word	0x7ff00000
 800d710:	7ca00000 	.word	0x7ca00000
 800d714:	7fefffff 	.word	0x7fefffff
 800d718:	f018 0310 	ands.w	r3, r8, #16
 800d71c:	bf18      	it	ne
 800d71e:	236a      	movne	r3, #106	; 0x6a
 800d720:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dad0 <_strtod_l+0x970>
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	4650      	mov	r0, sl
 800d728:	4659      	mov	r1, fp
 800d72a:	2300      	movs	r3, #0
 800d72c:	f018 0f01 	tst.w	r8, #1
 800d730:	d004      	beq.n	800d73c <_strtod_l+0x5dc>
 800d732:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d736:	f7f2 ff6f 	bl	8000618 <__aeabi_dmul>
 800d73a:	2301      	movs	r3, #1
 800d73c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d740:	f109 0908 	add.w	r9, r9, #8
 800d744:	d1f2      	bne.n	800d72c <_strtod_l+0x5cc>
 800d746:	b10b      	cbz	r3, 800d74c <_strtod_l+0x5ec>
 800d748:	4682      	mov	sl, r0
 800d74a:	468b      	mov	fp, r1
 800d74c:	9b04      	ldr	r3, [sp, #16]
 800d74e:	b1c3      	cbz	r3, 800d782 <_strtod_l+0x622>
 800d750:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d754:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d758:	2b00      	cmp	r3, #0
 800d75a:	4659      	mov	r1, fp
 800d75c:	dd11      	ble.n	800d782 <_strtod_l+0x622>
 800d75e:	2b1f      	cmp	r3, #31
 800d760:	f340 8124 	ble.w	800d9ac <_strtod_l+0x84c>
 800d764:	2b34      	cmp	r3, #52	; 0x34
 800d766:	bfde      	ittt	le
 800d768:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d76c:	f04f 33ff 	movle.w	r3, #4294967295
 800d770:	fa03 f202 	lslle.w	r2, r3, r2
 800d774:	f04f 0a00 	mov.w	sl, #0
 800d778:	bfcc      	ite	gt
 800d77a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d77e:	ea02 0b01 	andle.w	fp, r2, r1
 800d782:	2200      	movs	r2, #0
 800d784:	2300      	movs	r3, #0
 800d786:	4650      	mov	r0, sl
 800d788:	4659      	mov	r1, fp
 800d78a:	f7f3 f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d1a2      	bne.n	800d6d8 <_strtod_l+0x578>
 800d792:	9b07      	ldr	r3, [sp, #28]
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	9908      	ldr	r1, [sp, #32]
 800d798:	462b      	mov	r3, r5
 800d79a:	463a      	mov	r2, r7
 800d79c:	4620      	mov	r0, r4
 800d79e:	f002 f983 	bl	800faa8 <__s2b>
 800d7a2:	9007      	str	r0, [sp, #28]
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	f43f af1f 	beq.w	800d5e8 <_strtod_l+0x488>
 800d7aa:	9b05      	ldr	r3, [sp, #20]
 800d7ac:	1b9e      	subs	r6, r3, r6
 800d7ae:	9b06      	ldr	r3, [sp, #24]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	bfb4      	ite	lt
 800d7b4:	4633      	movlt	r3, r6
 800d7b6:	2300      	movge	r3, #0
 800d7b8:	930c      	str	r3, [sp, #48]	; 0x30
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	2500      	movs	r5, #0
 800d7be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d7c2:	9312      	str	r3, [sp, #72]	; 0x48
 800d7c4:	462e      	mov	r6, r5
 800d7c6:	9b07      	ldr	r3, [sp, #28]
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	6859      	ldr	r1, [r3, #4]
 800d7cc:	f002 f8c4 	bl	800f958 <_Balloc>
 800d7d0:	9005      	str	r0, [sp, #20]
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f43f af0c 	beq.w	800d5f0 <_strtod_l+0x490>
 800d7d8:	9b07      	ldr	r3, [sp, #28]
 800d7da:	691a      	ldr	r2, [r3, #16]
 800d7dc:	3202      	adds	r2, #2
 800d7de:	f103 010c 	add.w	r1, r3, #12
 800d7e2:	0092      	lsls	r2, r2, #2
 800d7e4:	300c      	adds	r0, #12
 800d7e6:	f7fe fadb 	bl	800bda0 <memcpy>
 800d7ea:	ec4b ab10 	vmov	d0, sl, fp
 800d7ee:	aa1a      	add	r2, sp, #104	; 0x68
 800d7f0:	a919      	add	r1, sp, #100	; 0x64
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f002 fc9e 	bl	8010134 <__d2b>
 800d7f8:	ec4b ab18 	vmov	d8, sl, fp
 800d7fc:	9018      	str	r0, [sp, #96]	; 0x60
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f43f aef6 	beq.w	800d5f0 <_strtod_l+0x490>
 800d804:	2101      	movs	r1, #1
 800d806:	4620      	mov	r0, r4
 800d808:	f002 f9e8 	bl	800fbdc <__i2b>
 800d80c:	4606      	mov	r6, r0
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f aeee 	beq.w	800d5f0 <_strtod_l+0x490>
 800d814:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d816:	9904      	ldr	r1, [sp, #16]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bfab      	itete	ge
 800d81c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d81e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d820:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d822:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d826:	bfac      	ite	ge
 800d828:	eb03 0902 	addge.w	r9, r3, r2
 800d82c:	1ad7      	sublt	r7, r2, r3
 800d82e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d830:	eba3 0801 	sub.w	r8, r3, r1
 800d834:	4490      	add	r8, r2
 800d836:	4ba1      	ldr	r3, [pc, #644]	; (800dabc <_strtod_l+0x95c>)
 800d838:	f108 38ff 	add.w	r8, r8, #4294967295
 800d83c:	4598      	cmp	r8, r3
 800d83e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d842:	f280 80c7 	bge.w	800d9d4 <_strtod_l+0x874>
 800d846:	eba3 0308 	sub.w	r3, r3, r8
 800d84a:	2b1f      	cmp	r3, #31
 800d84c:	eba2 0203 	sub.w	r2, r2, r3
 800d850:	f04f 0101 	mov.w	r1, #1
 800d854:	f300 80b1 	bgt.w	800d9ba <_strtod_l+0x85a>
 800d858:	fa01 f303 	lsl.w	r3, r1, r3
 800d85c:	930d      	str	r3, [sp, #52]	; 0x34
 800d85e:	2300      	movs	r3, #0
 800d860:	9308      	str	r3, [sp, #32]
 800d862:	eb09 0802 	add.w	r8, r9, r2
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	45c1      	cmp	r9, r8
 800d86a:	4417      	add	r7, r2
 800d86c:	441f      	add	r7, r3
 800d86e:	464b      	mov	r3, r9
 800d870:	bfa8      	it	ge
 800d872:	4643      	movge	r3, r8
 800d874:	42bb      	cmp	r3, r7
 800d876:	bfa8      	it	ge
 800d878:	463b      	movge	r3, r7
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	bfc2      	ittt	gt
 800d87e:	eba8 0803 	subgt.w	r8, r8, r3
 800d882:	1aff      	subgt	r7, r7, r3
 800d884:	eba9 0903 	subgt.w	r9, r9, r3
 800d888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dd17      	ble.n	800d8be <_strtod_l+0x75e>
 800d88e:	4631      	mov	r1, r6
 800d890:	461a      	mov	r2, r3
 800d892:	4620      	mov	r0, r4
 800d894:	f002 fa62 	bl	800fd5c <__pow5mult>
 800d898:	4606      	mov	r6, r0
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f43f aea8 	beq.w	800d5f0 <_strtod_l+0x490>
 800d8a0:	4601      	mov	r1, r0
 800d8a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f002 f9af 	bl	800fc08 <__multiply>
 800d8aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	f43f ae9f 	beq.w	800d5f0 <_strtod_l+0x490>
 800d8b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f002 f88f 	bl	800f9d8 <_Bfree>
 800d8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8bc:	9318      	str	r3, [sp, #96]	; 0x60
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	f300 808c 	bgt.w	800d9de <_strtod_l+0x87e>
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	dd08      	ble.n	800d8de <_strtod_l+0x77e>
 800d8cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8ce:	9905      	ldr	r1, [sp, #20]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f002 fa43 	bl	800fd5c <__pow5mult>
 800d8d6:	9005      	str	r0, [sp, #20]
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f43f ae89 	beq.w	800d5f0 <_strtod_l+0x490>
 800d8de:	2f00      	cmp	r7, #0
 800d8e0:	dd08      	ble.n	800d8f4 <_strtod_l+0x794>
 800d8e2:	9905      	ldr	r1, [sp, #20]
 800d8e4:	463a      	mov	r2, r7
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f002 fa92 	bl	800fe10 <__lshift>
 800d8ec:	9005      	str	r0, [sp, #20]
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f43f ae7e 	beq.w	800d5f0 <_strtod_l+0x490>
 800d8f4:	f1b9 0f00 	cmp.w	r9, #0
 800d8f8:	dd08      	ble.n	800d90c <_strtod_l+0x7ac>
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	464a      	mov	r2, r9
 800d8fe:	4620      	mov	r0, r4
 800d900:	f002 fa86 	bl	800fe10 <__lshift>
 800d904:	4606      	mov	r6, r0
 800d906:	2800      	cmp	r0, #0
 800d908:	f43f ae72 	beq.w	800d5f0 <_strtod_l+0x490>
 800d90c:	9a05      	ldr	r2, [sp, #20]
 800d90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d910:	4620      	mov	r0, r4
 800d912:	f002 fb09 	bl	800ff28 <__mdiff>
 800d916:	4605      	mov	r5, r0
 800d918:	2800      	cmp	r0, #0
 800d91a:	f43f ae69 	beq.w	800d5f0 <_strtod_l+0x490>
 800d91e:	68c3      	ldr	r3, [r0, #12]
 800d920:	930b      	str	r3, [sp, #44]	; 0x2c
 800d922:	2300      	movs	r3, #0
 800d924:	60c3      	str	r3, [r0, #12]
 800d926:	4631      	mov	r1, r6
 800d928:	f002 fae2 	bl	800fef0 <__mcmp>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	da60      	bge.n	800d9f2 <_strtod_l+0x892>
 800d930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d932:	ea53 030a 	orrs.w	r3, r3, sl
 800d936:	f040 8082 	bne.w	800da3e <_strtod_l+0x8de>
 800d93a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d17d      	bne.n	800da3e <_strtod_l+0x8de>
 800d942:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d946:	0d1b      	lsrs	r3, r3, #20
 800d948:	051b      	lsls	r3, r3, #20
 800d94a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d94e:	d976      	bls.n	800da3e <_strtod_l+0x8de>
 800d950:	696b      	ldr	r3, [r5, #20]
 800d952:	b913      	cbnz	r3, 800d95a <_strtod_l+0x7fa>
 800d954:	692b      	ldr	r3, [r5, #16]
 800d956:	2b01      	cmp	r3, #1
 800d958:	dd71      	ble.n	800da3e <_strtod_l+0x8de>
 800d95a:	4629      	mov	r1, r5
 800d95c:	2201      	movs	r2, #1
 800d95e:	4620      	mov	r0, r4
 800d960:	f002 fa56 	bl	800fe10 <__lshift>
 800d964:	4631      	mov	r1, r6
 800d966:	4605      	mov	r5, r0
 800d968:	f002 fac2 	bl	800fef0 <__mcmp>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	dd66      	ble.n	800da3e <_strtod_l+0x8de>
 800d970:	9904      	ldr	r1, [sp, #16]
 800d972:	4a53      	ldr	r2, [pc, #332]	; (800dac0 <_strtod_l+0x960>)
 800d974:	465b      	mov	r3, fp
 800d976:	2900      	cmp	r1, #0
 800d978:	f000 8081 	beq.w	800da7e <_strtod_l+0x91e>
 800d97c:	ea02 010b 	and.w	r1, r2, fp
 800d980:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d984:	dc7b      	bgt.n	800da7e <_strtod_l+0x91e>
 800d986:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d98a:	f77f aea9 	ble.w	800d6e0 <_strtod_l+0x580>
 800d98e:	4b4d      	ldr	r3, [pc, #308]	; (800dac4 <_strtod_l+0x964>)
 800d990:	4650      	mov	r0, sl
 800d992:	4659      	mov	r1, fp
 800d994:	2200      	movs	r2, #0
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	460b      	mov	r3, r1
 800d99c:	4303      	orrs	r3, r0
 800d99e:	bf08      	it	eq
 800d9a0:	2322      	moveq	r3, #34	; 0x22
 800d9a2:	4682      	mov	sl, r0
 800d9a4:	468b      	mov	fp, r1
 800d9a6:	bf08      	it	eq
 800d9a8:	6023      	streq	r3, [r4, #0]
 800d9aa:	e62b      	b.n	800d604 <_strtod_l+0x4a4>
 800d9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b4:	ea03 0a0a 	and.w	sl, r3, sl
 800d9b8:	e6e3      	b.n	800d782 <_strtod_l+0x622>
 800d9ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d9be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d9c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d9c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d9ca:	fa01 f308 	lsl.w	r3, r1, r8
 800d9ce:	9308      	str	r3, [sp, #32]
 800d9d0:	910d      	str	r1, [sp, #52]	; 0x34
 800d9d2:	e746      	b.n	800d862 <_strtod_l+0x702>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	9308      	str	r3, [sp, #32]
 800d9d8:	2301      	movs	r3, #1
 800d9da:	930d      	str	r3, [sp, #52]	; 0x34
 800d9dc:	e741      	b.n	800d862 <_strtod_l+0x702>
 800d9de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f002 fa14 	bl	800fe10 <__lshift>
 800d9e8:	9018      	str	r0, [sp, #96]	; 0x60
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	f47f af6b 	bne.w	800d8c6 <_strtod_l+0x766>
 800d9f0:	e5fe      	b.n	800d5f0 <_strtod_l+0x490>
 800d9f2:	465f      	mov	r7, fp
 800d9f4:	d16e      	bne.n	800dad4 <_strtod_l+0x974>
 800d9f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9fc:	b342      	cbz	r2, 800da50 <_strtod_l+0x8f0>
 800d9fe:	4a32      	ldr	r2, [pc, #200]	; (800dac8 <_strtod_l+0x968>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d128      	bne.n	800da56 <_strtod_l+0x8f6>
 800da04:	9b04      	ldr	r3, [sp, #16]
 800da06:	4651      	mov	r1, sl
 800da08:	b1eb      	cbz	r3, 800da46 <_strtod_l+0x8e6>
 800da0a:	4b2d      	ldr	r3, [pc, #180]	; (800dac0 <_strtod_l+0x960>)
 800da0c:	403b      	ands	r3, r7
 800da0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da12:	f04f 32ff 	mov.w	r2, #4294967295
 800da16:	d819      	bhi.n	800da4c <_strtod_l+0x8ec>
 800da18:	0d1b      	lsrs	r3, r3, #20
 800da1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da1e:	fa02 f303 	lsl.w	r3, r2, r3
 800da22:	4299      	cmp	r1, r3
 800da24:	d117      	bne.n	800da56 <_strtod_l+0x8f6>
 800da26:	4b29      	ldr	r3, [pc, #164]	; (800dacc <_strtod_l+0x96c>)
 800da28:	429f      	cmp	r7, r3
 800da2a:	d102      	bne.n	800da32 <_strtod_l+0x8d2>
 800da2c:	3101      	adds	r1, #1
 800da2e:	f43f addf 	beq.w	800d5f0 <_strtod_l+0x490>
 800da32:	4b23      	ldr	r3, [pc, #140]	; (800dac0 <_strtod_l+0x960>)
 800da34:	403b      	ands	r3, r7
 800da36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da3a:	f04f 0a00 	mov.w	sl, #0
 800da3e:	9b04      	ldr	r3, [sp, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1a4      	bne.n	800d98e <_strtod_l+0x82e>
 800da44:	e5de      	b.n	800d604 <_strtod_l+0x4a4>
 800da46:	f04f 33ff 	mov.w	r3, #4294967295
 800da4a:	e7ea      	b.n	800da22 <_strtod_l+0x8c2>
 800da4c:	4613      	mov	r3, r2
 800da4e:	e7e8      	b.n	800da22 <_strtod_l+0x8c2>
 800da50:	ea53 030a 	orrs.w	r3, r3, sl
 800da54:	d08c      	beq.n	800d970 <_strtod_l+0x810>
 800da56:	9b08      	ldr	r3, [sp, #32]
 800da58:	b1db      	cbz	r3, 800da92 <_strtod_l+0x932>
 800da5a:	423b      	tst	r3, r7
 800da5c:	d0ef      	beq.n	800da3e <_strtod_l+0x8de>
 800da5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da60:	9a04      	ldr	r2, [sp, #16]
 800da62:	4650      	mov	r0, sl
 800da64:	4659      	mov	r1, fp
 800da66:	b1c3      	cbz	r3, 800da9a <_strtod_l+0x93a>
 800da68:	f7ff fb5e 	bl	800d128 <sulp>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	ec51 0b18 	vmov	r0, r1, d8
 800da74:	f7f2 fc1a 	bl	80002ac <__adddf3>
 800da78:	4682      	mov	sl, r0
 800da7a:	468b      	mov	fp, r1
 800da7c:	e7df      	b.n	800da3e <_strtod_l+0x8de>
 800da7e:	4013      	ands	r3, r2
 800da80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800da84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800da88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800da8c:	f04f 3aff 	mov.w	sl, #4294967295
 800da90:	e7d5      	b.n	800da3e <_strtod_l+0x8de>
 800da92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da94:	ea13 0f0a 	tst.w	r3, sl
 800da98:	e7e0      	b.n	800da5c <_strtod_l+0x8fc>
 800da9a:	f7ff fb45 	bl	800d128 <sulp>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	ec51 0b18 	vmov	r0, r1, d8
 800daa6:	f7f2 fbff 	bl	80002a8 <__aeabi_dsub>
 800daaa:	2200      	movs	r2, #0
 800daac:	2300      	movs	r3, #0
 800daae:	4682      	mov	sl, r0
 800dab0:	468b      	mov	fp, r1
 800dab2:	f7f3 f819 	bl	8000ae8 <__aeabi_dcmpeq>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d0c1      	beq.n	800da3e <_strtod_l+0x8de>
 800daba:	e611      	b.n	800d6e0 <_strtod_l+0x580>
 800dabc:	fffffc02 	.word	0xfffffc02
 800dac0:	7ff00000 	.word	0x7ff00000
 800dac4:	39500000 	.word	0x39500000
 800dac8:	000fffff 	.word	0x000fffff
 800dacc:	7fefffff 	.word	0x7fefffff
 800dad0:	08011d40 	.word	0x08011d40
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	f002 fb88 	bl	80101ec <__ratio>
 800dadc:	ec59 8b10 	vmov	r8, r9, d0
 800dae0:	ee10 0a10 	vmov	r0, s0
 800dae4:	2200      	movs	r2, #0
 800dae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800daea:	4649      	mov	r1, r9
 800daec:	f7f3 f810 	bl	8000b10 <__aeabi_dcmple>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d07a      	beq.n	800dbea <_strtod_l+0xa8a>
 800daf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d04a      	beq.n	800db90 <_strtod_l+0xa30>
 800dafa:	4b95      	ldr	r3, [pc, #596]	; (800dd50 <_strtod_l+0xbf0>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dd50 <_strtod_l+0xbf0>
 800db06:	f04f 0800 	mov.w	r8, #0
 800db0a:	4b92      	ldr	r3, [pc, #584]	; (800dd54 <_strtod_l+0xbf4>)
 800db0c:	403b      	ands	r3, r7
 800db0e:	930d      	str	r3, [sp, #52]	; 0x34
 800db10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db12:	4b91      	ldr	r3, [pc, #580]	; (800dd58 <_strtod_l+0xbf8>)
 800db14:	429a      	cmp	r2, r3
 800db16:	f040 80b0 	bne.w	800dc7a <_strtod_l+0xb1a>
 800db1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800db22:	ec4b ab10 	vmov	d0, sl, fp
 800db26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db2a:	f002 fa87 	bl	801003c <__ulp>
 800db2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db32:	ec53 2b10 	vmov	r2, r3, d0
 800db36:	f7f2 fd6f 	bl	8000618 <__aeabi_dmul>
 800db3a:	4652      	mov	r2, sl
 800db3c:	465b      	mov	r3, fp
 800db3e:	f7f2 fbb5 	bl	80002ac <__adddf3>
 800db42:	460b      	mov	r3, r1
 800db44:	4983      	ldr	r1, [pc, #524]	; (800dd54 <_strtod_l+0xbf4>)
 800db46:	4a85      	ldr	r2, [pc, #532]	; (800dd5c <_strtod_l+0xbfc>)
 800db48:	4019      	ands	r1, r3
 800db4a:	4291      	cmp	r1, r2
 800db4c:	4682      	mov	sl, r0
 800db4e:	d960      	bls.n	800dc12 <_strtod_l+0xab2>
 800db50:	ee18 3a90 	vmov	r3, s17
 800db54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800db58:	4293      	cmp	r3, r2
 800db5a:	d104      	bne.n	800db66 <_strtod_l+0xa06>
 800db5c:	ee18 3a10 	vmov	r3, s16
 800db60:	3301      	adds	r3, #1
 800db62:	f43f ad45 	beq.w	800d5f0 <_strtod_l+0x490>
 800db66:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dd68 <_strtod_l+0xc08>
 800db6a:	f04f 3aff 	mov.w	sl, #4294967295
 800db6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db70:	4620      	mov	r0, r4
 800db72:	f001 ff31 	bl	800f9d8 <_Bfree>
 800db76:	9905      	ldr	r1, [sp, #20]
 800db78:	4620      	mov	r0, r4
 800db7a:	f001 ff2d 	bl	800f9d8 <_Bfree>
 800db7e:	4631      	mov	r1, r6
 800db80:	4620      	mov	r0, r4
 800db82:	f001 ff29 	bl	800f9d8 <_Bfree>
 800db86:	4629      	mov	r1, r5
 800db88:	4620      	mov	r0, r4
 800db8a:	f001 ff25 	bl	800f9d8 <_Bfree>
 800db8e:	e61a      	b.n	800d7c6 <_strtod_l+0x666>
 800db90:	f1ba 0f00 	cmp.w	sl, #0
 800db94:	d11b      	bne.n	800dbce <_strtod_l+0xa6e>
 800db96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db9a:	b9f3      	cbnz	r3, 800dbda <_strtod_l+0xa7a>
 800db9c:	4b6c      	ldr	r3, [pc, #432]	; (800dd50 <_strtod_l+0xbf0>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	4640      	mov	r0, r8
 800dba2:	4649      	mov	r1, r9
 800dba4:	f7f2 ffaa 	bl	8000afc <__aeabi_dcmplt>
 800dba8:	b9d0      	cbnz	r0, 800dbe0 <_strtod_l+0xa80>
 800dbaa:	4640      	mov	r0, r8
 800dbac:	4649      	mov	r1, r9
 800dbae:	4b6c      	ldr	r3, [pc, #432]	; (800dd60 <_strtod_l+0xc00>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f7f2 fd31 	bl	8000618 <__aeabi_dmul>
 800dbb6:	4680      	mov	r8, r0
 800dbb8:	4689      	mov	r9, r1
 800dbba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dbc2:	9315      	str	r3, [sp, #84]	; 0x54
 800dbc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dbc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbcc:	e79d      	b.n	800db0a <_strtod_l+0x9aa>
 800dbce:	f1ba 0f01 	cmp.w	sl, #1
 800dbd2:	d102      	bne.n	800dbda <_strtod_l+0xa7a>
 800dbd4:	2f00      	cmp	r7, #0
 800dbd6:	f43f ad83 	beq.w	800d6e0 <_strtod_l+0x580>
 800dbda:	4b62      	ldr	r3, [pc, #392]	; (800dd64 <_strtod_l+0xc04>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	e78e      	b.n	800dafe <_strtod_l+0x99e>
 800dbe0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dd60 <_strtod_l+0xc00>
 800dbe4:	f04f 0800 	mov.w	r8, #0
 800dbe8:	e7e7      	b.n	800dbba <_strtod_l+0xa5a>
 800dbea:	4b5d      	ldr	r3, [pc, #372]	; (800dd60 <_strtod_l+0xc00>)
 800dbec:	4640      	mov	r0, r8
 800dbee:	4649      	mov	r1, r9
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f7f2 fd11 	bl	8000618 <__aeabi_dmul>
 800dbf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	4689      	mov	r9, r1
 800dbfc:	b933      	cbnz	r3, 800dc0c <_strtod_l+0xaac>
 800dbfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc02:	900e      	str	r0, [sp, #56]	; 0x38
 800dc04:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dc0a:	e7dd      	b.n	800dbc8 <_strtod_l+0xa68>
 800dc0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dc10:	e7f9      	b.n	800dc06 <_strtod_l+0xaa6>
 800dc12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc16:	9b04      	ldr	r3, [sp, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1a8      	bne.n	800db6e <_strtod_l+0xa0e>
 800dc1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc22:	0d1b      	lsrs	r3, r3, #20
 800dc24:	051b      	lsls	r3, r3, #20
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d1a1      	bne.n	800db6e <_strtod_l+0xa0e>
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	4649      	mov	r1, r9
 800dc2e:	f7f3 f853 	bl	8000cd8 <__aeabi_d2lz>
 800dc32:	f7f2 fcc3 	bl	80005bc <__aeabi_l2d>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4640      	mov	r0, r8
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	f7f2 fb33 	bl	80002a8 <__aeabi_dsub>
 800dc42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc48:	ea43 030a 	orr.w	r3, r3, sl
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	4680      	mov	r8, r0
 800dc50:	4689      	mov	r9, r1
 800dc52:	d055      	beq.n	800dd00 <_strtod_l+0xba0>
 800dc54:	a336      	add	r3, pc, #216	; (adr r3, 800dd30 <_strtod_l+0xbd0>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 ff4f 	bl	8000afc <__aeabi_dcmplt>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f47f acd0 	bne.w	800d604 <_strtod_l+0x4a4>
 800dc64:	a334      	add	r3, pc, #208	; (adr r3, 800dd38 <_strtod_l+0xbd8>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	f7f2 ff63 	bl	8000b38 <__aeabi_dcmpgt>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f43f af7b 	beq.w	800db6e <_strtod_l+0xa0e>
 800dc78:	e4c4      	b.n	800d604 <_strtod_l+0x4a4>
 800dc7a:	9b04      	ldr	r3, [sp, #16]
 800dc7c:	b333      	cbz	r3, 800dccc <_strtod_l+0xb6c>
 800dc7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc84:	d822      	bhi.n	800dccc <_strtod_l+0xb6c>
 800dc86:	a32e      	add	r3, pc, #184	; (adr r3, 800dd40 <_strtod_l+0xbe0>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	4649      	mov	r1, r9
 800dc90:	f7f2 ff3e 	bl	8000b10 <__aeabi_dcmple>
 800dc94:	b1a0      	cbz	r0, 800dcc0 <_strtod_l+0xb60>
 800dc96:	4649      	mov	r1, r9
 800dc98:	4640      	mov	r0, r8
 800dc9a:	f7f2 ff95 	bl	8000bc8 <__aeabi_d2uiz>
 800dc9e:	2801      	cmp	r0, #1
 800dca0:	bf38      	it	cc
 800dca2:	2001      	movcc	r0, #1
 800dca4:	f7f2 fc3e 	bl	8000524 <__aeabi_ui2d>
 800dca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcaa:	4680      	mov	r8, r0
 800dcac:	4689      	mov	r9, r1
 800dcae:	bb23      	cbnz	r3, 800dcfa <_strtod_l+0xb9a>
 800dcb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcb4:	9010      	str	r0, [sp, #64]	; 0x40
 800dcb6:	9311      	str	r3, [sp, #68]	; 0x44
 800dcb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dcbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dcc8:	1a9b      	subs	r3, r3, r2
 800dcca:	9309      	str	r3, [sp, #36]	; 0x24
 800dccc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dcd0:	eeb0 0a48 	vmov.f32	s0, s16
 800dcd4:	eef0 0a68 	vmov.f32	s1, s17
 800dcd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcdc:	f002 f9ae 	bl	801003c <__ulp>
 800dce0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dce4:	ec53 2b10 	vmov	r2, r3, d0
 800dce8:	f7f2 fc96 	bl	8000618 <__aeabi_dmul>
 800dcec:	ec53 2b18 	vmov	r2, r3, d8
 800dcf0:	f7f2 fadc 	bl	80002ac <__adddf3>
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	468b      	mov	fp, r1
 800dcf8:	e78d      	b.n	800dc16 <_strtod_l+0xab6>
 800dcfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dcfe:	e7db      	b.n	800dcb8 <_strtod_l+0xb58>
 800dd00:	a311      	add	r3, pc, #68	; (adr r3, 800dd48 <_strtod_l+0xbe8>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fef9 	bl	8000afc <__aeabi_dcmplt>
 800dd0a:	e7b2      	b.n	800dc72 <_strtod_l+0xb12>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dd12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd14:	6013      	str	r3, [r2, #0]
 800dd16:	f7ff ba6b 	b.w	800d1f0 <_strtod_l+0x90>
 800dd1a:	2a65      	cmp	r2, #101	; 0x65
 800dd1c:	f43f ab5f 	beq.w	800d3de <_strtod_l+0x27e>
 800dd20:	2a45      	cmp	r2, #69	; 0x45
 800dd22:	f43f ab5c 	beq.w	800d3de <_strtod_l+0x27e>
 800dd26:	2301      	movs	r3, #1
 800dd28:	f7ff bb94 	b.w	800d454 <_strtod_l+0x2f4>
 800dd2c:	f3af 8000 	nop.w
 800dd30:	94a03595 	.word	0x94a03595
 800dd34:	3fdfffff 	.word	0x3fdfffff
 800dd38:	35afe535 	.word	0x35afe535
 800dd3c:	3fe00000 	.word	0x3fe00000
 800dd40:	ffc00000 	.word	0xffc00000
 800dd44:	41dfffff 	.word	0x41dfffff
 800dd48:	94a03595 	.word	0x94a03595
 800dd4c:	3fcfffff 	.word	0x3fcfffff
 800dd50:	3ff00000 	.word	0x3ff00000
 800dd54:	7ff00000 	.word	0x7ff00000
 800dd58:	7fe00000 	.word	0x7fe00000
 800dd5c:	7c9fffff 	.word	0x7c9fffff
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	bff00000 	.word	0xbff00000
 800dd68:	7fefffff 	.word	0x7fefffff

0800dd6c <_strtod_r>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	; (800dd74 <_strtod_r+0x8>)
 800dd6e:	f7ff b9f7 	b.w	800d160 <_strtod_l>
 800dd72:	bf00      	nop
 800dd74:	200000ec 	.word	0x200000ec

0800dd78 <_strtol_l.constprop.0>:
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd7e:	d001      	beq.n	800dd84 <_strtol_l.constprop.0+0xc>
 800dd80:	2b24      	cmp	r3, #36	; 0x24
 800dd82:	d906      	bls.n	800dd92 <_strtol_l.constprop.0+0x1a>
 800dd84:	f7fd ffe2 	bl	800bd4c <__errno>
 800dd88:	2316      	movs	r3, #22
 800dd8a:	6003      	str	r3, [r0, #0]
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de78 <_strtol_l.constprop.0+0x100>
 800dd96:	460d      	mov	r5, r1
 800dd98:	462e      	mov	r6, r5
 800dd9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dda2:	f017 0708 	ands.w	r7, r7, #8
 800dda6:	d1f7      	bne.n	800dd98 <_strtol_l.constprop.0+0x20>
 800dda8:	2c2d      	cmp	r4, #45	; 0x2d
 800ddaa:	d132      	bne.n	800de12 <_strtol_l.constprop.0+0x9a>
 800ddac:	782c      	ldrb	r4, [r5, #0]
 800ddae:	2701      	movs	r7, #1
 800ddb0:	1cb5      	adds	r5, r6, #2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d05b      	beq.n	800de6e <_strtol_l.constprop.0+0xf6>
 800ddb6:	2b10      	cmp	r3, #16
 800ddb8:	d109      	bne.n	800ddce <_strtol_l.constprop.0+0x56>
 800ddba:	2c30      	cmp	r4, #48	; 0x30
 800ddbc:	d107      	bne.n	800ddce <_strtol_l.constprop.0+0x56>
 800ddbe:	782c      	ldrb	r4, [r5, #0]
 800ddc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ddc4:	2c58      	cmp	r4, #88	; 0x58
 800ddc6:	d14d      	bne.n	800de64 <_strtol_l.constprop.0+0xec>
 800ddc8:	786c      	ldrb	r4, [r5, #1]
 800ddca:	2310      	movs	r3, #16
 800ddcc:	3502      	adds	r5, #2
 800ddce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ddd2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddd6:	f04f 0c00 	mov.w	ip, #0
 800ddda:	fbb8 f9f3 	udiv	r9, r8, r3
 800ddde:	4666      	mov	r6, ip
 800dde0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dde4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dde8:	f1be 0f09 	cmp.w	lr, #9
 800ddec:	d816      	bhi.n	800de1c <_strtol_l.constprop.0+0xa4>
 800ddee:	4674      	mov	r4, lr
 800ddf0:	42a3      	cmp	r3, r4
 800ddf2:	dd24      	ble.n	800de3e <_strtol_l.constprop.0+0xc6>
 800ddf4:	f1bc 0f00 	cmp.w	ip, #0
 800ddf8:	db1e      	blt.n	800de38 <_strtol_l.constprop.0+0xc0>
 800ddfa:	45b1      	cmp	r9, r6
 800ddfc:	d31c      	bcc.n	800de38 <_strtol_l.constprop.0+0xc0>
 800ddfe:	d101      	bne.n	800de04 <_strtol_l.constprop.0+0x8c>
 800de00:	45a2      	cmp	sl, r4
 800de02:	db19      	blt.n	800de38 <_strtol_l.constprop.0+0xc0>
 800de04:	fb06 4603 	mla	r6, r6, r3, r4
 800de08:	f04f 0c01 	mov.w	ip, #1
 800de0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de10:	e7e8      	b.n	800dde4 <_strtol_l.constprop.0+0x6c>
 800de12:	2c2b      	cmp	r4, #43	; 0x2b
 800de14:	bf04      	itt	eq
 800de16:	782c      	ldrbeq	r4, [r5, #0]
 800de18:	1cb5      	addeq	r5, r6, #2
 800de1a:	e7ca      	b.n	800ddb2 <_strtol_l.constprop.0+0x3a>
 800de1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800de20:	f1be 0f19 	cmp.w	lr, #25
 800de24:	d801      	bhi.n	800de2a <_strtol_l.constprop.0+0xb2>
 800de26:	3c37      	subs	r4, #55	; 0x37
 800de28:	e7e2      	b.n	800ddf0 <_strtol_l.constprop.0+0x78>
 800de2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800de2e:	f1be 0f19 	cmp.w	lr, #25
 800de32:	d804      	bhi.n	800de3e <_strtol_l.constprop.0+0xc6>
 800de34:	3c57      	subs	r4, #87	; 0x57
 800de36:	e7db      	b.n	800ddf0 <_strtol_l.constprop.0+0x78>
 800de38:	f04f 3cff 	mov.w	ip, #4294967295
 800de3c:	e7e6      	b.n	800de0c <_strtol_l.constprop.0+0x94>
 800de3e:	f1bc 0f00 	cmp.w	ip, #0
 800de42:	da05      	bge.n	800de50 <_strtol_l.constprop.0+0xd8>
 800de44:	2322      	movs	r3, #34	; 0x22
 800de46:	6003      	str	r3, [r0, #0]
 800de48:	4646      	mov	r6, r8
 800de4a:	b942      	cbnz	r2, 800de5e <_strtol_l.constprop.0+0xe6>
 800de4c:	4630      	mov	r0, r6
 800de4e:	e79e      	b.n	800dd8e <_strtol_l.constprop.0+0x16>
 800de50:	b107      	cbz	r7, 800de54 <_strtol_l.constprop.0+0xdc>
 800de52:	4276      	negs	r6, r6
 800de54:	2a00      	cmp	r2, #0
 800de56:	d0f9      	beq.n	800de4c <_strtol_l.constprop.0+0xd4>
 800de58:	f1bc 0f00 	cmp.w	ip, #0
 800de5c:	d000      	beq.n	800de60 <_strtol_l.constprop.0+0xe8>
 800de5e:	1e69      	subs	r1, r5, #1
 800de60:	6011      	str	r1, [r2, #0]
 800de62:	e7f3      	b.n	800de4c <_strtol_l.constprop.0+0xd4>
 800de64:	2430      	movs	r4, #48	; 0x30
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1b1      	bne.n	800ddce <_strtol_l.constprop.0+0x56>
 800de6a:	2308      	movs	r3, #8
 800de6c:	e7af      	b.n	800ddce <_strtol_l.constprop.0+0x56>
 800de6e:	2c30      	cmp	r4, #48	; 0x30
 800de70:	d0a5      	beq.n	800ddbe <_strtol_l.constprop.0+0x46>
 800de72:	230a      	movs	r3, #10
 800de74:	e7ab      	b.n	800ddce <_strtol_l.constprop.0+0x56>
 800de76:	bf00      	nop
 800de78:	08011da5 	.word	0x08011da5

0800de7c <_strtol_r>:
 800de7c:	f7ff bf7c 	b.w	800dd78 <_strtol_l.constprop.0>

0800de80 <strtol>:
 800de80:	4613      	mov	r3, r2
 800de82:	460a      	mov	r2, r1
 800de84:	4601      	mov	r1, r0
 800de86:	4802      	ldr	r0, [pc, #8]	; (800de90 <strtol+0x10>)
 800de88:	6800      	ldr	r0, [r0, #0]
 800de8a:	f7ff bf75 	b.w	800dd78 <_strtol_l.constprop.0>
 800de8e:	bf00      	nop
 800de90:	20000020 	.word	0x20000020

0800de94 <_strtoul_l.constprop.0>:
 800de94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de98:	4f36      	ldr	r7, [pc, #216]	; (800df74 <_strtoul_l.constprop.0+0xe0>)
 800de9a:	4686      	mov	lr, r0
 800de9c:	460d      	mov	r5, r1
 800de9e:	4628      	mov	r0, r5
 800dea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dea4:	5de6      	ldrb	r6, [r4, r7]
 800dea6:	f016 0608 	ands.w	r6, r6, #8
 800deaa:	d1f8      	bne.n	800de9e <_strtoul_l.constprop.0+0xa>
 800deac:	2c2d      	cmp	r4, #45	; 0x2d
 800deae:	d12f      	bne.n	800df10 <_strtoul_l.constprop.0+0x7c>
 800deb0:	782c      	ldrb	r4, [r5, #0]
 800deb2:	2601      	movs	r6, #1
 800deb4:	1c85      	adds	r5, r0, #2
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d057      	beq.n	800df6a <_strtoul_l.constprop.0+0xd6>
 800deba:	2b10      	cmp	r3, #16
 800debc:	d109      	bne.n	800ded2 <_strtoul_l.constprop.0+0x3e>
 800debe:	2c30      	cmp	r4, #48	; 0x30
 800dec0:	d107      	bne.n	800ded2 <_strtoul_l.constprop.0+0x3e>
 800dec2:	7828      	ldrb	r0, [r5, #0]
 800dec4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dec8:	2858      	cmp	r0, #88	; 0x58
 800deca:	d149      	bne.n	800df60 <_strtoul_l.constprop.0+0xcc>
 800decc:	786c      	ldrb	r4, [r5, #1]
 800dece:	2310      	movs	r3, #16
 800ded0:	3502      	adds	r5, #2
 800ded2:	f04f 38ff 	mov.w	r8, #4294967295
 800ded6:	2700      	movs	r7, #0
 800ded8:	fbb8 f8f3 	udiv	r8, r8, r3
 800dedc:	fb03 f908 	mul.w	r9, r3, r8
 800dee0:	ea6f 0909 	mvn.w	r9, r9
 800dee4:	4638      	mov	r0, r7
 800dee6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800deea:	f1bc 0f09 	cmp.w	ip, #9
 800deee:	d814      	bhi.n	800df1a <_strtoul_l.constprop.0+0x86>
 800def0:	4664      	mov	r4, ip
 800def2:	42a3      	cmp	r3, r4
 800def4:	dd22      	ble.n	800df3c <_strtoul_l.constprop.0+0xa8>
 800def6:	2f00      	cmp	r7, #0
 800def8:	db1d      	blt.n	800df36 <_strtoul_l.constprop.0+0xa2>
 800defa:	4580      	cmp	r8, r0
 800defc:	d31b      	bcc.n	800df36 <_strtoul_l.constprop.0+0xa2>
 800defe:	d101      	bne.n	800df04 <_strtoul_l.constprop.0+0x70>
 800df00:	45a1      	cmp	r9, r4
 800df02:	db18      	blt.n	800df36 <_strtoul_l.constprop.0+0xa2>
 800df04:	fb00 4003 	mla	r0, r0, r3, r4
 800df08:	2701      	movs	r7, #1
 800df0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df0e:	e7ea      	b.n	800dee6 <_strtoul_l.constprop.0+0x52>
 800df10:	2c2b      	cmp	r4, #43	; 0x2b
 800df12:	bf04      	itt	eq
 800df14:	782c      	ldrbeq	r4, [r5, #0]
 800df16:	1c85      	addeq	r5, r0, #2
 800df18:	e7cd      	b.n	800deb6 <_strtoul_l.constprop.0+0x22>
 800df1a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800df1e:	f1bc 0f19 	cmp.w	ip, #25
 800df22:	d801      	bhi.n	800df28 <_strtoul_l.constprop.0+0x94>
 800df24:	3c37      	subs	r4, #55	; 0x37
 800df26:	e7e4      	b.n	800def2 <_strtoul_l.constprop.0+0x5e>
 800df28:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800df2c:	f1bc 0f19 	cmp.w	ip, #25
 800df30:	d804      	bhi.n	800df3c <_strtoul_l.constprop.0+0xa8>
 800df32:	3c57      	subs	r4, #87	; 0x57
 800df34:	e7dd      	b.n	800def2 <_strtoul_l.constprop.0+0x5e>
 800df36:	f04f 37ff 	mov.w	r7, #4294967295
 800df3a:	e7e6      	b.n	800df0a <_strtoul_l.constprop.0+0x76>
 800df3c:	2f00      	cmp	r7, #0
 800df3e:	da07      	bge.n	800df50 <_strtoul_l.constprop.0+0xbc>
 800df40:	2322      	movs	r3, #34	; 0x22
 800df42:	f8ce 3000 	str.w	r3, [lr]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
 800df4a:	b932      	cbnz	r2, 800df5a <_strtoul_l.constprop.0+0xc6>
 800df4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df50:	b106      	cbz	r6, 800df54 <_strtoul_l.constprop.0+0xc0>
 800df52:	4240      	negs	r0, r0
 800df54:	2a00      	cmp	r2, #0
 800df56:	d0f9      	beq.n	800df4c <_strtoul_l.constprop.0+0xb8>
 800df58:	b107      	cbz	r7, 800df5c <_strtoul_l.constprop.0+0xc8>
 800df5a:	1e69      	subs	r1, r5, #1
 800df5c:	6011      	str	r1, [r2, #0]
 800df5e:	e7f5      	b.n	800df4c <_strtoul_l.constprop.0+0xb8>
 800df60:	2430      	movs	r4, #48	; 0x30
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1b5      	bne.n	800ded2 <_strtoul_l.constprop.0+0x3e>
 800df66:	2308      	movs	r3, #8
 800df68:	e7b3      	b.n	800ded2 <_strtoul_l.constprop.0+0x3e>
 800df6a:	2c30      	cmp	r4, #48	; 0x30
 800df6c:	d0a9      	beq.n	800dec2 <_strtoul_l.constprop.0+0x2e>
 800df6e:	230a      	movs	r3, #10
 800df70:	e7af      	b.n	800ded2 <_strtoul_l.constprop.0+0x3e>
 800df72:	bf00      	nop
 800df74:	08011da5 	.word	0x08011da5

0800df78 <_strtoul_r>:
 800df78:	f7ff bf8c 	b.w	800de94 <_strtoul_l.constprop.0>

0800df7c <strtoul>:
 800df7c:	4613      	mov	r3, r2
 800df7e:	460a      	mov	r2, r1
 800df80:	4601      	mov	r1, r0
 800df82:	4802      	ldr	r0, [pc, #8]	; (800df8c <strtoul+0x10>)
 800df84:	6800      	ldr	r0, [r0, #0]
 800df86:	f7ff bf85 	b.w	800de94 <_strtoul_l.constprop.0>
 800df8a:	bf00      	nop
 800df8c:	20000020 	.word	0x20000020

0800df90 <__tzcalc_limits>:
 800df90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	4605      	mov	r5, r0
 800df96:	f001 fc9d 	bl	800f8d4 <__gettzinfo>
 800df9a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800df9e:	429d      	cmp	r5, r3
 800dfa0:	f340 8099 	ble.w	800e0d6 <__tzcalc_limits+0x146>
 800dfa4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800dfa8:	18ac      	adds	r4, r5, r2
 800dfaa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800dfae:	f240 126d 	movw	r2, #365	; 0x16d
 800dfb2:	10a4      	asrs	r4, r4, #2
 800dfb4:	fb02 4403 	mla	r4, r2, r3, r4
 800dfb8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800dfbc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800dfc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfc4:	441c      	add	r4, r3
 800dfc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800dfca:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800dfce:	fb95 fcf3 	sdiv	ip, r5, r3
 800dfd2:	fb03 5c1c 	mls	ip, r3, ip, r5
 800dfd6:	186a      	adds	r2, r5, r1
 800dfd8:	fabc f68c 	clz	r6, ip
 800dfdc:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfe0:	f005 0303 	and.w	r3, r5, #3
 800dfe4:	4414      	add	r4, r2
 800dfe6:	2264      	movs	r2, #100	; 0x64
 800dfe8:	6045      	str	r5, [r0, #4]
 800dfea:	fb95 f7f2 	sdiv	r7, r5, r2
 800dfee:	0976      	lsrs	r6, r6, #5
 800dff0:	fb02 5717 	mls	r7, r2, r7, r5
 800dff4:	4601      	mov	r1, r0
 800dff6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	f04f 0a07 	mov.w	sl, #7
 800e000:	7a0d      	ldrb	r5, [r1, #8]
 800e002:	694b      	ldr	r3, [r1, #20]
 800e004:	2d4a      	cmp	r5, #74	; 0x4a
 800e006:	d12d      	bne.n	800e064 <__tzcalc_limits+0xd4>
 800e008:	9a00      	ldr	r2, [sp, #0]
 800e00a:	eb04 0e03 	add.w	lr, r4, r3
 800e00e:	b902      	cbnz	r2, 800e012 <__tzcalc_limits+0x82>
 800e010:	b917      	cbnz	r7, 800e018 <__tzcalc_limits+0x88>
 800e012:	f1bc 0f00 	cmp.w	ip, #0
 800e016:	d123      	bne.n	800e060 <__tzcalc_limits+0xd0>
 800e018:	2b3b      	cmp	r3, #59	; 0x3b
 800e01a:	bfd4      	ite	le
 800e01c:	2300      	movle	r3, #0
 800e01e:	2301      	movgt	r3, #1
 800e020:	4473      	add	r3, lr
 800e022:	3b01      	subs	r3, #1
 800e024:	698d      	ldr	r5, [r1, #24]
 800e026:	4a2d      	ldr	r2, [pc, #180]	; (800e0dc <__tzcalc_limits+0x14c>)
 800e028:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800e02c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800e030:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e032:	18ed      	adds	r5, r5, r3
 800e034:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800e038:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800e03c:	3128      	adds	r1, #40	; 0x28
 800e03e:	458b      	cmp	fp, r1
 800e040:	d1de      	bne.n	800e000 <__tzcalc_limits+0x70>
 800e042:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800e046:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800e04a:	428c      	cmp	r4, r1
 800e04c:	eb72 0303 	sbcs.w	r3, r2, r3
 800e050:	bfb4      	ite	lt
 800e052:	2301      	movlt	r3, #1
 800e054:	2300      	movge	r3, #0
 800e056:	6003      	str	r3, [r0, #0]
 800e058:	2001      	movs	r0, #1
 800e05a:	b003      	add	sp, #12
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	2300      	movs	r3, #0
 800e062:	e7dd      	b.n	800e020 <__tzcalc_limits+0x90>
 800e064:	2d44      	cmp	r5, #68	; 0x44
 800e066:	d101      	bne.n	800e06c <__tzcalc_limits+0xdc>
 800e068:	4423      	add	r3, r4
 800e06a:	e7db      	b.n	800e024 <__tzcalc_limits+0x94>
 800e06c:	9a00      	ldr	r2, [sp, #0]
 800e06e:	bb62      	cbnz	r2, 800e0ca <__tzcalc_limits+0x13a>
 800e070:	2f00      	cmp	r7, #0
 800e072:	bf0c      	ite	eq
 800e074:	4635      	moveq	r5, r6
 800e076:	2501      	movne	r5, #1
 800e078:	68ca      	ldr	r2, [r1, #12]
 800e07a:	9201      	str	r2, [sp, #4]
 800e07c:	4a18      	ldr	r2, [pc, #96]	; (800e0e0 <__tzcalc_limits+0x150>)
 800e07e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800e082:	fb09 2505 	mla	r5, r9, r5, r2
 800e086:	46a6      	mov	lr, r4
 800e088:	f04f 0800 	mov.w	r8, #0
 800e08c:	3d04      	subs	r5, #4
 800e08e:	9a01      	ldr	r2, [sp, #4]
 800e090:	f108 0801 	add.w	r8, r8, #1
 800e094:	4542      	cmp	r2, r8
 800e096:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800e09a:	dc18      	bgt.n	800e0ce <__tzcalc_limits+0x13e>
 800e09c:	f10e 0504 	add.w	r5, lr, #4
 800e0a0:	fb95 f8fa 	sdiv	r8, r5, sl
 800e0a4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800e0a8:	eba5 0808 	sub.w	r8, r5, r8
 800e0ac:	ebb3 0808 	subs.w	r8, r3, r8
 800e0b0:	690b      	ldr	r3, [r1, #16]
 800e0b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0b6:	bf48      	it	mi
 800e0b8:	f108 0807 	addmi.w	r8, r8, #7
 800e0bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e0c0:	4443      	add	r3, r8
 800e0c2:	454b      	cmp	r3, r9
 800e0c4:	da05      	bge.n	800e0d2 <__tzcalc_limits+0x142>
 800e0c6:	4473      	add	r3, lr
 800e0c8:	e7ac      	b.n	800e024 <__tzcalc_limits+0x94>
 800e0ca:	4635      	mov	r5, r6
 800e0cc:	e7d4      	b.n	800e078 <__tzcalc_limits+0xe8>
 800e0ce:	44ce      	add	lr, r9
 800e0d0:	e7dd      	b.n	800e08e <__tzcalc_limits+0xfe>
 800e0d2:	3b07      	subs	r3, #7
 800e0d4:	e7f5      	b.n	800e0c2 <__tzcalc_limits+0x132>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e7bf      	b.n	800e05a <__tzcalc_limits+0xca>
 800e0da:	bf00      	nop
 800e0dc:	00015180 	.word	0x00015180
 800e0e0:	08011fb0 	.word	0x08011fb0

0800e0e4 <__tz_lock>:
 800e0e4:	4801      	ldr	r0, [pc, #4]	; (800e0ec <__tz_lock+0x8>)
 800e0e6:	f001 bbfe 	b.w	800f8e6 <__retarget_lock_acquire>
 800e0ea:	bf00      	nop
 800e0ec:	200068b4 	.word	0x200068b4

0800e0f0 <__tz_unlock>:
 800e0f0:	4801      	ldr	r0, [pc, #4]	; (800e0f8 <__tz_unlock+0x8>)
 800e0f2:	f001 bbfa 	b.w	800f8ea <__retarget_lock_release>
 800e0f6:	bf00      	nop
 800e0f8:	200068b4 	.word	0x200068b4

0800e0fc <_tzset_unlocked>:
 800e0fc:	4b01      	ldr	r3, [pc, #4]	; (800e104 <_tzset_unlocked+0x8>)
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	f000 b802 	b.w	800e108 <_tzset_unlocked_r>
 800e104:	20000020 	.word	0x20000020

0800e108 <_tzset_unlocked_r>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	b08d      	sub	sp, #52	; 0x34
 800e10e:	4607      	mov	r7, r0
 800e110:	f001 fbe0 	bl	800f8d4 <__gettzinfo>
 800e114:	49b0      	ldr	r1, [pc, #704]	; (800e3d8 <_tzset_unlocked_r+0x2d0>)
 800e116:	4eb1      	ldr	r6, [pc, #708]	; (800e3dc <_tzset_unlocked_r+0x2d4>)
 800e118:	4605      	mov	r5, r0
 800e11a:	4638      	mov	r0, r7
 800e11c:	f001 fbd2 	bl	800f8c4 <_getenv_r>
 800e120:	4604      	mov	r4, r0
 800e122:	b970      	cbnz	r0, 800e142 <_tzset_unlocked_r+0x3a>
 800e124:	4bae      	ldr	r3, [pc, #696]	; (800e3e0 <_tzset_unlocked_r+0x2d8>)
 800e126:	4aaf      	ldr	r2, [pc, #700]	; (800e3e4 <_tzset_unlocked_r+0x2dc>)
 800e128:	6018      	str	r0, [r3, #0]
 800e12a:	4baf      	ldr	r3, [pc, #700]	; (800e3e8 <_tzset_unlocked_r+0x2e0>)
 800e12c:	6018      	str	r0, [r3, #0]
 800e12e:	4baf      	ldr	r3, [pc, #700]	; (800e3ec <_tzset_unlocked_r+0x2e4>)
 800e130:	6830      	ldr	r0, [r6, #0]
 800e132:	e9c3 2200 	strd	r2, r2, [r3]
 800e136:	f001 fbf5 	bl	800f924 <free>
 800e13a:	6034      	str	r4, [r6, #0]
 800e13c:	b00d      	add	sp, #52	; 0x34
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	6831      	ldr	r1, [r6, #0]
 800e144:	2900      	cmp	r1, #0
 800e146:	d162      	bne.n	800e20e <_tzset_unlocked_r+0x106>
 800e148:	6830      	ldr	r0, [r6, #0]
 800e14a:	f001 fbeb 	bl	800f924 <free>
 800e14e:	4620      	mov	r0, r4
 800e150:	f7f2 f848 	bl	80001e4 <strlen>
 800e154:	1c41      	adds	r1, r0, #1
 800e156:	4638      	mov	r0, r7
 800e158:	f002 f942 	bl	80103e0 <_malloc_r>
 800e15c:	6030      	str	r0, [r6, #0]
 800e15e:	2800      	cmp	r0, #0
 800e160:	d15a      	bne.n	800e218 <_tzset_unlocked_r+0x110>
 800e162:	7823      	ldrb	r3, [r4, #0]
 800e164:	4aa2      	ldr	r2, [pc, #648]	; (800e3f0 <_tzset_unlocked_r+0x2e8>)
 800e166:	49a3      	ldr	r1, [pc, #652]	; (800e3f4 <_tzset_unlocked_r+0x2ec>)
 800e168:	2b3a      	cmp	r3, #58	; 0x3a
 800e16a:	bf08      	it	eq
 800e16c:	3401      	addeq	r4, #1
 800e16e:	ae0a      	add	r6, sp, #40	; 0x28
 800e170:	4633      	mov	r3, r6
 800e172:	4620      	mov	r0, r4
 800e174:	f7fe ff3c 	bl	800cff0 <siscanf>
 800e178:	2800      	cmp	r0, #0
 800e17a:	dddf      	ble.n	800e13c <_tzset_unlocked_r+0x34>
 800e17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e17e:	18e7      	adds	r7, r4, r3
 800e180:	5ce3      	ldrb	r3, [r4, r3]
 800e182:	2b2d      	cmp	r3, #45	; 0x2d
 800e184:	d14c      	bne.n	800e220 <_tzset_unlocked_r+0x118>
 800e186:	3701      	adds	r7, #1
 800e188:	f04f 38ff 	mov.w	r8, #4294967295
 800e18c:	f10d 0a20 	add.w	sl, sp, #32
 800e190:	f10d 0b1e 	add.w	fp, sp, #30
 800e194:	2400      	movs	r4, #0
 800e196:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e19a:	4997      	ldr	r1, [pc, #604]	; (800e3f8 <_tzset_unlocked_r+0x2f0>)
 800e19c:	9603      	str	r6, [sp, #12]
 800e19e:	f8cd b000 	str.w	fp, [sp]
 800e1a2:	4633      	mov	r3, r6
 800e1a4:	aa07      	add	r2, sp, #28
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e1ac:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e1b0:	f7fe ff1e 	bl	800cff0 <siscanf>
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	ddc1      	ble.n	800e13c <_tzset_unlocked_r+0x34>
 800e1b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e1bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e1c0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800e404 <_tzset_unlocked_r+0x2fc>
 800e1c4:	213c      	movs	r1, #60	; 0x3c
 800e1c6:	fb01 3302 	mla	r3, r1, r2, r3
 800e1ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e1ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e1d2:	fb01 3302 	mla	r3, r1, r2, r3
 800e1d6:	fb08 f303 	mul.w	r3, r8, r3
 800e1da:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e3ec <_tzset_unlocked_r+0x2e4>
 800e1de:	62ab      	str	r3, [r5, #40]	; 0x28
 800e1e0:	4b83      	ldr	r3, [pc, #524]	; (800e3f0 <_tzset_unlocked_r+0x2e8>)
 800e1e2:	f8c8 3000 	str.w	r3, [r8]
 800e1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1e8:	4982      	ldr	r1, [pc, #520]	; (800e3f4 <_tzset_unlocked_r+0x2ec>)
 800e1ea:	441f      	add	r7, r3
 800e1ec:	464a      	mov	r2, r9
 800e1ee:	4633      	mov	r3, r6
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7fe fefd 	bl	800cff0 <siscanf>
 800e1f6:	42a0      	cmp	r0, r4
 800e1f8:	dc18      	bgt.n	800e22c <_tzset_unlocked_r+0x124>
 800e1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e1fe:	f8c8 3004 	str.w	r3, [r8, #4]
 800e202:	4b77      	ldr	r3, [pc, #476]	; (800e3e0 <_tzset_unlocked_r+0x2d8>)
 800e204:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	4b77      	ldr	r3, [pc, #476]	; (800e3e8 <_tzset_unlocked_r+0x2e0>)
 800e20a:	601c      	str	r4, [r3, #0]
 800e20c:	e796      	b.n	800e13c <_tzset_unlocked_r+0x34>
 800e20e:	f7f1 ffdf 	bl	80001d0 <strcmp>
 800e212:	2800      	cmp	r0, #0
 800e214:	d198      	bne.n	800e148 <_tzset_unlocked_r+0x40>
 800e216:	e791      	b.n	800e13c <_tzset_unlocked_r+0x34>
 800e218:	4621      	mov	r1, r4
 800e21a:	f7fe ff67 	bl	800d0ec <strcpy>
 800e21e:	e7a0      	b.n	800e162 <_tzset_unlocked_r+0x5a>
 800e220:	2b2b      	cmp	r3, #43	; 0x2b
 800e222:	bf08      	it	eq
 800e224:	3701      	addeq	r7, #1
 800e226:	f04f 0801 	mov.w	r8, #1
 800e22a:	e7af      	b.n	800e18c <_tzset_unlocked_r+0x84>
 800e22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22e:	f8c8 9004 	str.w	r9, [r8, #4]
 800e232:	18fc      	adds	r4, r7, r3
 800e234:	5cfb      	ldrb	r3, [r7, r3]
 800e236:	2b2d      	cmp	r3, #45	; 0x2d
 800e238:	f040 808b 	bne.w	800e352 <_tzset_unlocked_r+0x24a>
 800e23c:	3401      	adds	r4, #1
 800e23e:	f04f 37ff 	mov.w	r7, #4294967295
 800e242:	2300      	movs	r3, #0
 800e244:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e248:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e24c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e250:	930a      	str	r3, [sp, #40]	; 0x28
 800e252:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e256:	e9cd b600 	strd	fp, r6, [sp]
 800e25a:	4967      	ldr	r1, [pc, #412]	; (800e3f8 <_tzset_unlocked_r+0x2f0>)
 800e25c:	4633      	mov	r3, r6
 800e25e:	aa07      	add	r2, sp, #28
 800e260:	4620      	mov	r0, r4
 800e262:	f7fe fec5 	bl	800cff0 <siscanf>
 800e266:	2800      	cmp	r0, #0
 800e268:	dc78      	bgt.n	800e35c <_tzset_unlocked_r+0x254>
 800e26a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e26c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800e270:	652b      	str	r3, [r5, #80]	; 0x50
 800e272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e274:	462f      	mov	r7, r5
 800e276:	441c      	add	r4, r3
 800e278:	f04f 0900 	mov.w	r9, #0
 800e27c:	7823      	ldrb	r3, [r4, #0]
 800e27e:	2b2c      	cmp	r3, #44	; 0x2c
 800e280:	bf08      	it	eq
 800e282:	3401      	addeq	r4, #1
 800e284:	f894 8000 	ldrb.w	r8, [r4]
 800e288:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800e28c:	d178      	bne.n	800e380 <_tzset_unlocked_r+0x278>
 800e28e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e292:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e296:	ab09      	add	r3, sp, #36	; 0x24
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4958      	ldr	r1, [pc, #352]	; (800e3fc <_tzset_unlocked_r+0x2f4>)
 800e29c:	9603      	str	r6, [sp, #12]
 800e29e:	4633      	mov	r3, r6
 800e2a0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f7fe fea3 	bl	800cff0 <siscanf>
 800e2aa:	2803      	cmp	r0, #3
 800e2ac:	f47f af46 	bne.w	800e13c <_tzset_unlocked_r+0x34>
 800e2b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e2b4:	1e4b      	subs	r3, r1, #1
 800e2b6:	2b0b      	cmp	r3, #11
 800e2b8:	f63f af40 	bhi.w	800e13c <_tzset_unlocked_r+0x34>
 800e2bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e2c0:	1e53      	subs	r3, r2, #1
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	f63f af3a 	bhi.w	800e13c <_tzset_unlocked_r+0x34>
 800e2c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e2cc:	2b06      	cmp	r3, #6
 800e2ce:	f63f af35 	bhi.w	800e13c <_tzset_unlocked_r+0x34>
 800e2d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e2d6:	f887 8008 	strb.w	r8, [r7, #8]
 800e2da:	617b      	str	r3, [r7, #20]
 800e2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2de:	eb04 0803 	add.w	r8, r4, r3
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e2ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800e2f4:	f898 3000 	ldrb.w	r3, [r8]
 800e2f8:	2b2f      	cmp	r3, #47	; 0x2f
 800e2fa:	d109      	bne.n	800e310 <_tzset_unlocked_r+0x208>
 800e2fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e300:	e9cd b600 	strd	fp, r6, [sp]
 800e304:	493e      	ldr	r1, [pc, #248]	; (800e400 <_tzset_unlocked_r+0x2f8>)
 800e306:	4633      	mov	r3, r6
 800e308:	aa07      	add	r2, sp, #28
 800e30a:	4640      	mov	r0, r8
 800e30c:	f7fe fe70 	bl	800cff0 <siscanf>
 800e310:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e314:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e318:	213c      	movs	r1, #60	; 0x3c
 800e31a:	fb01 3302 	mla	r3, r1, r2, r3
 800e31e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e322:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e326:	fb01 3302 	mla	r3, r1, r2, r3
 800e32a:	61bb      	str	r3, [r7, #24]
 800e32c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e32e:	3728      	adds	r7, #40	; 0x28
 800e330:	4444      	add	r4, r8
 800e332:	f1b9 0f00 	cmp.w	r9, #0
 800e336:	d020      	beq.n	800e37a <_tzset_unlocked_r+0x272>
 800e338:	6868      	ldr	r0, [r5, #4]
 800e33a:	f7ff fe29 	bl	800df90 <__tzcalc_limits>
 800e33e:	4b28      	ldr	r3, [pc, #160]	; (800e3e0 <_tzset_unlocked_r+0x2d8>)
 800e340:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e346:	1a9b      	subs	r3, r3, r2
 800e348:	4a27      	ldr	r2, [pc, #156]	; (800e3e8 <_tzset_unlocked_r+0x2e0>)
 800e34a:	bf18      	it	ne
 800e34c:	2301      	movne	r3, #1
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	e6f4      	b.n	800e13c <_tzset_unlocked_r+0x34>
 800e352:	2b2b      	cmp	r3, #43	; 0x2b
 800e354:	bf08      	it	eq
 800e356:	3401      	addeq	r4, #1
 800e358:	2701      	movs	r7, #1
 800e35a:	e772      	b.n	800e242 <_tzset_unlocked_r+0x13a>
 800e35c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e360:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e364:	213c      	movs	r1, #60	; 0x3c
 800e366:	fb01 3302 	mla	r3, r1, r2, r3
 800e36a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e36e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e372:	fb01 3302 	mla	r3, r1, r2, r3
 800e376:	437b      	muls	r3, r7
 800e378:	e77a      	b.n	800e270 <_tzset_unlocked_r+0x168>
 800e37a:	f04f 0901 	mov.w	r9, #1
 800e37e:	e77d      	b.n	800e27c <_tzset_unlocked_r+0x174>
 800e380:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800e384:	bf06      	itte	eq
 800e386:	3401      	addeq	r4, #1
 800e388:	4643      	moveq	r3, r8
 800e38a:	2344      	movne	r3, #68	; 0x44
 800e38c:	220a      	movs	r2, #10
 800e38e:	a90b      	add	r1, sp, #44	; 0x2c
 800e390:	4620      	mov	r0, r4
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	f7ff fdf2 	bl	800df7c <strtoul>
 800e398:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e39c:	9b05      	ldr	r3, [sp, #20]
 800e39e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e3a2:	45a0      	cmp	r8, r4
 800e3a4:	d114      	bne.n	800e3d0 <_tzset_unlocked_r+0x2c8>
 800e3a6:	234d      	movs	r3, #77	; 0x4d
 800e3a8:	f1b9 0f00 	cmp.w	r9, #0
 800e3ac:	d107      	bne.n	800e3be <_tzset_unlocked_r+0x2b6>
 800e3ae:	722b      	strb	r3, [r5, #8]
 800e3b0:	2103      	movs	r1, #3
 800e3b2:	2302      	movs	r3, #2
 800e3b4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800e3b8:	f8c5 9014 	str.w	r9, [r5, #20]
 800e3bc:	e791      	b.n	800e2e2 <_tzset_unlocked_r+0x1da>
 800e3be:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800e3c2:	220b      	movs	r2, #11
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e3ce:	e788      	b.n	800e2e2 <_tzset_unlocked_r+0x1da>
 800e3d0:	b280      	uxth	r0, r0
 800e3d2:	723b      	strb	r3, [r7, #8]
 800e3d4:	6178      	str	r0, [r7, #20]
 800e3d6:	e784      	b.n	800e2e2 <_tzset_unlocked_r+0x1da>
 800e3d8:	08011d68 	.word	0x08011d68
 800e3dc:	200068a4 	.word	0x200068a4
 800e3e0:	200068ac 	.word	0x200068ac
 800e3e4:	08011d6b 	.word	0x08011d6b
 800e3e8:	200068a8 	.word	0x200068a8
 800e3ec:	20000084 	.word	0x20000084
 800e3f0:	20006897 	.word	0x20006897
 800e3f4:	08011d6f 	.word	0x08011d6f
 800e3f8:	08011d92 	.word	0x08011d92
 800e3fc:	08011d7e 	.word	0x08011d7e
 800e400:	08011d91 	.word	0x08011d91
 800e404:	2000688c 	.word	0x2000688c

0800e408 <_write_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	4d07      	ldr	r5, [pc, #28]	; (800e428 <_write_r+0x20>)
 800e40c:	4604      	mov	r4, r0
 800e40e:	4608      	mov	r0, r1
 800e410:	4611      	mov	r1, r2
 800e412:	2200      	movs	r2, #0
 800e414:	602a      	str	r2, [r5, #0]
 800e416:	461a      	mov	r2, r3
 800e418:	f7f4 ffa9 	bl	800336e <_write>
 800e41c:	1c43      	adds	r3, r0, #1
 800e41e:	d102      	bne.n	800e426 <_write_r+0x1e>
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	b103      	cbz	r3, 800e426 <_write_r+0x1e>
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	200068c0 	.word	0x200068c0

0800e42c <_close_r>:
 800e42c:	b538      	push	{r3, r4, r5, lr}
 800e42e:	4d06      	ldr	r5, [pc, #24]	; (800e448 <_close_r+0x1c>)
 800e430:	2300      	movs	r3, #0
 800e432:	4604      	mov	r4, r0
 800e434:	4608      	mov	r0, r1
 800e436:	602b      	str	r3, [r5, #0]
 800e438:	f7f4 ffb5 	bl	80033a6 <_close>
 800e43c:	1c43      	adds	r3, r0, #1
 800e43e:	d102      	bne.n	800e446 <_close_r+0x1a>
 800e440:	682b      	ldr	r3, [r5, #0]
 800e442:	b103      	cbz	r3, 800e446 <_close_r+0x1a>
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	200068c0 	.word	0x200068c0

0800e44c <div>:
 800e44c:	2900      	cmp	r1, #0
 800e44e:	b510      	push	{r4, lr}
 800e450:	fb91 f4f2 	sdiv	r4, r1, r2
 800e454:	fb02 1314 	mls	r3, r2, r4, r1
 800e458:	db06      	blt.n	800e468 <div+0x1c>
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da01      	bge.n	800e462 <div+0x16>
 800e45e:	3401      	adds	r4, #1
 800e460:	1a9b      	subs	r3, r3, r2
 800e462:	e9c0 4300 	strd	r4, r3, [r0]
 800e466:	bd10      	pop	{r4, pc}
 800e468:	2b00      	cmp	r3, #0
 800e46a:	bfc4      	itt	gt
 800e46c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e470:	189b      	addgt	r3, r3, r2
 800e472:	e7f6      	b.n	800e462 <div+0x16>

0800e474 <quorem>:
 800e474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e478:	6903      	ldr	r3, [r0, #16]
 800e47a:	690c      	ldr	r4, [r1, #16]
 800e47c:	42a3      	cmp	r3, r4
 800e47e:	4607      	mov	r7, r0
 800e480:	f2c0 8081 	blt.w	800e586 <quorem+0x112>
 800e484:	3c01      	subs	r4, #1
 800e486:	f101 0814 	add.w	r8, r1, #20
 800e48a:	f100 0514 	add.w	r5, r0, #20
 800e48e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e49c:	3301      	adds	r3, #1
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e4a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4ac:	d331      	bcc.n	800e512 <quorem+0x9e>
 800e4ae:	f04f 0e00 	mov.w	lr, #0
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	46ac      	mov	ip, r5
 800e4b6:	46f2      	mov	sl, lr
 800e4b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4bc:	b293      	uxth	r3, r2
 800e4be:	fb06 e303 	mla	r3, r6, r3, lr
 800e4c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e4cc:	f8dc a000 	ldr.w	sl, [ip]
 800e4d0:	0c12      	lsrs	r2, r2, #16
 800e4d2:	fa13 f38a 	uxtah	r3, r3, sl
 800e4d6:	fb06 e202 	mla	r2, r6, r2, lr
 800e4da:	9300      	str	r3, [sp, #0]
 800e4dc:	9b00      	ldr	r3, [sp, #0]
 800e4de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4e2:	b292      	uxth	r2, r2
 800e4e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e4e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800e4f0:	4581      	cmp	r9, r0
 800e4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e4fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4fe:	d2db      	bcs.n	800e4b8 <quorem+0x44>
 800e500:	f855 300b 	ldr.w	r3, [r5, fp]
 800e504:	b92b      	cbnz	r3, 800e512 <quorem+0x9e>
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	3b04      	subs	r3, #4
 800e50a:	429d      	cmp	r5, r3
 800e50c:	461a      	mov	r2, r3
 800e50e:	d32e      	bcc.n	800e56e <quorem+0xfa>
 800e510:	613c      	str	r4, [r7, #16]
 800e512:	4638      	mov	r0, r7
 800e514:	f001 fcec 	bl	800fef0 <__mcmp>
 800e518:	2800      	cmp	r0, #0
 800e51a:	db24      	blt.n	800e566 <quorem+0xf2>
 800e51c:	3601      	adds	r6, #1
 800e51e:	4628      	mov	r0, r5
 800e520:	f04f 0c00 	mov.w	ip, #0
 800e524:	f858 2b04 	ldr.w	r2, [r8], #4
 800e528:	f8d0 e000 	ldr.w	lr, [r0]
 800e52c:	b293      	uxth	r3, r2
 800e52e:	ebac 0303 	sub.w	r3, ip, r3
 800e532:	0c12      	lsrs	r2, r2, #16
 800e534:	fa13 f38e 	uxtah	r3, r3, lr
 800e538:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e53c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e540:	b29b      	uxth	r3, r3
 800e542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e546:	45c1      	cmp	r9, r8
 800e548:	f840 3b04 	str.w	r3, [r0], #4
 800e54c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e550:	d2e8      	bcs.n	800e524 <quorem+0xb0>
 800e552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e55a:	b922      	cbnz	r2, 800e566 <quorem+0xf2>
 800e55c:	3b04      	subs	r3, #4
 800e55e:	429d      	cmp	r5, r3
 800e560:	461a      	mov	r2, r3
 800e562:	d30a      	bcc.n	800e57a <quorem+0x106>
 800e564:	613c      	str	r4, [r7, #16]
 800e566:	4630      	mov	r0, r6
 800e568:	b003      	add	sp, #12
 800e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56e:	6812      	ldr	r2, [r2, #0]
 800e570:	3b04      	subs	r3, #4
 800e572:	2a00      	cmp	r2, #0
 800e574:	d1cc      	bne.n	800e510 <quorem+0x9c>
 800e576:	3c01      	subs	r4, #1
 800e578:	e7c7      	b.n	800e50a <quorem+0x96>
 800e57a:	6812      	ldr	r2, [r2, #0]
 800e57c:	3b04      	subs	r3, #4
 800e57e:	2a00      	cmp	r2, #0
 800e580:	d1f0      	bne.n	800e564 <quorem+0xf0>
 800e582:	3c01      	subs	r4, #1
 800e584:	e7eb      	b.n	800e55e <quorem+0xea>
 800e586:	2000      	movs	r0, #0
 800e588:	e7ee      	b.n	800e568 <quorem+0xf4>
 800e58a:	0000      	movs	r0, r0
 800e58c:	0000      	movs	r0, r0
	...

0800e590 <_dtoa_r>:
 800e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e594:	ed2d 8b04 	vpush	{d8-d9}
 800e598:	ec57 6b10 	vmov	r6, r7, d0
 800e59c:	b093      	sub	sp, #76	; 0x4c
 800e59e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e5a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e5a4:	9106      	str	r1, [sp, #24]
 800e5a6:	ee10 aa10 	vmov	sl, s0
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e5b0:	46bb      	mov	fp, r7
 800e5b2:	b975      	cbnz	r5, 800e5d2 <_dtoa_r+0x42>
 800e5b4:	2010      	movs	r0, #16
 800e5b6:	f001 f9ad 	bl	800f914 <malloc>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	6260      	str	r0, [r4, #36]	; 0x24
 800e5be:	b920      	cbnz	r0, 800e5ca <_dtoa_r+0x3a>
 800e5c0:	4ba7      	ldr	r3, [pc, #668]	; (800e860 <_dtoa_r+0x2d0>)
 800e5c2:	21ea      	movs	r1, #234	; 0xea
 800e5c4:	48a7      	ldr	r0, [pc, #668]	; (800e864 <_dtoa_r+0x2d4>)
 800e5c6:	f002 fcbf 	bl	8010f48 <__assert_func>
 800e5ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5ce:	6005      	str	r5, [r0, #0]
 800e5d0:	60c5      	str	r5, [r0, #12]
 800e5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d4:	6819      	ldr	r1, [r3, #0]
 800e5d6:	b151      	cbz	r1, 800e5ee <_dtoa_r+0x5e>
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	604a      	str	r2, [r1, #4]
 800e5dc:	2301      	movs	r3, #1
 800e5de:	4093      	lsls	r3, r2
 800e5e0:	608b      	str	r3, [r1, #8]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f001 f9f8 	bl	800f9d8 <_Bfree>
 800e5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	1e3b      	subs	r3, r7, #0
 800e5f0:	bfaa      	itet	ge
 800e5f2:	2300      	movge	r3, #0
 800e5f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e5f8:	f8c8 3000 	strge.w	r3, [r8]
 800e5fc:	4b9a      	ldr	r3, [pc, #616]	; (800e868 <_dtoa_r+0x2d8>)
 800e5fe:	bfbc      	itt	lt
 800e600:	2201      	movlt	r2, #1
 800e602:	f8c8 2000 	strlt.w	r2, [r8]
 800e606:	ea33 030b 	bics.w	r3, r3, fp
 800e60a:	d11b      	bne.n	800e644 <_dtoa_r+0xb4>
 800e60c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e60e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e618:	4333      	orrs	r3, r6
 800e61a:	f000 8592 	beq.w	800f142 <_dtoa_r+0xbb2>
 800e61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e620:	b963      	cbnz	r3, 800e63c <_dtoa_r+0xac>
 800e622:	4b92      	ldr	r3, [pc, #584]	; (800e86c <_dtoa_r+0x2dc>)
 800e624:	e022      	b.n	800e66c <_dtoa_r+0xdc>
 800e626:	4b92      	ldr	r3, [pc, #584]	; (800e870 <_dtoa_r+0x2e0>)
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	3308      	adds	r3, #8
 800e62c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e62e:	6013      	str	r3, [r2, #0]
 800e630:	9801      	ldr	r0, [sp, #4]
 800e632:	b013      	add	sp, #76	; 0x4c
 800e634:	ecbd 8b04 	vpop	{d8-d9}
 800e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	4b8b      	ldr	r3, [pc, #556]	; (800e86c <_dtoa_r+0x2dc>)
 800e63e:	9301      	str	r3, [sp, #4]
 800e640:	3303      	adds	r3, #3
 800e642:	e7f3      	b.n	800e62c <_dtoa_r+0x9c>
 800e644:	2200      	movs	r2, #0
 800e646:	2300      	movs	r3, #0
 800e648:	4650      	mov	r0, sl
 800e64a:	4659      	mov	r1, fp
 800e64c:	f7f2 fa4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e650:	ec4b ab19 	vmov	d9, sl, fp
 800e654:	4680      	mov	r8, r0
 800e656:	b158      	cbz	r0, 800e670 <_dtoa_r+0xe0>
 800e658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e65a:	2301      	movs	r3, #1
 800e65c:	6013      	str	r3, [r2, #0]
 800e65e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 856b 	beq.w	800f13c <_dtoa_r+0xbac>
 800e666:	4883      	ldr	r0, [pc, #524]	; (800e874 <_dtoa_r+0x2e4>)
 800e668:	6018      	str	r0, [r3, #0]
 800e66a:	1e43      	subs	r3, r0, #1
 800e66c:	9301      	str	r3, [sp, #4]
 800e66e:	e7df      	b.n	800e630 <_dtoa_r+0xa0>
 800e670:	ec4b ab10 	vmov	d0, sl, fp
 800e674:	aa10      	add	r2, sp, #64	; 0x40
 800e676:	a911      	add	r1, sp, #68	; 0x44
 800e678:	4620      	mov	r0, r4
 800e67a:	f001 fd5b 	bl	8010134 <__d2b>
 800e67e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e682:	ee08 0a10 	vmov	s16, r0
 800e686:	2d00      	cmp	r5, #0
 800e688:	f000 8084 	beq.w	800e794 <_dtoa_r+0x204>
 800e68c:	ee19 3a90 	vmov	r3, s19
 800e690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e694:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e698:	4656      	mov	r6, sl
 800e69a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e69e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e6a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e6a6:	4b74      	ldr	r3, [pc, #464]	; (800e878 <_dtoa_r+0x2e8>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f1 fdfb 	bl	80002a8 <__aeabi_dsub>
 800e6b2:	a365      	add	r3, pc, #404	; (adr r3, 800e848 <_dtoa_r+0x2b8>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f7f1 ffae 	bl	8000618 <__aeabi_dmul>
 800e6bc:	a364      	add	r3, pc, #400	; (adr r3, 800e850 <_dtoa_r+0x2c0>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 fdf3 	bl	80002ac <__adddf3>
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	460f      	mov	r7, r1
 800e6cc:	f7f1 ff3a 	bl	8000544 <__aeabi_i2d>
 800e6d0:	a361      	add	r3, pc, #388	; (adr r3, 800e858 <_dtoa_r+0x2c8>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 ff9f 	bl	8000618 <__aeabi_dmul>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4630      	mov	r0, r6
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	f7f1 fde3 	bl	80002ac <__adddf3>
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	460f      	mov	r7, r1
 800e6ea:	f7f2 fa45 	bl	8000b78 <__aeabi_d2iz>
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	9000      	str	r0, [sp, #0]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	f7f2 fa00 	bl	8000afc <__aeabi_dcmplt>
 800e6fc:	b150      	cbz	r0, 800e714 <_dtoa_r+0x184>
 800e6fe:	9800      	ldr	r0, [sp, #0]
 800e700:	f7f1 ff20 	bl	8000544 <__aeabi_i2d>
 800e704:	4632      	mov	r2, r6
 800e706:	463b      	mov	r3, r7
 800e708:	f7f2 f9ee 	bl	8000ae8 <__aeabi_dcmpeq>
 800e70c:	b910      	cbnz	r0, 800e714 <_dtoa_r+0x184>
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	3b01      	subs	r3, #1
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	9b00      	ldr	r3, [sp, #0]
 800e716:	2b16      	cmp	r3, #22
 800e718:	d85a      	bhi.n	800e7d0 <_dtoa_r+0x240>
 800e71a:	9a00      	ldr	r2, [sp, #0]
 800e71c:	4b57      	ldr	r3, [pc, #348]	; (800e87c <_dtoa_r+0x2ec>)
 800e71e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	ec51 0b19 	vmov	r0, r1, d9
 800e72a:	f7f2 f9e7 	bl	8000afc <__aeabi_dcmplt>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d050      	beq.n	800e7d4 <_dtoa_r+0x244>
 800e732:	9b00      	ldr	r3, [sp, #0]
 800e734:	3b01      	subs	r3, #1
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	2300      	movs	r3, #0
 800e73a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e73e:	1b5d      	subs	r5, r3, r5
 800e740:	1e6b      	subs	r3, r5, #1
 800e742:	9305      	str	r3, [sp, #20]
 800e744:	bf45      	ittet	mi
 800e746:	f1c5 0301 	rsbmi	r3, r5, #1
 800e74a:	9304      	strmi	r3, [sp, #16]
 800e74c:	2300      	movpl	r3, #0
 800e74e:	2300      	movmi	r3, #0
 800e750:	bf4c      	ite	mi
 800e752:	9305      	strmi	r3, [sp, #20]
 800e754:	9304      	strpl	r3, [sp, #16]
 800e756:	9b00      	ldr	r3, [sp, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	db3d      	blt.n	800e7d8 <_dtoa_r+0x248>
 800e75c:	9b05      	ldr	r3, [sp, #20]
 800e75e:	9a00      	ldr	r2, [sp, #0]
 800e760:	920a      	str	r2, [sp, #40]	; 0x28
 800e762:	4413      	add	r3, r2
 800e764:	9305      	str	r3, [sp, #20]
 800e766:	2300      	movs	r3, #0
 800e768:	9307      	str	r3, [sp, #28]
 800e76a:	9b06      	ldr	r3, [sp, #24]
 800e76c:	2b09      	cmp	r3, #9
 800e76e:	f200 8089 	bhi.w	800e884 <_dtoa_r+0x2f4>
 800e772:	2b05      	cmp	r3, #5
 800e774:	bfc4      	itt	gt
 800e776:	3b04      	subgt	r3, #4
 800e778:	9306      	strgt	r3, [sp, #24]
 800e77a:	9b06      	ldr	r3, [sp, #24]
 800e77c:	f1a3 0302 	sub.w	r3, r3, #2
 800e780:	bfcc      	ite	gt
 800e782:	2500      	movgt	r5, #0
 800e784:	2501      	movle	r5, #1
 800e786:	2b03      	cmp	r3, #3
 800e788:	f200 8087 	bhi.w	800e89a <_dtoa_r+0x30a>
 800e78c:	e8df f003 	tbb	[pc, r3]
 800e790:	59383a2d 	.word	0x59383a2d
 800e794:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e798:	441d      	add	r5, r3
 800e79a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e79e:	2b20      	cmp	r3, #32
 800e7a0:	bfc1      	itttt	gt
 800e7a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e7a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e7aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e7ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e7b2:	bfda      	itte	le
 800e7b4:	f1c3 0320 	rsble	r3, r3, #32
 800e7b8:	fa06 f003 	lslle.w	r0, r6, r3
 800e7bc:	4318      	orrgt	r0, r3
 800e7be:	f7f1 feb1 	bl	8000524 <__aeabi_ui2d>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4606      	mov	r6, r0
 800e7c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e7ca:	3d01      	subs	r5, #1
 800e7cc:	930e      	str	r3, [sp, #56]	; 0x38
 800e7ce:	e76a      	b.n	800e6a6 <_dtoa_r+0x116>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e7b2      	b.n	800e73a <_dtoa_r+0x1aa>
 800e7d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7d6:	e7b1      	b.n	800e73c <_dtoa_r+0x1ac>
 800e7d8:	9b04      	ldr	r3, [sp, #16]
 800e7da:	9a00      	ldr	r2, [sp, #0]
 800e7dc:	1a9b      	subs	r3, r3, r2
 800e7de:	9304      	str	r3, [sp, #16]
 800e7e0:	4253      	negs	r3, r2
 800e7e2:	9307      	str	r3, [sp, #28]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7e8:	e7bf      	b.n	800e76a <_dtoa_r+0x1da>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9308      	str	r3, [sp, #32]
 800e7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	dc55      	bgt.n	800e8a0 <_dtoa_r+0x310>
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e7fe:	e00c      	b.n	800e81a <_dtoa_r+0x28a>
 800e800:	2301      	movs	r3, #1
 800e802:	e7f3      	b.n	800e7ec <_dtoa_r+0x25c>
 800e804:	2300      	movs	r3, #0
 800e806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e808:	9308      	str	r3, [sp, #32]
 800e80a:	9b00      	ldr	r3, [sp, #0]
 800e80c:	4413      	add	r3, r2
 800e80e:	9302      	str	r3, [sp, #8]
 800e810:	3301      	adds	r3, #1
 800e812:	2b01      	cmp	r3, #1
 800e814:	9303      	str	r3, [sp, #12]
 800e816:	bfb8      	it	lt
 800e818:	2301      	movlt	r3, #1
 800e81a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e81c:	2200      	movs	r2, #0
 800e81e:	6042      	str	r2, [r0, #4]
 800e820:	2204      	movs	r2, #4
 800e822:	f102 0614 	add.w	r6, r2, #20
 800e826:	429e      	cmp	r6, r3
 800e828:	6841      	ldr	r1, [r0, #4]
 800e82a:	d93d      	bls.n	800e8a8 <_dtoa_r+0x318>
 800e82c:	4620      	mov	r0, r4
 800e82e:	f001 f893 	bl	800f958 <_Balloc>
 800e832:	9001      	str	r0, [sp, #4]
 800e834:	2800      	cmp	r0, #0
 800e836:	d13b      	bne.n	800e8b0 <_dtoa_r+0x320>
 800e838:	4b11      	ldr	r3, [pc, #68]	; (800e880 <_dtoa_r+0x2f0>)
 800e83a:	4602      	mov	r2, r0
 800e83c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e840:	e6c0      	b.n	800e5c4 <_dtoa_r+0x34>
 800e842:	2301      	movs	r3, #1
 800e844:	e7df      	b.n	800e806 <_dtoa_r+0x276>
 800e846:	bf00      	nop
 800e848:	636f4361 	.word	0x636f4361
 800e84c:	3fd287a7 	.word	0x3fd287a7
 800e850:	8b60c8b3 	.word	0x8b60c8b3
 800e854:	3fc68a28 	.word	0x3fc68a28
 800e858:	509f79fb 	.word	0x509f79fb
 800e85c:	3fd34413 	.word	0x3fd34413
 800e860:	08011eb2 	.word	0x08011eb2
 800e864:	08011ec9 	.word	0x08011ec9
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	08011eae 	.word	0x08011eae
 800e870:	08011ea5 	.word	0x08011ea5
 800e874:	08012182 	.word	0x08012182
 800e878:	3ff80000 	.word	0x3ff80000
 800e87c:	08012098 	.word	0x08012098
 800e880:	08011f24 	.word	0x08011f24
 800e884:	2501      	movs	r5, #1
 800e886:	2300      	movs	r3, #0
 800e888:	9306      	str	r3, [sp, #24]
 800e88a:	9508      	str	r5, [sp, #32]
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e894:	2200      	movs	r2, #0
 800e896:	2312      	movs	r3, #18
 800e898:	e7b0      	b.n	800e7fc <_dtoa_r+0x26c>
 800e89a:	2301      	movs	r3, #1
 800e89c:	9308      	str	r3, [sp, #32]
 800e89e:	e7f5      	b.n	800e88c <_dtoa_r+0x2fc>
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e8a6:	e7b8      	b.n	800e81a <_dtoa_r+0x28a>
 800e8a8:	3101      	adds	r1, #1
 800e8aa:	6041      	str	r1, [r0, #4]
 800e8ac:	0052      	lsls	r2, r2, #1
 800e8ae:	e7b8      	b.n	800e822 <_dtoa_r+0x292>
 800e8b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8b2:	9a01      	ldr	r2, [sp, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	2b0e      	cmp	r3, #14
 800e8ba:	f200 809d 	bhi.w	800e9f8 <_dtoa_r+0x468>
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	f000 809a 	beq.w	800e9f8 <_dtoa_r+0x468>
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	dd32      	ble.n	800e930 <_dtoa_r+0x3a0>
 800e8ca:	4ab7      	ldr	r2, [pc, #732]	; (800eba8 <_dtoa_r+0x618>)
 800e8cc:	f003 030f 	and.w	r3, r3, #15
 800e8d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8d8:	9b00      	ldr	r3, [sp, #0]
 800e8da:	05d8      	lsls	r0, r3, #23
 800e8dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e8e0:	d516      	bpl.n	800e910 <_dtoa_r+0x380>
 800e8e2:	4bb2      	ldr	r3, [pc, #712]	; (800ebac <_dtoa_r+0x61c>)
 800e8e4:	ec51 0b19 	vmov	r0, r1, d9
 800e8e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8ec:	f7f1 ffbe 	bl	800086c <__aeabi_ddiv>
 800e8f0:	f007 070f 	and.w	r7, r7, #15
 800e8f4:	4682      	mov	sl, r0
 800e8f6:	468b      	mov	fp, r1
 800e8f8:	2503      	movs	r5, #3
 800e8fa:	4eac      	ldr	r6, [pc, #688]	; (800ebac <_dtoa_r+0x61c>)
 800e8fc:	b957      	cbnz	r7, 800e914 <_dtoa_r+0x384>
 800e8fe:	4642      	mov	r2, r8
 800e900:	464b      	mov	r3, r9
 800e902:	4650      	mov	r0, sl
 800e904:	4659      	mov	r1, fp
 800e906:	f7f1 ffb1 	bl	800086c <__aeabi_ddiv>
 800e90a:	4682      	mov	sl, r0
 800e90c:	468b      	mov	fp, r1
 800e90e:	e028      	b.n	800e962 <_dtoa_r+0x3d2>
 800e910:	2502      	movs	r5, #2
 800e912:	e7f2      	b.n	800e8fa <_dtoa_r+0x36a>
 800e914:	07f9      	lsls	r1, r7, #31
 800e916:	d508      	bpl.n	800e92a <_dtoa_r+0x39a>
 800e918:	4640      	mov	r0, r8
 800e91a:	4649      	mov	r1, r9
 800e91c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e920:	f7f1 fe7a 	bl	8000618 <__aeabi_dmul>
 800e924:	3501      	adds	r5, #1
 800e926:	4680      	mov	r8, r0
 800e928:	4689      	mov	r9, r1
 800e92a:	107f      	asrs	r7, r7, #1
 800e92c:	3608      	adds	r6, #8
 800e92e:	e7e5      	b.n	800e8fc <_dtoa_r+0x36c>
 800e930:	f000 809b 	beq.w	800ea6a <_dtoa_r+0x4da>
 800e934:	9b00      	ldr	r3, [sp, #0]
 800e936:	4f9d      	ldr	r7, [pc, #628]	; (800ebac <_dtoa_r+0x61c>)
 800e938:	425e      	negs	r6, r3
 800e93a:	4b9b      	ldr	r3, [pc, #620]	; (800eba8 <_dtoa_r+0x618>)
 800e93c:	f006 020f 	and.w	r2, r6, #15
 800e940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	ec51 0b19 	vmov	r0, r1, d9
 800e94c:	f7f1 fe64 	bl	8000618 <__aeabi_dmul>
 800e950:	1136      	asrs	r6, r6, #4
 800e952:	4682      	mov	sl, r0
 800e954:	468b      	mov	fp, r1
 800e956:	2300      	movs	r3, #0
 800e958:	2502      	movs	r5, #2
 800e95a:	2e00      	cmp	r6, #0
 800e95c:	d17a      	bne.n	800ea54 <_dtoa_r+0x4c4>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1d3      	bne.n	800e90a <_dtoa_r+0x37a>
 800e962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 8082 	beq.w	800ea6e <_dtoa_r+0x4de>
 800e96a:	4b91      	ldr	r3, [pc, #580]	; (800ebb0 <_dtoa_r+0x620>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	4650      	mov	r0, sl
 800e970:	4659      	mov	r1, fp
 800e972:	f7f2 f8c3 	bl	8000afc <__aeabi_dcmplt>
 800e976:	2800      	cmp	r0, #0
 800e978:	d079      	beq.n	800ea6e <_dtoa_r+0x4de>
 800e97a:	9b03      	ldr	r3, [sp, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d076      	beq.n	800ea6e <_dtoa_r+0x4de>
 800e980:	9b02      	ldr	r3, [sp, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	dd36      	ble.n	800e9f4 <_dtoa_r+0x464>
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	4650      	mov	r0, sl
 800e98a:	4659      	mov	r1, fp
 800e98c:	1e5f      	subs	r7, r3, #1
 800e98e:	2200      	movs	r2, #0
 800e990:	4b88      	ldr	r3, [pc, #544]	; (800ebb4 <_dtoa_r+0x624>)
 800e992:	f7f1 fe41 	bl	8000618 <__aeabi_dmul>
 800e996:	9e02      	ldr	r6, [sp, #8]
 800e998:	4682      	mov	sl, r0
 800e99a:	468b      	mov	fp, r1
 800e99c:	3501      	adds	r5, #1
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f7f1 fdd0 	bl	8000544 <__aeabi_i2d>
 800e9a4:	4652      	mov	r2, sl
 800e9a6:	465b      	mov	r3, fp
 800e9a8:	f7f1 fe36 	bl	8000618 <__aeabi_dmul>
 800e9ac:	4b82      	ldr	r3, [pc, #520]	; (800ebb8 <_dtoa_r+0x628>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f7f1 fc7c 	bl	80002ac <__adddf3>
 800e9b4:	46d0      	mov	r8, sl
 800e9b6:	46d9      	mov	r9, fp
 800e9b8:	4682      	mov	sl, r0
 800e9ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e9be:	2e00      	cmp	r6, #0
 800e9c0:	d158      	bne.n	800ea74 <_dtoa_r+0x4e4>
 800e9c2:	4b7e      	ldr	r3, [pc, #504]	; (800ebbc <_dtoa_r+0x62c>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc6d 	bl	80002a8 <__aeabi_dsub>
 800e9ce:	4652      	mov	r2, sl
 800e9d0:	465b      	mov	r3, fp
 800e9d2:	4680      	mov	r8, r0
 800e9d4:	4689      	mov	r9, r1
 800e9d6:	f7f2 f8af 	bl	8000b38 <__aeabi_dcmpgt>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	f040 8295 	bne.w	800ef0a <_dtoa_r+0x97a>
 800e9e0:	4652      	mov	r2, sl
 800e9e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e9e6:	4640      	mov	r0, r8
 800e9e8:	4649      	mov	r1, r9
 800e9ea:	f7f2 f887 	bl	8000afc <__aeabi_dcmplt>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f040 8289 	bne.w	800ef06 <_dtoa_r+0x976>
 800e9f4:	ec5b ab19 	vmov	sl, fp, d9
 800e9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f2c0 8148 	blt.w	800ec90 <_dtoa_r+0x700>
 800ea00:	9a00      	ldr	r2, [sp, #0]
 800ea02:	2a0e      	cmp	r2, #14
 800ea04:	f300 8144 	bgt.w	800ec90 <_dtoa_r+0x700>
 800ea08:	4b67      	ldr	r3, [pc, #412]	; (800eba8 <_dtoa_r+0x618>)
 800ea0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f280 80d5 	bge.w	800ebc4 <_dtoa_r+0x634>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f300 80d1 	bgt.w	800ebc4 <_dtoa_r+0x634>
 800ea22:	f040 826f 	bne.w	800ef04 <_dtoa_r+0x974>
 800ea26:	4b65      	ldr	r3, [pc, #404]	; (800ebbc <_dtoa_r+0x62c>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	f7f1 fdf3 	bl	8000618 <__aeabi_dmul>
 800ea32:	4652      	mov	r2, sl
 800ea34:	465b      	mov	r3, fp
 800ea36:	f7f2 f875 	bl	8000b24 <__aeabi_dcmpge>
 800ea3a:	9e03      	ldr	r6, [sp, #12]
 800ea3c:	4637      	mov	r7, r6
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f040 8245 	bne.w	800eece <_dtoa_r+0x93e>
 800ea44:	9d01      	ldr	r5, [sp, #4]
 800ea46:	2331      	movs	r3, #49	; 0x31
 800ea48:	f805 3b01 	strb.w	r3, [r5], #1
 800ea4c:	9b00      	ldr	r3, [sp, #0]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	e240      	b.n	800eed6 <_dtoa_r+0x946>
 800ea54:	07f2      	lsls	r2, r6, #31
 800ea56:	d505      	bpl.n	800ea64 <_dtoa_r+0x4d4>
 800ea58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea5c:	f7f1 fddc 	bl	8000618 <__aeabi_dmul>
 800ea60:	3501      	adds	r5, #1
 800ea62:	2301      	movs	r3, #1
 800ea64:	1076      	asrs	r6, r6, #1
 800ea66:	3708      	adds	r7, #8
 800ea68:	e777      	b.n	800e95a <_dtoa_r+0x3ca>
 800ea6a:	2502      	movs	r5, #2
 800ea6c:	e779      	b.n	800e962 <_dtoa_r+0x3d2>
 800ea6e:	9f00      	ldr	r7, [sp, #0]
 800ea70:	9e03      	ldr	r6, [sp, #12]
 800ea72:	e794      	b.n	800e99e <_dtoa_r+0x40e>
 800ea74:	9901      	ldr	r1, [sp, #4]
 800ea76:	4b4c      	ldr	r3, [pc, #304]	; (800eba8 <_dtoa_r+0x618>)
 800ea78:	4431      	add	r1, r6
 800ea7a:	910d      	str	r1, [sp, #52]	; 0x34
 800ea7c:	9908      	ldr	r1, [sp, #32]
 800ea7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea86:	2900      	cmp	r1, #0
 800ea88:	d043      	beq.n	800eb12 <_dtoa_r+0x582>
 800ea8a:	494d      	ldr	r1, [pc, #308]	; (800ebc0 <_dtoa_r+0x630>)
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	f7f1 feed 	bl	800086c <__aeabi_ddiv>
 800ea92:	4652      	mov	r2, sl
 800ea94:	465b      	mov	r3, fp
 800ea96:	f7f1 fc07 	bl	80002a8 <__aeabi_dsub>
 800ea9a:	9d01      	ldr	r5, [sp, #4]
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	468b      	mov	fp, r1
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	f7f2 f868 	bl	8000b78 <__aeabi_d2iz>
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	f7f1 fd4b 	bl	8000544 <__aeabi_i2d>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4640      	mov	r0, r8
 800eab4:	4649      	mov	r1, r9
 800eab6:	f7f1 fbf7 	bl	80002a8 <__aeabi_dsub>
 800eaba:	3630      	adds	r6, #48	; 0x30
 800eabc:	f805 6b01 	strb.w	r6, [r5], #1
 800eac0:	4652      	mov	r2, sl
 800eac2:	465b      	mov	r3, fp
 800eac4:	4680      	mov	r8, r0
 800eac6:	4689      	mov	r9, r1
 800eac8:	f7f2 f818 	bl	8000afc <__aeabi_dcmplt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d163      	bne.n	800eb98 <_dtoa_r+0x608>
 800ead0:	4642      	mov	r2, r8
 800ead2:	464b      	mov	r3, r9
 800ead4:	4936      	ldr	r1, [pc, #216]	; (800ebb0 <_dtoa_r+0x620>)
 800ead6:	2000      	movs	r0, #0
 800ead8:	f7f1 fbe6 	bl	80002a8 <__aeabi_dsub>
 800eadc:	4652      	mov	r2, sl
 800eade:	465b      	mov	r3, fp
 800eae0:	f7f2 f80c 	bl	8000afc <__aeabi_dcmplt>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	f040 80b5 	bne.w	800ec54 <_dtoa_r+0x6c4>
 800eaea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaec:	429d      	cmp	r5, r3
 800eaee:	d081      	beq.n	800e9f4 <_dtoa_r+0x464>
 800eaf0:	4b30      	ldr	r3, [pc, #192]	; (800ebb4 <_dtoa_r+0x624>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	4650      	mov	r0, sl
 800eaf6:	4659      	mov	r1, fp
 800eaf8:	f7f1 fd8e 	bl	8000618 <__aeabi_dmul>
 800eafc:	4b2d      	ldr	r3, [pc, #180]	; (800ebb4 <_dtoa_r+0x624>)
 800eafe:	4682      	mov	sl, r0
 800eb00:	468b      	mov	fp, r1
 800eb02:	4640      	mov	r0, r8
 800eb04:	4649      	mov	r1, r9
 800eb06:	2200      	movs	r2, #0
 800eb08:	f7f1 fd86 	bl	8000618 <__aeabi_dmul>
 800eb0c:	4680      	mov	r8, r0
 800eb0e:	4689      	mov	r9, r1
 800eb10:	e7c6      	b.n	800eaa0 <_dtoa_r+0x510>
 800eb12:	4650      	mov	r0, sl
 800eb14:	4659      	mov	r1, fp
 800eb16:	f7f1 fd7f 	bl	8000618 <__aeabi_dmul>
 800eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb1c:	9d01      	ldr	r5, [sp, #4]
 800eb1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb20:	4682      	mov	sl, r0
 800eb22:	468b      	mov	fp, r1
 800eb24:	4649      	mov	r1, r9
 800eb26:	4640      	mov	r0, r8
 800eb28:	f7f2 f826 	bl	8000b78 <__aeabi_d2iz>
 800eb2c:	4606      	mov	r6, r0
 800eb2e:	f7f1 fd09 	bl	8000544 <__aeabi_i2d>
 800eb32:	3630      	adds	r6, #48	; 0x30
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	4640      	mov	r0, r8
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	f7f1 fbb4 	bl	80002a8 <__aeabi_dsub>
 800eb40:	f805 6b01 	strb.w	r6, [r5], #1
 800eb44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb46:	429d      	cmp	r5, r3
 800eb48:	4680      	mov	r8, r0
 800eb4a:	4689      	mov	r9, r1
 800eb4c:	f04f 0200 	mov.w	r2, #0
 800eb50:	d124      	bne.n	800eb9c <_dtoa_r+0x60c>
 800eb52:	4b1b      	ldr	r3, [pc, #108]	; (800ebc0 <_dtoa_r+0x630>)
 800eb54:	4650      	mov	r0, sl
 800eb56:	4659      	mov	r1, fp
 800eb58:	f7f1 fba8 	bl	80002ac <__adddf3>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4640      	mov	r0, r8
 800eb62:	4649      	mov	r1, r9
 800eb64:	f7f1 ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d173      	bne.n	800ec54 <_dtoa_r+0x6c4>
 800eb6c:	4652      	mov	r2, sl
 800eb6e:	465b      	mov	r3, fp
 800eb70:	4913      	ldr	r1, [pc, #76]	; (800ebc0 <_dtoa_r+0x630>)
 800eb72:	2000      	movs	r0, #0
 800eb74:	f7f1 fb98 	bl	80002a8 <__aeabi_dsub>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	4649      	mov	r1, r9
 800eb80:	f7f1 ffbc 	bl	8000afc <__aeabi_dcmplt>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	f43f af35 	beq.w	800e9f4 <_dtoa_r+0x464>
 800eb8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb8c:	1e6b      	subs	r3, r5, #1
 800eb8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb94:	2b30      	cmp	r3, #48	; 0x30
 800eb96:	d0f8      	beq.n	800eb8a <_dtoa_r+0x5fa>
 800eb98:	9700      	str	r7, [sp, #0]
 800eb9a:	e049      	b.n	800ec30 <_dtoa_r+0x6a0>
 800eb9c:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <_dtoa_r+0x624>)
 800eb9e:	f7f1 fd3b 	bl	8000618 <__aeabi_dmul>
 800eba2:	4680      	mov	r8, r0
 800eba4:	4689      	mov	r9, r1
 800eba6:	e7bd      	b.n	800eb24 <_dtoa_r+0x594>
 800eba8:	08012098 	.word	0x08012098
 800ebac:	08012070 	.word	0x08012070
 800ebb0:	3ff00000 	.word	0x3ff00000
 800ebb4:	40240000 	.word	0x40240000
 800ebb8:	401c0000 	.word	0x401c0000
 800ebbc:	40140000 	.word	0x40140000
 800ebc0:	3fe00000 	.word	0x3fe00000
 800ebc4:	9d01      	ldr	r5, [sp, #4]
 800ebc6:	4656      	mov	r6, sl
 800ebc8:	465f      	mov	r7, fp
 800ebca:	4642      	mov	r2, r8
 800ebcc:	464b      	mov	r3, r9
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fe4b 	bl	800086c <__aeabi_ddiv>
 800ebd6:	f7f1 ffcf 	bl	8000b78 <__aeabi_d2iz>
 800ebda:	4682      	mov	sl, r0
 800ebdc:	f7f1 fcb2 	bl	8000544 <__aeabi_i2d>
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	f7f1 fd18 	bl	8000618 <__aeabi_dmul>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	4630      	mov	r0, r6
 800ebee:	4639      	mov	r1, r7
 800ebf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ebf4:	f7f1 fb58 	bl	80002a8 <__aeabi_dsub>
 800ebf8:	f805 6b01 	strb.w	r6, [r5], #1
 800ebfc:	9e01      	ldr	r6, [sp, #4]
 800ebfe:	9f03      	ldr	r7, [sp, #12]
 800ec00:	1bae      	subs	r6, r5, r6
 800ec02:	42b7      	cmp	r7, r6
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	d135      	bne.n	800ec76 <_dtoa_r+0x6e6>
 800ec0a:	f7f1 fb4f 	bl	80002ac <__adddf3>
 800ec0e:	4642      	mov	r2, r8
 800ec10:	464b      	mov	r3, r9
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	f7f1 ff8f 	bl	8000b38 <__aeabi_dcmpgt>
 800ec1a:	b9d0      	cbnz	r0, 800ec52 <_dtoa_r+0x6c2>
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	464b      	mov	r3, r9
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 ff60 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec28:	b110      	cbz	r0, 800ec30 <_dtoa_r+0x6a0>
 800ec2a:	f01a 0f01 	tst.w	sl, #1
 800ec2e:	d110      	bne.n	800ec52 <_dtoa_r+0x6c2>
 800ec30:	4620      	mov	r0, r4
 800ec32:	ee18 1a10 	vmov	r1, s16
 800ec36:	f000 fecf 	bl	800f9d8 <_Bfree>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9800      	ldr	r0, [sp, #0]
 800ec3e:	702b      	strb	r3, [r5, #0]
 800ec40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec42:	3001      	adds	r0, #1
 800ec44:	6018      	str	r0, [r3, #0]
 800ec46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f43f acf1 	beq.w	800e630 <_dtoa_r+0xa0>
 800ec4e:	601d      	str	r5, [r3, #0]
 800ec50:	e4ee      	b.n	800e630 <_dtoa_r+0xa0>
 800ec52:	9f00      	ldr	r7, [sp, #0]
 800ec54:	462b      	mov	r3, r5
 800ec56:	461d      	mov	r5, r3
 800ec58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec5c:	2a39      	cmp	r2, #57	; 0x39
 800ec5e:	d106      	bne.n	800ec6e <_dtoa_r+0x6de>
 800ec60:	9a01      	ldr	r2, [sp, #4]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d1f7      	bne.n	800ec56 <_dtoa_r+0x6c6>
 800ec66:	9901      	ldr	r1, [sp, #4]
 800ec68:	2230      	movs	r2, #48	; 0x30
 800ec6a:	3701      	adds	r7, #1
 800ec6c:	700a      	strb	r2, [r1, #0]
 800ec6e:	781a      	ldrb	r2, [r3, #0]
 800ec70:	3201      	adds	r2, #1
 800ec72:	701a      	strb	r2, [r3, #0]
 800ec74:	e790      	b.n	800eb98 <_dtoa_r+0x608>
 800ec76:	4ba6      	ldr	r3, [pc, #664]	; (800ef10 <_dtoa_r+0x980>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f7f1 fccd 	bl	8000618 <__aeabi_dmul>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2300      	movs	r3, #0
 800ec82:	4606      	mov	r6, r0
 800ec84:	460f      	mov	r7, r1
 800ec86:	f7f1 ff2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d09d      	beq.n	800ebca <_dtoa_r+0x63a>
 800ec8e:	e7cf      	b.n	800ec30 <_dtoa_r+0x6a0>
 800ec90:	9a08      	ldr	r2, [sp, #32]
 800ec92:	2a00      	cmp	r2, #0
 800ec94:	f000 80d7 	beq.w	800ee46 <_dtoa_r+0x8b6>
 800ec98:	9a06      	ldr	r2, [sp, #24]
 800ec9a:	2a01      	cmp	r2, #1
 800ec9c:	f300 80ba 	bgt.w	800ee14 <_dtoa_r+0x884>
 800eca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eca2:	2a00      	cmp	r2, #0
 800eca4:	f000 80b2 	beq.w	800ee0c <_dtoa_r+0x87c>
 800eca8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecac:	9e07      	ldr	r6, [sp, #28]
 800ecae:	9d04      	ldr	r5, [sp, #16]
 800ecb0:	9a04      	ldr	r2, [sp, #16]
 800ecb2:	441a      	add	r2, r3
 800ecb4:	9204      	str	r2, [sp, #16]
 800ecb6:	9a05      	ldr	r2, [sp, #20]
 800ecb8:	2101      	movs	r1, #1
 800ecba:	441a      	add	r2, r3
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	9205      	str	r2, [sp, #20]
 800ecc0:	f000 ff8c 	bl	800fbdc <__i2b>
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	2d00      	cmp	r5, #0
 800ecc8:	dd0c      	ble.n	800ece4 <_dtoa_r+0x754>
 800ecca:	9b05      	ldr	r3, [sp, #20]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd09      	ble.n	800ece4 <_dtoa_r+0x754>
 800ecd0:	42ab      	cmp	r3, r5
 800ecd2:	9a04      	ldr	r2, [sp, #16]
 800ecd4:	bfa8      	it	ge
 800ecd6:	462b      	movge	r3, r5
 800ecd8:	1ad2      	subs	r2, r2, r3
 800ecda:	9204      	str	r2, [sp, #16]
 800ecdc:	9a05      	ldr	r2, [sp, #20]
 800ecde:	1aed      	subs	r5, r5, r3
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	9305      	str	r3, [sp, #20]
 800ece4:	9b07      	ldr	r3, [sp, #28]
 800ece6:	b31b      	cbz	r3, 800ed30 <_dtoa_r+0x7a0>
 800ece8:	9b08      	ldr	r3, [sp, #32]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 80af 	beq.w	800ee4e <_dtoa_r+0x8be>
 800ecf0:	2e00      	cmp	r6, #0
 800ecf2:	dd13      	ble.n	800ed1c <_dtoa_r+0x78c>
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f001 f82f 	bl	800fd5c <__pow5mult>
 800ecfe:	ee18 2a10 	vmov	r2, s16
 800ed02:	4601      	mov	r1, r0
 800ed04:	4607      	mov	r7, r0
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 ff7e 	bl	800fc08 <__multiply>
 800ed0c:	ee18 1a10 	vmov	r1, s16
 800ed10:	4680      	mov	r8, r0
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 fe60 	bl	800f9d8 <_Bfree>
 800ed18:	ee08 8a10 	vmov	s16, r8
 800ed1c:	9b07      	ldr	r3, [sp, #28]
 800ed1e:	1b9a      	subs	r2, r3, r6
 800ed20:	d006      	beq.n	800ed30 <_dtoa_r+0x7a0>
 800ed22:	ee18 1a10 	vmov	r1, s16
 800ed26:	4620      	mov	r0, r4
 800ed28:	f001 f818 	bl	800fd5c <__pow5mult>
 800ed2c:	ee08 0a10 	vmov	s16, r0
 800ed30:	2101      	movs	r1, #1
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 ff52 	bl	800fbdc <__i2b>
 800ed38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	f340 8088 	ble.w	800ee52 <_dtoa_r+0x8c2>
 800ed42:	461a      	mov	r2, r3
 800ed44:	4601      	mov	r1, r0
 800ed46:	4620      	mov	r0, r4
 800ed48:	f001 f808 	bl	800fd5c <__pow5mult>
 800ed4c:	9b06      	ldr	r3, [sp, #24]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	4606      	mov	r6, r0
 800ed52:	f340 8081 	ble.w	800ee58 <_dtoa_r+0x8c8>
 800ed56:	f04f 0800 	mov.w	r8, #0
 800ed5a:	6933      	ldr	r3, [r6, #16]
 800ed5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed60:	6918      	ldr	r0, [r3, #16]
 800ed62:	f000 feeb 	bl	800fb3c <__hi0bits>
 800ed66:	f1c0 0020 	rsb	r0, r0, #32
 800ed6a:	9b05      	ldr	r3, [sp, #20]
 800ed6c:	4418      	add	r0, r3
 800ed6e:	f010 001f 	ands.w	r0, r0, #31
 800ed72:	f000 8092 	beq.w	800ee9a <_dtoa_r+0x90a>
 800ed76:	f1c0 0320 	rsb	r3, r0, #32
 800ed7a:	2b04      	cmp	r3, #4
 800ed7c:	f340 808a 	ble.w	800ee94 <_dtoa_r+0x904>
 800ed80:	f1c0 001c 	rsb	r0, r0, #28
 800ed84:	9b04      	ldr	r3, [sp, #16]
 800ed86:	4403      	add	r3, r0
 800ed88:	9304      	str	r3, [sp, #16]
 800ed8a:	9b05      	ldr	r3, [sp, #20]
 800ed8c:	4403      	add	r3, r0
 800ed8e:	4405      	add	r5, r0
 800ed90:	9305      	str	r3, [sp, #20]
 800ed92:	9b04      	ldr	r3, [sp, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	dd07      	ble.n	800eda8 <_dtoa_r+0x818>
 800ed98:	ee18 1a10 	vmov	r1, s16
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f001 f836 	bl	800fe10 <__lshift>
 800eda4:	ee08 0a10 	vmov	s16, r0
 800eda8:	9b05      	ldr	r3, [sp, #20]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dd05      	ble.n	800edba <_dtoa_r+0x82a>
 800edae:	4631      	mov	r1, r6
 800edb0:	461a      	mov	r2, r3
 800edb2:	4620      	mov	r0, r4
 800edb4:	f001 f82c 	bl	800fe10 <__lshift>
 800edb8:	4606      	mov	r6, r0
 800edba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d06e      	beq.n	800ee9e <_dtoa_r+0x90e>
 800edc0:	ee18 0a10 	vmov	r0, s16
 800edc4:	4631      	mov	r1, r6
 800edc6:	f001 f893 	bl	800fef0 <__mcmp>
 800edca:	2800      	cmp	r0, #0
 800edcc:	da67      	bge.n	800ee9e <_dtoa_r+0x90e>
 800edce:	9b00      	ldr	r3, [sp, #0]
 800edd0:	3b01      	subs	r3, #1
 800edd2:	ee18 1a10 	vmov	r1, s16
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	220a      	movs	r2, #10
 800edda:	2300      	movs	r3, #0
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fe1d 	bl	800fa1c <__multadd>
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	ee08 0a10 	vmov	s16, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 81b1 	beq.w	800f150 <_dtoa_r+0xbc0>
 800edee:	2300      	movs	r3, #0
 800edf0:	4639      	mov	r1, r7
 800edf2:	220a      	movs	r2, #10
 800edf4:	4620      	mov	r0, r4
 800edf6:	f000 fe11 	bl	800fa1c <__multadd>
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	4607      	mov	r7, r0
 800ee00:	f300 808e 	bgt.w	800ef20 <_dtoa_r+0x990>
 800ee04:	9b06      	ldr	r3, [sp, #24]
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	dc51      	bgt.n	800eeae <_dtoa_r+0x91e>
 800ee0a:	e089      	b.n	800ef20 <_dtoa_r+0x990>
 800ee0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee12:	e74b      	b.n	800ecac <_dtoa_r+0x71c>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	1e5e      	subs	r6, r3, #1
 800ee18:	9b07      	ldr	r3, [sp, #28]
 800ee1a:	42b3      	cmp	r3, r6
 800ee1c:	bfbf      	itttt	lt
 800ee1e:	9b07      	ldrlt	r3, [sp, #28]
 800ee20:	9607      	strlt	r6, [sp, #28]
 800ee22:	1af2      	sublt	r2, r6, r3
 800ee24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ee26:	bfb6      	itet	lt
 800ee28:	189b      	addlt	r3, r3, r2
 800ee2a:	1b9e      	subge	r6, r3, r6
 800ee2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	bfb8      	it	lt
 800ee32:	2600      	movlt	r6, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bfb7      	itett	lt
 800ee38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ee3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ee40:	1a9d      	sublt	r5, r3, r2
 800ee42:	2300      	movlt	r3, #0
 800ee44:	e734      	b.n	800ecb0 <_dtoa_r+0x720>
 800ee46:	9e07      	ldr	r6, [sp, #28]
 800ee48:	9d04      	ldr	r5, [sp, #16]
 800ee4a:	9f08      	ldr	r7, [sp, #32]
 800ee4c:	e73b      	b.n	800ecc6 <_dtoa_r+0x736>
 800ee4e:	9a07      	ldr	r2, [sp, #28]
 800ee50:	e767      	b.n	800ed22 <_dtoa_r+0x792>
 800ee52:	9b06      	ldr	r3, [sp, #24]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	dc18      	bgt.n	800ee8a <_dtoa_r+0x8fa>
 800ee58:	f1ba 0f00 	cmp.w	sl, #0
 800ee5c:	d115      	bne.n	800ee8a <_dtoa_r+0x8fa>
 800ee5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee62:	b993      	cbnz	r3, 800ee8a <_dtoa_r+0x8fa>
 800ee64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee68:	0d1b      	lsrs	r3, r3, #20
 800ee6a:	051b      	lsls	r3, r3, #20
 800ee6c:	b183      	cbz	r3, 800ee90 <_dtoa_r+0x900>
 800ee6e:	9b04      	ldr	r3, [sp, #16]
 800ee70:	3301      	adds	r3, #1
 800ee72:	9304      	str	r3, [sp, #16]
 800ee74:	9b05      	ldr	r3, [sp, #20]
 800ee76:	3301      	adds	r3, #1
 800ee78:	9305      	str	r3, [sp, #20]
 800ee7a:	f04f 0801 	mov.w	r8, #1
 800ee7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f47f af6a 	bne.w	800ed5a <_dtoa_r+0x7ca>
 800ee86:	2001      	movs	r0, #1
 800ee88:	e76f      	b.n	800ed6a <_dtoa_r+0x7da>
 800ee8a:	f04f 0800 	mov.w	r8, #0
 800ee8e:	e7f6      	b.n	800ee7e <_dtoa_r+0x8ee>
 800ee90:	4698      	mov	r8, r3
 800ee92:	e7f4      	b.n	800ee7e <_dtoa_r+0x8ee>
 800ee94:	f43f af7d 	beq.w	800ed92 <_dtoa_r+0x802>
 800ee98:	4618      	mov	r0, r3
 800ee9a:	301c      	adds	r0, #28
 800ee9c:	e772      	b.n	800ed84 <_dtoa_r+0x7f4>
 800ee9e:	9b03      	ldr	r3, [sp, #12]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	dc37      	bgt.n	800ef14 <_dtoa_r+0x984>
 800eea4:	9b06      	ldr	r3, [sp, #24]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	dd34      	ble.n	800ef14 <_dtoa_r+0x984>
 800eeaa:	9b03      	ldr	r3, [sp, #12]
 800eeac:	9302      	str	r3, [sp, #8]
 800eeae:	9b02      	ldr	r3, [sp, #8]
 800eeb0:	b96b      	cbnz	r3, 800eece <_dtoa_r+0x93e>
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	2205      	movs	r2, #5
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 fdb0 	bl	800fa1c <__multadd>
 800eebc:	4601      	mov	r1, r0
 800eebe:	4606      	mov	r6, r0
 800eec0:	ee18 0a10 	vmov	r0, s16
 800eec4:	f001 f814 	bl	800fef0 <__mcmp>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	f73f adbb 	bgt.w	800ea44 <_dtoa_r+0x4b4>
 800eece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed0:	9d01      	ldr	r5, [sp, #4]
 800eed2:	43db      	mvns	r3, r3
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	f04f 0800 	mov.w	r8, #0
 800eeda:	4631      	mov	r1, r6
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 fd7b 	bl	800f9d8 <_Bfree>
 800eee2:	2f00      	cmp	r7, #0
 800eee4:	f43f aea4 	beq.w	800ec30 <_dtoa_r+0x6a0>
 800eee8:	f1b8 0f00 	cmp.w	r8, #0
 800eeec:	d005      	beq.n	800eefa <_dtoa_r+0x96a>
 800eeee:	45b8      	cmp	r8, r7
 800eef0:	d003      	beq.n	800eefa <_dtoa_r+0x96a>
 800eef2:	4641      	mov	r1, r8
 800eef4:	4620      	mov	r0, r4
 800eef6:	f000 fd6f 	bl	800f9d8 <_Bfree>
 800eefa:	4639      	mov	r1, r7
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 fd6b 	bl	800f9d8 <_Bfree>
 800ef02:	e695      	b.n	800ec30 <_dtoa_r+0x6a0>
 800ef04:	2600      	movs	r6, #0
 800ef06:	4637      	mov	r7, r6
 800ef08:	e7e1      	b.n	800eece <_dtoa_r+0x93e>
 800ef0a:	9700      	str	r7, [sp, #0]
 800ef0c:	4637      	mov	r7, r6
 800ef0e:	e599      	b.n	800ea44 <_dtoa_r+0x4b4>
 800ef10:	40240000 	.word	0x40240000
 800ef14:	9b08      	ldr	r3, [sp, #32]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 80ca 	beq.w	800f0b0 <_dtoa_r+0xb20>
 800ef1c:	9b03      	ldr	r3, [sp, #12]
 800ef1e:	9302      	str	r3, [sp, #8]
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	dd05      	ble.n	800ef30 <_dtoa_r+0x9a0>
 800ef24:	4639      	mov	r1, r7
 800ef26:	462a      	mov	r2, r5
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 ff71 	bl	800fe10 <__lshift>
 800ef2e:	4607      	mov	r7, r0
 800ef30:	f1b8 0f00 	cmp.w	r8, #0
 800ef34:	d05b      	beq.n	800efee <_dtoa_r+0xa5e>
 800ef36:	6879      	ldr	r1, [r7, #4]
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 fd0d 	bl	800f958 <_Balloc>
 800ef3e:	4605      	mov	r5, r0
 800ef40:	b928      	cbnz	r0, 800ef4e <_dtoa_r+0x9be>
 800ef42:	4b87      	ldr	r3, [pc, #540]	; (800f160 <_dtoa_r+0xbd0>)
 800ef44:	4602      	mov	r2, r0
 800ef46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef4a:	f7ff bb3b 	b.w	800e5c4 <_dtoa_r+0x34>
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	3202      	adds	r2, #2
 800ef52:	0092      	lsls	r2, r2, #2
 800ef54:	f107 010c 	add.w	r1, r7, #12
 800ef58:	300c      	adds	r0, #12
 800ef5a:	f7fc ff21 	bl	800bda0 <memcpy>
 800ef5e:	2201      	movs	r2, #1
 800ef60:	4629      	mov	r1, r5
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 ff54 	bl	800fe10 <__lshift>
 800ef68:	9b01      	ldr	r3, [sp, #4]
 800ef6a:	f103 0901 	add.w	r9, r3, #1
 800ef6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ef72:	4413      	add	r3, r2
 800ef74:	9305      	str	r3, [sp, #20]
 800ef76:	f00a 0301 	and.w	r3, sl, #1
 800ef7a:	46b8      	mov	r8, r7
 800ef7c:	9304      	str	r3, [sp, #16]
 800ef7e:	4607      	mov	r7, r0
 800ef80:	4631      	mov	r1, r6
 800ef82:	ee18 0a10 	vmov	r0, s16
 800ef86:	f7ff fa75 	bl	800e474 <quorem>
 800ef8a:	4641      	mov	r1, r8
 800ef8c:	9002      	str	r0, [sp, #8]
 800ef8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef92:	ee18 0a10 	vmov	r0, s16
 800ef96:	f000 ffab 	bl	800fef0 <__mcmp>
 800ef9a:	463a      	mov	r2, r7
 800ef9c:	9003      	str	r0, [sp, #12]
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4620      	mov	r0, r4
 800efa2:	f000 ffc1 	bl	800ff28 <__mdiff>
 800efa6:	68c2      	ldr	r2, [r0, #12]
 800efa8:	f109 3bff 	add.w	fp, r9, #4294967295
 800efac:	4605      	mov	r5, r0
 800efae:	bb02      	cbnz	r2, 800eff2 <_dtoa_r+0xa62>
 800efb0:	4601      	mov	r1, r0
 800efb2:	ee18 0a10 	vmov	r0, s16
 800efb6:	f000 ff9b 	bl	800fef0 <__mcmp>
 800efba:	4602      	mov	r2, r0
 800efbc:	4629      	mov	r1, r5
 800efbe:	4620      	mov	r0, r4
 800efc0:	9207      	str	r2, [sp, #28]
 800efc2:	f000 fd09 	bl	800f9d8 <_Bfree>
 800efc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800efca:	ea43 0102 	orr.w	r1, r3, r2
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	430b      	orrs	r3, r1
 800efd2:	464d      	mov	r5, r9
 800efd4:	d10f      	bne.n	800eff6 <_dtoa_r+0xa66>
 800efd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800efda:	d02a      	beq.n	800f032 <_dtoa_r+0xaa2>
 800efdc:	9b03      	ldr	r3, [sp, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dd02      	ble.n	800efe8 <_dtoa_r+0xa58>
 800efe2:	9b02      	ldr	r3, [sp, #8]
 800efe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800efe8:	f88b a000 	strb.w	sl, [fp]
 800efec:	e775      	b.n	800eeda <_dtoa_r+0x94a>
 800efee:	4638      	mov	r0, r7
 800eff0:	e7ba      	b.n	800ef68 <_dtoa_r+0x9d8>
 800eff2:	2201      	movs	r2, #1
 800eff4:	e7e2      	b.n	800efbc <_dtoa_r+0xa2c>
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	db04      	blt.n	800f006 <_dtoa_r+0xa76>
 800effc:	9906      	ldr	r1, [sp, #24]
 800effe:	430b      	orrs	r3, r1
 800f000:	9904      	ldr	r1, [sp, #16]
 800f002:	430b      	orrs	r3, r1
 800f004:	d122      	bne.n	800f04c <_dtoa_r+0xabc>
 800f006:	2a00      	cmp	r2, #0
 800f008:	ddee      	ble.n	800efe8 <_dtoa_r+0xa58>
 800f00a:	ee18 1a10 	vmov	r1, s16
 800f00e:	2201      	movs	r2, #1
 800f010:	4620      	mov	r0, r4
 800f012:	f000 fefd 	bl	800fe10 <__lshift>
 800f016:	4631      	mov	r1, r6
 800f018:	ee08 0a10 	vmov	s16, r0
 800f01c:	f000 ff68 	bl	800fef0 <__mcmp>
 800f020:	2800      	cmp	r0, #0
 800f022:	dc03      	bgt.n	800f02c <_dtoa_r+0xa9c>
 800f024:	d1e0      	bne.n	800efe8 <_dtoa_r+0xa58>
 800f026:	f01a 0f01 	tst.w	sl, #1
 800f02a:	d0dd      	beq.n	800efe8 <_dtoa_r+0xa58>
 800f02c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f030:	d1d7      	bne.n	800efe2 <_dtoa_r+0xa52>
 800f032:	2339      	movs	r3, #57	; 0x39
 800f034:	f88b 3000 	strb.w	r3, [fp]
 800f038:	462b      	mov	r3, r5
 800f03a:	461d      	mov	r5, r3
 800f03c:	3b01      	subs	r3, #1
 800f03e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f042:	2a39      	cmp	r2, #57	; 0x39
 800f044:	d071      	beq.n	800f12a <_dtoa_r+0xb9a>
 800f046:	3201      	adds	r2, #1
 800f048:	701a      	strb	r2, [r3, #0]
 800f04a:	e746      	b.n	800eeda <_dtoa_r+0x94a>
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	dd07      	ble.n	800f060 <_dtoa_r+0xad0>
 800f050:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f054:	d0ed      	beq.n	800f032 <_dtoa_r+0xaa2>
 800f056:	f10a 0301 	add.w	r3, sl, #1
 800f05a:	f88b 3000 	strb.w	r3, [fp]
 800f05e:	e73c      	b.n	800eeda <_dtoa_r+0x94a>
 800f060:	9b05      	ldr	r3, [sp, #20]
 800f062:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f066:	4599      	cmp	r9, r3
 800f068:	d047      	beq.n	800f0fa <_dtoa_r+0xb6a>
 800f06a:	ee18 1a10 	vmov	r1, s16
 800f06e:	2300      	movs	r3, #0
 800f070:	220a      	movs	r2, #10
 800f072:	4620      	mov	r0, r4
 800f074:	f000 fcd2 	bl	800fa1c <__multadd>
 800f078:	45b8      	cmp	r8, r7
 800f07a:	ee08 0a10 	vmov	s16, r0
 800f07e:	f04f 0300 	mov.w	r3, #0
 800f082:	f04f 020a 	mov.w	r2, #10
 800f086:	4641      	mov	r1, r8
 800f088:	4620      	mov	r0, r4
 800f08a:	d106      	bne.n	800f09a <_dtoa_r+0xb0a>
 800f08c:	f000 fcc6 	bl	800fa1c <__multadd>
 800f090:	4680      	mov	r8, r0
 800f092:	4607      	mov	r7, r0
 800f094:	f109 0901 	add.w	r9, r9, #1
 800f098:	e772      	b.n	800ef80 <_dtoa_r+0x9f0>
 800f09a:	f000 fcbf 	bl	800fa1c <__multadd>
 800f09e:	4639      	mov	r1, r7
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	220a      	movs	r2, #10
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 fcb8 	bl	800fa1c <__multadd>
 800f0ac:	4607      	mov	r7, r0
 800f0ae:	e7f1      	b.n	800f094 <_dtoa_r+0xb04>
 800f0b0:	9b03      	ldr	r3, [sp, #12]
 800f0b2:	9302      	str	r3, [sp, #8]
 800f0b4:	9d01      	ldr	r5, [sp, #4]
 800f0b6:	ee18 0a10 	vmov	r0, s16
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	f7ff f9da 	bl	800e474 <quorem>
 800f0c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f0c4:	9b01      	ldr	r3, [sp, #4]
 800f0c6:	f805 ab01 	strb.w	sl, [r5], #1
 800f0ca:	1aea      	subs	r2, r5, r3
 800f0cc:	9b02      	ldr	r3, [sp, #8]
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	dd09      	ble.n	800f0e6 <_dtoa_r+0xb56>
 800f0d2:	ee18 1a10 	vmov	r1, s16
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	220a      	movs	r2, #10
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 fc9e 	bl	800fa1c <__multadd>
 800f0e0:	ee08 0a10 	vmov	s16, r0
 800f0e4:	e7e7      	b.n	800f0b6 <_dtoa_r+0xb26>
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	bfc8      	it	gt
 800f0ec:	461d      	movgt	r5, r3
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	bfd8      	it	le
 800f0f2:	2501      	movle	r5, #1
 800f0f4:	441d      	add	r5, r3
 800f0f6:	f04f 0800 	mov.w	r8, #0
 800f0fa:	ee18 1a10 	vmov	r1, s16
 800f0fe:	2201      	movs	r2, #1
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fe85 	bl	800fe10 <__lshift>
 800f106:	4631      	mov	r1, r6
 800f108:	ee08 0a10 	vmov	s16, r0
 800f10c:	f000 fef0 	bl	800fef0 <__mcmp>
 800f110:	2800      	cmp	r0, #0
 800f112:	dc91      	bgt.n	800f038 <_dtoa_r+0xaa8>
 800f114:	d102      	bne.n	800f11c <_dtoa_r+0xb8c>
 800f116:	f01a 0f01 	tst.w	sl, #1
 800f11a:	d18d      	bne.n	800f038 <_dtoa_r+0xaa8>
 800f11c:	462b      	mov	r3, r5
 800f11e:	461d      	mov	r5, r3
 800f120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f124:	2a30      	cmp	r2, #48	; 0x30
 800f126:	d0fa      	beq.n	800f11e <_dtoa_r+0xb8e>
 800f128:	e6d7      	b.n	800eeda <_dtoa_r+0x94a>
 800f12a:	9a01      	ldr	r2, [sp, #4]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d184      	bne.n	800f03a <_dtoa_r+0xaaa>
 800f130:	9b00      	ldr	r3, [sp, #0]
 800f132:	3301      	adds	r3, #1
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	2331      	movs	r3, #49	; 0x31
 800f138:	7013      	strb	r3, [r2, #0]
 800f13a:	e6ce      	b.n	800eeda <_dtoa_r+0x94a>
 800f13c:	4b09      	ldr	r3, [pc, #36]	; (800f164 <_dtoa_r+0xbd4>)
 800f13e:	f7ff ba95 	b.w	800e66c <_dtoa_r+0xdc>
 800f142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f144:	2b00      	cmp	r3, #0
 800f146:	f47f aa6e 	bne.w	800e626 <_dtoa_r+0x96>
 800f14a:	4b07      	ldr	r3, [pc, #28]	; (800f168 <_dtoa_r+0xbd8>)
 800f14c:	f7ff ba8e 	b.w	800e66c <_dtoa_r+0xdc>
 800f150:	9b02      	ldr	r3, [sp, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	dcae      	bgt.n	800f0b4 <_dtoa_r+0xb24>
 800f156:	9b06      	ldr	r3, [sp, #24]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	f73f aea8 	bgt.w	800eeae <_dtoa_r+0x91e>
 800f15e:	e7a9      	b.n	800f0b4 <_dtoa_r+0xb24>
 800f160:	08011f24 	.word	0x08011f24
 800f164:	08012181 	.word	0x08012181
 800f168:	08011ea5 	.word	0x08011ea5

0800f16c <rshift>:
 800f16c:	6903      	ldr	r3, [r0, #16]
 800f16e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f172:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f176:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f17a:	f100 0414 	add.w	r4, r0, #20
 800f17e:	dd45      	ble.n	800f20c <rshift+0xa0>
 800f180:	f011 011f 	ands.w	r1, r1, #31
 800f184:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f188:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f18c:	d10c      	bne.n	800f1a8 <rshift+0x3c>
 800f18e:	f100 0710 	add.w	r7, r0, #16
 800f192:	4629      	mov	r1, r5
 800f194:	42b1      	cmp	r1, r6
 800f196:	d334      	bcc.n	800f202 <rshift+0x96>
 800f198:	1a9b      	subs	r3, r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	1eea      	subs	r2, r5, #3
 800f19e:	4296      	cmp	r6, r2
 800f1a0:	bf38      	it	cc
 800f1a2:	2300      	movcc	r3, #0
 800f1a4:	4423      	add	r3, r4
 800f1a6:	e015      	b.n	800f1d4 <rshift+0x68>
 800f1a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1ac:	f1c1 0820 	rsb	r8, r1, #32
 800f1b0:	40cf      	lsrs	r7, r1
 800f1b2:	f105 0e04 	add.w	lr, r5, #4
 800f1b6:	46a1      	mov	r9, r4
 800f1b8:	4576      	cmp	r6, lr
 800f1ba:	46f4      	mov	ip, lr
 800f1bc:	d815      	bhi.n	800f1ea <rshift+0x7e>
 800f1be:	1a9a      	subs	r2, r3, r2
 800f1c0:	0092      	lsls	r2, r2, #2
 800f1c2:	3a04      	subs	r2, #4
 800f1c4:	3501      	adds	r5, #1
 800f1c6:	42ae      	cmp	r6, r5
 800f1c8:	bf38      	it	cc
 800f1ca:	2200      	movcc	r2, #0
 800f1cc:	18a3      	adds	r3, r4, r2
 800f1ce:	50a7      	str	r7, [r4, r2]
 800f1d0:	b107      	cbz	r7, 800f1d4 <rshift+0x68>
 800f1d2:	3304      	adds	r3, #4
 800f1d4:	1b1a      	subs	r2, r3, r4
 800f1d6:	42a3      	cmp	r3, r4
 800f1d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f1dc:	bf08      	it	eq
 800f1de:	2300      	moveq	r3, #0
 800f1e0:	6102      	str	r2, [r0, #16]
 800f1e2:	bf08      	it	eq
 800f1e4:	6143      	streq	r3, [r0, #20]
 800f1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ea:	f8dc c000 	ldr.w	ip, [ip]
 800f1ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800f1f2:	ea4c 0707 	orr.w	r7, ip, r7
 800f1f6:	f849 7b04 	str.w	r7, [r9], #4
 800f1fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f1fe:	40cf      	lsrs	r7, r1
 800f200:	e7da      	b.n	800f1b8 <rshift+0x4c>
 800f202:	f851 cb04 	ldr.w	ip, [r1], #4
 800f206:	f847 cf04 	str.w	ip, [r7, #4]!
 800f20a:	e7c3      	b.n	800f194 <rshift+0x28>
 800f20c:	4623      	mov	r3, r4
 800f20e:	e7e1      	b.n	800f1d4 <rshift+0x68>

0800f210 <__hexdig_fun>:
 800f210:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f214:	2b09      	cmp	r3, #9
 800f216:	d802      	bhi.n	800f21e <__hexdig_fun+0xe>
 800f218:	3820      	subs	r0, #32
 800f21a:	b2c0      	uxtb	r0, r0
 800f21c:	4770      	bx	lr
 800f21e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f222:	2b05      	cmp	r3, #5
 800f224:	d801      	bhi.n	800f22a <__hexdig_fun+0x1a>
 800f226:	3847      	subs	r0, #71	; 0x47
 800f228:	e7f7      	b.n	800f21a <__hexdig_fun+0xa>
 800f22a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f22e:	2b05      	cmp	r3, #5
 800f230:	d801      	bhi.n	800f236 <__hexdig_fun+0x26>
 800f232:	3827      	subs	r0, #39	; 0x27
 800f234:	e7f1      	b.n	800f21a <__hexdig_fun+0xa>
 800f236:	2000      	movs	r0, #0
 800f238:	4770      	bx	lr
	...

0800f23c <__gethex>:
 800f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f240:	ed2d 8b02 	vpush	{d8}
 800f244:	b089      	sub	sp, #36	; 0x24
 800f246:	ee08 0a10 	vmov	s16, r0
 800f24a:	9304      	str	r3, [sp, #16]
 800f24c:	4bb4      	ldr	r3, [pc, #720]	; (800f520 <__gethex+0x2e4>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	9301      	str	r3, [sp, #4]
 800f252:	4618      	mov	r0, r3
 800f254:	468b      	mov	fp, r1
 800f256:	4690      	mov	r8, r2
 800f258:	f7f0 ffc4 	bl	80001e4 <strlen>
 800f25c:	9b01      	ldr	r3, [sp, #4]
 800f25e:	f8db 2000 	ldr.w	r2, [fp]
 800f262:	4403      	add	r3, r0
 800f264:	4682      	mov	sl, r0
 800f266:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f26a:	9305      	str	r3, [sp, #20]
 800f26c:	1c93      	adds	r3, r2, #2
 800f26e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f272:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f276:	32fe      	adds	r2, #254	; 0xfe
 800f278:	18d1      	adds	r1, r2, r3
 800f27a:	461f      	mov	r7, r3
 800f27c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f280:	9100      	str	r1, [sp, #0]
 800f282:	2830      	cmp	r0, #48	; 0x30
 800f284:	d0f8      	beq.n	800f278 <__gethex+0x3c>
 800f286:	f7ff ffc3 	bl	800f210 <__hexdig_fun>
 800f28a:	4604      	mov	r4, r0
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d13a      	bne.n	800f306 <__gethex+0xca>
 800f290:	9901      	ldr	r1, [sp, #4]
 800f292:	4652      	mov	r2, sl
 800f294:	4638      	mov	r0, r7
 800f296:	f001 fdfb 	bl	8010e90 <strncmp>
 800f29a:	4605      	mov	r5, r0
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d168      	bne.n	800f372 <__gethex+0x136>
 800f2a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f2a4:	eb07 060a 	add.w	r6, r7, sl
 800f2a8:	f7ff ffb2 	bl	800f210 <__hexdig_fun>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d062      	beq.n	800f376 <__gethex+0x13a>
 800f2b0:	4633      	mov	r3, r6
 800f2b2:	7818      	ldrb	r0, [r3, #0]
 800f2b4:	2830      	cmp	r0, #48	; 0x30
 800f2b6:	461f      	mov	r7, r3
 800f2b8:	f103 0301 	add.w	r3, r3, #1
 800f2bc:	d0f9      	beq.n	800f2b2 <__gethex+0x76>
 800f2be:	f7ff ffa7 	bl	800f210 <__hexdig_fun>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	fab0 f480 	clz	r4, r0
 800f2c8:	0964      	lsrs	r4, r4, #5
 800f2ca:	4635      	mov	r5, r6
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	463a      	mov	r2, r7
 800f2d0:	4616      	mov	r6, r2
 800f2d2:	3201      	adds	r2, #1
 800f2d4:	7830      	ldrb	r0, [r6, #0]
 800f2d6:	f7ff ff9b 	bl	800f210 <__hexdig_fun>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d1f8      	bne.n	800f2d0 <__gethex+0x94>
 800f2de:	9901      	ldr	r1, [sp, #4]
 800f2e0:	4652      	mov	r2, sl
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f001 fdd4 	bl	8010e90 <strncmp>
 800f2e8:	b980      	cbnz	r0, 800f30c <__gethex+0xd0>
 800f2ea:	b94d      	cbnz	r5, 800f300 <__gethex+0xc4>
 800f2ec:	eb06 050a 	add.w	r5, r6, sl
 800f2f0:	462a      	mov	r2, r5
 800f2f2:	4616      	mov	r6, r2
 800f2f4:	3201      	adds	r2, #1
 800f2f6:	7830      	ldrb	r0, [r6, #0]
 800f2f8:	f7ff ff8a 	bl	800f210 <__hexdig_fun>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d1f8      	bne.n	800f2f2 <__gethex+0xb6>
 800f300:	1bad      	subs	r5, r5, r6
 800f302:	00ad      	lsls	r5, r5, #2
 800f304:	e004      	b.n	800f310 <__gethex+0xd4>
 800f306:	2400      	movs	r4, #0
 800f308:	4625      	mov	r5, r4
 800f30a:	e7e0      	b.n	800f2ce <__gethex+0x92>
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	d1f7      	bne.n	800f300 <__gethex+0xc4>
 800f310:	7833      	ldrb	r3, [r6, #0]
 800f312:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f316:	2b50      	cmp	r3, #80	; 0x50
 800f318:	d13b      	bne.n	800f392 <__gethex+0x156>
 800f31a:	7873      	ldrb	r3, [r6, #1]
 800f31c:	2b2b      	cmp	r3, #43	; 0x2b
 800f31e:	d02c      	beq.n	800f37a <__gethex+0x13e>
 800f320:	2b2d      	cmp	r3, #45	; 0x2d
 800f322:	d02e      	beq.n	800f382 <__gethex+0x146>
 800f324:	1c71      	adds	r1, r6, #1
 800f326:	f04f 0900 	mov.w	r9, #0
 800f32a:	7808      	ldrb	r0, [r1, #0]
 800f32c:	f7ff ff70 	bl	800f210 <__hexdig_fun>
 800f330:	1e43      	subs	r3, r0, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b18      	cmp	r3, #24
 800f336:	d82c      	bhi.n	800f392 <__gethex+0x156>
 800f338:	f1a0 0210 	sub.w	r2, r0, #16
 800f33c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f340:	f7ff ff66 	bl	800f210 <__hexdig_fun>
 800f344:	1e43      	subs	r3, r0, #1
 800f346:	b2db      	uxtb	r3, r3
 800f348:	2b18      	cmp	r3, #24
 800f34a:	d91d      	bls.n	800f388 <__gethex+0x14c>
 800f34c:	f1b9 0f00 	cmp.w	r9, #0
 800f350:	d000      	beq.n	800f354 <__gethex+0x118>
 800f352:	4252      	negs	r2, r2
 800f354:	4415      	add	r5, r2
 800f356:	f8cb 1000 	str.w	r1, [fp]
 800f35a:	b1e4      	cbz	r4, 800f396 <__gethex+0x15a>
 800f35c:	9b00      	ldr	r3, [sp, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	bf14      	ite	ne
 800f362:	2700      	movne	r7, #0
 800f364:	2706      	moveq	r7, #6
 800f366:	4638      	mov	r0, r7
 800f368:	b009      	add	sp, #36	; 0x24
 800f36a:	ecbd 8b02 	vpop	{d8}
 800f36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f372:	463e      	mov	r6, r7
 800f374:	4625      	mov	r5, r4
 800f376:	2401      	movs	r4, #1
 800f378:	e7ca      	b.n	800f310 <__gethex+0xd4>
 800f37a:	f04f 0900 	mov.w	r9, #0
 800f37e:	1cb1      	adds	r1, r6, #2
 800f380:	e7d3      	b.n	800f32a <__gethex+0xee>
 800f382:	f04f 0901 	mov.w	r9, #1
 800f386:	e7fa      	b.n	800f37e <__gethex+0x142>
 800f388:	230a      	movs	r3, #10
 800f38a:	fb03 0202 	mla	r2, r3, r2, r0
 800f38e:	3a10      	subs	r2, #16
 800f390:	e7d4      	b.n	800f33c <__gethex+0x100>
 800f392:	4631      	mov	r1, r6
 800f394:	e7df      	b.n	800f356 <__gethex+0x11a>
 800f396:	1bf3      	subs	r3, r6, r7
 800f398:	3b01      	subs	r3, #1
 800f39a:	4621      	mov	r1, r4
 800f39c:	2b07      	cmp	r3, #7
 800f39e:	dc0b      	bgt.n	800f3b8 <__gethex+0x17c>
 800f3a0:	ee18 0a10 	vmov	r0, s16
 800f3a4:	f000 fad8 	bl	800f958 <_Balloc>
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	b940      	cbnz	r0, 800f3be <__gethex+0x182>
 800f3ac:	4b5d      	ldr	r3, [pc, #372]	; (800f524 <__gethex+0x2e8>)
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	21de      	movs	r1, #222	; 0xde
 800f3b2:	485d      	ldr	r0, [pc, #372]	; (800f528 <__gethex+0x2ec>)
 800f3b4:	f001 fdc8 	bl	8010f48 <__assert_func>
 800f3b8:	3101      	adds	r1, #1
 800f3ba:	105b      	asrs	r3, r3, #1
 800f3bc:	e7ee      	b.n	800f39c <__gethex+0x160>
 800f3be:	f100 0914 	add.w	r9, r0, #20
 800f3c2:	f04f 0b00 	mov.w	fp, #0
 800f3c6:	f1ca 0301 	rsb	r3, sl, #1
 800f3ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3ce:	f8cd b000 	str.w	fp, [sp]
 800f3d2:	9306      	str	r3, [sp, #24]
 800f3d4:	42b7      	cmp	r7, r6
 800f3d6:	d340      	bcc.n	800f45a <__gethex+0x21e>
 800f3d8:	9802      	ldr	r0, [sp, #8]
 800f3da:	9b00      	ldr	r3, [sp, #0]
 800f3dc:	f840 3b04 	str.w	r3, [r0], #4
 800f3e0:	eba0 0009 	sub.w	r0, r0, r9
 800f3e4:	1080      	asrs	r0, r0, #2
 800f3e6:	0146      	lsls	r6, r0, #5
 800f3e8:	6120      	str	r0, [r4, #16]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 fba6 	bl	800fb3c <__hi0bits>
 800f3f0:	1a30      	subs	r0, r6, r0
 800f3f2:	f8d8 6000 	ldr.w	r6, [r8]
 800f3f6:	42b0      	cmp	r0, r6
 800f3f8:	dd63      	ble.n	800f4c2 <__gethex+0x286>
 800f3fa:	1b87      	subs	r7, r0, r6
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 ff4a 	bl	8010298 <__any_on>
 800f404:	4682      	mov	sl, r0
 800f406:	b1a8      	cbz	r0, 800f434 <__gethex+0x1f8>
 800f408:	1e7b      	subs	r3, r7, #1
 800f40a:	1159      	asrs	r1, r3, #5
 800f40c:	f003 021f 	and.w	r2, r3, #31
 800f410:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f414:	f04f 0a01 	mov.w	sl, #1
 800f418:	fa0a f202 	lsl.w	r2, sl, r2
 800f41c:	420a      	tst	r2, r1
 800f41e:	d009      	beq.n	800f434 <__gethex+0x1f8>
 800f420:	4553      	cmp	r3, sl
 800f422:	dd05      	ble.n	800f430 <__gethex+0x1f4>
 800f424:	1eb9      	subs	r1, r7, #2
 800f426:	4620      	mov	r0, r4
 800f428:	f000 ff36 	bl	8010298 <__any_on>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d145      	bne.n	800f4bc <__gethex+0x280>
 800f430:	f04f 0a02 	mov.w	sl, #2
 800f434:	4639      	mov	r1, r7
 800f436:	4620      	mov	r0, r4
 800f438:	f7ff fe98 	bl	800f16c <rshift>
 800f43c:	443d      	add	r5, r7
 800f43e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f442:	42ab      	cmp	r3, r5
 800f444:	da4c      	bge.n	800f4e0 <__gethex+0x2a4>
 800f446:	ee18 0a10 	vmov	r0, s16
 800f44a:	4621      	mov	r1, r4
 800f44c:	f000 fac4 	bl	800f9d8 <_Bfree>
 800f450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f452:	2300      	movs	r3, #0
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	27a3      	movs	r7, #163	; 0xa3
 800f458:	e785      	b.n	800f366 <__gethex+0x12a>
 800f45a:	1e73      	subs	r3, r6, #1
 800f45c:	9a05      	ldr	r2, [sp, #20]
 800f45e:	9303      	str	r3, [sp, #12]
 800f460:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f464:	4293      	cmp	r3, r2
 800f466:	d019      	beq.n	800f49c <__gethex+0x260>
 800f468:	f1bb 0f20 	cmp.w	fp, #32
 800f46c:	d107      	bne.n	800f47e <__gethex+0x242>
 800f46e:	9b02      	ldr	r3, [sp, #8]
 800f470:	9a00      	ldr	r2, [sp, #0]
 800f472:	f843 2b04 	str.w	r2, [r3], #4
 800f476:	9302      	str	r3, [sp, #8]
 800f478:	2300      	movs	r3, #0
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	469b      	mov	fp, r3
 800f47e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f482:	f7ff fec5 	bl	800f210 <__hexdig_fun>
 800f486:	9b00      	ldr	r3, [sp, #0]
 800f488:	f000 000f 	and.w	r0, r0, #15
 800f48c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f490:	4303      	orrs	r3, r0
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	f10b 0b04 	add.w	fp, fp, #4
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	e00d      	b.n	800f4b8 <__gethex+0x27c>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	9a06      	ldr	r2, [sp, #24]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	42bb      	cmp	r3, r7
 800f4a4:	d3e0      	bcc.n	800f468 <__gethex+0x22c>
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	9901      	ldr	r1, [sp, #4]
 800f4aa:	9307      	str	r3, [sp, #28]
 800f4ac:	4652      	mov	r2, sl
 800f4ae:	f001 fcef 	bl	8010e90 <strncmp>
 800f4b2:	9b07      	ldr	r3, [sp, #28]
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d1d7      	bne.n	800f468 <__gethex+0x22c>
 800f4b8:	461e      	mov	r6, r3
 800f4ba:	e78b      	b.n	800f3d4 <__gethex+0x198>
 800f4bc:	f04f 0a03 	mov.w	sl, #3
 800f4c0:	e7b8      	b.n	800f434 <__gethex+0x1f8>
 800f4c2:	da0a      	bge.n	800f4da <__gethex+0x29e>
 800f4c4:	1a37      	subs	r7, r6, r0
 800f4c6:	4621      	mov	r1, r4
 800f4c8:	ee18 0a10 	vmov	r0, s16
 800f4cc:	463a      	mov	r2, r7
 800f4ce:	f000 fc9f 	bl	800fe10 <__lshift>
 800f4d2:	1bed      	subs	r5, r5, r7
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	f100 0914 	add.w	r9, r0, #20
 800f4da:	f04f 0a00 	mov.w	sl, #0
 800f4de:	e7ae      	b.n	800f43e <__gethex+0x202>
 800f4e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f4e4:	42a8      	cmp	r0, r5
 800f4e6:	dd72      	ble.n	800f5ce <__gethex+0x392>
 800f4e8:	1b45      	subs	r5, r0, r5
 800f4ea:	42ae      	cmp	r6, r5
 800f4ec:	dc36      	bgt.n	800f55c <__gethex+0x320>
 800f4ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	d02a      	beq.n	800f54c <__gethex+0x310>
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d02c      	beq.n	800f554 <__gethex+0x318>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d11c      	bne.n	800f538 <__gethex+0x2fc>
 800f4fe:	42ae      	cmp	r6, r5
 800f500:	d11a      	bne.n	800f538 <__gethex+0x2fc>
 800f502:	2e01      	cmp	r6, #1
 800f504:	d112      	bne.n	800f52c <__gethex+0x2f0>
 800f506:	9a04      	ldr	r2, [sp, #16]
 800f508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f50c:	6013      	str	r3, [r2, #0]
 800f50e:	2301      	movs	r3, #1
 800f510:	6123      	str	r3, [r4, #16]
 800f512:	f8c9 3000 	str.w	r3, [r9]
 800f516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f518:	2762      	movs	r7, #98	; 0x62
 800f51a:	601c      	str	r4, [r3, #0]
 800f51c:	e723      	b.n	800f366 <__gethex+0x12a>
 800f51e:	bf00      	nop
 800f520:	08011f9c 	.word	0x08011f9c
 800f524:	08011f24 	.word	0x08011f24
 800f528:	08011f35 	.word	0x08011f35
 800f52c:	1e71      	subs	r1, r6, #1
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 feb2 	bl	8010298 <__any_on>
 800f534:	2800      	cmp	r0, #0
 800f536:	d1e6      	bne.n	800f506 <__gethex+0x2ca>
 800f538:	ee18 0a10 	vmov	r0, s16
 800f53c:	4621      	mov	r1, r4
 800f53e:	f000 fa4b 	bl	800f9d8 <_Bfree>
 800f542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f544:	2300      	movs	r3, #0
 800f546:	6013      	str	r3, [r2, #0]
 800f548:	2750      	movs	r7, #80	; 0x50
 800f54a:	e70c      	b.n	800f366 <__gethex+0x12a>
 800f54c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1f2      	bne.n	800f538 <__gethex+0x2fc>
 800f552:	e7d8      	b.n	800f506 <__gethex+0x2ca>
 800f554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1d5      	bne.n	800f506 <__gethex+0x2ca>
 800f55a:	e7ed      	b.n	800f538 <__gethex+0x2fc>
 800f55c:	1e6f      	subs	r7, r5, #1
 800f55e:	f1ba 0f00 	cmp.w	sl, #0
 800f562:	d131      	bne.n	800f5c8 <__gethex+0x38c>
 800f564:	b127      	cbz	r7, 800f570 <__gethex+0x334>
 800f566:	4639      	mov	r1, r7
 800f568:	4620      	mov	r0, r4
 800f56a:	f000 fe95 	bl	8010298 <__any_on>
 800f56e:	4682      	mov	sl, r0
 800f570:	117b      	asrs	r3, r7, #5
 800f572:	2101      	movs	r1, #1
 800f574:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f578:	f007 071f 	and.w	r7, r7, #31
 800f57c:	fa01 f707 	lsl.w	r7, r1, r7
 800f580:	421f      	tst	r7, r3
 800f582:	4629      	mov	r1, r5
 800f584:	4620      	mov	r0, r4
 800f586:	bf18      	it	ne
 800f588:	f04a 0a02 	orrne.w	sl, sl, #2
 800f58c:	1b76      	subs	r6, r6, r5
 800f58e:	f7ff fded 	bl	800f16c <rshift>
 800f592:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f596:	2702      	movs	r7, #2
 800f598:	f1ba 0f00 	cmp.w	sl, #0
 800f59c:	d048      	beq.n	800f630 <__gethex+0x3f4>
 800f59e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d015      	beq.n	800f5d2 <__gethex+0x396>
 800f5a6:	2b03      	cmp	r3, #3
 800f5a8:	d017      	beq.n	800f5da <__gethex+0x39e>
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d109      	bne.n	800f5c2 <__gethex+0x386>
 800f5ae:	f01a 0f02 	tst.w	sl, #2
 800f5b2:	d006      	beq.n	800f5c2 <__gethex+0x386>
 800f5b4:	f8d9 0000 	ldr.w	r0, [r9]
 800f5b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f5bc:	f01a 0f01 	tst.w	sl, #1
 800f5c0:	d10e      	bne.n	800f5e0 <__gethex+0x3a4>
 800f5c2:	f047 0710 	orr.w	r7, r7, #16
 800f5c6:	e033      	b.n	800f630 <__gethex+0x3f4>
 800f5c8:	f04f 0a01 	mov.w	sl, #1
 800f5cc:	e7d0      	b.n	800f570 <__gethex+0x334>
 800f5ce:	2701      	movs	r7, #1
 800f5d0:	e7e2      	b.n	800f598 <__gethex+0x35c>
 800f5d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5d4:	f1c3 0301 	rsb	r3, r3, #1
 800f5d8:	9315      	str	r3, [sp, #84]	; 0x54
 800f5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d0f0      	beq.n	800f5c2 <__gethex+0x386>
 800f5e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5e4:	f104 0314 	add.w	r3, r4, #20
 800f5e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5f0:	f04f 0c00 	mov.w	ip, #0
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5fe:	d01c      	beq.n	800f63a <__gethex+0x3fe>
 800f600:	3201      	adds	r2, #1
 800f602:	6002      	str	r2, [r0, #0]
 800f604:	2f02      	cmp	r7, #2
 800f606:	f104 0314 	add.w	r3, r4, #20
 800f60a:	d13f      	bne.n	800f68c <__gethex+0x450>
 800f60c:	f8d8 2000 	ldr.w	r2, [r8]
 800f610:	3a01      	subs	r2, #1
 800f612:	42b2      	cmp	r2, r6
 800f614:	d10a      	bne.n	800f62c <__gethex+0x3f0>
 800f616:	1171      	asrs	r1, r6, #5
 800f618:	2201      	movs	r2, #1
 800f61a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f61e:	f006 061f 	and.w	r6, r6, #31
 800f622:	fa02 f606 	lsl.w	r6, r2, r6
 800f626:	421e      	tst	r6, r3
 800f628:	bf18      	it	ne
 800f62a:	4617      	movne	r7, r2
 800f62c:	f047 0720 	orr.w	r7, r7, #32
 800f630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f632:	601c      	str	r4, [r3, #0]
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	601d      	str	r5, [r3, #0]
 800f638:	e695      	b.n	800f366 <__gethex+0x12a>
 800f63a:	4299      	cmp	r1, r3
 800f63c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f640:	d8d8      	bhi.n	800f5f4 <__gethex+0x3b8>
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	459b      	cmp	fp, r3
 800f646:	db19      	blt.n	800f67c <__gethex+0x440>
 800f648:	6861      	ldr	r1, [r4, #4]
 800f64a:	ee18 0a10 	vmov	r0, s16
 800f64e:	3101      	adds	r1, #1
 800f650:	f000 f982 	bl	800f958 <_Balloc>
 800f654:	4681      	mov	r9, r0
 800f656:	b918      	cbnz	r0, 800f660 <__gethex+0x424>
 800f658:	4b1a      	ldr	r3, [pc, #104]	; (800f6c4 <__gethex+0x488>)
 800f65a:	4602      	mov	r2, r0
 800f65c:	2184      	movs	r1, #132	; 0x84
 800f65e:	e6a8      	b.n	800f3b2 <__gethex+0x176>
 800f660:	6922      	ldr	r2, [r4, #16]
 800f662:	3202      	adds	r2, #2
 800f664:	f104 010c 	add.w	r1, r4, #12
 800f668:	0092      	lsls	r2, r2, #2
 800f66a:	300c      	adds	r0, #12
 800f66c:	f7fc fb98 	bl	800bda0 <memcpy>
 800f670:	4621      	mov	r1, r4
 800f672:	ee18 0a10 	vmov	r0, s16
 800f676:	f000 f9af 	bl	800f9d8 <_Bfree>
 800f67a:	464c      	mov	r4, r9
 800f67c:	6923      	ldr	r3, [r4, #16]
 800f67e:	1c5a      	adds	r2, r3, #1
 800f680:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f684:	6122      	str	r2, [r4, #16]
 800f686:	2201      	movs	r2, #1
 800f688:	615a      	str	r2, [r3, #20]
 800f68a:	e7bb      	b.n	800f604 <__gethex+0x3c8>
 800f68c:	6922      	ldr	r2, [r4, #16]
 800f68e:	455a      	cmp	r2, fp
 800f690:	dd0b      	ble.n	800f6aa <__gethex+0x46e>
 800f692:	2101      	movs	r1, #1
 800f694:	4620      	mov	r0, r4
 800f696:	f7ff fd69 	bl	800f16c <rshift>
 800f69a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f69e:	3501      	adds	r5, #1
 800f6a0:	42ab      	cmp	r3, r5
 800f6a2:	f6ff aed0 	blt.w	800f446 <__gethex+0x20a>
 800f6a6:	2701      	movs	r7, #1
 800f6a8:	e7c0      	b.n	800f62c <__gethex+0x3f0>
 800f6aa:	f016 061f 	ands.w	r6, r6, #31
 800f6ae:	d0fa      	beq.n	800f6a6 <__gethex+0x46a>
 800f6b0:	4453      	add	r3, sl
 800f6b2:	f1c6 0620 	rsb	r6, r6, #32
 800f6b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6ba:	f000 fa3f 	bl	800fb3c <__hi0bits>
 800f6be:	42b0      	cmp	r0, r6
 800f6c0:	dbe7      	blt.n	800f692 <__gethex+0x456>
 800f6c2:	e7f0      	b.n	800f6a6 <__gethex+0x46a>
 800f6c4:	08011f24 	.word	0x08011f24

0800f6c8 <L_shift>:
 800f6c8:	f1c2 0208 	rsb	r2, r2, #8
 800f6cc:	0092      	lsls	r2, r2, #2
 800f6ce:	b570      	push	{r4, r5, r6, lr}
 800f6d0:	f1c2 0620 	rsb	r6, r2, #32
 800f6d4:	6843      	ldr	r3, [r0, #4]
 800f6d6:	6804      	ldr	r4, [r0, #0]
 800f6d8:	fa03 f506 	lsl.w	r5, r3, r6
 800f6dc:	432c      	orrs	r4, r5
 800f6de:	40d3      	lsrs	r3, r2
 800f6e0:	6004      	str	r4, [r0, #0]
 800f6e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6e6:	4288      	cmp	r0, r1
 800f6e8:	d3f4      	bcc.n	800f6d4 <L_shift+0xc>
 800f6ea:	bd70      	pop	{r4, r5, r6, pc}

0800f6ec <__match>:
 800f6ec:	b530      	push	{r4, r5, lr}
 800f6ee:	6803      	ldr	r3, [r0, #0]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6f6:	b914      	cbnz	r4, 800f6fe <__match+0x12>
 800f6f8:	6003      	str	r3, [r0, #0]
 800f6fa:	2001      	movs	r0, #1
 800f6fc:	bd30      	pop	{r4, r5, pc}
 800f6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f702:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f706:	2d19      	cmp	r5, #25
 800f708:	bf98      	it	ls
 800f70a:	3220      	addls	r2, #32
 800f70c:	42a2      	cmp	r2, r4
 800f70e:	d0f0      	beq.n	800f6f2 <__match+0x6>
 800f710:	2000      	movs	r0, #0
 800f712:	e7f3      	b.n	800f6fc <__match+0x10>

0800f714 <__hexnan>:
 800f714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f718:	680b      	ldr	r3, [r1, #0]
 800f71a:	115e      	asrs	r6, r3, #5
 800f71c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f720:	f013 031f 	ands.w	r3, r3, #31
 800f724:	b087      	sub	sp, #28
 800f726:	bf18      	it	ne
 800f728:	3604      	addne	r6, #4
 800f72a:	2500      	movs	r5, #0
 800f72c:	1f37      	subs	r7, r6, #4
 800f72e:	4690      	mov	r8, r2
 800f730:	6802      	ldr	r2, [r0, #0]
 800f732:	9301      	str	r3, [sp, #4]
 800f734:	4682      	mov	sl, r0
 800f736:	f846 5c04 	str.w	r5, [r6, #-4]
 800f73a:	46b9      	mov	r9, r7
 800f73c:	463c      	mov	r4, r7
 800f73e:	9502      	str	r5, [sp, #8]
 800f740:	46ab      	mov	fp, r5
 800f742:	7851      	ldrb	r1, [r2, #1]
 800f744:	1c53      	adds	r3, r2, #1
 800f746:	9303      	str	r3, [sp, #12]
 800f748:	b341      	cbz	r1, 800f79c <__hexnan+0x88>
 800f74a:	4608      	mov	r0, r1
 800f74c:	9205      	str	r2, [sp, #20]
 800f74e:	9104      	str	r1, [sp, #16]
 800f750:	f7ff fd5e 	bl	800f210 <__hexdig_fun>
 800f754:	2800      	cmp	r0, #0
 800f756:	d14f      	bne.n	800f7f8 <__hexnan+0xe4>
 800f758:	9904      	ldr	r1, [sp, #16]
 800f75a:	9a05      	ldr	r2, [sp, #20]
 800f75c:	2920      	cmp	r1, #32
 800f75e:	d818      	bhi.n	800f792 <__hexnan+0x7e>
 800f760:	9b02      	ldr	r3, [sp, #8]
 800f762:	459b      	cmp	fp, r3
 800f764:	dd13      	ble.n	800f78e <__hexnan+0x7a>
 800f766:	454c      	cmp	r4, r9
 800f768:	d206      	bcs.n	800f778 <__hexnan+0x64>
 800f76a:	2d07      	cmp	r5, #7
 800f76c:	dc04      	bgt.n	800f778 <__hexnan+0x64>
 800f76e:	462a      	mov	r2, r5
 800f770:	4649      	mov	r1, r9
 800f772:	4620      	mov	r0, r4
 800f774:	f7ff ffa8 	bl	800f6c8 <L_shift>
 800f778:	4544      	cmp	r4, r8
 800f77a:	d950      	bls.n	800f81e <__hexnan+0x10a>
 800f77c:	2300      	movs	r3, #0
 800f77e:	f1a4 0904 	sub.w	r9, r4, #4
 800f782:	f844 3c04 	str.w	r3, [r4, #-4]
 800f786:	f8cd b008 	str.w	fp, [sp, #8]
 800f78a:	464c      	mov	r4, r9
 800f78c:	461d      	mov	r5, r3
 800f78e:	9a03      	ldr	r2, [sp, #12]
 800f790:	e7d7      	b.n	800f742 <__hexnan+0x2e>
 800f792:	2929      	cmp	r1, #41	; 0x29
 800f794:	d156      	bne.n	800f844 <__hexnan+0x130>
 800f796:	3202      	adds	r2, #2
 800f798:	f8ca 2000 	str.w	r2, [sl]
 800f79c:	f1bb 0f00 	cmp.w	fp, #0
 800f7a0:	d050      	beq.n	800f844 <__hexnan+0x130>
 800f7a2:	454c      	cmp	r4, r9
 800f7a4:	d206      	bcs.n	800f7b4 <__hexnan+0xa0>
 800f7a6:	2d07      	cmp	r5, #7
 800f7a8:	dc04      	bgt.n	800f7b4 <__hexnan+0xa0>
 800f7aa:	462a      	mov	r2, r5
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f7ff ff8a 	bl	800f6c8 <L_shift>
 800f7b4:	4544      	cmp	r4, r8
 800f7b6:	d934      	bls.n	800f822 <__hexnan+0x10e>
 800f7b8:	f1a8 0204 	sub.w	r2, r8, #4
 800f7bc:	4623      	mov	r3, r4
 800f7be:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7c6:	429f      	cmp	r7, r3
 800f7c8:	d2f9      	bcs.n	800f7be <__hexnan+0xaa>
 800f7ca:	1b3b      	subs	r3, r7, r4
 800f7cc:	f023 0303 	bic.w	r3, r3, #3
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	3401      	adds	r4, #1
 800f7d4:	3e03      	subs	r6, #3
 800f7d6:	42b4      	cmp	r4, r6
 800f7d8:	bf88      	it	hi
 800f7da:	2304      	movhi	r3, #4
 800f7dc:	4443      	add	r3, r8
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f843 2b04 	str.w	r2, [r3], #4
 800f7e4:	429f      	cmp	r7, r3
 800f7e6:	d2fb      	bcs.n	800f7e0 <__hexnan+0xcc>
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	b91b      	cbnz	r3, 800f7f4 <__hexnan+0xe0>
 800f7ec:	4547      	cmp	r7, r8
 800f7ee:	d127      	bne.n	800f840 <__hexnan+0x12c>
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	2005      	movs	r0, #5
 800f7f6:	e026      	b.n	800f846 <__hexnan+0x132>
 800f7f8:	3501      	adds	r5, #1
 800f7fa:	2d08      	cmp	r5, #8
 800f7fc:	f10b 0b01 	add.w	fp, fp, #1
 800f800:	dd06      	ble.n	800f810 <__hexnan+0xfc>
 800f802:	4544      	cmp	r4, r8
 800f804:	d9c3      	bls.n	800f78e <__hexnan+0x7a>
 800f806:	2300      	movs	r3, #0
 800f808:	f844 3c04 	str.w	r3, [r4, #-4]
 800f80c:	2501      	movs	r5, #1
 800f80e:	3c04      	subs	r4, #4
 800f810:	6822      	ldr	r2, [r4, #0]
 800f812:	f000 000f 	and.w	r0, r0, #15
 800f816:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f81a:	6022      	str	r2, [r4, #0]
 800f81c:	e7b7      	b.n	800f78e <__hexnan+0x7a>
 800f81e:	2508      	movs	r5, #8
 800f820:	e7b5      	b.n	800f78e <__hexnan+0x7a>
 800f822:	9b01      	ldr	r3, [sp, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0df      	beq.n	800f7e8 <__hexnan+0xd4>
 800f828:	f04f 32ff 	mov.w	r2, #4294967295
 800f82c:	f1c3 0320 	rsb	r3, r3, #32
 800f830:	fa22 f303 	lsr.w	r3, r2, r3
 800f834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f838:	401a      	ands	r2, r3
 800f83a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f83e:	e7d3      	b.n	800f7e8 <__hexnan+0xd4>
 800f840:	3f04      	subs	r7, #4
 800f842:	e7d1      	b.n	800f7e8 <__hexnan+0xd4>
 800f844:	2004      	movs	r0, #4
 800f846:	b007      	add	sp, #28
 800f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f84c <_findenv_r>:
 800f84c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f850:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f8c0 <_findenv_r+0x74>
 800f854:	4607      	mov	r7, r0
 800f856:	4689      	mov	r9, r1
 800f858:	4616      	mov	r6, r2
 800f85a:	f001 fb93 	bl	8010f84 <__env_lock>
 800f85e:	f8da 4000 	ldr.w	r4, [sl]
 800f862:	b134      	cbz	r4, 800f872 <_findenv_r+0x26>
 800f864:	464b      	mov	r3, r9
 800f866:	4698      	mov	r8, r3
 800f868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f86c:	b13a      	cbz	r2, 800f87e <_findenv_r+0x32>
 800f86e:	2a3d      	cmp	r2, #61	; 0x3d
 800f870:	d1f9      	bne.n	800f866 <_findenv_r+0x1a>
 800f872:	4638      	mov	r0, r7
 800f874:	f001 fb8c 	bl	8010f90 <__env_unlock>
 800f878:	2000      	movs	r0, #0
 800f87a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87e:	eba8 0809 	sub.w	r8, r8, r9
 800f882:	46a3      	mov	fp, r4
 800f884:	f854 0b04 	ldr.w	r0, [r4], #4
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0f2      	beq.n	800f872 <_findenv_r+0x26>
 800f88c:	4642      	mov	r2, r8
 800f88e:	4649      	mov	r1, r9
 800f890:	f001 fafe 	bl	8010e90 <strncmp>
 800f894:	2800      	cmp	r0, #0
 800f896:	d1f4      	bne.n	800f882 <_findenv_r+0x36>
 800f898:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f89c:	eb03 0508 	add.w	r5, r3, r8
 800f8a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f8a4:	2b3d      	cmp	r3, #61	; 0x3d
 800f8a6:	d1ec      	bne.n	800f882 <_findenv_r+0x36>
 800f8a8:	f8da 3000 	ldr.w	r3, [sl]
 800f8ac:	ebab 0303 	sub.w	r3, fp, r3
 800f8b0:	109b      	asrs	r3, r3, #2
 800f8b2:	4638      	mov	r0, r7
 800f8b4:	6033      	str	r3, [r6, #0]
 800f8b6:	f001 fb6b 	bl	8010f90 <__env_unlock>
 800f8ba:	1c68      	adds	r0, r5, #1
 800f8bc:	e7dd      	b.n	800f87a <_findenv_r+0x2e>
 800f8be:	bf00      	nop
 800f8c0:	2000000c 	.word	0x2000000c

0800f8c4 <_getenv_r>:
 800f8c4:	b507      	push	{r0, r1, r2, lr}
 800f8c6:	aa01      	add	r2, sp, #4
 800f8c8:	f7ff ffc0 	bl	800f84c <_findenv_r>
 800f8cc:	b003      	add	sp, #12
 800f8ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f8d4 <__gettzinfo>:
 800f8d4:	4800      	ldr	r0, [pc, #0]	; (800f8d8 <__gettzinfo+0x4>)
 800f8d6:	4770      	bx	lr
 800f8d8:	20000090 	.word	0x20000090

0800f8dc <_localeconv_r>:
 800f8dc:	4800      	ldr	r0, [pc, #0]	; (800f8e0 <_localeconv_r+0x4>)
 800f8de:	4770      	bx	lr
 800f8e0:	200001dc 	.word	0x200001dc

0800f8e4 <__retarget_lock_init_recursive>:
 800f8e4:	4770      	bx	lr

0800f8e6 <__retarget_lock_acquire>:
 800f8e6:	4770      	bx	lr

0800f8e8 <__retarget_lock_acquire_recursive>:
 800f8e8:	4770      	bx	lr

0800f8ea <__retarget_lock_release>:
 800f8ea:	4770      	bx	lr

0800f8ec <__retarget_lock_release_recursive>:
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <_lseek_r>:
 800f8f0:	b538      	push	{r3, r4, r5, lr}
 800f8f2:	4d07      	ldr	r5, [pc, #28]	; (800f910 <_lseek_r+0x20>)
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	4608      	mov	r0, r1
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	602a      	str	r2, [r5, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	f7f3 fd78 	bl	80033f4 <_lseek>
 800f904:	1c43      	adds	r3, r0, #1
 800f906:	d102      	bne.n	800f90e <_lseek_r+0x1e>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	b103      	cbz	r3, 800f90e <_lseek_r+0x1e>
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
 800f910:	200068c0 	.word	0x200068c0

0800f914 <malloc>:
 800f914:	4b02      	ldr	r3, [pc, #8]	; (800f920 <malloc+0xc>)
 800f916:	4601      	mov	r1, r0
 800f918:	6818      	ldr	r0, [r3, #0]
 800f91a:	f000 bd61 	b.w	80103e0 <_malloc_r>
 800f91e:	bf00      	nop
 800f920:	20000020 	.word	0x20000020

0800f924 <free>:
 800f924:	4b02      	ldr	r3, [pc, #8]	; (800f930 <free+0xc>)
 800f926:	4601      	mov	r1, r0
 800f928:	6818      	ldr	r0, [r3, #0]
 800f92a:	f000 bced 	b.w	8010308 <_free_r>
 800f92e:	bf00      	nop
 800f930:	20000020 	.word	0x20000020

0800f934 <__ascii_mbtowc>:
 800f934:	b082      	sub	sp, #8
 800f936:	b901      	cbnz	r1, 800f93a <__ascii_mbtowc+0x6>
 800f938:	a901      	add	r1, sp, #4
 800f93a:	b142      	cbz	r2, 800f94e <__ascii_mbtowc+0x1a>
 800f93c:	b14b      	cbz	r3, 800f952 <__ascii_mbtowc+0x1e>
 800f93e:	7813      	ldrb	r3, [r2, #0]
 800f940:	600b      	str	r3, [r1, #0]
 800f942:	7812      	ldrb	r2, [r2, #0]
 800f944:	1e10      	subs	r0, r2, #0
 800f946:	bf18      	it	ne
 800f948:	2001      	movne	r0, #1
 800f94a:	b002      	add	sp, #8
 800f94c:	4770      	bx	lr
 800f94e:	4610      	mov	r0, r2
 800f950:	e7fb      	b.n	800f94a <__ascii_mbtowc+0x16>
 800f952:	f06f 0001 	mvn.w	r0, #1
 800f956:	e7f8      	b.n	800f94a <__ascii_mbtowc+0x16>

0800f958 <_Balloc>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f95c:	4604      	mov	r4, r0
 800f95e:	460d      	mov	r5, r1
 800f960:	b976      	cbnz	r6, 800f980 <_Balloc+0x28>
 800f962:	2010      	movs	r0, #16
 800f964:	f7ff ffd6 	bl	800f914 <malloc>
 800f968:	4602      	mov	r2, r0
 800f96a:	6260      	str	r0, [r4, #36]	; 0x24
 800f96c:	b920      	cbnz	r0, 800f978 <_Balloc+0x20>
 800f96e:	4b18      	ldr	r3, [pc, #96]	; (800f9d0 <_Balloc+0x78>)
 800f970:	4818      	ldr	r0, [pc, #96]	; (800f9d4 <_Balloc+0x7c>)
 800f972:	2166      	movs	r1, #102	; 0x66
 800f974:	f001 fae8 	bl	8010f48 <__assert_func>
 800f978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f97c:	6006      	str	r6, [r0, #0]
 800f97e:	60c6      	str	r6, [r0, #12]
 800f980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f982:	68f3      	ldr	r3, [r6, #12]
 800f984:	b183      	cbz	r3, 800f9a8 <_Balloc+0x50>
 800f986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f98e:	b9b8      	cbnz	r0, 800f9c0 <_Balloc+0x68>
 800f990:	2101      	movs	r1, #1
 800f992:	fa01 f605 	lsl.w	r6, r1, r5
 800f996:	1d72      	adds	r2, r6, #5
 800f998:	0092      	lsls	r2, r2, #2
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fc9d 	bl	80102da <_calloc_r>
 800f9a0:	b160      	cbz	r0, 800f9bc <_Balloc+0x64>
 800f9a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f9a6:	e00e      	b.n	800f9c6 <_Balloc+0x6e>
 800f9a8:	2221      	movs	r2, #33	; 0x21
 800f9aa:	2104      	movs	r1, #4
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f000 fc94 	bl	80102da <_calloc_r>
 800f9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9b4:	60f0      	str	r0, [r6, #12]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1e4      	bne.n	800f986 <_Balloc+0x2e>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	bd70      	pop	{r4, r5, r6, pc}
 800f9c0:	6802      	ldr	r2, [r0, #0]
 800f9c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9cc:	e7f7      	b.n	800f9be <_Balloc+0x66>
 800f9ce:	bf00      	nop
 800f9d0:	08011eb2 	.word	0x08011eb2
 800f9d4:	08012010 	.word	0x08012010

0800f9d8 <_Bfree>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f9dc:	4605      	mov	r5, r0
 800f9de:	460c      	mov	r4, r1
 800f9e0:	b976      	cbnz	r6, 800fa00 <_Bfree+0x28>
 800f9e2:	2010      	movs	r0, #16
 800f9e4:	f7ff ff96 	bl	800f914 <malloc>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	6268      	str	r0, [r5, #36]	; 0x24
 800f9ec:	b920      	cbnz	r0, 800f9f8 <_Bfree+0x20>
 800f9ee:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <_Bfree+0x3c>)
 800f9f0:	4809      	ldr	r0, [pc, #36]	; (800fa18 <_Bfree+0x40>)
 800f9f2:	218a      	movs	r1, #138	; 0x8a
 800f9f4:	f001 faa8 	bl	8010f48 <__assert_func>
 800f9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9fc:	6006      	str	r6, [r0, #0]
 800f9fe:	60c6      	str	r6, [r0, #12]
 800fa00:	b13c      	cbz	r4, 800fa12 <_Bfree+0x3a>
 800fa02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fa04:	6862      	ldr	r2, [r4, #4]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa0c:	6021      	str	r1, [r4, #0]
 800fa0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa12:	bd70      	pop	{r4, r5, r6, pc}
 800fa14:	08011eb2 	.word	0x08011eb2
 800fa18:	08012010 	.word	0x08012010

0800fa1c <__multadd>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	690d      	ldr	r5, [r1, #16]
 800fa22:	4607      	mov	r7, r0
 800fa24:	460c      	mov	r4, r1
 800fa26:	461e      	mov	r6, r3
 800fa28:	f101 0c14 	add.w	ip, r1, #20
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	f8dc 3000 	ldr.w	r3, [ip]
 800fa32:	b299      	uxth	r1, r3
 800fa34:	fb02 6101 	mla	r1, r2, r1, r6
 800fa38:	0c1e      	lsrs	r6, r3, #16
 800fa3a:	0c0b      	lsrs	r3, r1, #16
 800fa3c:	fb02 3306 	mla	r3, r2, r6, r3
 800fa40:	b289      	uxth	r1, r1
 800fa42:	3001      	adds	r0, #1
 800fa44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa48:	4285      	cmp	r5, r0
 800fa4a:	f84c 1b04 	str.w	r1, [ip], #4
 800fa4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa52:	dcec      	bgt.n	800fa2e <__multadd+0x12>
 800fa54:	b30e      	cbz	r6, 800fa9a <__multadd+0x7e>
 800fa56:	68a3      	ldr	r3, [r4, #8]
 800fa58:	42ab      	cmp	r3, r5
 800fa5a:	dc19      	bgt.n	800fa90 <__multadd+0x74>
 800fa5c:	6861      	ldr	r1, [r4, #4]
 800fa5e:	4638      	mov	r0, r7
 800fa60:	3101      	adds	r1, #1
 800fa62:	f7ff ff79 	bl	800f958 <_Balloc>
 800fa66:	4680      	mov	r8, r0
 800fa68:	b928      	cbnz	r0, 800fa76 <__multadd+0x5a>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <__multadd+0x84>)
 800fa6e:	480d      	ldr	r0, [pc, #52]	; (800faa4 <__multadd+0x88>)
 800fa70:	21b5      	movs	r1, #181	; 0xb5
 800fa72:	f001 fa69 	bl	8010f48 <__assert_func>
 800fa76:	6922      	ldr	r2, [r4, #16]
 800fa78:	3202      	adds	r2, #2
 800fa7a:	f104 010c 	add.w	r1, r4, #12
 800fa7e:	0092      	lsls	r2, r2, #2
 800fa80:	300c      	adds	r0, #12
 800fa82:	f7fc f98d 	bl	800bda0 <memcpy>
 800fa86:	4621      	mov	r1, r4
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7ff ffa5 	bl	800f9d8 <_Bfree>
 800fa8e:	4644      	mov	r4, r8
 800fa90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa94:	3501      	adds	r5, #1
 800fa96:	615e      	str	r6, [r3, #20]
 800fa98:	6125      	str	r5, [r4, #16]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa0:	08011f24 	.word	0x08011f24
 800faa4:	08012010 	.word	0x08012010

0800faa8 <__s2b>:
 800faa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faac:	460c      	mov	r4, r1
 800faae:	4615      	mov	r5, r2
 800fab0:	461f      	mov	r7, r3
 800fab2:	2209      	movs	r2, #9
 800fab4:	3308      	adds	r3, #8
 800fab6:	4606      	mov	r6, r0
 800fab8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fabc:	2100      	movs	r1, #0
 800fabe:	2201      	movs	r2, #1
 800fac0:	429a      	cmp	r2, r3
 800fac2:	db09      	blt.n	800fad8 <__s2b+0x30>
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7ff ff47 	bl	800f958 <_Balloc>
 800faca:	b940      	cbnz	r0, 800fade <__s2b+0x36>
 800facc:	4602      	mov	r2, r0
 800face:	4b19      	ldr	r3, [pc, #100]	; (800fb34 <__s2b+0x8c>)
 800fad0:	4819      	ldr	r0, [pc, #100]	; (800fb38 <__s2b+0x90>)
 800fad2:	21ce      	movs	r1, #206	; 0xce
 800fad4:	f001 fa38 	bl	8010f48 <__assert_func>
 800fad8:	0052      	lsls	r2, r2, #1
 800fada:	3101      	adds	r1, #1
 800fadc:	e7f0      	b.n	800fac0 <__s2b+0x18>
 800fade:	9b08      	ldr	r3, [sp, #32]
 800fae0:	6143      	str	r3, [r0, #20]
 800fae2:	2d09      	cmp	r5, #9
 800fae4:	f04f 0301 	mov.w	r3, #1
 800fae8:	6103      	str	r3, [r0, #16]
 800faea:	dd16      	ble.n	800fb1a <__s2b+0x72>
 800faec:	f104 0909 	add.w	r9, r4, #9
 800faf0:	46c8      	mov	r8, r9
 800faf2:	442c      	add	r4, r5
 800faf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800faf8:	4601      	mov	r1, r0
 800fafa:	3b30      	subs	r3, #48	; 0x30
 800fafc:	220a      	movs	r2, #10
 800fafe:	4630      	mov	r0, r6
 800fb00:	f7ff ff8c 	bl	800fa1c <__multadd>
 800fb04:	45a0      	cmp	r8, r4
 800fb06:	d1f5      	bne.n	800faf4 <__s2b+0x4c>
 800fb08:	f1a5 0408 	sub.w	r4, r5, #8
 800fb0c:	444c      	add	r4, r9
 800fb0e:	1b2d      	subs	r5, r5, r4
 800fb10:	1963      	adds	r3, r4, r5
 800fb12:	42bb      	cmp	r3, r7
 800fb14:	db04      	blt.n	800fb20 <__s2b+0x78>
 800fb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb1a:	340a      	adds	r4, #10
 800fb1c:	2509      	movs	r5, #9
 800fb1e:	e7f6      	b.n	800fb0e <__s2b+0x66>
 800fb20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fb24:	4601      	mov	r1, r0
 800fb26:	3b30      	subs	r3, #48	; 0x30
 800fb28:	220a      	movs	r2, #10
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f7ff ff76 	bl	800fa1c <__multadd>
 800fb30:	e7ee      	b.n	800fb10 <__s2b+0x68>
 800fb32:	bf00      	nop
 800fb34:	08011f24 	.word	0x08011f24
 800fb38:	08012010 	.word	0x08012010

0800fb3c <__hi0bits>:
 800fb3c:	0c03      	lsrs	r3, r0, #16
 800fb3e:	041b      	lsls	r3, r3, #16
 800fb40:	b9d3      	cbnz	r3, 800fb78 <__hi0bits+0x3c>
 800fb42:	0400      	lsls	r0, r0, #16
 800fb44:	2310      	movs	r3, #16
 800fb46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fb4a:	bf04      	itt	eq
 800fb4c:	0200      	lsleq	r0, r0, #8
 800fb4e:	3308      	addeq	r3, #8
 800fb50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fb54:	bf04      	itt	eq
 800fb56:	0100      	lsleq	r0, r0, #4
 800fb58:	3304      	addeq	r3, #4
 800fb5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fb5e:	bf04      	itt	eq
 800fb60:	0080      	lsleq	r0, r0, #2
 800fb62:	3302      	addeq	r3, #2
 800fb64:	2800      	cmp	r0, #0
 800fb66:	db05      	blt.n	800fb74 <__hi0bits+0x38>
 800fb68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fb6c:	f103 0301 	add.w	r3, r3, #1
 800fb70:	bf08      	it	eq
 800fb72:	2320      	moveq	r3, #32
 800fb74:	4618      	mov	r0, r3
 800fb76:	4770      	bx	lr
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e7e4      	b.n	800fb46 <__hi0bits+0xa>

0800fb7c <__lo0bits>:
 800fb7c:	6803      	ldr	r3, [r0, #0]
 800fb7e:	f013 0207 	ands.w	r2, r3, #7
 800fb82:	4601      	mov	r1, r0
 800fb84:	d00b      	beq.n	800fb9e <__lo0bits+0x22>
 800fb86:	07da      	lsls	r2, r3, #31
 800fb88:	d423      	bmi.n	800fbd2 <__lo0bits+0x56>
 800fb8a:	0798      	lsls	r0, r3, #30
 800fb8c:	bf49      	itett	mi
 800fb8e:	085b      	lsrmi	r3, r3, #1
 800fb90:	089b      	lsrpl	r3, r3, #2
 800fb92:	2001      	movmi	r0, #1
 800fb94:	600b      	strmi	r3, [r1, #0]
 800fb96:	bf5c      	itt	pl
 800fb98:	600b      	strpl	r3, [r1, #0]
 800fb9a:	2002      	movpl	r0, #2
 800fb9c:	4770      	bx	lr
 800fb9e:	b298      	uxth	r0, r3
 800fba0:	b9a8      	cbnz	r0, 800fbce <__lo0bits+0x52>
 800fba2:	0c1b      	lsrs	r3, r3, #16
 800fba4:	2010      	movs	r0, #16
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	b90a      	cbnz	r2, 800fbae <__lo0bits+0x32>
 800fbaa:	3008      	adds	r0, #8
 800fbac:	0a1b      	lsrs	r3, r3, #8
 800fbae:	071a      	lsls	r2, r3, #28
 800fbb0:	bf04      	itt	eq
 800fbb2:	091b      	lsreq	r3, r3, #4
 800fbb4:	3004      	addeq	r0, #4
 800fbb6:	079a      	lsls	r2, r3, #30
 800fbb8:	bf04      	itt	eq
 800fbba:	089b      	lsreq	r3, r3, #2
 800fbbc:	3002      	addeq	r0, #2
 800fbbe:	07da      	lsls	r2, r3, #31
 800fbc0:	d403      	bmi.n	800fbca <__lo0bits+0x4e>
 800fbc2:	085b      	lsrs	r3, r3, #1
 800fbc4:	f100 0001 	add.w	r0, r0, #1
 800fbc8:	d005      	beq.n	800fbd6 <__lo0bits+0x5a>
 800fbca:	600b      	str	r3, [r1, #0]
 800fbcc:	4770      	bx	lr
 800fbce:	4610      	mov	r0, r2
 800fbd0:	e7e9      	b.n	800fba6 <__lo0bits+0x2a>
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	4770      	bx	lr
 800fbd6:	2020      	movs	r0, #32
 800fbd8:	4770      	bx	lr
	...

0800fbdc <__i2b>:
 800fbdc:	b510      	push	{r4, lr}
 800fbde:	460c      	mov	r4, r1
 800fbe0:	2101      	movs	r1, #1
 800fbe2:	f7ff feb9 	bl	800f958 <_Balloc>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	b928      	cbnz	r0, 800fbf6 <__i2b+0x1a>
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <__i2b+0x24>)
 800fbec:	4805      	ldr	r0, [pc, #20]	; (800fc04 <__i2b+0x28>)
 800fbee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fbf2:	f001 f9a9 	bl	8010f48 <__assert_func>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	6144      	str	r4, [r0, #20]
 800fbfa:	6103      	str	r3, [r0, #16]
 800fbfc:	bd10      	pop	{r4, pc}
 800fbfe:	bf00      	nop
 800fc00:	08011f24 	.word	0x08011f24
 800fc04:	08012010 	.word	0x08012010

0800fc08 <__multiply>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	4691      	mov	r9, r2
 800fc0e:	690a      	ldr	r2, [r1, #16]
 800fc10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	bfb8      	it	lt
 800fc18:	460b      	movlt	r3, r1
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	bfbc      	itt	lt
 800fc1e:	464c      	movlt	r4, r9
 800fc20:	4699      	movlt	r9, r3
 800fc22:	6927      	ldr	r7, [r4, #16]
 800fc24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	6861      	ldr	r1, [r4, #4]
 800fc2c:	eb07 060a 	add.w	r6, r7, sl
 800fc30:	42b3      	cmp	r3, r6
 800fc32:	b085      	sub	sp, #20
 800fc34:	bfb8      	it	lt
 800fc36:	3101      	addlt	r1, #1
 800fc38:	f7ff fe8e 	bl	800f958 <_Balloc>
 800fc3c:	b930      	cbnz	r0, 800fc4c <__multiply+0x44>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	4b44      	ldr	r3, [pc, #272]	; (800fd54 <__multiply+0x14c>)
 800fc42:	4845      	ldr	r0, [pc, #276]	; (800fd58 <__multiply+0x150>)
 800fc44:	f240 115d 	movw	r1, #349	; 0x15d
 800fc48:	f001 f97e 	bl	8010f48 <__assert_func>
 800fc4c:	f100 0514 	add.w	r5, r0, #20
 800fc50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc54:	462b      	mov	r3, r5
 800fc56:	2200      	movs	r2, #0
 800fc58:	4543      	cmp	r3, r8
 800fc5a:	d321      	bcc.n	800fca0 <__multiply+0x98>
 800fc5c:	f104 0314 	add.w	r3, r4, #20
 800fc60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fc64:	f109 0314 	add.w	r3, r9, #20
 800fc68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fc6c:	9202      	str	r2, [sp, #8]
 800fc6e:	1b3a      	subs	r2, r7, r4
 800fc70:	3a15      	subs	r2, #21
 800fc72:	f022 0203 	bic.w	r2, r2, #3
 800fc76:	3204      	adds	r2, #4
 800fc78:	f104 0115 	add.w	r1, r4, #21
 800fc7c:	428f      	cmp	r7, r1
 800fc7e:	bf38      	it	cc
 800fc80:	2204      	movcc	r2, #4
 800fc82:	9201      	str	r2, [sp, #4]
 800fc84:	9a02      	ldr	r2, [sp, #8]
 800fc86:	9303      	str	r3, [sp, #12]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d80c      	bhi.n	800fca6 <__multiply+0x9e>
 800fc8c:	2e00      	cmp	r6, #0
 800fc8e:	dd03      	ble.n	800fc98 <__multiply+0x90>
 800fc90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d05a      	beq.n	800fd4e <__multiply+0x146>
 800fc98:	6106      	str	r6, [r0, #16]
 800fc9a:	b005      	add	sp, #20
 800fc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca0:	f843 2b04 	str.w	r2, [r3], #4
 800fca4:	e7d8      	b.n	800fc58 <__multiply+0x50>
 800fca6:	f8b3 a000 	ldrh.w	sl, [r3]
 800fcaa:	f1ba 0f00 	cmp.w	sl, #0
 800fcae:	d024      	beq.n	800fcfa <__multiply+0xf2>
 800fcb0:	f104 0e14 	add.w	lr, r4, #20
 800fcb4:	46a9      	mov	r9, r5
 800fcb6:	f04f 0c00 	mov.w	ip, #0
 800fcba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fcbe:	f8d9 1000 	ldr.w	r1, [r9]
 800fcc2:	fa1f fb82 	uxth.w	fp, r2
 800fcc6:	b289      	uxth	r1, r1
 800fcc8:	fb0a 110b 	mla	r1, sl, fp, r1
 800fccc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fcd0:	f8d9 2000 	ldr.w	r2, [r9]
 800fcd4:	4461      	add	r1, ip
 800fcd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcda:	fb0a c20b 	mla	r2, sl, fp, ip
 800fcde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fce2:	b289      	uxth	r1, r1
 800fce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fce8:	4577      	cmp	r7, lr
 800fcea:	f849 1b04 	str.w	r1, [r9], #4
 800fcee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcf2:	d8e2      	bhi.n	800fcba <__multiply+0xb2>
 800fcf4:	9a01      	ldr	r2, [sp, #4]
 800fcf6:	f845 c002 	str.w	ip, [r5, r2]
 800fcfa:	9a03      	ldr	r2, [sp, #12]
 800fcfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fd00:	3304      	adds	r3, #4
 800fd02:	f1b9 0f00 	cmp.w	r9, #0
 800fd06:	d020      	beq.n	800fd4a <__multiply+0x142>
 800fd08:	6829      	ldr	r1, [r5, #0]
 800fd0a:	f104 0c14 	add.w	ip, r4, #20
 800fd0e:	46ae      	mov	lr, r5
 800fd10:	f04f 0a00 	mov.w	sl, #0
 800fd14:	f8bc b000 	ldrh.w	fp, [ip]
 800fd18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fd1c:	fb09 220b 	mla	r2, r9, fp, r2
 800fd20:	4492      	add	sl, r2
 800fd22:	b289      	uxth	r1, r1
 800fd24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fd28:	f84e 1b04 	str.w	r1, [lr], #4
 800fd2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fd30:	f8be 1000 	ldrh.w	r1, [lr]
 800fd34:	0c12      	lsrs	r2, r2, #16
 800fd36:	fb09 1102 	mla	r1, r9, r2, r1
 800fd3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fd3e:	4567      	cmp	r7, ip
 800fd40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fd44:	d8e6      	bhi.n	800fd14 <__multiply+0x10c>
 800fd46:	9a01      	ldr	r2, [sp, #4]
 800fd48:	50a9      	str	r1, [r5, r2]
 800fd4a:	3504      	adds	r5, #4
 800fd4c:	e79a      	b.n	800fc84 <__multiply+0x7c>
 800fd4e:	3e01      	subs	r6, #1
 800fd50:	e79c      	b.n	800fc8c <__multiply+0x84>
 800fd52:	bf00      	nop
 800fd54:	08011f24 	.word	0x08011f24
 800fd58:	08012010 	.word	0x08012010

0800fd5c <__pow5mult>:
 800fd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd60:	4615      	mov	r5, r2
 800fd62:	f012 0203 	ands.w	r2, r2, #3
 800fd66:	4606      	mov	r6, r0
 800fd68:	460f      	mov	r7, r1
 800fd6a:	d007      	beq.n	800fd7c <__pow5mult+0x20>
 800fd6c:	4c25      	ldr	r4, [pc, #148]	; (800fe04 <__pow5mult+0xa8>)
 800fd6e:	3a01      	subs	r2, #1
 800fd70:	2300      	movs	r3, #0
 800fd72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd76:	f7ff fe51 	bl	800fa1c <__multadd>
 800fd7a:	4607      	mov	r7, r0
 800fd7c:	10ad      	asrs	r5, r5, #2
 800fd7e:	d03d      	beq.n	800fdfc <__pow5mult+0xa0>
 800fd80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fd82:	b97c      	cbnz	r4, 800fda4 <__pow5mult+0x48>
 800fd84:	2010      	movs	r0, #16
 800fd86:	f7ff fdc5 	bl	800f914 <malloc>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	6270      	str	r0, [r6, #36]	; 0x24
 800fd8e:	b928      	cbnz	r0, 800fd9c <__pow5mult+0x40>
 800fd90:	4b1d      	ldr	r3, [pc, #116]	; (800fe08 <__pow5mult+0xac>)
 800fd92:	481e      	ldr	r0, [pc, #120]	; (800fe0c <__pow5mult+0xb0>)
 800fd94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fd98:	f001 f8d6 	bl	8010f48 <__assert_func>
 800fd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fda0:	6004      	str	r4, [r0, #0]
 800fda2:	60c4      	str	r4, [r0, #12]
 800fda4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fda8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fdac:	b94c      	cbnz	r4, 800fdc2 <__pow5mult+0x66>
 800fdae:	f240 2171 	movw	r1, #625	; 0x271
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	f7ff ff12 	bl	800fbdc <__i2b>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	f8c8 0008 	str.w	r0, [r8, #8]
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	6003      	str	r3, [r0, #0]
 800fdc2:	f04f 0900 	mov.w	r9, #0
 800fdc6:	07eb      	lsls	r3, r5, #31
 800fdc8:	d50a      	bpl.n	800fde0 <__pow5mult+0x84>
 800fdca:	4639      	mov	r1, r7
 800fdcc:	4622      	mov	r2, r4
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f7ff ff1a 	bl	800fc08 <__multiply>
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	4680      	mov	r8, r0
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f7ff fdfd 	bl	800f9d8 <_Bfree>
 800fdde:	4647      	mov	r7, r8
 800fde0:	106d      	asrs	r5, r5, #1
 800fde2:	d00b      	beq.n	800fdfc <__pow5mult+0xa0>
 800fde4:	6820      	ldr	r0, [r4, #0]
 800fde6:	b938      	cbnz	r0, 800fdf8 <__pow5mult+0x9c>
 800fde8:	4622      	mov	r2, r4
 800fdea:	4621      	mov	r1, r4
 800fdec:	4630      	mov	r0, r6
 800fdee:	f7ff ff0b 	bl	800fc08 <__multiply>
 800fdf2:	6020      	str	r0, [r4, #0]
 800fdf4:	f8c0 9000 	str.w	r9, [r0]
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	e7e4      	b.n	800fdc6 <__pow5mult+0x6a>
 800fdfc:	4638      	mov	r0, r7
 800fdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe02:	bf00      	nop
 800fe04:	08012160 	.word	0x08012160
 800fe08:	08011eb2 	.word	0x08011eb2
 800fe0c:	08012010 	.word	0x08012010

0800fe10 <__lshift>:
 800fe10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe14:	460c      	mov	r4, r1
 800fe16:	6849      	ldr	r1, [r1, #4]
 800fe18:	6923      	ldr	r3, [r4, #16]
 800fe1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe1e:	68a3      	ldr	r3, [r4, #8]
 800fe20:	4607      	mov	r7, r0
 800fe22:	4691      	mov	r9, r2
 800fe24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe28:	f108 0601 	add.w	r6, r8, #1
 800fe2c:	42b3      	cmp	r3, r6
 800fe2e:	db0b      	blt.n	800fe48 <__lshift+0x38>
 800fe30:	4638      	mov	r0, r7
 800fe32:	f7ff fd91 	bl	800f958 <_Balloc>
 800fe36:	4605      	mov	r5, r0
 800fe38:	b948      	cbnz	r0, 800fe4e <__lshift+0x3e>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	4b2a      	ldr	r3, [pc, #168]	; (800fee8 <__lshift+0xd8>)
 800fe3e:	482b      	ldr	r0, [pc, #172]	; (800feec <__lshift+0xdc>)
 800fe40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fe44:	f001 f880 	bl	8010f48 <__assert_func>
 800fe48:	3101      	adds	r1, #1
 800fe4a:	005b      	lsls	r3, r3, #1
 800fe4c:	e7ee      	b.n	800fe2c <__lshift+0x1c>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	f100 0114 	add.w	r1, r0, #20
 800fe54:	f100 0210 	add.w	r2, r0, #16
 800fe58:	4618      	mov	r0, r3
 800fe5a:	4553      	cmp	r3, sl
 800fe5c:	db37      	blt.n	800fece <__lshift+0xbe>
 800fe5e:	6920      	ldr	r0, [r4, #16]
 800fe60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe64:	f104 0314 	add.w	r3, r4, #20
 800fe68:	f019 091f 	ands.w	r9, r9, #31
 800fe6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe74:	d02f      	beq.n	800fed6 <__lshift+0xc6>
 800fe76:	f1c9 0e20 	rsb	lr, r9, #32
 800fe7a:	468a      	mov	sl, r1
 800fe7c:	f04f 0c00 	mov.w	ip, #0
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	fa02 f209 	lsl.w	r2, r2, r9
 800fe86:	ea42 020c 	orr.w	r2, r2, ip
 800fe8a:	f84a 2b04 	str.w	r2, [sl], #4
 800fe8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe92:	4298      	cmp	r0, r3
 800fe94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fe98:	d8f2      	bhi.n	800fe80 <__lshift+0x70>
 800fe9a:	1b03      	subs	r3, r0, r4
 800fe9c:	3b15      	subs	r3, #21
 800fe9e:	f023 0303 	bic.w	r3, r3, #3
 800fea2:	3304      	adds	r3, #4
 800fea4:	f104 0215 	add.w	r2, r4, #21
 800fea8:	4290      	cmp	r0, r2
 800feaa:	bf38      	it	cc
 800feac:	2304      	movcc	r3, #4
 800feae:	f841 c003 	str.w	ip, [r1, r3]
 800feb2:	f1bc 0f00 	cmp.w	ip, #0
 800feb6:	d001      	beq.n	800febc <__lshift+0xac>
 800feb8:	f108 0602 	add.w	r6, r8, #2
 800febc:	3e01      	subs	r6, #1
 800febe:	4638      	mov	r0, r7
 800fec0:	612e      	str	r6, [r5, #16]
 800fec2:	4621      	mov	r1, r4
 800fec4:	f7ff fd88 	bl	800f9d8 <_Bfree>
 800fec8:	4628      	mov	r0, r5
 800feca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fece:	f842 0f04 	str.w	r0, [r2, #4]!
 800fed2:	3301      	adds	r3, #1
 800fed4:	e7c1      	b.n	800fe5a <__lshift+0x4a>
 800fed6:	3904      	subs	r1, #4
 800fed8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fee0:	4298      	cmp	r0, r3
 800fee2:	d8f9      	bhi.n	800fed8 <__lshift+0xc8>
 800fee4:	e7ea      	b.n	800febc <__lshift+0xac>
 800fee6:	bf00      	nop
 800fee8:	08011f24 	.word	0x08011f24
 800feec:	08012010 	.word	0x08012010

0800fef0 <__mcmp>:
 800fef0:	b530      	push	{r4, r5, lr}
 800fef2:	6902      	ldr	r2, [r0, #16]
 800fef4:	690c      	ldr	r4, [r1, #16]
 800fef6:	1b12      	subs	r2, r2, r4
 800fef8:	d10e      	bne.n	800ff18 <__mcmp+0x28>
 800fefa:	f100 0314 	add.w	r3, r0, #20
 800fefe:	3114      	adds	r1, #20
 800ff00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ff04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ff08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ff0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ff10:	42a5      	cmp	r5, r4
 800ff12:	d003      	beq.n	800ff1c <__mcmp+0x2c>
 800ff14:	d305      	bcc.n	800ff22 <__mcmp+0x32>
 800ff16:	2201      	movs	r2, #1
 800ff18:	4610      	mov	r0, r2
 800ff1a:	bd30      	pop	{r4, r5, pc}
 800ff1c:	4283      	cmp	r3, r0
 800ff1e:	d3f3      	bcc.n	800ff08 <__mcmp+0x18>
 800ff20:	e7fa      	b.n	800ff18 <__mcmp+0x28>
 800ff22:	f04f 32ff 	mov.w	r2, #4294967295
 800ff26:	e7f7      	b.n	800ff18 <__mcmp+0x28>

0800ff28 <__mdiff>:
 800ff28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	4606      	mov	r6, r0
 800ff30:	4611      	mov	r1, r2
 800ff32:	4620      	mov	r0, r4
 800ff34:	4690      	mov	r8, r2
 800ff36:	f7ff ffdb 	bl	800fef0 <__mcmp>
 800ff3a:	1e05      	subs	r5, r0, #0
 800ff3c:	d110      	bne.n	800ff60 <__mdiff+0x38>
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4630      	mov	r0, r6
 800ff42:	f7ff fd09 	bl	800f958 <_Balloc>
 800ff46:	b930      	cbnz	r0, 800ff56 <__mdiff+0x2e>
 800ff48:	4b3a      	ldr	r3, [pc, #232]	; (8010034 <__mdiff+0x10c>)
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	f240 2132 	movw	r1, #562	; 0x232
 800ff50:	4839      	ldr	r0, [pc, #228]	; (8010038 <__mdiff+0x110>)
 800ff52:	f000 fff9 	bl	8010f48 <__assert_func>
 800ff56:	2301      	movs	r3, #1
 800ff58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff60:	bfa4      	itt	ge
 800ff62:	4643      	movge	r3, r8
 800ff64:	46a0      	movge	r8, r4
 800ff66:	4630      	mov	r0, r6
 800ff68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff6c:	bfa6      	itte	ge
 800ff6e:	461c      	movge	r4, r3
 800ff70:	2500      	movge	r5, #0
 800ff72:	2501      	movlt	r5, #1
 800ff74:	f7ff fcf0 	bl	800f958 <_Balloc>
 800ff78:	b920      	cbnz	r0, 800ff84 <__mdiff+0x5c>
 800ff7a:	4b2e      	ldr	r3, [pc, #184]	; (8010034 <__mdiff+0x10c>)
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ff82:	e7e5      	b.n	800ff50 <__mdiff+0x28>
 800ff84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff88:	6926      	ldr	r6, [r4, #16]
 800ff8a:	60c5      	str	r5, [r0, #12]
 800ff8c:	f104 0914 	add.w	r9, r4, #20
 800ff90:	f108 0514 	add.w	r5, r8, #20
 800ff94:	f100 0e14 	add.w	lr, r0, #20
 800ff98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ffa0:	f108 0210 	add.w	r2, r8, #16
 800ffa4:	46f2      	mov	sl, lr
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800ffac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ffb0:	fa1f f883 	uxth.w	r8, r3
 800ffb4:	fa11 f18b 	uxtah	r1, r1, fp
 800ffb8:	0c1b      	lsrs	r3, r3, #16
 800ffba:	eba1 0808 	sub.w	r8, r1, r8
 800ffbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ffc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ffc6:	fa1f f888 	uxth.w	r8, r8
 800ffca:	1419      	asrs	r1, r3, #16
 800ffcc:	454e      	cmp	r6, r9
 800ffce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ffd2:	f84a 3b04 	str.w	r3, [sl], #4
 800ffd6:	d8e7      	bhi.n	800ffa8 <__mdiff+0x80>
 800ffd8:	1b33      	subs	r3, r6, r4
 800ffda:	3b15      	subs	r3, #21
 800ffdc:	f023 0303 	bic.w	r3, r3, #3
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	3415      	adds	r4, #21
 800ffe4:	42a6      	cmp	r6, r4
 800ffe6:	bf38      	it	cc
 800ffe8:	2304      	movcc	r3, #4
 800ffea:	441d      	add	r5, r3
 800ffec:	4473      	add	r3, lr
 800ffee:	469e      	mov	lr, r3
 800fff0:	462e      	mov	r6, r5
 800fff2:	4566      	cmp	r6, ip
 800fff4:	d30e      	bcc.n	8010014 <__mdiff+0xec>
 800fff6:	f10c 0203 	add.w	r2, ip, #3
 800fffa:	1b52      	subs	r2, r2, r5
 800fffc:	f022 0203 	bic.w	r2, r2, #3
 8010000:	3d03      	subs	r5, #3
 8010002:	45ac      	cmp	ip, r5
 8010004:	bf38      	it	cc
 8010006:	2200      	movcc	r2, #0
 8010008:	441a      	add	r2, r3
 801000a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801000e:	b17b      	cbz	r3, 8010030 <__mdiff+0x108>
 8010010:	6107      	str	r7, [r0, #16]
 8010012:	e7a3      	b.n	800ff5c <__mdiff+0x34>
 8010014:	f856 8b04 	ldr.w	r8, [r6], #4
 8010018:	fa11 f288 	uxtah	r2, r1, r8
 801001c:	1414      	asrs	r4, r2, #16
 801001e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010022:	b292      	uxth	r2, r2
 8010024:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010028:	f84e 2b04 	str.w	r2, [lr], #4
 801002c:	1421      	asrs	r1, r4, #16
 801002e:	e7e0      	b.n	800fff2 <__mdiff+0xca>
 8010030:	3f01      	subs	r7, #1
 8010032:	e7ea      	b.n	801000a <__mdiff+0xe2>
 8010034:	08011f24 	.word	0x08011f24
 8010038:	08012010 	.word	0x08012010

0801003c <__ulp>:
 801003c:	b082      	sub	sp, #8
 801003e:	ed8d 0b00 	vstr	d0, [sp]
 8010042:	9b01      	ldr	r3, [sp, #4]
 8010044:	4912      	ldr	r1, [pc, #72]	; (8010090 <__ulp+0x54>)
 8010046:	4019      	ands	r1, r3
 8010048:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801004c:	2900      	cmp	r1, #0
 801004e:	dd05      	ble.n	801005c <__ulp+0x20>
 8010050:	2200      	movs	r2, #0
 8010052:	460b      	mov	r3, r1
 8010054:	ec43 2b10 	vmov	d0, r2, r3
 8010058:	b002      	add	sp, #8
 801005a:	4770      	bx	lr
 801005c:	4249      	negs	r1, r1
 801005e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010062:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010066:	f04f 0200 	mov.w	r2, #0
 801006a:	f04f 0300 	mov.w	r3, #0
 801006e:	da04      	bge.n	801007a <__ulp+0x3e>
 8010070:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010074:	fa41 f300 	asr.w	r3, r1, r0
 8010078:	e7ec      	b.n	8010054 <__ulp+0x18>
 801007a:	f1a0 0114 	sub.w	r1, r0, #20
 801007e:	291e      	cmp	r1, #30
 8010080:	bfda      	itte	le
 8010082:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010086:	fa20 f101 	lsrle.w	r1, r0, r1
 801008a:	2101      	movgt	r1, #1
 801008c:	460a      	mov	r2, r1
 801008e:	e7e1      	b.n	8010054 <__ulp+0x18>
 8010090:	7ff00000 	.word	0x7ff00000

08010094 <__b2d>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	6905      	ldr	r5, [r0, #16]
 8010098:	f100 0714 	add.w	r7, r0, #20
 801009c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80100a0:	1f2e      	subs	r6, r5, #4
 80100a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80100a6:	4620      	mov	r0, r4
 80100a8:	f7ff fd48 	bl	800fb3c <__hi0bits>
 80100ac:	f1c0 0320 	rsb	r3, r0, #32
 80100b0:	280a      	cmp	r0, #10
 80100b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010130 <__b2d+0x9c>
 80100b6:	600b      	str	r3, [r1, #0]
 80100b8:	dc14      	bgt.n	80100e4 <__b2d+0x50>
 80100ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80100be:	fa24 f10e 	lsr.w	r1, r4, lr
 80100c2:	42b7      	cmp	r7, r6
 80100c4:	ea41 030c 	orr.w	r3, r1, ip
 80100c8:	bf34      	ite	cc
 80100ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80100ce:	2100      	movcs	r1, #0
 80100d0:	3015      	adds	r0, #21
 80100d2:	fa04 f000 	lsl.w	r0, r4, r0
 80100d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80100da:	ea40 0201 	orr.w	r2, r0, r1
 80100de:	ec43 2b10 	vmov	d0, r2, r3
 80100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e4:	42b7      	cmp	r7, r6
 80100e6:	bf3a      	itte	cc
 80100e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80100ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80100f0:	2100      	movcs	r1, #0
 80100f2:	380b      	subs	r0, #11
 80100f4:	d017      	beq.n	8010126 <__b2d+0x92>
 80100f6:	f1c0 0c20 	rsb	ip, r0, #32
 80100fa:	fa04 f500 	lsl.w	r5, r4, r0
 80100fe:	42be      	cmp	r6, r7
 8010100:	fa21 f40c 	lsr.w	r4, r1, ip
 8010104:	ea45 0504 	orr.w	r5, r5, r4
 8010108:	bf8c      	ite	hi
 801010a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801010e:	2400      	movls	r4, #0
 8010110:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010114:	fa01 f000 	lsl.w	r0, r1, r0
 8010118:	fa24 f40c 	lsr.w	r4, r4, ip
 801011c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010120:	ea40 0204 	orr.w	r2, r0, r4
 8010124:	e7db      	b.n	80100de <__b2d+0x4a>
 8010126:	ea44 030c 	orr.w	r3, r4, ip
 801012a:	460a      	mov	r2, r1
 801012c:	e7d7      	b.n	80100de <__b2d+0x4a>
 801012e:	bf00      	nop
 8010130:	3ff00000 	.word	0x3ff00000

08010134 <__d2b>:
 8010134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010138:	4689      	mov	r9, r1
 801013a:	2101      	movs	r1, #1
 801013c:	ec57 6b10 	vmov	r6, r7, d0
 8010140:	4690      	mov	r8, r2
 8010142:	f7ff fc09 	bl	800f958 <_Balloc>
 8010146:	4604      	mov	r4, r0
 8010148:	b930      	cbnz	r0, 8010158 <__d2b+0x24>
 801014a:	4602      	mov	r2, r0
 801014c:	4b25      	ldr	r3, [pc, #148]	; (80101e4 <__d2b+0xb0>)
 801014e:	4826      	ldr	r0, [pc, #152]	; (80101e8 <__d2b+0xb4>)
 8010150:	f240 310a 	movw	r1, #778	; 0x30a
 8010154:	f000 fef8 	bl	8010f48 <__assert_func>
 8010158:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801015c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010160:	bb35      	cbnz	r5, 80101b0 <__d2b+0x7c>
 8010162:	2e00      	cmp	r6, #0
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	d028      	beq.n	80101ba <__d2b+0x86>
 8010168:	4668      	mov	r0, sp
 801016a:	9600      	str	r6, [sp, #0]
 801016c:	f7ff fd06 	bl	800fb7c <__lo0bits>
 8010170:	9900      	ldr	r1, [sp, #0]
 8010172:	b300      	cbz	r0, 80101b6 <__d2b+0x82>
 8010174:	9a01      	ldr	r2, [sp, #4]
 8010176:	f1c0 0320 	rsb	r3, r0, #32
 801017a:	fa02 f303 	lsl.w	r3, r2, r3
 801017e:	430b      	orrs	r3, r1
 8010180:	40c2      	lsrs	r2, r0
 8010182:	6163      	str	r3, [r4, #20]
 8010184:	9201      	str	r2, [sp, #4]
 8010186:	9b01      	ldr	r3, [sp, #4]
 8010188:	61a3      	str	r3, [r4, #24]
 801018a:	2b00      	cmp	r3, #0
 801018c:	bf14      	ite	ne
 801018e:	2202      	movne	r2, #2
 8010190:	2201      	moveq	r2, #1
 8010192:	6122      	str	r2, [r4, #16]
 8010194:	b1d5      	cbz	r5, 80101cc <__d2b+0x98>
 8010196:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801019a:	4405      	add	r5, r0
 801019c:	f8c9 5000 	str.w	r5, [r9]
 80101a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80101a4:	f8c8 0000 	str.w	r0, [r8]
 80101a8:	4620      	mov	r0, r4
 80101aa:	b003      	add	sp, #12
 80101ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101b4:	e7d5      	b.n	8010162 <__d2b+0x2e>
 80101b6:	6161      	str	r1, [r4, #20]
 80101b8:	e7e5      	b.n	8010186 <__d2b+0x52>
 80101ba:	a801      	add	r0, sp, #4
 80101bc:	f7ff fcde 	bl	800fb7c <__lo0bits>
 80101c0:	9b01      	ldr	r3, [sp, #4]
 80101c2:	6163      	str	r3, [r4, #20]
 80101c4:	2201      	movs	r2, #1
 80101c6:	6122      	str	r2, [r4, #16]
 80101c8:	3020      	adds	r0, #32
 80101ca:	e7e3      	b.n	8010194 <__d2b+0x60>
 80101cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80101d4:	f8c9 0000 	str.w	r0, [r9]
 80101d8:	6918      	ldr	r0, [r3, #16]
 80101da:	f7ff fcaf 	bl	800fb3c <__hi0bits>
 80101de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101e2:	e7df      	b.n	80101a4 <__d2b+0x70>
 80101e4:	08011f24 	.word	0x08011f24
 80101e8:	08012010 	.word	0x08012010

080101ec <__ratio>:
 80101ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	4688      	mov	r8, r1
 80101f2:	4669      	mov	r1, sp
 80101f4:	4681      	mov	r9, r0
 80101f6:	f7ff ff4d 	bl	8010094 <__b2d>
 80101fa:	a901      	add	r1, sp, #4
 80101fc:	4640      	mov	r0, r8
 80101fe:	ec55 4b10 	vmov	r4, r5, d0
 8010202:	f7ff ff47 	bl	8010094 <__b2d>
 8010206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801020a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801020e:	eba3 0c02 	sub.w	ip, r3, r2
 8010212:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010216:	1a9b      	subs	r3, r3, r2
 8010218:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801021c:	ec51 0b10 	vmov	r0, r1, d0
 8010220:	2b00      	cmp	r3, #0
 8010222:	bfd6      	itet	le
 8010224:	460a      	movle	r2, r1
 8010226:	462a      	movgt	r2, r5
 8010228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801022c:	468b      	mov	fp, r1
 801022e:	462f      	mov	r7, r5
 8010230:	bfd4      	ite	le
 8010232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010236:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801023a:	4620      	mov	r0, r4
 801023c:	ee10 2a10 	vmov	r2, s0
 8010240:	465b      	mov	r3, fp
 8010242:	4639      	mov	r1, r7
 8010244:	f7f0 fb12 	bl	800086c <__aeabi_ddiv>
 8010248:	ec41 0b10 	vmov	d0, r0, r1
 801024c:	b003      	add	sp, #12
 801024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010252 <__copybits>:
 8010252:	3901      	subs	r1, #1
 8010254:	b570      	push	{r4, r5, r6, lr}
 8010256:	1149      	asrs	r1, r1, #5
 8010258:	6914      	ldr	r4, [r2, #16]
 801025a:	3101      	adds	r1, #1
 801025c:	f102 0314 	add.w	r3, r2, #20
 8010260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010268:	1f05      	subs	r5, r0, #4
 801026a:	42a3      	cmp	r3, r4
 801026c:	d30c      	bcc.n	8010288 <__copybits+0x36>
 801026e:	1aa3      	subs	r3, r4, r2
 8010270:	3b11      	subs	r3, #17
 8010272:	f023 0303 	bic.w	r3, r3, #3
 8010276:	3211      	adds	r2, #17
 8010278:	42a2      	cmp	r2, r4
 801027a:	bf88      	it	hi
 801027c:	2300      	movhi	r3, #0
 801027e:	4418      	add	r0, r3
 8010280:	2300      	movs	r3, #0
 8010282:	4288      	cmp	r0, r1
 8010284:	d305      	bcc.n	8010292 <__copybits+0x40>
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	f853 6b04 	ldr.w	r6, [r3], #4
 801028c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010290:	e7eb      	b.n	801026a <__copybits+0x18>
 8010292:	f840 3b04 	str.w	r3, [r0], #4
 8010296:	e7f4      	b.n	8010282 <__copybits+0x30>

08010298 <__any_on>:
 8010298:	f100 0214 	add.w	r2, r0, #20
 801029c:	6900      	ldr	r0, [r0, #16]
 801029e:	114b      	asrs	r3, r1, #5
 80102a0:	4298      	cmp	r0, r3
 80102a2:	b510      	push	{r4, lr}
 80102a4:	db11      	blt.n	80102ca <__any_on+0x32>
 80102a6:	dd0a      	ble.n	80102be <__any_on+0x26>
 80102a8:	f011 011f 	ands.w	r1, r1, #31
 80102ac:	d007      	beq.n	80102be <__any_on+0x26>
 80102ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80102b2:	fa24 f001 	lsr.w	r0, r4, r1
 80102b6:	fa00 f101 	lsl.w	r1, r0, r1
 80102ba:	428c      	cmp	r4, r1
 80102bc:	d10b      	bne.n	80102d6 <__any_on+0x3e>
 80102be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d803      	bhi.n	80102ce <__any_on+0x36>
 80102c6:	2000      	movs	r0, #0
 80102c8:	bd10      	pop	{r4, pc}
 80102ca:	4603      	mov	r3, r0
 80102cc:	e7f7      	b.n	80102be <__any_on+0x26>
 80102ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102d2:	2900      	cmp	r1, #0
 80102d4:	d0f5      	beq.n	80102c2 <__any_on+0x2a>
 80102d6:	2001      	movs	r0, #1
 80102d8:	e7f6      	b.n	80102c8 <__any_on+0x30>

080102da <_calloc_r>:
 80102da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102dc:	fba1 2402 	umull	r2, r4, r1, r2
 80102e0:	b94c      	cbnz	r4, 80102f6 <_calloc_r+0x1c>
 80102e2:	4611      	mov	r1, r2
 80102e4:	9201      	str	r2, [sp, #4]
 80102e6:	f000 f87b 	bl	80103e0 <_malloc_r>
 80102ea:	9a01      	ldr	r2, [sp, #4]
 80102ec:	4605      	mov	r5, r0
 80102ee:	b930      	cbnz	r0, 80102fe <_calloc_r+0x24>
 80102f0:	4628      	mov	r0, r5
 80102f2:	b003      	add	sp, #12
 80102f4:	bd30      	pop	{r4, r5, pc}
 80102f6:	220c      	movs	r2, #12
 80102f8:	6002      	str	r2, [r0, #0]
 80102fa:	2500      	movs	r5, #0
 80102fc:	e7f8      	b.n	80102f0 <_calloc_r+0x16>
 80102fe:	4621      	mov	r1, r4
 8010300:	f7fb fd5c 	bl	800bdbc <memset>
 8010304:	e7f4      	b.n	80102f0 <_calloc_r+0x16>
	...

08010308 <_free_r>:
 8010308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801030a:	2900      	cmp	r1, #0
 801030c:	d044      	beq.n	8010398 <_free_r+0x90>
 801030e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010312:	9001      	str	r0, [sp, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	f1a1 0404 	sub.w	r4, r1, #4
 801031a:	bfb8      	it	lt
 801031c:	18e4      	addlt	r4, r4, r3
 801031e:	f001 f821 	bl	8011364 <__malloc_lock>
 8010322:	4a1e      	ldr	r2, [pc, #120]	; (801039c <_free_r+0x94>)
 8010324:	9801      	ldr	r0, [sp, #4]
 8010326:	6813      	ldr	r3, [r2, #0]
 8010328:	b933      	cbnz	r3, 8010338 <_free_r+0x30>
 801032a:	6063      	str	r3, [r4, #4]
 801032c:	6014      	str	r4, [r2, #0]
 801032e:	b003      	add	sp, #12
 8010330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010334:	f001 b81c 	b.w	8011370 <__malloc_unlock>
 8010338:	42a3      	cmp	r3, r4
 801033a:	d908      	bls.n	801034e <_free_r+0x46>
 801033c:	6825      	ldr	r5, [r4, #0]
 801033e:	1961      	adds	r1, r4, r5
 8010340:	428b      	cmp	r3, r1
 8010342:	bf01      	itttt	eq
 8010344:	6819      	ldreq	r1, [r3, #0]
 8010346:	685b      	ldreq	r3, [r3, #4]
 8010348:	1949      	addeq	r1, r1, r5
 801034a:	6021      	streq	r1, [r4, #0]
 801034c:	e7ed      	b.n	801032a <_free_r+0x22>
 801034e:	461a      	mov	r2, r3
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	b10b      	cbz	r3, 8010358 <_free_r+0x50>
 8010354:	42a3      	cmp	r3, r4
 8010356:	d9fa      	bls.n	801034e <_free_r+0x46>
 8010358:	6811      	ldr	r1, [r2, #0]
 801035a:	1855      	adds	r5, r2, r1
 801035c:	42a5      	cmp	r5, r4
 801035e:	d10b      	bne.n	8010378 <_free_r+0x70>
 8010360:	6824      	ldr	r4, [r4, #0]
 8010362:	4421      	add	r1, r4
 8010364:	1854      	adds	r4, r2, r1
 8010366:	42a3      	cmp	r3, r4
 8010368:	6011      	str	r1, [r2, #0]
 801036a:	d1e0      	bne.n	801032e <_free_r+0x26>
 801036c:	681c      	ldr	r4, [r3, #0]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	6053      	str	r3, [r2, #4]
 8010372:	4421      	add	r1, r4
 8010374:	6011      	str	r1, [r2, #0]
 8010376:	e7da      	b.n	801032e <_free_r+0x26>
 8010378:	d902      	bls.n	8010380 <_free_r+0x78>
 801037a:	230c      	movs	r3, #12
 801037c:	6003      	str	r3, [r0, #0]
 801037e:	e7d6      	b.n	801032e <_free_r+0x26>
 8010380:	6825      	ldr	r5, [r4, #0]
 8010382:	1961      	adds	r1, r4, r5
 8010384:	428b      	cmp	r3, r1
 8010386:	bf04      	itt	eq
 8010388:	6819      	ldreq	r1, [r3, #0]
 801038a:	685b      	ldreq	r3, [r3, #4]
 801038c:	6063      	str	r3, [r4, #4]
 801038e:	bf04      	itt	eq
 8010390:	1949      	addeq	r1, r1, r5
 8010392:	6021      	streq	r1, [r4, #0]
 8010394:	6054      	str	r4, [r2, #4]
 8010396:	e7ca      	b.n	801032e <_free_r+0x26>
 8010398:	b003      	add	sp, #12
 801039a:	bd30      	pop	{r4, r5, pc}
 801039c:	200068b8 	.word	0x200068b8

080103a0 <sbrk_aligned>:
 80103a0:	b570      	push	{r4, r5, r6, lr}
 80103a2:	4e0e      	ldr	r6, [pc, #56]	; (80103dc <sbrk_aligned+0x3c>)
 80103a4:	460c      	mov	r4, r1
 80103a6:	6831      	ldr	r1, [r6, #0]
 80103a8:	4605      	mov	r5, r0
 80103aa:	b911      	cbnz	r1, 80103b2 <sbrk_aligned+0x12>
 80103ac:	f000 fd28 	bl	8010e00 <_sbrk_r>
 80103b0:	6030      	str	r0, [r6, #0]
 80103b2:	4621      	mov	r1, r4
 80103b4:	4628      	mov	r0, r5
 80103b6:	f000 fd23 	bl	8010e00 <_sbrk_r>
 80103ba:	1c43      	adds	r3, r0, #1
 80103bc:	d00a      	beq.n	80103d4 <sbrk_aligned+0x34>
 80103be:	1cc4      	adds	r4, r0, #3
 80103c0:	f024 0403 	bic.w	r4, r4, #3
 80103c4:	42a0      	cmp	r0, r4
 80103c6:	d007      	beq.n	80103d8 <sbrk_aligned+0x38>
 80103c8:	1a21      	subs	r1, r4, r0
 80103ca:	4628      	mov	r0, r5
 80103cc:	f000 fd18 	bl	8010e00 <_sbrk_r>
 80103d0:	3001      	adds	r0, #1
 80103d2:	d101      	bne.n	80103d8 <sbrk_aligned+0x38>
 80103d4:	f04f 34ff 	mov.w	r4, #4294967295
 80103d8:	4620      	mov	r0, r4
 80103da:	bd70      	pop	{r4, r5, r6, pc}
 80103dc:	200068bc 	.word	0x200068bc

080103e0 <_malloc_r>:
 80103e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e4:	1ccd      	adds	r5, r1, #3
 80103e6:	f025 0503 	bic.w	r5, r5, #3
 80103ea:	3508      	adds	r5, #8
 80103ec:	2d0c      	cmp	r5, #12
 80103ee:	bf38      	it	cc
 80103f0:	250c      	movcc	r5, #12
 80103f2:	2d00      	cmp	r5, #0
 80103f4:	4607      	mov	r7, r0
 80103f6:	db01      	blt.n	80103fc <_malloc_r+0x1c>
 80103f8:	42a9      	cmp	r1, r5
 80103fa:	d905      	bls.n	8010408 <_malloc_r+0x28>
 80103fc:	230c      	movs	r3, #12
 80103fe:	603b      	str	r3, [r7, #0]
 8010400:	2600      	movs	r6, #0
 8010402:	4630      	mov	r0, r6
 8010404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010408:	4e2e      	ldr	r6, [pc, #184]	; (80104c4 <_malloc_r+0xe4>)
 801040a:	f000 ffab 	bl	8011364 <__malloc_lock>
 801040e:	6833      	ldr	r3, [r6, #0]
 8010410:	461c      	mov	r4, r3
 8010412:	bb34      	cbnz	r4, 8010462 <_malloc_r+0x82>
 8010414:	4629      	mov	r1, r5
 8010416:	4638      	mov	r0, r7
 8010418:	f7ff ffc2 	bl	80103a0 <sbrk_aligned>
 801041c:	1c43      	adds	r3, r0, #1
 801041e:	4604      	mov	r4, r0
 8010420:	d14d      	bne.n	80104be <_malloc_r+0xde>
 8010422:	6834      	ldr	r4, [r6, #0]
 8010424:	4626      	mov	r6, r4
 8010426:	2e00      	cmp	r6, #0
 8010428:	d140      	bne.n	80104ac <_malloc_r+0xcc>
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	4631      	mov	r1, r6
 801042e:	4638      	mov	r0, r7
 8010430:	eb04 0803 	add.w	r8, r4, r3
 8010434:	f000 fce4 	bl	8010e00 <_sbrk_r>
 8010438:	4580      	cmp	r8, r0
 801043a:	d13a      	bne.n	80104b2 <_malloc_r+0xd2>
 801043c:	6821      	ldr	r1, [r4, #0]
 801043e:	3503      	adds	r5, #3
 8010440:	1a6d      	subs	r5, r5, r1
 8010442:	f025 0503 	bic.w	r5, r5, #3
 8010446:	3508      	adds	r5, #8
 8010448:	2d0c      	cmp	r5, #12
 801044a:	bf38      	it	cc
 801044c:	250c      	movcc	r5, #12
 801044e:	4629      	mov	r1, r5
 8010450:	4638      	mov	r0, r7
 8010452:	f7ff ffa5 	bl	80103a0 <sbrk_aligned>
 8010456:	3001      	adds	r0, #1
 8010458:	d02b      	beq.n	80104b2 <_malloc_r+0xd2>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	442b      	add	r3, r5
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	e00e      	b.n	8010480 <_malloc_r+0xa0>
 8010462:	6822      	ldr	r2, [r4, #0]
 8010464:	1b52      	subs	r2, r2, r5
 8010466:	d41e      	bmi.n	80104a6 <_malloc_r+0xc6>
 8010468:	2a0b      	cmp	r2, #11
 801046a:	d916      	bls.n	801049a <_malloc_r+0xba>
 801046c:	1961      	adds	r1, r4, r5
 801046e:	42a3      	cmp	r3, r4
 8010470:	6025      	str	r5, [r4, #0]
 8010472:	bf18      	it	ne
 8010474:	6059      	strne	r1, [r3, #4]
 8010476:	6863      	ldr	r3, [r4, #4]
 8010478:	bf08      	it	eq
 801047a:	6031      	streq	r1, [r6, #0]
 801047c:	5162      	str	r2, [r4, r5]
 801047e:	604b      	str	r3, [r1, #4]
 8010480:	4638      	mov	r0, r7
 8010482:	f104 060b 	add.w	r6, r4, #11
 8010486:	f000 ff73 	bl	8011370 <__malloc_unlock>
 801048a:	f026 0607 	bic.w	r6, r6, #7
 801048e:	1d23      	adds	r3, r4, #4
 8010490:	1af2      	subs	r2, r6, r3
 8010492:	d0b6      	beq.n	8010402 <_malloc_r+0x22>
 8010494:	1b9b      	subs	r3, r3, r6
 8010496:	50a3      	str	r3, [r4, r2]
 8010498:	e7b3      	b.n	8010402 <_malloc_r+0x22>
 801049a:	6862      	ldr	r2, [r4, #4]
 801049c:	42a3      	cmp	r3, r4
 801049e:	bf0c      	ite	eq
 80104a0:	6032      	streq	r2, [r6, #0]
 80104a2:	605a      	strne	r2, [r3, #4]
 80104a4:	e7ec      	b.n	8010480 <_malloc_r+0xa0>
 80104a6:	4623      	mov	r3, r4
 80104a8:	6864      	ldr	r4, [r4, #4]
 80104aa:	e7b2      	b.n	8010412 <_malloc_r+0x32>
 80104ac:	4634      	mov	r4, r6
 80104ae:	6876      	ldr	r6, [r6, #4]
 80104b0:	e7b9      	b.n	8010426 <_malloc_r+0x46>
 80104b2:	230c      	movs	r3, #12
 80104b4:	603b      	str	r3, [r7, #0]
 80104b6:	4638      	mov	r0, r7
 80104b8:	f000 ff5a 	bl	8011370 <__malloc_unlock>
 80104bc:	e7a1      	b.n	8010402 <_malloc_r+0x22>
 80104be:	6025      	str	r5, [r4, #0]
 80104c0:	e7de      	b.n	8010480 <_malloc_r+0xa0>
 80104c2:	bf00      	nop
 80104c4:	200068b8 	.word	0x200068b8

080104c8 <__ssputs_r>:
 80104c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104cc:	688e      	ldr	r6, [r1, #8]
 80104ce:	429e      	cmp	r6, r3
 80104d0:	4682      	mov	sl, r0
 80104d2:	460c      	mov	r4, r1
 80104d4:	4690      	mov	r8, r2
 80104d6:	461f      	mov	r7, r3
 80104d8:	d838      	bhi.n	801054c <__ssputs_r+0x84>
 80104da:	898a      	ldrh	r2, [r1, #12]
 80104dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104e0:	d032      	beq.n	8010548 <__ssputs_r+0x80>
 80104e2:	6825      	ldr	r5, [r4, #0]
 80104e4:	6909      	ldr	r1, [r1, #16]
 80104e6:	eba5 0901 	sub.w	r9, r5, r1
 80104ea:	6965      	ldr	r5, [r4, #20]
 80104ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104f4:	3301      	adds	r3, #1
 80104f6:	444b      	add	r3, r9
 80104f8:	106d      	asrs	r5, r5, #1
 80104fa:	429d      	cmp	r5, r3
 80104fc:	bf38      	it	cc
 80104fe:	461d      	movcc	r5, r3
 8010500:	0553      	lsls	r3, r2, #21
 8010502:	d531      	bpl.n	8010568 <__ssputs_r+0xa0>
 8010504:	4629      	mov	r1, r5
 8010506:	f7ff ff6b 	bl	80103e0 <_malloc_r>
 801050a:	4606      	mov	r6, r0
 801050c:	b950      	cbnz	r0, 8010524 <__ssputs_r+0x5c>
 801050e:	230c      	movs	r3, #12
 8010510:	f8ca 3000 	str.w	r3, [sl]
 8010514:	89a3      	ldrh	r3, [r4, #12]
 8010516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801051a:	81a3      	strh	r3, [r4, #12]
 801051c:	f04f 30ff 	mov.w	r0, #4294967295
 8010520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010524:	6921      	ldr	r1, [r4, #16]
 8010526:	464a      	mov	r2, r9
 8010528:	f7fb fc3a 	bl	800bda0 <memcpy>
 801052c:	89a3      	ldrh	r3, [r4, #12]
 801052e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010536:	81a3      	strh	r3, [r4, #12]
 8010538:	6126      	str	r6, [r4, #16]
 801053a:	6165      	str	r5, [r4, #20]
 801053c:	444e      	add	r6, r9
 801053e:	eba5 0509 	sub.w	r5, r5, r9
 8010542:	6026      	str	r6, [r4, #0]
 8010544:	60a5      	str	r5, [r4, #8]
 8010546:	463e      	mov	r6, r7
 8010548:	42be      	cmp	r6, r7
 801054a:	d900      	bls.n	801054e <__ssputs_r+0x86>
 801054c:	463e      	mov	r6, r7
 801054e:	6820      	ldr	r0, [r4, #0]
 8010550:	4632      	mov	r2, r6
 8010552:	4641      	mov	r1, r8
 8010554:	f000 feeb 	bl	801132e <memmove>
 8010558:	68a3      	ldr	r3, [r4, #8]
 801055a:	1b9b      	subs	r3, r3, r6
 801055c:	60a3      	str	r3, [r4, #8]
 801055e:	6823      	ldr	r3, [r4, #0]
 8010560:	4433      	add	r3, r6
 8010562:	6023      	str	r3, [r4, #0]
 8010564:	2000      	movs	r0, #0
 8010566:	e7db      	b.n	8010520 <__ssputs_r+0x58>
 8010568:	462a      	mov	r2, r5
 801056a:	f000 ff07 	bl	801137c <_realloc_r>
 801056e:	4606      	mov	r6, r0
 8010570:	2800      	cmp	r0, #0
 8010572:	d1e1      	bne.n	8010538 <__ssputs_r+0x70>
 8010574:	6921      	ldr	r1, [r4, #16]
 8010576:	4650      	mov	r0, sl
 8010578:	f7ff fec6 	bl	8010308 <_free_r>
 801057c:	e7c7      	b.n	801050e <__ssputs_r+0x46>
	...

08010580 <_svfiprintf_r>:
 8010580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010584:	4698      	mov	r8, r3
 8010586:	898b      	ldrh	r3, [r1, #12]
 8010588:	061b      	lsls	r3, r3, #24
 801058a:	b09d      	sub	sp, #116	; 0x74
 801058c:	4607      	mov	r7, r0
 801058e:	460d      	mov	r5, r1
 8010590:	4614      	mov	r4, r2
 8010592:	d50e      	bpl.n	80105b2 <_svfiprintf_r+0x32>
 8010594:	690b      	ldr	r3, [r1, #16]
 8010596:	b963      	cbnz	r3, 80105b2 <_svfiprintf_r+0x32>
 8010598:	2140      	movs	r1, #64	; 0x40
 801059a:	f7ff ff21 	bl	80103e0 <_malloc_r>
 801059e:	6028      	str	r0, [r5, #0]
 80105a0:	6128      	str	r0, [r5, #16]
 80105a2:	b920      	cbnz	r0, 80105ae <_svfiprintf_r+0x2e>
 80105a4:	230c      	movs	r3, #12
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ac:	e0d1      	b.n	8010752 <_svfiprintf_r+0x1d2>
 80105ae:	2340      	movs	r3, #64	; 0x40
 80105b0:	616b      	str	r3, [r5, #20]
 80105b2:	2300      	movs	r3, #0
 80105b4:	9309      	str	r3, [sp, #36]	; 0x24
 80105b6:	2320      	movs	r3, #32
 80105b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80105c0:	2330      	movs	r3, #48	; 0x30
 80105c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801076c <_svfiprintf_r+0x1ec>
 80105c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ca:	f04f 0901 	mov.w	r9, #1
 80105ce:	4623      	mov	r3, r4
 80105d0:	469a      	mov	sl, r3
 80105d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105d6:	b10a      	cbz	r2, 80105dc <_svfiprintf_r+0x5c>
 80105d8:	2a25      	cmp	r2, #37	; 0x25
 80105da:	d1f9      	bne.n	80105d0 <_svfiprintf_r+0x50>
 80105dc:	ebba 0b04 	subs.w	fp, sl, r4
 80105e0:	d00b      	beq.n	80105fa <_svfiprintf_r+0x7a>
 80105e2:	465b      	mov	r3, fp
 80105e4:	4622      	mov	r2, r4
 80105e6:	4629      	mov	r1, r5
 80105e8:	4638      	mov	r0, r7
 80105ea:	f7ff ff6d 	bl	80104c8 <__ssputs_r>
 80105ee:	3001      	adds	r0, #1
 80105f0:	f000 80aa 	beq.w	8010748 <_svfiprintf_r+0x1c8>
 80105f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105f6:	445a      	add	r2, fp
 80105f8:	9209      	str	r2, [sp, #36]	; 0x24
 80105fa:	f89a 3000 	ldrb.w	r3, [sl]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 80a2 	beq.w	8010748 <_svfiprintf_r+0x1c8>
 8010604:	2300      	movs	r3, #0
 8010606:	f04f 32ff 	mov.w	r2, #4294967295
 801060a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801060e:	f10a 0a01 	add.w	sl, sl, #1
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	9307      	str	r3, [sp, #28]
 8010616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801061a:	931a      	str	r3, [sp, #104]	; 0x68
 801061c:	4654      	mov	r4, sl
 801061e:	2205      	movs	r2, #5
 8010620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010624:	4851      	ldr	r0, [pc, #324]	; (801076c <_svfiprintf_r+0x1ec>)
 8010626:	f7ef fdeb 	bl	8000200 <memchr>
 801062a:	9a04      	ldr	r2, [sp, #16]
 801062c:	b9d8      	cbnz	r0, 8010666 <_svfiprintf_r+0xe6>
 801062e:	06d0      	lsls	r0, r2, #27
 8010630:	bf44      	itt	mi
 8010632:	2320      	movmi	r3, #32
 8010634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010638:	0711      	lsls	r1, r2, #28
 801063a:	bf44      	itt	mi
 801063c:	232b      	movmi	r3, #43	; 0x2b
 801063e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010642:	f89a 3000 	ldrb.w	r3, [sl]
 8010646:	2b2a      	cmp	r3, #42	; 0x2a
 8010648:	d015      	beq.n	8010676 <_svfiprintf_r+0xf6>
 801064a:	9a07      	ldr	r2, [sp, #28]
 801064c:	4654      	mov	r4, sl
 801064e:	2000      	movs	r0, #0
 8010650:	f04f 0c0a 	mov.w	ip, #10
 8010654:	4621      	mov	r1, r4
 8010656:	f811 3b01 	ldrb.w	r3, [r1], #1
 801065a:	3b30      	subs	r3, #48	; 0x30
 801065c:	2b09      	cmp	r3, #9
 801065e:	d94e      	bls.n	80106fe <_svfiprintf_r+0x17e>
 8010660:	b1b0      	cbz	r0, 8010690 <_svfiprintf_r+0x110>
 8010662:	9207      	str	r2, [sp, #28]
 8010664:	e014      	b.n	8010690 <_svfiprintf_r+0x110>
 8010666:	eba0 0308 	sub.w	r3, r0, r8
 801066a:	fa09 f303 	lsl.w	r3, r9, r3
 801066e:	4313      	orrs	r3, r2
 8010670:	9304      	str	r3, [sp, #16]
 8010672:	46a2      	mov	sl, r4
 8010674:	e7d2      	b.n	801061c <_svfiprintf_r+0x9c>
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	1d19      	adds	r1, r3, #4
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	9103      	str	r1, [sp, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	bfbb      	ittet	lt
 8010682:	425b      	neglt	r3, r3
 8010684:	f042 0202 	orrlt.w	r2, r2, #2
 8010688:	9307      	strge	r3, [sp, #28]
 801068a:	9307      	strlt	r3, [sp, #28]
 801068c:	bfb8      	it	lt
 801068e:	9204      	strlt	r2, [sp, #16]
 8010690:	7823      	ldrb	r3, [r4, #0]
 8010692:	2b2e      	cmp	r3, #46	; 0x2e
 8010694:	d10c      	bne.n	80106b0 <_svfiprintf_r+0x130>
 8010696:	7863      	ldrb	r3, [r4, #1]
 8010698:	2b2a      	cmp	r3, #42	; 0x2a
 801069a:	d135      	bne.n	8010708 <_svfiprintf_r+0x188>
 801069c:	9b03      	ldr	r3, [sp, #12]
 801069e:	1d1a      	adds	r2, r3, #4
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	9203      	str	r2, [sp, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	bfb8      	it	lt
 80106a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80106ac:	3402      	adds	r4, #2
 80106ae:	9305      	str	r3, [sp, #20]
 80106b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801077c <_svfiprintf_r+0x1fc>
 80106b4:	7821      	ldrb	r1, [r4, #0]
 80106b6:	2203      	movs	r2, #3
 80106b8:	4650      	mov	r0, sl
 80106ba:	f7ef fda1 	bl	8000200 <memchr>
 80106be:	b140      	cbz	r0, 80106d2 <_svfiprintf_r+0x152>
 80106c0:	2340      	movs	r3, #64	; 0x40
 80106c2:	eba0 000a 	sub.w	r0, r0, sl
 80106c6:	fa03 f000 	lsl.w	r0, r3, r0
 80106ca:	9b04      	ldr	r3, [sp, #16]
 80106cc:	4303      	orrs	r3, r0
 80106ce:	3401      	adds	r4, #1
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106d6:	4826      	ldr	r0, [pc, #152]	; (8010770 <_svfiprintf_r+0x1f0>)
 80106d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106dc:	2206      	movs	r2, #6
 80106de:	f7ef fd8f 	bl	8000200 <memchr>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d038      	beq.n	8010758 <_svfiprintf_r+0x1d8>
 80106e6:	4b23      	ldr	r3, [pc, #140]	; (8010774 <_svfiprintf_r+0x1f4>)
 80106e8:	bb1b      	cbnz	r3, 8010732 <_svfiprintf_r+0x1b2>
 80106ea:	9b03      	ldr	r3, [sp, #12]
 80106ec:	3307      	adds	r3, #7
 80106ee:	f023 0307 	bic.w	r3, r3, #7
 80106f2:	3308      	adds	r3, #8
 80106f4:	9303      	str	r3, [sp, #12]
 80106f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f8:	4433      	add	r3, r6
 80106fa:	9309      	str	r3, [sp, #36]	; 0x24
 80106fc:	e767      	b.n	80105ce <_svfiprintf_r+0x4e>
 80106fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010702:	460c      	mov	r4, r1
 8010704:	2001      	movs	r0, #1
 8010706:	e7a5      	b.n	8010654 <_svfiprintf_r+0xd4>
 8010708:	2300      	movs	r3, #0
 801070a:	3401      	adds	r4, #1
 801070c:	9305      	str	r3, [sp, #20]
 801070e:	4619      	mov	r1, r3
 8010710:	f04f 0c0a 	mov.w	ip, #10
 8010714:	4620      	mov	r0, r4
 8010716:	f810 2b01 	ldrb.w	r2, [r0], #1
 801071a:	3a30      	subs	r2, #48	; 0x30
 801071c:	2a09      	cmp	r2, #9
 801071e:	d903      	bls.n	8010728 <_svfiprintf_r+0x1a8>
 8010720:	2b00      	cmp	r3, #0
 8010722:	d0c5      	beq.n	80106b0 <_svfiprintf_r+0x130>
 8010724:	9105      	str	r1, [sp, #20]
 8010726:	e7c3      	b.n	80106b0 <_svfiprintf_r+0x130>
 8010728:	fb0c 2101 	mla	r1, ip, r1, r2
 801072c:	4604      	mov	r4, r0
 801072e:	2301      	movs	r3, #1
 8010730:	e7f0      	b.n	8010714 <_svfiprintf_r+0x194>
 8010732:	ab03      	add	r3, sp, #12
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	462a      	mov	r2, r5
 8010738:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <_svfiprintf_r+0x1f8>)
 801073a:	a904      	add	r1, sp, #16
 801073c:	4638      	mov	r0, r7
 801073e:	f7fb fe57 	bl	800c3f0 <_printf_float>
 8010742:	1c42      	adds	r2, r0, #1
 8010744:	4606      	mov	r6, r0
 8010746:	d1d6      	bne.n	80106f6 <_svfiprintf_r+0x176>
 8010748:	89ab      	ldrh	r3, [r5, #12]
 801074a:	065b      	lsls	r3, r3, #25
 801074c:	f53f af2c 	bmi.w	80105a8 <_svfiprintf_r+0x28>
 8010750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010752:	b01d      	add	sp, #116	; 0x74
 8010754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010758:	ab03      	add	r3, sp, #12
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	462a      	mov	r2, r5
 801075e:	4b06      	ldr	r3, [pc, #24]	; (8010778 <_svfiprintf_r+0x1f8>)
 8010760:	a904      	add	r1, sp, #16
 8010762:	4638      	mov	r0, r7
 8010764:	f7fc f8e8 	bl	800c938 <_printf_i>
 8010768:	e7eb      	b.n	8010742 <_svfiprintf_r+0x1c2>
 801076a:	bf00      	nop
 801076c:	0801216c 	.word	0x0801216c
 8010770:	08012176 	.word	0x08012176
 8010774:	0800c3f1 	.word	0x0800c3f1
 8010778:	080104c9 	.word	0x080104c9
 801077c:	08012172 	.word	0x08012172

08010780 <_sungetc_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	1c4b      	adds	r3, r1, #1
 8010784:	4614      	mov	r4, r2
 8010786:	d103      	bne.n	8010790 <_sungetc_r+0x10>
 8010788:	f04f 35ff 	mov.w	r5, #4294967295
 801078c:	4628      	mov	r0, r5
 801078e:	bd38      	pop	{r3, r4, r5, pc}
 8010790:	8993      	ldrh	r3, [r2, #12]
 8010792:	f023 0320 	bic.w	r3, r3, #32
 8010796:	8193      	strh	r3, [r2, #12]
 8010798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801079a:	6852      	ldr	r2, [r2, #4]
 801079c:	b2cd      	uxtb	r5, r1
 801079e:	b18b      	cbz	r3, 80107c4 <_sungetc_r+0x44>
 80107a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80107a2:	4293      	cmp	r3, r2
 80107a4:	dd08      	ble.n	80107b8 <_sungetc_r+0x38>
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	1e5a      	subs	r2, r3, #1
 80107aa:	6022      	str	r2, [r4, #0]
 80107ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	3301      	adds	r3, #1
 80107b4:	6063      	str	r3, [r4, #4]
 80107b6:	e7e9      	b.n	801078c <_sungetc_r+0xc>
 80107b8:	4621      	mov	r1, r4
 80107ba:	f000 fb7d 	bl	8010eb8 <__submore>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d0f1      	beq.n	80107a6 <_sungetc_r+0x26>
 80107c2:	e7e1      	b.n	8010788 <_sungetc_r+0x8>
 80107c4:	6921      	ldr	r1, [r4, #16]
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	b151      	cbz	r1, 80107e0 <_sungetc_r+0x60>
 80107ca:	4299      	cmp	r1, r3
 80107cc:	d208      	bcs.n	80107e0 <_sungetc_r+0x60>
 80107ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80107d2:	42a9      	cmp	r1, r5
 80107d4:	d104      	bne.n	80107e0 <_sungetc_r+0x60>
 80107d6:	3b01      	subs	r3, #1
 80107d8:	3201      	adds	r2, #1
 80107da:	6023      	str	r3, [r4, #0]
 80107dc:	6062      	str	r2, [r4, #4]
 80107de:	e7d5      	b.n	801078c <_sungetc_r+0xc>
 80107e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80107e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107e8:	6363      	str	r3, [r4, #52]	; 0x34
 80107ea:	2303      	movs	r3, #3
 80107ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80107ee:	4623      	mov	r3, r4
 80107f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	2301      	movs	r3, #1
 80107f8:	e7dc      	b.n	80107b4 <_sungetc_r+0x34>

080107fa <__ssrefill_r>:
 80107fa:	b510      	push	{r4, lr}
 80107fc:	460c      	mov	r4, r1
 80107fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010800:	b169      	cbz	r1, 801081e <__ssrefill_r+0x24>
 8010802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010806:	4299      	cmp	r1, r3
 8010808:	d001      	beq.n	801080e <__ssrefill_r+0x14>
 801080a:	f7ff fd7d 	bl	8010308 <_free_r>
 801080e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010810:	6063      	str	r3, [r4, #4]
 8010812:	2000      	movs	r0, #0
 8010814:	6360      	str	r0, [r4, #52]	; 0x34
 8010816:	b113      	cbz	r3, 801081e <__ssrefill_r+0x24>
 8010818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	bd10      	pop	{r4, pc}
 801081e:	6923      	ldr	r3, [r4, #16]
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	2300      	movs	r3, #0
 8010824:	6063      	str	r3, [r4, #4]
 8010826:	89a3      	ldrh	r3, [r4, #12]
 8010828:	f043 0320 	orr.w	r3, r3, #32
 801082c:	81a3      	strh	r3, [r4, #12]
 801082e:	f04f 30ff 	mov.w	r0, #4294967295
 8010832:	e7f3      	b.n	801081c <__ssrefill_r+0x22>

08010834 <__ssvfiscanf_r>:
 8010834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	460c      	mov	r4, r1
 801083a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801083e:	2100      	movs	r1, #0
 8010840:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010844:	49a6      	ldr	r1, [pc, #664]	; (8010ae0 <__ssvfiscanf_r+0x2ac>)
 8010846:	91a0      	str	r1, [sp, #640]	; 0x280
 8010848:	f10d 0804 	add.w	r8, sp, #4
 801084c:	49a5      	ldr	r1, [pc, #660]	; (8010ae4 <__ssvfiscanf_r+0x2b0>)
 801084e:	4fa6      	ldr	r7, [pc, #664]	; (8010ae8 <__ssvfiscanf_r+0x2b4>)
 8010850:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010aec <__ssvfiscanf_r+0x2b8>
 8010854:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010858:	4606      	mov	r6, r0
 801085a:	91a1      	str	r1, [sp, #644]	; 0x284
 801085c:	9300      	str	r3, [sp, #0]
 801085e:	7813      	ldrb	r3, [r2, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 815a 	beq.w	8010b1a <__ssvfiscanf_r+0x2e6>
 8010866:	5dd9      	ldrb	r1, [r3, r7]
 8010868:	f011 0108 	ands.w	r1, r1, #8
 801086c:	f102 0501 	add.w	r5, r2, #1
 8010870:	d019      	beq.n	80108a6 <__ssvfiscanf_r+0x72>
 8010872:	6863      	ldr	r3, [r4, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	dd0f      	ble.n	8010898 <__ssvfiscanf_r+0x64>
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	781a      	ldrb	r2, [r3, #0]
 801087c:	5cba      	ldrb	r2, [r7, r2]
 801087e:	0712      	lsls	r2, r2, #28
 8010880:	d401      	bmi.n	8010886 <__ssvfiscanf_r+0x52>
 8010882:	462a      	mov	r2, r5
 8010884:	e7eb      	b.n	801085e <__ssvfiscanf_r+0x2a>
 8010886:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010888:	3201      	adds	r2, #1
 801088a:	9245      	str	r2, [sp, #276]	; 0x114
 801088c:	6862      	ldr	r2, [r4, #4]
 801088e:	3301      	adds	r3, #1
 8010890:	3a01      	subs	r2, #1
 8010892:	6062      	str	r2, [r4, #4]
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	e7ec      	b.n	8010872 <__ssvfiscanf_r+0x3e>
 8010898:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801089a:	4621      	mov	r1, r4
 801089c:	4630      	mov	r0, r6
 801089e:	4798      	blx	r3
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d0e9      	beq.n	8010878 <__ssvfiscanf_r+0x44>
 80108a4:	e7ed      	b.n	8010882 <__ssvfiscanf_r+0x4e>
 80108a6:	2b25      	cmp	r3, #37	; 0x25
 80108a8:	d012      	beq.n	80108d0 <__ssvfiscanf_r+0x9c>
 80108aa:	469a      	mov	sl, r3
 80108ac:	6863      	ldr	r3, [r4, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f340 8091 	ble.w	80109d6 <__ssvfiscanf_r+0x1a2>
 80108b4:	6822      	ldr	r2, [r4, #0]
 80108b6:	7813      	ldrb	r3, [r2, #0]
 80108b8:	4553      	cmp	r3, sl
 80108ba:	f040 812e 	bne.w	8010b1a <__ssvfiscanf_r+0x2e6>
 80108be:	6863      	ldr	r3, [r4, #4]
 80108c0:	3b01      	subs	r3, #1
 80108c2:	6063      	str	r3, [r4, #4]
 80108c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80108c6:	3201      	adds	r2, #1
 80108c8:	3301      	adds	r3, #1
 80108ca:	6022      	str	r2, [r4, #0]
 80108cc:	9345      	str	r3, [sp, #276]	; 0x114
 80108ce:	e7d8      	b.n	8010882 <__ssvfiscanf_r+0x4e>
 80108d0:	9141      	str	r1, [sp, #260]	; 0x104
 80108d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80108d4:	7853      	ldrb	r3, [r2, #1]
 80108d6:	2b2a      	cmp	r3, #42	; 0x2a
 80108d8:	bf02      	ittt	eq
 80108da:	2310      	moveq	r3, #16
 80108dc:	1c95      	addeq	r5, r2, #2
 80108de:	9341      	streq	r3, [sp, #260]	; 0x104
 80108e0:	220a      	movs	r2, #10
 80108e2:	46aa      	mov	sl, r5
 80108e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80108e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80108ec:	2b09      	cmp	r3, #9
 80108ee:	d91d      	bls.n	801092c <__ssvfiscanf_r+0xf8>
 80108f0:	487e      	ldr	r0, [pc, #504]	; (8010aec <__ssvfiscanf_r+0x2b8>)
 80108f2:	2203      	movs	r2, #3
 80108f4:	f7ef fc84 	bl	8000200 <memchr>
 80108f8:	b140      	cbz	r0, 801090c <__ssvfiscanf_r+0xd8>
 80108fa:	2301      	movs	r3, #1
 80108fc:	eba0 0009 	sub.w	r0, r0, r9
 8010900:	fa03 f000 	lsl.w	r0, r3, r0
 8010904:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010906:	4318      	orrs	r0, r3
 8010908:	9041      	str	r0, [sp, #260]	; 0x104
 801090a:	4655      	mov	r5, sl
 801090c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010910:	2b78      	cmp	r3, #120	; 0x78
 8010912:	d806      	bhi.n	8010922 <__ssvfiscanf_r+0xee>
 8010914:	2b57      	cmp	r3, #87	; 0x57
 8010916:	d810      	bhi.n	801093a <__ssvfiscanf_r+0x106>
 8010918:	2b25      	cmp	r3, #37	; 0x25
 801091a:	d0c6      	beq.n	80108aa <__ssvfiscanf_r+0x76>
 801091c:	d856      	bhi.n	80109cc <__ssvfiscanf_r+0x198>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d064      	beq.n	80109ec <__ssvfiscanf_r+0x1b8>
 8010922:	2303      	movs	r3, #3
 8010924:	9347      	str	r3, [sp, #284]	; 0x11c
 8010926:	230a      	movs	r3, #10
 8010928:	9342      	str	r3, [sp, #264]	; 0x108
 801092a:	e071      	b.n	8010a10 <__ssvfiscanf_r+0x1dc>
 801092c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801092e:	fb02 1103 	mla	r1, r2, r3, r1
 8010932:	3930      	subs	r1, #48	; 0x30
 8010934:	9143      	str	r1, [sp, #268]	; 0x10c
 8010936:	4655      	mov	r5, sl
 8010938:	e7d3      	b.n	80108e2 <__ssvfiscanf_r+0xae>
 801093a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801093e:	2a20      	cmp	r2, #32
 8010940:	d8ef      	bhi.n	8010922 <__ssvfiscanf_r+0xee>
 8010942:	a101      	add	r1, pc, #4	; (adr r1, 8010948 <__ssvfiscanf_r+0x114>)
 8010944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010948:	080109fb 	.word	0x080109fb
 801094c:	08010923 	.word	0x08010923
 8010950:	08010923 	.word	0x08010923
 8010954:	08010a59 	.word	0x08010a59
 8010958:	08010923 	.word	0x08010923
 801095c:	08010923 	.word	0x08010923
 8010960:	08010923 	.word	0x08010923
 8010964:	08010923 	.word	0x08010923
 8010968:	08010923 	.word	0x08010923
 801096c:	08010923 	.word	0x08010923
 8010970:	08010923 	.word	0x08010923
 8010974:	08010a6f 	.word	0x08010a6f
 8010978:	08010a45 	.word	0x08010a45
 801097c:	080109d3 	.word	0x080109d3
 8010980:	080109d3 	.word	0x080109d3
 8010984:	080109d3 	.word	0x080109d3
 8010988:	08010923 	.word	0x08010923
 801098c:	08010a49 	.word	0x08010a49
 8010990:	08010923 	.word	0x08010923
 8010994:	08010923 	.word	0x08010923
 8010998:	08010923 	.word	0x08010923
 801099c:	08010923 	.word	0x08010923
 80109a0:	08010a7f 	.word	0x08010a7f
 80109a4:	08010a51 	.word	0x08010a51
 80109a8:	080109f3 	.word	0x080109f3
 80109ac:	08010923 	.word	0x08010923
 80109b0:	08010923 	.word	0x08010923
 80109b4:	08010a7b 	.word	0x08010a7b
 80109b8:	08010923 	.word	0x08010923
 80109bc:	08010a45 	.word	0x08010a45
 80109c0:	08010923 	.word	0x08010923
 80109c4:	08010923 	.word	0x08010923
 80109c8:	080109fb 	.word	0x080109fb
 80109cc:	3b45      	subs	r3, #69	; 0x45
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d8a7      	bhi.n	8010922 <__ssvfiscanf_r+0xee>
 80109d2:	2305      	movs	r3, #5
 80109d4:	e01b      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 80109d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80109d8:	4621      	mov	r1, r4
 80109da:	4630      	mov	r0, r6
 80109dc:	4798      	blx	r3
 80109de:	2800      	cmp	r0, #0
 80109e0:	f43f af68 	beq.w	80108b4 <__ssvfiscanf_r+0x80>
 80109e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80109e6:	2800      	cmp	r0, #0
 80109e8:	f040 808d 	bne.w	8010b06 <__ssvfiscanf_r+0x2d2>
 80109ec:	f04f 30ff 	mov.w	r0, #4294967295
 80109f0:	e08f      	b.n	8010b12 <__ssvfiscanf_r+0x2de>
 80109f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80109f4:	f042 0220 	orr.w	r2, r2, #32
 80109f8:	9241      	str	r2, [sp, #260]	; 0x104
 80109fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80109fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a00:	9241      	str	r2, [sp, #260]	; 0x104
 8010a02:	2210      	movs	r2, #16
 8010a04:	2b6f      	cmp	r3, #111	; 0x6f
 8010a06:	9242      	str	r2, [sp, #264]	; 0x108
 8010a08:	bf34      	ite	cc
 8010a0a:	2303      	movcc	r3, #3
 8010a0c:	2304      	movcs	r3, #4
 8010a0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010a10:	6863      	ldr	r3, [r4, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	dd42      	ble.n	8010a9c <__ssvfiscanf_r+0x268>
 8010a16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010a18:	0659      	lsls	r1, r3, #25
 8010a1a:	d404      	bmi.n	8010a26 <__ssvfiscanf_r+0x1f2>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	781a      	ldrb	r2, [r3, #0]
 8010a20:	5cba      	ldrb	r2, [r7, r2]
 8010a22:	0712      	lsls	r2, r2, #28
 8010a24:	d441      	bmi.n	8010aaa <__ssvfiscanf_r+0x276>
 8010a26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	dc50      	bgt.n	8010ace <__ssvfiscanf_r+0x29a>
 8010a2c:	466b      	mov	r3, sp
 8010a2e:	4622      	mov	r2, r4
 8010a30:	a941      	add	r1, sp, #260	; 0x104
 8010a32:	4630      	mov	r0, r6
 8010a34:	f000 f876 	bl	8010b24 <_scanf_chars>
 8010a38:	2801      	cmp	r0, #1
 8010a3a:	d06e      	beq.n	8010b1a <__ssvfiscanf_r+0x2e6>
 8010a3c:	2802      	cmp	r0, #2
 8010a3e:	f47f af20 	bne.w	8010882 <__ssvfiscanf_r+0x4e>
 8010a42:	e7cf      	b.n	80109e4 <__ssvfiscanf_r+0x1b0>
 8010a44:	220a      	movs	r2, #10
 8010a46:	e7dd      	b.n	8010a04 <__ssvfiscanf_r+0x1d0>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	9342      	str	r3, [sp, #264]	; 0x108
 8010a4c:	2303      	movs	r3, #3
 8010a4e:	e7de      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 8010a50:	2308      	movs	r3, #8
 8010a52:	9342      	str	r3, [sp, #264]	; 0x108
 8010a54:	2304      	movs	r3, #4
 8010a56:	e7da      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	f000 f9e0 	bl	8010e20 <__sccl>
 8010a60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a66:	9341      	str	r3, [sp, #260]	; 0x104
 8010a68:	4605      	mov	r5, r0
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e7cf      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 8010a6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a74:	9341      	str	r3, [sp, #260]	; 0x104
 8010a76:	2300      	movs	r3, #0
 8010a78:	e7c9      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	e7c7      	b.n	8010a0e <__ssvfiscanf_r+0x1da>
 8010a7e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010a80:	06c3      	lsls	r3, r0, #27
 8010a82:	f53f aefe 	bmi.w	8010882 <__ssvfiscanf_r+0x4e>
 8010a86:	9b00      	ldr	r3, [sp, #0]
 8010a88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010a8a:	1d19      	adds	r1, r3, #4
 8010a8c:	9100      	str	r1, [sp, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f010 0f01 	tst.w	r0, #1
 8010a94:	bf14      	ite	ne
 8010a96:	801a      	strhne	r2, [r3, #0]
 8010a98:	601a      	streq	r2, [r3, #0]
 8010a9a:	e6f2      	b.n	8010882 <__ssvfiscanf_r+0x4e>
 8010a9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	4798      	blx	r3
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d0b6      	beq.n	8010a16 <__ssvfiscanf_r+0x1e2>
 8010aa8:	e79c      	b.n	80109e4 <__ssvfiscanf_r+0x1b0>
 8010aaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010aac:	3201      	adds	r2, #1
 8010aae:	9245      	str	r2, [sp, #276]	; 0x114
 8010ab0:	6862      	ldr	r2, [r4, #4]
 8010ab2:	3a01      	subs	r2, #1
 8010ab4:	2a00      	cmp	r2, #0
 8010ab6:	6062      	str	r2, [r4, #4]
 8010ab8:	dd02      	ble.n	8010ac0 <__ssvfiscanf_r+0x28c>
 8010aba:	3301      	adds	r3, #1
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	e7ad      	b.n	8010a1c <__ssvfiscanf_r+0x1e8>
 8010ac0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	4798      	blx	r3
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d0a7      	beq.n	8010a1c <__ssvfiscanf_r+0x1e8>
 8010acc:	e78a      	b.n	80109e4 <__ssvfiscanf_r+0x1b0>
 8010ace:	2b04      	cmp	r3, #4
 8010ad0:	dc0e      	bgt.n	8010af0 <__ssvfiscanf_r+0x2bc>
 8010ad2:	466b      	mov	r3, sp
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	a941      	add	r1, sp, #260	; 0x104
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f000 f87d 	bl	8010bd8 <_scanf_i>
 8010ade:	e7ab      	b.n	8010a38 <__ssvfiscanf_r+0x204>
 8010ae0:	08010781 	.word	0x08010781
 8010ae4:	080107fb 	.word	0x080107fb
 8010ae8:	08011da5 	.word	0x08011da5
 8010aec:	08012172 	.word	0x08012172
 8010af0:	4b0b      	ldr	r3, [pc, #44]	; (8010b20 <__ssvfiscanf_r+0x2ec>)
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f43f aec5 	beq.w	8010882 <__ssvfiscanf_r+0x4e>
 8010af8:	466b      	mov	r3, sp
 8010afa:	4622      	mov	r2, r4
 8010afc:	a941      	add	r1, sp, #260	; 0x104
 8010afe:	4630      	mov	r0, r6
 8010b00:	f7fc f840 	bl	800cb84 <_scanf_float>
 8010b04:	e798      	b.n	8010a38 <__ssvfiscanf_r+0x204>
 8010b06:	89a3      	ldrh	r3, [r4, #12]
 8010b08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010b0c:	bf18      	it	ne
 8010b0e:	f04f 30ff 	movne.w	r0, #4294967295
 8010b12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010b1c:	e7f9      	b.n	8010b12 <__ssvfiscanf_r+0x2de>
 8010b1e:	bf00      	nop
 8010b20:	0800cb85 	.word	0x0800cb85

08010b24 <_scanf_chars>:
 8010b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b28:	4615      	mov	r5, r2
 8010b2a:	688a      	ldr	r2, [r1, #8]
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	460c      	mov	r4, r1
 8010b30:	b932      	cbnz	r2, 8010b40 <_scanf_chars+0x1c>
 8010b32:	698a      	ldr	r2, [r1, #24]
 8010b34:	2a00      	cmp	r2, #0
 8010b36:	bf0c      	ite	eq
 8010b38:	2201      	moveq	r2, #1
 8010b3a:	f04f 32ff 	movne.w	r2, #4294967295
 8010b3e:	608a      	str	r2, [r1, #8]
 8010b40:	6822      	ldr	r2, [r4, #0]
 8010b42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010bd4 <_scanf_chars+0xb0>
 8010b46:	06d1      	lsls	r1, r2, #27
 8010b48:	bf5f      	itttt	pl
 8010b4a:	681a      	ldrpl	r2, [r3, #0]
 8010b4c:	1d11      	addpl	r1, r2, #4
 8010b4e:	6019      	strpl	r1, [r3, #0]
 8010b50:	6816      	ldrpl	r6, [r2, #0]
 8010b52:	2700      	movs	r7, #0
 8010b54:	69a0      	ldr	r0, [r4, #24]
 8010b56:	b188      	cbz	r0, 8010b7c <_scanf_chars+0x58>
 8010b58:	2801      	cmp	r0, #1
 8010b5a:	d107      	bne.n	8010b6c <_scanf_chars+0x48>
 8010b5c:	682a      	ldr	r2, [r5, #0]
 8010b5e:	7811      	ldrb	r1, [r2, #0]
 8010b60:	6962      	ldr	r2, [r4, #20]
 8010b62:	5c52      	ldrb	r2, [r2, r1]
 8010b64:	b952      	cbnz	r2, 8010b7c <_scanf_chars+0x58>
 8010b66:	2f00      	cmp	r7, #0
 8010b68:	d031      	beq.n	8010bce <_scanf_chars+0xaa>
 8010b6a:	e022      	b.n	8010bb2 <_scanf_chars+0x8e>
 8010b6c:	2802      	cmp	r0, #2
 8010b6e:	d120      	bne.n	8010bb2 <_scanf_chars+0x8e>
 8010b70:	682b      	ldr	r3, [r5, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010b78:	071b      	lsls	r3, r3, #28
 8010b7a:	d41a      	bmi.n	8010bb2 <_scanf_chars+0x8e>
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	06da      	lsls	r2, r3, #27
 8010b80:	bf5e      	ittt	pl
 8010b82:	682b      	ldrpl	r3, [r5, #0]
 8010b84:	781b      	ldrbpl	r3, [r3, #0]
 8010b86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010b8a:	682a      	ldr	r2, [r5, #0]
 8010b8c:	686b      	ldr	r3, [r5, #4]
 8010b8e:	3201      	adds	r2, #1
 8010b90:	602a      	str	r2, [r5, #0]
 8010b92:	68a2      	ldr	r2, [r4, #8]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	3a01      	subs	r2, #1
 8010b98:	606b      	str	r3, [r5, #4]
 8010b9a:	3701      	adds	r7, #1
 8010b9c:	60a2      	str	r2, [r4, #8]
 8010b9e:	b142      	cbz	r2, 8010bb2 <_scanf_chars+0x8e>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dcd7      	bgt.n	8010b54 <_scanf_chars+0x30>
 8010ba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010ba8:	4629      	mov	r1, r5
 8010baa:	4640      	mov	r0, r8
 8010bac:	4798      	blx	r3
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d0d0      	beq.n	8010b54 <_scanf_chars+0x30>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	f013 0310 	ands.w	r3, r3, #16
 8010bb8:	d105      	bne.n	8010bc6 <_scanf_chars+0xa2>
 8010bba:	68e2      	ldr	r2, [r4, #12]
 8010bbc:	3201      	adds	r2, #1
 8010bbe:	60e2      	str	r2, [r4, #12]
 8010bc0:	69a2      	ldr	r2, [r4, #24]
 8010bc2:	b102      	cbz	r2, 8010bc6 <_scanf_chars+0xa2>
 8010bc4:	7033      	strb	r3, [r6, #0]
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	443b      	add	r3, r7
 8010bca:	6123      	str	r3, [r4, #16]
 8010bcc:	2000      	movs	r0, #0
 8010bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bd2:	bf00      	nop
 8010bd4:	08011da5 	.word	0x08011da5

08010bd8 <_scanf_i>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	4698      	mov	r8, r3
 8010bde:	4b76      	ldr	r3, [pc, #472]	; (8010db8 <_scanf_i+0x1e0>)
 8010be0:	460c      	mov	r4, r1
 8010be2:	4682      	mov	sl, r0
 8010be4:	4616      	mov	r6, r2
 8010be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bea:	b087      	sub	sp, #28
 8010bec:	ab03      	add	r3, sp, #12
 8010bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010bf2:	4b72      	ldr	r3, [pc, #456]	; (8010dbc <_scanf_i+0x1e4>)
 8010bf4:	69a1      	ldr	r1, [r4, #24]
 8010bf6:	4a72      	ldr	r2, [pc, #456]	; (8010dc0 <_scanf_i+0x1e8>)
 8010bf8:	2903      	cmp	r1, #3
 8010bfa:	bf18      	it	ne
 8010bfc:	461a      	movne	r2, r3
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	9201      	str	r2, [sp, #4]
 8010c02:	1e5a      	subs	r2, r3, #1
 8010c04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c08:	bf88      	it	hi
 8010c0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010c0e:	4627      	mov	r7, r4
 8010c10:	bf82      	ittt	hi
 8010c12:	eb03 0905 	addhi.w	r9, r3, r5
 8010c16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c1a:	60a3      	strhi	r3, [r4, #8]
 8010c1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010c20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010c24:	bf98      	it	ls
 8010c26:	f04f 0900 	movls.w	r9, #0
 8010c2a:	6023      	str	r3, [r4, #0]
 8010c2c:	463d      	mov	r5, r7
 8010c2e:	f04f 0b00 	mov.w	fp, #0
 8010c32:	6831      	ldr	r1, [r6, #0]
 8010c34:	ab03      	add	r3, sp, #12
 8010c36:	7809      	ldrb	r1, [r1, #0]
 8010c38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010c3c:	2202      	movs	r2, #2
 8010c3e:	f7ef fadf 	bl	8000200 <memchr>
 8010c42:	b328      	cbz	r0, 8010c90 <_scanf_i+0xb8>
 8010c44:	f1bb 0f01 	cmp.w	fp, #1
 8010c48:	d159      	bne.n	8010cfe <_scanf_i+0x126>
 8010c4a:	6862      	ldr	r2, [r4, #4]
 8010c4c:	b92a      	cbnz	r2, 8010c5a <_scanf_i+0x82>
 8010c4e:	6822      	ldr	r2, [r4, #0]
 8010c50:	2308      	movs	r3, #8
 8010c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c56:	6063      	str	r3, [r4, #4]
 8010c58:	6022      	str	r2, [r4, #0]
 8010c5a:	6822      	ldr	r2, [r4, #0]
 8010c5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010c60:	6022      	str	r2, [r4, #0]
 8010c62:	68a2      	ldr	r2, [r4, #8]
 8010c64:	1e51      	subs	r1, r2, #1
 8010c66:	60a1      	str	r1, [r4, #8]
 8010c68:	b192      	cbz	r2, 8010c90 <_scanf_i+0xb8>
 8010c6a:	6832      	ldr	r2, [r6, #0]
 8010c6c:	1c51      	adds	r1, r2, #1
 8010c6e:	6031      	str	r1, [r6, #0]
 8010c70:	7812      	ldrb	r2, [r2, #0]
 8010c72:	f805 2b01 	strb.w	r2, [r5], #1
 8010c76:	6872      	ldr	r2, [r6, #4]
 8010c78:	3a01      	subs	r2, #1
 8010c7a:	2a00      	cmp	r2, #0
 8010c7c:	6072      	str	r2, [r6, #4]
 8010c7e:	dc07      	bgt.n	8010c90 <_scanf_i+0xb8>
 8010c80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010c84:	4631      	mov	r1, r6
 8010c86:	4650      	mov	r0, sl
 8010c88:	4790      	blx	r2
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f040 8085 	bne.w	8010d9a <_scanf_i+0x1c2>
 8010c90:	f10b 0b01 	add.w	fp, fp, #1
 8010c94:	f1bb 0f03 	cmp.w	fp, #3
 8010c98:	d1cb      	bne.n	8010c32 <_scanf_i+0x5a>
 8010c9a:	6863      	ldr	r3, [r4, #4]
 8010c9c:	b90b      	cbnz	r3, 8010ca2 <_scanf_i+0xca>
 8010c9e:	230a      	movs	r3, #10
 8010ca0:	6063      	str	r3, [r4, #4]
 8010ca2:	6863      	ldr	r3, [r4, #4]
 8010ca4:	4947      	ldr	r1, [pc, #284]	; (8010dc4 <_scanf_i+0x1ec>)
 8010ca6:	6960      	ldr	r0, [r4, #20]
 8010ca8:	1ac9      	subs	r1, r1, r3
 8010caa:	f000 f8b9 	bl	8010e20 <__sccl>
 8010cae:	f04f 0b00 	mov.w	fp, #0
 8010cb2:	68a3      	ldr	r3, [r4, #8]
 8010cb4:	6822      	ldr	r2, [r4, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d03d      	beq.n	8010d36 <_scanf_i+0x15e>
 8010cba:	6831      	ldr	r1, [r6, #0]
 8010cbc:	6960      	ldr	r0, [r4, #20]
 8010cbe:	f891 c000 	ldrb.w	ip, [r1]
 8010cc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d035      	beq.n	8010d36 <_scanf_i+0x15e>
 8010cca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010cce:	d124      	bne.n	8010d1a <_scanf_i+0x142>
 8010cd0:	0510      	lsls	r0, r2, #20
 8010cd2:	d522      	bpl.n	8010d1a <_scanf_i+0x142>
 8010cd4:	f10b 0b01 	add.w	fp, fp, #1
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	d003      	beq.n	8010ce6 <_scanf_i+0x10e>
 8010cde:	3301      	adds	r3, #1
 8010ce0:	f109 39ff 	add.w	r9, r9, #4294967295
 8010ce4:	60a3      	str	r3, [r4, #8]
 8010ce6:	6873      	ldr	r3, [r6, #4]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	6073      	str	r3, [r6, #4]
 8010cee:	dd1b      	ble.n	8010d28 <_scanf_i+0x150>
 8010cf0:	6833      	ldr	r3, [r6, #0]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	6033      	str	r3, [r6, #0]
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	60a3      	str	r3, [r4, #8]
 8010cfc:	e7d9      	b.n	8010cb2 <_scanf_i+0xda>
 8010cfe:	f1bb 0f02 	cmp.w	fp, #2
 8010d02:	d1ae      	bne.n	8010c62 <_scanf_i+0x8a>
 8010d04:	6822      	ldr	r2, [r4, #0]
 8010d06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010d0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010d0e:	d1bf      	bne.n	8010c90 <_scanf_i+0xb8>
 8010d10:	2310      	movs	r3, #16
 8010d12:	6063      	str	r3, [r4, #4]
 8010d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d18:	e7a2      	b.n	8010c60 <_scanf_i+0x88>
 8010d1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010d1e:	6022      	str	r2, [r4, #0]
 8010d20:	780b      	ldrb	r3, [r1, #0]
 8010d22:	f805 3b01 	strb.w	r3, [r5], #1
 8010d26:	e7de      	b.n	8010ce6 <_scanf_i+0x10e>
 8010d28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010d2c:	4631      	mov	r1, r6
 8010d2e:	4650      	mov	r0, sl
 8010d30:	4798      	blx	r3
 8010d32:	2800      	cmp	r0, #0
 8010d34:	d0df      	beq.n	8010cf6 <_scanf_i+0x11e>
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	05db      	lsls	r3, r3, #23
 8010d3a:	d50d      	bpl.n	8010d58 <_scanf_i+0x180>
 8010d3c:	42bd      	cmp	r5, r7
 8010d3e:	d909      	bls.n	8010d54 <_scanf_i+0x17c>
 8010d40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d48:	4632      	mov	r2, r6
 8010d4a:	4650      	mov	r0, sl
 8010d4c:	4798      	blx	r3
 8010d4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010d52:	464d      	mov	r5, r9
 8010d54:	42bd      	cmp	r5, r7
 8010d56:	d02d      	beq.n	8010db4 <_scanf_i+0x1dc>
 8010d58:	6822      	ldr	r2, [r4, #0]
 8010d5a:	f012 0210 	ands.w	r2, r2, #16
 8010d5e:	d113      	bne.n	8010d88 <_scanf_i+0x1b0>
 8010d60:	702a      	strb	r2, [r5, #0]
 8010d62:	6863      	ldr	r3, [r4, #4]
 8010d64:	9e01      	ldr	r6, [sp, #4]
 8010d66:	4639      	mov	r1, r7
 8010d68:	4650      	mov	r0, sl
 8010d6a:	47b0      	blx	r6
 8010d6c:	6821      	ldr	r1, [r4, #0]
 8010d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d72:	f011 0f20 	tst.w	r1, #32
 8010d76:	d013      	beq.n	8010da0 <_scanf_i+0x1c8>
 8010d78:	1d1a      	adds	r2, r3, #4
 8010d7a:	f8c8 2000 	str.w	r2, [r8]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6018      	str	r0, [r3, #0]
 8010d82:	68e3      	ldr	r3, [r4, #12]
 8010d84:	3301      	adds	r3, #1
 8010d86:	60e3      	str	r3, [r4, #12]
 8010d88:	1bed      	subs	r5, r5, r7
 8010d8a:	44ab      	add	fp, r5
 8010d8c:	6925      	ldr	r5, [r4, #16]
 8010d8e:	445d      	add	r5, fp
 8010d90:	6125      	str	r5, [r4, #16]
 8010d92:	2000      	movs	r0, #0
 8010d94:	b007      	add	sp, #28
 8010d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9a:	f04f 0b00 	mov.w	fp, #0
 8010d9e:	e7ca      	b.n	8010d36 <_scanf_i+0x15e>
 8010da0:	1d1a      	adds	r2, r3, #4
 8010da2:	f8c8 2000 	str.w	r2, [r8]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f011 0f01 	tst.w	r1, #1
 8010dac:	bf14      	ite	ne
 8010dae:	8018      	strhne	r0, [r3, #0]
 8010db0:	6018      	streq	r0, [r3, #0]
 8010db2:	e7e6      	b.n	8010d82 <_scanf_i+0x1aa>
 8010db4:	2001      	movs	r0, #1
 8010db6:	e7ed      	b.n	8010d94 <_scanf_i+0x1bc>
 8010db8:	08011b10 	.word	0x08011b10
 8010dbc:	0800df79 	.word	0x0800df79
 8010dc0:	0800de7d 	.word	0x0800de7d
 8010dc4:	08012196 	.word	0x08012196

08010dc8 <_read_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d07      	ldr	r5, [pc, #28]	; (8010de8 <_read_r+0x20>)
 8010dcc:	4604      	mov	r4, r0
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	602a      	str	r2, [r5, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	f7f2 faac 	bl	8003334 <_read>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_read_r+0x1e>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_read_r+0x1e>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	200068c0 	.word	0x200068c0
 8010dec:	00000000 	.word	0x00000000

08010df0 <nan>:
 8010df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010df8 <nan+0x8>
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	00000000 	.word	0x00000000
 8010dfc:	7ff80000 	.word	0x7ff80000

08010e00 <_sbrk_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d06      	ldr	r5, [pc, #24]	; (8010e1c <_sbrk_r+0x1c>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4604      	mov	r4, r0
 8010e08:	4608      	mov	r0, r1
 8010e0a:	602b      	str	r3, [r5, #0]
 8010e0c:	f7f2 fb00 	bl	8003410 <_sbrk>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d102      	bne.n	8010e1a <_sbrk_r+0x1a>
 8010e14:	682b      	ldr	r3, [r5, #0]
 8010e16:	b103      	cbz	r3, 8010e1a <_sbrk_r+0x1a>
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	bd38      	pop	{r3, r4, r5, pc}
 8010e1c:	200068c0 	.word	0x200068c0

08010e20 <__sccl>:
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	780b      	ldrb	r3, [r1, #0]
 8010e24:	4604      	mov	r4, r0
 8010e26:	2b5e      	cmp	r3, #94	; 0x5e
 8010e28:	bf0b      	itete	eq
 8010e2a:	784b      	ldrbeq	r3, [r1, #1]
 8010e2c:	1c48      	addne	r0, r1, #1
 8010e2e:	1c88      	addeq	r0, r1, #2
 8010e30:	2200      	movne	r2, #0
 8010e32:	bf08      	it	eq
 8010e34:	2201      	moveq	r2, #1
 8010e36:	1e61      	subs	r1, r4, #1
 8010e38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010e3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010e40:	42a9      	cmp	r1, r5
 8010e42:	d1fb      	bne.n	8010e3c <__sccl+0x1c>
 8010e44:	b90b      	cbnz	r3, 8010e4a <__sccl+0x2a>
 8010e46:	3801      	subs	r0, #1
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
 8010e4a:	f082 0201 	eor.w	r2, r2, #1
 8010e4e:	54e2      	strb	r2, [r4, r3]
 8010e50:	4605      	mov	r5, r0
 8010e52:	4628      	mov	r0, r5
 8010e54:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010e58:	292d      	cmp	r1, #45	; 0x2d
 8010e5a:	d006      	beq.n	8010e6a <__sccl+0x4a>
 8010e5c:	295d      	cmp	r1, #93	; 0x5d
 8010e5e:	d0f3      	beq.n	8010e48 <__sccl+0x28>
 8010e60:	b909      	cbnz	r1, 8010e66 <__sccl+0x46>
 8010e62:	4628      	mov	r0, r5
 8010e64:	e7f0      	b.n	8010e48 <__sccl+0x28>
 8010e66:	460b      	mov	r3, r1
 8010e68:	e7f1      	b.n	8010e4e <__sccl+0x2e>
 8010e6a:	786e      	ldrb	r6, [r5, #1]
 8010e6c:	2e5d      	cmp	r6, #93	; 0x5d
 8010e6e:	d0fa      	beq.n	8010e66 <__sccl+0x46>
 8010e70:	42b3      	cmp	r3, r6
 8010e72:	dcf8      	bgt.n	8010e66 <__sccl+0x46>
 8010e74:	3502      	adds	r5, #2
 8010e76:	4619      	mov	r1, r3
 8010e78:	3101      	adds	r1, #1
 8010e7a:	428e      	cmp	r6, r1
 8010e7c:	5462      	strb	r2, [r4, r1]
 8010e7e:	dcfb      	bgt.n	8010e78 <__sccl+0x58>
 8010e80:	1af1      	subs	r1, r6, r3
 8010e82:	3901      	subs	r1, #1
 8010e84:	1c58      	adds	r0, r3, #1
 8010e86:	42b3      	cmp	r3, r6
 8010e88:	bfa8      	it	ge
 8010e8a:	2100      	movge	r1, #0
 8010e8c:	1843      	adds	r3, r0, r1
 8010e8e:	e7e0      	b.n	8010e52 <__sccl+0x32>

08010e90 <strncmp>:
 8010e90:	b510      	push	{r4, lr}
 8010e92:	b17a      	cbz	r2, 8010eb4 <strncmp+0x24>
 8010e94:	4603      	mov	r3, r0
 8010e96:	3901      	subs	r1, #1
 8010e98:	1884      	adds	r4, r0, r2
 8010e9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010ea2:	4290      	cmp	r0, r2
 8010ea4:	d101      	bne.n	8010eaa <strncmp+0x1a>
 8010ea6:	42a3      	cmp	r3, r4
 8010ea8:	d101      	bne.n	8010eae <strncmp+0x1e>
 8010eaa:	1a80      	subs	r0, r0, r2
 8010eac:	bd10      	pop	{r4, pc}
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d1f3      	bne.n	8010e9a <strncmp+0xa>
 8010eb2:	e7fa      	b.n	8010eaa <strncmp+0x1a>
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	e7f9      	b.n	8010eac <strncmp+0x1c>

08010eb8 <__submore>:
 8010eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ec4:	4299      	cmp	r1, r3
 8010ec6:	d11d      	bne.n	8010f04 <__submore+0x4c>
 8010ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010ecc:	f7ff fa88 	bl	80103e0 <_malloc_r>
 8010ed0:	b918      	cbnz	r0, 8010eda <__submore+0x22>
 8010ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ede:	63a3      	str	r3, [r4, #56]	; 0x38
 8010ee0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8010ee6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010eea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010eee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010ef2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010ef6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010efa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010efe:	6020      	str	r0, [r4, #0]
 8010f00:	2000      	movs	r0, #0
 8010f02:	e7e8      	b.n	8010ed6 <__submore+0x1e>
 8010f04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010f06:	0077      	lsls	r7, r6, #1
 8010f08:	463a      	mov	r2, r7
 8010f0a:	f000 fa37 	bl	801137c <_realloc_r>
 8010f0e:	4605      	mov	r5, r0
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d0de      	beq.n	8010ed2 <__submore+0x1a>
 8010f14:	eb00 0806 	add.w	r8, r0, r6
 8010f18:	4601      	mov	r1, r0
 8010f1a:	4632      	mov	r2, r6
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	f7fa ff3f 	bl	800bda0 <memcpy>
 8010f22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010f26:	f8c4 8000 	str.w	r8, [r4]
 8010f2a:	e7e9      	b.n	8010f00 <__submore+0x48>

08010f2c <__ascii_wctomb>:
 8010f2c:	b149      	cbz	r1, 8010f42 <__ascii_wctomb+0x16>
 8010f2e:	2aff      	cmp	r2, #255	; 0xff
 8010f30:	bf85      	ittet	hi
 8010f32:	238a      	movhi	r3, #138	; 0x8a
 8010f34:	6003      	strhi	r3, [r0, #0]
 8010f36:	700a      	strbls	r2, [r1, #0]
 8010f38:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f3c:	bf98      	it	ls
 8010f3e:	2001      	movls	r0, #1
 8010f40:	4770      	bx	lr
 8010f42:	4608      	mov	r0, r1
 8010f44:	4770      	bx	lr
	...

08010f48 <__assert_func>:
 8010f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f4a:	4614      	mov	r4, r2
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	4b09      	ldr	r3, [pc, #36]	; (8010f74 <__assert_func+0x2c>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4605      	mov	r5, r0
 8010f54:	68d8      	ldr	r0, [r3, #12]
 8010f56:	b14c      	cbz	r4, 8010f6c <__assert_func+0x24>
 8010f58:	4b07      	ldr	r3, [pc, #28]	; (8010f78 <__assert_func+0x30>)
 8010f5a:	9100      	str	r1, [sp, #0]
 8010f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f60:	4906      	ldr	r1, [pc, #24]	; (8010f7c <__assert_func+0x34>)
 8010f62:	462b      	mov	r3, r5
 8010f64:	f000 f9b2 	bl	80112cc <fiprintf>
 8010f68:	f000 fc50 	bl	801180c <abort>
 8010f6c:	4b04      	ldr	r3, [pc, #16]	; (8010f80 <__assert_func+0x38>)
 8010f6e:	461c      	mov	r4, r3
 8010f70:	e7f3      	b.n	8010f5a <__assert_func+0x12>
 8010f72:	bf00      	nop
 8010f74:	20000020 	.word	0x20000020
 8010f78:	08012198 	.word	0x08012198
 8010f7c:	080121a5 	.word	0x080121a5
 8010f80:	080121d3 	.word	0x080121d3

08010f84 <__env_lock>:
 8010f84:	4801      	ldr	r0, [pc, #4]	; (8010f8c <__env_lock+0x8>)
 8010f86:	f7fe bcaf 	b.w	800f8e8 <__retarget_lock_acquire_recursive>
 8010f8a:	bf00      	nop
 8010f8c:	200068b0 	.word	0x200068b0

08010f90 <__env_unlock>:
 8010f90:	4801      	ldr	r0, [pc, #4]	; (8010f98 <__env_unlock+0x8>)
 8010f92:	f7fe bcab 	b.w	800f8ec <__retarget_lock_release_recursive>
 8010f96:	bf00      	nop
 8010f98:	200068b0 	.word	0x200068b0

08010f9c <__sflush_r>:
 8010f9c:	898a      	ldrh	r2, [r1, #12]
 8010f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	0710      	lsls	r0, r2, #28
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	d458      	bmi.n	801105c <__sflush_r+0xc0>
 8010faa:	684b      	ldr	r3, [r1, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	dc05      	bgt.n	8010fbc <__sflush_r+0x20>
 8010fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	dc02      	bgt.n	8010fbc <__sflush_r+0x20>
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	d0f9      	beq.n	8010fb6 <__sflush_r+0x1a>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fc8:	682f      	ldr	r7, [r5, #0]
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	d032      	beq.n	8011034 <__sflush_r+0x98>
 8010fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	075a      	lsls	r2, r3, #29
 8010fd4:	d505      	bpl.n	8010fe2 <__sflush_r+0x46>
 8010fd6:	6863      	ldr	r3, [r4, #4]
 8010fd8:	1ac0      	subs	r0, r0, r3
 8010fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fdc:	b10b      	cbz	r3, 8010fe2 <__sflush_r+0x46>
 8010fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010fe0:	1ac0      	subs	r0, r0, r3
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fe8:	6a21      	ldr	r1, [r4, #32]
 8010fea:	4628      	mov	r0, r5
 8010fec:	47b0      	blx	r6
 8010fee:	1c43      	adds	r3, r0, #1
 8010ff0:	89a3      	ldrh	r3, [r4, #12]
 8010ff2:	d106      	bne.n	8011002 <__sflush_r+0x66>
 8010ff4:	6829      	ldr	r1, [r5, #0]
 8010ff6:	291d      	cmp	r1, #29
 8010ff8:	d82c      	bhi.n	8011054 <__sflush_r+0xb8>
 8010ffa:	4a2a      	ldr	r2, [pc, #168]	; (80110a4 <__sflush_r+0x108>)
 8010ffc:	40ca      	lsrs	r2, r1
 8010ffe:	07d6      	lsls	r6, r2, #31
 8011000:	d528      	bpl.n	8011054 <__sflush_r+0xb8>
 8011002:	2200      	movs	r2, #0
 8011004:	6062      	str	r2, [r4, #4]
 8011006:	04d9      	lsls	r1, r3, #19
 8011008:	6922      	ldr	r2, [r4, #16]
 801100a:	6022      	str	r2, [r4, #0]
 801100c:	d504      	bpl.n	8011018 <__sflush_r+0x7c>
 801100e:	1c42      	adds	r2, r0, #1
 8011010:	d101      	bne.n	8011016 <__sflush_r+0x7a>
 8011012:	682b      	ldr	r3, [r5, #0]
 8011014:	b903      	cbnz	r3, 8011018 <__sflush_r+0x7c>
 8011016:	6560      	str	r0, [r4, #84]	; 0x54
 8011018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801101a:	602f      	str	r7, [r5, #0]
 801101c:	2900      	cmp	r1, #0
 801101e:	d0ca      	beq.n	8010fb6 <__sflush_r+0x1a>
 8011020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011024:	4299      	cmp	r1, r3
 8011026:	d002      	beq.n	801102e <__sflush_r+0x92>
 8011028:	4628      	mov	r0, r5
 801102a:	f7ff f96d 	bl	8010308 <_free_r>
 801102e:	2000      	movs	r0, #0
 8011030:	6360      	str	r0, [r4, #52]	; 0x34
 8011032:	e7c1      	b.n	8010fb8 <__sflush_r+0x1c>
 8011034:	6a21      	ldr	r1, [r4, #32]
 8011036:	2301      	movs	r3, #1
 8011038:	4628      	mov	r0, r5
 801103a:	47b0      	blx	r6
 801103c:	1c41      	adds	r1, r0, #1
 801103e:	d1c7      	bne.n	8010fd0 <__sflush_r+0x34>
 8011040:	682b      	ldr	r3, [r5, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d0c4      	beq.n	8010fd0 <__sflush_r+0x34>
 8011046:	2b1d      	cmp	r3, #29
 8011048:	d001      	beq.n	801104e <__sflush_r+0xb2>
 801104a:	2b16      	cmp	r3, #22
 801104c:	d101      	bne.n	8011052 <__sflush_r+0xb6>
 801104e:	602f      	str	r7, [r5, #0]
 8011050:	e7b1      	b.n	8010fb6 <__sflush_r+0x1a>
 8011052:	89a3      	ldrh	r3, [r4, #12]
 8011054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011058:	81a3      	strh	r3, [r4, #12]
 801105a:	e7ad      	b.n	8010fb8 <__sflush_r+0x1c>
 801105c:	690f      	ldr	r7, [r1, #16]
 801105e:	2f00      	cmp	r7, #0
 8011060:	d0a9      	beq.n	8010fb6 <__sflush_r+0x1a>
 8011062:	0793      	lsls	r3, r2, #30
 8011064:	680e      	ldr	r6, [r1, #0]
 8011066:	bf08      	it	eq
 8011068:	694b      	ldreq	r3, [r1, #20]
 801106a:	600f      	str	r7, [r1, #0]
 801106c:	bf18      	it	ne
 801106e:	2300      	movne	r3, #0
 8011070:	eba6 0807 	sub.w	r8, r6, r7
 8011074:	608b      	str	r3, [r1, #8]
 8011076:	f1b8 0f00 	cmp.w	r8, #0
 801107a:	dd9c      	ble.n	8010fb6 <__sflush_r+0x1a>
 801107c:	6a21      	ldr	r1, [r4, #32]
 801107e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011080:	4643      	mov	r3, r8
 8011082:	463a      	mov	r2, r7
 8011084:	4628      	mov	r0, r5
 8011086:	47b0      	blx	r6
 8011088:	2800      	cmp	r0, #0
 801108a:	dc06      	bgt.n	801109a <__sflush_r+0xfe>
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011092:	81a3      	strh	r3, [r4, #12]
 8011094:	f04f 30ff 	mov.w	r0, #4294967295
 8011098:	e78e      	b.n	8010fb8 <__sflush_r+0x1c>
 801109a:	4407      	add	r7, r0
 801109c:	eba8 0800 	sub.w	r8, r8, r0
 80110a0:	e7e9      	b.n	8011076 <__sflush_r+0xda>
 80110a2:	bf00      	nop
 80110a4:	20400001 	.word	0x20400001

080110a8 <_fflush_r>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	690b      	ldr	r3, [r1, #16]
 80110ac:	4605      	mov	r5, r0
 80110ae:	460c      	mov	r4, r1
 80110b0:	b913      	cbnz	r3, 80110b8 <_fflush_r+0x10>
 80110b2:	2500      	movs	r5, #0
 80110b4:	4628      	mov	r0, r5
 80110b6:	bd38      	pop	{r3, r4, r5, pc}
 80110b8:	b118      	cbz	r0, 80110c2 <_fflush_r+0x1a>
 80110ba:	6983      	ldr	r3, [r0, #24]
 80110bc:	b90b      	cbnz	r3, 80110c2 <_fflush_r+0x1a>
 80110be:	f000 f887 	bl	80111d0 <__sinit>
 80110c2:	4b14      	ldr	r3, [pc, #80]	; (8011114 <_fflush_r+0x6c>)
 80110c4:	429c      	cmp	r4, r3
 80110c6:	d11b      	bne.n	8011100 <_fflush_r+0x58>
 80110c8:	686c      	ldr	r4, [r5, #4]
 80110ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0ef      	beq.n	80110b2 <_fflush_r+0xa>
 80110d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80110d4:	07d0      	lsls	r0, r2, #31
 80110d6:	d404      	bmi.n	80110e2 <_fflush_r+0x3a>
 80110d8:	0599      	lsls	r1, r3, #22
 80110da:	d402      	bmi.n	80110e2 <_fflush_r+0x3a>
 80110dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110de:	f7fe fc03 	bl	800f8e8 <__retarget_lock_acquire_recursive>
 80110e2:	4628      	mov	r0, r5
 80110e4:	4621      	mov	r1, r4
 80110e6:	f7ff ff59 	bl	8010f9c <__sflush_r>
 80110ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110ec:	07da      	lsls	r2, r3, #31
 80110ee:	4605      	mov	r5, r0
 80110f0:	d4e0      	bmi.n	80110b4 <_fflush_r+0xc>
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	059b      	lsls	r3, r3, #22
 80110f6:	d4dd      	bmi.n	80110b4 <_fflush_r+0xc>
 80110f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110fa:	f7fe fbf7 	bl	800f8ec <__retarget_lock_release_recursive>
 80110fe:	e7d9      	b.n	80110b4 <_fflush_r+0xc>
 8011100:	4b05      	ldr	r3, [pc, #20]	; (8011118 <_fflush_r+0x70>)
 8011102:	429c      	cmp	r4, r3
 8011104:	d101      	bne.n	801110a <_fflush_r+0x62>
 8011106:	68ac      	ldr	r4, [r5, #8]
 8011108:	e7df      	b.n	80110ca <_fflush_r+0x22>
 801110a:	4b04      	ldr	r3, [pc, #16]	; (801111c <_fflush_r+0x74>)
 801110c:	429c      	cmp	r4, r3
 801110e:	bf08      	it	eq
 8011110:	68ec      	ldreq	r4, [r5, #12]
 8011112:	e7da      	b.n	80110ca <_fflush_r+0x22>
 8011114:	080121f4 	.word	0x080121f4
 8011118:	08012214 	.word	0x08012214
 801111c:	080121d4 	.word	0x080121d4

08011120 <std>:
 8011120:	2300      	movs	r3, #0
 8011122:	b510      	push	{r4, lr}
 8011124:	4604      	mov	r4, r0
 8011126:	e9c0 3300 	strd	r3, r3, [r0]
 801112a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801112e:	6083      	str	r3, [r0, #8]
 8011130:	8181      	strh	r1, [r0, #12]
 8011132:	6643      	str	r3, [r0, #100]	; 0x64
 8011134:	81c2      	strh	r2, [r0, #14]
 8011136:	6183      	str	r3, [r0, #24]
 8011138:	4619      	mov	r1, r3
 801113a:	2208      	movs	r2, #8
 801113c:	305c      	adds	r0, #92	; 0x5c
 801113e:	f7fa fe3d 	bl	800bdbc <memset>
 8011142:	4b05      	ldr	r3, [pc, #20]	; (8011158 <std+0x38>)
 8011144:	6263      	str	r3, [r4, #36]	; 0x24
 8011146:	4b05      	ldr	r3, [pc, #20]	; (801115c <std+0x3c>)
 8011148:	62a3      	str	r3, [r4, #40]	; 0x28
 801114a:	4b05      	ldr	r3, [pc, #20]	; (8011160 <std+0x40>)
 801114c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801114e:	4b05      	ldr	r3, [pc, #20]	; (8011164 <std+0x44>)
 8011150:	6224      	str	r4, [r4, #32]
 8011152:	6323      	str	r3, [r4, #48]	; 0x30
 8011154:	bd10      	pop	{r4, pc}
 8011156:	bf00      	nop
 8011158:	0800d049 	.word	0x0800d049
 801115c:	0800d06f 	.word	0x0800d06f
 8011160:	0800d0a7 	.word	0x0800d0a7
 8011164:	0800d0cb 	.word	0x0800d0cb

08011168 <_cleanup_r>:
 8011168:	4901      	ldr	r1, [pc, #4]	; (8011170 <_cleanup_r+0x8>)
 801116a:	f000 b8c1 	b.w	80112f0 <_fwalk_reent>
 801116e:	bf00      	nop
 8011170:	080110a9 	.word	0x080110a9

08011174 <__sfmoreglue>:
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	2268      	movs	r2, #104	; 0x68
 8011178:	1e4d      	subs	r5, r1, #1
 801117a:	4355      	muls	r5, r2
 801117c:	460e      	mov	r6, r1
 801117e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011182:	f7ff f92d 	bl	80103e0 <_malloc_r>
 8011186:	4604      	mov	r4, r0
 8011188:	b140      	cbz	r0, 801119c <__sfmoreglue+0x28>
 801118a:	2100      	movs	r1, #0
 801118c:	e9c0 1600 	strd	r1, r6, [r0]
 8011190:	300c      	adds	r0, #12
 8011192:	60a0      	str	r0, [r4, #8]
 8011194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011198:	f7fa fe10 	bl	800bdbc <memset>
 801119c:	4620      	mov	r0, r4
 801119e:	bd70      	pop	{r4, r5, r6, pc}

080111a0 <__sfp_lock_acquire>:
 80111a0:	4801      	ldr	r0, [pc, #4]	; (80111a8 <__sfp_lock_acquire+0x8>)
 80111a2:	f7fe bba1 	b.w	800f8e8 <__retarget_lock_acquire_recursive>
 80111a6:	bf00      	nop
 80111a8:	200068b2 	.word	0x200068b2

080111ac <__sfp_lock_release>:
 80111ac:	4801      	ldr	r0, [pc, #4]	; (80111b4 <__sfp_lock_release+0x8>)
 80111ae:	f7fe bb9d 	b.w	800f8ec <__retarget_lock_release_recursive>
 80111b2:	bf00      	nop
 80111b4:	200068b2 	.word	0x200068b2

080111b8 <__sinit_lock_acquire>:
 80111b8:	4801      	ldr	r0, [pc, #4]	; (80111c0 <__sinit_lock_acquire+0x8>)
 80111ba:	f7fe bb95 	b.w	800f8e8 <__retarget_lock_acquire_recursive>
 80111be:	bf00      	nop
 80111c0:	200068b3 	.word	0x200068b3

080111c4 <__sinit_lock_release>:
 80111c4:	4801      	ldr	r0, [pc, #4]	; (80111cc <__sinit_lock_release+0x8>)
 80111c6:	f7fe bb91 	b.w	800f8ec <__retarget_lock_release_recursive>
 80111ca:	bf00      	nop
 80111cc:	200068b3 	.word	0x200068b3

080111d0 <__sinit>:
 80111d0:	b510      	push	{r4, lr}
 80111d2:	4604      	mov	r4, r0
 80111d4:	f7ff fff0 	bl	80111b8 <__sinit_lock_acquire>
 80111d8:	69a3      	ldr	r3, [r4, #24]
 80111da:	b11b      	cbz	r3, 80111e4 <__sinit+0x14>
 80111dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111e0:	f7ff bff0 	b.w	80111c4 <__sinit_lock_release>
 80111e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80111e8:	6523      	str	r3, [r4, #80]	; 0x50
 80111ea:	4b13      	ldr	r3, [pc, #76]	; (8011238 <__sinit+0x68>)
 80111ec:	4a13      	ldr	r2, [pc, #76]	; (801123c <__sinit+0x6c>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80111f2:	42a3      	cmp	r3, r4
 80111f4:	bf04      	itt	eq
 80111f6:	2301      	moveq	r3, #1
 80111f8:	61a3      	streq	r3, [r4, #24]
 80111fa:	4620      	mov	r0, r4
 80111fc:	f000 f820 	bl	8011240 <__sfp>
 8011200:	6060      	str	r0, [r4, #4]
 8011202:	4620      	mov	r0, r4
 8011204:	f000 f81c 	bl	8011240 <__sfp>
 8011208:	60a0      	str	r0, [r4, #8]
 801120a:	4620      	mov	r0, r4
 801120c:	f000 f818 	bl	8011240 <__sfp>
 8011210:	2200      	movs	r2, #0
 8011212:	60e0      	str	r0, [r4, #12]
 8011214:	2104      	movs	r1, #4
 8011216:	6860      	ldr	r0, [r4, #4]
 8011218:	f7ff ff82 	bl	8011120 <std>
 801121c:	68a0      	ldr	r0, [r4, #8]
 801121e:	2201      	movs	r2, #1
 8011220:	2109      	movs	r1, #9
 8011222:	f7ff ff7d 	bl	8011120 <std>
 8011226:	68e0      	ldr	r0, [r4, #12]
 8011228:	2202      	movs	r2, #2
 801122a:	2112      	movs	r1, #18
 801122c:	f7ff ff78 	bl	8011120 <std>
 8011230:	2301      	movs	r3, #1
 8011232:	61a3      	str	r3, [r4, #24]
 8011234:	e7d2      	b.n	80111dc <__sinit+0xc>
 8011236:	bf00      	nop
 8011238:	08011c7c 	.word	0x08011c7c
 801123c:	08011169 	.word	0x08011169

08011240 <__sfp>:
 8011240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011242:	4607      	mov	r7, r0
 8011244:	f7ff ffac 	bl	80111a0 <__sfp_lock_acquire>
 8011248:	4b1e      	ldr	r3, [pc, #120]	; (80112c4 <__sfp+0x84>)
 801124a:	681e      	ldr	r6, [r3, #0]
 801124c:	69b3      	ldr	r3, [r6, #24]
 801124e:	b913      	cbnz	r3, 8011256 <__sfp+0x16>
 8011250:	4630      	mov	r0, r6
 8011252:	f7ff ffbd 	bl	80111d0 <__sinit>
 8011256:	3648      	adds	r6, #72	; 0x48
 8011258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801125c:	3b01      	subs	r3, #1
 801125e:	d503      	bpl.n	8011268 <__sfp+0x28>
 8011260:	6833      	ldr	r3, [r6, #0]
 8011262:	b30b      	cbz	r3, 80112a8 <__sfp+0x68>
 8011264:	6836      	ldr	r6, [r6, #0]
 8011266:	e7f7      	b.n	8011258 <__sfp+0x18>
 8011268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801126c:	b9d5      	cbnz	r5, 80112a4 <__sfp+0x64>
 801126e:	4b16      	ldr	r3, [pc, #88]	; (80112c8 <__sfp+0x88>)
 8011270:	60e3      	str	r3, [r4, #12]
 8011272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011276:	6665      	str	r5, [r4, #100]	; 0x64
 8011278:	f7fe fb34 	bl	800f8e4 <__retarget_lock_init_recursive>
 801127c:	f7ff ff96 	bl	80111ac <__sfp_lock_release>
 8011280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011288:	6025      	str	r5, [r4, #0]
 801128a:	61a5      	str	r5, [r4, #24]
 801128c:	2208      	movs	r2, #8
 801128e:	4629      	mov	r1, r5
 8011290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011294:	f7fa fd92 	bl	800bdbc <memset>
 8011298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801129c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80112a0:	4620      	mov	r0, r4
 80112a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a4:	3468      	adds	r4, #104	; 0x68
 80112a6:	e7d9      	b.n	801125c <__sfp+0x1c>
 80112a8:	2104      	movs	r1, #4
 80112aa:	4638      	mov	r0, r7
 80112ac:	f7ff ff62 	bl	8011174 <__sfmoreglue>
 80112b0:	4604      	mov	r4, r0
 80112b2:	6030      	str	r0, [r6, #0]
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d1d5      	bne.n	8011264 <__sfp+0x24>
 80112b8:	f7ff ff78 	bl	80111ac <__sfp_lock_release>
 80112bc:	230c      	movs	r3, #12
 80112be:	603b      	str	r3, [r7, #0]
 80112c0:	e7ee      	b.n	80112a0 <__sfp+0x60>
 80112c2:	bf00      	nop
 80112c4:	08011c7c 	.word	0x08011c7c
 80112c8:	ffff0001 	.word	0xffff0001

080112cc <fiprintf>:
 80112cc:	b40e      	push	{r1, r2, r3}
 80112ce:	b503      	push	{r0, r1, lr}
 80112d0:	4601      	mov	r1, r0
 80112d2:	ab03      	add	r3, sp, #12
 80112d4:	4805      	ldr	r0, [pc, #20]	; (80112ec <fiprintf+0x20>)
 80112d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112da:	6800      	ldr	r0, [r0, #0]
 80112dc:	9301      	str	r3, [sp, #4]
 80112de:	f000 f8a5 	bl	801142c <_vfiprintf_r>
 80112e2:	b002      	add	sp, #8
 80112e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112e8:	b003      	add	sp, #12
 80112ea:	4770      	bx	lr
 80112ec:	20000020 	.word	0x20000020

080112f0 <_fwalk_reent>:
 80112f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f4:	4606      	mov	r6, r0
 80112f6:	4688      	mov	r8, r1
 80112f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80112fc:	2700      	movs	r7, #0
 80112fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011302:	f1b9 0901 	subs.w	r9, r9, #1
 8011306:	d505      	bpl.n	8011314 <_fwalk_reent+0x24>
 8011308:	6824      	ldr	r4, [r4, #0]
 801130a:	2c00      	cmp	r4, #0
 801130c:	d1f7      	bne.n	80112fe <_fwalk_reent+0xe>
 801130e:	4638      	mov	r0, r7
 8011310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011314:	89ab      	ldrh	r3, [r5, #12]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d907      	bls.n	801132a <_fwalk_reent+0x3a>
 801131a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801131e:	3301      	adds	r3, #1
 8011320:	d003      	beq.n	801132a <_fwalk_reent+0x3a>
 8011322:	4629      	mov	r1, r5
 8011324:	4630      	mov	r0, r6
 8011326:	47c0      	blx	r8
 8011328:	4307      	orrs	r7, r0
 801132a:	3568      	adds	r5, #104	; 0x68
 801132c:	e7e9      	b.n	8011302 <_fwalk_reent+0x12>

0801132e <memmove>:
 801132e:	4288      	cmp	r0, r1
 8011330:	b510      	push	{r4, lr}
 8011332:	eb01 0402 	add.w	r4, r1, r2
 8011336:	d902      	bls.n	801133e <memmove+0x10>
 8011338:	4284      	cmp	r4, r0
 801133a:	4623      	mov	r3, r4
 801133c:	d807      	bhi.n	801134e <memmove+0x20>
 801133e:	1e43      	subs	r3, r0, #1
 8011340:	42a1      	cmp	r1, r4
 8011342:	d008      	beq.n	8011356 <memmove+0x28>
 8011344:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011348:	f803 2f01 	strb.w	r2, [r3, #1]!
 801134c:	e7f8      	b.n	8011340 <memmove+0x12>
 801134e:	4402      	add	r2, r0
 8011350:	4601      	mov	r1, r0
 8011352:	428a      	cmp	r2, r1
 8011354:	d100      	bne.n	8011358 <memmove+0x2a>
 8011356:	bd10      	pop	{r4, pc}
 8011358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801135c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011360:	e7f7      	b.n	8011352 <memmove+0x24>
	...

08011364 <__malloc_lock>:
 8011364:	4801      	ldr	r0, [pc, #4]	; (801136c <__malloc_lock+0x8>)
 8011366:	f7fe babf 	b.w	800f8e8 <__retarget_lock_acquire_recursive>
 801136a:	bf00      	nop
 801136c:	200068b1 	.word	0x200068b1

08011370 <__malloc_unlock>:
 8011370:	4801      	ldr	r0, [pc, #4]	; (8011378 <__malloc_unlock+0x8>)
 8011372:	f7fe babb 	b.w	800f8ec <__retarget_lock_release_recursive>
 8011376:	bf00      	nop
 8011378:	200068b1 	.word	0x200068b1

0801137c <_realloc_r>:
 801137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011380:	4680      	mov	r8, r0
 8011382:	4614      	mov	r4, r2
 8011384:	460e      	mov	r6, r1
 8011386:	b921      	cbnz	r1, 8011392 <_realloc_r+0x16>
 8011388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	4611      	mov	r1, r2
 801138e:	f7ff b827 	b.w	80103e0 <_malloc_r>
 8011392:	b92a      	cbnz	r2, 80113a0 <_realloc_r+0x24>
 8011394:	f7fe ffb8 	bl	8010308 <_free_r>
 8011398:	4625      	mov	r5, r4
 801139a:	4628      	mov	r0, r5
 801139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a0:	f000 faa0 	bl	80118e4 <_malloc_usable_size_r>
 80113a4:	4284      	cmp	r4, r0
 80113a6:	4607      	mov	r7, r0
 80113a8:	d802      	bhi.n	80113b0 <_realloc_r+0x34>
 80113aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113ae:	d812      	bhi.n	80113d6 <_realloc_r+0x5a>
 80113b0:	4621      	mov	r1, r4
 80113b2:	4640      	mov	r0, r8
 80113b4:	f7ff f814 	bl	80103e0 <_malloc_r>
 80113b8:	4605      	mov	r5, r0
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d0ed      	beq.n	801139a <_realloc_r+0x1e>
 80113be:	42bc      	cmp	r4, r7
 80113c0:	4622      	mov	r2, r4
 80113c2:	4631      	mov	r1, r6
 80113c4:	bf28      	it	cs
 80113c6:	463a      	movcs	r2, r7
 80113c8:	f7fa fcea 	bl	800bda0 <memcpy>
 80113cc:	4631      	mov	r1, r6
 80113ce:	4640      	mov	r0, r8
 80113d0:	f7fe ff9a 	bl	8010308 <_free_r>
 80113d4:	e7e1      	b.n	801139a <_realloc_r+0x1e>
 80113d6:	4635      	mov	r5, r6
 80113d8:	e7df      	b.n	801139a <_realloc_r+0x1e>

080113da <__sfputc_r>:
 80113da:	6893      	ldr	r3, [r2, #8]
 80113dc:	3b01      	subs	r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	b410      	push	{r4}
 80113e2:	6093      	str	r3, [r2, #8]
 80113e4:	da08      	bge.n	80113f8 <__sfputc_r+0x1e>
 80113e6:	6994      	ldr	r4, [r2, #24]
 80113e8:	42a3      	cmp	r3, r4
 80113ea:	db01      	blt.n	80113f0 <__sfputc_r+0x16>
 80113ec:	290a      	cmp	r1, #10
 80113ee:	d103      	bne.n	80113f8 <__sfputc_r+0x1e>
 80113f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f4:	f000 b94a 	b.w	801168c <__swbuf_r>
 80113f8:	6813      	ldr	r3, [r2, #0]
 80113fa:	1c58      	adds	r0, r3, #1
 80113fc:	6010      	str	r0, [r2, #0]
 80113fe:	7019      	strb	r1, [r3, #0]
 8011400:	4608      	mov	r0, r1
 8011402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011406:	4770      	bx	lr

08011408 <__sfputs_r>:
 8011408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801140a:	4606      	mov	r6, r0
 801140c:	460f      	mov	r7, r1
 801140e:	4614      	mov	r4, r2
 8011410:	18d5      	adds	r5, r2, r3
 8011412:	42ac      	cmp	r4, r5
 8011414:	d101      	bne.n	801141a <__sfputs_r+0x12>
 8011416:	2000      	movs	r0, #0
 8011418:	e007      	b.n	801142a <__sfputs_r+0x22>
 801141a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141e:	463a      	mov	r2, r7
 8011420:	4630      	mov	r0, r6
 8011422:	f7ff ffda 	bl	80113da <__sfputc_r>
 8011426:	1c43      	adds	r3, r0, #1
 8011428:	d1f3      	bne.n	8011412 <__sfputs_r+0xa>
 801142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801142c <_vfiprintf_r>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	460d      	mov	r5, r1
 8011432:	b09d      	sub	sp, #116	; 0x74
 8011434:	4614      	mov	r4, r2
 8011436:	4698      	mov	r8, r3
 8011438:	4606      	mov	r6, r0
 801143a:	b118      	cbz	r0, 8011444 <_vfiprintf_r+0x18>
 801143c:	6983      	ldr	r3, [r0, #24]
 801143e:	b90b      	cbnz	r3, 8011444 <_vfiprintf_r+0x18>
 8011440:	f7ff fec6 	bl	80111d0 <__sinit>
 8011444:	4b89      	ldr	r3, [pc, #548]	; (801166c <_vfiprintf_r+0x240>)
 8011446:	429d      	cmp	r5, r3
 8011448:	d11b      	bne.n	8011482 <_vfiprintf_r+0x56>
 801144a:	6875      	ldr	r5, [r6, #4]
 801144c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801144e:	07d9      	lsls	r1, r3, #31
 8011450:	d405      	bmi.n	801145e <_vfiprintf_r+0x32>
 8011452:	89ab      	ldrh	r3, [r5, #12]
 8011454:	059a      	lsls	r2, r3, #22
 8011456:	d402      	bmi.n	801145e <_vfiprintf_r+0x32>
 8011458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801145a:	f7fe fa45 	bl	800f8e8 <__retarget_lock_acquire_recursive>
 801145e:	89ab      	ldrh	r3, [r5, #12]
 8011460:	071b      	lsls	r3, r3, #28
 8011462:	d501      	bpl.n	8011468 <_vfiprintf_r+0x3c>
 8011464:	692b      	ldr	r3, [r5, #16]
 8011466:	b9eb      	cbnz	r3, 80114a4 <_vfiprintf_r+0x78>
 8011468:	4629      	mov	r1, r5
 801146a:	4630      	mov	r0, r6
 801146c:	f000 f960 	bl	8011730 <__swsetup_r>
 8011470:	b1c0      	cbz	r0, 80114a4 <_vfiprintf_r+0x78>
 8011472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011474:	07dc      	lsls	r4, r3, #31
 8011476:	d50e      	bpl.n	8011496 <_vfiprintf_r+0x6a>
 8011478:	f04f 30ff 	mov.w	r0, #4294967295
 801147c:	b01d      	add	sp, #116	; 0x74
 801147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011482:	4b7b      	ldr	r3, [pc, #492]	; (8011670 <_vfiprintf_r+0x244>)
 8011484:	429d      	cmp	r5, r3
 8011486:	d101      	bne.n	801148c <_vfiprintf_r+0x60>
 8011488:	68b5      	ldr	r5, [r6, #8]
 801148a:	e7df      	b.n	801144c <_vfiprintf_r+0x20>
 801148c:	4b79      	ldr	r3, [pc, #484]	; (8011674 <_vfiprintf_r+0x248>)
 801148e:	429d      	cmp	r5, r3
 8011490:	bf08      	it	eq
 8011492:	68f5      	ldreq	r5, [r6, #12]
 8011494:	e7da      	b.n	801144c <_vfiprintf_r+0x20>
 8011496:	89ab      	ldrh	r3, [r5, #12]
 8011498:	0598      	lsls	r0, r3, #22
 801149a:	d4ed      	bmi.n	8011478 <_vfiprintf_r+0x4c>
 801149c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801149e:	f7fe fa25 	bl	800f8ec <__retarget_lock_release_recursive>
 80114a2:	e7e9      	b.n	8011478 <_vfiprintf_r+0x4c>
 80114a4:	2300      	movs	r3, #0
 80114a6:	9309      	str	r3, [sp, #36]	; 0x24
 80114a8:	2320      	movs	r3, #32
 80114aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80114b2:	2330      	movs	r3, #48	; 0x30
 80114b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011678 <_vfiprintf_r+0x24c>
 80114b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114bc:	f04f 0901 	mov.w	r9, #1
 80114c0:	4623      	mov	r3, r4
 80114c2:	469a      	mov	sl, r3
 80114c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c8:	b10a      	cbz	r2, 80114ce <_vfiprintf_r+0xa2>
 80114ca:	2a25      	cmp	r2, #37	; 0x25
 80114cc:	d1f9      	bne.n	80114c2 <_vfiprintf_r+0x96>
 80114ce:	ebba 0b04 	subs.w	fp, sl, r4
 80114d2:	d00b      	beq.n	80114ec <_vfiprintf_r+0xc0>
 80114d4:	465b      	mov	r3, fp
 80114d6:	4622      	mov	r2, r4
 80114d8:	4629      	mov	r1, r5
 80114da:	4630      	mov	r0, r6
 80114dc:	f7ff ff94 	bl	8011408 <__sfputs_r>
 80114e0:	3001      	adds	r0, #1
 80114e2:	f000 80aa 	beq.w	801163a <_vfiprintf_r+0x20e>
 80114e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e8:	445a      	add	r2, fp
 80114ea:	9209      	str	r2, [sp, #36]	; 0x24
 80114ec:	f89a 3000 	ldrb.w	r3, [sl]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f000 80a2 	beq.w	801163a <_vfiprintf_r+0x20e>
 80114f6:	2300      	movs	r3, #0
 80114f8:	f04f 32ff 	mov.w	r2, #4294967295
 80114fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011500:	f10a 0a01 	add.w	sl, sl, #1
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	9307      	str	r3, [sp, #28]
 8011508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801150c:	931a      	str	r3, [sp, #104]	; 0x68
 801150e:	4654      	mov	r4, sl
 8011510:	2205      	movs	r2, #5
 8011512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011516:	4858      	ldr	r0, [pc, #352]	; (8011678 <_vfiprintf_r+0x24c>)
 8011518:	f7ee fe72 	bl	8000200 <memchr>
 801151c:	9a04      	ldr	r2, [sp, #16]
 801151e:	b9d8      	cbnz	r0, 8011558 <_vfiprintf_r+0x12c>
 8011520:	06d1      	lsls	r1, r2, #27
 8011522:	bf44      	itt	mi
 8011524:	2320      	movmi	r3, #32
 8011526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801152a:	0713      	lsls	r3, r2, #28
 801152c:	bf44      	itt	mi
 801152e:	232b      	movmi	r3, #43	; 0x2b
 8011530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011534:	f89a 3000 	ldrb.w	r3, [sl]
 8011538:	2b2a      	cmp	r3, #42	; 0x2a
 801153a:	d015      	beq.n	8011568 <_vfiprintf_r+0x13c>
 801153c:	9a07      	ldr	r2, [sp, #28]
 801153e:	4654      	mov	r4, sl
 8011540:	2000      	movs	r0, #0
 8011542:	f04f 0c0a 	mov.w	ip, #10
 8011546:	4621      	mov	r1, r4
 8011548:	f811 3b01 	ldrb.w	r3, [r1], #1
 801154c:	3b30      	subs	r3, #48	; 0x30
 801154e:	2b09      	cmp	r3, #9
 8011550:	d94e      	bls.n	80115f0 <_vfiprintf_r+0x1c4>
 8011552:	b1b0      	cbz	r0, 8011582 <_vfiprintf_r+0x156>
 8011554:	9207      	str	r2, [sp, #28]
 8011556:	e014      	b.n	8011582 <_vfiprintf_r+0x156>
 8011558:	eba0 0308 	sub.w	r3, r0, r8
 801155c:	fa09 f303 	lsl.w	r3, r9, r3
 8011560:	4313      	orrs	r3, r2
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	46a2      	mov	sl, r4
 8011566:	e7d2      	b.n	801150e <_vfiprintf_r+0xe2>
 8011568:	9b03      	ldr	r3, [sp, #12]
 801156a:	1d19      	adds	r1, r3, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	9103      	str	r1, [sp, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	bfbb      	ittet	lt
 8011574:	425b      	neglt	r3, r3
 8011576:	f042 0202 	orrlt.w	r2, r2, #2
 801157a:	9307      	strge	r3, [sp, #28]
 801157c:	9307      	strlt	r3, [sp, #28]
 801157e:	bfb8      	it	lt
 8011580:	9204      	strlt	r2, [sp, #16]
 8011582:	7823      	ldrb	r3, [r4, #0]
 8011584:	2b2e      	cmp	r3, #46	; 0x2e
 8011586:	d10c      	bne.n	80115a2 <_vfiprintf_r+0x176>
 8011588:	7863      	ldrb	r3, [r4, #1]
 801158a:	2b2a      	cmp	r3, #42	; 0x2a
 801158c:	d135      	bne.n	80115fa <_vfiprintf_r+0x1ce>
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	1d1a      	adds	r2, r3, #4
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	9203      	str	r2, [sp, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	bfb8      	it	lt
 801159a:	f04f 33ff 	movlt.w	r3, #4294967295
 801159e:	3402      	adds	r4, #2
 80115a0:	9305      	str	r3, [sp, #20]
 80115a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011688 <_vfiprintf_r+0x25c>
 80115a6:	7821      	ldrb	r1, [r4, #0]
 80115a8:	2203      	movs	r2, #3
 80115aa:	4650      	mov	r0, sl
 80115ac:	f7ee fe28 	bl	8000200 <memchr>
 80115b0:	b140      	cbz	r0, 80115c4 <_vfiprintf_r+0x198>
 80115b2:	2340      	movs	r3, #64	; 0x40
 80115b4:	eba0 000a 	sub.w	r0, r0, sl
 80115b8:	fa03 f000 	lsl.w	r0, r3, r0
 80115bc:	9b04      	ldr	r3, [sp, #16]
 80115be:	4303      	orrs	r3, r0
 80115c0:	3401      	adds	r4, #1
 80115c2:	9304      	str	r3, [sp, #16]
 80115c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c8:	482c      	ldr	r0, [pc, #176]	; (801167c <_vfiprintf_r+0x250>)
 80115ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115ce:	2206      	movs	r2, #6
 80115d0:	f7ee fe16 	bl	8000200 <memchr>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d03f      	beq.n	8011658 <_vfiprintf_r+0x22c>
 80115d8:	4b29      	ldr	r3, [pc, #164]	; (8011680 <_vfiprintf_r+0x254>)
 80115da:	bb1b      	cbnz	r3, 8011624 <_vfiprintf_r+0x1f8>
 80115dc:	9b03      	ldr	r3, [sp, #12]
 80115de:	3307      	adds	r3, #7
 80115e0:	f023 0307 	bic.w	r3, r3, #7
 80115e4:	3308      	adds	r3, #8
 80115e6:	9303      	str	r3, [sp, #12]
 80115e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ea:	443b      	add	r3, r7
 80115ec:	9309      	str	r3, [sp, #36]	; 0x24
 80115ee:	e767      	b.n	80114c0 <_vfiprintf_r+0x94>
 80115f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80115f4:	460c      	mov	r4, r1
 80115f6:	2001      	movs	r0, #1
 80115f8:	e7a5      	b.n	8011546 <_vfiprintf_r+0x11a>
 80115fa:	2300      	movs	r3, #0
 80115fc:	3401      	adds	r4, #1
 80115fe:	9305      	str	r3, [sp, #20]
 8011600:	4619      	mov	r1, r3
 8011602:	f04f 0c0a 	mov.w	ip, #10
 8011606:	4620      	mov	r0, r4
 8011608:	f810 2b01 	ldrb.w	r2, [r0], #1
 801160c:	3a30      	subs	r2, #48	; 0x30
 801160e:	2a09      	cmp	r2, #9
 8011610:	d903      	bls.n	801161a <_vfiprintf_r+0x1ee>
 8011612:	2b00      	cmp	r3, #0
 8011614:	d0c5      	beq.n	80115a2 <_vfiprintf_r+0x176>
 8011616:	9105      	str	r1, [sp, #20]
 8011618:	e7c3      	b.n	80115a2 <_vfiprintf_r+0x176>
 801161a:	fb0c 2101 	mla	r1, ip, r1, r2
 801161e:	4604      	mov	r4, r0
 8011620:	2301      	movs	r3, #1
 8011622:	e7f0      	b.n	8011606 <_vfiprintf_r+0x1da>
 8011624:	ab03      	add	r3, sp, #12
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	462a      	mov	r2, r5
 801162a:	4b16      	ldr	r3, [pc, #88]	; (8011684 <_vfiprintf_r+0x258>)
 801162c:	a904      	add	r1, sp, #16
 801162e:	4630      	mov	r0, r6
 8011630:	f7fa fede 	bl	800c3f0 <_printf_float>
 8011634:	4607      	mov	r7, r0
 8011636:	1c78      	adds	r0, r7, #1
 8011638:	d1d6      	bne.n	80115e8 <_vfiprintf_r+0x1bc>
 801163a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801163c:	07d9      	lsls	r1, r3, #31
 801163e:	d405      	bmi.n	801164c <_vfiprintf_r+0x220>
 8011640:	89ab      	ldrh	r3, [r5, #12]
 8011642:	059a      	lsls	r2, r3, #22
 8011644:	d402      	bmi.n	801164c <_vfiprintf_r+0x220>
 8011646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011648:	f7fe f950 	bl	800f8ec <__retarget_lock_release_recursive>
 801164c:	89ab      	ldrh	r3, [r5, #12]
 801164e:	065b      	lsls	r3, r3, #25
 8011650:	f53f af12 	bmi.w	8011478 <_vfiprintf_r+0x4c>
 8011654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011656:	e711      	b.n	801147c <_vfiprintf_r+0x50>
 8011658:	ab03      	add	r3, sp, #12
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	462a      	mov	r2, r5
 801165e:	4b09      	ldr	r3, [pc, #36]	; (8011684 <_vfiprintf_r+0x258>)
 8011660:	a904      	add	r1, sp, #16
 8011662:	4630      	mov	r0, r6
 8011664:	f7fb f968 	bl	800c938 <_printf_i>
 8011668:	e7e4      	b.n	8011634 <_vfiprintf_r+0x208>
 801166a:	bf00      	nop
 801166c:	080121f4 	.word	0x080121f4
 8011670:	08012214 	.word	0x08012214
 8011674:	080121d4 	.word	0x080121d4
 8011678:	0801216c 	.word	0x0801216c
 801167c:	08012176 	.word	0x08012176
 8011680:	0800c3f1 	.word	0x0800c3f1
 8011684:	08011409 	.word	0x08011409
 8011688:	08012172 	.word	0x08012172

0801168c <__swbuf_r>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	460e      	mov	r6, r1
 8011690:	4614      	mov	r4, r2
 8011692:	4605      	mov	r5, r0
 8011694:	b118      	cbz	r0, 801169e <__swbuf_r+0x12>
 8011696:	6983      	ldr	r3, [r0, #24]
 8011698:	b90b      	cbnz	r3, 801169e <__swbuf_r+0x12>
 801169a:	f7ff fd99 	bl	80111d0 <__sinit>
 801169e:	4b21      	ldr	r3, [pc, #132]	; (8011724 <__swbuf_r+0x98>)
 80116a0:	429c      	cmp	r4, r3
 80116a2:	d12b      	bne.n	80116fc <__swbuf_r+0x70>
 80116a4:	686c      	ldr	r4, [r5, #4]
 80116a6:	69a3      	ldr	r3, [r4, #24]
 80116a8:	60a3      	str	r3, [r4, #8]
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	071a      	lsls	r2, r3, #28
 80116ae:	d52f      	bpl.n	8011710 <__swbuf_r+0x84>
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	b36b      	cbz	r3, 8011710 <__swbuf_r+0x84>
 80116b4:	6923      	ldr	r3, [r4, #16]
 80116b6:	6820      	ldr	r0, [r4, #0]
 80116b8:	1ac0      	subs	r0, r0, r3
 80116ba:	6963      	ldr	r3, [r4, #20]
 80116bc:	b2f6      	uxtb	r6, r6
 80116be:	4283      	cmp	r3, r0
 80116c0:	4637      	mov	r7, r6
 80116c2:	dc04      	bgt.n	80116ce <__swbuf_r+0x42>
 80116c4:	4621      	mov	r1, r4
 80116c6:	4628      	mov	r0, r5
 80116c8:	f7ff fcee 	bl	80110a8 <_fflush_r>
 80116cc:	bb30      	cbnz	r0, 801171c <__swbuf_r+0x90>
 80116ce:	68a3      	ldr	r3, [r4, #8]
 80116d0:	3b01      	subs	r3, #1
 80116d2:	60a3      	str	r3, [r4, #8]
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	6022      	str	r2, [r4, #0]
 80116da:	701e      	strb	r6, [r3, #0]
 80116dc:	6963      	ldr	r3, [r4, #20]
 80116de:	3001      	adds	r0, #1
 80116e0:	4283      	cmp	r3, r0
 80116e2:	d004      	beq.n	80116ee <__swbuf_r+0x62>
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	07db      	lsls	r3, r3, #31
 80116e8:	d506      	bpl.n	80116f8 <__swbuf_r+0x6c>
 80116ea:	2e0a      	cmp	r6, #10
 80116ec:	d104      	bne.n	80116f8 <__swbuf_r+0x6c>
 80116ee:	4621      	mov	r1, r4
 80116f0:	4628      	mov	r0, r5
 80116f2:	f7ff fcd9 	bl	80110a8 <_fflush_r>
 80116f6:	b988      	cbnz	r0, 801171c <__swbuf_r+0x90>
 80116f8:	4638      	mov	r0, r7
 80116fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116fc:	4b0a      	ldr	r3, [pc, #40]	; (8011728 <__swbuf_r+0x9c>)
 80116fe:	429c      	cmp	r4, r3
 8011700:	d101      	bne.n	8011706 <__swbuf_r+0x7a>
 8011702:	68ac      	ldr	r4, [r5, #8]
 8011704:	e7cf      	b.n	80116a6 <__swbuf_r+0x1a>
 8011706:	4b09      	ldr	r3, [pc, #36]	; (801172c <__swbuf_r+0xa0>)
 8011708:	429c      	cmp	r4, r3
 801170a:	bf08      	it	eq
 801170c:	68ec      	ldreq	r4, [r5, #12]
 801170e:	e7ca      	b.n	80116a6 <__swbuf_r+0x1a>
 8011710:	4621      	mov	r1, r4
 8011712:	4628      	mov	r0, r5
 8011714:	f000 f80c 	bl	8011730 <__swsetup_r>
 8011718:	2800      	cmp	r0, #0
 801171a:	d0cb      	beq.n	80116b4 <__swbuf_r+0x28>
 801171c:	f04f 37ff 	mov.w	r7, #4294967295
 8011720:	e7ea      	b.n	80116f8 <__swbuf_r+0x6c>
 8011722:	bf00      	nop
 8011724:	080121f4 	.word	0x080121f4
 8011728:	08012214 	.word	0x08012214
 801172c:	080121d4 	.word	0x080121d4

08011730 <__swsetup_r>:
 8011730:	4b32      	ldr	r3, [pc, #200]	; (80117fc <__swsetup_r+0xcc>)
 8011732:	b570      	push	{r4, r5, r6, lr}
 8011734:	681d      	ldr	r5, [r3, #0]
 8011736:	4606      	mov	r6, r0
 8011738:	460c      	mov	r4, r1
 801173a:	b125      	cbz	r5, 8011746 <__swsetup_r+0x16>
 801173c:	69ab      	ldr	r3, [r5, #24]
 801173e:	b913      	cbnz	r3, 8011746 <__swsetup_r+0x16>
 8011740:	4628      	mov	r0, r5
 8011742:	f7ff fd45 	bl	80111d0 <__sinit>
 8011746:	4b2e      	ldr	r3, [pc, #184]	; (8011800 <__swsetup_r+0xd0>)
 8011748:	429c      	cmp	r4, r3
 801174a:	d10f      	bne.n	801176c <__swsetup_r+0x3c>
 801174c:	686c      	ldr	r4, [r5, #4]
 801174e:	89a3      	ldrh	r3, [r4, #12]
 8011750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011754:	0719      	lsls	r1, r3, #28
 8011756:	d42c      	bmi.n	80117b2 <__swsetup_r+0x82>
 8011758:	06dd      	lsls	r5, r3, #27
 801175a:	d411      	bmi.n	8011780 <__swsetup_r+0x50>
 801175c:	2309      	movs	r3, #9
 801175e:	6033      	str	r3, [r6, #0]
 8011760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011764:	81a3      	strh	r3, [r4, #12]
 8011766:	f04f 30ff 	mov.w	r0, #4294967295
 801176a:	e03e      	b.n	80117ea <__swsetup_r+0xba>
 801176c:	4b25      	ldr	r3, [pc, #148]	; (8011804 <__swsetup_r+0xd4>)
 801176e:	429c      	cmp	r4, r3
 8011770:	d101      	bne.n	8011776 <__swsetup_r+0x46>
 8011772:	68ac      	ldr	r4, [r5, #8]
 8011774:	e7eb      	b.n	801174e <__swsetup_r+0x1e>
 8011776:	4b24      	ldr	r3, [pc, #144]	; (8011808 <__swsetup_r+0xd8>)
 8011778:	429c      	cmp	r4, r3
 801177a:	bf08      	it	eq
 801177c:	68ec      	ldreq	r4, [r5, #12]
 801177e:	e7e6      	b.n	801174e <__swsetup_r+0x1e>
 8011780:	0758      	lsls	r0, r3, #29
 8011782:	d512      	bpl.n	80117aa <__swsetup_r+0x7a>
 8011784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011786:	b141      	cbz	r1, 801179a <__swsetup_r+0x6a>
 8011788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801178c:	4299      	cmp	r1, r3
 801178e:	d002      	beq.n	8011796 <__swsetup_r+0x66>
 8011790:	4630      	mov	r0, r6
 8011792:	f7fe fdb9 	bl	8010308 <_free_r>
 8011796:	2300      	movs	r3, #0
 8011798:	6363      	str	r3, [r4, #52]	; 0x34
 801179a:	89a3      	ldrh	r3, [r4, #12]
 801179c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117a0:	81a3      	strh	r3, [r4, #12]
 80117a2:	2300      	movs	r3, #0
 80117a4:	6063      	str	r3, [r4, #4]
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	6023      	str	r3, [r4, #0]
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f043 0308 	orr.w	r3, r3, #8
 80117b0:	81a3      	strh	r3, [r4, #12]
 80117b2:	6923      	ldr	r3, [r4, #16]
 80117b4:	b94b      	cbnz	r3, 80117ca <__swsetup_r+0x9a>
 80117b6:	89a3      	ldrh	r3, [r4, #12]
 80117b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117c0:	d003      	beq.n	80117ca <__swsetup_r+0x9a>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4630      	mov	r0, r6
 80117c6:	f000 f84d 	bl	8011864 <__smakebuf_r>
 80117ca:	89a0      	ldrh	r0, [r4, #12]
 80117cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117d0:	f010 0301 	ands.w	r3, r0, #1
 80117d4:	d00a      	beq.n	80117ec <__swsetup_r+0xbc>
 80117d6:	2300      	movs	r3, #0
 80117d8:	60a3      	str	r3, [r4, #8]
 80117da:	6963      	ldr	r3, [r4, #20]
 80117dc:	425b      	negs	r3, r3
 80117de:	61a3      	str	r3, [r4, #24]
 80117e0:	6923      	ldr	r3, [r4, #16]
 80117e2:	b943      	cbnz	r3, 80117f6 <__swsetup_r+0xc6>
 80117e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80117e8:	d1ba      	bne.n	8011760 <__swsetup_r+0x30>
 80117ea:	bd70      	pop	{r4, r5, r6, pc}
 80117ec:	0781      	lsls	r1, r0, #30
 80117ee:	bf58      	it	pl
 80117f0:	6963      	ldrpl	r3, [r4, #20]
 80117f2:	60a3      	str	r3, [r4, #8]
 80117f4:	e7f4      	b.n	80117e0 <__swsetup_r+0xb0>
 80117f6:	2000      	movs	r0, #0
 80117f8:	e7f7      	b.n	80117ea <__swsetup_r+0xba>
 80117fa:	bf00      	nop
 80117fc:	20000020 	.word	0x20000020
 8011800:	080121f4 	.word	0x080121f4
 8011804:	08012214 	.word	0x08012214
 8011808:	080121d4 	.word	0x080121d4

0801180c <abort>:
 801180c:	b508      	push	{r3, lr}
 801180e:	2006      	movs	r0, #6
 8011810:	f000 f898 	bl	8011944 <raise>
 8011814:	2001      	movs	r0, #1
 8011816:	f7f1 fd83 	bl	8003320 <_exit>

0801181a <__swhatbuf_r>:
 801181a:	b570      	push	{r4, r5, r6, lr}
 801181c:	460e      	mov	r6, r1
 801181e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011822:	2900      	cmp	r1, #0
 8011824:	b096      	sub	sp, #88	; 0x58
 8011826:	4614      	mov	r4, r2
 8011828:	461d      	mov	r5, r3
 801182a:	da08      	bge.n	801183e <__swhatbuf_r+0x24>
 801182c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011830:	2200      	movs	r2, #0
 8011832:	602a      	str	r2, [r5, #0]
 8011834:	061a      	lsls	r2, r3, #24
 8011836:	d410      	bmi.n	801185a <__swhatbuf_r+0x40>
 8011838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183c:	e00e      	b.n	801185c <__swhatbuf_r+0x42>
 801183e:	466a      	mov	r2, sp
 8011840:	f000 f89c 	bl	801197c <_fstat_r>
 8011844:	2800      	cmp	r0, #0
 8011846:	dbf1      	blt.n	801182c <__swhatbuf_r+0x12>
 8011848:	9a01      	ldr	r2, [sp, #4]
 801184a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801184e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011852:	425a      	negs	r2, r3
 8011854:	415a      	adcs	r2, r3
 8011856:	602a      	str	r2, [r5, #0]
 8011858:	e7ee      	b.n	8011838 <__swhatbuf_r+0x1e>
 801185a:	2340      	movs	r3, #64	; 0x40
 801185c:	2000      	movs	r0, #0
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	b016      	add	sp, #88	; 0x58
 8011862:	bd70      	pop	{r4, r5, r6, pc}

08011864 <__smakebuf_r>:
 8011864:	898b      	ldrh	r3, [r1, #12]
 8011866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011868:	079d      	lsls	r5, r3, #30
 801186a:	4606      	mov	r6, r0
 801186c:	460c      	mov	r4, r1
 801186e:	d507      	bpl.n	8011880 <__smakebuf_r+0x1c>
 8011870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	6123      	str	r3, [r4, #16]
 8011878:	2301      	movs	r3, #1
 801187a:	6163      	str	r3, [r4, #20]
 801187c:	b002      	add	sp, #8
 801187e:	bd70      	pop	{r4, r5, r6, pc}
 8011880:	ab01      	add	r3, sp, #4
 8011882:	466a      	mov	r2, sp
 8011884:	f7ff ffc9 	bl	801181a <__swhatbuf_r>
 8011888:	9900      	ldr	r1, [sp, #0]
 801188a:	4605      	mov	r5, r0
 801188c:	4630      	mov	r0, r6
 801188e:	f7fe fda7 	bl	80103e0 <_malloc_r>
 8011892:	b948      	cbnz	r0, 80118a8 <__smakebuf_r+0x44>
 8011894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011898:	059a      	lsls	r2, r3, #22
 801189a:	d4ef      	bmi.n	801187c <__smakebuf_r+0x18>
 801189c:	f023 0303 	bic.w	r3, r3, #3
 80118a0:	f043 0302 	orr.w	r3, r3, #2
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	e7e3      	b.n	8011870 <__smakebuf_r+0xc>
 80118a8:	4b0d      	ldr	r3, [pc, #52]	; (80118e0 <__smakebuf_r+0x7c>)
 80118aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80118ac:	89a3      	ldrh	r3, [r4, #12]
 80118ae:	6020      	str	r0, [r4, #0]
 80118b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	9b00      	ldr	r3, [sp, #0]
 80118b8:	6163      	str	r3, [r4, #20]
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	6120      	str	r0, [r4, #16]
 80118be:	b15b      	cbz	r3, 80118d8 <__smakebuf_r+0x74>
 80118c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 f86b 	bl	80119a0 <_isatty_r>
 80118ca:	b128      	cbz	r0, 80118d8 <__smakebuf_r+0x74>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	f023 0303 	bic.w	r3, r3, #3
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	89a0      	ldrh	r0, [r4, #12]
 80118da:	4305      	orrs	r5, r0
 80118dc:	81a5      	strh	r5, [r4, #12]
 80118de:	e7cd      	b.n	801187c <__smakebuf_r+0x18>
 80118e0:	08011169 	.word	0x08011169

080118e4 <_malloc_usable_size_r>:
 80118e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118e8:	1f18      	subs	r0, r3, #4
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	bfbc      	itt	lt
 80118ee:	580b      	ldrlt	r3, [r1, r0]
 80118f0:	18c0      	addlt	r0, r0, r3
 80118f2:	4770      	bx	lr

080118f4 <_raise_r>:
 80118f4:	291f      	cmp	r1, #31
 80118f6:	b538      	push	{r3, r4, r5, lr}
 80118f8:	4604      	mov	r4, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	d904      	bls.n	8011908 <_raise_r+0x14>
 80118fe:	2316      	movs	r3, #22
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 30ff 	mov.w	r0, #4294967295
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801190a:	b112      	cbz	r2, 8011912 <_raise_r+0x1e>
 801190c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011910:	b94b      	cbnz	r3, 8011926 <_raise_r+0x32>
 8011912:	4620      	mov	r0, r4
 8011914:	f000 f830 	bl	8011978 <_getpid_r>
 8011918:	462a      	mov	r2, r5
 801191a:	4601      	mov	r1, r0
 801191c:	4620      	mov	r0, r4
 801191e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011922:	f000 b817 	b.w	8011954 <_kill_r>
 8011926:	2b01      	cmp	r3, #1
 8011928:	d00a      	beq.n	8011940 <_raise_r+0x4c>
 801192a:	1c59      	adds	r1, r3, #1
 801192c:	d103      	bne.n	8011936 <_raise_r+0x42>
 801192e:	2316      	movs	r3, #22
 8011930:	6003      	str	r3, [r0, #0]
 8011932:	2001      	movs	r0, #1
 8011934:	e7e7      	b.n	8011906 <_raise_r+0x12>
 8011936:	2400      	movs	r4, #0
 8011938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801193c:	4628      	mov	r0, r5
 801193e:	4798      	blx	r3
 8011940:	2000      	movs	r0, #0
 8011942:	e7e0      	b.n	8011906 <_raise_r+0x12>

08011944 <raise>:
 8011944:	4b02      	ldr	r3, [pc, #8]	; (8011950 <raise+0xc>)
 8011946:	4601      	mov	r1, r0
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f7ff bfd3 	b.w	80118f4 <_raise_r>
 801194e:	bf00      	nop
 8011950:	20000020 	.word	0x20000020

08011954 <_kill_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	4d07      	ldr	r5, [pc, #28]	; (8011974 <_kill_r+0x20>)
 8011958:	2300      	movs	r3, #0
 801195a:	4604      	mov	r4, r0
 801195c:	4608      	mov	r0, r1
 801195e:	4611      	mov	r1, r2
 8011960:	602b      	str	r3, [r5, #0]
 8011962:	f7f1 fccd 	bl	8003300 <_kill>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d102      	bne.n	8011970 <_kill_r+0x1c>
 801196a:	682b      	ldr	r3, [r5, #0]
 801196c:	b103      	cbz	r3, 8011970 <_kill_r+0x1c>
 801196e:	6023      	str	r3, [r4, #0]
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	bf00      	nop
 8011974:	200068c0 	.word	0x200068c0

08011978 <_getpid_r>:
 8011978:	f7f1 bcba 	b.w	80032f0 <_getpid>

0801197c <_fstat_r>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4d07      	ldr	r5, [pc, #28]	; (801199c <_fstat_r+0x20>)
 8011980:	2300      	movs	r3, #0
 8011982:	4604      	mov	r4, r0
 8011984:	4608      	mov	r0, r1
 8011986:	4611      	mov	r1, r2
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	f7f1 fd18 	bl	80033be <_fstat>
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	d102      	bne.n	8011998 <_fstat_r+0x1c>
 8011992:	682b      	ldr	r3, [r5, #0]
 8011994:	b103      	cbz	r3, 8011998 <_fstat_r+0x1c>
 8011996:	6023      	str	r3, [r4, #0]
 8011998:	bd38      	pop	{r3, r4, r5, pc}
 801199a:	bf00      	nop
 801199c:	200068c0 	.word	0x200068c0

080119a0 <_isatty_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4d06      	ldr	r5, [pc, #24]	; (80119bc <_isatty_r+0x1c>)
 80119a4:	2300      	movs	r3, #0
 80119a6:	4604      	mov	r4, r0
 80119a8:	4608      	mov	r0, r1
 80119aa:	602b      	str	r3, [r5, #0]
 80119ac:	f7f1 fd17 	bl	80033de <_isatty>
 80119b0:	1c43      	adds	r3, r0, #1
 80119b2:	d102      	bne.n	80119ba <_isatty_r+0x1a>
 80119b4:	682b      	ldr	r3, [r5, #0]
 80119b6:	b103      	cbz	r3, 80119ba <_isatty_r+0x1a>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	200068c0 	.word	0x200068c0

080119c0 <_init>:
 80119c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c2:	bf00      	nop
 80119c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119c6:	bc08      	pop	{r3}
 80119c8:	469e      	mov	lr, r3
 80119ca:	4770      	bx	lr

080119cc <_fini>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	bf00      	nop
 80119d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d2:	bc08      	pop	{r3}
 80119d4:	469e      	mov	lr, r3
 80119d6:	4770      	bx	lr
