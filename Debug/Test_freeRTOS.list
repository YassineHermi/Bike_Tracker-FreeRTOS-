
Test_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  08011888  08011888  00021888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120e4  080120e4  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  080120e4  080120e4  000220e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120ec  080120ec  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120ec  080120ec  000220ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120f0  080120f0  000220f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  080120f4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000666c  20000258  0801234c  00030258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068c4  0801234c  000368c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002224f  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000474d  00000000  00000000  000524d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00056c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  000587f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b092  00000000  00000000  0005a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4a3  00000000  00000000  00085292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038e5  00000000  00000000  000a4735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a801a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef0  00000000  00000000  001a806c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011870 	.word	0x08011870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08011870 	.word	0x08011870

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <send_data>:



//function to send data when connected
void send_data(uint8_t * send_data_buffer, int *flag,int*end_history)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	*flag = History_Flag;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <send_data+0x60>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
	  else if ((led2==0)&&(led1==1))
		  niv=25;
	  else
		  niv=0;*/

	if(strcmp((char *)send_data_test_buffer,(char *)send_data_buffer)!=0)
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <send_data+0x64>)
 8001030:	f7ff f8ce 	bl	80001d0 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <send_data+0x36>
	    {
			/*strcat((char*)buffer3,(char*)send_data_buffer);
			strcat((char*)buffer3,(char*)niv);*/
		    HAL_UART_Transmit(&huart1, send_data_buffer, 14, 100);
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	220e      	movs	r2, #14
 800103e:	68f9      	ldr	r1, [r7, #12]
 8001040:	480f      	ldr	r0, [pc, #60]	; (8001080 <send_data+0x68>)
 8001042:	f005 fbcb 	bl	80067dc <HAL_UART_Transmit>
		    strcpy((char *)send_data_test_buffer,(char *)send_data_buffer);
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <send_data+0x64>)
 800104a:	f00b ffa7 	bl	800cf9c <strcpy>
	    }


	HAL_Delay(8);
 800104e:	2008      	movs	r0, #8
 8001050:	f002 f9e2 	bl	8003418 <HAL_Delay>
	huart1.pRxBuffPtr = (uint8_t *)buffer;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <send_data+0x68>)
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <send_data+0x6c>)
 8001058:	655a      	str	r2, [r3, #84]	; 0x54
	huart1.RxXferCount = sizeof(buffer);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <send_data+0x68>)
 800105c:	2214      	movs	r2, #20
 800105e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if (*end_history==1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <send_data+0x58>
	{
		History_Flag = 0;
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <send_data+0x60>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
	}
	/*if (History_Flag==0)
		*end_history=0;*/


}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200002f8 	.word	0x200002f8
 800107c:	20000324 	.word	0x20000324
 8001080:	20000274 	.word	0x20000274
 8001084:	200002fc 	.word	0x200002fc

08001088 <History_Range>:

void History_Range(uint32_t * start_epoch, uint32_t  * end_epoch)
{
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b08d      	sub	sp, #52	; 0x34
 800108c:	af08      	add	r7, sp, #32
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]

/*if (buffer[0] == '\001')
	        	 {*/
	        		  memcpy((char*)epoch1, buffer, 10);
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <History_Range+0x148>)
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <History_Range+0x14c>)
 8001096:	ca07      	ldmia	r2, {r0, r1, r2}
 8001098:	c303      	stmia	r3!, {r0, r1}
 800109a:	801a      	strh	r2, [r3, #0]
	        		  sprintf(int_epoch1,"%d%d%d%d%d%d%d%d%d%d",epoch1[0],epoch1[1],epoch1[2],epoch1[3],epoch1[4],epoch1[5],epoch1[6],epoch1[7],epoch1[8],epoch1[9]);
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <History_Range+0x148>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	469c      	mov	ip, r3
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <History_Range+0x148>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	469e      	mov	lr, r3
 80010a8:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <History_Range+0x148>)
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <History_Range+0x148>)
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <History_Range+0x148>)
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <History_Range+0x148>)
 80010bc:	795b      	ldrb	r3, [r3, #5]
 80010be:	461c      	mov	r4, r3
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <History_Range+0x148>)
 80010c2:	799b      	ldrb	r3, [r3, #6]
 80010c4:	461d      	mov	r5, r3
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <History_Range+0x148>)
 80010c8:	79db      	ldrb	r3, [r3, #7]
 80010ca:	461e      	mov	r6, r3
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <History_Range+0x148>)
 80010ce:	7a1b      	ldrb	r3, [r3, #8]
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <History_Range+0x148>)
 80010d4:	7a5b      	ldrb	r3, [r3, #9]
 80010d6:	9307      	str	r3, [sp, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	9306      	str	r3, [sp, #24]
 80010dc:	9605      	str	r6, [sp, #20]
 80010de:	9504      	str	r5, [sp, #16]
 80010e0:	9403      	str	r4, [sp, #12]
 80010e2:	9002      	str	r0, [sp, #8]
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	4673      	mov	r3, lr
 80010ea:	4662      	mov	r2, ip
 80010ec:	493a      	ldr	r1, [pc, #232]	; (80011d8 <History_Range+0x150>)
 80010ee:	483b      	ldr	r0, [pc, #236]	; (80011dc <History_Range+0x154>)
 80010f0:	f00b feb6 	bl	800ce60 <siprintf>
	        		 x1=strtol(int_epoch1, NULL, 10);
 80010f4:	220a      	movs	r2, #10
 80010f6:	2100      	movs	r1, #0
 80010f8:	4838      	ldr	r0, [pc, #224]	; (80011dc <History_Range+0x154>)
 80010fa:	f00c fe19 	bl	800dd30 <strtol>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <History_Range+0x158>)
 8001102:	6013      	str	r3, [r2, #0]
	        		  sprintf(hexa_epoch1,"%x",x1);
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <History_Range+0x158>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4936      	ldr	r1, [pc, #216]	; (80011e4 <History_Range+0x15c>)
 800110c:	4836      	ldr	r0, [pc, #216]	; (80011e8 <History_Range+0x160>)
 800110e:	f00b fea7 	bl	800ce60 <siprintf>
	                          epoch11_value = strtoul(hexa_epoch1,NULL,16);
 8001112:	2210      	movs	r2, #16
 8001114:	2100      	movs	r1, #0
 8001116:	4834      	ldr	r0, [pc, #208]	; (80011e8 <History_Range+0x160>)
 8001118:	f00c fe88 	bl	800de2c <strtoul>
 800111c:	4603      	mov	r3, r0
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <History_Range+0x164>)
 8001120:	6013      	str	r3, [r2, #0]

	        		      memcpy((char*)epoch2, (buffer) + 10, 10);
 8001122:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <History_Range+0x168>)
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <History_Range+0x16c>)
 8001126:	6810      	ldr	r0, [r2, #0]
 8001128:	6851      	ldr	r1, [r2, #4]
 800112a:	c303      	stmia	r3!, {r0, r1}
 800112c:	8912      	ldrh	r2, [r2, #8]
 800112e:	801a      	strh	r2, [r3, #0]
	        		      sprintf(int_epoch2,"%d%d%d%d%d%d%d%d%d%d",epoch2[0],epoch2[1],epoch2[2],epoch2[3],epoch2[4],epoch2[5],epoch2[6],epoch2[7],epoch2[8],epoch2[9]);
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <History_Range+0x16c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	469c      	mov	ip, r3
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <History_Range+0x16c>)
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	469e      	mov	lr, r3
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <History_Range+0x16c>)
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	461a      	mov	r2, r3
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <History_Range+0x16c>)
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	4619      	mov	r1, r3
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <History_Range+0x16c>)
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <History_Range+0x16c>)
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	461c      	mov	r4, r3
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <History_Range+0x16c>)
 8001156:	799b      	ldrb	r3, [r3, #6]
 8001158:	461d      	mov	r5, r3
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <History_Range+0x16c>)
 800115c:	79db      	ldrb	r3, [r3, #7]
 800115e:	461e      	mov	r6, r3
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <History_Range+0x16c>)
 8001162:	7a1b      	ldrb	r3, [r3, #8]
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <History_Range+0x16c>)
 8001168:	7a5b      	ldrb	r3, [r3, #9]
 800116a:	9307      	str	r3, [sp, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	9306      	str	r3, [sp, #24]
 8001170:	9605      	str	r6, [sp, #20]
 8001172:	9504      	str	r5, [sp, #16]
 8001174:	9403      	str	r4, [sp, #12]
 8001176:	9002      	str	r0, [sp, #8]
 8001178:	9101      	str	r1, [sp, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	4673      	mov	r3, lr
 800117e:	4662      	mov	r2, ip
 8001180:	4915      	ldr	r1, [pc, #84]	; (80011d8 <History_Range+0x150>)
 8001182:	481d      	ldr	r0, [pc, #116]	; (80011f8 <History_Range+0x170>)
 8001184:	f00b fe6c 	bl	800ce60 <siprintf>
	        		      x2 = strtol(int_epoch2, NULL, 10);
 8001188:	220a      	movs	r2, #10
 800118a:	2100      	movs	r1, #0
 800118c:	481a      	ldr	r0, [pc, #104]	; (80011f8 <History_Range+0x170>)
 800118e:	f00c fdcf 	bl	800dd30 <strtol>
 8001192:	4603      	mov	r3, r0
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <History_Range+0x174>)
 8001196:	6013      	str	r3, [r2, #0]
	        		      sprintf(hexa_epoch2,"%x",x2);
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <History_Range+0x174>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4911      	ldr	r1, [pc, #68]	; (80011e4 <History_Range+0x15c>)
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <History_Range+0x178>)
 80011a2:	f00b fe5d 	bl	800ce60 <siprintf>
	                              epoch22_value = strtoul(hexa_epoch2,NULL,16);
 80011a6:	2210      	movs	r2, #16
 80011a8:	2100      	movs	r1, #0
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <History_Range+0x178>)
 80011ac:	f00c fe3e 	bl	800de2c <strtoul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <History_Range+0x17c>)
 80011b4:	6013      	str	r3, [r2, #0]
	              		   //flag=0;
	                              *start_epoch = epoch11_value;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <History_Range+0x164>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]
	                              *end_epoch = epoch22_value;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <History_Range+0x17c>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	601a      	str	r2, [r3, #0]
	                  HAL_Delay(50);
	        		  huart1.pRxBuffPtr = (uint8_t *)buffer;
	        		  huart1.RxXferCount = sizeof(buffer);
	        	  }*/

}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000334 	.word	0x20000334
 80011d4:	200002fc 	.word	0x200002fc
 80011d8:	08011890 	.word	0x08011890
 80011dc:	2000034c 	.word	0x2000034c
 80011e0:	20000374 	.word	0x20000374
 80011e4:	080118a8 	.word	0x080118a8
 80011e8:	20000358 	.word	0x20000358
 80011ec:	2000037c 	.word	0x2000037c
 80011f0:	20000306 	.word	0x20000306
 80011f4:	20000340 	.word	0x20000340
 80011f8:	20000360 	.word	0x20000360
 80011fc:	20000378 	.word	0x20000378
 8001200:	2000036c 	.word	0x2000036c
 8001204:	20000380 	.word	0x20000380

08001208 <MX_USART1_UART_Init>:

//function to config usart1
static void MX_USART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_USART1_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart1);
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800124c:	f005 fa78 	bl	8006740 <HAL_UART_Init>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000274 	.word	0x20000274
 8001258:	40013800 	.word	0x40013800

0800125c <BLE_State_Pin_Init>:
  HAL_UART_Init(&huart2);
}*/


static void BLE_State_Pin_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /*Configure BLE STATE GPIO PIN (PD0) */
  GPIO_InitStruct.Pin = BLE_STATE_GPIO_PIN ;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <BLE_State_Pin_Init+0x24>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <BLE_State_Pin_Init+0x24>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <BLE_State_Pin_Init+0x24>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001272:	4903      	ldr	r1, [pc, #12]	; (8001280 <BLE_State_Pin_Init+0x24>)
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <BLE_State_Pin_Init+0x28>)
 8001276:	f002 fc4b 	bl	8003b10 <HAL_GPIO_Init>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000310 	.word	0x20000310
 8001284:	48000c00 	.word	0x48000c00

08001288 <BLE_Init>:

void BLE_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	MX_USART1_UART_Init();
 800128c:	f7ff ffbc 	bl	8001208 <MX_USART1_UART_Init>
	//MX_DMA_Init();
	//MX_USART2_UART_Init();
	BLE_State_Pin_Init();
 8001290:	f7ff ffe4 	bl	800125c <BLE_State_Pin_Init>
	HAL_UART_Receive_DMA(&huart1,(uint8_t *) buffer, 20);
 8001294:	2214      	movs	r2, #20
 8001296:	4903      	ldr	r1, [pc, #12]	; (80012a4 <BLE_Init+0x1c>)
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <BLE_Init+0x20>)
 800129a:	f005 fbf7 	bl	8006a8c <HAL_UART_Receive_DMA>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002fc 	.word	0x200002fc
 80012a8:	20000274 	.word	0x20000274

080012ac <HAL_UART_RxHalfCpltCallback>:



}*/
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)buffer,20);
 80012b4:	2214      	movs	r2, #20
 80012b6:	490f      	ldr	r1, [pc, #60]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <HAL_UART_RxHalfCpltCallback+0x4c>)
 80012ba:	f005 fbe7 	bl	8006a8c <HAL_UART_Receive_DMA>
	    cmp++;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_UART_RxHalfCpltCallback+0x50>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_UART_RxHalfCpltCallback+0x50>)
 80012c6:	6013      	str	r3, [r2, #0]
	  if ((buffer[0]=='\001'))
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d102      	bne.n	80012d6 <HAL_UART_RxHalfCpltCallback+0x2a>
	  {

	      History_Flag=1;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_UART_RxHalfCpltCallback+0x54>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
	  }
	  if ((buffer[0]=='\005')&&(buffer[19]=='\005'))
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d106      	bne.n	80012ec <HAL_UART_RxHalfCpltCallback+0x40>
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80012e0:	7cdb      	ldrb	r3, [r3, #19]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d102      	bne.n	80012ec <HAL_UART_RxHalfCpltCallback+0x40>
			History_Flag=0;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_UART_RxHalfCpltCallback+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002fc 	.word	0x200002fc
 80012f8:	20000274 	.word	0x20000274
 80012fc:	20000384 	.word	0x20000384
 8001300:	200002f8 	.word	0x200002f8

08001304 <Memory_Init>:
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
*/

void Memory_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <Memory_Init+0x84>)
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <Memory_Init+0x88>)
 800130e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  HAL_QSPI_DeInit(&QSPIHandle);
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <Memory_Init+0x84>)
 8001312:	f002 ffdf 	bl	80042d4 <HAL_QSPI_DeInit>

  /* System level initialization */
  QSPI_MspInit();
 8001316:	f000 fa67 	bl	80017e8 <QSPI_MspInit>

  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <Memory_Init+0x84>)
 800131c:	2201      	movs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <Memory_Init+0x84>)
 8001322:	2204      	movs	r2, #4
 8001324:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.FlashSize = 23;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <Memory_Init+0x84>)
 8001328:	2217      	movs	r2, #23
 800132a:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <Memory_Init+0x84>)
 800132e:	2210      	movs	r2, #16
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <Memory_Init+0x4a>
  {
    return 32U;
 800134a:	2320      	movs	r3, #32
 800134c:	e003      	b.n	8001356 <Memory_Init+0x52>
  }
  return __builtin_clz(value);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001356:	3b01      	subs	r3, #1
 8001358:	461a      	mov	r2, r3
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <Memory_Init+0x84>)
 800135c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <Memory_Init+0x84>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <Memory_Init+0x84>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]

  HAL_QSPI_Init(&QSPIHandle);
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <Memory_Init+0x84>)
 800136c:	f002 ff3c 	bl	80041e8 <HAL_QSPI_Init>

  /* QSPI memory reset */
  QSPI_ResetMemory(&QSPIHandle);
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <Memory_Init+0x84>)
 8001372:	f000 fa85 	bl	8001880 <QSPI_ResetMemory>

  /* Configuration of the dummy cucles on QSPI memory side */
  QSPI_DummyCyclesCfg(&QSPIHandle);
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <Memory_Init+0x84>)
 8001378:	f000 fac6 	bl	8001908 <QSPI_DummyCyclesCfg>

  USART2_UART_Init();
 800137c:	f000 fbc8 	bl	8001b10 <USART2_UART_Init>

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000388 	.word	0x20000388
 800138c:	a0001000 	.word	0xa0001000

08001390 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
void BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b092      	sub	sp, #72	; 0x48
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80013a2:	23eb      	movs	r3, #235	; 0xeb
 80013a4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80013a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61fb      	str	r3, [r7, #28]
  sCommand.Address           = ReadAddr;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80013ba:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80013c0:	230a      	movs	r3, #10
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = Size;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013cc:	2300      	movs	r3, #0
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013d0:	2300      	movs	r3, #0
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <BSP_QSPI_Read+0x68>)
 80013e0:	f002 ff9c 	bl	800431c <HAL_QSPI_Command>

  /* Reception of the data */
  HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	68f9      	ldr	r1, [r7, #12]
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <BSP_QSPI_Read+0x68>)
 80013ec:	f003 f88b 	bl	8004506 <HAL_QSPI_Receive>

  /* Data is read ==> Flag=0 */
  //Reset_Flag(ReadAddr);

}
 80013f0:	bf00      	nop
 80013f2:	3748      	adds	r7, #72	; 0x48
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000388 	.word	0x20000388

080013fc <Store_Data>:
  * @brief  Stores an amount of data to the QSPI memory.
  * @param  pData: Pointer to data to be stored
  * @param  Size: Size of data to store
 */
void Store_Data(uint8_t *pData, int Size)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit_IT(&huart2, (uint8_t*)"incrémenter compteur",20);
	if (store==1)
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <Store_Data+0x70>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d12a      	bne.n	8001464 <Store_Data+0x68>
	{

		if (Mem_pleine(Size))
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f000 fc16 	bl	8001c40 <Mem_pleine>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <Store_Data+0x26>
				{
				  Erase_Subsector(Size);
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f000 fd04 	bl	8001e28 <Erase_Subsector>
 8001420:	e003      	b.n	800142a <Store_Data+0x2e>
				}
		else
				{
				  Write_Data(pData,Size);
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fc77 	bl	8001d18 <Write_Data>
				}

		// Reset du compteur :
		if ((comp==compteur_final)&&(Est_Vide(Hexadecimal(comp*Size),Size)==false))
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <Store_Data+0x74>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <Store_Data+0x78>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d116      	bne.n	8001464 <Store_Data+0x68>
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <Store_Data+0x74>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fb8f 	bl	8001b64 <Hexadecimal>
 8001446:	4602      	mov	r2, r0
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f000 fba3 	bl	8001b98 <Est_Vide>
 8001452:	4603      	mov	r3, r0
 8001454:	f083 0301 	eor.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <Store_Data+0x68>
				{
				   comp=0;
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <Store_Data+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
				}
	}
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000451 	.word	0x20000451
 8001470:	20000004 	.word	0x20000004
 8001474:	20000000 	.word	0x20000000

08001478 <get_history>:

void get_history(uint8_t buff[13], int size,bool *flg)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int debut=0;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buffer[13];

	if (call_flg == false)
 8001488:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <get_history+0x1cc>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80e4 	beq.w	8001660 <get_history+0x1e8>
    {
        // recevoir l'intervalle de l'historique
		v= false;
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <get_history+0x1d0>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		//comp=13398;
		History_Range(&epoch1_value,&epoch2_value);
 800149e:	496b      	ldr	r1, [pc, #428]	; (800164c <get_history+0x1d4>)
 80014a0:	486b      	ldr	r0, [pc, #428]	; (8001650 <get_history+0x1d8>)
 80014a2:	f7ff fdf1 	bl	8001088 <History_Range>
        		  huart1.RxXferCount = sizeof(rxbuffer);
        	  }*/

        // chercher début de l'historique

        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <get_history+0x1dc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fb57 	bl	8001b64 <Hexadecimal>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4610      	mov	r0, r2
 80014be:	f000 fb6b 	bl	8001b98 <Est_Vide>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d130      	bne.n	800152a <get_history+0xb2>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 80014c8:	4b62      	ldr	r3, [pc, #392]	; (8001654 <get_history+0x1dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fb46 	bl	8001b64 <Hexadecimal>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f000 fb5a 	bl	8001b98 <Est_Vide>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f083 0301 	eor.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
        if ((Est_Vide(Hexadecimal(compteur_final*size),size))||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d026      	beq.n	800153e <get_history+0xc6>
        ((!Est_Vide(Hexadecimal(compteur_final*size),size))&&(!Est_Vide(Hexadecimal(0),size))&&(hexa_of_epoch(0,size)<hexa_of_epoch(compteur_final,size))))
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 fb37 	bl	8001b64 <Hexadecimal>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f000 fb4b 	bl	8001b98 <Est_Vide>
 8001502:	4603      	mov	r3, r0
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d017      	beq.n	800153e <get_history+0xc6>
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	2000      	movs	r0, #0
 8001512:	f000 fd1d 	bl	8001f50 <hexa_of_epoch>
 8001516:	4604      	mov	r4, r0
 8001518:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <get_history+0x1dc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fd16 	bl	8001f50 <hexa_of_epoch>
 8001524:	4603      	mov	r3, r0
 8001526:	429c      	cmp	r4, r3
 8001528:	d209      	bcs.n	800153e <get_history+0xc6>
            {
                debut = start_of_history(0,comp,epoch1_value,size);
 800152a:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <get_history+0x1e0>)
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <get_history+0x1d8>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fd47 	bl	8001fc8 <start_of_history>
 800153a:	6278      	str	r0, [r7, #36]	; 0x24
 800153c:	e07b      	b.n	8001636 <get_history+0x1be>
            }
        else if((Est_Vide(Hexadecimal(0),size))&&(!Est_Vide(Hexadecimal(256*size),size)))
 800153e:	2000      	movs	r0, #0
 8001540:	f000 fb10 	bl	8001b64 <Hexadecimal>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f000 fb24 	bl	8001b98 <Est_Vide>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d01b      	beq.n	800158e <get_history+0x116>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fb02 	bl	8001b64 <Hexadecimal>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f000 fb16 	bl	8001b98 <Est_Vide>
 800156c:	4603      	mov	r3, r0
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00a      	beq.n	800158e <get_history+0x116>
            {
                debut = start_of_history(256,compteur_final,epoch1_value,size);
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <get_history+0x1dc>)
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <get_history+0x1d8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001586:	f000 fd1f 	bl	8001fc8 <start_of_history>
 800158a:	6278      	str	r0, [r7, #36]	; 0x24
 800158c:	e053      	b.n	8001636 <get_history+0x1be>
            }
        else
            {
                if((hexa_of_epoch(((comp/256)+1)*256,size)<= epoch1_value)&&(hexa_of_epoch(compteur_final,size)>= epoch1_value))
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <get_history+0x1e0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <get_history+0x120>
 8001596:	33ff      	adds	r3, #255	; 0xff
 8001598:	121b      	asrs	r3, r3, #8
 800159a:	3301      	adds	r3, #1
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fcd5 	bl	8001f50 <hexa_of_epoch>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <get_history+0x1d8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d81b      	bhi.n	80015e8 <get_history+0x170>
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <get_history+0x1dc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fcca 	bl	8001f50 <hexa_of_epoch>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <get_history+0x1d8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d310      	bcc.n	80015e8 <get_history+0x170>
                    debut = start_of_history(((comp/256)+1)*256,compteur_final,epoch1_value,size);
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <get_history+0x1e0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da00      	bge.n	80015d0 <get_history+0x158>
 80015ce:	33ff      	adds	r3, #255	; 0xff
 80015d0:	121b      	asrs	r3, r3, #8
 80015d2:	3301      	adds	r3, #1
 80015d4:	0218      	lsls	r0, r3, #8
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <get_history+0x1dc>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <get_history+0x1d8>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f000 fcf2 	bl	8001fc8 <start_of_history>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24
 80015e6:	e026      	b.n	8001636 <get_history+0x1be>

                else if ((hexa_of_epoch(0,size)<= epoch1_value)&&(hexa_of_epoch(comp,size)>= epoch1_value))
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 fcb0 	bl	8001f50 <hexa_of_epoch>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <get_history+0x1d8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d814      	bhi.n	8001624 <get_history+0x1ac>
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <get_history+0x1e0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fca5 	bl	8001f50 <hexa_of_epoch>
 8001606:	4602      	mov	r2, r0
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <get_history+0x1d8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d309      	bcc.n	8001624 <get_history+0x1ac>
                    debut = start_of_history(0,comp,epoch1_value,size);
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <get_history+0x1e0>)
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <get_history+0x1d8>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2000      	movs	r0, #0
 800161c:	f000 fcd4 	bl	8001fc8 <start_of_history>
 8001620:	6278      	str	r0, [r7, #36]	; 0x24
 8001622:	e008      	b.n	8001636 <get_history+0x1be>
                else
                    debut = ((comp/256)+1)*256;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <get_history+0x1e0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da00      	bge.n	800162e <get_history+0x1b6>
 800162c:	33ff      	adds	r3, #255	; 0xff
 800162e:	121b      	asrs	r3, r3, #8
 8001630:	3301      	adds	r3, #1
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
            }
        call_flg = true;
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <get_history+0x1cc>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
        comteur_history = debut;
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <get_history+0x1e4>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e07a      	b.n	800173a <get_history+0x2c2>
 8001644:	200004b0 	.word	0x200004b0
 8001648:	200004b1 	.word	0x200004b1
 800164c:	2000049c 	.word	0x2000049c
 8001650:	20000498 	.word	0x20000498
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004
 800165c:	20000454 	.word	0x20000454
        //flg=call_flg;
    }
    else
    {
    	nv_epoch1_value = epoch1_value;
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <get_history+0x2d4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <get_history+0x2d8>)
 8001666:	6013      	str	r3, [r2, #0]
    	nv_epoch2_value = epoch2_value;
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <get_history+0x2dc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <get_history+0x2e0>)
 800166e:	6013      	str	r3, [r2, #0]
    	History_Range(&start_epoch_value,&end_epoch_value);
 8001670:	493a      	ldr	r1, [pc, #232]	; (800175c <get_history+0x2e4>)
 8001672:	483b      	ldr	r0, [pc, #236]	; (8001760 <get_history+0x2e8>)
 8001674:	f7ff fd08 	bl	8001088 <History_Range>
    	// envoyer les données

        BSP_QSPI_Read(buffer,Hexadecimal(comteur_history*size),size);
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <get_history+0x2ec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fa6e 	bl	8001b64 <Hexadecimal>
 8001688:	4601      	mov	r1, r0
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe7d 	bl	8001390 <BSP_QSPI_Read>
        Inversion(buffer,buff);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 ff8f 	bl	80025c0 <Inversion>
        //HAL_UART_Transmit(&huart2, (uint8_t*)buff,16,1000);
        //HAL_UART_Transmit(&huart2, (uint8_t*)"\n",2,100);
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)"compteur_history\n\n",20);
 80016a2:	2214      	movs	r2, #20
 80016a4:	4930      	ldr	r1, [pc, #192]	; (8001768 <get_history+0x2f0>)
 80016a6:	4831      	ldr	r0, [pc, #196]	; (800176c <get_history+0x2f4>)
 80016a8:	f005 f92c 	bl	8006904 <HAL_UART_Transmit_IT>
       /* if((comteur_history==compteur_final+1)||((hexa_of_epoch(comteur_history,size) >= epoch2_value)||(comteur_history==comp)))
        	comteur_history=0;*/

            if ((nv_epoch1_value != start_epoch_value)||(nv_epoch2_value != end_epoch_value))
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <get_history+0x2d8>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <get_history+0x2e8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d105      	bne.n	80016c4 <get_history+0x24c>
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <get_history+0x2e0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <get_history+0x2e4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d002      	beq.n	80016ca <get_history+0x252>
            	call_flg=false;
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <get_history+0x2f8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
			if(comteur_history==compteur_final+1)
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <get_history+0x2fc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <get_history+0x2ec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d102      	bne.n	80016de <get_history+0x266>
							comteur_history=0;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <get_history+0x2ec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

			//valeur = hexa_of_epoch(comteur_history,size);
			//v= valeur >= epoch2_value;
			if (((hexa_of_epoch(comteur_history,size) >= epoch2_value)&&(!Est_Vide(Hexadecimal(comteur_history*size),size)))||(comteur_history==comp))
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <get_history+0x2ec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fc33 	bl	8001f50 <hexa_of_epoch>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <get_history+0x2dc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d313      	bcc.n	800171c <get_history+0x2a4>
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <get_history+0x2ec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fa30 	bl	8001b64 <Hexadecimal>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f000 fa44 	bl	8001b98 <Est_Vide>
 8001710:	4603      	mov	r3, r0
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <get_history+0x2b0>
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <get_history+0x2ec>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <get_history+0x300>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d108      	bne.n	800173a <get_history+0x2c2>
			{
				call_flg=false;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <get_history+0x2f8>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
				v=true;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <get_history+0x304>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
				comteur_history=0;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <get_history+0x2ec>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
			}



    }
	*flg=v;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <get_history+0x304>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	701a      	strb	r2, [r3, #0]

}
 8001742:	bf00      	nop
 8001744:	372c      	adds	r7, #44	; 0x2c
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000498 	.word	0x20000498
 8001750:	200004a8 	.word	0x200004a8
 8001754:	2000049c 	.word	0x2000049c
 8001758:	200004ac 	.word	0x200004ac
 800175c:	200004a4 	.word	0x200004a4
 8001760:	200004a0 	.word	0x200004a0
 8001764:	20000454 	.word	0x20000454
 8001768:	080118ac 	.word	0x080118ac
 800176c:	200003cc 	.word	0x200003cc
 8001770:	200004b0 	.word	0x200004b0
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004
 800177c:	200004b1 	.word	0x200004b1

08001780 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory.
  * @param  BlockAddress: Block address to erase
  * @retval QSPI memory status
  */
void BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	; 0x40
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 800178e:	2320      	movs	r3, #32
 8001790:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  QSPI_WriteEnable(&QSPIHandle);
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <BSP_QSPI_Erase_Block+0x64>)
 80017bc:	f000 f922 	bl	8001a04 <QSPI_WriteEnable>

  /* Send the command */
  HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <BSP_QSPI_Erase_Block+0x64>)
 80017cc:	f002 fda6 	bl	800431c <HAL_QSPI_Command>

  /* Configure automatic polling mode to wait for end of erase */
  QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME);
 80017d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <BSP_QSPI_Erase_Block+0x64>)
 80017d6:	f000 f961 	bl	8001a9c <QSPI_AutoPollingMemReady>

}
 80017da:	bf00      	nop
 80017dc:	3740      	adds	r7, #64	; 0x40
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000388 	.word	0x20000388

080017e8 <QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
static void QSPI_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <QSPI_MspInit+0x90>)
 80017f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <QSPI_MspInit+0x90>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6513      	str	r3, [r2, #80]	; 0x50
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <QSPI_MspInit+0x90>)
 80017fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <QSPI_MspInit+0x90>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <QSPI_MspInit+0x90>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <QSPI_MspInit+0x90>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <QSPI_MspInit+0x90>)
 8001818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800181c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <QSPI_MspInit+0x90>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <QSPI_MspInit+0x90>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <QSPI_MspInit+0x90>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 8001836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001848:	230a      	movs	r3, #10
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <QSPI_MspInit+0x94>)
 8001854:	f002 f95c 	bl	8003b10 <HAL_GPIO_Init>

  /* QSPI CLK, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8001858:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800185c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4619      	mov	r1, r3
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <QSPI_MspInit+0x94>)
 800186a:	f002 f951 	bl	8003b10 <HAL_GPIO_Init>
}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	48001000 	.word	0x48001000

08001880 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b090      	sub	sp, #64	; 0x40
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800188e:	2366      	movs	r3, #102	; 0x66
 8001890:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4619      	mov	r1, r3
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <QSPI_ResetMemory+0x84>)
 80018ba:	f002 fd2f 	bl	800431c <HAL_QSPI_Command>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e019      	b.n	80018fc <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80018c8:	2399      	movs	r3, #153	; 0x99
 80018ca:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4619      	mov	r1, r3
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <QSPI_ResetMemory+0x84>)
 80018d8:	f002 fd20 	bl	800431c <HAL_QSPI_Command>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00a      	b.n	80018fc <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80018e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <QSPI_ResetMemory+0x84>)
 80018ec:	f000 f8d6 	bl	8001a9c <QSPI_AutoPollingMemReady>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3740      	adds	r7, #64	; 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000388 	.word	0x20000388

08001908 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	; 0x50
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8001916:	2385      	movs	r3, #133	; 0x85
 8001918:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  sCommand.NbData            = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001934:	2300      	movs	r3, #0
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001938:	2300      	movs	r3, #0
 800193a:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4619      	mov	r1, r3
 8001946:	482e      	ldr	r0, [pc, #184]	; (8001a00 <QSPI_DummyCyclesCfg+0xf8>)
 8001948:	f002 fce8 	bl	800431c <HAL_QSPI_Command>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e04f      	b.n	80019f6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001956:	f107 030b 	add.w	r3, r7, #11
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4619      	mov	r1, r3
 8001960:	4827      	ldr	r0, [pc, #156]	; (8001a00 <QSPI_DummyCyclesCfg+0xf8>)
 8001962:	f002 fdd0 	bl	8004506 <HAL_QSPI_Receive>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e042      	b.n	80019f6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001970:	4823      	ldr	r0, [pc, #140]	; (8001a00 <QSPI_DummyCyclesCfg+0xf8>)
 8001972:	f000 f847 	bl	8001a04 <QSPI_WriteEnable>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e03a      	b.n	80019f6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001980:	2381      	movs	r3, #129	; 0x81
 8001982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	b25b      	sxtb	r3, r3
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	b25a      	sxtb	r2, r3
 800198e:	23f0      	movs	r3, #240	; 0xf0
 8001990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800199a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 800199e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <QSPI_DummyCyclesCfg+0xa0>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e003      	b.n	80019b0 <QSPI_DummyCyclesCfg+0xa8>
  return __builtin_clz(value);
 80019a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	230a      	movs	r3, #10
 80019b4:	408b      	lsls	r3, r1
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	72fb      	strb	r3, [r7, #11]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <QSPI_DummyCyclesCfg+0xf8>)
 80019cc:	f002 fca6 	bl	800431c <HAL_QSPI_Command>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <QSPI_DummyCyclesCfg+0xd2>
  {
    return QSPI_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00d      	b.n	80019f6 <QSPI_DummyCyclesCfg+0xee>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019da:	f107 030b 	add.w	r3, r7, #11
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4619      	mov	r1, r3
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <QSPI_DummyCyclesCfg+0xf8>)
 80019e6:	f002 fcf7 	bl	80043d8 <HAL_QSPI_Transmit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <QSPI_DummyCyclesCfg+0xec>
  {
    return QSPI_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <QSPI_DummyCyclesCfg+0xee>
  }

  return QSPI_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3750      	adds	r7, #80	; 0x50
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000388 	.word	0x20000388

08001a04 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b096      	sub	sp, #88	; 0x58
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001a12:	2306      	movs	r3, #6
 8001a14:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4816      	ldr	r0, [pc, #88]	; (8001a98 <QSPI_WriteEnable+0x94>)
 8001a3e:	f002 fc6d 	bl	800431c <HAL_QSPI_Command>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e020      	b.n	8001a8e <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  sConfig.Match           = N25Q128A_SR_WREN;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WREN;
 8001a50:	2302      	movs	r3, #2
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001a60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a64:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001a66:	2305      	movs	r3, #5
 8001a68:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	f107 0120 	add.w	r1, r7, #32
 8001a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <QSPI_WriteEnable+0x94>)
 8001a7e:	f002 fde4 	bl	800464a <HAL_QSPI_AutoPolling>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3758      	adds	r7, #88	; 0x58
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000388 	.word	0x20000388

08001a9c <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001aac:	2305      	movs	r3, #5
 8001aae:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001aca:	2300      	movs	r3, #0
 8001acc:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001ae8:	f107 0208 	add.w	r2, r7, #8
 8001aec:	f107 0120 	add.w	r1, r7, #32
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <QSPI_AutoPollingMemReady+0x70>)
 8001af4:	f002 fda9 	bl	800464a <HAL_QSPI_AutoPolling>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3758      	adds	r7, #88	; 0x58
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000388 	.word	0x20000388

08001b10 <USART2_UART_Init>:

static void USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <USART2_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart2);
 8001b52:	4802      	ldr	r0, [pc, #8]	; (8001b5c <USART2_UART_Init+0x4c>)
 8001b54:	f004 fdf4 	bl	8006740 <HAL_UART_Init>

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200003cc 	.word	0x200003cc
 8001b60:	40004400 	.word	0x40004400

08001b64 <Hexadecimal>:

/**
 * convert decimal to hexadecimal
 */
  uint32_t Hexadecimal(int nombre)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	uint32_t Adresse;
	char Hexa[10];
	sprintf(Hexa,"%x",nombre);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <Hexadecimal+0x30>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00b f973 	bl	800ce60 <siprintf>
    Adresse = strtoul(Hexa,NULL,16);
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2210      	movs	r2, #16
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00c f952 	bl	800de2c <strtoul>
 8001b88:	6178      	str	r0, [r7, #20]
    return Adresse;
 8001b8a:	697b      	ldr	r3, [r7, #20]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	080118c0 	.word	0x080118c0

08001b98 <Est_Vide>:

/**
 * tester si le block d'adresse ADDR est vide ou nn
 */
static bool Est_Vide(uint32_t ADDR, uint32_t Size)
{
 8001b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
 8001ba4:	466b      	mov	r3, sp
 8001ba6:	461e      	mov	r6, r3
	uint8_t buffer[Size];
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	460b      	mov	r3, r1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4688      	mov	r8, r1
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bca:	2300      	movs	r3, #0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	461d      	mov	r5, r3
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	1dcb      	adds	r3, r1, #7
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bea:	466b      	mov	r3, sp
 8001bec:	3300      	adds	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
	int i=0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
	int nb=0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
	BSP_QSPI_Read(buffer, ADDR, Size);
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	f7ff fbc7 	bl	8001390 <BSP_QSPI_Read>
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001c02:	e005      	b.n	8001c10 <Est_Vide+0x78>
		{
			 nb++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
		     i++;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
	while (((int)(buffer[i])== 255)&&(i<Size))
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2bff      	cmp	r3, #255	; 0xff
 8001c1a:	d103      	bne.n	8001c24 <Est_Vide+0x8c>
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8ef      	bhi.n	8001c04 <Est_Vide+0x6c>
		}
	if (nb==Size)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d101      	bne.n	8001c30 <Est_Vide+0x98>
		return true;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <Est_Vide+0x9a>
	else
		return false;
 8001c30:	2300      	movs	r3, #0
 8001c32:	46b5      	mov	sp, r6

}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001c40 <Mem_pleine>:
/**
 * Tester si la mémoire est pleine ou non
 */

 static bool Mem_pleine(int Size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	int nb_data_per_subsector=(int)(4096/Size);
 8001c48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c52:	60bb      	str	r3, [r7, #8]
	int i=nb_data_per_subsector-1;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001c5a:	e003      	b.n	8001c64 <Mem_pleine+0x24>
		{
		  i = i+ nb_data_per_subsector;
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
	while ((i<=compteur_final)&&(Est_Vide(Hexadecimal(i*Size),Size)==false))
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <Mem_pleine+0x70>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dc12      	bgt.n	8001c94 <Mem_pleine+0x54>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff74 	bl	8001b64 <Hexadecimal>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff ff88 	bl	8001b98 <Est_Vide>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 0301 	eor.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e3      	bne.n	8001c5c <Mem_pleine+0x1c>
		}
	if (i==(compteur_final+nb_data_per_subsector))
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <Mem_pleine+0x70>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d101      	bne.n	8001ca6 <Mem_pleine+0x66>
		return true;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <Mem_pleine+0x68>
	else
		return false;
 8001ca6:	2300      	movs	r3, #0

}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <inversion_hex>:

 /**
  * la fonction ci-dessous permet d'inverser tableau de caractères hexadécimale de la façon suivante : "acbe12h5" ==> "h512beac"
  */
static void inversion_hex(char hex[8], char hexinv[8])
 {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
     int k=0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
     for(int i=6;i>=0;i=i-2)
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e018      	b.n	8001cfa <inversion_hex+0x46>
     {
         for(int j=i;j<i+2;j++)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e00d      	b.n	8001cea <inversion_hex+0x36>
         {
             hexinv[k]=hex[j];
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	441a      	add	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	440b      	add	r3, r1
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
             k++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
         for(int j=i;j<i+2;j++)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3301      	adds	r3, #1
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	ddec      	ble.n	8001cce <inversion_hex+0x1a>
     for(int i=6;i>=0;i=i-2)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3b02      	subs	r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dae3      	bge.n	8001cc8 <inversion_hex+0x14>
         }
     }
     hexinv[k]='\0';
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
 }
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <Write_Data>:

/**
 * la fonction ci-dessous permet de chercher une case vide dans la mémoire puis écrire les données
 */
static void Write_Data(uint8_t *pData, int Size)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	int nb_data_per_subsector = (int)(4096/Size);
 8001d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d2c:	613b      	str	r3, [r7, #16]
	uint32_t ADDR = Hexadecimal(comp*Size);
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <Write_Data+0x104>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff13 	bl	8001b64 <Hexadecimal>
 8001d3e:	60f8      	str	r0, [r7, #12]
	if (Est_Vide(ADDR,Size)==true)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff ff27 	bl	8001b98 <Est_Vide>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <Write_Data+0x40>
		{
			a=true;
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <Write_Data+0x108>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
					comp = j;
				}

			}
		}
}
 8001d56:	e05c      	b.n	8001e12 <Write_Data+0xfa>
			if ((comp%nb_data_per_subsector == 0)&&(a==false))
 8001d58:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <Write_Data+0x104>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d62:	6939      	ldr	r1, [r7, #16]
 8001d64:	fb01 f202 	mul.w	r2, r1, r2
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d151      	bne.n	8001e12 <Write_Data+0xfa>
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <Write_Data+0x108>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d04a      	beq.n	8001e12 <Write_Data+0xfa>
				if ((Est_Vide(Hexadecimal((comp+(nb_data_per_subsector-1))*Size),Size)==false)&&((comp+(nb_data_per_subsector-1)) < compteur_final))
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <Write_Data+0x104>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fee9 	bl	8001b64 <Hexadecimal>
 8001d92:	4602      	mov	r2, r0
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f7ff fefd 	bl	8001b98 <Est_Vide>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <Write_Data+0xb2>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <Write_Data+0x104>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	441a      	add	r2, r3
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <Write_Data+0x10c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	da06      	bge.n	8001dca <Write_Data+0xb2>
					comp = comp + nb_data_per_subsector;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <Write_Data+0x104>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <Write_Data+0x104>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	e023      	b.n	8001e12 <Write_Data+0xfa>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <Write_Data+0x104>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e012      	b.n	8001dfa <Write_Data+0xe2>
						  if (Est_Vide(Hexadecimal(j*Size),Size))
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fec1 	bl	8001b64 <Hexadecimal>
 8001de2:	4602      	mov	r2, r0
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7ff fed5 	bl	8001b98 <Est_Vide>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <Write_Data+0xf2>
				    for(j=comp+1;j<comp+nb_data_per_subsector;j++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <Write_Data+0x104>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbe5      	blt.n	8001dd4 <Write_Data+0xbc>
 8001e08:	e000      	b.n	8001e0c <Write_Data+0xf4>
						  break;
 8001e0a:	bf00      	nop
					comp = j;
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <Write_Data+0x104>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	20000450 	.word	0x20000450
 8001e24:	20000000 	.word	0x20000000

08001e28 <Erase_Subsector>:
/**
 * la fonction ci dessous permet d'effacer un subsector de la mémoire de façon circulaire
 */
static void Erase_Subsector(int Size)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]

	    int nb_data_per_subsector = (int)(4096/Size); // = 256
 8001e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
	    uint8_t buff1[4], buff2[4];
	    BSP_QSPI_Read(buff1,0,4);
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2204      	movs	r2, #4
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff faa3 	bl	8001390 <BSP_QSPI_Read>
	    sprintf(hex, "%02x%02x%02x%02x", buff1[0], buff1[1], buff1[2], buff1[3]);
 8001e4a:	7c3b      	ldrb	r3, [r7, #16]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	7c7b      	ldrb	r3, [r7, #17]
 8001e50:	4618      	mov	r0, r3
 8001e52:	7cbb      	ldrb	r3, [r7, #18]
 8001e54:	7cfa      	ldrb	r2, [r7, #19]
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	4932      	ldr	r1, [pc, #200]	; (8001f28 <Erase_Subsector+0x100>)
 8001e60:	4832      	ldr	r0, [pc, #200]	; (8001f2c <Erase_Subsector+0x104>)
 8001e62:	f00a fffd 	bl	800ce60 <siprintf>
	    inversion_hex(hex,hexinv);
 8001e66:	4932      	ldr	r1, [pc, #200]	; (8001f30 <Erase_Subsector+0x108>)
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <Erase_Subsector+0x104>)
 8001e6a:	f7ff ff23 	bl	8001cb4 <inversion_hex>
	    value = strtoul(hexinv,NULL,16);
 8001e6e:	2210      	movs	r2, #16
 8001e70:	2100      	movs	r1, #0
 8001e72:	482f      	ldr	r0, [pc, #188]	; (8001f30 <Erase_Subsector+0x108>)
 8001e74:	f00b ffda 	bl	800de2c <strtoul>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <Erase_Subsector+0x10c>)
 8001e7c:	6013      	str	r3, [r2, #0]
	    min = value;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <Erase_Subsector+0x10c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <Erase_Subsector+0x110>)
 8001e84:	6013      	str	r3, [r2, #0]
	    int j;
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e035      	b.n	8001ef8 <Erase_Subsector+0xd0>
	      	     {
	      	    	 BSP_QSPI_Read(buff2,Hexadecimal(i*16),4);
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe67 	bl	8001b64 <Hexadecimal>
 8001e96:	4601      	mov	r1, r0
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fa76 	bl	8001390 <BSP_QSPI_Read>
	      	         sprintf(hex2, "%02x%02x%02x%02x", buff2[0], buff2[1], buff2[2], buff2[3]);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460a      	mov	r2, r1
 8001eb8:	491b      	ldr	r1, [pc, #108]	; (8001f28 <Erase_Subsector+0x100>)
 8001eba:	4820      	ldr	r0, [pc, #128]	; (8001f3c <Erase_Subsector+0x114>)
 8001ebc:	f00a ffd0 	bl	800ce60 <siprintf>
	      	         inversion_hex(hex2,hex2inv);
 8001ec0:	491f      	ldr	r1, [pc, #124]	; (8001f40 <Erase_Subsector+0x118>)
 8001ec2:	481e      	ldr	r0, [pc, #120]	; (8001f3c <Erase_Subsector+0x114>)
 8001ec4:	f7ff fef6 	bl	8001cb4 <inversion_hex>
	      	         value2 = strtoul(hex2inv,NULL,16);
 8001ec8:	2210      	movs	r2, #16
 8001eca:	2100      	movs	r1, #0
 8001ecc:	481c      	ldr	r0, [pc, #112]	; (8001f40 <Erase_Subsector+0x118>)
 8001ece:	f00b ffad 	bl	800de2c <strtoul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <Erase_Subsector+0x11c>)
 8001ed6:	6013      	str	r3, [r2, #0]
	      	         if (value2 <= min)
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <Erase_Subsector+0x11c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <Erase_Subsector+0x110>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d805      	bhi.n	8001ef0 <Erase_Subsector+0xc8>
	      	         {
	      	             min = value2;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <Erase_Subsector+0x11c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <Erase_Subsector+0x110>)
 8001eea:	6013      	str	r3, [r2, #0]
	      	             j=i;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	61fb      	str	r3, [r7, #28]
	      	     for(int i =0;i<=(compteur_final-255);i=i+nb_data_per_subsector)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <Erase_Subsector+0x120>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3bfe      	subs	r3, #254	; 0xfe
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbc3      	blt.n	8001e8c <Erase_Subsector+0x64>
	      	         }
	      	     }
	    BSP_QSPI_Erase_Block(Hexadecimal(j*Size));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fe29 	bl	8001b64 <Hexadecimal>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc33 	bl	8001780 <BSP_QSPI_Erase_Block>
	    comp= j;
 8001f1a:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <Erase_Subsector+0x124>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	6013      	str	r3, [r2, #0]

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	080118c4 	.word	0x080118c4
 8001f2c:	20000458 	.word	0x20000458
 8001f30:	20000464 	.word	0x20000464
 8001f34:	2000048c 	.word	0x2000048c
 8001f38:	20000488 	.word	0x20000488
 8001f3c:	20000470 	.word	0x20000470
 8001f40:	2000047c 	.word	0x2000047c
 8001f44:	20000490 	.word	0x20000490
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <hexa_of_epoch>:

 uint32_t hexa_of_epoch(int compteur,int size)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint8_t buffer[4];
  BSP_QSPI_Read(buffer,Hexadecimal(compteur*size),4);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fdfe 	bl	8001b64 <Hexadecimal>
 8001f68:	4601      	mov	r1, r0
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fa0d 	bl	8001390 <BSP_QSPI_Read>
  sprintf(hex, "%02x%02x%02x%02x", buffer[0], buffer[1], buffer[2], buffer[3]);
 8001f76:	7b3b      	ldrb	r3, [r7, #12]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	7b7b      	ldrb	r3, [r7, #13]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	490b      	ldr	r1, [pc, #44]	; (8001fb8 <hexa_of_epoch+0x68>)
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <hexa_of_epoch+0x6c>)
 8001f8e:	f00a ff67 	bl	800ce60 <siprintf>
  inversion_hex(hex,hexinv);
 8001f92:	490b      	ldr	r1, [pc, #44]	; (8001fc0 <hexa_of_epoch+0x70>)
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <hexa_of_epoch+0x6c>)
 8001f96:	f7ff fe8d 	bl	8001cb4 <inversion_hex>
  hexa_value = strtoul(hexinv,NULL,16);
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4808      	ldr	r0, [pc, #32]	; (8001fc0 <hexa_of_epoch+0x70>)
 8001fa0:	f00b ff44 	bl	800de2c <strtoul>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <hexa_of_epoch+0x74>)
 8001fa8:	6013      	str	r3, [r2, #0]
  return hexa_value;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <hexa_of_epoch+0x74>)
 8001fac:	681b      	ldr	r3, [r3, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	080118c4 	.word	0x080118c4
 8001fbc:	20000458 	.word	0x20000458
 8001fc0:	20000464 	.word	0x20000464
 8001fc4:	20000494 	.word	0x20000494

08001fc8 <start_of_history>:
 int start_of_history(int debut, int fin, uint32_t x,int size)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
    int milieu;
    if(x < hexa_of_epoch(debut,size))
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff ffb9 	bl	8001f50 <hexa_of_epoch>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d222      	bcs.n	800202c <start_of_history+0x64>
       return debut;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	e025      	b.n	8002036 <start_of_history+0x6e>
    else
    {
        while(debut <= fin)
        {
            milieu = (debut+fin)/2;
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4413      	add	r3, r2
 8001ff0:	0fda      	lsrs	r2, r3, #31
 8001ff2:	4413      	add	r3, r2
 8001ff4:	105b      	asrs	r3, r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
            if (hexa_of_epoch(milieu,size)==x)
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ffa8 	bl	8001f50 <hexa_of_epoch>
 8002000:	4602      	mov	r2, r0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <start_of_history+0x46>
             {
                 debut=milieu;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	60fb      	str	r3, [r7, #12]
                 break;
 800200c:	e012      	b.n	8002034 <start_of_history+0x6c>
             }
             else if(x < hexa_of_epoch(milieu,size))
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f7ff ff9d 	bl	8001f50 <hexa_of_epoch>
 8002016:	4602      	mov	r2, r0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4293      	cmp	r3, r2
 800201c:	d203      	bcs.n	8002026 <start_of_history+0x5e>
                fin = milieu-1;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3b01      	subs	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	e002      	b.n	800202c <start_of_history+0x64>
            else
               debut = milieu +1;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
        while(debut <= fin)
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	ddda      	ble.n	8001fea <start_of_history+0x22>
        }
      return debut;
 8002034:	68fb      	ldr	r3, [r7, #12]
    }

}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_UART_TxCpltCallback>:

/**
 * la fonction ci-dessous est appellé lorsqu'une donnée est prète à stocker dans la mémoire
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if (call_flg==true)
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_UART_TxCpltCallback+0x38>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_UART_TxCpltCallback+0x1c>
	    comteur_history++;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_UART_TxCpltCallback+0x3c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_UART_TxCpltCallback+0x3c>)
 8002058:	6013      	str	r3, [r2, #0]
		store=1;
		comp++;
	}
	/*increment=1;
	comteur_history++;*/
}
 800205a:	e007      	b.n	800206c <HAL_UART_TxCpltCallback+0x2c>
		store=1;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_UART_TxCpltCallback+0x40>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
		comp++;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_UART_TxCpltCallback+0x44>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_UART_TxCpltCallback+0x44>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	200004b0 	.word	0x200004b0
 800207c:	20000454 	.word	0x20000454
 8002080:	20000451 	.word	0x20000451
 8002084:	20000004 	.word	0x20000004

08002088 <Get_Data>:


/* Exported Functions -----------------------------------------------------------------------------*/

void Get_Data(uint8_t buffer[14],uint8_t buff[14], int  * compteur_vit_null)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af04      	add	r7, sp, #16
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]

	if (Flag == 1)
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <Get_Data+0x100>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d170      	bne.n	800217e <Get_Data+0xf6>
	  {

		// Extraction de la ligne GPRMC
		indice=0;
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <Get_Data+0x104>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
		strcpy(Txdata,(char*)Rxdata);
 80020a2:	493b      	ldr	r1, [pc, #236]	; (8002190 <Get_Data+0x108>)
 80020a4:	483b      	ldr	r0, [pc, #236]	; (8002194 <Get_Data+0x10c>)
 80020a6:	f00a ff79 	bl	800cf9c <strcpy>
		p= strstr(Txdata,"GPRMC");
 80020aa:	493b      	ldr	r1, [pc, #236]	; (8002198 <Get_Data+0x110>)
 80020ac:	4839      	ldr	r0, [pc, #228]	; (8002194 <Get_Data+0x10c>)
 80020ae:	f00a ff7d 	bl	800cfac <strstr>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a39      	ldr	r2, [pc, #228]	; (800219c <Get_Data+0x114>)
 80020b6:	6013      	str	r3, [r2, #0]
		// chercher l'indice de '\n'(retour à la ligne) dans la ligne de GPRMC
		x = strchr(p, '\n');
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <Get_Data+0x114>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	210a      	movs	r1, #10
 80020be:	4618      	mov	r0, r3
 80020c0:	f00a ff5f 	bl	800cf82 <strchr>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a36      	ldr	r2, [pc, #216]	; (80021a0 <Get_Data+0x118>)
 80020c8:	6013      	str	r3, [r2, #0]
		ind = x - p;
 80020ca:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <Get_Data+0x118>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <Get_Data+0x114>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <Get_Data+0x11c>)
 80020d6:	6013      	str	r3, [r2, #0]
		// continuer l'extraction
		if (*p == 'G')
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <Get_Data+0x114>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b47      	cmp	r3, #71	; 0x47
 80020e0:	d14d      	bne.n	800217e <Get_Data+0xf6>
		 {
			for( indice =0;indice<=ind;indice++)
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <Get_Data+0x104>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e014      	b.n	8002114 <Get_Data+0x8c>
			        {

				     	 Ligne_GPRMC[indice]=*p;
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <Get_Data+0x114>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <Get_Data+0x104>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	7811      	ldrb	r1, [r2, #0]
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <Get_Data+0x120>)
 80020f6:	54d1      	strb	r1, [r2, r3]
				     	 *p=*(p+indice);
 80020f8:	4b28      	ldr	r3, [pc, #160]	; (800219c <Get_Data+0x114>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <Get_Data+0x104>)
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	441a      	add	r2, r3
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <Get_Data+0x114>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
			for( indice =0;indice<=ind;indice++)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <Get_Data+0x104>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <Get_Data+0x104>)
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <Get_Data+0x104>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <Get_Data+0x11c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	dde4      	ble.n	80020ea <Get_Data+0x62>

			        }

			Ligne_GPRMC[indice]= '\0';
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <Get_Data+0x104>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <Get_Data+0x120>)
 8002126:	2100      	movs	r1, #0
 8002128:	54d1      	strb	r1, [r2, r3]
		  // Extraction de chaque information dans la ligne
		//  HAL_UART_Transmit(&huart2, (uint8_t*)Ligne_GPRMC, sizeof(Ligne_GPRMC), 100);
		  sscanf(Ligne_GPRMC,"GGPRMC,%f,A,%f,N,%f,E,%f,,%d",&Temps,&Latitude,&Longitude,&Vitesse,&Date);
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <Get_Data+0x124>)
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <Get_Data+0x128>)
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <Get_Data+0x12c>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <Get_Data+0x130>)
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <Get_Data+0x134>)
 800213a:	4921      	ldr	r1, [pc, #132]	; (80021c0 <Get_Data+0x138>)
 800213c:	481a      	ldr	r0, [pc, #104]	; (80021a8 <Get_Data+0x120>)
 800213e:	f00a feaf 	bl	800cea0 <siscanf>

        //  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), 50);
		  // Format des données
		  Format_data(Date, Temps, Latitude, Longitude, Vitesse,buffer,buff, compteur_vit_null);
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <Get_Data+0x124>)
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <Get_Data+0x134>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <Get_Data+0x130>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <Get_Data+0x12c>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <Get_Data+0x128>)
 800215a:	ed93 6a00 	vldr	s12, [r3]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	eef0 1a46 	vmov.f32	s3, s12
 8002168:	eeb0 1a66 	vmov.f32	s2, s13
 800216c:	eef0 0a47 	vmov.f32	s1, s14
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	f000 f858 	bl	8002228 <Format_data>
		  Flag=0;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <Get_Data+0x100>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]

		}
	  }
	//return (uint8_t *)buff;
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000b86 	.word	0x20000b86
 800218c:	20000b88 	.word	0x20000b88
 8002190:	20000538 	.word	0x20000538
 8002194:	20000828 	.word	0x20000828
 8002198:	080118d8 	.word	0x080118d8
 800219c:	20000b8c 	.word	0x20000b8c
 80021a0:	20000bc0 	.word	0x20000bc0
 80021a4:	20000bc4 	.word	0x20000bc4
 80021a8:	20000b18 	.word	0x20000b18
 80021ac:	20000ba0 	.word	0x20000ba0
 80021b0:	20000b9c 	.word	0x20000b9c
 80021b4:	20000b94 	.word	0x20000b94
 80021b8:	20000b98 	.word	0x20000b98
 80021bc:	20000b90 	.word	0x20000b90
 80021c0:	080118e0 	.word	0x080118e0

080021c4 <GPS_Init>:


void GPS_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <GPS_Init+0x58>)
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <GPS_Init+0x5c>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <GPS_Init+0x58>)
 80021d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <GPS_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <GPS_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <GPS_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <GPS_Init+0x58>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <GPS_Init+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <GPS_Init+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <GPS_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <GPS_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_UART_Init(&huart4);
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <GPS_Init+0x58>)
 8002208:	f004 fa9a 	bl	8006740 <HAL_UART_Init>

  //USART2_UART_Init();
  HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 800220c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <GPS_Init+0x60>)
 8002212:	4802      	ldr	r0, [pc, #8]	; (800221c <GPS_Init+0x58>)
 8002214:	f004 fbe4 	bl	80069e0 <HAL_UART_Receive_IT>
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200004b4 	.word	0x200004b4
 8002220:	40004c00 	.word	0x40004c00
 8002224:	20000538 	.word	0x20000538

08002228 <Format_data>:

/* Private Functions --------------------------------------------------------------------------*/

static void Format_data(int Date, float Temps, float Latitude, float Longitude, float Vitesse,uint8_t buffer[14],uint8_t buff[14],int * compteur_vit_null)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b092      	sub	sp, #72	; 0x48
 800222c:	af02      	add	r7, sp, #8
 800222e:	6278      	str	r0, [r7, #36]	; 0x24
 8002230:	ed87 0a08 	vstr	s0, [r7, #32]
 8002234:	edc7 0a07 	vstr	s1, [r7, #28]
 8002238:	ed87 1a06 	vstr	s2, [r7, #24]
 800223c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002240:	6139      	str	r1, [r7, #16]
 8002242:	60fa      	str	r2, [r7, #12]
 8002244:	60bb      	str	r3, [r7, #8]

  // Date  :  ddmmaa ==> dd/mm/aa

  Jour = (int)(Date/10000);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	4ab5      	ldr	r2, [pc, #724]	; (8002520 <Format_data+0x2f8>)
 800224a:	fb82 1203 	smull	r1, r2, r2, r3
 800224e:	1312      	asrs	r2, r2, #12
 8002250:	17db      	asrs	r3, r3, #31
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	4ab3      	ldr	r2, [pc, #716]	; (8002524 <Format_data+0x2fc>)
 8002256:	6013      	str	r3, [r2, #0]
  Mois = (int)((Date-(Jour*10000))/100);
 8002258:	4bb2      	ldr	r3, [pc, #712]	; (8002524 <Format_data+0x2fc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4ab2      	ldr	r2, [pc, #712]	; (8002528 <Format_data+0x300>)
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	4413      	add	r3, r2
 8002266:	4ab1      	ldr	r2, [pc, #708]	; (800252c <Format_data+0x304>)
 8002268:	fb82 1203 	smull	r1, r2, r2, r3
 800226c:	1152      	asrs	r2, r2, #5
 800226e:	17db      	asrs	r3, r3, #31
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4aaf      	ldr	r2, [pc, #700]	; (8002530 <Format_data+0x308>)
 8002274:	6013      	str	r3, [r2, #0]
  Annee = (int)(Date-((Jour*10000)+(Mois*100)));
 8002276:	4bab      	ldr	r3, [pc, #684]	; (8002524 <Format_data+0x2fc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f242 7210 	movw	r2, #10000	; 0x2710
 800227e:	fb03 f202 	mul.w	r2, r3, r2
 8002282:	4bab      	ldr	r3, [pc, #684]	; (8002530 <Format_data+0x308>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2164      	movs	r1, #100	; 0x64
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	4aa8      	ldr	r2, [pc, #672]	; (8002534 <Format_data+0x30c>)
 8002294:	6013      	str	r3, [r2, #0]

  // Temps :  hhmmss ==> hh:mm:ss
  Heures = (int)(Temps/10000);
 8002296:	ed97 7a08 	vldr	s14, [r7, #32]
 800229a:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002538 <Format_data+0x310>
 800229e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a6:	ee17 2a90 	vmov	r2, s15
 80022aa:	4ba4      	ldr	r3, [pc, #656]	; (800253c <Format_data+0x314>)
 80022ac:	601a      	str	r2, [r3, #0]
  Minutes = (int)((Temps-(Heures*10000))/100);
 80022ae:	4ba3      	ldr	r3, [pc, #652]	; (800253c <Format_data+0x314>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80022c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ca:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8002540 <Format_data+0x318>
 80022ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d6:	ee17 2a90 	vmov	r2, s15
 80022da:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <Format_data+0x31c>)
 80022dc:	601a      	str	r2, [r3, #0]
  Secondes = (int)(Temps-((Heures*10000)+(Minutes*100)));
 80022de:	4b97      	ldr	r3, [pc, #604]	; (800253c <Format_data+0x314>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022e6:	fb03 f202 	mul.w	r2, r3, r2
 80022ea:	4b96      	ldr	r3, [pc, #600]	; (8002544 <Format_data+0x31c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230a:	ee17 2a90 	vmov	r2, s15
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <Format_data+0x320>)
 8002310:	601a      	str	r2, [r3, #0]

  // Timestamp :

  Epoch_Time = Get_Epoch_Time(Jour,Mois,2000+Annee,Heures,Minutes,Secondes);
 8002312:	4b84      	ldr	r3, [pc, #528]	; (8002524 <Format_data+0x2fc>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	4b86      	ldr	r3, [pc, #536]	; (8002530 <Format_data+0x308>)
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	4b86      	ldr	r3, [pc, #536]	; (8002534 <Format_data+0x30c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8002322:	4b86      	ldr	r3, [pc, #536]	; (800253c <Format_data+0x314>)
 8002324:	681d      	ldr	r5, [r3, #0]
 8002326:	4b87      	ldr	r3, [pc, #540]	; (8002544 <Format_data+0x31c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a87      	ldr	r2, [pc, #540]	; (8002548 <Format_data+0x320>)
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	462b      	mov	r3, r5
 8002334:	4622      	mov	r2, r4
 8002336:	f000 f91f 	bl	8002578 <Get_Epoch_Time>
 800233a:	4603      	mov	r3, r0
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <Format_data+0x324>)
 800233e:	6013      	str	r3, [r2, #0]

  // Vitesse :  vitesse en noeuds ==> vitesse en km/h
  Vitesse = Vitesse * 1.852;
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f7fe f911 	bl	8000568 <__aeabi_f2d>
 8002346:	a374      	add	r3, pc, #464	; (adr r3, 8002518 <Format_data+0x2f0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f964 	bl	8000618 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc56 	bl	8000c08 <__aeabi_d2f>
 800235c:	4603      	mov	r3, r0
 800235e:	617b      	str	r3, [r7, #20]

  if (Vitesse <= 5)
 8002360:	edd7 7a05 	vldr	s15, [r7, #20]
 8002364:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d805      	bhi.n	800237e <Format_data+0x156>
	  (*compteur_vit_null)++;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e002      	b.n	8002384 <Format_data+0x15c>
  else
	  (*compteur_vit_null)=0;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

  if ((*compteur_vit_null) == 30)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b1e      	cmp	r3, #30
 800238a:	d102      	bne.n	8002392 <Format_data+0x16a>
	  (*compteur_vit_null)=0;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

  //compteur_vit_null= compteur;

  // Latitude : ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_lat = (int)(Latitude/100);
 8002392:	ed97 7a07 	vldr	s14, [r7, #28]
 8002396:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002540 <Format_data+0x318>
 800239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	ee17 3a90 	vmov	r3, s15
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  Latitude = degre_lat + ((Latitude- (degre_lat*100))/60);
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	2264      	movs	r2, #100	; 0x64
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80023c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023ca:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8002550 <Format_data+0x328>
 80023ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	edc7 7a07 	vstr	s15, [r7, #28]

  // Longitude :   ddmm.mmmm ==> dd + mm.mmmm/60

  int degre_long = (int)(Longitude/100);
 80023da:	ed97 7a06 	vldr	s14, [r7, #24]
 80023de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002540 <Format_data+0x318>
 80023e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ea:	ee17 3a90 	vmov	r3, s15
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
  Longitude = degre_long + ((Longitude- (degre_long*100))/60);
 80023f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	2264      	movs	r2, #100	; 0x64
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240a:	edd7 6a06 	vldr	s13, [r7, #24]
 800240e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002412:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8002550 <Format_data+0x328>
 8002416:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800241a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241e:	edc7 7a06 	vstr	s15, [r7, #24]




  Data_from_GPS mydata = {
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <Format_data+0x324>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
 8002430:	edd7 7a05 	vldr	s15, [r7, #20]
 8002434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002438:	edc7 7a01 	vstr	s15, [r7, #4]
 800243c:	793b      	ldrb	r3, [r7, #4]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
     .speed= Vitesse,
    // .history_indicator = '1',
  };


  memcpy(buffer, &mydata, sizeof(mydata));
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	461c      	mov	r4, r3
 8002448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800244e:	6020      	str	r0, [r4, #0]
 8002450:	6061      	str	r1, [r4, #4]
 8002452:	60a2      	str	r2, [r4, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	7323      	strb	r3, [r4, #12]

  led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8002458:	2104      	movs	r1, #4
 800245a:	483e      	ldr	r0, [pc, #248]	; (8002554 <Format_data+0x32c>)
 800245c:	f001 fdf6 	bl	800404c <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <Format_data+0x330>)
 8002466:	601a      	str	r2, [r3, #0]
  	  led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8);
 8002468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800246c:	483b      	ldr	r0, [pc, #236]	; (800255c <Format_data+0x334>)
 800246e:	f001 fded 	bl	800404c <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <Format_data+0x338>)
 8002478:	601a      	str	r2, [r3, #0]
  	  led3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800247a:	2108      	movs	r1, #8
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f001 fde4 	bl	800404c <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <Format_data+0x33c>)
 800248a:	601a      	str	r2, [r3, #0]
  	  led4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800248c:	2120      	movs	r1, #32
 800248e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002492:	f001 fddb 	bl	800404c <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <Format_data+0x340>)
 800249c:	601a      	str	r2, [r3, #0]

  	  if (led4==1)
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <Format_data+0x340>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d103      	bne.n	80024ae <Format_data+0x286>
  		  niv=100;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <Format_data+0x344>)
 80024a8:	2264      	movs	r2, #100	; 0x64
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e026      	b.n	80024fc <Format_data+0x2d4>
  	  else if ((led4==0)&&(led3==1))
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <Format_data+0x340>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <Format_data+0x29e>
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <Format_data+0x33c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d103      	bne.n	80024c6 <Format_data+0x29e>
  		  niv=75;
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <Format_data+0x344>)
 80024c0:	224b      	movs	r2, #75	; 0x4b
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e01a      	b.n	80024fc <Format_data+0x2d4>
  	  else if ((led3==0)&&(led2==1))
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <Format_data+0x33c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <Format_data+0x2b6>
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <Format_data+0x338>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d103      	bne.n	80024de <Format_data+0x2b6>
  		  niv=50;
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <Format_data+0x344>)
 80024d8:	2232      	movs	r2, #50	; 0x32
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e00e      	b.n	80024fc <Format_data+0x2d4>
  	  else if ((led2==0)&&(led1==1))
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <Format_data+0x338>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d107      	bne.n	80024f6 <Format_data+0x2ce>
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <Format_data+0x330>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d103      	bne.n	80024f6 <Format_data+0x2ce>
  		  niv=25;
 80024ee:	4b1f      	ldr	r3, [pc, #124]	; (800256c <Format_data+0x344>)
 80024f0:	2219      	movs	r2, #25
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e002      	b.n	80024fc <Format_data+0x2d4>
  	  else
  		  niv=0;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <Format_data+0x344>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
  Inversion(buffer,buff);
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	6938      	ldr	r0, [r7, #16]
 8002500:	f000 f85e 	bl	80025c0 <Inversion>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"==> Ready to store\r\n",22);
 8002504:	2216      	movs	r2, #22
 8002506:	491a      	ldr	r1, [pc, #104]	; (8002570 <Format_data+0x348>)
 8002508:	481a      	ldr	r0, [pc, #104]	; (8002574 <Format_data+0x34c>)
 800250a:	f004 f9fb 	bl	8006904 <HAL_UART_Transmit_IT>

}
 800250e:	bf00      	nop
 8002510:	3740      	adds	r7, #64	; 0x40
 8002512:	46bd      	mov	sp, r7
 8002514:	bdb0      	pop	{r4, r5, r7, pc}
 8002516:	bf00      	nop
 8002518:	c083126f 	.word	0xc083126f
 800251c:	3ffda1ca 	.word	0x3ffda1ca
 8002520:	68db8bad 	.word	0x68db8bad
 8002524:	20000ba4 	.word	0x20000ba4
 8002528:	ffffd8f0 	.word	0xffffd8f0
 800252c:	51eb851f 	.word	0x51eb851f
 8002530:	20000ba8 	.word	0x20000ba8
 8002534:	20000bac 	.word	0x20000bac
 8002538:	461c4000 	.word	0x461c4000
 800253c:	20000bb0 	.word	0x20000bb0
 8002540:	42c80000 	.word	0x42c80000
 8002544:	20000bb4 	.word	0x20000bb4
 8002548:	20000bb8 	.word	0x20000bb8
 800254c:	20000bbc 	.word	0x20000bbc
 8002550:	42700000 	.word	0x42700000
 8002554:	48000400 	.word	0x48000400
 8002558:	20000bc8 	.word	0x20000bc8
 800255c:	48001000 	.word	0x48001000
 8002560:	20000bcc 	.word	0x20000bcc
 8002564:	20000bd0 	.word	0x20000bd0
 8002568:	20000bd4 	.word	0x20000bd4
 800256c:	20000bd8 	.word	0x20000bd8
 8002570:	08011900 	.word	0x08011900
 8002574:	200003cc 	.word	0x200003cc

08002578 <Get_Epoch_Time>:

/**
 * la fonction ci-dessous a pour but de convertir date et temps en une valeur en secondes (epoch_time)
 */
static uint32_t Get_Epoch_Time(int jour,int mois,int annee,int heures,int minutes,int secondes)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	; 0x40
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
	    struct tm t;
	    time_t t_of_day;

	    t.tm_year = annee-1900;  // Year - 1900
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
	    t.tm_mon = mois-1;           // Month, where 0 = jan
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3b01      	subs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
	    t.tm_mday = jour;          // Day of the month
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	623b      	str	r3, [r7, #32]
	    t.tm_hour = heures+1;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
	    t.tm_min = minutes;
 800259e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a0:	61bb      	str	r3, [r7, #24]
	    t.tm_sec = secondes;
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	617b      	str	r3, [r7, #20]
	    t_of_day = mktime(&t);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4618      	mov	r0, r3
 80025ac:	f009 fc3e 	bl	800be2c <mktime>
 80025b0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
	    return (t_of_day);
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3740      	adds	r7, #64	; 0x40
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <Inversion>:

/**
 * la fonction ci-dessous a pour but d'inverser le contenu d'un buffer de la façon suivante : "abcdefghijklp" ==> "dcbahgfelkjip"
 */
void Inversion(uint8_t buffer[14],uint8_t buff[14])
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	int k =0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
	  for (int i=0; i<=8; i=i+4)
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e018      	b.n	8002606 <Inversion+0x46>
	  {
	      for (int j =i+3; j>=i;j--)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	3303      	adds	r3, #3
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e00d      	b.n	80025f8 <Inversion+0x38>
	      {
	          buff[k]=buffer[j];
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	440b      	add	r3, r1
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
	          k++;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
	      for (int j =i+3; j>=i;j--)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	daed      	bge.n	80025dc <Inversion+0x1c>
	  for (int i=0; i<=8; i=i+4)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	3304      	adds	r3, #4
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b08      	cmp	r3, #8
 800260a:	dde3      	ble.n	80025d4 <Inversion+0x14>
	      }
	  }

	  buff[12]=buffer[12];
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	7b12      	ldrb	r2, [r2, #12]
 8002614:	701a      	strb	r2, [r3, #0]
	  buff[13]= niv;
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <Inversion+0x70>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	330d      	adds	r3, #13
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000bd8 	.word	0x20000bd8

08002634 <HAL_UART_RxCpltCallback>:
     HAL_UART_Receive_DMA(&huart4, (uint8_t*)Rxdata,750);


}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

	 Flag=1;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_UART_RxCpltCallback+0x24>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
     HAL_UART_Receive_IT(&huart4, (uint8_t*)Rxdata,750);
 8002642:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002646:	4905      	ldr	r1, [pc, #20]	; (800265c <HAL_UART_RxCpltCallback+0x28>)
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <HAL_UART_RxCpltCallback+0x2c>)
 800264a:	f004 f9c9 	bl	80069e0 <HAL_UART_Receive_IT>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000b86 	.word	0x20000b86
 800265c:	20000538 	.word	0x20000538
 8002660:	200004b4 	.word	0x200004b4

08002664 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  	if (GPIO_Pin == GPIO_PIN_2)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d111      	bne.n	8002698 <HAL_GPIO_EXTI_Callback+0x34>
  		{
  		 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8002674:	2104      	movs	r1, #4
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f001 fce7 	bl	800404c <HAL_GPIO_ReadPin>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d103      	bne.n	800268c <HAL_GPIO_EXTI_Callback+0x28>
  		   bouton = 1;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e002      	b.n	8002692 <HAL_GPIO_EXTI_Callback+0x2e>
  		 else
  		   bouton = 0;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

  		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8002694:	221f      	movs	r2, #31
 8002696:	619a      	str	r2, [r3, #24]
  		}

  		//compt++;
  }
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000cb0 	.word	0x20000cb0
 80026a4:	40007000 	.word	0x40007000

080026a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ac:	f000 fe7b 	bl	80033a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b0:	f000 f89c 	bl	80027ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b4:	f000 f90a 	bl	80028cc <MX_GPIO_Init>
  MX_DMA_Init();
 80026b8:	f000 f8ea 	bl	8002890 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  BLE_Init();
 80026bc:	f7fe fde4 	bl	8001288 <BLE_Init>
  GPS_Init();
 80026c0:	f7ff fd80 	bl	80021c4 <GPS_Init>
  Memory_Init();
 80026c4:	f7fe fe1e 	bl	8001304 <Memory_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026c8:	f005 ff26 	bl	8008518 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 80026cc:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <main+0xdc>)
 80026ce:	2100      	movs	r1, #0
 80026d0:	2001      	movs	r0, #1
 80026d2:	f005 fffd 	bl	80086d0 <osSemaphoreNew>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <main+0xe0>)
 80026da:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <main+0xe4>)
 80026de:	2100      	movs	r1, #0
 80026e0:	2001      	movs	r0, #1
 80026e2:	f005 fff5 	bl	80086d0 <osSemaphoreNew>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a29      	ldr	r2, [pc, #164]	; (8002790 <main+0xe8>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore3 */
  Semaphore3Handle = osSemaphoreNew(1, 0, &Semaphore3_attributes);
 80026ec:	4a29      	ldr	r2, [pc, #164]	; (8002794 <main+0xec>)
 80026ee:	2100      	movs	r1, #0
 80026f0:	2001      	movs	r0, #1
 80026f2:	f005 ffed 	bl	80086d0 <osSemaphoreNew>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <main+0xf0>)
 80026fa:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore0 */
  Semaphore0Handle = osSemaphoreNew(1, 1, &Semaphore0_attributes);
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <main+0xf4>)
 80026fe:	2101      	movs	r1, #1
 8002700:	2001      	movs	r0, #1
 8002702:	f005 ffe5 	bl	80086d0 <osSemaphoreNew>
 8002706:	4603      	mov	r3, r0
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <main+0xf8>)
 800270a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (14, sizeof(uint8_t), &myQueue01_attributes);
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <main+0xfc>)
 800270e:	2101      	movs	r1, #1
 8002710:	200e      	movs	r0, #14
 8002712:	f006 f8fd 	bl	8008910 <osMessageQueueNew>
 8002716:	4603      	mov	r3, r0
 8002718:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <main+0x100>)
 800271a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (14, sizeof(uint8_t), &myQueue02_attributes);
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <main+0x104>)
 800271e:	2101      	movs	r1, #1
 8002720:	200e      	movs	r0, #14
 8002722:	f006 f8f5 	bl	8008910 <osMessageQueueNew>
 8002726:	4603      	mov	r3, r0
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <main+0x108>)
 800272a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (14, sizeof(uint8_t), &myQueue03_attributes);
 800272c:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <main+0x10c>)
 800272e:	2101      	movs	r1, #1
 8002730:	200e      	movs	r0, #14
 8002732:	f006 f8ed 	bl	8008910 <osMessageQueueNew>
 8002736:	4603      	mov	r3, r0
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <main+0x110>)
 800273a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GPS_Get_Data */
  GPS_Get_DataHandle = osThreadNew(StartGPS_Get_Data, NULL, &GPS_Get_Data_attributes);
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <main+0x114>)
 800273e:	2100      	movs	r1, #0
 8002740:	481f      	ldr	r0, [pc, #124]	; (80027c0 <main+0x118>)
 8002742:	f005 ff33 	bl	80085ac <osThreadNew>
 8002746:	4603      	mov	r3, r0
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <main+0x11c>)
 800274a:	6013      	str	r3, [r2, #0]

  /* creation of Mem_Access_Data */
  Mem_Access_DataHandle = osThreadNew(StartMem_Access_Data, NULL, &Mem_Access_Data_attributes);
 800274c:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <main+0x120>)
 800274e:	2100      	movs	r1, #0
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <main+0x124>)
 8002752:	f005 ff2b 	bl	80085ac <osThreadNew>
 8002756:	4603      	mov	r3, r0
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <main+0x128>)
 800275a:	6013      	str	r3, [r2, #0]

  /* creation of BLE_Send_Data */
  BLE_Send_DataHandle = osThreadNew(StartBLE_Send_Data, NULL, &BLE_Send_Data_attributes);
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <main+0x12c>)
 800275e:	2100      	movs	r1, #0
 8002760:	481d      	ldr	r0, [pc, #116]	; (80027d8 <main+0x130>)
 8002762:	f005 ff23 	bl	80085ac <osThreadNew>
 8002766:	4603      	mov	r3, r0
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <main+0x134>)
 800276a:	6013      	str	r3, [r2, #0]

  /* creation of Bike_state */
  Bike_stateHandle = osThreadNew(StartBike_state, NULL, &Bike_state_attributes);
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <main+0x138>)
 800276e:	2100      	movs	r1, #0
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <main+0x13c>)
 8002772:	f005 ff1b 	bl	80085ac <osThreadNew>
 8002776:	4603      	mov	r3, r0
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <main+0x140>)
 800277a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800277c:	f005 fef0 	bl	8008560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002780:	e7fe      	b.n	8002780 <main+0xd8>
 8002782:	bf00      	nop
 8002784:	08011aa4 	.word	0x08011aa4
 8002788:	20000bf8 	.word	0x20000bf8
 800278c:	08011ab4 	.word	0x08011ab4
 8002790:	20000bfc 	.word	0x20000bfc
 8002794:	08011ac4 	.word	0x08011ac4
 8002798:	20000c00 	.word	0x20000c00
 800279c:	08011ad4 	.word	0x08011ad4
 80027a0:	20000c04 	.word	0x20000c04
 80027a4:	08011a5c 	.word	0x08011a5c
 80027a8:	20000bec 	.word	0x20000bec
 80027ac:	08011a74 	.word	0x08011a74
 80027b0:	20000bf0 	.word	0x20000bf0
 80027b4:	08011a8c 	.word	0x08011a8c
 80027b8:	20000bf4 	.word	0x20000bf4
 80027bc:	080119cc 	.word	0x080119cc
 80027c0:	080029e9 	.word	0x080029e9
 80027c4:	20000bdc 	.word	0x20000bdc
 80027c8:	080119f0 	.word	0x080119f0
 80027cc:	08002a75 	.word	0x08002a75
 80027d0:	20000be0 	.word	0x20000be0
 80027d4:	08011a14 	.word	0x08011a14
 80027d8:	08002b3d 	.word	0x08002b3d
 80027dc:	20000be4 	.word	0x20000be4
 80027e0:	08011a38 	.word	0x08011a38
 80027e4:	08002c09 	.word	0x08002c09
 80027e8:	20000be8 	.word	0x20000be8

080027ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b096      	sub	sp, #88	; 0x58
 80027f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	2244      	movs	r2, #68	; 0x44
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f009 fa36 	bl	800bc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002800:	463b      	mov	r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800280e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002812:	f001 fc93 	bl	800413c <HAL_PWREx_ControlVoltageScaling>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800281c:	f000 fa3c 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002820:	2310      	movs	r3, #16
 8002822:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800282c:	2360      	movs	r3, #96	; 0x60
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002830:	2302      	movs	r3, #2
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002834:	2301      	movs	r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800283c:	2328      	movs	r3, #40	; 0x28
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002840:	2307      	movs	r3, #7
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002844:	2302      	movs	r3, #2
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002848:	2302      	movs	r3, #2
 800284a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f9b5 	bl	8004bc0 <HAL_RCC_OscConfig>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800285c:	f000 fa1c 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002860:	230f      	movs	r3, #15
 8002862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002864:	2303      	movs	r3, #3
 8002866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	2104      	movs	r1, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fd7d 	bl	8005378 <HAL_RCC_ClockConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002884:	f000 fa08 	bl	8002c98 <Error_Handler>
  }
}
 8002888:	bf00      	nop
 800288a:	3758      	adds	r7, #88	; 0x58
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_DMA_Init+0x38>)
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <MX_DMA_Init+0x38>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6493      	str	r3, [r2, #72]	; 0x48
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_DMA_Init+0x38>)
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2105      	movs	r1, #5
 80028b2:	200f      	movs	r0, #15
 80028b4:	f000 fe8c 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80028b8:	200f      	movs	r0, #15
 80028ba:	f000 fea5 	bl	8003608 <HAL_NVIC_EnableIRQ>

}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <MX_GPIO_Init+0x110>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <MX_GPIO_Init+0x110>)
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <MX_GPIO_Init+0x110>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <MX_GPIO_Init+0x110>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <MX_GPIO_Init+0x110>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <MX_GPIO_Init+0x110>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b32      	ldr	r3, [pc, #200]	; (80029dc <MX_GPIO_Init+0x110>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <MX_GPIO_Init+0x110>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <MX_GPIO_Init+0x110>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800292a:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <MX_GPIO_Init+0x110>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <MX_GPIO_Init+0x110>)
 8002930:	f043 0310 	orr.w	r3, r3, #16
 8002934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <MX_GPIO_Init+0x110>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <MX_GPIO_Init+0x110>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <MX_GPIO_Init+0x110>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <MX_GPIO_Init+0x110>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800295a:	2304      	movs	r3, #4
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800295e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002972:	f001 f8cd 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002976:	2328      	movs	r3, #40	; 0x28
 8002978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800297e:	2302      	movs	r3, #2
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298c:	f001 f8c0 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002990:	2304      	movs	r3, #4
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002998:	2302      	movs	r3, #2
 800299a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	480f      	ldr	r0, [pc, #60]	; (80029e0 <MX_GPIO_Init+0x114>)
 80029a4:	f001 f8b4 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4809      	ldr	r0, [pc, #36]	; (80029e4 <MX_GPIO_Init+0x118>)
 80029be:	f001 f8a7 	bl	8003b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2105      	movs	r1, #5
 80029c6:	2008      	movs	r0, #8
 80029c8:	f000 fe02 	bl	80035d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029cc:	2008      	movs	r0, #8
 80029ce:	f000 fe1b 	bl	8003608 <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48001000 	.word	0x48001000

080029e8 <StartGPS_Get_Data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS_Get_Data */
void StartGPS_Get_Data(void *argument)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <StartGPS_Get_Data+0x6c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	4618      	mov	r0, r3
 80029fa:	f005 fef3 	bl	80087e4 <osSemaphoreAcquire>

	  if (history_flag==0)
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <StartGPS_Get_Data+0x70>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11f      	bne.n	8002a46 <StartGPS_Get_Data+0x5e>
	  {

		  Get_Data(GPS_Data, BLE_Data,&Temps_vit_null);
 8002a06:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <StartGPS_Get_Data+0x74>)
 8002a08:	4915      	ldr	r1, [pc, #84]	; (8002a60 <StartGPS_Get_Data+0x78>)
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <StartGPS_Get_Data+0x7c>)
 8002a0c:	f7ff fb3c 	bl	8002088 <Get_Data>

		  for (int j=0;j<14;j++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e014      	b.n	8002a40 <StartGPS_Get_Data+0x58>

			  {
				osMessageQueuePut(myQueue01Handle, &(GPS_Data[j]), sizeof(GPS_Data[j]), 100);
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <StartGPS_Get_Data+0x80>)
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <StartGPS_Get_Data+0x7c>)
 8002a1e:	1899      	adds	r1, r3, r2
 8002a20:	2364      	movs	r3, #100	; 0x64
 8002a22:	2201      	movs	r2, #1
 8002a24:	f005 ffe8 	bl	80089f8 <osMessageQueuePut>
				osMessageQueuePut(myQueue02Handle, &(BLE_Data[j]), sizeof(BLE_Data[j]), 100);
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <StartGPS_Get_Data+0x84>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <StartGPS_Get_Data+0x78>)
 8002a30:	1899      	adds	r1, r3, r2
 8002a32:	2364      	movs	r3, #100	; 0x64
 8002a34:	2201      	movs	r2, #1
 8002a36:	f005 ffdf 	bl	80089f8 <osMessageQueuePut>
		  for (int j=0;j<14;j++)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b0d      	cmp	r3, #13
 8002a44:	dde7      	ble.n	8002a16 <StartGPS_Get_Data+0x2e>
			  }

	  }
	  osSemaphoreRelease(Semaphore2Handle);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <StartGPS_Get_Data+0x88>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f005 ff1c 	bl	8008888 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8002a50:	e7ce      	b.n	80029f0 <StartGPS_Get_Data+0x8>
 8002a52:	bf00      	nop
 8002a54:	20000bf8 	.word	0x20000bf8
 8002a58:	20000cbc 	.word	0x20000cbc
 8002a5c:	20000cb4 	.word	0x20000cb4
 8002a60:	20000c60 	.word	0x20000c60
 8002a64:	20000c50 	.word	0x20000c50
 8002a68:	20000bec 	.word	0x20000bec
 8002a6c:	20000bf0 	.word	0x20000bf0
 8002a70:	20000bfc 	.word	0x20000bfc

08002a74 <StartMem_Access_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMem_Access_Data */
void StartMem_Access_Data(void *argument)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMem_Access_Data */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <StartMem_Access_Data+0x9c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fead 	bl	80087e4 <osSemaphoreAcquire>


	      if (history_flag==0)
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <StartMem_Access_Data+0xa0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <StartMem_Access_Data+0x50>
	      {

			  for (int k=0;k<14;k++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e00b      	b.n	8002ab0 <StartMem_Access_Data+0x3c>

					  {
						osMessageQueueGet(myQueue01Handle, &(buffer_queue1[k]), &size, 100);
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <StartMem_Access_Data+0xa4>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <StartMem_Access_Data+0xa8>)
 8002aa0:	1899      	adds	r1, r3, r2
 8002aa2:	2364      	movs	r3, #100	; 0x64
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <StartMem_Access_Data+0xac>)
 8002aa6:	f006 f807 	bl	8008ab8 <osMessageQueueGet>
			  for (int k=0;k<14;k++)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b0d      	cmp	r3, #13
 8002ab4:	ddf0      	ble.n	8002a98 <StartMem_Access_Data+0x24>
					  }

			  Store_Data(buffer_queue1,Data_size);
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <StartMem_Access_Data+0xb0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4817      	ldr	r0, [pc, #92]	; (8002b1c <StartMem_Access_Data+0xa8>)
 8002abe:	f7fe fc9d 	bl	80013fc <Store_Data>
 8002ac2:	e01c      	b.n	8002afe <StartMem_Access_Data+0x8a>

	      }
	      else
	      {

	    	  if(End_History==0)
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <StartMem_Access_Data+0xb4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <StartMem_Access_Data+0x66>
	    	     get_history(memory_data,Data_size,&flg_hist);
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <StartMem_Access_Data+0xb0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <StartMem_Access_Data+0xb8>)
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <StartMem_Access_Data+0xbc>)
 8002ad6:	f7fe fccf 	bl	8001478 <get_history>

	    	  for (int j=0;j<14;j++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	e00b      	b.n	8002af8 <StartMem_Access_Data+0x84>

	    	  		  {
	    	  		    osMessageQueuePut(myQueue03Handle, &(memory_data[j]), sizeof(memory_data[j]), 100);
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <StartMem_Access_Data+0xc0>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <StartMem_Access_Data+0xbc>)
 8002ae8:	1899      	adds	r1, r3, r2
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	2201      	movs	r2, #1
 8002aee:	f005 ff83 	bl	80089f8 <osMessageQueuePut>
	    	  for (int j=0;j<14;j++)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b0d      	cmp	r3, #13
 8002afc:	ddf0      	ble.n	8002ae0 <StartMem_Access_Data+0x6c>
	    	  		  }

	      }

	      End_History=0;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <StartMem_Access_Data+0xb4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
	 	  osSemaphoreRelease(Semaphore3Handle);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <StartMem_Access_Data+0xc4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f005 febd 	bl	8008888 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore2Handle, osWaitForever);
 8002b0e:	e7b5      	b.n	8002a7c <StartMem_Access_Data+0x8>
 8002b10:	20000bfc 	.word	0x20000bfc
 8002b14:	20000cbc 	.word	0x20000cbc
 8002b18:	20000bec 	.word	0x20000bec
 8002b1c:	20000c80 	.word	0x20000c80
 8002b20:	20000cae 	.word	0x20000cae
 8002b24:	20000008 	.word	0x20000008
 8002b28:	20000cc0 	.word	0x20000cc0
 8002b2c:	20000cb8 	.word	0x20000cb8
 8002b30:	20000c70 	.word	0x20000c70
 8002b34:	20000bf4 	.word	0x20000bf4
 8002b38:	20000c00 	.word	0x20000c00

08002b3c <StartBLE_Send_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBLE_Send_Data */
void StartBLE_Send_Data(void *argument)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBLE_Send_Data */
  /* Infinite loop */
  for(;;)
  {
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <StartBLE_Send_Data+0xa4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f005 fe49 	bl	80087e4 <osSemaphoreAcquire>

	      if (flg_hist==true)
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <StartBLE_Send_Data+0xa8>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <StartBLE_Send_Data+0x30>
	      		{

	      		    End_History=1;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <StartBLE_Send_Data+0xac>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
	      		    history_flag=0;
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <StartBLE_Send_Data+0xb0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
	      		    flg_hist = false;
 8002b66:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <StartBLE_Send_Data+0xa8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]

	      		 }

	      if (history_flag==0)
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <StartBLE_Send_Data+0xb0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d117      	bne.n	8002ba4 <StartBLE_Send_Data+0x68>
	      {
			  for (int l=0;l<14;l++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e00b      	b.n	8002b92 <StartBLE_Send_Data+0x56>

					  {
						osMessageQueueGet(myQueue02Handle, &(buffer_queue2[l]), &size, 100);
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <StartBLE_Send_Data+0xb4>)
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <StartBLE_Send_Data+0xb8>)
 8002b82:	1899      	adds	r1, r3, r2
 8002b84:	2364      	movs	r3, #100	; 0x64
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <StartBLE_Send_Data+0xbc>)
 8002b88:	f005 ff96 	bl	8008ab8 <osMessageQueueGet>
			  for (int l=0;l<14;l++)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b0d      	cmp	r3, #13
 8002b96:	ddf0      	ble.n	8002b7a <StartBLE_Send_Data+0x3e>
					  }

			  //send_data(buffer2);
			  send_data(buffer_queue2,&history_flag,&End_History);
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <StartBLE_Send_Data+0xac>)
 8002b9a:	4914      	ldr	r1, [pc, #80]	; (8002bec <StartBLE_Send_Data+0xb0>)
 8002b9c:	4815      	ldr	r0, [pc, #84]	; (8002bf4 <StartBLE_Send_Data+0xb8>)
 8002b9e:	f7fe fa3b 	bl	8001018 <send_data>
 8002ba2:	e016      	b.n	8002bd2 <StartBLE_Send_Data+0x96>
	      }
	      else
	      {
	    	  for (int l=0;l<14;l++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	e00b      	b.n	8002bc2 <StartBLE_Send_Data+0x86>

	    	  	  {
	    	  	  	osMessageQueueGet(myQueue03Handle, &(buffer_queue3[l]), &size, 100);
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <StartBLE_Send_Data+0xc0>)
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <StartBLE_Send_Data+0xc4>)
 8002bb2:	1899      	adds	r1, r3, r2
 8002bb4:	2364      	movs	r3, #100	; 0x64
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <StartBLE_Send_Data+0xbc>)
 8002bb8:	f005 ff7e 	bl	8008ab8 <osMessageQueueGet>
	    	  for (int l=0;l<14;l++)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b0d      	cmp	r3, #13
 8002bc6:	ddf0      	ble.n	8002baa <StartBLE_Send_Data+0x6e>
	    	  	  }

	    	  //send_data(buffer2);
	    	  send_data(buffer_queue3,&history_flag,&End_History);
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <StartBLE_Send_Data+0xac>)
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <StartBLE_Send_Data+0xb0>)
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <StartBLE_Send_Data+0xc4>)
 8002bce:	f7fe fa23 	bl	8001018 <send_data>
	      }


	  	  osSemaphoreRelease(Semaphore0Handle);
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <StartBLE_Send_Data+0xc8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f005 fe56 	bl	8008888 <osSemaphoreRelease>
	      osSemaphoreAcquire(Semaphore3Handle, osWaitForever);
 8002bdc:	e7b2      	b.n	8002b44 <StartBLE_Send_Data+0x8>
 8002bde:	bf00      	nop
 8002be0:	20000c00 	.word	0x20000c00
 8002be4:	20000cb8 	.word	0x20000cb8
 8002be8:	20000cc0 	.word	0x20000cc0
 8002bec:	20000cbc 	.word	0x20000cbc
 8002bf0:	20000bf0 	.word	0x20000bf0
 8002bf4:	20000c90 	.word	0x20000c90
 8002bf8:	20000cae 	.word	0x20000cae
 8002bfc:	20000bf4 	.word	0x20000bf4
 8002c00:	20000ca0 	.word	0x20000ca0
 8002c04:	20000c04 	.word	0x20000c04

08002c08 <StartBike_state>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBike_state */
void StartBike_state(void *argument)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBike_state */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <StartBike_state+0x5c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f005 fde3 	bl	80087e4 <osSemaphoreAcquire>

	  if ((bouton==0) && (Temps_vit_null>=27))
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <StartBike_state+0x60>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10b      	bne.n	8002c3e <StartBike_state+0x36>
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <StartBike_state+0x64>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b1a      	cmp	r3, #26
 8002c2c:	dd07      	ble.n	8002c3e <StartBike_state+0x36>
		  {
		      HAL_SuspendTick();
 8002c2e:	f000 fa45 	bl	80030bc <HAL_SuspendTick>
		      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 8002c32:	2008      	movs	r0, #8
 8002c34:	f001 fa3a 	bl	80040ac <HAL_PWR_EnableWakeUpPin>
		      HAL_PWR_EnterSTANDBYMode();
 8002c38:	f001 fa58 	bl	80040ec <HAL_PWR_EnterSTANDBYMode>
 8002c3c:	e00c      	b.n	8002c58 <StartBike_state+0x50>

		  }
	  else
		  {
              HAL_ResumeTick();
 8002c3e:	f000 fa4f 	bl	80030e0 <HAL_ResumeTick>
              if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8002c42:	2104      	movs	r1, #4
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c48:	f001 fa00 	bl	800404c <HAL_GPIO_ReadPin>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <StartBike_state+0x50>
               		   bouton = 1;
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <StartBike_state+0x60>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
		  }

	  osSemaphoreRelease(Semaphore1Handle);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <StartBike_state+0x68>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fe13 	bl	8008888 <osSemaphoreRelease>
	  osSemaphoreAcquire(Semaphore0Handle, osWaitForever);
 8002c62:	e7d5      	b.n	8002c10 <StartBike_state+0x8>
 8002c64:	20000c04 	.word	0x20000c04
 8002c68:	20000cb0 	.word	0x20000cb0
 8002c6c:	20000cb4 	.word	0x20000cb4
 8002c70:	20000bf8 	.word	0x20000bf8

08002c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c86:	f000 fba7 	bl	80033d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40001000 	.word	0x40001000

08002c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <Error_Handler+0x8>
	...

08002ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	210f      	movs	r1, #15
 8002cde:	f06f 0001 	mvn.w	r0, #1
 8002ce2:	f000 fc75 	bl	80035d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_QSPI_MspInit+0x7c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d128      	bne.n	8002d68 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6513      	str	r3, [r2, #80]	; 0x50
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_QSPI_MspInit+0x80>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002d46:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002d4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d58:	230a      	movs	r3, #10
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_QSPI_MspInit+0x84>)
 8002d64:	f000 fed4 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	a0001000 	.word	0xa0001000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48001000 	.word	0x48001000

08002d7c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_QSPI_MspDeInit+0x30>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10a      	bne.n	8002da4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_QSPI_MspDeInit+0x34>)
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_QSPI_MspDeInit+0x34>)
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002d9a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <HAL_QSPI_MspDeInit+0x38>)
 8002da0:	f001 f860 	bl	8003e64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	a0001000 	.word	0xa0001000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	48001000 	.word	0x48001000

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0b0      	sub	sp, #192	; 0xc0
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	2288      	movs	r2, #136	; 0x88
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f008 ff47 	bl	800bc6c <memset>
  if(huart->Instance==UART4)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_UART_MspInit+0x238>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d145      	bne.n	8002e74 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002de8:	2308      	movs	r3, #8
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 fd15 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e00:	f7ff ff4a 	bl	8002c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e04:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4a74      	ldr	r2, [pc, #464]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e28:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    PA15 (JTDI)     ------> UART4_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8002e34:	f248 0303 	movw	r3, #32771	; 0x8003
 8002e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e4e:	2308      	movs	r3, #8
 8002e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5e:	f000 fe57 	bl	8003b10 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2105      	movs	r1, #5
 8002e66:	2034      	movs	r0, #52	; 0x34
 8002e68:	f000 fbb2 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e6c:	2034      	movs	r0, #52	; 0x34
 8002e6e:	f000 fbcb 	bl	8003608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e72:	e0b9      	b.n	8002fe8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5f      	ldr	r2, [pc, #380]	; (8002ff8 <HAL_UART_MspInit+0x240>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d16c      	bne.n	8002f58 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e82:	2300      	movs	r3, #0
 8002e84:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 fcca 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002e96:	f7ff feff 	bl	8002c98 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e9a:	4b56      	ldr	r3, [pc, #344]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb2:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	4a4f      	ldr	r2, [pc, #316]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	2303      	movs	r3, #3
 8002ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002eec:	4619      	mov	r1, r3
 8002eee:	4843      	ldr	r0, [pc, #268]	; (8002ffc <HAL_UART_MspInit+0x244>)
 8002ef0:	f000 fe0e 	bl	8003b10 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002ef6:	4a43      	ldr	r2, [pc, #268]	; (8003004 <HAL_UART_MspInit+0x24c>)
 8002ef8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002efa:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002efc:	2202      	movs	r2, #2
 8002efe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f20:	2220      	movs	r2, #32
 8002f22:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f2a:	4835      	ldr	r0, [pc, #212]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f2c:	f000 fb7a 	bl	8003624 <HAL_DMA_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002f36:	f7ff feaf 	bl	8002c98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f3e:	671a      	str	r2, [r3, #112]	; 0x70
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <HAL_UART_MspInit+0x248>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2105      	movs	r1, #5
 8002f4a:	2025      	movs	r0, #37	; 0x25
 8002f4c:	f000 fb40 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f50:	2025      	movs	r0, #37	; 0x25
 8002f52:	f000 fb59 	bl	8003608 <HAL_NVIC_EnableIRQ>
}
 8002f56:	e047      	b.n	8002fe8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_UART_MspInit+0x250>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d142      	bne.n	8002fe8 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f62:	2302      	movs	r3, #2
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fc58 	bl	8005824 <HAL_RCCEx_PeriphCLKConfig>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8002f7a:	f7ff fe8d 	bl	8002c98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002f9c:	f043 0308 	orr.w	r3, r3, #8
 8002fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_UART_MspInit+0x23c>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002fae:	2360      	movs	r3, #96	; 0x60
 8002fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480e      	ldr	r0, [pc, #56]	; (800300c <HAL_UART_MspInit+0x254>)
 8002fd4:	f000 fd9c 	bl	8003b10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2105      	movs	r1, #5
 8002fdc:	2026      	movs	r0, #38	; 0x26
 8002fde:	f000 faf7 	bl	80035d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fe2:	2026      	movs	r0, #38	; 0x26
 8002fe4:	f000 fb10 	bl	8003608 <HAL_NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	37c0      	adds	r7, #192	; 0xc0
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40004c00 	.word	0x40004c00
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	48000400 	.word	0x48000400
 8003000:	20000c08 	.word	0x20000c08
 8003004:	40020058 	.word	0x40020058
 8003008:	40004400 	.word	0x40004400
 800300c:	48000c00 	.word	0x48000c00

08003010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	2036      	movs	r0, #54	; 0x36
 8003026:	f000 fad3 	bl	80035d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800302a:	2036      	movs	r0, #54	; 0x36
 800302c:	f000 faec 	bl	8003608 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_InitTick+0x9c>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_InitTick+0x9c>)
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	6593      	str	r3, [r2, #88]	; 0x58
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_InitTick+0x9c>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003048:	f107 0210 	add.w	r2, r7, #16
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f002 fb54 	bl	8005700 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003058:	f002 fb26 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 800305c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <HAL_InitTick+0xa0>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0c9b      	lsrs	r3, r3, #18
 8003068:	3b01      	subs	r3, #1
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_InitTick+0xa4>)
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_InitTick+0xa8>)
 8003070:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_InitTick+0xa4>)
 8003074:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003078:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <HAL_InitTick+0xa4>)
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_InitTick+0xa4>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_InitTick+0xa4>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <HAL_InitTick+0xa4>)
 800308e:	f003 f885 	bl	800619c <HAL_TIM_Base_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003098:	4806      	ldr	r0, [pc, #24]	; (80030b4 <HAL_InitTick+0xa4>)
 800309a:	f003 f8e1 	bl	8006260 <HAL_TIM_Base_Start_IT>
 800309e:	4603      	mov	r3, r0
 80030a0:	e000      	b.n	80030a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3730      	adds	r7, #48	; 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	20000cc4 	.word	0x20000cc4
 80030b8:	40001000 	.word	0x40001000

080030bc <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_SuspendTick+0x20>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_SuspendTick+0x20>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000cc4 	.word	0x20000cc4

080030e0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_ResumeTick+0x20>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_ResumeTick+0x20>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000cc4 	.word	0x20000cc4

08003104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <NMI_Handler+0x4>

0800310a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <MemManage_Handler+0x4>

08003116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <UsageFault_Handler+0x4>

08003122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003134:	2004      	movs	r0, #4
 8003136:	f000 ffa1 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <DMA1_Channel5_IRQHandler+0x10>)
 8003146:	f000 fc04 	bl	8003952 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000c08 	.word	0x20000c08

08003154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <USART1_IRQHandler+0x10>)
 800315a:	f003 fced 	bl	8006b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000274 	.word	0x20000274

08003168 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <USART2_IRQHandler+0x10>)
 800316e:	f003 fce3 	bl	8006b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200003cc 	.word	0x200003cc

0800317c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <UART4_IRQHandler+0x10>)
 8003182:	f003 fcd9 	bl	8006b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004b4 	.word	0x200004b4

08003190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <TIM6_DAC_IRQHandler+0x10>)
 8003196:	f003 f8d3 	bl	8006340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000cc4 	.word	0x20000cc4

080031a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
	return 1;
 80031a8:	2301      	movs	r3, #1
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_kill>:

int _kill(int pid, int sig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031be:	f008 fd1d 	bl	800bbfc <__errno>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2216      	movs	r2, #22
 80031c6:	601a      	str	r2, [r3, #0]
	return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_exit>:

void _exit (int status)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ffe7 	bl	80031b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031e6:	e7fe      	b.n	80031e6 <_exit+0x12>

080031e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e00a      	b.n	8003210 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031fa:	f3af 8000 	nop.w
 80031fe:	4601      	mov	r1, r0
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	60ba      	str	r2, [r7, #8]
 8003206:	b2ca      	uxtb	r2, r1
 8003208:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	3301      	adds	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	dbf0      	blt.n	80031fa <_read+0x12>
	}

return len;
 8003218:	687b      	ldr	r3, [r7, #4]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e009      	b.n	8003248 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	60ba      	str	r2, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	dbf1      	blt.n	8003234 <_write+0x12>
	}
	return len;
 8003250:	687b      	ldr	r3, [r7, #4]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <_close>:

int _close(int file)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
	return -1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003282:	605a      	str	r2, [r3, #4]
	return 0;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <_isatty>:

int _isatty(int file)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	return 1;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	return 0;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <_sbrk+0x5c>)
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_sbrk+0x60>)
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <_sbrk+0x64>)
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <_sbrk+0x68>)
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_sbrk+0x64>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f4:	f008 fc82 	bl	800bbfc <__errno>
 80032f8:	4603      	mov	r3, r0
 80032fa:	220c      	movs	r2, #12
 80032fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e009      	b.n	8003318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <_sbrk+0x64>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <_sbrk+0x64>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <_sbrk+0x64>)
 8003314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20018000 	.word	0x20018000
 8003324:	00000400 	.word	0x00000400
 8003328:	20000d14 	.word	0x20000d14
 800332c:	200068c8 	.word	0x200068c8

08003330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <SystemInit+0x20>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <SystemInit+0x20>)
 800333c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800338c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003358:	f7ff ffea 	bl	8003330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <LoopForever+0x6>)
  ldr r1, =_edata
 800335e:	490d      	ldr	r1, [pc, #52]	; (8003394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <LoopForever+0xe>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003364:	e002      	b.n	800336c <LoopCopyDataInit>

08003366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336a:	3304      	adds	r3, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003370:	d3f9      	bcc.n	8003366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003374:	4c0a      	ldr	r4, [pc, #40]	; (80033a0 <LoopForever+0x16>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003378:	e001      	b.n	800337e <LoopFillZerobss>

0800337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800337c:	3204      	adds	r2, #4

0800337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003380:	d3fb      	bcc.n	800337a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003382:	f008 fc41 	bl	800bc08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003386:	f7ff f98f 	bl	80026a8 <main>

0800338a <LoopForever>:

LoopForever:
    b LoopForever
 800338a:	e7fe      	b.n	800338a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800338c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003394:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003398:	080120f4 	.word	0x080120f4
  ldr r2, =_sbss
 800339c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80033a0:	200068c4 	.word	0x200068c4

080033a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033a4:	e7fe      	b.n	80033a4 <ADC1_2_IRQHandler>

080033a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b0:	2003      	movs	r0, #3
 80033b2:	f000 f902 	bl	80035ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033b6:	200f      	movs	r0, #15
 80033b8:	f7ff fe2a 	bl	8003010 <HAL_InitTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	71fb      	strb	r3, [r7, #7]
 80033c6:	e001      	b.n	80033cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c8:	f7ff fc6c 	bl	8002ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033cc:	79fb      	ldrb	r3, [r7, #7]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_IncTick+0x20>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_IncTick+0x24>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_IncTick+0x24>)
 80033ea:	6013      	str	r3, [r2, #0]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000018 	.word	0x20000018
 80033fc:	20000d18 	.word	0x20000d18

08003400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return uwTick;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_GetTick+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000d18 	.word	0x20000d18

08003418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff ffee 	bl	8003400 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d005      	beq.n	800343e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_Delay+0x44>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800343e:	bf00      	nop
 8003440:	f7ff ffde 	bl	8003400 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d8f7      	bhi.n	8003440 <HAL_Delay+0x28>
  {
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000018 	.word	0x20000018

08003460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800348c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003492:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	60d3      	str	r3, [r2, #12]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 0307 	and.w	r3, r3, #7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	db0b      	blt.n	80034ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	4907      	ldr	r1, [pc, #28]	; (80034fc <__NVIC_EnableIRQ+0x38>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2001      	movs	r0, #1
 80034e6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	; (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
         );
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff4c 	bl	8003460 <__NVIC_SetPriorityGrouping>
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e2:	f7ff ff61 	bl	80034a8 <__NVIC_GetPriorityGrouping>
 80035e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	6978      	ldr	r0, [r7, #20]
 80035ee:	f7ff ffb1 	bl	8003554 <NVIC_EncodePriority>
 80035f2:	4602      	mov	r2, r0
 80035f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff80 	bl	8003500 <__NVIC_SetPriority>
}
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff54 	bl	80034c4 <__NVIC_EnableIRQ>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e098      	b.n	8003768 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_DMA_Init+0x150>)
 800363e:	429a      	cmp	r2, r3
 8003640:	d80f      	bhi.n	8003662 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_DMA_Init+0x154>)
 800364a:	4413      	add	r3, r2
 800364c:	4a4b      	ldr	r2, [pc, #300]	; (800377c <HAL_DMA_Init+0x158>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_DMA_Init+0x15c>)
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	e00e      	b.n	8003680 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_DMA_Init+0x160>)
 800366a:	4413      	add	r3, r2
 800366c:	4a43      	ldr	r2, [pc, #268]	; (800377c <HAL_DMA_Init+0x158>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x164>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036da:	d039      	beq.n	8003750 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_DMA_Init+0x15c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d11a      	bne.n	800371c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_DMA_Init+0x168>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f003 031c 	and.w	r3, r3, #28
 80036f2:	210f      	movs	r1, #15
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	4924      	ldr	r1, [pc, #144]	; (800378c <HAL_DMA_Init+0x168>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_DMA_Init+0x168>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f003 031c 	and.w	r3, r3, #28
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	491d      	ldr	r1, [pc, #116]	; (800378c <HAL_DMA_Init+0x168>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
 800371a:	e019      	b.n	8003750 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_DMA_Init+0x16c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f003 031c 	and.w	r3, r3, #28
 8003728:	210f      	movs	r1, #15
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	4917      	ldr	r1, [pc, #92]	; (8003790 <HAL_DMA_Init+0x16c>)
 8003732:	4013      	ands	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <HAL_DMA_Init+0x16c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f003 031c 	and.w	r3, r3, #28
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	4911      	ldr	r1, [pc, #68]	; (8003790 <HAL_DMA_Init+0x16c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40020407 	.word	0x40020407
 8003778:	bffdfff8 	.word	0xbffdfff8
 800377c:	cccccccd 	.word	0xcccccccd
 8003780:	40020000 	.word	0x40020000
 8003784:	bffdfbf8 	.word	0xbffdfbf8
 8003788:	40020400 	.word	0x40020400
 800378c:	400200a8 	.word	0x400200a8
 8003790:	400204a8 	.word	0x400204a8

08003794 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e04b      	b.n	800384c <HAL_DMA_Start_IT+0xb8>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d13a      	bne.n	800383e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f95f 	bl	8003ab0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e005      	b.n	800384a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d008      	beq.n	800387e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 020e 	bic.w	r2, r2, #14
 800388c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 021c 	and.w	r2, r3, #28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d005      	beq.n	80038f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2204      	movs	r2, #4
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e029      	b.n	8003948 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020e 	bic.w	r2, r2, #14
 8003902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f003 021c 	and.w	r2, r3, #28
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
    }
  }
  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 031c 	and.w	r3, r3, #28
 8003972:	2204      	movs	r2, #4
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d026      	beq.n	80039cc <HAL_DMA_IRQHandler+0x7a>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d021      	beq.n	80039cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d107      	bne.n	80039a6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f003 021c 	and.w	r2, r3, #28
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2104      	movs	r1, #4
 80039b4:	fa01 f202 	lsl.w	r2, r1, r2
 80039b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d071      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80039ca:	e06c      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f003 031c 	and.w	r3, r3, #28
 80039d4:	2202      	movs	r2, #2
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02e      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xec>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d029      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 020a 	bic.w	r2, r2, #10
 8003a06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f003 021c 	and.w	r2, r3, #28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d038      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a3c:	e033      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f003 031c 	and.w	r3, r3, #28
 8003a46:	2208      	movs	r2, #8
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x156>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d025      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020e 	bic.w	r2, r2, #14
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f003 021c 	and.w	r2, r3, #28
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
}
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f003 021c 	and.w	r2, r3, #28
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d108      	bne.n	8003af4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003af2:	e007      	b.n	8003b04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1e:	e17f      	b.n	8003e20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8171 	beq.w	8003e1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d005      	beq.n	8003b50 <HAL_GPIO_Init+0x40>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d130      	bne.n	8003bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b86:	2201      	movs	r2, #1
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0201 	and.w	r2, r3, #1
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d118      	bne.n	8003bf0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	f003 0201 	and.w	r2, r3, #1
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d017      	beq.n	8003c2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d123      	bne.n	8003c80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	08da      	lsrs	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3208      	adds	r2, #8
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	220f      	movs	r2, #15
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	6939      	ldr	r1, [r7, #16]
 8003c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80ac 	beq.w	8003e1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_GPIO_Init+0x330>)
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	; (8003e40 <HAL_GPIO_Init+0x330>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_GPIO_Init+0x330>)
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cda:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_GPIO_Init+0x334>)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d04:	d025      	beq.n	8003d52 <HAL_GPIO_Init+0x242>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <HAL_GPIO_Init+0x338>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01f      	beq.n	8003d4e <HAL_GPIO_Init+0x23e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <HAL_GPIO_Init+0x33c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_Init+0x23a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_GPIO_Init+0x340>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x236>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <HAL_GPIO_Init+0x344>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_Init+0x232>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_GPIO_Init+0x348>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x22e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <HAL_GPIO_Init+0x34c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_Init+0x22a>
 8003d36:	2306      	movs	r3, #6
 8003d38:	e00c      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e00a      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d3e:	2305      	movs	r3, #5
 8003d40:	e008      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d42:	2304      	movs	r3, #4
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d46:	2303      	movs	r3, #3
 8003d48:	e004      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_GPIO_Init+0x244>
 8003d52:	2300      	movs	r3, #0
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	f002 0203 	and.w	r2, r2, #3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4093      	lsls	r3, r2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d64:	4937      	ldr	r1, [pc, #220]	; (8003e44 <HAL_GPIO_Init+0x334>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d96:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_GPIO_Init+0x350>)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f47f ae78 	bne.w	8003b20 <HAL_GPIO_Init+0x10>
  }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40010000 	.word	0x40010000
 8003e48:	48000400 	.word	0x48000400
 8003e4c:	48000800 	.word	0x48000800
 8003e50:	48000c00 	.word	0x48000c00
 8003e54:	48001000 	.word	0x48001000
 8003e58:	48001400 	.word	0x48001400
 8003e5c:	48001800 	.word	0x48001800
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e72:	e0cd      	b.n	8004010 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e74:	2201      	movs	r2, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80c0 	beq.w	800400a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e8a:	4a68      	ldr	r2, [pc, #416]	; (800402c <HAL_GPIO_DeInit+0x1c8>)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eb2:	d025      	beq.n	8003f00 <HAL_GPIO_DeInit+0x9c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a5e      	ldr	r2, [pc, #376]	; (8004030 <HAL_GPIO_DeInit+0x1cc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01f      	beq.n	8003efc <HAL_GPIO_DeInit+0x98>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <HAL_GPIO_DeInit+0x1d0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d019      	beq.n	8003ef8 <HAL_GPIO_DeInit+0x94>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a5c      	ldr	r2, [pc, #368]	; (8004038 <HAL_GPIO_DeInit+0x1d4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_GPIO_DeInit+0x90>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <HAL_GPIO_DeInit+0x1d8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_GPIO_DeInit+0x8c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_GPIO_DeInit+0x1dc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <HAL_GPIO_DeInit+0x88>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a59      	ldr	r2, [pc, #356]	; (8004044 <HAL_GPIO_DeInit+0x1e0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_GPIO_DeInit+0x84>
 8003ee4:	2306      	movs	r3, #6
 8003ee6:	e00c      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003ee8:	2307      	movs	r3, #7
 8003eea:	e00a      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003eec:	2305      	movs	r3, #5
 8003eee:	e008      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	e006      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e004      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e002      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_GPIO_DeInit+0x9e>
 8003f00:	2300      	movs	r3, #0
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d132      	bne.n	8003f78 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f12:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	494b      	ldr	r1, [pc, #300]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f20:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	4947      	ldr	r1, [pc, #284]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f2e:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	4944      	ldr	r1, [pc, #272]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_GPIO_DeInit+0x1e4>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f5a:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_GPIO_DeInit+0x1c8>)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	4830      	ldr	r0, [pc, #192]	; (800402c <HAL_GPIO_DeInit+0x1c8>)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	400a      	ands	r2, r1
 8003f72:	3302      	adds	r3, #2
 8003f74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2103      	movs	r1, #3
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	08da      	lsrs	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3208      	adds	r2, #8
 8003f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	08d2      	lsrs	r2, r2, #3
 8003fac:	4019      	ands	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2103      	movs	r1, #3
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f af2b 	bne.w	8003e74 <HAL_GPIO_DeInit+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	48001400 	.word	0x48001400
 8004044:	48001800 	.word	0x48001800
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e001      	b.n	800406e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fae2 	bl	8002664 <HAL_GPIO_EXTI_Callback>
  }
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	43db      	mvns	r3, r3
 80040c0:	401a      	ands	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]


}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 0307 	bic.w	r3, r3, #7
 80040f8:	4a07      	ldr	r2, [pc, #28]	; (8004118 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80040fa:	f043 0303 	orr.w	r3, r3, #3
 80040fe:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	4a05      	ldr	r2, [pc, #20]	; (800411c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004106:	f043 0304 	orr.w	r3, r3, #4
 800410a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800410c:	bf30      	wfi
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40007000 	.word	0x40007000
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_PWREx_GetVoltageRange+0x18>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000

0800413c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414a:	d130      	bne.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d038      	beq.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2232      	movs	r2, #50	; 0x32
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004180:	e002      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b01      	subs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d102      	bne.n	800419c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f2      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d110      	bne.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e00f      	b.n	80041ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d007      	beq.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041c4:	4a05      	ldr	r2, [pc, #20]	; (80041dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40007000 	.word	0x40007000
 80041e0:	20000010 	.word	0x20000010
 80041e4:	431bde83 	.word	0x431bde83

080041e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff f906 	bl	8003400 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e063      	b.n	80042c8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe fd6d 	bl	8002cf4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800421a:	f241 3188 	movw	r1, #5000	; 0x1388
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb03 	bl	800482a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	2120      	movs	r1, #32
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fafb 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d131      	bne.n	80042be <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6852      	ldr	r2, [r2, #4]
 800426c:	0611      	lsls	r1, r2, #24
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_QSPI_Init+0xe8>)
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6912      	ldr	r2, [r2, #16]
 800428a:	0411      	lsls	r1, r2, #16
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6952      	ldr	r2, [r2, #20]
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6992      	ldr	r2, [r2, #24]
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042c6:	7afb      	ldrb	r3, [r7, #11]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	ffe0f8fe 	.word	0xffe0f8fe

080042d4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e016      	b.n	8004314 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fe fd40 	bl	8002d7c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004328:	f7ff f86a 	bl	8003400 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_QSPI_Command+0x22>
 800433a:	2302      	movs	r3, #2
 800433c:	e048      	b.n	80043d0 <HAL_QSPI_Command+0xb4>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d137      	bne.n	80043c2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2200      	movs	r2, #0
 8004368:	2120      	movs	r1, #32
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa6b 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d125      	bne.n	80043c6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800437a:	2200      	movs	r2, #0
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa98 	bl	80048b4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d115      	bne.n	80043b8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2201      	movs	r2, #1
 8004394:	2102      	movs	r1, #2
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fa55 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2202      	movs	r2, #2
 80043ac:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80043b6:	e006      	b.n	80043c6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80043c0:	e001      	b.n	80043c6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff f80a 	bl	8003400 <HAL_GetTick>
 80043ec:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3320      	adds	r3, #32
 80043f4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_QSPI_Transmit+0x2e>
 8004402:	2302      	movs	r3, #2
 8004404:	e07b      	b.n	80044fe <HAL_QSPI_Transmit+0x126>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d16a      	bne.n	80044f0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d05b      	beq.n	80044de <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2212      	movs	r2, #18
 800442a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800445a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800445c:	e01b      	b.n	8004496 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2201      	movs	r2, #1
 8004466:	2104      	movs	r1, #4
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f9ec 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004472:	7ffb      	ldrb	r3, [r7, #31]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d113      	bne.n	80044a0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1df      	bne.n	800445e <HAL_QSPI_Transmit+0x86>
 800449e:	e000      	b.n	80044a2 <HAL_QSPI_Transmit+0xca>
          break;
 80044a0:	bf00      	nop
      }

      if (status == HAL_OK)
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d115      	bne.n	80044d4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2201      	movs	r2, #1
 80044b0:	2102      	movs	r1, #2
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f9c7 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80044bc:	7ffb      	ldrb	r3, [r7, #31]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2202      	movs	r2, #2
 80044c8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f934 	bl	8004738 <HAL_QSPI_Abort>
 80044d0:	4603      	mov	r3, r0
 80044d2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80044dc:	e00a      	b.n	80044f4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	f043 0208 	orr.w	r2, r3, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e001      	b.n	80044f4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80044fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b08a      	sub	sp, #40	; 0x28
 800450a:	af02      	add	r7, sp, #8
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004516:	f7fe ff73 	bl	8003400 <HAL_GetTick>
 800451a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3320      	adds	r3, #32
 800452a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_QSPI_Receive+0x36>
 8004538:	2302      	movs	r3, #2
 800453a:	e082      	b.n	8004642 <HAL_QSPI_Receive+0x13c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d171      	bne.n	8004634 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d062      	beq.n	8004622 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	; 0x22
 8004560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004594:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800459e:	e01c      	b.n	80045da <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2201      	movs	r2, #1
 80045a8:	2106      	movs	r1, #6
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f94b 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80045b4:	7ffb      	ldrb	r3, [r7, #31]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d114      	bne.n	80045e4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1de      	bne.n	80045a0 <HAL_QSPI_Receive+0x9a>
 80045e2:	e000      	b.n	80045e6 <HAL_QSPI_Receive+0xe0>
          break;
 80045e4:	bf00      	nop
      }

      if (status == HAL_OK)
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2201      	movs	r2, #1
 80045f4:	2102      	movs	r1, #2
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f925 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004600:	7ffb      	ldrb	r3, [r7, #31]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f892 	bl	8004738 <HAL_QSPI_Abort>
 8004614:	4603      	mov	r3, r0
 8004616:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004620:	e00a      	b.n	8004638 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e001      	b.n	8004638 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004640:	7ffb      	ldrb	r3, [r7, #31]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b088      	sub	sp, #32
 800464e:	af02      	add	r7, sp, #8
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7fe fed2 	bl	8003400 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_QSPI_AutoPolling+0x24>
 800466a:	2302      	movs	r3, #2
 800466c:	e060      	b.n	8004730 <HAL_QSPI_AutoPolling+0xe6>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d14f      	bne.n	8004722 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2242      	movs	r2, #66	; 0x42
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2200      	movs	r2, #0
 8004698:	2120      	movs	r1, #32
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8d3 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d13d      	bne.n	8004726 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6852      	ldr	r2, [r2, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6892      	ldr	r2, [r2, #8]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80046e0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80046ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f8df 	bl	80048b4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2108      	movs	r1, #8
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f8a0 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004720:	e001      	b.n	8004726 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7fe fe5c 	bl	8003400 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d062      	beq.n	8004820 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff f865 	bl	8003854 <HAL_DMA_Abort>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d034      	beq.n	8004818 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0202 	orr.w	r2, r2, #2
 80047bc:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2201      	movs	r2, #1
 80047c8:	2102      	movs	r1, #2
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f83b 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10e      	bne.n	80047f8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	2120      	movs	r1, #32
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f829 	bl	8004846 <QSPI_WaitFlagStateUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800480c:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004816:	e003      	b.n	8004820 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004856:	e01a      	b.n	800488e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d016      	beq.n	800488e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004860:	f7fe fdce 	bl	8003400 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2204      	movs	r2, #4
 800487a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e00e      	b.n	80048ac <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d1d6      	bne.n	8004858 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <QSPI_Config+0x28>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048ce:	d005      	beq.n	80048dc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3a01      	subs	r2, #1
 80048da:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80b9 	beq.w	8004a58 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d05f      	beq.n	80049ae <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d031      	beq.n	8004964 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	431a      	orrs	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	431a      	orrs	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	431a      	orrs	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	049b      	lsls	r3, r3, #18
 800491c:	431a      	orrs	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	431a      	orrs	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	431a      	orrs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	ea42 0103 	orr.w	r1, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	430a      	orrs	r2, r1
 800494c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004954:	f000 812e 	beq.w	8004bb4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	6852      	ldr	r2, [r2, #4]
 8004960:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8004962:	e127      	b.n	8004bb4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	431a      	orrs	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	431a      	orrs	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	431a      	orrs	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	049b      	lsls	r3, r3, #18
 8004980:	431a      	orrs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	431a      	orrs	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	431a      	orrs	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	431a      	orrs	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	ea42 0103 	orr.w	r1, r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	615a      	str	r2, [r3, #20]
}
 80049ac:	e102      	b.n	8004bb4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02e      	beq.n	8004a14 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	431a      	orrs	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	049b      	lsls	r3, r3, #18
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a04:	f000 80d6 	beq.w	8004bb4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	e0cf      	b.n	8004bb4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	049b      	lsls	r3, r3, #18
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	ea42 0103 	orr.w	r1, r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	e0ad      	b.n	8004bb4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d058      	beq.n	8004b12 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02d      	beq.n	8004ace <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	049b      	lsls	r3, r3, #18
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	ea42 0103 	orr.w	r1, r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ac0:	d078      	beq.n	8004bb4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	6852      	ldr	r2, [r2, #4]
 8004aca:	619a      	str	r2, [r3, #24]
}
 8004acc:	e072      	b.n	8004bb4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	049b      	lsls	r3, r3, #18
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	ea42 0103 	orr.w	r1, r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	615a      	str	r2, [r3, #20]
}
 8004b10:	e050      	b.n	8004bb4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	049b      	lsls	r3, r3, #18
 8004b36:	431a      	orrs	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	ea42 0103 	orr.w	r1, r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b62:	d027      	beq.n	8004bb4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	6852      	ldr	r2, [r2, #4]
 8004b6c:	619a      	str	r2, [r3, #24]
}
 8004b6e:	e021      	b.n	8004bb4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01d      	beq.n	8004bb4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	049b      	lsls	r3, r3, #18
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	ea42 0103 	orr.w	r1, r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	615a      	str	r2, [r3, #20]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e3ca      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd2:	4b97      	ldr	r3, [pc, #604]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bdc:	4b94      	ldr	r3, [pc, #592]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80e4 	beq.w	8004dbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_RCC_OscConfig+0x4a>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	f040 808b 	bne.w	8004d18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f040 8087 	bne.w	8004d18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c0a:	4b89      	ldr	r3, [pc, #548]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_RCC_OscConfig+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e3a2      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	4b82      	ldr	r3, [pc, #520]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <HAL_RCC_OscConfig+0x7c>
 8004c32:	4b7f      	ldr	r3, [pc, #508]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3a:	e005      	b.n	8004c48 <HAL_RCC_OscConfig+0x88>
 8004c3c:	4b7c      	ldr	r3, [pc, #496]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d223      	bcs.n	8004c94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fd87 	bl	8005764 <RCC_SetFlashLatencyFromMSIRange>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e383      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a72      	ldr	r2, [pc, #456]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b70      	ldr	r3, [pc, #448]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	496d      	ldr	r1, [pc, #436]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	4968      	ldr	r1, [pc, #416]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
 8004c92:	e025      	b.n	8004ce0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c94:	4b66      	ldr	r3, [pc, #408]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a65      	ldr	r2, [pc, #404]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	f043 0308 	orr.w	r3, r3, #8
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	4960      	ldr	r1, [pc, #384]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb2:	4b5f      	ldr	r3, [pc, #380]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	495b      	ldr	r1, [pc, #364]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fd47 	bl	8005764 <RCC_SetFlashLatencyFromMSIRange>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e343      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ce0:	f000 fc4a 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b52      	ldr	r3, [pc, #328]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	4950      	ldr	r1, [pc, #320]	; (8004e34 <HAL_RCC_OscConfig+0x274>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	4a4e      	ldr	r2, [pc, #312]	; (8004e38 <HAL_RCC_OscConfig+0x278>)
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d00:	4b4e      	ldr	r3, [pc, #312]	; (8004e3c <HAL_RCC_OscConfig+0x27c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe f983 	bl	8003010 <HAL_InitTick>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d052      	beq.n	8004dba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	e327      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d032      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a42      	ldr	r2, [pc, #264]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d2c:	f7fe fb68 	bl	8003400 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d34:	f7fe fb64 	bl	8003400 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e310      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a36      	ldr	r2, [pc, #216]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	4931      	ldr	r1, [pc, #196]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d70:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	492c      	ldr	r1, [pc, #176]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
 8004d84:	e01a      	b.n	8004dbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d92:	f7fe fb35 	bl	8003400 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d9a:	f7fe fb31 	bl	8003400 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e2dd      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x1da>
 8004db8:	e000      	b.n	8004dbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d074      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x21a>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d10e      	bne.n	8004df2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d064      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x2f0>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d160      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e2ba      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x24a>
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e026      	b.n	8004e58 <HAL_RCC_OscConfig+0x298>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e12:	d115      	bne.n	8004e40 <HAL_RCC_OscConfig+0x280>
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a02      	ldr	r2, [pc, #8]	; (8004e30 <HAL_RCC_OscConfig+0x270>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e014      	b.n	8004e58 <HAL_RCC_OscConfig+0x298>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	08011ae4 	.word	0x08011ae4
 8004e38:	20000010 	.word	0x20000010
 8004e3c:	20000014 	.word	0x20000014
 8004e40:	4ba0      	ldr	r3, [pc, #640]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a9f      	ldr	r2, [pc, #636]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b9d      	ldr	r3, [pc, #628]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a9c      	ldr	r2, [pc, #624]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe face 	bl	8003400 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fe faca 	bl	8003400 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e276      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7a:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x2a8>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe faba 	bl	8003400 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e90:	f7fe fab6 	bl	8003400 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e262      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ea2:	4b88      	ldr	r3, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2d0>
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d060      	beq.n	8004f80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x310>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d119      	bne.n	8004efe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d116      	bne.n	8004efe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed0:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x328>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e23f      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	4973      	ldr	r1, [pc, #460]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efc:	e040      	b.n	8004f80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d023      	beq.n	8004f4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f06:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6e      	ldr	r2, [pc, #440]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fe fa75 	bl	8003400 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fe fa71 	bl	8003400 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e21d      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f2c:	4b65      	ldr	r3, [pc, #404]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f38:	4b62      	ldr	r3, [pc, #392]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	495f      	ldr	r1, [pc, #380]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e018      	b.n	8004f80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b5d      	ldr	r3, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fe fa51 	bl	8003400 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fe fa4d 	bl	8003400 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1f9      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f74:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03c      	beq.n	8005006 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01c      	beq.n	8004fce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f94:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9a:	4a4a      	ldr	r2, [pc, #296]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fe fa2c 	bl	8003400 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fe fa28 	bl	8003400 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1d4      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ef      	beq.n	8004fac <HAL_RCC_OscConfig+0x3ec>
 8004fcc:	e01b      	b.n	8005006 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fe fa0f 	bl	8003400 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fe fa0b 	bl	8003400 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1b7      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1ef      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80a6 	beq.w	8005160 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10d      	bne.n	8005040 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 800502a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502e:	6593      	str	r3, [r2, #88]	; 0x58
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503c:	2301      	movs	r3, #1
 800503e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_RCC_OscConfig+0x508>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d118      	bne.n	800507e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800504c:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_RCC_OscConfig+0x508>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_RCC_OscConfig+0x508>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005058:	f7fe f9d2 	bl	8003400 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fe f9ce 	bl	8003400 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e17a      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCC_OscConfig+0x508>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d108      	bne.n	8005098 <HAL_RCC_OscConfig+0x4d8>
 8005086:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005096:	e029      	b.n	80050ec <HAL_RCC_OscConfig+0x52c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d115      	bne.n	80050cc <HAL_RCC_OscConfig+0x50c>
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 80050a8:	f043 0304 	orr.w	r3, r3, #4
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	4a03      	ldr	r2, [pc, #12]	; (80050c4 <HAL_RCC_OscConfig+0x504>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c0:	e014      	b.n	80050ec <HAL_RCC_OscConfig+0x52c>
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40007000 	.word	0x40007000
 80050cc:	4b9c      	ldr	r3, [pc, #624]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	4a9b      	ldr	r2, [pc, #620]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050dc:	4b98      	ldr	r3, [pc, #608]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	4a97      	ldr	r2, [pc, #604]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d016      	beq.n	8005122 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fe f984 	bl	8003400 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fe f980 	bl	8003400 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e12a      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005112:	4b8b      	ldr	r3, [pc, #556]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ed      	beq.n	80050fc <HAL_RCC_OscConfig+0x53c>
 8005120:	e015      	b.n	800514e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fe f96d 	bl	8003400 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fe f969 	bl	8003400 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e113      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005140:	4b7f      	ldr	r3, [pc, #508]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ed      	bne.n	800512a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b7a      	ldr	r3, [pc, #488]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	4a79      	ldr	r2, [pc, #484]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80fe 	beq.w	8005366 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	2b02      	cmp	r3, #2
 8005170:	f040 80d0 	bne.w	8005314 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005174:	4b72      	ldr	r3, [pc, #456]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0203 	and.w	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	429a      	cmp	r2, r3
 8005186:	d130      	bne.n	80051ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	3b01      	subs	r3, #1
 8005194:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d127      	bne.n	80051ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d11f      	bne.n	80051ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051b4:	2a07      	cmp	r2, #7
 80051b6:	bf14      	ite	ne
 80051b8:	2201      	movne	r2, #1
 80051ba:	2200      	moveq	r2, #0
 80051bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051be:	4293      	cmp	r3, r2
 80051c0:	d113      	bne.n	80051ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	3b01      	subs	r3, #1
 80051d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	3b01      	subs	r3, #1
 80051e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d06e      	beq.n	80052c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d069      	beq.n	80052c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0ad      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800520c:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4b      	ldr	r2, [pc, #300]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005216:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005218:	f7fe f8f2 	bl	8003400 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fe f8ee 	bl	8003400 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e09a      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800523e:	4b40      	ldr	r3, [pc, #256]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	4b40      	ldr	r3, [pc, #256]	; (8005344 <HAL_RCC_OscConfig+0x784>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800524e:	3a01      	subs	r2, #1
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005258:	0212      	lsls	r2, r2, #8
 800525a:	4311      	orrs	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005260:	0852      	lsrs	r2, r2, #1
 8005262:	3a01      	subs	r2, #1
 8005264:	0552      	lsls	r2, r2, #21
 8005266:	4311      	orrs	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800526c:	0852      	lsrs	r2, r2, #1
 800526e:	3a01      	subs	r2, #1
 8005270:	0652      	lsls	r2, r2, #25
 8005272:	4311      	orrs	r1, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005278:	0912      	lsrs	r2, r2, #4
 800527a:	0452      	lsls	r2, r2, #17
 800527c:	430a      	orrs	r2, r1
 800527e:	4930      	ldr	r1, [pc, #192]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005280:	4313      	orrs	r3, r2
 8005282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005284:	4b2e      	ldr	r3, [pc, #184]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 800528a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800529a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800529c:	f7fe f8b0 	bl	8003400 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fe f8ac 	bl	8003400 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e058      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052c2:	e050      	b.n	8005366 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e04f      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d148      	bne.n	8005366 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 80052e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ec:	f7fe f888 	bl	8003400 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fe f884 	bl	8003400 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e030      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x734>
 8005312:	e028      	b.n	8005366 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d023      	beq.n	8005362 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <HAL_RCC_OscConfig+0x780>)
 8005320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fe f86b 	bl	8003400 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532c:	e00c      	b.n	8005348 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532e:	f7fe f867 	bl	8003400 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d905      	bls.n	8005348 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e013      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
 8005340:	40021000 	.word	0x40021000
 8005344:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_OscConfig+0x7b0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ec      	bne.n	800532e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCC_OscConfig+0x7b0>)
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	4905      	ldr	r1, [pc, #20]	; (8005370 <HAL_RCC_OscConfig+0x7b0>)
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_OscConfig+0x7b4>)
 800535c:	4013      	ands	r3, r2
 800535e:	60cb      	str	r3, [r1, #12]
 8005360:	e001      	b.n	8005366 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40021000 	.word	0x40021000
 8005374:	feeefffc 	.word	0xfeeefffc

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0e7      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b75      	ldr	r3, [pc, #468]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d910      	bls.n	80053bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0207 	bic.w	r2, r3, #7
 80053a2:	4970      	ldr	r1, [pc, #448]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b6e      	ldr	r3, [pc, #440]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0cf      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b66      	ldr	r3, [pc, #408]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d908      	bls.n	80053ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d8:	4b63      	ldr	r3, [pc, #396]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4960      	ldr	r1, [pc, #384]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d04c      	beq.n	8005490 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fe:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d121      	bne.n	800544e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0a6      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005416:	4b54      	ldr	r3, [pc, #336]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d115      	bne.n	800544e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e09a      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800542e:	4b4e      	ldr	r3, [pc, #312]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e08e      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800543e:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e086      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800544e:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 0203 	bic.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4943      	ldr	r1, [pc, #268]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7fd ffce 	bl	8003400 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fd ffca 	bl	8003400 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e06e      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 020c 	and.w	r2, r3, #12
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	429a      	cmp	r2, r3
 800548e:	d1eb      	bne.n	8005468 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b31      	ldr	r3, [pc, #196]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d208      	bcs.n	80054be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	492b      	ldr	r1, [pc, #172]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054be:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d210      	bcs.n	80054ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 0207 	bic.w	r2, r3, #7
 80054d4:	4923      	ldr	r1, [pc, #140]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <HAL_RCC_ClockConfig+0x1ec>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d001      	beq.n	80054ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e036      	b.n	800555c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	4918      	ldr	r1, [pc, #96]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005518:	4b13      	ldr	r3, [pc, #76]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4910      	ldr	r1, [pc, #64]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005528:	4313      	orrs	r3, r2
 800552a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800552c:	f000 f824 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8005530:	4602      	mov	r2, r0
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_ClockConfig+0x1f0>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	490b      	ldr	r1, [pc, #44]	; (800556c <HAL_RCC_ClockConfig+0x1f4>)
 800553e:	5ccb      	ldrb	r3, [r1, r3]
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <HAL_RCC_ClockConfig+0x1f8>)
 800554a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCC_ClockConfig+0x1fc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd fd5d 	bl	8003010 <HAL_InitTick>
 8005556:	4603      	mov	r3, r0
 8005558:	72fb      	strb	r3, [r7, #11]

  return status;
 800555a:	7afb      	ldrb	r3, [r7, #11]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40022000 	.word	0x40022000
 8005568:	40021000 	.word	0x40021000
 800556c:	08011ae4 	.word	0x08011ae4
 8005570:	20000010 	.word	0x20000010
 8005574:	20000014 	.word	0x20000014

08005578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005586:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x34>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d121      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d11e      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	e005      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055d4:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_GetSysClockFreq+0x110>)
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e004      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCC_GetSysClockFreq+0x114>)
 80055fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d134      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005606:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0xa6>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d003      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0xac>
 800561c:	e005      	b.n	800562a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_GetSysClockFreq+0x110>)
 8005620:	617b      	str	r3, [r7, #20]
      break;
 8005622:	e005      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_GetSysClockFreq+0x114>)
 8005626:	617b      	str	r3, [r7, #20]
      break;
 8005628:	e002      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	617b      	str	r3, [r7, #20]
      break;
 800562e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	3301      	adds	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	fb03 f202 	mul.w	r2, r3, r2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	0e5b      	lsrs	r3, r3, #25
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	3301      	adds	r3, #1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005670:	69bb      	ldr	r3, [r7, #24]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	; 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	08011afc 	.word	0x08011afc
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000010 	.word	0x20000010

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4904      	ldr	r1, [pc, #16]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40021000 	.word	0x40021000
 80056d0:	08011af4 	.word	0x08011af4

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056d8:	f7ff ffda 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0adb      	lsrs	r3, r3, #11
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4904      	ldr	r1, [pc, #16]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000
 80056fc:	08011af4 	.word	0x08011af4

08005700 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	220f      	movs	r2, #15
 800570e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0203 	and.w	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_GetClockConfig+0x5c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <HAL_RCC_GetClockConfig+0x60>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0207 	and.w	r2, r3, #7
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	40022000 	.word	0x40022000

08005764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800577c:	f7fe fcd0 	bl	8004120 <HAL_PWREx_GetVoltageRange>
 8005780:	6178      	str	r0, [r7, #20]
 8005782:	e014      	b.n	80057ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	4a24      	ldr	r2, [pc, #144]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578e:	6593      	str	r3, [r2, #88]	; 0x58
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800579c:	f7fe fcc0 	bl	8004120 <HAL_PWREx_GetVoltageRange>
 80057a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b4:	d10b      	bne.n	80057ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d919      	bls.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2ba0      	cmp	r3, #160	; 0xa0
 80057c0:	d902      	bls.n	80057c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057c2:	2302      	movs	r3, #2
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e013      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c8:	2301      	movs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	e010      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d902      	bls.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057d4:	2303      	movs	r3, #3
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	e00a      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d102      	bne.n	80057e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057e0:	2302      	movs	r3, #2
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e004      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d101      	bne.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057ec:	2301      	movs	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 0207 	bic.w	r2, r3, #7
 80057f8:	4909      	ldr	r1, [pc, #36]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d001      	beq.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	40022000 	.word	0x40022000

08005824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800582c:	2300      	movs	r3, #0
 800582e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005830:	2300      	movs	r3, #0
 8005832:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583c:	2b00      	cmp	r3, #0
 800583e:	d041      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005844:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005848:	d02a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800584a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800584e:	d824      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005854:	d008      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800585a:	d81e      	bhi.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005864:	d010      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005866:	e018      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005868:	4b86      	ldr	r3, [pc, #536]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a85      	ldr	r2, [pc, #532]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005872:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005874:	e015      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3304      	adds	r3, #4
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fabb 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005886:	e00c      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3320      	adds	r3, #32
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fba6 	bl	8005fe0 <RCCEx_PLLSAI2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	74fb      	strb	r3, [r7, #19]
      break;
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a8:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b6:	4973      	ldr	r1, [pc, #460]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058be:	e001      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d041      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058d8:	d02a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058de:	d824      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e4:	d008      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ea:	d81e      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f4:	d010      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058f6:	e018      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058f8:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a61      	ldr	r2, [pc, #388]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005902:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005904:	e015      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2100      	movs	r1, #0
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fa73 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005916:	e00c      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3320      	adds	r3, #32
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fb5e 	bl	8005fe0 <RCCEx_PLLSAI2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	74fb      	strb	r3, [r7, #19]
      break;
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005932:	7cfb      	ldrb	r3, [r7, #19]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005938:	4b52      	ldr	r3, [pc, #328]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005946:	494f      	ldr	r1, [pc, #316]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800594e:	e001      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80a0 	beq.w	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005962:	2300      	movs	r3, #0
 8005964:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005966:	4b47      	ldr	r3, [pc, #284]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597c:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005986:	6593      	str	r3, [r2, #88]	; 0x58
 8005988:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005994:	2301      	movs	r3, #1
 8005996:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005998:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800599e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a4:	f7fd fd2c 	bl	8003400 <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059aa:	e009      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ac:	f7fd fd28 	bl	8003400 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d902      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	74fb      	strb	r3, [r7, #19]
        break;
 80059be:	e005      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059c0:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d15c      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059d2:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01f      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d019      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059f0:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	4a20      	ldr	r2, [pc, #128]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a1c:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7fd fce7 	bl	8003400 <HAL_GetTick>
 8005a32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a34:	e00b      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd fce3 	bl	8003400 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d902      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0ec      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a72:	4904      	ldr	r1, [pc, #16]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a7a:	e009      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	74bb      	strb	r3, [r7, #18]
 8005a80:	e006      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
 8005a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a90:	7c7b      	ldrb	r3, [r7, #17]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a96:	4b9e      	ldr	r3, [pc, #632]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	4a9d      	ldr	r2, [pc, #628]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aae:	4b98      	ldr	r3, [pc, #608]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f023 0203 	bic.w	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	4994      	ldr	r1, [pc, #592]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ad0:	4b8f      	ldr	r3, [pc, #572]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f023 020c 	bic.w	r2, r3, #12
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	498c      	ldr	r1, [pc, #560]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005af2:	4b87      	ldr	r3, [pc, #540]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	4983      	ldr	r1, [pc, #524]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b14:	4b7e      	ldr	r3, [pc, #504]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	497b      	ldr	r1, [pc, #492]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b36:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b44:	4972      	ldr	r1, [pc, #456]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b58:	4b6d      	ldr	r3, [pc, #436]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	496a      	ldr	r1, [pc, #424]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b7a:	4b65      	ldr	r3, [pc, #404]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	4961      	ldr	r1, [pc, #388]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b9c:	4b5c      	ldr	r3, [pc, #368]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	4959      	ldr	r1, [pc, #356]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bbe:	4b54      	ldr	r3, [pc, #336]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	4950      	ldr	r1, [pc, #320]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005be0:	4b4b      	ldr	r3, [pc, #300]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	4948      	ldr	r1, [pc, #288]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c02:	4b43      	ldr	r3, [pc, #268]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	493f      	ldr	r1, [pc, #252]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d028      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c24:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	4937      	ldr	r1, [pc, #220]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c42:	d106      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4e:	60d3      	str	r3, [r2, #12]
 8005c50:	e011      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c5a:	d10c      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f8c8 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d028      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	491f      	ldr	r1, [pc, #124]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca0:	d106      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4a1a      	ldr	r2, [pc, #104]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cac:	60d3      	str	r3, [r2, #12]
 8005cae:	e011      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f899 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cca:	7cfb      	ldrb	r3, [r7, #19]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02b      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cee:	4908      	ldr	r1, [pc, #32]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cfe:	d109      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a02      	ldr	r2, [pc, #8]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d0a:	60d3      	str	r3, [r2, #12]
 8005d0c:	e014      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2101      	movs	r1, #1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f867 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d44:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d52:	4928      	ldr	r1, [pc, #160]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d62:	d10d      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f844 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d7a:	7cfb      	ldrb	r3, [r7, #19]
 8005d7c:	74bb      	strb	r3, [r7, #18]
 8005d7e:	e011      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f925 	bl	8005fe0 <RCCEx_PLLSAI2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dbe:	490d      	ldr	r1, [pc, #52]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de2:	4904      	ldr	r1, [pc, #16]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dea:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40021000 	.word	0x40021000

08005df8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e06:	4b75      	ldr	r3, [pc, #468]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e12:	4b72      	ldr	r3, [pc, #456]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0203 	and.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d10d      	bne.n	8005e3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
       ||
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e2a:	4b6c      	ldr	r3, [pc, #432]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
       ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d047      	beq.n	8005ece <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e044      	b.n	8005ece <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d018      	beq.n	8005e7e <RCCEx_PLLSAI1_Config+0x86>
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d825      	bhi.n	8005e9c <RCCEx_PLLSAI1_Config+0xa4>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d002      	beq.n	8005e5a <RCCEx_PLLSAI1_Config+0x62>
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d009      	beq.n	8005e6c <RCCEx_PLLSAI1_Config+0x74>
 8005e58:	e020      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e5a:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d11d      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e6a:	e01a      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e6c:	4b5b      	ldr	r3, [pc, #364]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d116      	bne.n	8005ea6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7c:	e013      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e7e:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e8a:	4b54      	ldr	r3, [pc, #336]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e9a:	e006      	b.n	8005eaa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e004      	b.n	8005eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eb2:	4b4a      	ldr	r3, [pc, #296]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	4944      	ldr	r1, [pc, #272]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d17d      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ed4:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee0:	f7fd fa8e 	bl	8003400 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ee6:	e009      	b.n	8005efc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee8:	f7fd fa8a 	bl	8003400 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d902      	bls.n	8005efc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8005efa:	e005      	b.n	8005f08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005efc:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1ef      	bne.n	8005ee8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d160      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d111      	bne.n	8005f38 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f14:	4b31      	ldr	r3, [pc, #196]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	0211      	lsls	r1, r2, #8
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68d2      	ldr	r2, [r2, #12]
 8005f2a:	0912      	lsrs	r2, r2, #4
 8005f2c:	0452      	lsls	r2, r2, #17
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	492a      	ldr	r1, [pc, #168]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	610b      	str	r3, [r1, #16]
 8005f36:	e027      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d112      	bne.n	8005f64 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f3e:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6892      	ldr	r2, [r2, #8]
 8005f4e:	0211      	lsls	r1, r2, #8
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6912      	ldr	r2, [r2, #16]
 8005f54:	0852      	lsrs	r2, r2, #1
 8005f56:	3a01      	subs	r2, #1
 8005f58:	0552      	lsls	r2, r2, #21
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	491f      	ldr	r1, [pc, #124]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	610b      	str	r3, [r1, #16]
 8005f62:	e011      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6892      	ldr	r2, [r2, #8]
 8005f74:	0211      	lsls	r1, r2, #8
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6952      	ldr	r2, [r2, #20]
 8005f7a:	0852      	lsrs	r2, r2, #1
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	0652      	lsls	r2, r2, #25
 8005f80:	430a      	orrs	r2, r1
 8005f82:	4916      	ldr	r1, [pc, #88]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f94:	f7fd fa34 	bl	8003400 <HAL_GetTick>
 8005f98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f9a:	e009      	b.n	8005fb0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f9c:	f7fd fa30 	bl	8003400 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d902      	bls.n	8005fb0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	73fb      	strb	r3, [r7, #15]
          break;
 8005fae:	e005      	b.n	8005fbc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ef      	beq.n	8005f9c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	4904      	ldr	r1, [pc, #16]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fee:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d018      	beq.n	800602c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ffa:	4b67      	ldr	r3, [pc, #412]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f003 0203 	and.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d10d      	bne.n	8006026 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
       ||
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006012:	4b61      	ldr	r3, [pc, #388]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
       ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d047      	beq.n	80060b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
 800602a:	e044      	b.n	80060b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d018      	beq.n	8006066 <RCCEx_PLLSAI2_Config+0x86>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d825      	bhi.n	8006084 <RCCEx_PLLSAI2_Config+0xa4>
 8006038:	2b01      	cmp	r3, #1
 800603a:	d002      	beq.n	8006042 <RCCEx_PLLSAI2_Config+0x62>
 800603c:	2b02      	cmp	r3, #2
 800603e:	d009      	beq.n	8006054 <RCCEx_PLLSAI2_Config+0x74>
 8006040:	e020      	b.n	8006084 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006042:	4b55      	ldr	r3, [pc, #340]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11d      	bne.n	800608a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006052:	e01a      	b.n	800608a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	2b00      	cmp	r3, #0
 800605e:	d116      	bne.n	800608e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006064:	e013      	b.n	800608e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006066:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006072:	4b49      	ldr	r3, [pc, #292]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006082:	e006      	b.n	8006092 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e004      	b.n	8006094 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800608a:	bf00      	nop
 800608c:	e002      	b.n	8006094 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800608e:	bf00      	nop
 8006090:	e000      	b.n	8006094 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006092:	bf00      	nop
    }

    if(status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10d      	bne.n	80060b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800609a:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6819      	ldr	r1, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	430b      	orrs	r3, r1
 80060b0:	4939      	ldr	r1, [pc, #228]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d167      	bne.n	800618c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060bc:	4b36      	ldr	r3, [pc, #216]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a35      	ldr	r2, [pc, #212]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c8:	f7fd f99a 	bl	8003400 <HAL_GetTick>
 80060cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ce:	e009      	b.n	80060e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060d0:	f7fd f996 	bl	8003400 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d902      	bls.n	80060e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	73fb      	strb	r3, [r7, #15]
        break;
 80060e2:	e005      	b.n	80060f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060e4:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ef      	bne.n	80060d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d14a      	bne.n	800618c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d111      	bne.n	8006120 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060fc:	4b26      	ldr	r3, [pc, #152]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6892      	ldr	r2, [r2, #8]
 800610c:	0211      	lsls	r1, r2, #8
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	0912      	lsrs	r2, r2, #4
 8006114:	0452      	lsls	r2, r2, #17
 8006116:	430a      	orrs	r2, r1
 8006118:	491f      	ldr	r1, [pc, #124]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 800611a:	4313      	orrs	r3, r2
 800611c:	614b      	str	r3, [r1, #20]
 800611e:	e011      	b.n	8006144 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006120:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006128:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6892      	ldr	r2, [r2, #8]
 8006130:	0211      	lsls	r1, r2, #8
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6912      	ldr	r2, [r2, #16]
 8006136:	0852      	lsrs	r2, r2, #1
 8006138:	3a01      	subs	r2, #1
 800613a:	0652      	lsls	r2, r2, #25
 800613c:	430a      	orrs	r2, r1
 800613e:	4916      	ldr	r1, [pc, #88]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006140:	4313      	orrs	r3, r2
 8006142:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 800614a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fd f956 	bl	8003400 <HAL_GetTick>
 8006154:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006156:	e009      	b.n	800616c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006158:	f7fd f952 	bl	8003400 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d902      	bls.n	800616c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	73fb      	strb	r3, [r7, #15]
          break;
 800616a:	e005      	b.n	8006178 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ef      	beq.n	8006158 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	4904      	ldr	r1, [pc, #16]	; (8006198 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006188:	4313      	orrs	r3, r2
 800618a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40021000 	.word	0x40021000

0800619c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e049      	b.n	8006242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f841 	bl	800624a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 f9f8 	bl	80065d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e04f      	b.n	8006318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a23      	ldr	r2, [pc, #140]	; (8006324 <HAL_TIM_Base_Start_IT+0xc4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d018      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_TIM_Base_Start_IT+0xc8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_TIM_Base_Start_IT+0xcc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIM_Base_Start_IT+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <HAL_TIM_Base_Start_IT+0xd4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_TIM_Base_Start_IT+0xd8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d115      	bne.n	8006302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	4b17      	ldr	r3, [pc, #92]	; (800633c <HAL_TIM_Base_Start_IT+0xdc>)
 80062de:	4013      	ands	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d015      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d011      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006300:	e008      	b.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e000      	b.n	8006316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	00010007 	.word	0x00010007

08006340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b02      	cmp	r3, #2
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0202 	mvn.w	r2, #2
 800636c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f905 	bl	8006592 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8f7 	bl	800657e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f908 	bl	80065a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0204 	mvn.w	r2, #4
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8db 	bl	8006592 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8cd 	bl	800657e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8de 	bl	80065a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d122      	bne.n	8006444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0208 	mvn.w	r2, #8
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8b1 	bl	8006592 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f8a3 	bl	800657e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f8b4 	bl	80065a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d122      	bne.n	8006498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b10      	cmp	r3, #16
 800645e:	d11b      	bne.n	8006498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0210 	mvn.w	r2, #16
 8006468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2208      	movs	r2, #8
 800646e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f887 	bl	8006592 <HAL_TIM_IC_CaptureCallback>
 8006484:	e005      	b.n	8006492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f879 	bl	800657e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f88a 	bl	80065a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10e      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d107      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0201 	mvn.w	r2, #1
 80064bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fc fbd8 	bl	8002c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b80      	cmp	r3, #128	; 0x80
 80064d0:	d10e      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f914 	bl	8006718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	d10e      	bne.n	800651e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d107      	bne.n	800651e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f907 	bl	800672c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d10e      	bne.n	800654a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d107      	bne.n	800654a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f838 	bl	80065ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b20      	cmp	r3, #32
 8006556:	d10e      	bne.n	8006576 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b20      	cmp	r3, #32
 8006564:	d107      	bne.n	8006576 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f06f 0220 	mvn.w	r2, #32
 800656e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f8c7 	bl	8006704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
	...

080065d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a40      	ldr	r2, [pc, #256]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d00f      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a3d      	ldr	r2, [pc, #244]	; (80066e8 <TIM_Base_SetConfig+0x118>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00b      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a3c      	ldr	r2, [pc, #240]	; (80066ec <TIM_Base_SetConfig+0x11c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d007      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a3b      	ldr	r2, [pc, #236]	; (80066f0 <TIM_Base_SetConfig+0x120>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a3a      	ldr	r2, [pc, #232]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01f      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006630:	d01b      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <TIM_Base_SetConfig+0x118>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d017      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <TIM_Base_SetConfig+0x11c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <TIM_Base_SetConfig+0x120>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00f      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00b      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a28      	ldr	r2, [pc, #160]	; (80066f8 <TIM_Base_SetConfig+0x128>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a27      	ldr	r2, [pc, #156]	; (80066fc <TIM_Base_SetConfig+0x12c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_Base_SetConfig+0x9a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <TIM_Base_SetConfig+0x130>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d108      	bne.n	800667c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <TIM_Base_SetConfig+0x114>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00f      	beq.n	80066c8 <TIM_Base_SetConfig+0xf8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <TIM_Base_SetConfig+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <TIM_Base_SetConfig+0xf8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <TIM_Base_SetConfig+0x128>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <TIM_Base_SetConfig+0xf8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a10      	ldr	r2, [pc, #64]	; (80066fc <TIM_Base_SetConfig+0x12c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_Base_SetConfig+0xf8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a0f      	ldr	r2, [pc, #60]	; (8006700 <TIM_Base_SetConfig+0x130>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d103      	bne.n	80066d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	615a      	str	r2, [r3, #20]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800

08006704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e040      	b.n	80067d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fc fb28 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2224      	movs	r2, #36	; 0x24
 800676c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fcd2 	bl	8007128 <UART_SetConfig>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e022      	b.n	80067d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 ff7e 	bl	8007698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 f805 	bl	80077dc <UART_CheckIdleState>
 80067d2:	4603      	mov	r3, r0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	f040 8082 	bne.w	80068fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_UART_Transmit+0x26>
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07a      	b.n	80068fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_UART_Transmit+0x38>
 8006810:	2302      	movs	r3, #2
 8006812:	e073      	b.n	80068fc <HAL_UART_Transmit+0x120>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2221      	movs	r2, #33	; 0x21
 8006828:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800682a:	f7fc fde9 	bl	8003400 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006848:	d108      	bne.n	800685c <HAL_UART_Transmit+0x80>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	e003      	b.n	8006864 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800686c:	e02d      	b.n	80068ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2200      	movs	r2, #0
 8006876:	2180      	movs	r1, #128	; 0x80
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fff8 	bl	800786e <UART_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e039      	b.n	80068fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	881a      	ldrh	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689a:	b292      	uxth	r2, r2
 800689c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	3302      	adds	r3, #2
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	e008      	b.n	80068b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b292      	uxth	r2, r2
 80068b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3301      	adds	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1cb      	bne.n	800686e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	2140      	movs	r1, #64	; 0x40
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 ffc4 	bl	800786e <UART_WaitOnFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e005      	b.n	80068fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006904:	b480      	push	{r7}
 8006906:	b08b      	sub	sp, #44	; 0x2c
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006916:	2b20      	cmp	r3, #32
 8006918:	d156      	bne.n	80069c8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_UART_Transmit_IT+0x22>
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e04f      	b.n	80069ca <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_UART_Transmit_IT+0x34>
 8006934:	2302      	movs	r3, #2
 8006936:	e048      	b.n	80069ca <HAL_UART_Transmit_IT+0xc6>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	88fa      	ldrh	r2, [r7, #6]
 800694a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2221      	movs	r2, #33	; 0x21
 8006968:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d107      	bne.n	8006984 <HAL_UART_Transmit_IT+0x80>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <HAL_UART_Transmit_IT+0xd4>)
 8006980:	669a      	str	r2, [r3, #104]	; 0x68
 8006982:	e002      	b.n	800698a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_UART_Transmit_IT+0xd8>)
 8006988:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	372c      	adds	r7, #44	; 0x2c
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	080080a7 	.word	0x080080a7
 80069dc:	08007fef 	.word	0x08007fef

080069e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d142      	bne.n	8006a7c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_UART_Receive_IT+0x22>
 80069fc:	88fb      	ldrh	r3, [r7, #6]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e03b      	b.n	8006a7e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_UART_Receive_IT+0x34>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e034      	b.n	8006a7e <HAL_UART_Receive_IT+0x9e>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a18      	ldr	r2, [pc, #96]	; (8006a88 <HAL_UART_Receive_IT+0xa8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d01f      	beq.n	8006a6c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d018      	beq.n	8006a6c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	613b      	str	r3, [r7, #16]
   return(result);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 ffc0 	bl	80079f8 <UART_Start_Receive_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	; 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40008000 	.word	0x40008000

08006a8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d142      	bne.n	8006b28 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_UART_Receive_DMA+0x22>
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e03b      	b.n	8006b2a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Receive_DMA+0x34>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e034      	b.n	8006b2a <HAL_UART_Receive_DMA+0x9e>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_UART_Receive_DMA+0xa8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01f      	beq.n	8006b18 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d018      	beq.n	8006b18 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	69f9      	ldr	r1, [r7, #28]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e6      	bne.n	8006ae6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 f834 	bl	8007b8c <UART_Start_Receive_DMA>
 8006b24:	4603      	mov	r3, r0
 8006b26:	e000      	b.n	8006b2a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3728      	adds	r7, #40	; 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40008000 	.word	0x40008000

08006b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b0ba      	sub	sp, #232	; 0xe8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b66:	4013      	ands	r3, r2
 8006b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d115      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00f      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 82a6 	beq.w	80070e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
      }
      return;
 8006b9e:	e2a0      	b.n	80070e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8117 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bba:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_UART_IRQHandler+0x298>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 810a 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d011      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xbc>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d011      	beq.n	8006c24 <HAL_UART_IRQHandler+0xec>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2202      	movs	r2, #2
 8006c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1a:	f043 0204 	orr.w	r2, r3, #4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2204      	movs	r2, #4
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d017      	beq.n	8006c90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c86:	f043 0208 	orr.w	r2, r3, #8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x18a>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00c      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 820c 	beq.w	80070e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00d      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d005      	beq.n	8006d1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d04f      	beq.n	8006dba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f802 	bl	8007d24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d141      	bne.n	8006db2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1d9      	bne.n	8006d2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d013      	beq.n	8006daa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <HAL_UART_IRQHandler+0x29c>)
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fc fd9e 	bl	80038d0 <HAL_DMA_Abort_IT>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e00f      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9a6 	bl	80070fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	e00b      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9a2 	bl	80070fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db8:	e007      	b.n	8006dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f99e 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006dc8:	e18d      	b.n	80070e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	bf00      	nop
    return;
 8006dcc:	e18b      	b.n	80070e6 <HAL_UART_IRQHandler+0x5ae>
 8006dce:	bf00      	nop
 8006dd0:	04000120 	.word	0x04000120
 8006dd4:	08007fc3 	.word	0x08007fc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 8146 	bne.w	800706e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 813f 	beq.w	800706e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8138 	beq.w	800706e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	f040 80b4 	bne.w	8006f7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 815f 	beq.w	80070ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e36:	429a      	cmp	r2, r3
 8006e38:	f080 8157 	bcs.w	80070ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 8085 	bne.w	8006f62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1da      	bne.n	8006e58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e1      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e3      	bne.n	8006ede <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f32:	f023 0310 	bic.w	r3, r3, #16
 8006f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e4      	bne.n	8006f22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fc fc79 	bl	8003854 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8ca 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f7c:	e0b5      	b.n	80070ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80a7 	beq.w	80070ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80a2 	beq.w	80070ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007004:	633a      	str	r2, [r7, #48]	; 0x30
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e3      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	60fb      	str	r3, [r7, #12]
   return(result);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0310 	bic.w	r3, r3, #16
 800703e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	617b      	str	r3, [r7, #20]
   return(result);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e4      	bne.n	800702a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f852 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800706c:	e03f      	b.n	80070ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <HAL_UART_IRQHandler+0x560>
 800707a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800708e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f9f2 	bl	800847a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007096:	e02d      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00e      	beq.n	80070c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01c      	beq.n	80070f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
    }
    return;
 80070c0:	e017      	b.n	80070f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d012      	beq.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 f843 	bl	8008166 <UART_EndTransmit_IT>
    return;
 80070e0:	e008      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070e2:	bf00      	nop
 80070e4:	e006      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070e6:	bf00      	nop
 80070e8:	e004      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070ea:	bf00      	nop
 80070ec:	e002      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070f4:	37e8      	adds	r7, #232	; 0xe8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800712c:	b08a      	sub	sp, #40	; 0x28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4ba4      	ldr	r3, [pc, #656]	; (80073e8 <UART_SetConfig+0x2c0>)
 8007158:	4013      	ands	r3, r2
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007160:	430b      	orrs	r3, r1
 8007162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a99      	ldr	r2, [pc, #612]	; (80073ec <UART_SetConfig+0x2c4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007190:	4313      	orrs	r3, r2
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a4:	430a      	orrs	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a90      	ldr	r2, [pc, #576]	; (80073f0 <UART_SetConfig+0x2c8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d126      	bne.n	8007200 <UART_SetConfig+0xd8>
 80071b2:	4b90      	ldr	r3, [pc, #576]	; (80073f4 <UART_SetConfig+0x2cc>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d81b      	bhi.n	80071f8 <UART_SetConfig+0xd0>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0xa0>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e116      	b.n	800740e <UART_SetConfig+0x2e6>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e112      	b.n	800740e <UART_SetConfig+0x2e6>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e10e      	b.n	800740e <UART_SetConfig+0x2e6>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f6:	e10a      	b.n	800740e <UART_SetConfig+0x2e6>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fe:	e106      	b.n	800740e <UART_SetConfig+0x2e6>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7c      	ldr	r2, [pc, #496]	; (80073f8 <UART_SetConfig+0x2d0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d138      	bne.n	800727c <UART_SetConfig+0x154>
 800720a:	4b7a      	ldr	r3, [pc, #488]	; (80073f4 <UART_SetConfig+0x2cc>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	2b0c      	cmp	r3, #12
 8007216:	d82d      	bhi.n	8007274 <UART_SetConfig+0x14c>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0xf8>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	08007255 	.word	0x08007255
 8007224:	08007275 	.word	0x08007275
 8007228:	08007275 	.word	0x08007275
 800722c:	08007275 	.word	0x08007275
 8007230:	08007265 	.word	0x08007265
 8007234:	08007275 	.word	0x08007275
 8007238:	08007275 	.word	0x08007275
 800723c:	08007275 	.word	0x08007275
 8007240:	0800725d 	.word	0x0800725d
 8007244:	08007275 	.word	0x08007275
 8007248:	08007275 	.word	0x08007275
 800724c:	08007275 	.word	0x08007275
 8007250:	0800726d 	.word	0x0800726d
 8007254:	2300      	movs	r3, #0
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725a:	e0d8      	b.n	800740e <UART_SetConfig+0x2e6>
 800725c:	2302      	movs	r3, #2
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007262:	e0d4      	b.n	800740e <UART_SetConfig+0x2e6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e0d0      	b.n	800740e <UART_SetConfig+0x2e6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007272:	e0cc      	b.n	800740e <UART_SetConfig+0x2e6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727a:	e0c8      	b.n	800740e <UART_SetConfig+0x2e6>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a5e      	ldr	r2, [pc, #376]	; (80073fc <UART_SetConfig+0x2d4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d125      	bne.n	80072d2 <UART_SetConfig+0x1aa>
 8007286:	4b5b      	ldr	r3, [pc, #364]	; (80073f4 <UART_SetConfig+0x2cc>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007290:	2b30      	cmp	r3, #48	; 0x30
 8007292:	d016      	beq.n	80072c2 <UART_SetConfig+0x19a>
 8007294:	2b30      	cmp	r3, #48	; 0x30
 8007296:	d818      	bhi.n	80072ca <UART_SetConfig+0x1a2>
 8007298:	2b20      	cmp	r3, #32
 800729a:	d00a      	beq.n	80072b2 <UART_SetConfig+0x18a>
 800729c:	2b20      	cmp	r3, #32
 800729e:	d814      	bhi.n	80072ca <UART_SetConfig+0x1a2>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <UART_SetConfig+0x182>
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d008      	beq.n	80072ba <UART_SetConfig+0x192>
 80072a8:	e00f      	b.n	80072ca <UART_SetConfig+0x1a2>
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b0:	e0ad      	b.n	800740e <UART_SetConfig+0x2e6>
 80072b2:	2302      	movs	r3, #2
 80072b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b8:	e0a9      	b.n	800740e <UART_SetConfig+0x2e6>
 80072ba:	2304      	movs	r3, #4
 80072bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c0:	e0a5      	b.n	800740e <UART_SetConfig+0x2e6>
 80072c2:	2308      	movs	r3, #8
 80072c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c8:	e0a1      	b.n	800740e <UART_SetConfig+0x2e6>
 80072ca:	2310      	movs	r3, #16
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d0:	e09d      	b.n	800740e <UART_SetConfig+0x2e6>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a4a      	ldr	r2, [pc, #296]	; (8007400 <UART_SetConfig+0x2d8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d125      	bne.n	8007328 <UART_SetConfig+0x200>
 80072dc:	4b45      	ldr	r3, [pc, #276]	; (80073f4 <UART_SetConfig+0x2cc>)
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072e6:	2bc0      	cmp	r3, #192	; 0xc0
 80072e8:	d016      	beq.n	8007318 <UART_SetConfig+0x1f0>
 80072ea:	2bc0      	cmp	r3, #192	; 0xc0
 80072ec:	d818      	bhi.n	8007320 <UART_SetConfig+0x1f8>
 80072ee:	2b80      	cmp	r3, #128	; 0x80
 80072f0:	d00a      	beq.n	8007308 <UART_SetConfig+0x1e0>
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d814      	bhi.n	8007320 <UART_SetConfig+0x1f8>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <UART_SetConfig+0x1d8>
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d008      	beq.n	8007310 <UART_SetConfig+0x1e8>
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0x1f8>
 8007300:	2300      	movs	r3, #0
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007306:	e082      	b.n	800740e <UART_SetConfig+0x2e6>
 8007308:	2302      	movs	r3, #2
 800730a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730e:	e07e      	b.n	800740e <UART_SetConfig+0x2e6>
 8007310:	2304      	movs	r3, #4
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007316:	e07a      	b.n	800740e <UART_SetConfig+0x2e6>
 8007318:	2308      	movs	r3, #8
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731e:	e076      	b.n	800740e <UART_SetConfig+0x2e6>
 8007320:	2310      	movs	r3, #16
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007326:	e072      	b.n	800740e <UART_SetConfig+0x2e6>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a35      	ldr	r2, [pc, #212]	; (8007404 <UART_SetConfig+0x2dc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d12a      	bne.n	8007388 <UART_SetConfig+0x260>
 8007332:	4b30      	ldr	r3, [pc, #192]	; (80073f4 <UART_SetConfig+0x2cc>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007340:	d01a      	beq.n	8007378 <UART_SetConfig+0x250>
 8007342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007346:	d81b      	bhi.n	8007380 <UART_SetConfig+0x258>
 8007348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734c:	d00c      	beq.n	8007368 <UART_SetConfig+0x240>
 800734e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007352:	d815      	bhi.n	8007380 <UART_SetConfig+0x258>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <UART_SetConfig+0x238>
 8007358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735c:	d008      	beq.n	8007370 <UART_SetConfig+0x248>
 800735e:	e00f      	b.n	8007380 <UART_SetConfig+0x258>
 8007360:	2300      	movs	r3, #0
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007366:	e052      	b.n	800740e <UART_SetConfig+0x2e6>
 8007368:	2302      	movs	r3, #2
 800736a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736e:	e04e      	b.n	800740e <UART_SetConfig+0x2e6>
 8007370:	2304      	movs	r3, #4
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007376:	e04a      	b.n	800740e <UART_SetConfig+0x2e6>
 8007378:	2308      	movs	r3, #8
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737e:	e046      	b.n	800740e <UART_SetConfig+0x2e6>
 8007380:	2310      	movs	r3, #16
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	e042      	b.n	800740e <UART_SetConfig+0x2e6>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a17      	ldr	r2, [pc, #92]	; (80073ec <UART_SetConfig+0x2c4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d13a      	bne.n	8007408 <UART_SetConfig+0x2e0>
 8007392:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <UART_SetConfig+0x2cc>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800739c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073a0:	d01a      	beq.n	80073d8 <UART_SetConfig+0x2b0>
 80073a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073a6:	d81b      	bhi.n	80073e0 <UART_SetConfig+0x2b8>
 80073a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ac:	d00c      	beq.n	80073c8 <UART_SetConfig+0x2a0>
 80073ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b2:	d815      	bhi.n	80073e0 <UART_SetConfig+0x2b8>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <UART_SetConfig+0x298>
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073bc:	d008      	beq.n	80073d0 <UART_SetConfig+0x2a8>
 80073be:	e00f      	b.n	80073e0 <UART_SetConfig+0x2b8>
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c6:	e022      	b.n	800740e <UART_SetConfig+0x2e6>
 80073c8:	2302      	movs	r3, #2
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ce:	e01e      	b.n	800740e <UART_SetConfig+0x2e6>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d6:	e01a      	b.n	800740e <UART_SetConfig+0x2e6>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073de:	e016      	b.n	800740e <UART_SetConfig+0x2e6>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e6:	e012      	b.n	800740e <UART_SetConfig+0x2e6>
 80073e8:	efff69f3 	.word	0xefff69f3
 80073ec:	40008000 	.word	0x40008000
 80073f0:	40013800 	.word	0x40013800
 80073f4:	40021000 	.word	0x40021000
 80073f8:	40004400 	.word	0x40004400
 80073fc:	40004800 	.word	0x40004800
 8007400:	40004c00 	.word	0x40004c00
 8007404:	40005000 	.word	0x40005000
 8007408:	2310      	movs	r3, #16
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a9f      	ldr	r2, [pc, #636]	; (8007690 <UART_SetConfig+0x568>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d17a      	bne.n	800750e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800741c:	2b08      	cmp	r3, #8
 800741e:	d824      	bhi.n	800746a <UART_SetConfig+0x342>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0x300>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800744d 	.word	0x0800744d
 800742c:	0800746b 	.word	0x0800746b
 8007430:	08007455 	.word	0x08007455
 8007434:	0800746b 	.word	0x0800746b
 8007438:	0800745b 	.word	0x0800745b
 800743c:	0800746b 	.word	0x0800746b
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800746b 	.word	0x0800746b
 8007448:	08007463 	.word	0x08007463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800744c:	f7fe f92c 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007450:	61f8      	str	r0, [r7, #28]
        break;
 8007452:	e010      	b.n	8007476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007454:	4b8f      	ldr	r3, [pc, #572]	; (8007694 <UART_SetConfig+0x56c>)
 8007456:	61fb      	str	r3, [r7, #28]
        break;
 8007458:	e00d      	b.n	8007476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745a:	f7fe f88d 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 800745e:	61f8      	str	r0, [r7, #28]
        break;
 8007460:	e009      	b.n	8007476 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007466:	61fb      	str	r3, [r7, #28]
        break;
 8007468:	e005      	b.n	8007476 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80fb 	beq.w	8007674 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	429a      	cmp	r2, r3
 800748c:	d305      	bcc.n	800749a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	429a      	cmp	r2, r3
 8007498:	d903      	bls.n	80074a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074a0:	e0e8      	b.n	8007674 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2200      	movs	r2, #0
 80074a6:	461c      	mov	r4, r3
 80074a8:	4615      	mov	r5, r2
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	022b      	lsls	r3, r5, #8
 80074b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80074b8:	0222      	lsls	r2, r4, #8
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6849      	ldr	r1, [r1, #4]
 80074be:	0849      	lsrs	r1, r1, #1
 80074c0:	2000      	movs	r0, #0
 80074c2:	4688      	mov	r8, r1
 80074c4:	4681      	mov	r9, r0
 80074c6:	eb12 0a08 	adds.w	sl, r2, r8
 80074ca:	eb43 0b09 	adc.w	fp, r3, r9
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	f7f9 fbe2 	bl	8000ca8 <__aeabi_uldivmod>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4613      	mov	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f2:	d308      	bcc.n	8007506 <UART_SetConfig+0x3de>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fa:	d204      	bcs.n	8007506 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	e0b6      	b.n	8007674 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800750c:	e0b2      	b.n	8007674 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007516:	d15e      	bne.n	80075d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800751c:	2b08      	cmp	r3, #8
 800751e:	d828      	bhi.n	8007572 <UART_SetConfig+0x44a>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0x400>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	0800754d 	.word	0x0800754d
 800752c:	08007555 	.word	0x08007555
 8007530:	0800755d 	.word	0x0800755d
 8007534:	08007573 	.word	0x08007573
 8007538:	08007563 	.word	0x08007563
 800753c:	08007573 	.word	0x08007573
 8007540:	08007573 	.word	0x08007573
 8007544:	08007573 	.word	0x08007573
 8007548:	0800756b 	.word	0x0800756b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800754c:	f7fe f8ac 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007550:	61f8      	str	r0, [r7, #28]
        break;
 8007552:	e014      	b.n	800757e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007554:	f7fe f8be 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007558:	61f8      	str	r0, [r7, #28]
        break;
 800755a:	e010      	b.n	800757e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800755c:	4b4d      	ldr	r3, [pc, #308]	; (8007694 <UART_SetConfig+0x56c>)
 800755e:	61fb      	str	r3, [r7, #28]
        break;
 8007560:	e00d      	b.n	800757e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007562:	f7fe f809 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8007566:	61f8      	str	r0, [r7, #28]
        break;
 8007568:	e009      	b.n	800757e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756e:	61fb      	str	r3, [r7, #28]
        break;
 8007570:	e005      	b.n	800757e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800757c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d077      	beq.n	8007674 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	005a      	lsls	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	441a      	add	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	2b0f      	cmp	r3, #15
 800759e:	d916      	bls.n	80075ce <UART_SetConfig+0x4a6>
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a6:	d212      	bcs.n	80075ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f023 030f 	bic.w	r3, r3, #15
 80075b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	b29a      	uxth	r2, r3
 80075be:	8afb      	ldrh	r3, [r7, #22]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	8afa      	ldrh	r2, [r7, #22]
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e052      	b.n	8007674 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075d4:	e04e      	b.n	8007674 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d827      	bhi.n	800762e <UART_SetConfig+0x506>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <UART_SetConfig+0x4bc>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007611 	.word	0x08007611
 80075ec:	08007619 	.word	0x08007619
 80075f0:	0800762f 	.word	0x0800762f
 80075f4:	0800761f 	.word	0x0800761f
 80075f8:	0800762f 	.word	0x0800762f
 80075fc:	0800762f 	.word	0x0800762f
 8007600:	0800762f 	.word	0x0800762f
 8007604:	08007627 	.word	0x08007627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fe f84e 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 800760c:	61f8      	str	r0, [r7, #28]
        break;
 800760e:	e014      	b.n	800763a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007610:	f7fe f860 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007614:	61f8      	str	r0, [r7, #28]
        break;
 8007616:	e010      	b.n	800763a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <UART_SetConfig+0x56c>)
 800761a:	61fb      	str	r3, [r7, #28]
        break;
 800761c:	e00d      	b.n	800763a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761e:	f7fd ffab 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8007622:	61f8      	str	r0, [r7, #28]
        break;
 8007624:	e009      	b.n	800763a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762a:	61fb      	str	r3, [r7, #28]
        break;
 800762c:	e005      	b.n	800763a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007638:	bf00      	nop
    }

    if (pclk != 0U)
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d019      	beq.n	8007674 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	085a      	lsrs	r2, r3, #1
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	441a      	add	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007652:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d909      	bls.n	800766e <UART_SetConfig+0x546>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007660:	d205      	bcs.n	800766e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e002      	b.n	8007674 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007680:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007684:	4618      	mov	r0, r3
 8007686:	3728      	adds	r7, #40	; 0x28
 8007688:	46bd      	mov	sp, r7
 800768a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800768e:	bf00      	nop
 8007690:	40008000 	.word	0x40008000
 8007694:	00f42400 	.word	0x00f42400

08007698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01a      	beq.n	80077ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007796:	d10a      	bne.n	80077ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	605a      	str	r2, [r3, #4]
  }
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077ec:	f7fb fe08 	bl	8003400 <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d10e      	bne.n	800781e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f82d 	bl	800786e <UART_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e023      	b.n	8007866 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b04      	cmp	r3, #4
 800782a:	d10e      	bne.n	800784a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800782c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f817 	bl	800786e <UART_WaitOnFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e00d      	b.n	8007866 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b09c      	sub	sp, #112	; 0x70
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787e:	e0a5      	b.n	80079cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	f000 80a1 	beq.w	80079cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800788a:	f7fb fdb9 	bl	8003400 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007896:	429a      	cmp	r2, r3
 8007898:	d302      	bcc.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800789a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789c:	2b00      	cmp	r3, #0
 800789e:	d13e      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078b4:	667b      	str	r3, [r7, #100]	; 0x64
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e6      	bne.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	663b      	str	r3, [r7, #96]	; 0x60
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80078f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e067      	b.n	80079ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d04f      	beq.n	80079cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793a:	d147      	bne.n	80079cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007944:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800795a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007998:	623a      	str	r2, [r7, #32]
 800799a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e010      	b.n	80079ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4013      	ands	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	bf0c      	ite	eq
 80079dc:	2301      	moveq	r3, #1
 80079de:	2300      	movne	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	f43f af4a 	beq.w	8007880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3770      	adds	r7, #112	; 0x70
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b097      	sub	sp, #92	; 0x5c
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d10e      	bne.n	8007a4a <UART_Start_Receive_IT+0x52>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <UART_Start_Receive_IT+0x48>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a3e:	e02d      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	22ff      	movs	r2, #255	; 0xff
 8007a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a48:	e028      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <UART_Start_Receive_IT+0x76>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <UART_Start_Receive_IT+0x6c>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a62:	e01b      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	227f      	movs	r2, #127	; 0x7f
 8007a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6c:	e016      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a76:	d10d      	bne.n	8007a94 <UART_Start_Receive_IT+0x9c>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <UART_Start_Receive_IT+0x92>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	227f      	movs	r2, #127	; 0x7f
 8007a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a88:	e008      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	223f      	movs	r2, #63	; 0x3f
 8007a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a92:	e003      	b.n	8007a9c <UART_Start_Receive_IT+0xa4>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2222      	movs	r2, #34	; 0x22
 8007aa8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aca:	64ba      	str	r2, [r7, #72]	; 0x48
 8007acc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e5      	bne.n	8007aaa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae6:	d107      	bne.n	8007af8 <UART_Start_Receive_IT+0x100>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a24      	ldr	r2, [pc, #144]	; (8007b84 <UART_Start_Receive_IT+0x18c>)
 8007af4:	665a      	str	r2, [r3, #100]	; 0x64
 8007af6:	e002      	b.n	8007afe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <UART_Start_Receive_IT+0x190>)
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d019      	beq.n	8007b42 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e6      	bne.n	8007b0e <UART_Start_Receive_IT+0x116>
 8007b40:	e018      	b.n	8007b74 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f043 0320 	orr.w	r3, r3, #32
 8007b56:	653b      	str	r3, [r7, #80]	; 0x50
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b60:	623b      	str	r3, [r7, #32]
 8007b62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	69f9      	ldr	r1, [r7, #28]
 8007b66:	6a3a      	ldr	r2, [r7, #32]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e6      	bne.n	8007b42 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	375c      	adds	r7, #92	; 0x5c
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	0800831b 	.word	0x0800831b
 8007b88:	080081bb 	.word	0x080081bb

08007b8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b096      	sub	sp, #88	; 0x58
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2222      	movs	r2, #34	; 0x22
 8007bb4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02b      	beq.n	8007c16 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	4a42      	ldr	r2, [pc, #264]	; (8007ccc <UART_Start_Receive_DMA+0x140>)
 8007bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	4a41      	ldr	r2, [pc, #260]	; (8007cd0 <UART_Start_Receive_DMA+0x144>)
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd2:	4a40      	ldr	r2, [pc, #256]	; (8007cd4 <UART_Start_Receive_DMA+0x148>)
 8007bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bda:	2200      	movs	r2, #0
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	4619      	mov	r1, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bee:	461a      	mov	r2, r3
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	f7fb fdcf 	bl	8003794 <HAL_DMA_Start_IT>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00c      	beq.n	8007c16 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2210      	movs	r2, #16
 8007c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e055      	b.n	8007cc2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d018      	beq.n	8007c58 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c46:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f043 0301 	orr.w	r3, r3, #1
 8007c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c78:	637a      	str	r2, [r7, #52]	; 0x34
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cac:	623a      	str	r2, [r7, #32]
 8007cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3758      	adds	r7, #88	; 0x58
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007deb 	.word	0x08007deb
 8007cd0:	08007f0f 	.word	0x08007f0f
 8007cd4:	08007f47 	.word	0x08007f47

08007cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b089      	sub	sp, #36	; 0x24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6979      	ldr	r1, [r7, #20]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e6      	bne.n	8007ce0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007d18:	bf00      	nop
 8007d1a:	3724      	adds	r7, #36	; 0x24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b095      	sub	sp, #84	; 0x54
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e6      	bne.n	8007d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e5      	bne.n	8007d5e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d118      	bne.n	8007dcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f023 0310 	bic.w	r3, r3, #16
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db8:	61bb      	str	r3, [r7, #24]
 8007dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6979      	ldr	r1, [r7, #20]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007dde:	bf00      	nop
 8007de0:	3754      	adds	r7, #84	; 0x54
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b09c      	sub	sp, #112	; 0x70
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d170      	bne.n	8007ee8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	667b      	str	r3, [r7, #100]	; 0x64
 8007e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e60:	647a      	str	r2, [r7, #68]	; 0x44
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e5      	bne.n	8007e40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	623b      	str	r3, [r7, #32]
   return(result);
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e94:	633a      	str	r2, [r7, #48]	; 0x30
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e5      	bne.n	8007e74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eaa:	2220      	movs	r2, #32
 8007eac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d118      	bne.n	8007ee8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	69b9      	ldr	r1, [r7, #24]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d107      	bne.n	8007f00 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007efa:	f7ff f909 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007efe:	e002      	b.n	8007f06 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007f00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f02:	f7fa fb97 	bl	8002634 <HAL_UART_RxCpltCallback>
}
 8007f06:	bf00      	nop
 8007f08:	3770      	adds	r7, #112	; 0x70
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d109      	bne.n	8007f38 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff f8ed 	bl	8007110 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f36:	e002      	b.n	8007f3e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7f9 f9b7 	bl	80012ac <HAL_UART_RxHalfCpltCallback>
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d109      	bne.n	8007f82 <UART_DMAError+0x3c>
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b21      	cmp	r3, #33	; 0x21
 8007f72:	d106      	bne.n	8007f82 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7ff feab 	bl	8007cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d109      	bne.n	8007fa4 <UART_DMAError+0x5e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b22      	cmp	r3, #34	; 0x22
 8007f94:	d106      	bne.n	8007fa4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7ff fec0 	bl	8007d24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007faa:	f043 0210 	orr.w	r2, r3, #16
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb4:	6978      	ldr	r0, [r7, #20]
 8007fb6:	f7ff f8a1 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fba:	bf00      	nop
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff f88b 	bl	80070fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b08f      	sub	sp, #60	; 0x3c
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffa:	2b21      	cmp	r3, #33	; 0x21
 8007ffc:	d14d      	bne.n	800809a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d132      	bne.n	8008070 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	61fb      	str	r3, [r7, #28]
   return(result);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800802e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e6      	bne.n	800800a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	60bb      	str	r3, [r7, #8]
   return(result);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008050:	633b      	str	r3, [r7, #48]	; 0x30
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6979      	ldr	r1, [r7, #20]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	613b      	str	r3, [r7, #16]
   return(result);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e6      	bne.n	800803c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800806e:	e014      	b.n	800809a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b292      	uxth	r2, r2
 800807c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800809a:	bf00      	nop
 800809c:	373c      	adds	r7, #60	; 0x3c
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b091      	sub	sp, #68	; 0x44
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b2:	2b21      	cmp	r3, #33	; 0x21
 80080b4:	d151      	bne.n	800815a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d132      	bne.n	8008128 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	623b      	str	r3, [r7, #32]
   return(result);
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	633b      	str	r3, [r7, #48]	; 0x30
 80080e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	60fb      	str	r3, [r7, #12]
   return(result);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	69b9      	ldr	r1, [r7, #24]
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	617b      	str	r3, [r7, #20]
   return(result);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008126:	e018      	b.n	800815a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800813a:	b292      	uxth	r2, r2
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	1c9a      	adds	r2, r3, #2
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800815a:	bf00      	nop
 800815c:	3744      	adds	r7, #68	; 0x44
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b088      	sub	sp, #32
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60bb      	str	r3, [r7, #8]
   return(result);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	613b      	str	r3, [r7, #16]
   return(result);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e6      	bne.n	800816e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7f9 ff47 	bl	8002040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b096      	sub	sp, #88	; 0x58
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d0:	2b22      	cmp	r3, #34	; 0x22
 80081d2:	f040 8094 	bne.w	80082fe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081e4:	b2d9      	uxtb	r1, r3
 80081e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f0:	400a      	ands	r2, r1
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b01      	subs	r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d179      	bne.n	8008312 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008232:	653b      	str	r3, [r7, #80]	; 0x50
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800823c:	647b      	str	r3, [r7, #68]	; 0x44
 800823e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e6      	bne.n	800821e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	623b      	str	r3, [r7, #32]
   return(result);
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3308      	adds	r3, #8
 800826e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008270:	633a      	str	r2, [r7, #48]	; 0x30
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e5      	bne.n	8008250 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008294:	2b01      	cmp	r3, #1
 8008296:	d12e      	bne.n	80082f6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0310 	bic.w	r3, r3, #16
 80082b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	69b9      	ldr	r1, [r7, #24]
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	2b10      	cmp	r3, #16
 80082dc:	d103      	bne.n	80082e6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2210      	movs	r2, #16
 80082e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe ff0e 	bl	8007110 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f4:	e00d      	b.n	8008312 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fa f99c 	bl	8002634 <HAL_UART_RxCpltCallback>
}
 80082fc:	e009      	b.n	8008312 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	8b1b      	ldrh	r3, [r3, #24]
 8008304:	b29a      	uxth	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0208 	orr.w	r2, r2, #8
 800830e:	b292      	uxth	r2, r2
 8008310:	831a      	strh	r2, [r3, #24]
}
 8008312:	bf00      	nop
 8008314:	3758      	adds	r7, #88	; 0x58
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b096      	sub	sp, #88	; 0x58
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008328:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008330:	2b22      	cmp	r3, #34	; 0x22
 8008332:	f040 8094 	bne.w	800845e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800833c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008344:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008346:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800834a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800834e:	4013      	ands	r3, r2
 8008350:	b29a      	uxth	r2, r3
 8008352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008354:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	1c9a      	adds	r2, r3, #2
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d179      	bne.n	8008472 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839c:	643b      	str	r3, [r7, #64]	; 0x40
 800839e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e5      	bne.n	80083b0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d12e      	bne.n	8008456 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	60bb      	str	r3, [r7, #8]
   return(result);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f023 0310 	bic.w	r3, r3, #16
 8008412:	647b      	str	r3, [r7, #68]	; 0x44
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6979      	ldr	r1, [r7, #20]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	613b      	str	r3, [r7, #16]
   return(result);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e6      	bne.n	80083fe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b10      	cmp	r3, #16
 800843c:	d103      	bne.n	8008446 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2210      	movs	r2, #16
 8008444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fe fe5e 	bl	8007110 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008454:	e00d      	b.n	8008472 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fa f8ec 	bl	8002634 <HAL_UART_RxCpltCallback>
}
 800845c:	e009      	b.n	8008472 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	8b1b      	ldrh	r3, [r3, #24]
 8008464:	b29a      	uxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0208 	orr.w	r2, r2, #8
 800846e:	b292      	uxth	r2, r2
 8008470:	831a      	strh	r2, [r3, #24]
}
 8008472:	bf00      	nop
 8008474:	3758      	adds	r7, #88	; 0x58
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <__NVIC_SetPriority>:
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800849c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db0a      	blt.n	80084ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	490c      	ldr	r1, [pc, #48]	; (80084dc <__NVIC_SetPriority+0x4c>)
 80084aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ae:	0112      	lsls	r2, r2, #4
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	440b      	add	r3, r1
 80084b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084b8:	e00a      	b.n	80084d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	4908      	ldr	r1, [pc, #32]	; (80084e0 <__NVIC_SetPriority+0x50>)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	3b04      	subs	r3, #4
 80084c8:	0112      	lsls	r2, r2, #4
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	440b      	add	r3, r1
 80084ce:	761a      	strb	r2, [r3, #24]
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	e000e100 	.word	0xe000e100
 80084e0:	e000ed00 	.word	0xe000ed00

080084e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <SysTick_Handler+0x1c>)
 80084ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084ec:	f002 fa22 	bl	800a934 <xTaskGetSchedulerState>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d001      	beq.n	80084fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084f6:	f003 f907 	bl	800b708 <xPortSysTickHandler>
  }
}
 80084fa:	bf00      	nop
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000e010 	.word	0xe000e010

08008504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008508:	2100      	movs	r1, #0
 800850a:	f06f 0004 	mvn.w	r0, #4
 800850e:	f7ff ffbf 	bl	8008490 <__NVIC_SetPriority>
#endif
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	603b      	str	r3, [r7, #0]
  return(result);
 8008524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800852a:	f06f 0305 	mvn.w	r3, #5
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	e00c      	b.n	800854c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008532:	4b0a      	ldr	r3, [pc, #40]	; (800855c <osKernelInitialize+0x44>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <osKernelInitialize+0x44>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008540:	2300      	movs	r3, #0
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e002      	b.n	800854c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008546:	f04f 33ff 	mov.w	r3, #4294967295
 800854a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800854c:	687b      	ldr	r3, [r7, #4]
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000d1c 	.word	0x20000d1c

08008560 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008566:	f3ef 8305 	mrs	r3, IPSR
 800856a:	603b      	str	r3, [r7, #0]
  return(result);
 800856c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008572:	f06f 0305 	mvn.w	r3, #5
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	e010      	b.n	800859c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <osKernelStart+0x48>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d109      	bne.n	8008596 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008582:	f7ff ffbf 	bl	8008504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <osKernelStart+0x48>)
 8008588:	2202      	movs	r2, #2
 800858a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800858c:	f001 fd8a 	bl	800a0a4 <vTaskStartScheduler>
      stat = osOK;
 8008590:	2300      	movs	r3, #0
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e002      	b.n	800859c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008596:	f04f 33ff 	mov.w	r3, #4294967295
 800859a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800859c:	687b      	ldr	r3, [r7, #4]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000d1c 	.word	0x20000d1c

080085ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af04      	add	r7, sp, #16
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085bc:	f3ef 8305 	mrs	r3, IPSR
 80085c0:	617b      	str	r3, [r7, #20]
  return(result);
 80085c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d17e      	bne.n	80086c6 <osThreadNew+0x11a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d07b      	beq.n	80086c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80085d2:	2318      	movs	r3, #24
 80085d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295
 80085de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d045      	beq.n	8008672 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <osThreadNew+0x48>
        name = attr->name;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <osThreadNew+0x6e>
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b38      	cmp	r3, #56	; 0x38
 800860c:	d805      	bhi.n	800861a <osThreadNew+0x6e>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <osThreadNew+0x72>
        return (NULL);
 800861a:	2300      	movs	r3, #0
 800861c:	e054      	b.n	80086c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <osThreadNew+0xa8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	2b5b      	cmp	r3, #91	; 0x5b
 800863c:	d90a      	bls.n	8008654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <osThreadNew+0xa8>
        mem = 1;
 800864e:	2301      	movs	r3, #1
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	e010      	b.n	8008676 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10c      	bne.n	8008676 <osThreadNew+0xca>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <osThreadNew+0xca>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <osThreadNew+0xca>
          mem = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	e001      	b.n	8008676 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d110      	bne.n	800869e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008684:	9202      	str	r2, [sp, #8]
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f001 fb64 	bl	8009d60 <xTaskCreateStatic>
 8008698:	4603      	mov	r3, r0
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	e013      	b.n	80086c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d110      	bne.n	80086c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f107 0310 	add.w	r3, r7, #16
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f001 fbaf 	bl	8009e1a <xTaskCreate>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d001      	beq.n	80086c6 <osThreadNew+0x11a>
            hTask = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80086c6:	693b      	ldr	r3, [r7, #16]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	; 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	; 0x28
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086e0:	f3ef 8305 	mrs	r3, IPSR
 80086e4:	613b      	str	r3, [r7, #16]
  return(result);
 80086e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d175      	bne.n	80087d8 <osSemaphoreNew+0x108>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d072      	beq.n	80087d8 <osSemaphoreNew+0x108>
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d86e      	bhi.n	80087d8 <osSemaphoreNew+0x108>
    mem = -1;
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295
 80086fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d015      	beq.n	8008732 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d006      	beq.n	800871c <osSemaphoreNew+0x4c>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b4f      	cmp	r3, #79	; 0x4f
 8008714:	d902      	bls.n	800871c <osSemaphoreNew+0x4c>
        mem = 1;
 8008716:	2301      	movs	r3, #1
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	e00c      	b.n	8008736 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d108      	bne.n	8008736 <osSemaphoreNew+0x66>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <osSemaphoreNew+0x66>
          mem = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
 8008730:	e001      	b.n	8008736 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d04c      	beq.n	80087d8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d128      	bne.n	8008796 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d10a      	bne.n	8008760 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2203      	movs	r2, #3
 8008750:	9200      	str	r2, [sp, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	2001      	movs	r0, #1
 8008758:	f000 fb5c 	bl	8008e14 <xQueueGenericCreateStatic>
 800875c:	61f8      	str	r0, [r7, #28]
 800875e:	e005      	b.n	800876c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008760:	2203      	movs	r2, #3
 8008762:	2100      	movs	r1, #0
 8008764:	2001      	movs	r0, #1
 8008766:	f000 fbcd 	bl	8008f04 <xQueueGenericCreate>
 800876a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d022      	beq.n	80087b8 <osSemaphoreNew+0xe8>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01f      	beq.n	80087b8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	69f8      	ldr	r0, [r7, #28]
 8008780:	f000 fc88 	bl	8009094 <xQueueGenericSend>
 8008784:	4603      	mov	r3, r0
 8008786:	2b01      	cmp	r3, #1
 8008788:	d016      	beq.n	80087b8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800878a:	69f8      	ldr	r0, [r7, #28]
 800878c:	f001 f914 	bl	80099b8 <vQueueDelete>
            hSemaphore = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	61fb      	str	r3, [r7, #28]
 8008794:	e010      	b.n	80087b8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d108      	bne.n	80087ae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	461a      	mov	r2, r3
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fc0a 	bl	8008fbe <xQueueCreateCountingSemaphoreStatic>
 80087aa:	61f8      	str	r0, [r7, #28]
 80087ac:	e004      	b.n	80087b8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fc3b 	bl	800902c <xQueueCreateCountingSemaphore>
 80087b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <osSemaphoreNew+0xfc>
          name = attr->name;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	e001      	b.n	80087d0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	69f8      	ldr	r0, [r7, #28]
 80087d4:	f001 fa3c 	bl	8009c50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80087d8:	69fb      	ldr	r3, [r7, #28]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80087fc:	f06f 0303 	mvn.w	r3, #3
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e039      	b.n	8008878 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008804:	f3ef 8305 	mrs	r3, IPSR
 8008808:	60fb      	str	r3, [r7, #12]
  return(result);
 800880a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800880c:	2b00      	cmp	r3, #0
 800880e:	d022      	beq.n	8008856 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008816:	f06f 0303 	mvn.w	r3, #3
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e02c      	b.n	8008878 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	461a      	mov	r2, r3
 8008828:	2100      	movs	r1, #0
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f001 f844 	bl	80098b8 <xQueueReceiveFromISR>
 8008830:	4603      	mov	r3, r0
 8008832:	2b01      	cmp	r3, #1
 8008834:	d003      	beq.n	800883e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008836:	f06f 0302 	mvn.w	r3, #2
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e01c      	b.n	8008878 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <osSemaphoreAcquire+0x94>
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <osSemaphoreAcquire+0xa0>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	e010      	b.n	8008878 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6938      	ldr	r0, [r7, #16]
 800885a:	f000 ff21 	bl	80096a0 <xQueueSemaphoreTake>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d009      	beq.n	8008878 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800886a:	f06f 0301 	mvn.w	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e002      	b.n	8008878 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008878:	697b      	ldr	r3, [r7, #20]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800889e:	f06f 0303 	mvn.w	r3, #3
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e02c      	b.n	8008900 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a6:	f3ef 8305 	mrs	r3, IPSR
 80088aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01a      	beq.n	80088e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088b6:	f107 0308 	add.w	r3, r7, #8
 80088ba:	4619      	mov	r1, r3
 80088bc:	6938      	ldr	r0, [r7, #16]
 80088be:	f000 fd82 	bl	80093c6 <xQueueGiveFromISR>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d003      	beq.n	80088d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80088c8:	f06f 0302 	mvn.w	r3, #2
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e017      	b.n	8008900 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d014      	beq.n	8008900 <osSemaphoreRelease+0x78>
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <osSemaphoreRelease+0x84>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e00b      	b.n	8008900 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088e8:	2300      	movs	r3, #0
 80088ea:	2200      	movs	r2, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f000 fbd0 	bl	8009094 <xQueueGenericSend>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d002      	beq.n	8008900 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80088fa:	f06f 0302 	mvn.w	r3, #2
 80088fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008900:	697b      	ldr	r3, [r7, #20]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af02      	add	r7, sp, #8
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008920:	f3ef 8305 	mrs	r3, IPSR
 8008924:	613b      	str	r3, [r7, #16]
  return(result);
 8008926:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008928:	2b00      	cmp	r3, #0
 800892a:	d15f      	bne.n	80089ec <osMessageQueueNew+0xdc>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d05c      	beq.n	80089ec <osMessageQueueNew+0xdc>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d059      	beq.n	80089ec <osMessageQueueNew+0xdc>
    mem = -1;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d029      	beq.n	8008998 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d012      	beq.n	8008972 <osMessageQueueNew+0x62>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b4f      	cmp	r3, #79	; 0x4f
 8008952:	d90e      	bls.n	8008972 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695a      	ldr	r2, [r3, #20]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	429a      	cmp	r2, r3
 800896a:	d302      	bcc.n	8008972 <osMessageQueueNew+0x62>
        mem = 1;
 800896c:	2301      	movs	r3, #1
 800896e:	61bb      	str	r3, [r7, #24]
 8008970:	e014      	b.n	800899c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d110      	bne.n	800899c <osMessageQueueNew+0x8c>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10c      	bne.n	800899c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008986:	2b00      	cmp	r3, #0
 8008988:	d108      	bne.n	800899c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <osMessageQueueNew+0x8c>
          mem = 0;
 8008992:	2300      	movs	r3, #0
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	e001      	b.n	800899c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d10b      	bne.n	80089ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2100      	movs	r1, #0
 80089ac:	9100      	str	r1, [sp, #0]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fa2f 	bl	8008e14 <xQueueGenericCreateStatic>
 80089b6:	61f8      	str	r0, [r7, #28]
 80089b8:	e008      	b.n	80089cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80089c0:	2200      	movs	r2, #0
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fa9d 	bl	8008f04 <xQueueGenericCreate>
 80089ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00c      	beq.n	80089ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e001      	b.n	80089e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80089e4:	6979      	ldr	r1, [r7, #20]
 80089e6:	69f8      	ldr	r0, [r7, #28]
 80089e8:	f001 f932 	bl	8009c50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80089ec:	69fb      	ldr	r3, [r7, #28]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	4613      	mov	r3, r2
 8008a06:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a10:	f3ef 8305 	mrs	r3, IPSR
 8008a14:	617b      	str	r3, [r7, #20]
  return(result);
 8008a16:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d028      	beq.n	8008a6e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <osMessageQueuePut+0x36>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <osMessageQueuePut+0x36>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008a2e:	f06f 0303 	mvn.w	r3, #3
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e038      	b.n	8008aa8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008a3a:	f107 0210 	add.w	r2, r7, #16
 8008a3e:	2300      	movs	r3, #0
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 fc24 	bl	8009290 <xQueueGenericSendFromISR>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d003      	beq.n	8008a56 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008a4e:	f06f 0302 	mvn.w	r3, #2
 8008a52:	61fb      	str	r3, [r7, #28]
 8008a54:	e028      	b.n	8008aa8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d025      	beq.n	8008aa8 <osMessageQueuePut+0xb0>
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <osMessageQueuePut+0xbc>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	e01c      	b.n	8008aa8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <osMessageQueuePut+0x82>
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008a7a:	f06f 0303 	mvn.w	r3, #3
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	e012      	b.n	8008aa8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a82:	2300      	movs	r3, #0
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	69b8      	ldr	r0, [r7, #24]
 8008a8a:	f000 fb03 	bl	8009094 <xQueueGenericSend>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d009      	beq.n	8008aa8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008a9a:	f06f 0301 	mvn.w	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e002      	b.n	8008aa8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008aa2:	f06f 0302 	mvn.w	r3, #2
 8008aa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008aa8:	69fb      	ldr	r3, [r7, #28]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ace:	f3ef 8305 	mrs	r3, IPSR
 8008ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8008ad4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d028      	beq.n	8008b2c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <osMessageQueueGet+0x34>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <osMessageQueueGet+0x34>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008aec:	f06f 0303 	mvn.w	r3, #3
 8008af0:	61fb      	str	r3, [r7, #28]
 8008af2:	e037      	b.n	8008b64 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008af8:	f107 0310 	add.w	r3, r7, #16
 8008afc:	461a      	mov	r2, r3
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	69b8      	ldr	r0, [r7, #24]
 8008b02:	f000 fed9 	bl	80098b8 <xQueueReceiveFromISR>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d003      	beq.n	8008b14 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008b0c:	f06f 0302 	mvn.w	r3, #2
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	e027      	b.n	8008b64 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d024      	beq.n	8008b64 <osMessageQueueGet+0xac>
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <osMessageQueueGet+0xb8>)
 8008b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	e01b      	b.n	8008b64 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <osMessageQueueGet+0x80>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008b38:	f06f 0303 	mvn.w	r3, #3
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e011      	b.n	8008b64 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	69b8      	ldr	r0, [r7, #24]
 8008b46:	f000 fccb 	bl	80094e0 <xQueueReceive>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d009      	beq.n	8008b64 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008b56:	f06f 0301 	mvn.w	r3, #1
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e002      	b.n	8008b64 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008b5e:	f06f 0302 	mvn.w	r3, #2
 8008b62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008b64:	69fb      	ldr	r3, [r7, #28]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a07      	ldr	r2, [pc, #28]	; (8008ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a06      	ldr	r2, [pc, #24]	; (8008ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8008b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2280      	movs	r2, #128	; 0x80
 8008b90:	601a      	str	r2, [r3, #0]
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000d20 	.word	0x20000d20
 8008ba4:	20000d7c 	.word	0x20000d7c

08008ba8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a07      	ldr	r2, [pc, #28]	; (8008bd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a06      	ldr	r2, [pc, #24]	; (8008bd8 <vApplicationGetTimerTaskMemory+0x30>)
 8008bbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc6:	601a      	str	r2, [r3, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000f7c 	.word	0x20000f7c
 8008bd8:	20000fd8 	.word	0x20000fd8

08008bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f103 0208 	add.w	r2, r3, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f103 0208 	add.w	r2, r3, #8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f103 0208 	add.w	r2, r3, #8
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d103      	bne.n	8008c9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e00c      	b.n	8008cb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e002      	b.n	8008cac <vListInsert+0x2e>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d2f6      	bcs.n	8008ca6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6892      	ldr	r2, [r2, #8]
 8008d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6852      	ldr	r2, [r2, #4]
 8008d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d103      	bne.n	8008d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1e5a      	subs	r2, r3, #1
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d6e:	f002 fc39 	bl	800b5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	68f9      	ldr	r1, [r7, #12]
 8008d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	441a      	add	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	22ff      	movs	r2, #255	; 0xff
 8008db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d114      	bne.n	8008dee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01a      	beq.n	8008e02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3310      	adds	r3, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 fbf1 	bl	800a5b8 <xTaskRemoveFromEventList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d012      	beq.n	8008e02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <xQueueGenericReset+0xcc>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	e009      	b.n	8008e02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3310      	adds	r3, #16
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fef2 	bl	8008bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3324      	adds	r3, #36	; 0x24
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff feed 	bl	8008bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e02:	f002 fc1f 	bl	800b644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e06:	2301      	movs	r3, #1
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08e      	sub	sp, #56	; 0x38
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <xQueueGenericCreateStatic+0x52>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <xQueueGenericCreateStatic+0x56>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <xQueueGenericCreateStatic+0x58>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	623b      	str	r3, [r7, #32]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <xQueueGenericCreateStatic+0x7e>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <xQueueGenericCreateStatic+0x82>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <xQueueGenericCreateStatic+0x84>
 8008e96:	2300      	movs	r3, #0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	61fb      	str	r3, [r7, #28]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eb2:	2350      	movs	r3, #80	; 0x50
 8008eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b50      	cmp	r3, #80	; 0x50
 8008eba:	d00a      	beq.n	8008ed2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	61bb      	str	r3, [r7, #24]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ed2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00d      	beq.n	8008efa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f83f 	bl	8008f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3730      	adds	r7, #48	; 0x30
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	613b      	str	r3, [r7, #16]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	3350      	adds	r3, #80	; 0x50
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f002 fc73 	bl	800b828 <pvPortMalloc>
 8008f42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d011      	beq.n	8008f6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	3350      	adds	r3, #80	; 0x50
 8008f52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f5c:	79fa      	ldrb	r2, [r7, #7]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4613      	mov	r3, r2
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f805 	bl	8008f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d103      	bne.n	8008f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	69b8      	ldr	r0, [r7, #24]
 8008faa:	f7ff fecb 	bl	8008d44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b08a      	sub	sp, #40	; 0x28
 8008fc2:	af02      	add	r7, sp, #8
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d90a      	bls.n	8009004 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009004:	2302      	movs	r3, #2
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff ff00 	bl	8008e14 <xQueueGenericCreateStatic>
 8009014:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009022:	69fb      	ldr	r3, [r7, #28]
	}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	613b      	str	r3, [r7, #16]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d90a      	bls.n	8009070 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	60fb      	str	r3, [r7, #12]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009070:	2202      	movs	r2, #2
 8009072:	2100      	movs	r1, #0
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ff45 	bl	8008f04 <xQueueGenericCreate>
 800907a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009088:	697b      	ldr	r3, [r7, #20]
	}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08e      	sub	sp, #56	; 0x38
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueGenericSend+0x32>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <xQueueGenericSend+0x40>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <xQueueGenericSend+0x44>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <xQueueGenericSend+0x46>
 80090d8:	2300      	movs	r3, #0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <xQueueGenericSend+0x60>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <xQueueGenericSend+0x6e>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <xQueueGenericSend+0x72>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueGenericSend+0x74>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueGenericSend+0x8e>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	623b      	str	r3, [r7, #32]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009122:	f001 fc07 	bl	800a934 <xTaskGetSchedulerState>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <xQueueGenericSend+0x9e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueGenericSend+0xa2>
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <xQueueGenericSend+0xa4>
 8009136:	2300      	movs	r3, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xQueueGenericSend+0xbe>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61fb      	str	r3, [r7, #28]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009152:	f002 fa47 	bl	800b5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <xQueueGenericSend+0xd4>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d129      	bne.n	80091bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916e:	f000 fc5e 	bl	8009a2e <prvCopyDataToQueue>
 8009172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f001 fa19 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d013      	beq.n	80091b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800918c:	4b3f      	ldr	r3, [pc, #252]	; (800928c <xQueueGenericSend+0x1f8>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	e00a      	b.n	80091b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <xQueueGenericSend+0x1f8>)
 80091a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091b4:	f002 fa46 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e063      	b.n	8009284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d103      	bne.n	80091ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091c2:	f002 fa3f 	bl	800b644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e05c      	b.n	8009284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091d0:	f107 0314 	add.w	r3, r7, #20
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 fa53 	bl	800a680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091de:	f002 fa31 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091e2:	f000 ffc5 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091e6:	f002 f9fd 	bl	800b5e4 <vPortEnterCritical>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d103      	bne.n	8009200 <xQueueGenericSend+0x16c>
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009206:	b25b      	sxtb	r3, r3
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d103      	bne.n	8009216 <xQueueGenericSend+0x182>
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009216:	f002 fa15 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800921a:	1d3a      	adds	r2, r7, #4
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f001 fa42 	bl	800a6ac <xTaskCheckForTimeOut>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d124      	bne.n	8009278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800922e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009230:	f000 fcf5 	bl	8009c1e <prvIsQueueFull>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d018      	beq.n	800926c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	3310      	adds	r3, #16
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f968 	bl	800a518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924a:	f000 fc80 	bl	8009b4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800924e:	f000 ff9d 	bl	800a18c <xTaskResumeAll>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	f47f af7c 	bne.w	8009152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <xQueueGenericSend+0x1f8>)
 800925c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	e772      	b.n	8009152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800926c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800926e:	f000 fc6e 	bl	8009b4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009272:	f000 ff8b 	bl	800a18c <xTaskResumeAll>
 8009276:	e76c      	b.n	8009152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927a:	f000 fc68 	bl	8009b4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800927e:	f000 ff85 	bl	800a18c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009284:	4618      	mov	r0, r3
 8009286:	3738      	adds	r7, #56	; 0x38
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b090      	sub	sp, #64	; 0x40
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <xQueueGenericSendFromISR+0x3c>
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <xQueueGenericSendFromISR+0x40>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <xQueueGenericSendFromISR+0x42>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d103      	bne.n	80092fa <xQueueGenericSendFromISR+0x6a>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <xQueueGenericSendFromISR+0x6e>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueGenericSendFromISR+0x70>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	623b      	str	r3, [r7, #32]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800931a:	f002 fa45 	bl	800b7a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800931e:	f3ef 8211 	mrs	r2, BASEPRI
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	61fa      	str	r2, [r7, #28]
 8009334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <xQueueGenericSendFromISR+0xbc>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d12f      	bne.n	80093ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009362:	f000 fb64 	bl	8009a2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d112      	bne.n	8009396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d016      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	4618      	mov	r0, r3
 800937e:	f001 f91b 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e007      	b.n	80093a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800939a:	3301      	adds	r3, #1
 800939c:	b2db      	uxtb	r3, r3
 800939e:	b25a      	sxtb	r2, r3
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093a6:	2301      	movs	r3, #1
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80093aa:	e001      	b.n	80093b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3740      	adds	r7, #64	; 0x40
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b08e      	sub	sp, #56	; 0x38
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	623b      	str	r3, [r7, #32]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00a      	beq.n	800940e <xQueueGiveFromISR+0x48>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61fb      	str	r3, [r7, #28]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <xQueueGiveFromISR+0x58>
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <xQueueGiveFromISR+0x5c>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <xQueueGiveFromISR+0x5e>
 8009422:	2300      	movs	r3, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	61bb      	str	r3, [r7, #24]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800943e:	f002 f9b3 	bl	800b7a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009442:	f3ef 8211 	mrs	r2, BASEPRI
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	617a      	str	r2, [r7, #20]
 8009458:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800945a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800946a:	429a      	cmp	r2, r3
 800946c:	d22b      	bcs.n	80094c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d112      	bne.n	80094b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	2b00      	cmp	r3, #0
 8009490:	d016      	beq.n	80094c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	4618      	mov	r0, r3
 8009498:	f001 f88e 	bl	800a5b8 <xTaskRemoveFromEventList>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00e      	beq.n	80094c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2201      	movs	r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e007      	b.n	80094c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	b25a      	sxtb	r2, r3
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094c0:	2301      	movs	r3, #1
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
 80094c4:	e001      	b.n	80094ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f383 8811 	msr	BASEPRI, r3
}
 80094d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3738      	adds	r7, #56	; 0x38
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08c      	sub	sp, #48	; 0x30
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <xQueueReceive+0x30>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	623b      	str	r3, [r7, #32]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d103      	bne.n	800951e <xQueueReceive+0x3e>
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <xQueueReceive+0x42>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <xQueueReceive+0x44>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueReceive+0x5e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	61fb      	str	r3, [r7, #28]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800953e:	f001 f9f9 	bl	800a934 <xTaskGetSchedulerState>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <xQueueReceive+0x6e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <xQueueReceive+0x72>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <xQueueReceive+0x74>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xQueueReceive+0x8e>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	61bb      	str	r3, [r7, #24]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800956e:	f002 f839 	bl	800b5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01f      	beq.n	80095be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009582:	f000 fabe 	bl	8009b02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	1e5a      	subs	r2, r3, #1
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00f      	beq.n	80095b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	3310      	adds	r3, #16
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f80c 	bl	800a5b8 <xTaskRemoveFromEventList>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095a6:	4b3d      	ldr	r3, [pc, #244]	; (800969c <xQueueReceive+0x1bc>)
 80095a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095b6:	f002 f845 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e069      	b.n	8009692 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d103      	bne.n	80095cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c4:	f002 f83e 	bl	800b644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e062      	b.n	8009692 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d2:	f107 0310 	add.w	r3, r7, #16
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 f852 	bl	800a680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e0:	f002 f830 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e4:	f000 fdc4 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e8:	f001 fffc 	bl	800b5e4 <vPortEnterCritical>
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d103      	bne.n	8009602 <xQueueReceive+0x122>
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009608:	b25b      	sxtb	r3, r3
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d103      	bne.n	8009618 <xQueueReceive+0x138>
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009618:	f002 f814 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961c:	1d3a      	adds	r2, r7, #4
 800961e:	f107 0310 	add.w	r3, r7, #16
 8009622:	4611      	mov	r1, r2
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f841 	bl	800a6ac <xTaskCheckForTimeOut>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d123      	bne.n	8009678 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009632:	f000 fade 	bl	8009bf2 <prvIsQueueEmpty>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	3324      	adds	r3, #36	; 0x24
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	4611      	mov	r1, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f000 ff67 	bl	800a518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800964a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964c:	f000 fa7f 	bl	8009b4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009650:	f000 fd9c 	bl	800a18c <xTaskResumeAll>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d189      	bne.n	800956e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800965a:	4b10      	ldr	r3, [pc, #64]	; (800969c <xQueueReceive+0x1bc>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	e780      	b.n	800956e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800966c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800966e:	f000 fa6e 	bl	8009b4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009672:	f000 fd8b 	bl	800a18c <xTaskResumeAll>
 8009676:	e77a      	b.n	800956e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967a:	f000 fa68 	bl	8009b4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800967e:	f000 fd85 	bl	800a18c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009684:	f000 fab5 	bl	8009bf2 <prvIsQueueEmpty>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f af6f 	beq.w	800956e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009692:	4618      	mov	r0, r3
 8009694:	3730      	adds	r7, #48	; 0x30
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08e      	sub	sp, #56	; 0x38
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	623b      	str	r3, [r7, #32]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	61fb      	str	r3, [r7, #28]
}
 80096ec:	bf00      	nop
 80096ee:	e7fe      	b.n	80096ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096f0:	f001 f920 	bl	800a934 <xTaskGetSchedulerState>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <xQueueSemaphoreTake+0x60>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <xQueueSemaphoreTake+0x64>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <xQueueSemaphoreTake+0x66>
 8009704:	2300      	movs	r3, #0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	61bb      	str	r3, [r7, #24]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009720:	f001 ff60 	bl	800b5e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009728:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	d024      	beq.n	800977a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	1e5a      	subs	r2, r3, #1
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009740:	f001 fa6e 	bl	800ac20 <pvTaskIncrementMutexHeldCount>
 8009744:	4602      	mov	r2, r0
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00f      	beq.n	8009772 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	3310      	adds	r3, #16
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ff2e 	bl	800a5b8 <xTaskRemoveFromEventList>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009762:	4b54      	ldr	r3, [pc, #336]	; (80098b4 <xQueueSemaphoreTake+0x214>)
 8009764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009772:	f001 ff67 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 8009776:	2301      	movs	r3, #1
 8009778:	e097      	b.n	80098aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d111      	bne.n	80097a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	617b      	str	r3, [r7, #20]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800979c:	f001 ff52 	bl	800b644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097a0:	2300      	movs	r3, #0
 80097a2:	e082      	b.n	80098aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 ff66 	bl	800a680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097b8:	f001 ff44 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097bc:	f000 fcd8 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c0:	f001 ff10 	bl	800b5e4 <vPortEnterCritical>
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ca:	b25b      	sxtb	r3, r3
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d103      	bne.n	80097da <xQueueSemaphoreTake+0x13a>
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e0:	b25b      	sxtb	r3, r3
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d103      	bne.n	80097f0 <xQueueSemaphoreTake+0x150>
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097f0:	f001 ff28 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f4:	463a      	mov	r2, r7
 80097f6:	f107 030c 	add.w	r3, r7, #12
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 ff55 	bl	800a6ac <xTaskCheckForTimeOut>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d132      	bne.n	800986e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800980a:	f000 f9f2 	bl	8009bf2 <prvIsQueueEmpty>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d026      	beq.n	8009862 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800981c:	f001 fee2 	bl	800b5e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f8a3 	bl	800a970 <xTaskPriorityInherit>
 800982a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800982c:	f001 ff0a 	bl	800b644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	3324      	adds	r3, #36	; 0x24
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4611      	mov	r1, r2
 8009838:	4618      	mov	r0, r3
 800983a:	f000 fe6d 	bl	800a518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800983e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009840:	f000 f985 	bl	8009b4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009844:	f000 fca2 	bl	800a18c <xTaskResumeAll>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	f47f af68 	bne.w	8009720 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <xQueueSemaphoreTake+0x214>)
 8009852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	e75e      	b.n	8009720 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009864:	f000 f973 	bl	8009b4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009868:	f000 fc90 	bl	800a18c <xTaskResumeAll>
 800986c:	e758      	b.n	8009720 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800986e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009870:	f000 f96d 	bl	8009b4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009874:	f000 fc8a 	bl	800a18c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800987a:	f000 f9ba 	bl	8009bf2 <prvIsQueueEmpty>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f43f af4d 	beq.w	8009720 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00d      	beq.n	80098a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800988c:	f001 feaa 	bl	800b5e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009892:	f000 f8b4 	bl	80099fe <prvGetDisinheritPriorityAfterTimeout>
 8009896:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 f93c 	bl	800ab1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80098a4:	f001 fece 	bl	800b644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3738      	adds	r7, #56	; 0x38
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08e      	sub	sp, #56	; 0x38
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	623b      	str	r3, [r7, #32]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <xQueueReceiveFromISR+0x3a>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <xQueueReceiveFromISR+0x3e>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <xQueueReceiveFromISR+0x40>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	61fb      	str	r3, [r7, #28]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009912:	f001 ff49 	bl	800b7a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009916:	f3ef 8211 	mrs	r2, BASEPRI
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61ba      	str	r2, [r7, #24]
 800992c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800992e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2b00      	cmp	r3, #0
 800993c:	d02f      	beq.n	800999e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994c:	f000 f8d9 	bl	8009b02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	1e5a      	subs	r2, r3, #1
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800995c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009960:	d112      	bne.n	8009988 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d016      	beq.n	8009998 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	3310      	adds	r3, #16
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fe22 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00e      	beq.n	8009998 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e007      	b.n	8009998 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800998c:	3301      	adds	r3, #1
 800998e:	b2db      	uxtb	r3, r3
 8009990:	b25a      	sxtb	r2, r3
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009998:	2301      	movs	r3, #1
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
 800999c:	e001      	b.n	80099a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800999e:	2300      	movs	r3, #0
 80099a0:	637b      	str	r3, [r7, #52]	; 0x34
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f383 8811 	msr	BASEPRI, r3
}
 80099ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3738      	adds	r7, #56	; 0x38
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10a      	bne.n	80099e0 <vQueueDelete+0x28>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	60bb      	str	r3, [r7, #8]
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 f95f 	bl	8009ca4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f001 ffe5 	bl	800b9c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e001      	b.n	8009a20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a20:	68fb      	ldr	r3, [r7, #12]
	}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b086      	sub	sp, #24
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10d      	bne.n	8009a68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d14d      	bne.n	8009af0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fff1 	bl	800aa40 <xTaskPriorityDisinherit>
 8009a5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	609a      	str	r2, [r3, #8]
 8009a66:	e043      	b.n	8009af0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d119      	bne.n	8009aa2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6858      	ldr	r0, [r3, #4]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	461a      	mov	r2, r3
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	f002 f8e9 	bl	800bc50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	441a      	add	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d32b      	bcc.n	8009af0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	605a      	str	r2, [r3, #4]
 8009aa0:	e026      	b.n	8009af0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68d8      	ldr	r0, [r3, #12]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	461a      	mov	r2, r3
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	f002 f8cf 	bl	800bc50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	425b      	negs	r3, r3
 8009abc:	441a      	add	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d207      	bcs.n	8009ade <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	689a      	ldr	r2, [r3, #8]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d105      	bne.n	8009af0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009af8:	697b      	ldr	r3, [r7, #20]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d018      	beq.n	8009b46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	441a      	add	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d303      	bcc.n	8009b36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68d9      	ldr	r1, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	461a      	mov	r2, r3
 8009b40:	6838      	ldr	r0, [r7, #0]
 8009b42:	f002 f885 	bl	800bc50 <memcpy>
	}
}
 8009b46:	bf00      	nop
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b56:	f001 fd45 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b62:	e011      	b.n	8009b88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d012      	beq.n	8009b92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3324      	adds	r3, #36	; 0x24
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fd21 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b7c:	f000 fdf8 	bl	800a770 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dce9      	bgt.n	8009b64 <prvUnlockQueue+0x16>
 8009b90:	e000      	b.n	8009b94 <prvUnlockQueue+0x46>
					break;
 8009b92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	22ff      	movs	r2, #255	; 0xff
 8009b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b9c:	f001 fd52 	bl	800b644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ba0:	f001 fd20 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009baa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bac:	e011      	b.n	8009bd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d012      	beq.n	8009bdc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3310      	adds	r3, #16
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fcfc 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bc6:	f000 fdd3 	bl	800a770 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dce9      	bgt.n	8009bae <prvUnlockQueue+0x60>
 8009bda:	e000      	b.n	8009bde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bdc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	22ff      	movs	r2, #255	; 0xff
 8009be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009be6:	f001 fd2d 	bl	800b644 <vPortExitCritical>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bfa:	f001 fcf3 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e001      	b.n	8009c10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c10:	f001 fd18 	bl	800b644 <vPortExitCritical>

	return xReturn;
 8009c14:	68fb      	ldr	r3, [r7, #12]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c26:	f001 fcdd 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d102      	bne.n	8009c3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c36:	2301      	movs	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e001      	b.n	8009c40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c40:	f001 fd00 	bl	800b644 <vPortExitCritical>

	return xReturn;
 8009c44:	68fb      	ldr	r3, [r7, #12]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e014      	b.n	8009c8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c60:	4a0f      	ldr	r2, [pc, #60]	; (8009ca0 <vQueueAddToRegistry+0x50>)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c6c:	490c      	ldr	r1, [pc, #48]	; (8009ca0 <vQueueAddToRegistry+0x50>)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c76:	4a0a      	ldr	r2, [pc, #40]	; (8009ca0 <vQueueAddToRegistry+0x50>)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c82:	e006      	b.n	8009c92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3301      	adds	r3, #1
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b07      	cmp	r3, #7
 8009c8e:	d9e7      	bls.n	8009c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	200013d8 	.word	0x200013d8

08009ca4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e016      	b.n	8009ce0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009cb2:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <vQueueUnregisterQueue+0x50>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	4413      	add	r3, r2
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d10b      	bne.n	8009cda <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009cc2:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <vQueueUnregisterQueue+0x50>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ccc:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <vQueueUnregisterQueue+0x50>)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	605a      	str	r2, [r3, #4]
				break;
 8009cd8:	e006      	b.n	8009ce8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b07      	cmp	r3, #7
 8009ce4:	d9e5      	bls.n	8009cb2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	200013d8 	.word	0x200013d8

08009cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d08:	f001 fc6c 	bl	800b5e4 <vPortEnterCritical>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d12:	b25b      	sxtb	r3, r3
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d18:	d103      	bne.n	8009d22 <vQueueWaitForMessageRestricted+0x2a>
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d28:	b25b      	sxtb	r3, r3
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d103      	bne.n	8009d38 <vQueueWaitForMessageRestricted+0x40>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d38:	f001 fc84 	bl	800b644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d106      	bne.n	8009d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3324      	adds	r3, #36	; 0x24
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fc07 	bl	800a560 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d52:	6978      	ldr	r0, [r7, #20]
 8009d54:	f7ff fefb 	bl	8009b4e <prvUnlockQueue>
	}
 8009d58:	bf00      	nop
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	; 0x38
 8009d64:	af04      	add	r7, sp, #16
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	623b      	str	r3, [r7, #32]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	61fb      	str	r3, [r7, #28]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009da6:	235c      	movs	r3, #92	; 0x5c
 8009da8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b5c      	cmp	r3, #92	; 0x5c
 8009dae:	d00a      	beq.n	8009dc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	61bb      	str	r3, [r7, #24]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01e      	beq.n	8009e0c <xTaskCreateStatic+0xac>
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009de6:	2300      	movs	r3, #0
 8009de8:	9303      	str	r3, [sp, #12]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	f107 0314 	add.w	r3, r7, #20
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f850 	bl	8009ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e06:	f000 f8dd 	bl	8009fc4 <prvAddNewTaskToReadyList>
 8009e0a:	e001      	b.n	8009e10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e10:	697b      	ldr	r3, [r7, #20]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3728      	adds	r7, #40	; 0x28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b08c      	sub	sp, #48	; 0x30
 8009e1e:	af04      	add	r7, sp, #16
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	4613      	mov	r3, r2
 8009e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 fcfa 	bl	800b828 <pvPortMalloc>
 8009e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00e      	beq.n	8009e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e3c:	205c      	movs	r0, #92	; 0x5c
 8009e3e:	f001 fcf3 	bl	800b828 <pvPortMalloc>
 8009e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8009e50:	e005      	b.n	8009e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e52:	6978      	ldr	r0, [r7, #20]
 8009e54:	f001 fdb4 	bl	800b9c0 <vPortFree>
 8009e58:	e001      	b.n	8009e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e6c:	88fa      	ldrh	r2, [r7, #6]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	9303      	str	r3, [sp, #12]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	9302      	str	r3, [sp, #8]
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 f80e 	bl	8009ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e88:	69f8      	ldr	r0, [r7, #28]
 8009e8a:	f000 f89b 	bl	8009fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	e002      	b.n	8009e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e94:	f04f 33ff 	mov.w	r3, #4294967295
 8009e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3720      	adds	r7, #32
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	461a      	mov	r2, r3
 8009ebc:	21a5      	movs	r1, #165	; 0xa5
 8009ebe:	f001 fed5 	bl	800bc6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	617b      	str	r3, [r7, #20]
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01f      	beq.n	8009f42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f02:	2300      	movs	r3, #0
 8009f04:	61fb      	str	r3, [r7, #28]
 8009f06:	e012      	b.n	8009f2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	7819      	ldrb	r1, [r3, #0]
 8009f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4413      	add	r3, r2
 8009f16:	3334      	adds	r3, #52	; 0x34
 8009f18:	460a      	mov	r2, r1
 8009f1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	4413      	add	r3, r2
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d006      	beq.n	8009f36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	61fb      	str	r3, [r7, #28]
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	2b0f      	cmp	r3, #15
 8009f32:	d9e9      	bls.n	8009f08 <prvInitialiseNewTask+0x64>
 8009f34:	e000      	b.n	8009f38 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f40:	e003      	b.n	8009f4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	2b37      	cmp	r3, #55	; 0x37
 8009f4e:	d901      	bls.n	8009f54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f50:	2337      	movs	r3, #55	; 0x37
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	2200      	movs	r2, #0
 8009f64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fe56 	bl	8008c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	3318      	adds	r3, #24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fe51 	bl	8008c1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	2200      	movs	r2, #0
 8009f94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	69b8      	ldr	r0, [r7, #24]
 8009fa4:	f001 f9f2 	bl	800b38c <pxPortInitialiseStack>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fba:	bf00      	nop
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fcc:	f001 fb0a 	bl	800b5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <prvAddNewTaskToReadyList+0xc4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a2c      	ldr	r2, [pc, #176]	; (800a088 <prvAddNewTaskToReadyList+0xc4>)
 8009fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fda:	4b2c      	ldr	r3, [pc, #176]	; (800a08c <prvAddNewTaskToReadyList+0xc8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fe2:	4a2a      	ldr	r2, [pc, #168]	; (800a08c <prvAddNewTaskToReadyList+0xc8>)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fe8:	4b27      	ldr	r3, [pc, #156]	; (800a088 <prvAddNewTaskToReadyList+0xc4>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d110      	bne.n	800a012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ff0:	f000 fbe2 	bl	800a7b8 <prvInitialiseTaskLists>
 8009ff4:	e00d      	b.n	800a012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ff6:	4b26      	ldr	r3, [pc, #152]	; (800a090 <prvAddNewTaskToReadyList+0xcc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d109      	bne.n	800a012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <prvAddNewTaskToReadyList+0xc8>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	429a      	cmp	r2, r3
 800a00a:	d802      	bhi.n	800a012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a00c:	4a1f      	ldr	r2, [pc, #124]	; (800a08c <prvAddNewTaskToReadyList+0xc8>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a012:	4b20      	ldr	r3, [pc, #128]	; (800a094 <prvAddNewTaskToReadyList+0xd0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3301      	adds	r3, #1
 800a018:	4a1e      	ldr	r2, [pc, #120]	; (800a094 <prvAddNewTaskToReadyList+0xd0>)
 800a01a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a01c:	4b1d      	ldr	r3, [pc, #116]	; (800a094 <prvAddNewTaskToReadyList+0xd0>)
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	4b1b      	ldr	r3, [pc, #108]	; (800a098 <prvAddNewTaskToReadyList+0xd4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d903      	bls.n	800a038 <prvAddNewTaskToReadyList+0x74>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	4a18      	ldr	r2, [pc, #96]	; (800a098 <prvAddNewTaskToReadyList+0xd4>)
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4a15      	ldr	r2, [pc, #84]	; (800a09c <prvAddNewTaskToReadyList+0xd8>)
 800a046:	441a      	add	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3304      	adds	r3, #4
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7fe fdf1 	bl	8008c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a054:	f001 faf6 	bl	800b644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a058:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <prvAddNewTaskToReadyList+0xcc>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00e      	beq.n	800a07e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <prvAddNewTaskToReadyList+0xc8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d207      	bcs.n	800a07e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a06e:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <prvAddNewTaskToReadyList+0xdc>)
 800a070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a07e:	bf00      	nop
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	200018ec 	.word	0x200018ec
 800a08c:	20001418 	.word	0x20001418
 800a090:	200018f8 	.word	0x200018f8
 800a094:	20001908 	.word	0x20001908
 800a098:	200018f4 	.word	0x200018f4
 800a09c:	2000141c 	.word	0x2000141c
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0b2:	463a      	mov	r2, r7
 800a0b4:	1d39      	adds	r1, r7, #4
 800a0b6:	f107 0308 	add.w	r3, r7, #8
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fd5a 	bl	8008b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	9202      	str	r2, [sp, #8]
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	4921      	ldr	r1, [pc, #132]	; (800a158 <vTaskStartScheduler+0xb4>)
 800a0d4:	4821      	ldr	r0, [pc, #132]	; (800a15c <vTaskStartScheduler+0xb8>)
 800a0d6:	f7ff fe43 	bl	8009d60 <xTaskCreateStatic>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4a20      	ldr	r2, [pc, #128]	; (800a160 <vTaskStartScheduler+0xbc>)
 800a0de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0e0:	4b1f      	ldr	r3, [pc, #124]	; (800a160 <vTaskStartScheduler+0xbc>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	e001      	b.n	800a0f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d102      	bne.n	800a0fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0f8:	f000 fdfa 	bl	800acf0 <xTimerCreateTimerTask>
 800a0fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d116      	bne.n	800a132 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a118:	4b12      	ldr	r3, [pc, #72]	; (800a164 <vTaskStartScheduler+0xc0>)
 800a11a:	f04f 32ff 	mov.w	r2, #4294967295
 800a11e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a120:	4b11      	ldr	r3, [pc, #68]	; (800a168 <vTaskStartScheduler+0xc4>)
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a126:	4b11      	ldr	r3, [pc, #68]	; (800a16c <vTaskStartScheduler+0xc8>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a12c:	f001 f9b8 	bl	800b4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a130:	e00e      	b.n	800a150 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d10a      	bne.n	800a150 <vTaskStartScheduler+0xac>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	60fb      	str	r3, [r7, #12]
}
 800a14c:	bf00      	nop
 800a14e:	e7fe      	b.n	800a14e <vTaskStartScheduler+0xaa>
}
 800a150:	bf00      	nop
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	080119a8 	.word	0x080119a8
 800a15c:	0800a789 	.word	0x0800a789
 800a160:	20001910 	.word	0x20001910
 800a164:	2000190c 	.word	0x2000190c
 800a168:	200018f8 	.word	0x200018f8
 800a16c:	200018f0 	.word	0x200018f0

0800a170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <vTaskSuspendAll+0x18>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	4a03      	ldr	r2, [pc, #12]	; (800a188 <vTaskSuspendAll+0x18>)
 800a17c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a17e:	bf00      	nop
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	20001914 	.word	0x20001914

0800a18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a19a:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <xTaskResumeAll+0x118>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	603b      	str	r3, [r7, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1b8:	f001 fa14 	bl	800b5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1bc:	4b39      	ldr	r3, [pc, #228]	; (800a2a4 <xTaskResumeAll+0x118>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4a38      	ldr	r2, [pc, #224]	; (800a2a4 <xTaskResumeAll+0x118>)
 800a1c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c6:	4b37      	ldr	r3, [pc, #220]	; (800a2a4 <xTaskResumeAll+0x118>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d162      	bne.n	800a294 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1ce:	4b36      	ldr	r3, [pc, #216]	; (800a2a8 <xTaskResumeAll+0x11c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d05e      	beq.n	800a294 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1d6:	e02f      	b.n	800a238 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d8:	4b34      	ldr	r3, [pc, #208]	; (800a2ac <xTaskResumeAll+0x120>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3318      	adds	r3, #24
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe fd83 	bl	8008cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fd7e 	bl	8008cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	4b2d      	ldr	r3, [pc, #180]	; (800a2b0 <xTaskResumeAll+0x124>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d903      	bls.n	800a208 <xTaskResumeAll+0x7c>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	4a2a      	ldr	r2, [pc, #168]	; (800a2b0 <xTaskResumeAll+0x124>)
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4a27      	ldr	r2, [pc, #156]	; (800a2b4 <xTaskResumeAll+0x128>)
 800a216:	441a      	add	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4610      	mov	r0, r2
 800a220:	f7fe fd09 	bl	8008c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a228:	4b23      	ldr	r3, [pc, #140]	; (800a2b8 <xTaskResumeAll+0x12c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	429a      	cmp	r2, r3
 800a230:	d302      	bcc.n	800a238 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a232:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <xTaskResumeAll+0x130>)
 800a234:	2201      	movs	r2, #1
 800a236:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a238:	4b1c      	ldr	r3, [pc, #112]	; (800a2ac <xTaskResumeAll+0x120>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1cb      	bne.n	800a1d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a246:	f000 fb55 	bl	800a8f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <xTaskResumeAll+0x134>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d010      	beq.n	800a278 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a256:	f000 f847 	bl	800a2e8 <xTaskIncrementTick>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a260:	4b16      	ldr	r3, [pc, #88]	; (800a2bc <xTaskResumeAll+0x130>)
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3b01      	subs	r3, #1
 800a26a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f1      	bne.n	800a256 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a272:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <xTaskResumeAll+0x134>)
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a278:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <xTaskResumeAll+0x130>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d009      	beq.n	800a294 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a284:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <xTaskResumeAll+0x138>)
 800a286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a294:	f001 f9d6 	bl	800b644 <vPortExitCritical>

	return xAlreadyYielded;
 800a298:	68bb      	ldr	r3, [r7, #8]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20001914 	.word	0x20001914
 800a2a8:	200018ec 	.word	0x200018ec
 800a2ac:	200018ac 	.word	0x200018ac
 800a2b0:	200018f4 	.word	0x200018f4
 800a2b4:	2000141c 	.word	0x2000141c
 800a2b8:	20001418 	.word	0x20001418
 800a2bc:	20001900 	.word	0x20001900
 800a2c0:	200018fc 	.word	0x200018fc
 800a2c4:	e000ed04 	.word	0xe000ed04

0800a2c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <xTaskGetTickCount+0x1c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2d4:	687b      	ldr	r3, [r7, #4]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	200018f0 	.word	0x200018f0

0800a2e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	4b4f      	ldr	r3, [pc, #316]	; (800a430 <xTaskIncrementTick+0x148>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 808f 	bne.w	800a41a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2fc:	4b4d      	ldr	r3, [pc, #308]	; (800a434 <xTaskIncrementTick+0x14c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a304:	4a4b      	ldr	r2, [pc, #300]	; (800a434 <xTaskIncrementTick+0x14c>)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d120      	bne.n	800a352 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a310:	4b49      	ldr	r3, [pc, #292]	; (800a438 <xTaskIncrementTick+0x150>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <xTaskIncrementTick+0x48>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	603b      	str	r3, [r7, #0]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <xTaskIncrementTick+0x46>
 800a330:	4b41      	ldr	r3, [pc, #260]	; (800a438 <xTaskIncrementTick+0x150>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	4b41      	ldr	r3, [pc, #260]	; (800a43c <xTaskIncrementTick+0x154>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a3f      	ldr	r2, [pc, #252]	; (800a438 <xTaskIncrementTick+0x150>)
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	4a3f      	ldr	r2, [pc, #252]	; (800a43c <xTaskIncrementTick+0x154>)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	4b3e      	ldr	r3, [pc, #248]	; (800a440 <xTaskIncrementTick+0x158>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3301      	adds	r3, #1
 800a34a:	4a3d      	ldr	r2, [pc, #244]	; (800a440 <xTaskIncrementTick+0x158>)
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	f000 fad1 	bl	800a8f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a352:	4b3c      	ldr	r3, [pc, #240]	; (800a444 <xTaskIncrementTick+0x15c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d349      	bcc.n	800a3f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <xTaskIncrementTick+0x150>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d104      	bne.n	800a370 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a366:	4b37      	ldr	r3, [pc, #220]	; (800a444 <xTaskIncrementTick+0x15c>)
 800a368:	f04f 32ff 	mov.w	r2, #4294967295
 800a36c:	601a      	str	r2, [r3, #0]
					break;
 800a36e:	e03f      	b.n	800a3f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a370:	4b31      	ldr	r3, [pc, #196]	; (800a438 <xTaskIncrementTick+0x150>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d203      	bcs.n	800a390 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a388:	4a2e      	ldr	r2, [pc, #184]	; (800a444 <xTaskIncrementTick+0x15c>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a38e:	e02f      	b.n	800a3f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fcab 	bl	8008cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	3318      	adds	r3, #24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe fca2 	bl	8008cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4b25      	ldr	r3, [pc, #148]	; (800a448 <xTaskIncrementTick+0x160>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d903      	bls.n	800a3c0 <xTaskIncrementTick+0xd8>
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	4a22      	ldr	r2, [pc, #136]	; (800a448 <xTaskIncrementTick+0x160>)
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4a1f      	ldr	r2, [pc, #124]	; (800a44c <xTaskIncrementTick+0x164>)
 800a3ce:	441a      	add	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f7fe fc2d 	bl	8008c36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	4b1b      	ldr	r3, [pc, #108]	; (800a450 <xTaskIncrementTick+0x168>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d3b8      	bcc.n	800a35c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ee:	e7b5      	b.n	800a35c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3f0:	4b17      	ldr	r3, [pc, #92]	; (800a450 <xTaskIncrementTick+0x168>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f6:	4915      	ldr	r1, [pc, #84]	; (800a44c <xTaskIncrementTick+0x164>)
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d901      	bls.n	800a40c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a40c:	4b11      	ldr	r3, [pc, #68]	; (800a454 <xTaskIncrementTick+0x16c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d007      	beq.n	800a424 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e004      	b.n	800a424 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <xTaskIncrementTick+0x170>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3301      	adds	r3, #1
 800a420:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <xTaskIncrementTick+0x170>)
 800a422:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a424:	697b      	ldr	r3, [r7, #20]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20001914 	.word	0x20001914
 800a434:	200018f0 	.word	0x200018f0
 800a438:	200018a4 	.word	0x200018a4
 800a43c:	200018a8 	.word	0x200018a8
 800a440:	20001904 	.word	0x20001904
 800a444:	2000190c 	.word	0x2000190c
 800a448:	200018f4 	.word	0x200018f4
 800a44c:	2000141c 	.word	0x2000141c
 800a450:	20001418 	.word	0x20001418
 800a454:	20001900 	.word	0x20001900
 800a458:	200018fc 	.word	0x200018fc

0800a45c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a462:	4b28      	ldr	r3, [pc, #160]	; (800a504 <vTaskSwitchContext+0xa8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a46a:	4b27      	ldr	r3, [pc, #156]	; (800a508 <vTaskSwitchContext+0xac>)
 800a46c:	2201      	movs	r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a470:	e041      	b.n	800a4f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a472:	4b25      	ldr	r3, [pc, #148]	; (800a508 <vTaskSwitchContext+0xac>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a478:	4b24      	ldr	r3, [pc, #144]	; (800a50c <vTaskSwitchContext+0xb0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e010      	b.n	800a4a2 <vTaskSwitchContext+0x46>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <vTaskSwitchContext+0x40>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <vTaskSwitchContext+0x3e>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	491b      	ldr	r1, [pc, #108]	; (800a510 <vTaskSwitchContext+0xb4>)
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0e4      	beq.n	800a480 <vTaskSwitchContext+0x24>
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4a13      	ldr	r2, [pc, #76]	; (800a510 <vTaskSwitchContext+0xb4>)
 800a4c2:	4413      	add	r3, r2
 800a4c4:	60bb      	str	r3, [r7, #8]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	605a      	str	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d104      	bne.n	800a4e6 <vTaskSwitchContext+0x8a>
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	605a      	str	r2, [r3, #4]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	4a09      	ldr	r2, [pc, #36]	; (800a514 <vTaskSwitchContext+0xb8>)
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	4a06      	ldr	r2, [pc, #24]	; (800a50c <vTaskSwitchContext+0xb0>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6013      	str	r3, [r2, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20001914 	.word	0x20001914
 800a508:	20001900 	.word	0x20001900
 800a50c:	200018f4 	.word	0x200018f4
 800a510:	2000141c 	.word	0x2000141c
 800a514:	20001418 	.word	0x20001418

0800a518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	60fb      	str	r3, [r7, #12]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a53e:	4b07      	ldr	r3, [pc, #28]	; (800a55c <vTaskPlaceOnEventList+0x44>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3318      	adds	r3, #24
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fe fb99 	bl	8008c7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a54c:	2101      	movs	r1, #1
 800a54e:	6838      	ldr	r0, [r7, #0]
 800a550:	f000 fb7a 	bl	800ac48 <prvAddCurrentTaskToDelayedList>
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20001418 	.word	0x20001418

0800a560 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	617b      	str	r3, [r7, #20]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3318      	adds	r3, #24
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7fe fb50 	bl	8008c36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a59c:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	68b8      	ldr	r0, [r7, #8]
 800a5a6:	f000 fb4f 	bl	800ac48 <prvAddCurrentTaskToDelayedList>
	}
 800a5aa:	bf00      	nop
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20001418 	.word	0x20001418

0800a5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	60fb      	str	r3, [r7, #12]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3318      	adds	r3, #24
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fb81 	bl	8008cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ee:	4b1e      	ldr	r3, [pc, #120]	; (800a668 <xTaskRemoveFromEventList+0xb0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d11d      	bne.n	800a632 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fb78 	bl	8008cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a604:	4b19      	ldr	r3, [pc, #100]	; (800a66c <xTaskRemoveFromEventList+0xb4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d903      	bls.n	800a614 <xTaskRemoveFromEventList+0x5c>
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	4a16      	ldr	r2, [pc, #88]	; (800a66c <xTaskRemoveFromEventList+0xb4>)
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4a13      	ldr	r2, [pc, #76]	; (800a670 <xTaskRemoveFromEventList+0xb8>)
 800a622:	441a      	add	r2, r3
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	3304      	adds	r3, #4
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7fe fb03 	bl	8008c36 <vListInsertEnd>
 800a630:	e005      	b.n	800a63e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	3318      	adds	r3, #24
 800a636:	4619      	mov	r1, r3
 800a638:	480e      	ldr	r0, [pc, #56]	; (800a674 <xTaskRemoveFromEventList+0xbc>)
 800a63a:	f7fe fafc 	bl	8008c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a642:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <xTaskRemoveFromEventList+0xc0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	429a      	cmp	r2, r3
 800a64a:	d905      	bls.n	800a658 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a64c:	2301      	movs	r3, #1
 800a64e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <xTaskRemoveFromEventList+0xc4>)
 800a652:	2201      	movs	r2, #1
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	e001      	b.n	800a65c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a65c:	697b      	ldr	r3, [r7, #20]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20001914 	.word	0x20001914
 800a66c:	200018f4 	.word	0x200018f4
 800a670:	2000141c 	.word	0x2000141c
 800a674:	200018ac 	.word	0x200018ac
 800a678:	20001418 	.word	0x20001418
 800a67c:	20001900 	.word	0x20001900

0800a680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <vTaskInternalSetTimeOutState+0x24>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <vTaskInternalSetTimeOutState+0x28>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	605a      	str	r2, [r3, #4]
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20001904 	.word	0x20001904
 800a6a8:	200018f0 	.word	0x200018f0

0800a6ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	613b      	str	r3, [r7, #16]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	60fb      	str	r3, [r7, #12]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6ee:	f000 ff79 	bl	800b5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6f2:	4b1d      	ldr	r3, [pc, #116]	; (800a768 <xTaskCheckForTimeOut+0xbc>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d102      	bne.n	800a712 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	61fb      	str	r3, [r7, #28]
 800a710:	e023      	b.n	800a75a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <xTaskCheckForTimeOut+0xc0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d007      	beq.n	800a72e <xTaskCheckForTimeOut+0x82>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	69ba      	ldr	r2, [r7, #24]
 800a724:	429a      	cmp	r2, r3
 800a726:	d302      	bcc.n	800a72e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a728:	2301      	movs	r3, #1
 800a72a:	61fb      	str	r3, [r7, #28]
 800a72c:	e015      	b.n	800a75a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	429a      	cmp	r2, r3
 800a736:	d20b      	bcs.n	800a750 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff9b 	bl	800a680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	e004      	b.n	800a75a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a756:	2301      	movs	r3, #1
 800a758:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a75a:	f000 ff73 	bl	800b644 <vPortExitCritical>

	return xReturn;
 800a75e:	69fb      	ldr	r3, [r7, #28]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	200018f0 	.word	0x200018f0
 800a76c:	20001904 	.word	0x20001904

0800a770 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a774:	4b03      	ldr	r3, [pc, #12]	; (800a784 <vTaskMissedYield+0x14>)
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
}
 800a77a:	bf00      	nop
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	20001900 	.word	0x20001900

0800a788 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a790:	f000 f852 	bl	800a838 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a794:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <prvIdleTask+0x28>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d9f9      	bls.n	800a790 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <prvIdleTask+0x2c>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7ac:	e7f0      	b.n	800a790 <prvIdleTask+0x8>
 800a7ae:	bf00      	nop
 800a7b0:	2000141c 	.word	0x2000141c
 800a7b4:	e000ed04 	.word	0xe000ed04

0800a7b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7be:	2300      	movs	r3, #0
 800a7c0:	607b      	str	r3, [r7, #4]
 800a7c2:	e00c      	b.n	800a7de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4a12      	ldr	r2, [pc, #72]	; (800a818 <prvInitialiseTaskLists+0x60>)
 800a7d0:	4413      	add	r3, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe fa02 	bl	8008bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	607b      	str	r3, [r7, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b37      	cmp	r3, #55	; 0x37
 800a7e2:	d9ef      	bls.n	800a7c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7e4:	480d      	ldr	r0, [pc, #52]	; (800a81c <prvInitialiseTaskLists+0x64>)
 800a7e6:	f7fe f9f9 	bl	8008bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7ea:	480d      	ldr	r0, [pc, #52]	; (800a820 <prvInitialiseTaskLists+0x68>)
 800a7ec:	f7fe f9f6 	bl	8008bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7f0:	480c      	ldr	r0, [pc, #48]	; (800a824 <prvInitialiseTaskLists+0x6c>)
 800a7f2:	f7fe f9f3 	bl	8008bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7f6:	480c      	ldr	r0, [pc, #48]	; (800a828 <prvInitialiseTaskLists+0x70>)
 800a7f8:	f7fe f9f0 	bl	8008bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7fc:	480b      	ldr	r0, [pc, #44]	; (800a82c <prvInitialiseTaskLists+0x74>)
 800a7fe:	f7fe f9ed 	bl	8008bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <prvInitialiseTaskLists+0x78>)
 800a804:	4a05      	ldr	r2, [pc, #20]	; (800a81c <prvInitialiseTaskLists+0x64>)
 800a806:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a808:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <prvInitialiseTaskLists+0x7c>)
 800a80a:	4a05      	ldr	r2, [pc, #20]	; (800a820 <prvInitialiseTaskLists+0x68>)
 800a80c:	601a      	str	r2, [r3, #0]
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	2000141c 	.word	0x2000141c
 800a81c:	2000187c 	.word	0x2000187c
 800a820:	20001890 	.word	0x20001890
 800a824:	200018ac 	.word	0x200018ac
 800a828:	200018c0 	.word	0x200018c0
 800a82c:	200018d8 	.word	0x200018d8
 800a830:	200018a4 	.word	0x200018a4
 800a834:	200018a8 	.word	0x200018a8

0800a838 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a83e:	e019      	b.n	800a874 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a840:	f000 fed0 	bl	800b5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a844:	4b10      	ldr	r3, [pc, #64]	; (800a888 <prvCheckTasksWaitingTermination+0x50>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3304      	adds	r3, #4
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fa4d 	bl	8008cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a856:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <prvCheckTasksWaitingTermination+0x54>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <prvCheckTasksWaitingTermination+0x54>)
 800a85e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <prvCheckTasksWaitingTermination+0x58>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3b01      	subs	r3, #1
 800a866:	4a0a      	ldr	r2, [pc, #40]	; (800a890 <prvCheckTasksWaitingTermination+0x58>)
 800a868:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a86a:	f000 feeb 	bl	800b644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f810 	bl	800a894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a874:	4b06      	ldr	r3, [pc, #24]	; (800a890 <prvCheckTasksWaitingTermination+0x58>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e1      	bne.n	800a840 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	200018c0 	.word	0x200018c0
 800a88c:	200018ec 	.word	0x200018ec
 800a890:	200018d4 	.word	0x200018d4

0800a894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d108      	bne.n	800a8b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f001 f888 	bl	800b9c0 <vPortFree>
				vPortFree( pxTCB );
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 f885 	bl	800b9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8b6:	e018      	b.n	800a8ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d103      	bne.n	800a8ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 f87c 	bl	800b9c0 <vPortFree>
	}
 800a8c8:	e00f      	b.n	800a8ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d00a      	beq.n	800a8ea <prvDeleteTCB+0x56>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	60fb      	str	r3, [r7, #12]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <prvDeleteTCB+0x54>
	}
 800a8ea:	bf00      	nop
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <prvResetNextTaskUnblockTime+0x38>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <prvResetNextTaskUnblockTime+0x3c>)
 800a906:	f04f 32ff 	mov.w	r2, #4294967295
 800a90a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a90c:	e008      	b.n	800a920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <prvResetNextTaskUnblockTime+0x38>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	4a04      	ldr	r2, [pc, #16]	; (800a930 <prvResetNextTaskUnblockTime+0x3c>)
 800a91e:	6013      	str	r3, [r2, #0]
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	200018a4 	.word	0x200018a4
 800a930:	2000190c 	.word	0x2000190c

0800a934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <xTaskGetSchedulerState+0x34>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a942:	2301      	movs	r3, #1
 800a944:	607b      	str	r3, [r7, #4]
 800a946:	e008      	b.n	800a95a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a948:	4b08      	ldr	r3, [pc, #32]	; (800a96c <xTaskGetSchedulerState+0x38>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d102      	bne.n	800a956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a950:	2302      	movs	r3, #2
 800a952:	607b      	str	r3, [r7, #4]
 800a954:	e001      	b.n	800a95a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a956:	2300      	movs	r3, #0
 800a958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a95a:	687b      	ldr	r3, [r7, #4]
	}
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	200018f8 	.word	0x200018f8
 800a96c:	20001914 	.word	0x20001914

0800a970 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d051      	beq.n	800aa2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98a:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <xTaskPriorityInherit+0xc4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a990:	429a      	cmp	r2, r3
 800a992:	d241      	bcs.n	800aa18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	db06      	blt.n	800a9aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a99c:	4b25      	ldr	r3, [pc, #148]	; (800aa34 <xTaskPriorityInherit+0xc4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	6959      	ldr	r1, [r3, #20]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4a1f      	ldr	r2, [pc, #124]	; (800aa38 <xTaskPriorityInherit+0xc8>)
 800a9bc:	4413      	add	r3, r2
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	d122      	bne.n	800aa08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe f992 	bl	8008cf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9cc:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <xTaskPriorityInherit+0xc4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <xTaskPriorityInherit+0xcc>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d903      	bls.n	800a9ea <xTaskPriorityInherit+0x7a>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <xTaskPriorityInherit+0xcc>)
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <xTaskPriorityInherit+0xc8>)
 800a9f8:	441a      	add	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f7fe f918 	bl	8008c36 <vListInsertEnd>
 800aa06:	e004      	b.n	800aa12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <xTaskPriorityInherit+0xc4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa12:	2301      	movs	r3, #1
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e008      	b.n	800aa2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <xTaskPriorityInherit+0xc4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d201      	bcs.n	800aa2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa26:	2301      	movs	r3, #1
 800aa28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
	}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20001418 	.word	0x20001418
 800aa38:	2000141c 	.word	0x2000141c
 800aa3c:	200018f4 	.word	0x200018f4

0800aa40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d056      	beq.n	800ab04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa56:	4b2e      	ldr	r3, [pc, #184]	; (800ab10 <xTaskPriorityDisinherit+0xd0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d00a      	beq.n	800aa76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	60bb      	str	r3, [r7, #8]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	1e5a      	subs	r2, r3, #1
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d02c      	beq.n	800ab04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d128      	bne.n	800ab04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe f91a 	bl	8008cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad4:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <xTaskPriorityDisinherit+0xd4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d903      	bls.n	800aae4 <xTaskPriorityDisinherit+0xa4>
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a0c      	ldr	r2, [pc, #48]	; (800ab14 <xTaskPriorityDisinherit+0xd4>)
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4a09      	ldr	r2, [pc, #36]	; (800ab18 <xTaskPriorityDisinherit+0xd8>)
 800aaf2:	441a      	add	r2, r3
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fe f89b 	bl	8008c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab00:	2301      	movs	r3, #1
 800ab02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab04:	697b      	ldr	r3, [r7, #20]
	}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20001418 	.word	0x20001418
 800ab14:	200018f4 	.word	0x200018f4
 800ab18:	2000141c 	.word	0x2000141c

0800ab1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d06a      	beq.n	800ac0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d902      	bls.n	800ab62 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	e002      	b.n	800ab68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d04b      	beq.n	800ac0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d146      	bne.n	800ac0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab7c:	4b25      	ldr	r3, [pc, #148]	; (800ac14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d10a      	bne.n	800ab9c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60bb      	str	r3, [r7, #8]
}
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	db04      	blt.n	800abba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	6959      	ldr	r1, [r3, #20]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4a13      	ldr	r2, [pc, #76]	; (800ac18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abca:	4413      	add	r3, r2
 800abcc:	4299      	cmp	r1, r3
 800abce:	d11c      	bne.n	800ac0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	3304      	adds	r3, #4
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fe f88b 	bl	8008cf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d903      	bls.n	800abee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abea:	4a0c      	ldr	r2, [pc, #48]	; (800ac1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4a07      	ldr	r2, [pc, #28]	; (800ac18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abfc:	441a      	add	r2, r3
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	3304      	adds	r3, #4
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fe f816 	bl	8008c36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac0a:	bf00      	nop
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001418 	.word	0x20001418
 800ac18:	2000141c 	.word	0x2000141c
 800ac1c:	200018f4 	.word	0x200018f4

0800ac20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d004      	beq.n	800ac36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac32:	3201      	adds	r2, #1
 800ac34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac38:	681b      	ldr	r3, [r3, #0]
	}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20001418 	.word	0x20001418

0800ac48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac52:	4b21      	ldr	r3, [pc, #132]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac58:	4b20      	ldr	r3, [pc, #128]	; (800acdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe f846 	bl	8008cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d10a      	bne.n	800ac82 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac72:	4b1a      	ldr	r3, [pc, #104]	; (800acdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4819      	ldr	r0, [pc, #100]	; (800ace0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac7c:	f7fd ffdb 	bl	8008c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac80:	e026      	b.n	800acd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4413      	add	r3, r2
 800ac88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac8a:	4b14      	ldr	r3, [pc, #80]	; (800acdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d209      	bcs.n	800acae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac9a:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <prvAddCurrentTaskToDelayedList+0x94>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7fd ffe9 	bl	8008c7e <vListInsert>
}
 800acac:	e010      	b.n	800acd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acae:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <prvAddCurrentTaskToDelayedList+0x94>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4619      	mov	r1, r3
 800acba:	4610      	mov	r0, r2
 800acbc:	f7fd ffdf 	bl	8008c7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acc0:	4b0a      	ldr	r3, [pc, #40]	; (800acec <prvAddCurrentTaskToDelayedList+0xa4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d202      	bcs.n	800acd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acca:	4a08      	ldr	r2, [pc, #32]	; (800acec <prvAddCurrentTaskToDelayedList+0xa4>)
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	6013      	str	r3, [r2, #0]
}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	200018f0 	.word	0x200018f0
 800acdc:	20001418 	.word	0x20001418
 800ace0:	200018d8 	.word	0x200018d8
 800ace4:	200018a8 	.word	0x200018a8
 800ace8:	200018a4 	.word	0x200018a4
 800acec:	2000190c 	.word	0x2000190c

0800acf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08a      	sub	sp, #40	; 0x28
 800acf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acfa:	f000 fb07 	bl	800b30c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acfe:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <xTimerCreateTimerTask+0x80>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d021      	beq.n	800ad4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad0e:	1d3a      	adds	r2, r7, #4
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	f107 030c 	add.w	r3, r7, #12
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fd ff45 	bl	8008ba8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	9202      	str	r2, [sp, #8]
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	2302      	movs	r3, #2
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	460a      	mov	r2, r1
 800ad30:	4910      	ldr	r1, [pc, #64]	; (800ad74 <xTimerCreateTimerTask+0x84>)
 800ad32:	4811      	ldr	r0, [pc, #68]	; (800ad78 <xTimerCreateTimerTask+0x88>)
 800ad34:	f7ff f814 	bl	8009d60 <xTaskCreateStatic>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	4a10      	ldr	r2, [pc, #64]	; (800ad7c <xTimerCreateTimerTask+0x8c>)
 800ad3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <xTimerCreateTimerTask+0x8c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad46:	2301      	movs	r3, #1
 800ad48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	613b      	str	r3, [r7, #16]
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad66:	697b      	ldr	r3, [r7, #20]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20001948 	.word	0x20001948
 800ad74:	080119b0 	.word	0x080119b0
 800ad78:	0800aeb5 	.word	0x0800aeb5
 800ad7c:	2000194c 	.word	0x2000194c

0800ad80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08a      	sub	sp, #40	; 0x28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	623b      	str	r3, [r7, #32]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adae:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <xTimerGenericCommand+0x98>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d02a      	beq.n	800ae0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	dc18      	bgt.n	800adfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adc8:	f7ff fdb4 	bl	800a934 <xTaskGetSchedulerState>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b02      	cmp	r3, #2
 800add0:	d109      	bne.n	800ade6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800add2:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <xTimerGenericCommand+0x98>)
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	f107 0110 	add.w	r1, r7, #16
 800adda:	2300      	movs	r3, #0
 800addc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adde:	f7fe f959 	bl	8009094 <xQueueGenericSend>
 800ade2:	6278      	str	r0, [r7, #36]	; 0x24
 800ade4:	e012      	b.n	800ae0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ade6:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <xTimerGenericCommand+0x98>)
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f107 0110 	add.w	r1, r7, #16
 800adee:	2300      	movs	r3, #0
 800adf0:	2200      	movs	r2, #0
 800adf2:	f7fe f94f 	bl	8009094 <xQueueGenericSend>
 800adf6:	6278      	str	r0, [r7, #36]	; 0x24
 800adf8:	e008      	b.n	800ae0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <xTimerGenericCommand+0x98>)
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f107 0110 	add.w	r1, r7, #16
 800ae02:	2300      	movs	r3, #0
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	f7fe fa43 	bl	8009290 <xQueueGenericSendFromISR>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20001948 	.word	0x20001948

0800ae1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae26:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <prvProcessExpiredTimer+0x94>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3304      	adds	r3, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fd ff5b 	bl	8008cf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d022      	beq.n	800ae8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	699a      	ldr	r2, [r3, #24]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	18d1      	adds	r1, r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	6978      	ldr	r0, [r7, #20]
 800ae56:	f000 f8d1 	bl	800affc <prvInsertTimerInActiveList>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01f      	beq.n	800aea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae60:	2300      	movs	r3, #0
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	2300      	movs	r3, #0
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	2100      	movs	r1, #0
 800ae6a:	6978      	ldr	r0, [r7, #20]
 800ae6c:	f7ff ff88 	bl	800ad80 <xTimerGenericCommand>
 800ae70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d113      	bne.n	800aea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	60fb      	str	r3, [r7, #12]
}
 800ae8a:	bf00      	nop
 800ae8c:	e7fe      	b.n	800ae8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae94:	f023 0301 	bic.w	r3, r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	6978      	ldr	r0, [r7, #20]
 800aea6:	4798      	blx	r3
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20001940 	.word	0x20001940

0800aeb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f857 	bl	800af74 <prvGetNextExpireTime>
 800aec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4619      	mov	r1, r3
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f803 	bl	800aed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aed2:	f000 f8d5 	bl	800b080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aed6:	e7f1      	b.n	800aebc <prvTimerTask+0x8>

0800aed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aee2:	f7ff f945 	bl	800a170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f866 	bl	800afbc <prvSampleTimeNow>
 800aef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d130      	bne.n	800af5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10a      	bne.n	800af14 <prvProcessTimerOrBlockTask+0x3c>
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	429a      	cmp	r2, r3
 800af04:	d806      	bhi.n	800af14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af06:	f7ff f941 	bl	800a18c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff ff85 	bl	800ae1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af12:	e024      	b.n	800af5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d008      	beq.n	800af2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af1a:	4b13      	ldr	r3, [pc, #76]	; (800af68 <prvProcessTimerOrBlockTask+0x90>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <prvProcessTimerOrBlockTask+0x50>
 800af24:	2301      	movs	r3, #1
 800af26:	e000      	b.n	800af2a <prvProcessTimerOrBlockTask+0x52>
 800af28:	2300      	movs	r3, #0
 800af2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af2c:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <prvProcessTimerOrBlockTask+0x94>)
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4619      	mov	r1, r3
 800af3a:	f7fe fedd 	bl	8009cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af3e:	f7ff f925 	bl	800a18c <xTaskResumeAll>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af48:	4b09      	ldr	r3, [pc, #36]	; (800af70 <prvProcessTimerOrBlockTask+0x98>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
}
 800af58:	e001      	b.n	800af5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af5a:	f7ff f917 	bl	800a18c <xTaskResumeAll>
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20001944 	.word	0x20001944
 800af6c:	20001948 	.word	0x20001948
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af7c:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <prvGetNextExpireTime+0x44>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <prvGetNextExpireTime+0x16>
 800af86:	2201      	movs	r2, #1
 800af88:	e000      	b.n	800af8c <prvGetNextExpireTime+0x18>
 800af8a:	2200      	movs	r2, #0
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d105      	bne.n	800afa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <prvGetNextExpireTime+0x44>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	e001      	b.n	800afa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afa8:	68fb      	ldr	r3, [r7, #12]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20001940 	.word	0x20001940

0800afbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afc4:	f7ff f980 	bl	800a2c8 <xTaskGetTickCount>
 800afc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <prvSampleTimeNow+0x3c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d205      	bcs.n	800afe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afd4:	f000 f936 	bl	800b244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	e002      	b.n	800afe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afe6:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <prvSampleTimeNow+0x3c>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afec:	68fb      	ldr	r3, [r7, #12]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20001950 	.word	0x20001950

0800affc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d812      	bhi.n	800b048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d302      	bcc.n	800b036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b030:	2301      	movs	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e01b      	b.n	800b06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <prvInsertTimerInActiveList+0x7c>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3304      	adds	r3, #4
 800b03e:	4619      	mov	r1, r3
 800b040:	4610      	mov	r0, r2
 800b042:	f7fd fe1c 	bl	8008c7e <vListInsert>
 800b046:	e012      	b.n	800b06e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d206      	bcs.n	800b05e <prvInsertTimerInActiveList+0x62>
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d302      	bcc.n	800b05e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b058:	2301      	movs	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	e007      	b.n	800b06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b05e:	4b07      	ldr	r3, [pc, #28]	; (800b07c <prvInsertTimerInActiveList+0x80>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3304      	adds	r3, #4
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	f7fd fe08 	bl	8008c7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b06e:	697b      	ldr	r3, [r7, #20]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20001944 	.word	0x20001944
 800b07c:	20001940 	.word	0x20001940

0800b080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08e      	sub	sp, #56	; 0x38
 800b084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b086:	e0ca      	b.n	800b21e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da18      	bge.n	800b0c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b08e:	1d3b      	adds	r3, r7, #4
 800b090:	3304      	adds	r3, #4
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	61fb      	str	r3, [r7, #28]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b6:	6850      	ldr	r0, [r2, #4]
 800b0b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ba:	6892      	ldr	r2, [r2, #8]
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f2c0 80aa 	blt.w	800b21c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fd fe09 	bl	8008cf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff ff6b 	bl	800afbc <prvSampleTimeNow>
 800b0e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	f200 8097 	bhi.w	800b21e <prvProcessReceivedCommands+0x19e>
 800b0f0:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <prvProcessReceivedCommands+0x78>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b121 	.word	0x0800b121
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b121 	.word	0x0800b121
 800b104:	0800b195 	.word	0x0800b195
 800b108:	0800b1a9 	.word	0x0800b1a9
 800b10c:	0800b1f3 	.word	0x0800b1f3
 800b110:	0800b121 	.word	0x0800b121
 800b114:	0800b121 	.word	0x0800b121
 800b118:	0800b195 	.word	0x0800b195
 800b11c:	0800b1a9 	.word	0x0800b1a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	18d1      	adds	r1, r2, r3
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b140:	f7ff ff5c 	bl	800affc <prvInsertTimerInActiveList>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d069      	beq.n	800b21e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d05e      	beq.n	800b21e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	441a      	add	r2, r3
 800b168:	2300      	movs	r3, #0
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	2300      	movs	r3, #0
 800b16e:	2100      	movs	r1, #0
 800b170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b172:	f7ff fe05 	bl	800ad80 <xTimerGenericCommand>
 800b176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d14f      	bne.n	800b21e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	61bb      	str	r3, [r7, #24]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b19a:	f023 0301 	bic.w	r3, r3, #1
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1a6:	e03a      	b.n	800b21e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10a      	bne.n	800b1de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	617b      	str	r3, [r7, #20]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	699a      	ldr	r2, [r3, #24]
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	18d1      	adds	r1, r2, r3
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ec:	f7ff ff06 	bl	800affc <prvInsertTimerInActiveList>
					break;
 800b1f0:	e015      	b.n	800b21e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d103      	bne.n	800b208 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b202:	f000 fbdd 	bl	800b9c0 <vPortFree>
 800b206:	e00a      	b.n	800b21e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b21a:	e000      	b.n	800b21e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b21c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b21e:	4b08      	ldr	r3, [pc, #32]	; (800b240 <prvProcessReceivedCommands+0x1c0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	1d39      	adds	r1, r7, #4
 800b224:	2200      	movs	r2, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe f95a 	bl	80094e0 <xQueueReceive>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f47f af2a 	bne.w	800b088 <prvProcessReceivedCommands+0x8>
	}
}
 800b234:	bf00      	nop
 800b236:	bf00      	nop
 800b238:	3730      	adds	r7, #48	; 0x30
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20001948 	.word	0x20001948

0800b244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b24a:	e048      	b.n	800b2de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b24c:	4b2d      	ldr	r3, [pc, #180]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b256:	4b2b      	ldr	r3, [pc, #172]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd fd43 	bl	8008cf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d02e      	beq.n	800b2de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4413      	add	r3, r2
 800b288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d90e      	bls.n	800b2b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b29e:	4b19      	ldr	r3, [pc, #100]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	f7fd fce8 	bl	8008c7e <vListInsert>
 800b2ae:	e016      	b.n	800b2de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff fd60 	bl	800ad80 <xTimerGenericCommand>
 800b2c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10a      	bne.n	800b2de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	603b      	str	r3, [r7, #0]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1b1      	bne.n	800b24c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2ee:	4b06      	ldr	r3, [pc, #24]	; (800b308 <prvSwitchTimerLists+0xc4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a04      	ldr	r2, [pc, #16]	; (800b304 <prvSwitchTimerLists+0xc0>)
 800b2f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2f6:	4a04      	ldr	r2, [pc, #16]	; (800b308 <prvSwitchTimerLists+0xc4>)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	6013      	str	r3, [r2, #0]
}
 800b2fc:	bf00      	nop
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	20001940 	.word	0x20001940
 800b308:	20001944 	.word	0x20001944

0800b30c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b312:	f000 f967 	bl	800b5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b316:	4b15      	ldr	r3, [pc, #84]	; (800b36c <prvCheckForValidListAndQueue+0x60>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d120      	bne.n	800b360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b31e:	4814      	ldr	r0, [pc, #80]	; (800b370 <prvCheckForValidListAndQueue+0x64>)
 800b320:	f7fd fc5c 	bl	8008bdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b324:	4813      	ldr	r0, [pc, #76]	; (800b374 <prvCheckForValidListAndQueue+0x68>)
 800b326:	f7fd fc59 	bl	8008bdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <prvCheckForValidListAndQueue+0x6c>)
 800b32c:	4a10      	ldr	r2, [pc, #64]	; (800b370 <prvCheckForValidListAndQueue+0x64>)
 800b32e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b330:	4b12      	ldr	r3, [pc, #72]	; (800b37c <prvCheckForValidListAndQueue+0x70>)
 800b332:	4a10      	ldr	r2, [pc, #64]	; (800b374 <prvCheckForValidListAndQueue+0x68>)
 800b334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b336:	2300      	movs	r3, #0
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	4b11      	ldr	r3, [pc, #68]	; (800b380 <prvCheckForValidListAndQueue+0x74>)
 800b33c:	4a11      	ldr	r2, [pc, #68]	; (800b384 <prvCheckForValidListAndQueue+0x78>)
 800b33e:	2110      	movs	r1, #16
 800b340:	200a      	movs	r0, #10
 800b342:	f7fd fd67 	bl	8008e14 <xQueueGenericCreateStatic>
 800b346:	4603      	mov	r3, r0
 800b348:	4a08      	ldr	r2, [pc, #32]	; (800b36c <prvCheckForValidListAndQueue+0x60>)
 800b34a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b34c:	4b07      	ldr	r3, [pc, #28]	; (800b36c <prvCheckForValidListAndQueue+0x60>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d005      	beq.n	800b360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <prvCheckForValidListAndQueue+0x60>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	490b      	ldr	r1, [pc, #44]	; (800b388 <prvCheckForValidListAndQueue+0x7c>)
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fc78 	bl	8009c50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b360:	f000 f970 	bl	800b644 <vPortExitCritical>
}
 800b364:	bf00      	nop
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20001948 	.word	0x20001948
 800b370:	20001918 	.word	0x20001918
 800b374:	2000192c 	.word	0x2000192c
 800b378:	20001940 	.word	0x20001940
 800b37c:	20001944 	.word	0x20001944
 800b380:	200019f4 	.word	0x200019f4
 800b384:	20001954 	.word	0x20001954
 800b388:	080119b8 	.word	0x080119b8

0800b38c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3b04      	subs	r3, #4
 800b39c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f023 0201 	bic.w	r2, r3, #1
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3b04      	subs	r3, #4
 800b3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3bc:	4a0c      	ldr	r2, [pc, #48]	; (800b3f0 <pxPortInitialiseStack+0x64>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3b14      	subs	r3, #20
 800b3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3b04      	subs	r3, #4
 800b3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f06f 0202 	mvn.w	r2, #2
 800b3da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3b20      	subs	r3, #32
 800b3e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	0800b3f5 	.word	0x0800b3f5

0800b3f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvTaskExitError+0x54>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b406:	d00a      	beq.n	800b41e <prvTaskExitError+0x2a>
	__asm volatile
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	60fb      	str	r3, [r7, #12]
}
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <prvTaskExitError+0x28>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60bb      	str	r3, [r7, #8]
}
 800b430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b432:	bf00      	nop
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0fc      	beq.n	800b434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	2000001c 	.word	0x2000001c
 800b44c:	00000000 	.word	0x00000000

0800b450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <pxCurrentTCBConst2>)
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	6808      	ldr	r0, [r1, #0]
 800b456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	f380 8809 	msr	PSP, r0
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f04f 0000 	mov.w	r0, #0
 800b466:	f380 8811 	msr	BASEPRI, r0
 800b46a:	4770      	bx	lr
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst2>:
 800b470:	20001418 	.word	0x20001418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop

0800b478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b478:	4808      	ldr	r0, [pc, #32]	; (800b49c <prvPortStartFirstTask+0x24>)
 800b47a:	6800      	ldr	r0, [r0, #0]
 800b47c:	6800      	ldr	r0, [r0, #0]
 800b47e:	f380 8808 	msr	MSP, r0
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f380 8814 	msr	CONTROL, r0
 800b48a:	b662      	cpsie	i
 800b48c:	b661      	cpsie	f
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	df00      	svc	0
 800b498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b49a:	bf00      	nop
 800b49c:	e000ed08 	.word	0xe000ed08

0800b4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4a6:	4b46      	ldr	r3, [pc, #280]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a46      	ldr	r2, [pc, #280]	; (800b5c4 <xPortStartScheduler+0x124>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d10a      	bne.n	800b4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a3f      	ldr	r2, [pc, #252]	; (800b5c8 <xPortStartScheduler+0x128>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10a      	bne.n	800b4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4e6:	4b39      	ldr	r3, [pc, #228]	; (800b5cc <xPortStartScheduler+0x12c>)
 800b4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	22ff      	movs	r2, #255	; 0xff
 800b4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <xPortStartScheduler+0x130>)
 800b50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b50e:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b510:	2207      	movs	r2, #7
 800b512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b514:	e009      	b.n	800b52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b516:	4b2f      	ldr	r3, [pc, #188]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4a2d      	ldr	r2, [pc, #180]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	b2db      	uxtb	r3, r3
 800b528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b532:	2b80      	cmp	r3, #128	; 0x80
 800b534:	d0ef      	beq.n	800b516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b536:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1c3 0307 	rsb	r3, r3, #7
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d00a      	beq.n	800b558 <xPortStartScheduler+0xb8>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60bb      	str	r3, [r7, #8]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b558:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b56a:	4a1a      	ldr	r2, [pc, #104]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	b2da      	uxtb	r2, r3
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b576:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b58e:	f000 f8dd 	bl	800b74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b592:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <xPortStartScheduler+0x13c>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b598:	f000 f8fc 	bl	800b794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0f      	ldr	r2, [pc, #60]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5a8:	f7ff ff66 	bl	800b478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ac:	f7fe ff56 	bl	800a45c <vTaskSwitchContext>
	prvTaskExitError();
 800b5b0:	f7ff ff20 	bl	800b3f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	e000ed00 	.word	0xe000ed00
 800b5c4:	410fc271 	.word	0x410fc271
 800b5c8:	410fc270 	.word	0x410fc270
 800b5cc:	e000e400 	.word	0xe000e400
 800b5d0:	20001a44 	.word	0x20001a44
 800b5d4:	20001a48 	.word	0x20001a48
 800b5d8:	e000ed20 	.word	0xe000ed20
 800b5dc:	2000001c 	.word	0x2000001c
 800b5e0:	e000ef34 	.word	0xe000ef34

0800b5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	607b      	str	r3, [r7, #4]
}
 800b5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <vPortEnterCritical+0x58>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <vPortEnterCritical+0x58>)
 800b606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b608:	4b0c      	ldr	r3, [pc, #48]	; (800b63c <vPortEnterCritical+0x58>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d10f      	bne.n	800b630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <vPortEnterCritical+0x5c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <vPortEnterCritical+0x4c>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	603b      	str	r3, [r7, #0]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <vPortEnterCritical+0x4a>
	}
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	2000001c 	.word	0x2000001c
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b64a:	4b12      	ldr	r3, [pc, #72]	; (800b694 <vPortExitCritical+0x50>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <vPortExitCritical+0x24>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	607b      	str	r3, [r7, #4]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <vPortExitCritical+0x50>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <vPortExitCritical+0x50>)
 800b670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b672:	4b08      	ldr	r3, [pc, #32]	; (800b694 <vPortExitCritical+0x50>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d105      	bne.n	800b686 <vPortExitCritical+0x42>
 800b67a:	2300      	movs	r3, #0
 800b67c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	f383 8811 	msr	BASEPRI, r3
}
 800b684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	2000001c 	.word	0x2000001c
	...

0800b6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6a0:	f3ef 8009 	mrs	r0, PSP
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	4b15      	ldr	r3, [pc, #84]	; (800b700 <pxCurrentTCBConst>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	f01e 0f10 	tst.w	lr, #16
 800b6b0:	bf08      	it	eq
 800b6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	6010      	str	r0, [r2, #0]
 800b6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6c4:	f380 8811 	msr	BASEPRI, r0
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f7fe fec4 	bl	800a45c <vTaskSwitchContext>
 800b6d4:	f04f 0000 	mov.w	r0, #0
 800b6d8:	f380 8811 	msr	BASEPRI, r0
 800b6dc:	bc09      	pop	{r0, r3}
 800b6de:	6819      	ldr	r1, [r3, #0]
 800b6e0:	6808      	ldr	r0, [r1, #0]
 800b6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e6:	f01e 0f10 	tst.w	lr, #16
 800b6ea:	bf08      	it	eq
 800b6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6f0:	f380 8809 	msr	PSP, r0
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w

0800b700 <pxCurrentTCBConst>:
 800b700:	20001418 	.word	0x20001418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop

0800b708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b722:	f7fe fde1 	bl	800a2e8 <xTaskIncrementTick>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <xPortSysTickHandler+0x40>)
 800b72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f383 8811 	msr	BASEPRI, r3
}
 800b73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <vPortSetupTimerInterrupt+0x38>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <vPortSetupTimerInterrupt+0x3c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <vPortSetupTimerInterrupt+0x40>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	099b      	lsrs	r3, r3, #6
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <vPortSetupTimerInterrupt+0x44>)
 800b76a:	3b01      	subs	r3, #1
 800b76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b770:	2207      	movs	r2, #7
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	e000e010 	.word	0xe000e010
 800b784:	e000e018 	.word	0xe000e018
 800b788:	20000010 	.word	0x20000010
 800b78c:	10624dd3 	.word	0x10624dd3
 800b790:	e000e014 	.word	0xe000e014

0800b794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7a4 <vPortEnableVFP+0x10>
 800b798:	6801      	ldr	r1, [r0, #0]
 800b79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b79e:	6001      	str	r1, [r0, #0]
 800b7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7a2:	bf00      	nop
 800b7a4:	e000ed88 	.word	0xe000ed88

0800b7a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7ae:	f3ef 8305 	mrs	r3, IPSR
 800b7b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	d914      	bls.n	800b7e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ba:	4a17      	ldr	r2, [pc, #92]	; (800b818 <vPortValidateInterruptPriority+0x70>)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <vPortValidateInterruptPriority+0x74>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	7afa      	ldrb	r2, [r7, #11]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d20a      	bcs.n	800b7e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	607b      	str	r3, [r7, #4]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <vPortValidateInterruptPriority+0x78>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <vPortValidateInterruptPriority+0x7c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d90a      	bls.n	800b80a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	603b      	str	r3, [r7, #0]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <vPortValidateInterruptPriority+0x60>
	}
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	e000e3f0 	.word	0xe000e3f0
 800b81c:	20001a44 	.word	0x20001a44
 800b820:	e000ed0c 	.word	0xe000ed0c
 800b824:	20001a48 	.word	0x20001a48

0800b828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b830:	2300      	movs	r3, #0
 800b832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b834:	f7fe fc9c 	bl	800a170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b838:	4b5b      	ldr	r3, [pc, #364]	; (800b9a8 <pvPortMalloc+0x180>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d101      	bne.n	800b844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b840:	f000 f920 	bl	800ba84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b844:	4b59      	ldr	r3, [pc, #356]	; (800b9ac <pvPortMalloc+0x184>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4013      	ands	r3, r2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f040 8093 	bne.w	800b978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01d      	beq.n	800b894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b858:	2208      	movs	r2, #8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4413      	add	r3, r2
 800b85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	2b00      	cmp	r3, #0
 800b868:	d014      	beq.n	800b894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f023 0307 	bic.w	r3, r3, #7
 800b870:	3308      	adds	r3, #8
 800b872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <pvPortMalloc+0x6c>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	617b      	str	r3, [r7, #20]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d06e      	beq.n	800b978 <pvPortMalloc+0x150>
 800b89a:	4b45      	ldr	r3, [pc, #276]	; (800b9b0 <pvPortMalloc+0x188>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d869      	bhi.n	800b978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8a4:	4b43      	ldr	r3, [pc, #268]	; (800b9b4 <pvPortMalloc+0x18c>)
 800b8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8a8:	4b42      	ldr	r3, [pc, #264]	; (800b9b4 <pvPortMalloc+0x18c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ae:	e004      	b.n	800b8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d903      	bls.n	800b8cc <pvPortMalloc+0xa4>
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f1      	bne.n	800b8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8cc:	4b36      	ldr	r3, [pc, #216]	; (800b9a8 <pvPortMalloc+0x180>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d050      	beq.n	800b978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2208      	movs	r2, #8
 800b8dc:	4413      	add	r3, r2
 800b8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	2308      	movs	r3, #8
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d91f      	bls.n	800b938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <pvPortMalloc+0xf8>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	613b      	str	r3, [r7, #16]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	1ad2      	subs	r2, r2, r3
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b932:	69b8      	ldr	r0, [r7, #24]
 800b934:	f000 f908 	bl	800bb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b938:	4b1d      	ldr	r3, [pc, #116]	; (800b9b0 <pvPortMalloc+0x188>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	4a1b      	ldr	r2, [pc, #108]	; (800b9b0 <pvPortMalloc+0x188>)
 800b944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b946:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <pvPortMalloc+0x188>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	4b1b      	ldr	r3, [pc, #108]	; (800b9b8 <pvPortMalloc+0x190>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d203      	bcs.n	800b95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b952:	4b17      	ldr	r3, [pc, #92]	; (800b9b0 <pvPortMalloc+0x188>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <pvPortMalloc+0x190>)
 800b958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <pvPortMalloc+0x184>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	431a      	orrs	r2, r3
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b96e:	4b13      	ldr	r3, [pc, #76]	; (800b9bc <pvPortMalloc+0x194>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3301      	adds	r3, #1
 800b974:	4a11      	ldr	r2, [pc, #68]	; (800b9bc <pvPortMalloc+0x194>)
 800b976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b978:	f7fe fc08 	bl	800a18c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <pvPortMalloc+0x174>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	60fb      	str	r3, [r7, #12]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <pvPortMalloc+0x172>
	return pvReturn;
 800b99c:	69fb      	ldr	r3, [r7, #28]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3728      	adds	r7, #40	; 0x28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20006874 	.word	0x20006874
 800b9ac:	20006888 	.word	0x20006888
 800b9b0:	20006878 	.word	0x20006878
 800b9b4:	2000686c 	.word	0x2000686c
 800b9b8:	2000687c 	.word	0x2000687c
 800b9bc:	20006880 	.word	0x20006880

0800b9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d04d      	beq.n	800ba6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9d2:	2308      	movs	r3, #8
 800b9d4:	425b      	negs	r3, r3
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	4413      	add	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <vPortFree+0xb8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <vPortFree+0x44>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	60fb      	str	r3, [r7, #12]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <vPortFree+0x62>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	60bb      	str	r3, [r7, #8]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <vPortFree+0xb8>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01e      	beq.n	800ba6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11a      	bne.n	800ba6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <vPortFree+0xb8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	401a      	ands	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba48:	f7fe fb92 	bl	800a170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <vPortFree+0xbc>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4413      	add	r3, r2
 800ba56:	4a09      	ldr	r2, [pc, #36]	; (800ba7c <vPortFree+0xbc>)
 800ba58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f000 f874 	bl	800bb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <vPortFree+0xc0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	4a06      	ldr	r2, [pc, #24]	; (800ba80 <vPortFree+0xc0>)
 800ba68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba6a:	f7fe fb8f 	bl	800a18c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba6e:	bf00      	nop
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20006888 	.word	0x20006888
 800ba7c:	20006878 	.word	0x20006878
 800ba80:	20006884 	.word	0x20006884

0800ba84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba8a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ba8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba90:	4b27      	ldr	r3, [pc, #156]	; (800bb30 <prvHeapInit+0xac>)
 800ba92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00c      	beq.n	800bab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0307 	bic.w	r3, r3, #7
 800baaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	4a1f      	ldr	r2, [pc, #124]	; (800bb30 <prvHeapInit+0xac>)
 800bab4:	4413      	add	r3, r2
 800bab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800babc:	4a1d      	ldr	r2, [pc, #116]	; (800bb34 <prvHeapInit+0xb0>)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <prvHeapInit+0xb0>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bad0:	2208      	movs	r2, #8
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f023 0307 	bic.w	r3, r3, #7
 800bade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a15      	ldr	r2, [pc, #84]	; (800bb38 <prvHeapInit+0xb4>)
 800bae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bae6:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <prvHeapInit+0xb4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2200      	movs	r2, #0
 800baec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800baee:	4b12      	ldr	r3, [pc, #72]	; (800bb38 <prvHeapInit+0xb4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	1ad2      	subs	r2, r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvHeapInit+0xb4>)
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	4a0a      	ldr	r2, [pc, #40]	; (800bb3c <prvHeapInit+0xb8>)
 800bb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <prvHeapInit+0xbc>)
 800bb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <prvHeapInit+0xc0>)
 800bb1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	bf00      	nop
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	20001a4c 	.word	0x20001a4c
 800bb34:	2000686c 	.word	0x2000686c
 800bb38:	20006874 	.word	0x20006874
 800bb3c:	2000687c 	.word	0x2000687c
 800bb40:	20006878 	.word	0x20006878
 800bb44:	20006888 	.word	0x20006888

0800bb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb50:	4b28      	ldr	r3, [pc, #160]	; (800bbf4 <prvInsertBlockIntoFreeList+0xac>)
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	e002      	b.n	800bb5c <prvInsertBlockIntoFreeList+0x14>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d8f7      	bhi.n	800bb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d108      	bne.n	800bb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	441a      	add	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	441a      	add	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d118      	bne.n	800bbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b15      	ldr	r3, [pc, #84]	; (800bbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d00d      	beq.n	800bbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	441a      	add	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	e008      	b.n	800bbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	e003      	b.n	800bbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d002      	beq.n	800bbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	2000686c 	.word	0x2000686c
 800bbf8:	20006874 	.word	0x20006874

0800bbfc <__errno>:
 800bbfc:	4b01      	ldr	r3, [pc, #4]	; (800bc04 <__errno+0x8>)
 800bbfe:	6818      	ldr	r0, [r3, #0]
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	20000020 	.word	0x20000020

0800bc08 <__libc_init_array>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	4d0d      	ldr	r5, [pc, #52]	; (800bc40 <__libc_init_array+0x38>)
 800bc0c:	4c0d      	ldr	r4, [pc, #52]	; (800bc44 <__libc_init_array+0x3c>)
 800bc0e:	1b64      	subs	r4, r4, r5
 800bc10:	10a4      	asrs	r4, r4, #2
 800bc12:	2600      	movs	r6, #0
 800bc14:	42a6      	cmp	r6, r4
 800bc16:	d109      	bne.n	800bc2c <__libc_init_array+0x24>
 800bc18:	4d0b      	ldr	r5, [pc, #44]	; (800bc48 <__libc_init_array+0x40>)
 800bc1a:	4c0c      	ldr	r4, [pc, #48]	; (800bc4c <__libc_init_array+0x44>)
 800bc1c:	f005 fe28 	bl	8011870 <_init>
 800bc20:	1b64      	subs	r4, r4, r5
 800bc22:	10a4      	asrs	r4, r4, #2
 800bc24:	2600      	movs	r6, #0
 800bc26:	42a6      	cmp	r6, r4
 800bc28:	d105      	bne.n	800bc36 <__libc_init_array+0x2e>
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc30:	4798      	blx	r3
 800bc32:	3601      	adds	r6, #1
 800bc34:	e7ee      	b.n	800bc14 <__libc_init_array+0xc>
 800bc36:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3a:	4798      	blx	r3
 800bc3c:	3601      	adds	r6, #1
 800bc3e:	e7f2      	b.n	800bc26 <__libc_init_array+0x1e>
 800bc40:	080120ec 	.word	0x080120ec
 800bc44:	080120ec 	.word	0x080120ec
 800bc48:	080120ec 	.word	0x080120ec
 800bc4c:	080120f0 	.word	0x080120f0

0800bc50 <memcpy>:
 800bc50:	440a      	add	r2, r1
 800bc52:	4291      	cmp	r1, r2
 800bc54:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc58:	d100      	bne.n	800bc5c <memcpy+0xc>
 800bc5a:	4770      	bx	lr
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc66:	4291      	cmp	r1, r2
 800bc68:	d1f9      	bne.n	800bc5e <memcpy+0xe>
 800bc6a:	bd10      	pop	{r4, pc}

0800bc6c <memset>:
 800bc6c:	4402      	add	r2, r0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d100      	bne.n	800bc76 <memset+0xa>
 800bc74:	4770      	bx	lr
 800bc76:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7a:	e7f9      	b.n	800bc70 <memset+0x4>

0800bc7c <validate_structure>:
 800bc7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc7e:	6801      	ldr	r1, [r0, #0]
 800bc80:	293b      	cmp	r1, #59	; 0x3b
 800bc82:	4604      	mov	r4, r0
 800bc84:	d911      	bls.n	800bcaa <validate_structure+0x2e>
 800bc86:	223c      	movs	r2, #60	; 0x3c
 800bc88:	4668      	mov	r0, sp
 800bc8a:	f002 fb37 	bl	800e2fc <div>
 800bc8e:	9a01      	ldr	r2, [sp, #4]
 800bc90:	6863      	ldr	r3, [r4, #4]
 800bc92:	9900      	ldr	r1, [sp, #0]
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	440b      	add	r3, r1
 800bc98:	6063      	str	r3, [r4, #4]
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	323c      	addlt	r2, #60	; 0x3c
 800bc9e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bca2:	6022      	strge	r2, [r4, #0]
 800bca4:	6022      	strlt	r2, [r4, #0]
 800bca6:	bfb8      	it	lt
 800bca8:	6063      	strlt	r3, [r4, #4]
 800bcaa:	6861      	ldr	r1, [r4, #4]
 800bcac:	293b      	cmp	r1, #59	; 0x3b
 800bcae:	d911      	bls.n	800bcd4 <validate_structure+0x58>
 800bcb0:	223c      	movs	r2, #60	; 0x3c
 800bcb2:	4668      	mov	r0, sp
 800bcb4:	f002 fb22 	bl	800e2fc <div>
 800bcb8:	9a01      	ldr	r2, [sp, #4]
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	9900      	ldr	r1, [sp, #0]
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	440b      	add	r3, r1
 800bcc2:	60a3      	str	r3, [r4, #8]
 800bcc4:	bfbb      	ittet	lt
 800bcc6:	323c      	addlt	r2, #60	; 0x3c
 800bcc8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bccc:	6062      	strge	r2, [r4, #4]
 800bcce:	6062      	strlt	r2, [r4, #4]
 800bcd0:	bfb8      	it	lt
 800bcd2:	60a3      	strlt	r3, [r4, #8]
 800bcd4:	68a1      	ldr	r1, [r4, #8]
 800bcd6:	2917      	cmp	r1, #23
 800bcd8:	d911      	bls.n	800bcfe <validate_structure+0x82>
 800bcda:	2218      	movs	r2, #24
 800bcdc:	4668      	mov	r0, sp
 800bcde:	f002 fb0d 	bl	800e2fc <div>
 800bce2:	9a01      	ldr	r2, [sp, #4]
 800bce4:	68e3      	ldr	r3, [r4, #12]
 800bce6:	9900      	ldr	r1, [sp, #0]
 800bce8:	2a00      	cmp	r2, #0
 800bcea:	440b      	add	r3, r1
 800bcec:	60e3      	str	r3, [r4, #12]
 800bcee:	bfbb      	ittet	lt
 800bcf0:	3218      	addlt	r2, #24
 800bcf2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bcf6:	60a2      	strge	r2, [r4, #8]
 800bcf8:	60a2      	strlt	r2, [r4, #8]
 800bcfa:	bfb8      	it	lt
 800bcfc:	60e3      	strlt	r3, [r4, #12]
 800bcfe:	6921      	ldr	r1, [r4, #16]
 800bd00:	290b      	cmp	r1, #11
 800bd02:	d911      	bls.n	800bd28 <validate_structure+0xac>
 800bd04:	220c      	movs	r2, #12
 800bd06:	4668      	mov	r0, sp
 800bd08:	f002 faf8 	bl	800e2fc <div>
 800bd0c:	9a01      	ldr	r2, [sp, #4]
 800bd0e:	6963      	ldr	r3, [r4, #20]
 800bd10:	9900      	ldr	r1, [sp, #0]
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	440b      	add	r3, r1
 800bd16:	6163      	str	r3, [r4, #20]
 800bd18:	bfbb      	ittet	lt
 800bd1a:	320c      	addlt	r2, #12
 800bd1c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bd20:	6122      	strge	r2, [r4, #16]
 800bd22:	6122      	strlt	r2, [r4, #16]
 800bd24:	bfb8      	it	lt
 800bd26:	6163      	strlt	r3, [r4, #20]
 800bd28:	6963      	ldr	r3, [r4, #20]
 800bd2a:	0798      	lsls	r0, r3, #30
 800bd2c:	d120      	bne.n	800bd70 <validate_structure+0xf4>
 800bd2e:	2164      	movs	r1, #100	; 0x64
 800bd30:	fb93 f2f1 	sdiv	r2, r3, r1
 800bd34:	fb01 3212 	mls	r2, r1, r2, r3
 800bd38:	b9e2      	cbnz	r2, 800bd74 <validate_structure+0xf8>
 800bd3a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800bd3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd42:	fb93 f1f2 	sdiv	r1, r3, r2
 800bd46:	fb02 3311 	mls	r3, r2, r1, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bf14      	ite	ne
 800bd4e:	231c      	movne	r3, #28
 800bd50:	231d      	moveq	r3, #29
 800bd52:	68e2      	ldr	r2, [r4, #12]
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	dc0f      	bgt.n	800bd78 <validate_structure+0xfc>
 800bd58:	4f33      	ldr	r7, [pc, #204]	; (800be28 <validate_structure+0x1ac>)
 800bd5a:	260b      	movs	r6, #11
 800bd5c:	2064      	movs	r0, #100	; 0x64
 800bd5e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bd62:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bd66:	f1bc 0f00 	cmp.w	ip, #0
 800bd6a:	dd31      	ble.n	800bdd0 <validate_structure+0x154>
 800bd6c:	b003      	add	sp, #12
 800bd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd70:	231c      	movs	r3, #28
 800bd72:	e7ee      	b.n	800bd52 <validate_structure+0xd6>
 800bd74:	231d      	movs	r3, #29
 800bd76:	e7ec      	b.n	800bd52 <validate_structure+0xd6>
 800bd78:	4e2b      	ldr	r6, [pc, #172]	; (800be28 <validate_structure+0x1ac>)
 800bd7a:	2700      	movs	r7, #0
 800bd7c:	2064      	movs	r0, #100	; 0x64
 800bd7e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bd82:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bd86:	2a01      	cmp	r2, #1
 800bd88:	bf14      	ite	ne
 800bd8a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800bd8e:	469c      	moveq	ip, r3
 800bd90:	4561      	cmp	r1, ip
 800bd92:	ddeb      	ble.n	800bd6c <validate_structure+0xf0>
 800bd94:	3201      	adds	r2, #1
 800bd96:	eba1 010c 	sub.w	r1, r1, ip
 800bd9a:	2a0c      	cmp	r2, #12
 800bd9c:	60e1      	str	r1, [r4, #12]
 800bd9e:	6122      	str	r2, [r4, #16]
 800bda0:	d1ef      	bne.n	800bd82 <validate_structure+0x106>
 800bda2:	6963      	ldr	r3, [r4, #20]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	0791      	lsls	r1, r2, #30
 800bda8:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800bdac:	d137      	bne.n	800be1e <validate_structure+0x1a2>
 800bdae:	fb92 f1f0 	sdiv	r1, r2, r0
 800bdb2:	fb00 2211 	mls	r2, r0, r1, r2
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d133      	bne.n	800be22 <validate_structure+0x1a6>
 800bdba:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800bdbe:	fb93 f2f5 	sdiv	r2, r3, r5
 800bdc2:	fb05 3312 	mls	r3, r5, r2, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bf14      	ite	ne
 800bdca:	231c      	movne	r3, #28
 800bdcc:	231d      	moveq	r3, #29
 800bdce:	e7d8      	b.n	800bd82 <validate_structure+0x106>
 800bdd0:	6921      	ldr	r1, [r4, #16]
 800bdd2:	3901      	subs	r1, #1
 800bdd4:	6121      	str	r1, [r4, #16]
 800bdd6:	3101      	adds	r1, #1
 800bdd8:	d114      	bne.n	800be04 <validate_structure+0x188>
 800bdda:	6963      	ldr	r3, [r4, #20]
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	0791      	lsls	r1, r2, #30
 800bde0:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800bde4:	d117      	bne.n	800be16 <validate_structure+0x19a>
 800bde6:	fb92 f1f0 	sdiv	r1, r2, r0
 800bdea:	fb00 2211 	mls	r2, r0, r1, r2
 800bdee:	b9a2      	cbnz	r2, 800be1a <validate_structure+0x19e>
 800bdf0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800bdf4:	fb93 f2f5 	sdiv	r2, r3, r5
 800bdf8:	fb05 3312 	mls	r3, r5, r2, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bf14      	ite	ne
 800be00:	231c      	movne	r3, #28
 800be02:	231d      	moveq	r3, #29
 800be04:	6922      	ldr	r2, [r4, #16]
 800be06:	2a01      	cmp	r2, #1
 800be08:	bf14      	ite	ne
 800be0a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800be0e:	461a      	moveq	r2, r3
 800be10:	4462      	add	r2, ip
 800be12:	60e2      	str	r2, [r4, #12]
 800be14:	e7a5      	b.n	800bd62 <validate_structure+0xe6>
 800be16:	231c      	movs	r3, #28
 800be18:	e7f4      	b.n	800be04 <validate_structure+0x188>
 800be1a:	231d      	movs	r3, #29
 800be1c:	e7f2      	b.n	800be04 <validate_structure+0x188>
 800be1e:	231c      	movs	r3, #28
 800be20:	e7af      	b.n	800bd82 <validate_structure+0x106>
 800be22:	231d      	movs	r3, #29
 800be24:	e7ad      	b.n	800bd82 <validate_structure+0x106>
 800be26:	bf00      	nop
 800be28:	08011b30 	.word	0x08011b30

0800be2c <mktime>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	b085      	sub	sp, #20
 800be32:	4607      	mov	r7, r0
 800be34:	f003 fca6 	bl	800f784 <__gettzinfo>
 800be38:	4681      	mov	r9, r0
 800be3a:	4638      	mov	r0, r7
 800be3c:	f7ff ff1e 	bl	800bc7c <validate_structure>
 800be40:	e9d7 4000 	ldrd	r4, r0, [r7]
 800be44:	233c      	movs	r3, #60	; 0x3c
 800be46:	fb03 4400 	mla	r4, r3, r0, r4
 800be4a:	68b8      	ldr	r0, [r7, #8]
 800be4c:	4abc      	ldr	r2, [pc, #752]	; (800c140 <mktime+0x314>)
 800be4e:	697e      	ldr	r6, [r7, #20]
 800be50:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800be54:	fb03 4400 	mla	r4, r3, r0, r4
 800be58:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800be5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be60:	3d01      	subs	r5, #1
 800be62:	2b01      	cmp	r3, #1
 800be64:	4415      	add	r5, r2
 800be66:	dd11      	ble.n	800be8c <mktime+0x60>
 800be68:	07b1      	lsls	r1, r6, #30
 800be6a:	d10f      	bne.n	800be8c <mktime+0x60>
 800be6c:	2264      	movs	r2, #100	; 0x64
 800be6e:	fb96 f3f2 	sdiv	r3, r6, r2
 800be72:	fb02 6313 	mls	r3, r2, r3, r6
 800be76:	b943      	cbnz	r3, 800be8a <mktime+0x5e>
 800be78:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800be7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800be80:	fb93 f1f2 	sdiv	r1, r3, r2
 800be84:	fb02 3311 	mls	r3, r2, r1, r3
 800be88:	b903      	cbnz	r3, 800be8c <mktime+0x60>
 800be8a:	3501      	adds	r5, #1
 800be8c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800be90:	3310      	adds	r3, #16
 800be92:	f644 6220 	movw	r2, #20000	; 0x4e20
 800be96:	4293      	cmp	r3, r2
 800be98:	61fd      	str	r5, [r7, #28]
 800be9a:	f200 815d 	bhi.w	800c158 <mktime+0x32c>
 800be9e:	2e46      	cmp	r6, #70	; 0x46
 800bea0:	dd71      	ble.n	800bf86 <mktime+0x15a>
 800bea2:	2346      	movs	r3, #70	; 0x46
 800bea4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bea8:	2164      	movs	r1, #100	; 0x64
 800beaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800beae:	079a      	lsls	r2, r3, #30
 800beb0:	d163      	bne.n	800bf7a <mktime+0x14e>
 800beb2:	fb93 f2f1 	sdiv	r2, r3, r1
 800beb6:	fb01 3212 	mls	r2, r1, r2, r3
 800beba:	2a00      	cmp	r2, #0
 800bebc:	d160      	bne.n	800bf80 <mktime+0x154>
 800bebe:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800bec2:	fb92 fef0 	sdiv	lr, r2, r0
 800bec6:	fb00 221e 	mls	r2, r0, lr, r2
 800beca:	2a00      	cmp	r2, #0
 800becc:	bf14      	ite	ne
 800bece:	4662      	movne	r2, ip
 800bed0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800bed4:	3301      	adds	r3, #1
 800bed6:	429e      	cmp	r6, r3
 800bed8:	4415      	add	r5, r2
 800beda:	d1e8      	bne.n	800beae <mktime+0x82>
 800bedc:	4b99      	ldr	r3, [pc, #612]	; (800c144 <mktime+0x318>)
 800bede:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800bee2:	fbc5 4803 	smlal	r4, r8, r5, r3
 800bee6:	f002 f855 	bl	800df94 <__tz_lock>
 800beea:	f002 f85f 	bl	800dfac <_tzset_unlocked>
 800beee:	4b96      	ldr	r3, [pc, #600]	; (800c148 <mktime+0x31c>)
 800bef0:	f8d3 b000 	ldr.w	fp, [r3]
 800bef4:	f1bb 0f00 	cmp.w	fp, #0
 800bef8:	d039      	beq.n	800bf6e <mktime+0x142>
 800befa:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bf04:	f1bb 0f01 	cmp.w	fp, #1
 800bf08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800bf0c:	46da      	mov	sl, fp
 800bf0e:	bfa8      	it	ge
 800bf10:	f04f 0a01 	movge.w	sl, #1
 800bf14:	4283      	cmp	r3, r0
 800bf16:	d178      	bne.n	800c00a <mktime+0x1de>
 800bf18:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800bf1c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800bf20:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800bf24:	1a5b      	subs	r3, r3, r1
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800bf2c:	9303      	str	r3, [sp, #12]
 800bf2e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800bf32:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	ebb3 0c02 	subs.w	ip, r3, r2
 800bf3c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800bf40:	4564      	cmp	r4, ip
 800bf42:	eb78 0300 	sbcs.w	r3, r8, r0
 800bf46:	da66      	bge.n	800c016 <mktime+0x1ea>
 800bf48:	f8d9 3000 	ldr.w	r3, [r9]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d06f      	beq.n	800c030 <mktime+0x204>
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	429c      	cmp	r4, r3
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	eb78 0303 	sbcs.w	r3, r8, r3
 800bf5a:	db03      	blt.n	800bf64 <mktime+0x138>
 800bf5c:	4564      	cmp	r4, ip
 800bf5e:	eb78 0300 	sbcs.w	r3, r8, r0
 800bf62:	db6b      	blt.n	800c03c <mktime+0x210>
 800bf64:	f1bb 0f00 	cmp.w	fp, #0
 800bf68:	f04f 0b00 	mov.w	fp, #0
 800bf6c:	da6b      	bge.n	800c046 <mktime+0x21a>
 800bf6e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800bf72:	190c      	adds	r4, r1, r4
 800bf74:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800bf78:	e0a9      	b.n	800c0ce <mktime+0x2a2>
 800bf7a:	f240 126d 	movw	r2, #365	; 0x16d
 800bf7e:	e7a9      	b.n	800bed4 <mktime+0xa8>
 800bf80:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bf84:	e7a6      	b.n	800bed4 <mktime+0xa8>
 800bf86:	d0a9      	beq.n	800bedc <mktime+0xb0>
 800bf88:	2345      	movs	r3, #69	; 0x45
 800bf8a:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bf8e:	2164      	movs	r1, #100	; 0x64
 800bf90:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bf94:	e012      	b.n	800bfbc <mktime+0x190>
 800bf96:	bb62      	cbnz	r2, 800bff2 <mktime+0x1c6>
 800bf98:	fb93 f2f1 	sdiv	r2, r3, r1
 800bf9c:	fb01 3212 	mls	r2, r1, r2, r3
 800bfa0:	bb52      	cbnz	r2, 800bff8 <mktime+0x1cc>
 800bfa2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800bfa6:	fb92 fef0 	sdiv	lr, r2, r0
 800bfaa:	fb00 221e 	mls	r2, r0, lr, r2
 800bfae:	2a00      	cmp	r2, #0
 800bfb0:	bf14      	ite	ne
 800bfb2:	4662      	movne	r2, ip
 800bfb4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800bfb8:	1aad      	subs	r5, r5, r2
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	429e      	cmp	r6, r3
 800bfbe:	f003 0203 	and.w	r2, r3, #3
 800bfc2:	dbe8      	blt.n	800bf96 <mktime+0x16a>
 800bfc4:	b9da      	cbnz	r2, 800bffe <mktime+0x1d2>
 800bfc6:	2264      	movs	r2, #100	; 0x64
 800bfc8:	fb96 f3f2 	sdiv	r3, r6, r2
 800bfcc:	fb02 6313 	mls	r3, r2, r3, r6
 800bfd0:	b9c3      	cbnz	r3, 800c004 <mktime+0x1d8>
 800bfd2:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800bfd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bfda:	fb93 f1f2 	sdiv	r1, r3, r2
 800bfde:	fb02 3311 	mls	r3, r2, r1, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f240 136d 	movw	r3, #365	; 0x16d
 800bfe8:	bf08      	it	eq
 800bfea:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800bfee:	1aed      	subs	r5, r5, r3
 800bff0:	e774      	b.n	800bedc <mktime+0xb0>
 800bff2:	f240 126d 	movw	r2, #365	; 0x16d
 800bff6:	e7df      	b.n	800bfb8 <mktime+0x18c>
 800bff8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bffc:	e7dc      	b.n	800bfb8 <mktime+0x18c>
 800bffe:	f240 136d 	movw	r3, #365	; 0x16d
 800c002:	e7f4      	b.n	800bfee <mktime+0x1c2>
 800c004:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c008:	e7f1      	b.n	800bfee <mktime+0x1c2>
 800c00a:	f001 ff19 	bl	800de40 <__tzcalc_limits>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d182      	bne.n	800bf18 <mktime+0xec>
 800c012:	46d3      	mov	fp, sl
 800c014:	e050      	b.n	800c0b8 <mktime+0x28c>
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	1a5b      	subs	r3, r3, r1
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c020:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	429c      	cmp	r4, r3
 800c028:	eb78 030e 	sbcs.w	r3, r8, lr
 800c02c:	dbf1      	blt.n	800c012 <mktime+0x1e6>
 800c02e:	e78b      	b.n	800bf48 <mktime+0x11c>
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	429c      	cmp	r4, r3
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	eb78 0303 	sbcs.w	r3, r8, r3
 800c03a:	db8f      	blt.n	800bf5c <mktime+0x130>
 800c03c:	f1bb 0f00 	cmp.w	fp, #0
 800c040:	db3e      	blt.n	800c0c0 <mktime+0x294>
 800c042:	f04f 0b01 	mov.w	fp, #1
 800c046:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c04a:	f1ba 0f01 	cmp.w	sl, #1
 800c04e:	d133      	bne.n	800c0b8 <mktime+0x28c>
 800c050:	f1bb 0f00 	cmp.w	fp, #0
 800c054:	d04e      	beq.n	800c0f4 <mktime+0x2c8>
 800c056:	1a52      	subs	r2, r2, r1
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c05e:	4413      	add	r3, r2
 800c060:	1914      	adds	r4, r2, r4
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	4638      	mov	r0, r7
 800c066:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c06a:	f7ff fe07 	bl	800bc7c <validate_structure>
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	ebb2 020a 	subs.w	r2, r2, sl
 800c074:	d020      	beq.n	800c0b8 <mktime+0x28c>
 800c076:	2a01      	cmp	r2, #1
 800c078:	dc3e      	bgt.n	800c0f8 <mktime+0x2cc>
 800c07a:	1c90      	adds	r0, r2, #2
 800c07c:	bfd8      	it	le
 800c07e:	2201      	movle	r2, #1
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	18d3      	adds	r3, r2, r3
 800c084:	4415      	add	r5, r2
 800c086:	d540      	bpl.n	800c10a <mktime+0x2de>
 800c088:	1e73      	subs	r3, r6, #1
 800c08a:	0799      	lsls	r1, r3, #30
 800c08c:	d137      	bne.n	800c0fe <mktime+0x2d2>
 800c08e:	2264      	movs	r2, #100	; 0x64
 800c090:	fb93 f1f2 	sdiv	r1, r3, r2
 800c094:	fb02 3311 	mls	r3, r2, r1, r3
 800c098:	bba3      	cbnz	r3, 800c104 <mktime+0x2d8>
 800c09a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c09e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c0a2:	fb96 f2f3 	sdiv	r2, r6, r3
 800c0a6:	fb03 6612 	mls	r6, r3, r2, r6
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	f240 136d 	movw	r3, #365	; 0x16d
 800c0b0:	bf18      	it	ne
 800c0b2:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	f1bb 0f01 	cmp.w	fp, #1
 800c0bc:	f47f af57 	bne.w	800bf6e <mktime+0x142>
 800c0c0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c0c4:	190c      	adds	r4, r1, r4
 800c0c6:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c0ca:	f04f 0b01 	mov.w	fp, #1
 800c0ce:	f001 ff67 	bl	800dfa0 <__tz_unlock>
 800c0d2:	3504      	adds	r5, #4
 800c0d4:	2307      	movs	r3, #7
 800c0d6:	fb95 f3f3 	sdiv	r3, r5, r3
 800c0da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c0de:	1aed      	subs	r5, r5, r3
 800c0e0:	bf48      	it	mi
 800c0e2:	3507      	addmi	r5, #7
 800c0e4:	f8c7 b020 	str.w	fp, [r7, #32]
 800c0e8:	61bd      	str	r5, [r7, #24]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4641      	mov	r1, r8
 800c0ee:	b005      	add	sp, #20
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	1a8a      	subs	r2, r1, r2
 800c0f6:	e7af      	b.n	800c058 <mktime+0x22c>
 800c0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fc:	e7c0      	b.n	800c080 <mktime+0x254>
 800c0fe:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c102:	e7d8      	b.n	800c0b6 <mktime+0x28a>
 800c104:	f240 136d 	movw	r3, #365	; 0x16d
 800c108:	e7d5      	b.n	800c0b6 <mktime+0x28a>
 800c10a:	07b2      	lsls	r2, r6, #30
 800c10c:	d11e      	bne.n	800c14c <mktime+0x320>
 800c10e:	2164      	movs	r1, #100	; 0x64
 800c110:	fb96 f2f1 	sdiv	r2, r6, r1
 800c114:	fb01 6212 	mls	r2, r1, r2, r6
 800c118:	b9da      	cbnz	r2, 800c152 <mktime+0x326>
 800c11a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c11e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c122:	fb96 f1f2 	sdiv	r1, r6, r2
 800c126:	fb02 6611 	mls	r6, r2, r1, r6
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	f240 126d 	movw	r2, #365	; 0x16d
 800c130:	bf08      	it	eq
 800c132:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c136:	4293      	cmp	r3, r2
 800c138:	bfa8      	it	ge
 800c13a:	1a9b      	subge	r3, r3, r2
 800c13c:	e7bb      	b.n	800c0b6 <mktime+0x28a>
 800c13e:	bf00      	nop
 800c140:	08011b60 	.word	0x08011b60
 800c144:	00015180 	.word	0x00015180
 800c148:	200068a8 	.word	0x200068a8
 800c14c:	f240 126d 	movw	r2, #365	; 0x16d
 800c150:	e7f1      	b.n	800c136 <mktime+0x30a>
 800c152:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c156:	e7ee      	b.n	800c136 <mktime+0x30a>
 800c158:	f04f 34ff 	mov.w	r4, #4294967295
 800c15c:	46a0      	mov	r8, r4
 800c15e:	e7c4      	b.n	800c0ea <mktime+0x2be>

0800c160 <__cvt>:
 800c160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c164:	ec55 4b10 	vmov	r4, r5, d0
 800c168:	2d00      	cmp	r5, #0
 800c16a:	460e      	mov	r6, r1
 800c16c:	4619      	mov	r1, r3
 800c16e:	462b      	mov	r3, r5
 800c170:	bfbb      	ittet	lt
 800c172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c176:	461d      	movlt	r5, r3
 800c178:	2300      	movge	r3, #0
 800c17a:	232d      	movlt	r3, #45	; 0x2d
 800c17c:	700b      	strb	r3, [r1, #0]
 800c17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c184:	4691      	mov	r9, r2
 800c186:	f023 0820 	bic.w	r8, r3, #32
 800c18a:	bfbc      	itt	lt
 800c18c:	4622      	movlt	r2, r4
 800c18e:	4614      	movlt	r4, r2
 800c190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c194:	d005      	beq.n	800c1a2 <__cvt+0x42>
 800c196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c19a:	d100      	bne.n	800c19e <__cvt+0x3e>
 800c19c:	3601      	adds	r6, #1
 800c19e:	2102      	movs	r1, #2
 800c1a0:	e000      	b.n	800c1a4 <__cvt+0x44>
 800c1a2:	2103      	movs	r1, #3
 800c1a4:	ab03      	add	r3, sp, #12
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	ab02      	add	r3, sp, #8
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	ec45 4b10 	vmov	d0, r4, r5
 800c1b0:	4653      	mov	r3, sl
 800c1b2:	4632      	mov	r2, r6
 800c1b4:	f002 f944 	bl	800e440 <_dtoa_r>
 800c1b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c1bc:	4607      	mov	r7, r0
 800c1be:	d102      	bne.n	800c1c6 <__cvt+0x66>
 800c1c0:	f019 0f01 	tst.w	r9, #1
 800c1c4:	d022      	beq.n	800c20c <__cvt+0xac>
 800c1c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1ca:	eb07 0906 	add.w	r9, r7, r6
 800c1ce:	d110      	bne.n	800c1f2 <__cvt+0x92>
 800c1d0:	783b      	ldrb	r3, [r7, #0]
 800c1d2:	2b30      	cmp	r3, #48	; 0x30
 800c1d4:	d10a      	bne.n	800c1ec <__cvt+0x8c>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4620      	mov	r0, r4
 800c1dc:	4629      	mov	r1, r5
 800c1de:	f7f4 fc83 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1e2:	b918      	cbnz	r0, 800c1ec <__cvt+0x8c>
 800c1e4:	f1c6 0601 	rsb	r6, r6, #1
 800c1e8:	f8ca 6000 	str.w	r6, [sl]
 800c1ec:	f8da 3000 	ldr.w	r3, [sl]
 800c1f0:	4499      	add	r9, r3
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 fc75 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1fe:	b108      	cbz	r0, 800c204 <__cvt+0xa4>
 800c200:	f8cd 900c 	str.w	r9, [sp, #12]
 800c204:	2230      	movs	r2, #48	; 0x30
 800c206:	9b03      	ldr	r3, [sp, #12]
 800c208:	454b      	cmp	r3, r9
 800c20a:	d307      	bcc.n	800c21c <__cvt+0xbc>
 800c20c:	9b03      	ldr	r3, [sp, #12]
 800c20e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c210:	1bdb      	subs	r3, r3, r7
 800c212:	4638      	mov	r0, r7
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	b004      	add	sp, #16
 800c218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21c:	1c59      	adds	r1, r3, #1
 800c21e:	9103      	str	r1, [sp, #12]
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e7f0      	b.n	800c206 <__cvt+0xa6>

0800c224 <__exponent>:
 800c224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c226:	4603      	mov	r3, r0
 800c228:	2900      	cmp	r1, #0
 800c22a:	bfb8      	it	lt
 800c22c:	4249      	neglt	r1, r1
 800c22e:	f803 2b02 	strb.w	r2, [r3], #2
 800c232:	bfb4      	ite	lt
 800c234:	222d      	movlt	r2, #45	; 0x2d
 800c236:	222b      	movge	r2, #43	; 0x2b
 800c238:	2909      	cmp	r1, #9
 800c23a:	7042      	strb	r2, [r0, #1]
 800c23c:	dd2a      	ble.n	800c294 <__exponent+0x70>
 800c23e:	f10d 0407 	add.w	r4, sp, #7
 800c242:	46a4      	mov	ip, r4
 800c244:	270a      	movs	r7, #10
 800c246:	46a6      	mov	lr, r4
 800c248:	460a      	mov	r2, r1
 800c24a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c24e:	fb07 1516 	mls	r5, r7, r6, r1
 800c252:	3530      	adds	r5, #48	; 0x30
 800c254:	2a63      	cmp	r2, #99	; 0x63
 800c256:	f104 34ff 	add.w	r4, r4, #4294967295
 800c25a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c25e:	4631      	mov	r1, r6
 800c260:	dcf1      	bgt.n	800c246 <__exponent+0x22>
 800c262:	3130      	adds	r1, #48	; 0x30
 800c264:	f1ae 0502 	sub.w	r5, lr, #2
 800c268:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c26c:	1c44      	adds	r4, r0, #1
 800c26e:	4629      	mov	r1, r5
 800c270:	4561      	cmp	r1, ip
 800c272:	d30a      	bcc.n	800c28a <__exponent+0x66>
 800c274:	f10d 0209 	add.w	r2, sp, #9
 800c278:	eba2 020e 	sub.w	r2, r2, lr
 800c27c:	4565      	cmp	r5, ip
 800c27e:	bf88      	it	hi
 800c280:	2200      	movhi	r2, #0
 800c282:	4413      	add	r3, r2
 800c284:	1a18      	subs	r0, r3, r0
 800c286:	b003      	add	sp, #12
 800c288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c28e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c292:	e7ed      	b.n	800c270 <__exponent+0x4c>
 800c294:	2330      	movs	r3, #48	; 0x30
 800c296:	3130      	adds	r1, #48	; 0x30
 800c298:	7083      	strb	r3, [r0, #2]
 800c29a:	70c1      	strb	r1, [r0, #3]
 800c29c:	1d03      	adds	r3, r0, #4
 800c29e:	e7f1      	b.n	800c284 <__exponent+0x60>

0800c2a0 <_printf_float>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	ed2d 8b02 	vpush	{d8}
 800c2a8:	b08d      	sub	sp, #52	; 0x34
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2b0:	4616      	mov	r6, r2
 800c2b2:	461f      	mov	r7, r3
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	f003 fa69 	bl	800f78c <_localeconv_r>
 800c2ba:	f8d0 a000 	ldr.w	sl, [r0]
 800c2be:	4650      	mov	r0, sl
 800c2c0:	f7f3 ff90 	bl	80001e4 <strlen>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	9305      	str	r3, [sp, #20]
 800c2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c2d4:	3307      	adds	r3, #7
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	f103 0208 	add.w	r2, r3, #8
 800c2de:	f8c8 2000 	str.w	r2, [r8]
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c2ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c2ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2f2:	9307      	str	r3, [sp, #28]
 800c2f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2f8:	ee08 0a10 	vmov	s16, r0
 800c2fc:	4b9f      	ldr	r3, [pc, #636]	; (800c57c <_printf_float+0x2dc>)
 800c2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c302:	f04f 32ff 	mov.w	r2, #4294967295
 800c306:	f7f4 fc21 	bl	8000b4c <__aeabi_dcmpun>
 800c30a:	bb88      	cbnz	r0, 800c370 <_printf_float+0xd0>
 800c30c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c310:	4b9a      	ldr	r3, [pc, #616]	; (800c57c <_printf_float+0x2dc>)
 800c312:	f04f 32ff 	mov.w	r2, #4294967295
 800c316:	f7f4 fbfb 	bl	8000b10 <__aeabi_dcmple>
 800c31a:	bb48      	cbnz	r0, 800c370 <_printf_float+0xd0>
 800c31c:	2200      	movs	r2, #0
 800c31e:	2300      	movs	r3, #0
 800c320:	4640      	mov	r0, r8
 800c322:	4649      	mov	r1, r9
 800c324:	f7f4 fbea 	bl	8000afc <__aeabi_dcmplt>
 800c328:	b110      	cbz	r0, 800c330 <_printf_float+0x90>
 800c32a:	232d      	movs	r3, #45	; 0x2d
 800c32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c330:	4b93      	ldr	r3, [pc, #588]	; (800c580 <_printf_float+0x2e0>)
 800c332:	4894      	ldr	r0, [pc, #592]	; (800c584 <_printf_float+0x2e4>)
 800c334:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c338:	bf94      	ite	ls
 800c33a:	4698      	movls	r8, r3
 800c33c:	4680      	movhi	r8, r0
 800c33e:	2303      	movs	r3, #3
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	9b05      	ldr	r3, [sp, #20]
 800c344:	f023 0204 	bic.w	r2, r3, #4
 800c348:	6022      	str	r2, [r4, #0]
 800c34a:	f04f 0900 	mov.w	r9, #0
 800c34e:	9700      	str	r7, [sp, #0]
 800c350:	4633      	mov	r3, r6
 800c352:	aa0b      	add	r2, sp, #44	; 0x2c
 800c354:	4621      	mov	r1, r4
 800c356:	4628      	mov	r0, r5
 800c358:	f000 f9d8 	bl	800c70c <_printf_common>
 800c35c:	3001      	adds	r0, #1
 800c35e:	f040 8090 	bne.w	800c482 <_printf_float+0x1e2>
 800c362:	f04f 30ff 	mov.w	r0, #4294967295
 800c366:	b00d      	add	sp, #52	; 0x34
 800c368:	ecbd 8b02 	vpop	{d8}
 800c36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c370:	4642      	mov	r2, r8
 800c372:	464b      	mov	r3, r9
 800c374:	4640      	mov	r0, r8
 800c376:	4649      	mov	r1, r9
 800c378:	f7f4 fbe8 	bl	8000b4c <__aeabi_dcmpun>
 800c37c:	b140      	cbz	r0, 800c390 <_printf_float+0xf0>
 800c37e:	464b      	mov	r3, r9
 800c380:	2b00      	cmp	r3, #0
 800c382:	bfbc      	itt	lt
 800c384:	232d      	movlt	r3, #45	; 0x2d
 800c386:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c38a:	487f      	ldr	r0, [pc, #508]	; (800c588 <_printf_float+0x2e8>)
 800c38c:	4b7f      	ldr	r3, [pc, #508]	; (800c58c <_printf_float+0x2ec>)
 800c38e:	e7d1      	b.n	800c334 <_printf_float+0x94>
 800c390:	6863      	ldr	r3, [r4, #4]
 800c392:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c396:	9206      	str	r2, [sp, #24]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	d13f      	bne.n	800c41c <_printf_float+0x17c>
 800c39c:	2306      	movs	r3, #6
 800c39e:	6063      	str	r3, [r4, #4]
 800c3a0:	9b05      	ldr	r3, [sp, #20]
 800c3a2:	6861      	ldr	r1, [r4, #4]
 800c3a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9303      	str	r3, [sp, #12]
 800c3ac:	ab0a      	add	r3, sp, #40	; 0x28
 800c3ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c3b2:	ab09      	add	r3, sp, #36	; 0x24
 800c3b4:	ec49 8b10 	vmov	d0, r8, r9
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	6022      	str	r2, [r4, #0]
 800c3bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7ff fecd 	bl	800c160 <__cvt>
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3ca:	2b47      	cmp	r3, #71	; 0x47
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	d108      	bne.n	800c3e2 <_printf_float+0x142>
 800c3d0:	1cc8      	adds	r0, r1, #3
 800c3d2:	db02      	blt.n	800c3da <_printf_float+0x13a>
 800c3d4:	6863      	ldr	r3, [r4, #4]
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	dd41      	ble.n	800c45e <_printf_float+0x1be>
 800c3da:	f1ab 0b02 	sub.w	fp, fp, #2
 800c3de:	fa5f fb8b 	uxtb.w	fp, fp
 800c3e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3e6:	d820      	bhi.n	800c42a <_printf_float+0x18a>
 800c3e8:	3901      	subs	r1, #1
 800c3ea:	465a      	mov	r2, fp
 800c3ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3f0:	9109      	str	r1, [sp, #36]	; 0x24
 800c3f2:	f7ff ff17 	bl	800c224 <__exponent>
 800c3f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3f8:	1813      	adds	r3, r2, r0
 800c3fa:	2a01      	cmp	r2, #1
 800c3fc:	4681      	mov	r9, r0
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	dc02      	bgt.n	800c408 <_printf_float+0x168>
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	07d2      	lsls	r2, r2, #31
 800c406:	d501      	bpl.n	800c40c <_printf_float+0x16c>
 800c408:	3301      	adds	r3, #1
 800c40a:	6123      	str	r3, [r4, #16]
 800c40c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c410:	2b00      	cmp	r3, #0
 800c412:	d09c      	beq.n	800c34e <_printf_float+0xae>
 800c414:	232d      	movs	r3, #45	; 0x2d
 800c416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c41a:	e798      	b.n	800c34e <_printf_float+0xae>
 800c41c:	9a06      	ldr	r2, [sp, #24]
 800c41e:	2a47      	cmp	r2, #71	; 0x47
 800c420:	d1be      	bne.n	800c3a0 <_printf_float+0x100>
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1bc      	bne.n	800c3a0 <_printf_float+0x100>
 800c426:	2301      	movs	r3, #1
 800c428:	e7b9      	b.n	800c39e <_printf_float+0xfe>
 800c42a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c42e:	d118      	bne.n	800c462 <_printf_float+0x1c2>
 800c430:	2900      	cmp	r1, #0
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	dd0b      	ble.n	800c44e <_printf_float+0x1ae>
 800c436:	6121      	str	r1, [r4, #16]
 800c438:	b913      	cbnz	r3, 800c440 <_printf_float+0x1a0>
 800c43a:	6822      	ldr	r2, [r4, #0]
 800c43c:	07d0      	lsls	r0, r2, #31
 800c43e:	d502      	bpl.n	800c446 <_printf_float+0x1a6>
 800c440:	3301      	adds	r3, #1
 800c442:	440b      	add	r3, r1
 800c444:	6123      	str	r3, [r4, #16]
 800c446:	65a1      	str	r1, [r4, #88]	; 0x58
 800c448:	f04f 0900 	mov.w	r9, #0
 800c44c:	e7de      	b.n	800c40c <_printf_float+0x16c>
 800c44e:	b913      	cbnz	r3, 800c456 <_printf_float+0x1b6>
 800c450:	6822      	ldr	r2, [r4, #0]
 800c452:	07d2      	lsls	r2, r2, #31
 800c454:	d501      	bpl.n	800c45a <_printf_float+0x1ba>
 800c456:	3302      	adds	r3, #2
 800c458:	e7f4      	b.n	800c444 <_printf_float+0x1a4>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f2      	b.n	800c444 <_printf_float+0x1a4>
 800c45e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c464:	4299      	cmp	r1, r3
 800c466:	db05      	blt.n	800c474 <_printf_float+0x1d4>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	6121      	str	r1, [r4, #16]
 800c46c:	07d8      	lsls	r0, r3, #31
 800c46e:	d5ea      	bpl.n	800c446 <_printf_float+0x1a6>
 800c470:	1c4b      	adds	r3, r1, #1
 800c472:	e7e7      	b.n	800c444 <_printf_float+0x1a4>
 800c474:	2900      	cmp	r1, #0
 800c476:	bfd4      	ite	le
 800c478:	f1c1 0202 	rsble	r2, r1, #2
 800c47c:	2201      	movgt	r2, #1
 800c47e:	4413      	add	r3, r2
 800c480:	e7e0      	b.n	800c444 <_printf_float+0x1a4>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	055a      	lsls	r2, r3, #21
 800c486:	d407      	bmi.n	800c498 <_printf_float+0x1f8>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	4642      	mov	r2, r8
 800c48c:	4631      	mov	r1, r6
 800c48e:	4628      	mov	r0, r5
 800c490:	47b8      	blx	r7
 800c492:	3001      	adds	r0, #1
 800c494:	d12c      	bne.n	800c4f0 <_printf_float+0x250>
 800c496:	e764      	b.n	800c362 <_printf_float+0xc2>
 800c498:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c49c:	f240 80e0 	bls.w	800c660 <_printf_float+0x3c0>
 800c4a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f7f4 fb1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d034      	beq.n	800c51a <_printf_float+0x27a>
 800c4b0:	4a37      	ldr	r2, [pc, #220]	; (800c590 <_printf_float+0x2f0>)
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	47b8      	blx	r7
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	f43f af51 	beq.w	800c362 <_printf_float+0xc2>
 800c4c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	db02      	blt.n	800c4ce <_printf_float+0x22e>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	07d8      	lsls	r0, r3, #31
 800c4cc:	d510      	bpl.n	800c4f0 <_printf_float+0x250>
 800c4ce:	ee18 3a10 	vmov	r3, s16
 800c4d2:	4652      	mov	r2, sl
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	f43f af41 	beq.w	800c362 <_printf_float+0xc2>
 800c4e0:	f04f 0800 	mov.w	r8, #0
 800c4e4:	f104 091a 	add.w	r9, r4, #26
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4543      	cmp	r3, r8
 800c4ee:	dc09      	bgt.n	800c504 <_printf_float+0x264>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	079b      	lsls	r3, r3, #30
 800c4f4:	f100 8105 	bmi.w	800c702 <_printf_float+0x462>
 800c4f8:	68e0      	ldr	r0, [r4, #12]
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4fc:	4298      	cmp	r0, r3
 800c4fe:	bfb8      	it	lt
 800c500:	4618      	movlt	r0, r3
 800c502:	e730      	b.n	800c366 <_printf_float+0xc6>
 800c504:	2301      	movs	r3, #1
 800c506:	464a      	mov	r2, r9
 800c508:	4631      	mov	r1, r6
 800c50a:	4628      	mov	r0, r5
 800c50c:	47b8      	blx	r7
 800c50e:	3001      	adds	r0, #1
 800c510:	f43f af27 	beq.w	800c362 <_printf_float+0xc2>
 800c514:	f108 0801 	add.w	r8, r8, #1
 800c518:	e7e6      	b.n	800c4e8 <_printf_float+0x248>
 800c51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dc39      	bgt.n	800c594 <_printf_float+0x2f4>
 800c520:	4a1b      	ldr	r2, [pc, #108]	; (800c590 <_printf_float+0x2f0>)
 800c522:	2301      	movs	r3, #1
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	47b8      	blx	r7
 800c52a:	3001      	adds	r0, #1
 800c52c:	f43f af19 	beq.w	800c362 <_printf_float+0xc2>
 800c530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c534:	4313      	orrs	r3, r2
 800c536:	d102      	bne.n	800c53e <_printf_float+0x29e>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	07d9      	lsls	r1, r3, #31
 800c53c:	d5d8      	bpl.n	800c4f0 <_printf_float+0x250>
 800c53e:	ee18 3a10 	vmov	r3, s16
 800c542:	4652      	mov	r2, sl
 800c544:	4631      	mov	r1, r6
 800c546:	4628      	mov	r0, r5
 800c548:	47b8      	blx	r7
 800c54a:	3001      	adds	r0, #1
 800c54c:	f43f af09 	beq.w	800c362 <_printf_float+0xc2>
 800c550:	f04f 0900 	mov.w	r9, #0
 800c554:	f104 0a1a 	add.w	sl, r4, #26
 800c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55a:	425b      	negs	r3, r3
 800c55c:	454b      	cmp	r3, r9
 800c55e:	dc01      	bgt.n	800c564 <_printf_float+0x2c4>
 800c560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c562:	e792      	b.n	800c48a <_printf_float+0x1ea>
 800c564:	2301      	movs	r3, #1
 800c566:	4652      	mov	r2, sl
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f aef7 	beq.w	800c362 <_printf_float+0xc2>
 800c574:	f109 0901 	add.w	r9, r9, #1
 800c578:	e7ee      	b.n	800c558 <_printf_float+0x2b8>
 800c57a:	bf00      	nop
 800c57c:	7fefffff 	.word	0x7fefffff
 800c580:	08011b90 	.word	0x08011b90
 800c584:	08011b94 	.word	0x08011b94
 800c588:	08011b9c 	.word	0x08011b9c
 800c58c:	08011b98 	.word	0x08011b98
 800c590:	08012031 	.word	0x08012031
 800c594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c598:	429a      	cmp	r2, r3
 800c59a:	bfa8      	it	ge
 800c59c:	461a      	movge	r2, r3
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	4691      	mov	r9, r2
 800c5a2:	dc37      	bgt.n	800c614 <_printf_float+0x374>
 800c5a4:	f04f 0b00 	mov.w	fp, #0
 800c5a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5ac:	f104 021a 	add.w	r2, r4, #26
 800c5b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5b2:	9305      	str	r3, [sp, #20]
 800c5b4:	eba3 0309 	sub.w	r3, r3, r9
 800c5b8:	455b      	cmp	r3, fp
 800c5ba:	dc33      	bgt.n	800c624 <_printf_float+0x384>
 800c5bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	db3b      	blt.n	800c63c <_printf_float+0x39c>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	07da      	lsls	r2, r3, #31
 800c5c8:	d438      	bmi.n	800c63c <_printf_float+0x39c>
 800c5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5cc:	9a05      	ldr	r2, [sp, #20]
 800c5ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5d0:	1a9a      	subs	r2, r3, r2
 800c5d2:	eba3 0901 	sub.w	r9, r3, r1
 800c5d6:	4591      	cmp	r9, r2
 800c5d8:	bfa8      	it	ge
 800c5da:	4691      	movge	r9, r2
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	dc35      	bgt.n	800c64e <_printf_float+0x3ae>
 800c5e2:	f04f 0800 	mov.w	r8, #0
 800c5e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5ea:	f104 0a1a 	add.w	sl, r4, #26
 800c5ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5f2:	1a9b      	subs	r3, r3, r2
 800c5f4:	eba3 0309 	sub.w	r3, r3, r9
 800c5f8:	4543      	cmp	r3, r8
 800c5fa:	f77f af79 	ble.w	800c4f0 <_printf_float+0x250>
 800c5fe:	2301      	movs	r3, #1
 800c600:	4652      	mov	r2, sl
 800c602:	4631      	mov	r1, r6
 800c604:	4628      	mov	r0, r5
 800c606:	47b8      	blx	r7
 800c608:	3001      	adds	r0, #1
 800c60a:	f43f aeaa 	beq.w	800c362 <_printf_float+0xc2>
 800c60e:	f108 0801 	add.w	r8, r8, #1
 800c612:	e7ec      	b.n	800c5ee <_printf_float+0x34e>
 800c614:	4613      	mov	r3, r2
 800c616:	4631      	mov	r1, r6
 800c618:	4642      	mov	r2, r8
 800c61a:	4628      	mov	r0, r5
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	d1c0      	bne.n	800c5a4 <_printf_float+0x304>
 800c622:	e69e      	b.n	800c362 <_printf_float+0xc2>
 800c624:	2301      	movs	r3, #1
 800c626:	4631      	mov	r1, r6
 800c628:	4628      	mov	r0, r5
 800c62a:	9205      	str	r2, [sp, #20]
 800c62c:	47b8      	blx	r7
 800c62e:	3001      	adds	r0, #1
 800c630:	f43f ae97 	beq.w	800c362 <_printf_float+0xc2>
 800c634:	9a05      	ldr	r2, [sp, #20]
 800c636:	f10b 0b01 	add.w	fp, fp, #1
 800c63a:	e7b9      	b.n	800c5b0 <_printf_float+0x310>
 800c63c:	ee18 3a10 	vmov	r3, s16
 800c640:	4652      	mov	r2, sl
 800c642:	4631      	mov	r1, r6
 800c644:	4628      	mov	r0, r5
 800c646:	47b8      	blx	r7
 800c648:	3001      	adds	r0, #1
 800c64a:	d1be      	bne.n	800c5ca <_printf_float+0x32a>
 800c64c:	e689      	b.n	800c362 <_printf_float+0xc2>
 800c64e:	9a05      	ldr	r2, [sp, #20]
 800c650:	464b      	mov	r3, r9
 800c652:	4442      	add	r2, r8
 800c654:	4631      	mov	r1, r6
 800c656:	4628      	mov	r0, r5
 800c658:	47b8      	blx	r7
 800c65a:	3001      	adds	r0, #1
 800c65c:	d1c1      	bne.n	800c5e2 <_printf_float+0x342>
 800c65e:	e680      	b.n	800c362 <_printf_float+0xc2>
 800c660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c662:	2a01      	cmp	r2, #1
 800c664:	dc01      	bgt.n	800c66a <_printf_float+0x3ca>
 800c666:	07db      	lsls	r3, r3, #31
 800c668:	d538      	bpl.n	800c6dc <_printf_float+0x43c>
 800c66a:	2301      	movs	r3, #1
 800c66c:	4642      	mov	r2, r8
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	47b8      	blx	r7
 800c674:	3001      	adds	r0, #1
 800c676:	f43f ae74 	beq.w	800c362 <_printf_float+0xc2>
 800c67a:	ee18 3a10 	vmov	r3, s16
 800c67e:	4652      	mov	r2, sl
 800c680:	4631      	mov	r1, r6
 800c682:	4628      	mov	r0, r5
 800c684:	47b8      	blx	r7
 800c686:	3001      	adds	r0, #1
 800c688:	f43f ae6b 	beq.w	800c362 <_printf_float+0xc2>
 800c68c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c690:	2200      	movs	r2, #0
 800c692:	2300      	movs	r3, #0
 800c694:	f7f4 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 800c698:	b9d8      	cbnz	r0, 800c6d2 <_printf_float+0x432>
 800c69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c69c:	f108 0201 	add.w	r2, r8, #1
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	47b8      	blx	r7
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d10e      	bne.n	800c6ca <_printf_float+0x42a>
 800c6ac:	e659      	b.n	800c362 <_printf_float+0xc2>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b8      	blx	r7
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f43f ae52 	beq.w	800c362 <_printf_float+0xc2>
 800c6be:	f108 0801 	add.w	r8, r8, #1
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	4543      	cmp	r3, r8
 800c6c8:	dcf1      	bgt.n	800c6ae <_printf_float+0x40e>
 800c6ca:	464b      	mov	r3, r9
 800c6cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c6d0:	e6dc      	b.n	800c48c <_printf_float+0x1ec>
 800c6d2:	f04f 0800 	mov.w	r8, #0
 800c6d6:	f104 0a1a 	add.w	sl, r4, #26
 800c6da:	e7f2      	b.n	800c6c2 <_printf_float+0x422>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4642      	mov	r2, r8
 800c6e0:	e7df      	b.n	800c6a2 <_printf_float+0x402>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	464a      	mov	r2, r9
 800c6e6:	4631      	mov	r1, r6
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	47b8      	blx	r7
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	f43f ae38 	beq.w	800c362 <_printf_float+0xc2>
 800c6f2:	f108 0801 	add.w	r8, r8, #1
 800c6f6:	68e3      	ldr	r3, [r4, #12]
 800c6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6fa:	1a5b      	subs	r3, r3, r1
 800c6fc:	4543      	cmp	r3, r8
 800c6fe:	dcf0      	bgt.n	800c6e2 <_printf_float+0x442>
 800c700:	e6fa      	b.n	800c4f8 <_printf_float+0x258>
 800c702:	f04f 0800 	mov.w	r8, #0
 800c706:	f104 0919 	add.w	r9, r4, #25
 800c70a:	e7f4      	b.n	800c6f6 <_printf_float+0x456>

0800c70c <_printf_common>:
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c710:	4616      	mov	r6, r2
 800c712:	4699      	mov	r9, r3
 800c714:	688a      	ldr	r2, [r1, #8]
 800c716:	690b      	ldr	r3, [r1, #16]
 800c718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c71c:	4293      	cmp	r3, r2
 800c71e:	bfb8      	it	lt
 800c720:	4613      	movlt	r3, r2
 800c722:	6033      	str	r3, [r6, #0]
 800c724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c728:	4607      	mov	r7, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	b10a      	cbz	r2, 800c732 <_printf_common+0x26>
 800c72e:	3301      	adds	r3, #1
 800c730:	6033      	str	r3, [r6, #0]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	0699      	lsls	r1, r3, #26
 800c736:	bf42      	ittt	mi
 800c738:	6833      	ldrmi	r3, [r6, #0]
 800c73a:	3302      	addmi	r3, #2
 800c73c:	6033      	strmi	r3, [r6, #0]
 800c73e:	6825      	ldr	r5, [r4, #0]
 800c740:	f015 0506 	ands.w	r5, r5, #6
 800c744:	d106      	bne.n	800c754 <_printf_common+0x48>
 800c746:	f104 0a19 	add.w	sl, r4, #25
 800c74a:	68e3      	ldr	r3, [r4, #12]
 800c74c:	6832      	ldr	r2, [r6, #0]
 800c74e:	1a9b      	subs	r3, r3, r2
 800c750:	42ab      	cmp	r3, r5
 800c752:	dc26      	bgt.n	800c7a2 <_printf_common+0x96>
 800c754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c758:	1e13      	subs	r3, r2, #0
 800c75a:	6822      	ldr	r2, [r4, #0]
 800c75c:	bf18      	it	ne
 800c75e:	2301      	movne	r3, #1
 800c760:	0692      	lsls	r2, r2, #26
 800c762:	d42b      	bmi.n	800c7bc <_printf_common+0xb0>
 800c764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c768:	4649      	mov	r1, r9
 800c76a:	4638      	mov	r0, r7
 800c76c:	47c0      	blx	r8
 800c76e:	3001      	adds	r0, #1
 800c770:	d01e      	beq.n	800c7b0 <_printf_common+0xa4>
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	68e5      	ldr	r5, [r4, #12]
 800c776:	6832      	ldr	r2, [r6, #0]
 800c778:	f003 0306 	and.w	r3, r3, #6
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	bf08      	it	eq
 800c780:	1aad      	subeq	r5, r5, r2
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	6922      	ldr	r2, [r4, #16]
 800c786:	bf0c      	ite	eq
 800c788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c78c:	2500      	movne	r5, #0
 800c78e:	4293      	cmp	r3, r2
 800c790:	bfc4      	itt	gt
 800c792:	1a9b      	subgt	r3, r3, r2
 800c794:	18ed      	addgt	r5, r5, r3
 800c796:	2600      	movs	r6, #0
 800c798:	341a      	adds	r4, #26
 800c79a:	42b5      	cmp	r5, r6
 800c79c:	d11a      	bne.n	800c7d4 <_printf_common+0xc8>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	e008      	b.n	800c7b4 <_printf_common+0xa8>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	47c0      	blx	r8
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d103      	bne.n	800c7b8 <_printf_common+0xac>
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b8:	3501      	adds	r5, #1
 800c7ba:	e7c6      	b.n	800c74a <_printf_common+0x3e>
 800c7bc:	18e1      	adds	r1, r4, r3
 800c7be:	1c5a      	adds	r2, r3, #1
 800c7c0:	2030      	movs	r0, #48	; 0x30
 800c7c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7c6:	4422      	add	r2, r4
 800c7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7d0:	3302      	adds	r3, #2
 800c7d2:	e7c7      	b.n	800c764 <_printf_common+0x58>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	4649      	mov	r1, r9
 800c7da:	4638      	mov	r0, r7
 800c7dc:	47c0      	blx	r8
 800c7de:	3001      	adds	r0, #1
 800c7e0:	d0e6      	beq.n	800c7b0 <_printf_common+0xa4>
 800c7e2:	3601      	adds	r6, #1
 800c7e4:	e7d9      	b.n	800c79a <_printf_common+0x8e>
	...

0800c7e8 <_printf_i>:
 800c7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	7e0f      	ldrb	r7, [r1, #24]
 800c7ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7f0:	2f78      	cmp	r7, #120	; 0x78
 800c7f2:	4691      	mov	r9, r2
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	469a      	mov	sl, r3
 800c7fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7fe:	d807      	bhi.n	800c810 <_printf_i+0x28>
 800c800:	2f62      	cmp	r7, #98	; 0x62
 800c802:	d80a      	bhi.n	800c81a <_printf_i+0x32>
 800c804:	2f00      	cmp	r7, #0
 800c806:	f000 80d8 	beq.w	800c9ba <_printf_i+0x1d2>
 800c80a:	2f58      	cmp	r7, #88	; 0x58
 800c80c:	f000 80a3 	beq.w	800c956 <_printf_i+0x16e>
 800c810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c818:	e03a      	b.n	800c890 <_printf_i+0xa8>
 800c81a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c81e:	2b15      	cmp	r3, #21
 800c820:	d8f6      	bhi.n	800c810 <_printf_i+0x28>
 800c822:	a101      	add	r1, pc, #4	; (adr r1, 800c828 <_printf_i+0x40>)
 800c824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c828:	0800c881 	.word	0x0800c881
 800c82c:	0800c895 	.word	0x0800c895
 800c830:	0800c811 	.word	0x0800c811
 800c834:	0800c811 	.word	0x0800c811
 800c838:	0800c811 	.word	0x0800c811
 800c83c:	0800c811 	.word	0x0800c811
 800c840:	0800c895 	.word	0x0800c895
 800c844:	0800c811 	.word	0x0800c811
 800c848:	0800c811 	.word	0x0800c811
 800c84c:	0800c811 	.word	0x0800c811
 800c850:	0800c811 	.word	0x0800c811
 800c854:	0800c9a1 	.word	0x0800c9a1
 800c858:	0800c8c5 	.word	0x0800c8c5
 800c85c:	0800c983 	.word	0x0800c983
 800c860:	0800c811 	.word	0x0800c811
 800c864:	0800c811 	.word	0x0800c811
 800c868:	0800c9c3 	.word	0x0800c9c3
 800c86c:	0800c811 	.word	0x0800c811
 800c870:	0800c8c5 	.word	0x0800c8c5
 800c874:	0800c811 	.word	0x0800c811
 800c878:	0800c811 	.word	0x0800c811
 800c87c:	0800c98b 	.word	0x0800c98b
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	1d1a      	adds	r2, r3, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	602a      	str	r2, [r5, #0]
 800c888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c88c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c890:	2301      	movs	r3, #1
 800c892:	e0a3      	b.n	800c9dc <_printf_i+0x1f4>
 800c894:	6820      	ldr	r0, [r4, #0]
 800c896:	6829      	ldr	r1, [r5, #0]
 800c898:	0606      	lsls	r6, r0, #24
 800c89a:	f101 0304 	add.w	r3, r1, #4
 800c89e:	d50a      	bpl.n	800c8b6 <_printf_i+0xce>
 800c8a0:	680e      	ldr	r6, [r1, #0]
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	2e00      	cmp	r6, #0
 800c8a6:	da03      	bge.n	800c8b0 <_printf_i+0xc8>
 800c8a8:	232d      	movs	r3, #45	; 0x2d
 800c8aa:	4276      	negs	r6, r6
 800c8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8b0:	485e      	ldr	r0, [pc, #376]	; (800ca2c <_printf_i+0x244>)
 800c8b2:	230a      	movs	r3, #10
 800c8b4:	e019      	b.n	800c8ea <_printf_i+0x102>
 800c8b6:	680e      	ldr	r6, [r1, #0]
 800c8b8:	602b      	str	r3, [r5, #0]
 800c8ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8be:	bf18      	it	ne
 800c8c0:	b236      	sxthne	r6, r6
 800c8c2:	e7ef      	b.n	800c8a4 <_printf_i+0xbc>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	6820      	ldr	r0, [r4, #0]
 800c8c8:	1d19      	adds	r1, r3, #4
 800c8ca:	6029      	str	r1, [r5, #0]
 800c8cc:	0601      	lsls	r1, r0, #24
 800c8ce:	d501      	bpl.n	800c8d4 <_printf_i+0xec>
 800c8d0:	681e      	ldr	r6, [r3, #0]
 800c8d2:	e002      	b.n	800c8da <_printf_i+0xf2>
 800c8d4:	0646      	lsls	r6, r0, #25
 800c8d6:	d5fb      	bpl.n	800c8d0 <_printf_i+0xe8>
 800c8d8:	881e      	ldrh	r6, [r3, #0]
 800c8da:	4854      	ldr	r0, [pc, #336]	; (800ca2c <_printf_i+0x244>)
 800c8dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c8de:	bf0c      	ite	eq
 800c8e0:	2308      	moveq	r3, #8
 800c8e2:	230a      	movne	r3, #10
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ea:	6865      	ldr	r5, [r4, #4]
 800c8ec:	60a5      	str	r5, [r4, #8]
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	bfa2      	ittt	ge
 800c8f2:	6821      	ldrge	r1, [r4, #0]
 800c8f4:	f021 0104 	bicge.w	r1, r1, #4
 800c8f8:	6021      	strge	r1, [r4, #0]
 800c8fa:	b90e      	cbnz	r6, 800c900 <_printf_i+0x118>
 800c8fc:	2d00      	cmp	r5, #0
 800c8fe:	d04d      	beq.n	800c99c <_printf_i+0x1b4>
 800c900:	4615      	mov	r5, r2
 800c902:	fbb6 f1f3 	udiv	r1, r6, r3
 800c906:	fb03 6711 	mls	r7, r3, r1, r6
 800c90a:	5dc7      	ldrb	r7, [r0, r7]
 800c90c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c910:	4637      	mov	r7, r6
 800c912:	42bb      	cmp	r3, r7
 800c914:	460e      	mov	r6, r1
 800c916:	d9f4      	bls.n	800c902 <_printf_i+0x11a>
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d10b      	bne.n	800c934 <_printf_i+0x14c>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	07de      	lsls	r6, r3, #31
 800c920:	d508      	bpl.n	800c934 <_printf_i+0x14c>
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	6861      	ldr	r1, [r4, #4]
 800c926:	4299      	cmp	r1, r3
 800c928:	bfde      	ittt	le
 800c92a:	2330      	movle	r3, #48	; 0x30
 800c92c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c930:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c934:	1b52      	subs	r2, r2, r5
 800c936:	6122      	str	r2, [r4, #16]
 800c938:	f8cd a000 	str.w	sl, [sp]
 800c93c:	464b      	mov	r3, r9
 800c93e:	aa03      	add	r2, sp, #12
 800c940:	4621      	mov	r1, r4
 800c942:	4640      	mov	r0, r8
 800c944:	f7ff fee2 	bl	800c70c <_printf_common>
 800c948:	3001      	adds	r0, #1
 800c94a:	d14c      	bne.n	800c9e6 <_printf_i+0x1fe>
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295
 800c950:	b004      	add	sp, #16
 800c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c956:	4835      	ldr	r0, [pc, #212]	; (800ca2c <_printf_i+0x244>)
 800c958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c95c:	6829      	ldr	r1, [r5, #0]
 800c95e:	6823      	ldr	r3, [r4, #0]
 800c960:	f851 6b04 	ldr.w	r6, [r1], #4
 800c964:	6029      	str	r1, [r5, #0]
 800c966:	061d      	lsls	r5, r3, #24
 800c968:	d514      	bpl.n	800c994 <_printf_i+0x1ac>
 800c96a:	07df      	lsls	r7, r3, #31
 800c96c:	bf44      	itt	mi
 800c96e:	f043 0320 	orrmi.w	r3, r3, #32
 800c972:	6023      	strmi	r3, [r4, #0]
 800c974:	b91e      	cbnz	r6, 800c97e <_printf_i+0x196>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f023 0320 	bic.w	r3, r3, #32
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	2310      	movs	r3, #16
 800c980:	e7b0      	b.n	800c8e4 <_printf_i+0xfc>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	f043 0320 	orr.w	r3, r3, #32
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	2378      	movs	r3, #120	; 0x78
 800c98c:	4828      	ldr	r0, [pc, #160]	; (800ca30 <_printf_i+0x248>)
 800c98e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c992:	e7e3      	b.n	800c95c <_printf_i+0x174>
 800c994:	0659      	lsls	r1, r3, #25
 800c996:	bf48      	it	mi
 800c998:	b2b6      	uxthmi	r6, r6
 800c99a:	e7e6      	b.n	800c96a <_printf_i+0x182>
 800c99c:	4615      	mov	r5, r2
 800c99e:	e7bb      	b.n	800c918 <_printf_i+0x130>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	6826      	ldr	r6, [r4, #0]
 800c9a4:	6961      	ldr	r1, [r4, #20]
 800c9a6:	1d18      	adds	r0, r3, #4
 800c9a8:	6028      	str	r0, [r5, #0]
 800c9aa:	0635      	lsls	r5, r6, #24
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	d501      	bpl.n	800c9b4 <_printf_i+0x1cc>
 800c9b0:	6019      	str	r1, [r3, #0]
 800c9b2:	e002      	b.n	800c9ba <_printf_i+0x1d2>
 800c9b4:	0670      	lsls	r0, r6, #25
 800c9b6:	d5fb      	bpl.n	800c9b0 <_printf_i+0x1c8>
 800c9b8:	8019      	strh	r1, [r3, #0]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	4615      	mov	r5, r2
 800c9c0:	e7ba      	b.n	800c938 <_printf_i+0x150>
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	1d1a      	adds	r2, r3, #4
 800c9c6:	602a      	str	r2, [r5, #0]
 800c9c8:	681d      	ldr	r5, [r3, #0]
 800c9ca:	6862      	ldr	r2, [r4, #4]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f7f3 fc16 	bl	8000200 <memchr>
 800c9d4:	b108      	cbz	r0, 800c9da <_printf_i+0x1f2>
 800c9d6:	1b40      	subs	r0, r0, r5
 800c9d8:	6060      	str	r0, [r4, #4]
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e4:	e7a8      	b.n	800c938 <_printf_i+0x150>
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d0ab      	beq.n	800c94c <_printf_i+0x164>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	079b      	lsls	r3, r3, #30
 800c9f8:	d413      	bmi.n	800ca22 <_printf_i+0x23a>
 800c9fa:	68e0      	ldr	r0, [r4, #12]
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	4298      	cmp	r0, r3
 800ca00:	bfb8      	it	lt
 800ca02:	4618      	movlt	r0, r3
 800ca04:	e7a4      	b.n	800c950 <_printf_i+0x168>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	47d0      	blx	sl
 800ca10:	3001      	adds	r0, #1
 800ca12:	d09b      	beq.n	800c94c <_printf_i+0x164>
 800ca14:	3501      	adds	r5, #1
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	9903      	ldr	r1, [sp, #12]
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	42ab      	cmp	r3, r5
 800ca1e:	dcf2      	bgt.n	800ca06 <_printf_i+0x21e>
 800ca20:	e7eb      	b.n	800c9fa <_printf_i+0x212>
 800ca22:	2500      	movs	r5, #0
 800ca24:	f104 0619 	add.w	r6, r4, #25
 800ca28:	e7f5      	b.n	800ca16 <_printf_i+0x22e>
 800ca2a:	bf00      	nop
 800ca2c:	08011ba0 	.word	0x08011ba0
 800ca30:	08011bb1 	.word	0x08011bb1

0800ca34 <_scanf_float>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	b087      	sub	sp, #28
 800ca3a:	4617      	mov	r7, r2
 800ca3c:	9303      	str	r3, [sp, #12]
 800ca3e:	688b      	ldr	r3, [r1, #8]
 800ca40:	1e5a      	subs	r2, r3, #1
 800ca42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ca46:	bf83      	ittte	hi
 800ca48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ca4c:	195b      	addhi	r3, r3, r5
 800ca4e:	9302      	strhi	r3, [sp, #8]
 800ca50:	2300      	movls	r3, #0
 800ca52:	bf86      	itte	hi
 800ca54:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ca58:	608b      	strhi	r3, [r1, #8]
 800ca5a:	9302      	strls	r3, [sp, #8]
 800ca5c:	680b      	ldr	r3, [r1, #0]
 800ca5e:	468b      	mov	fp, r1
 800ca60:	2500      	movs	r5, #0
 800ca62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ca66:	f84b 3b1c 	str.w	r3, [fp], #28
 800ca6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca6e:	4680      	mov	r8, r0
 800ca70:	460c      	mov	r4, r1
 800ca72:	465e      	mov	r6, fp
 800ca74:	46aa      	mov	sl, r5
 800ca76:	46a9      	mov	r9, r5
 800ca78:	9501      	str	r5, [sp, #4]
 800ca7a:	68a2      	ldr	r2, [r4, #8]
 800ca7c:	b152      	cbz	r2, 800ca94 <_scanf_float+0x60>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b4e      	cmp	r3, #78	; 0x4e
 800ca84:	d864      	bhi.n	800cb50 <_scanf_float+0x11c>
 800ca86:	2b40      	cmp	r3, #64	; 0x40
 800ca88:	d83c      	bhi.n	800cb04 <_scanf_float+0xd0>
 800ca8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ca8e:	b2c8      	uxtb	r0, r1
 800ca90:	280e      	cmp	r0, #14
 800ca92:	d93a      	bls.n	800cb0a <_scanf_float+0xd6>
 800ca94:	f1b9 0f00 	cmp.w	r9, #0
 800ca98:	d003      	beq.n	800caa2 <_scanf_float+0x6e>
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caa6:	f1ba 0f01 	cmp.w	sl, #1
 800caaa:	f200 8113 	bhi.w	800ccd4 <_scanf_float+0x2a0>
 800caae:	455e      	cmp	r6, fp
 800cab0:	f200 8105 	bhi.w	800ccbe <_scanf_float+0x28a>
 800cab4:	2501      	movs	r5, #1
 800cab6:	4628      	mov	r0, r5
 800cab8:	b007      	add	sp, #28
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cac2:	2a0d      	cmp	r2, #13
 800cac4:	d8e6      	bhi.n	800ca94 <_scanf_float+0x60>
 800cac6:	a101      	add	r1, pc, #4	; (adr r1, 800cacc <_scanf_float+0x98>)
 800cac8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cacc:	0800cc0b 	.word	0x0800cc0b
 800cad0:	0800ca95 	.word	0x0800ca95
 800cad4:	0800ca95 	.word	0x0800ca95
 800cad8:	0800ca95 	.word	0x0800ca95
 800cadc:	0800cc6b 	.word	0x0800cc6b
 800cae0:	0800cc43 	.word	0x0800cc43
 800cae4:	0800ca95 	.word	0x0800ca95
 800cae8:	0800ca95 	.word	0x0800ca95
 800caec:	0800cc19 	.word	0x0800cc19
 800caf0:	0800ca95 	.word	0x0800ca95
 800caf4:	0800ca95 	.word	0x0800ca95
 800caf8:	0800ca95 	.word	0x0800ca95
 800cafc:	0800ca95 	.word	0x0800ca95
 800cb00:	0800cbd1 	.word	0x0800cbd1
 800cb04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cb08:	e7db      	b.n	800cac2 <_scanf_float+0x8e>
 800cb0a:	290e      	cmp	r1, #14
 800cb0c:	d8c2      	bhi.n	800ca94 <_scanf_float+0x60>
 800cb0e:	a001      	add	r0, pc, #4	; (adr r0, 800cb14 <_scanf_float+0xe0>)
 800cb10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb14:	0800cbc3 	.word	0x0800cbc3
 800cb18:	0800ca95 	.word	0x0800ca95
 800cb1c:	0800cbc3 	.word	0x0800cbc3
 800cb20:	0800cc57 	.word	0x0800cc57
 800cb24:	0800ca95 	.word	0x0800ca95
 800cb28:	0800cb71 	.word	0x0800cb71
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbad 	.word	0x0800cbad
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cbad 	.word	0x0800cbad
 800cb3c:	0800cbad 	.word	0x0800cbad
 800cb40:	0800cbad 	.word	0x0800cbad
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cbad 	.word	0x0800cbad
 800cb4c:	0800cbad 	.word	0x0800cbad
 800cb50:	2b6e      	cmp	r3, #110	; 0x6e
 800cb52:	d809      	bhi.n	800cb68 <_scanf_float+0x134>
 800cb54:	2b60      	cmp	r3, #96	; 0x60
 800cb56:	d8b2      	bhi.n	800cabe <_scanf_float+0x8a>
 800cb58:	2b54      	cmp	r3, #84	; 0x54
 800cb5a:	d077      	beq.n	800cc4c <_scanf_float+0x218>
 800cb5c:	2b59      	cmp	r3, #89	; 0x59
 800cb5e:	d199      	bne.n	800ca94 <_scanf_float+0x60>
 800cb60:	2d07      	cmp	r5, #7
 800cb62:	d197      	bne.n	800ca94 <_scanf_float+0x60>
 800cb64:	2508      	movs	r5, #8
 800cb66:	e029      	b.n	800cbbc <_scanf_float+0x188>
 800cb68:	2b74      	cmp	r3, #116	; 0x74
 800cb6a:	d06f      	beq.n	800cc4c <_scanf_float+0x218>
 800cb6c:	2b79      	cmp	r3, #121	; 0x79
 800cb6e:	e7f6      	b.n	800cb5e <_scanf_float+0x12a>
 800cb70:	6821      	ldr	r1, [r4, #0]
 800cb72:	05c8      	lsls	r0, r1, #23
 800cb74:	d51a      	bpl.n	800cbac <_scanf_float+0x178>
 800cb76:	9b02      	ldr	r3, [sp, #8]
 800cb78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cb7c:	6021      	str	r1, [r4, #0]
 800cb7e:	f109 0901 	add.w	r9, r9, #1
 800cb82:	b11b      	cbz	r3, 800cb8c <_scanf_float+0x158>
 800cb84:	3b01      	subs	r3, #1
 800cb86:	3201      	adds	r2, #1
 800cb88:	9302      	str	r3, [sp, #8]
 800cb8a:	60a2      	str	r2, [r4, #8]
 800cb8c:	68a3      	ldr	r3, [r4, #8]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	60a3      	str	r3, [r4, #8]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	3301      	adds	r3, #1
 800cb96:	6123      	str	r3, [r4, #16]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	f340 8084 	ble.w	800ccac <_scanf_float+0x278>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	3301      	adds	r3, #1
 800cba8:	603b      	str	r3, [r7, #0]
 800cbaa:	e766      	b.n	800ca7a <_scanf_float+0x46>
 800cbac:	eb1a 0f05 	cmn.w	sl, r5
 800cbb0:	f47f af70 	bne.w	800ca94 <_scanf_float+0x60>
 800cbb4:	6822      	ldr	r2, [r4, #0]
 800cbb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cbba:	6022      	str	r2, [r4, #0]
 800cbbc:	f806 3b01 	strb.w	r3, [r6], #1
 800cbc0:	e7e4      	b.n	800cb8c <_scanf_float+0x158>
 800cbc2:	6822      	ldr	r2, [r4, #0]
 800cbc4:	0610      	lsls	r0, r2, #24
 800cbc6:	f57f af65 	bpl.w	800ca94 <_scanf_float+0x60>
 800cbca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbce:	e7f4      	b.n	800cbba <_scanf_float+0x186>
 800cbd0:	f1ba 0f00 	cmp.w	sl, #0
 800cbd4:	d10e      	bne.n	800cbf4 <_scanf_float+0x1c0>
 800cbd6:	f1b9 0f00 	cmp.w	r9, #0
 800cbda:	d10e      	bne.n	800cbfa <_scanf_float+0x1c6>
 800cbdc:	6822      	ldr	r2, [r4, #0]
 800cbde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cbe2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cbe6:	d108      	bne.n	800cbfa <_scanf_float+0x1c6>
 800cbe8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbec:	6022      	str	r2, [r4, #0]
 800cbee:	f04f 0a01 	mov.w	sl, #1
 800cbf2:	e7e3      	b.n	800cbbc <_scanf_float+0x188>
 800cbf4:	f1ba 0f02 	cmp.w	sl, #2
 800cbf8:	d055      	beq.n	800cca6 <_scanf_float+0x272>
 800cbfa:	2d01      	cmp	r5, #1
 800cbfc:	d002      	beq.n	800cc04 <_scanf_float+0x1d0>
 800cbfe:	2d04      	cmp	r5, #4
 800cc00:	f47f af48 	bne.w	800ca94 <_scanf_float+0x60>
 800cc04:	3501      	adds	r5, #1
 800cc06:	b2ed      	uxtb	r5, r5
 800cc08:	e7d8      	b.n	800cbbc <_scanf_float+0x188>
 800cc0a:	f1ba 0f01 	cmp.w	sl, #1
 800cc0e:	f47f af41 	bne.w	800ca94 <_scanf_float+0x60>
 800cc12:	f04f 0a02 	mov.w	sl, #2
 800cc16:	e7d1      	b.n	800cbbc <_scanf_float+0x188>
 800cc18:	b97d      	cbnz	r5, 800cc3a <_scanf_float+0x206>
 800cc1a:	f1b9 0f00 	cmp.w	r9, #0
 800cc1e:	f47f af3c 	bne.w	800ca9a <_scanf_float+0x66>
 800cc22:	6822      	ldr	r2, [r4, #0]
 800cc24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc2c:	f47f af39 	bne.w	800caa2 <_scanf_float+0x6e>
 800cc30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc34:	6022      	str	r2, [r4, #0]
 800cc36:	2501      	movs	r5, #1
 800cc38:	e7c0      	b.n	800cbbc <_scanf_float+0x188>
 800cc3a:	2d03      	cmp	r5, #3
 800cc3c:	d0e2      	beq.n	800cc04 <_scanf_float+0x1d0>
 800cc3e:	2d05      	cmp	r5, #5
 800cc40:	e7de      	b.n	800cc00 <_scanf_float+0x1cc>
 800cc42:	2d02      	cmp	r5, #2
 800cc44:	f47f af26 	bne.w	800ca94 <_scanf_float+0x60>
 800cc48:	2503      	movs	r5, #3
 800cc4a:	e7b7      	b.n	800cbbc <_scanf_float+0x188>
 800cc4c:	2d06      	cmp	r5, #6
 800cc4e:	f47f af21 	bne.w	800ca94 <_scanf_float+0x60>
 800cc52:	2507      	movs	r5, #7
 800cc54:	e7b2      	b.n	800cbbc <_scanf_float+0x188>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	0591      	lsls	r1, r2, #22
 800cc5a:	f57f af1b 	bpl.w	800ca94 <_scanf_float+0x60>
 800cc5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc68:	e7a8      	b.n	800cbbc <_scanf_float+0x188>
 800cc6a:	6822      	ldr	r2, [r4, #0]
 800cc6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cc70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cc74:	d006      	beq.n	800cc84 <_scanf_float+0x250>
 800cc76:	0550      	lsls	r0, r2, #21
 800cc78:	f57f af0c 	bpl.w	800ca94 <_scanf_float+0x60>
 800cc7c:	f1b9 0f00 	cmp.w	r9, #0
 800cc80:	f43f af0f 	beq.w	800caa2 <_scanf_float+0x6e>
 800cc84:	0591      	lsls	r1, r2, #22
 800cc86:	bf58      	it	pl
 800cc88:	9901      	ldrpl	r1, [sp, #4]
 800cc8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc8e:	bf58      	it	pl
 800cc90:	eba9 0101 	subpl.w	r1, r9, r1
 800cc94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cc98:	bf58      	it	pl
 800cc9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc9e:	6022      	str	r2, [r4, #0]
 800cca0:	f04f 0900 	mov.w	r9, #0
 800cca4:	e78a      	b.n	800cbbc <_scanf_float+0x188>
 800cca6:	f04f 0a03 	mov.w	sl, #3
 800ccaa:	e787      	b.n	800cbbc <_scanf_float+0x188>
 800ccac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4798      	blx	r3
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f aedf 	beq.w	800ca7a <_scanf_float+0x46>
 800ccbc:	e6ea      	b.n	800ca94 <_scanf_float+0x60>
 800ccbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4640      	mov	r0, r8
 800ccca:	4798      	blx	r3
 800cccc:	6923      	ldr	r3, [r4, #16]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	e6ec      	b.n	800caae <_scanf_float+0x7a>
 800ccd4:	1e6b      	subs	r3, r5, #1
 800ccd6:	2b06      	cmp	r3, #6
 800ccd8:	d825      	bhi.n	800cd26 <_scanf_float+0x2f2>
 800ccda:	2d02      	cmp	r5, #2
 800ccdc:	d836      	bhi.n	800cd4c <_scanf_float+0x318>
 800ccde:	455e      	cmp	r6, fp
 800cce0:	f67f aee8 	bls.w	800cab4 <_scanf_float+0x80>
 800cce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cce8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccec:	463a      	mov	r2, r7
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4798      	blx	r3
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	e7f1      	b.n	800ccde <_scanf_float+0x2aa>
 800ccfa:	9802      	ldr	r0, [sp, #8]
 800ccfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cd04:	9002      	str	r0, [sp, #8]
 800cd06:	463a      	mov	r2, r7
 800cd08:	4640      	mov	r0, r8
 800cd0a:	4798      	blx	r3
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	6123      	str	r3, [r4, #16]
 800cd12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd16:	fa5f fa8a 	uxtb.w	sl, sl
 800cd1a:	f1ba 0f02 	cmp.w	sl, #2
 800cd1e:	d1ec      	bne.n	800ccfa <_scanf_float+0x2c6>
 800cd20:	3d03      	subs	r5, #3
 800cd22:	b2ed      	uxtb	r5, r5
 800cd24:	1b76      	subs	r6, r6, r5
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	05da      	lsls	r2, r3, #23
 800cd2a:	d52f      	bpl.n	800cd8c <_scanf_float+0x358>
 800cd2c:	055b      	lsls	r3, r3, #21
 800cd2e:	d510      	bpl.n	800cd52 <_scanf_float+0x31e>
 800cd30:	455e      	cmp	r6, fp
 800cd32:	f67f aebf 	bls.w	800cab4 <_scanf_float+0x80>
 800cd36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd3e:	463a      	mov	r2, r7
 800cd40:	4640      	mov	r0, r8
 800cd42:	4798      	blx	r3
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	e7f1      	b.n	800cd30 <_scanf_float+0x2fc>
 800cd4c:	46aa      	mov	sl, r5
 800cd4e:	9602      	str	r6, [sp, #8]
 800cd50:	e7df      	b.n	800cd12 <_scanf_float+0x2de>
 800cd52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	2965      	cmp	r1, #101	; 0x65
 800cd5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd5e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd62:	6123      	str	r3, [r4, #16]
 800cd64:	d00c      	beq.n	800cd80 <_scanf_float+0x34c>
 800cd66:	2945      	cmp	r1, #69	; 0x45
 800cd68:	d00a      	beq.n	800cd80 <_scanf_float+0x34c>
 800cd6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd6e:	463a      	mov	r2, r7
 800cd70:	4640      	mov	r0, r8
 800cd72:	4798      	blx	r3
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	1eb5      	subs	r5, r6, #2
 800cd7e:	6123      	str	r3, [r4, #16]
 800cd80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd84:	463a      	mov	r2, r7
 800cd86:	4640      	mov	r0, r8
 800cd88:	4798      	blx	r3
 800cd8a:	462e      	mov	r6, r5
 800cd8c:	6825      	ldr	r5, [r4, #0]
 800cd8e:	f015 0510 	ands.w	r5, r5, #16
 800cd92:	d159      	bne.n	800ce48 <_scanf_float+0x414>
 800cd94:	7035      	strb	r5, [r6, #0]
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cda0:	d11b      	bne.n	800cdda <_scanf_float+0x3a6>
 800cda2:	9b01      	ldr	r3, [sp, #4]
 800cda4:	454b      	cmp	r3, r9
 800cda6:	eba3 0209 	sub.w	r2, r3, r9
 800cdaa:	d123      	bne.n	800cdf4 <_scanf_float+0x3c0>
 800cdac:	2200      	movs	r2, #0
 800cdae:	4659      	mov	r1, fp
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	f000 ff33 	bl	800dc1c <_strtod_r>
 800cdb6:	6822      	ldr	r2, [r4, #0]
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	f012 0f02 	tst.w	r2, #2
 800cdbe:	ec57 6b10 	vmov	r6, r7, d0
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	d021      	beq.n	800ce0a <_scanf_float+0x3d6>
 800cdc6:	9903      	ldr	r1, [sp, #12]
 800cdc8:	1d1a      	adds	r2, r3, #4
 800cdca:	600a      	str	r2, [r1, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	e9c3 6700 	strd	r6, r7, [r3]
 800cdd2:	68e3      	ldr	r3, [r4, #12]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	60e3      	str	r3, [r4, #12]
 800cdd8:	e66d      	b.n	800cab6 <_scanf_float+0x82>
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0e5      	beq.n	800cdac <_scanf_float+0x378>
 800cde0:	9905      	ldr	r1, [sp, #20]
 800cde2:	230a      	movs	r3, #10
 800cde4:	462a      	mov	r2, r5
 800cde6:	3101      	adds	r1, #1
 800cde8:	4640      	mov	r0, r8
 800cdea:	f000 ff9f 	bl	800dd2c <_strtol_r>
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	9e05      	ldr	r6, [sp, #20]
 800cdf2:	1ac2      	subs	r2, r0, r3
 800cdf4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cdf8:	429e      	cmp	r6, r3
 800cdfa:	bf28      	it	cs
 800cdfc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ce00:	4912      	ldr	r1, [pc, #72]	; (800ce4c <_scanf_float+0x418>)
 800ce02:	4630      	mov	r0, r6
 800ce04:	f000 f82c 	bl	800ce60 <siprintf>
 800ce08:	e7d0      	b.n	800cdac <_scanf_float+0x378>
 800ce0a:	9903      	ldr	r1, [sp, #12]
 800ce0c:	f012 0f04 	tst.w	r2, #4
 800ce10:	f103 0204 	add.w	r2, r3, #4
 800ce14:	600a      	str	r2, [r1, #0]
 800ce16:	d1d9      	bne.n	800cdcc <_scanf_float+0x398>
 800ce18:	f8d3 8000 	ldr.w	r8, [r3]
 800ce1c:	ee10 2a10 	vmov	r2, s0
 800ce20:	ee10 0a10 	vmov	r0, s0
 800ce24:	463b      	mov	r3, r7
 800ce26:	4639      	mov	r1, r7
 800ce28:	f7f3 fe90 	bl	8000b4c <__aeabi_dcmpun>
 800ce2c:	b128      	cbz	r0, 800ce3a <_scanf_float+0x406>
 800ce2e:	4808      	ldr	r0, [pc, #32]	; (800ce50 <_scanf_float+0x41c>)
 800ce30:	f000 f810 	bl	800ce54 <nanf>
 800ce34:	ed88 0a00 	vstr	s0, [r8]
 800ce38:	e7cb      	b.n	800cdd2 <_scanf_float+0x39e>
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f7f3 fee3 	bl	8000c08 <__aeabi_d2f>
 800ce42:	f8c8 0000 	str.w	r0, [r8]
 800ce46:	e7c4      	b.n	800cdd2 <_scanf_float+0x39e>
 800ce48:	2500      	movs	r5, #0
 800ce4a:	e634      	b.n	800cab6 <_scanf_float+0x82>
 800ce4c:	08011bc2 	.word	0x08011bc2
 800ce50:	08012083 	.word	0x08012083

0800ce54 <nanf>:
 800ce54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce5c <nanf+0x8>
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	7fc00000 	.word	0x7fc00000

0800ce60 <siprintf>:
 800ce60:	b40e      	push	{r1, r2, r3}
 800ce62:	b500      	push	{lr}
 800ce64:	b09c      	sub	sp, #112	; 0x70
 800ce66:	ab1d      	add	r3, sp, #116	; 0x74
 800ce68:	9002      	str	r0, [sp, #8]
 800ce6a:	9006      	str	r0, [sp, #24]
 800ce6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce70:	4809      	ldr	r0, [pc, #36]	; (800ce98 <siprintf+0x38>)
 800ce72:	9107      	str	r1, [sp, #28]
 800ce74:	9104      	str	r1, [sp, #16]
 800ce76:	4909      	ldr	r1, [pc, #36]	; (800ce9c <siprintf+0x3c>)
 800ce78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7c:	9105      	str	r1, [sp, #20]
 800ce7e:	6800      	ldr	r0, [r0, #0]
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	a902      	add	r1, sp, #8
 800ce84:	f003 fad4 	bl	8010430 <_svfiprintf_r>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	b01c      	add	sp, #112	; 0x70
 800ce90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce94:	b003      	add	sp, #12
 800ce96:	4770      	bx	lr
 800ce98:	20000020 	.word	0x20000020
 800ce9c:	ffff0208 	.word	0xffff0208

0800cea0 <siscanf>:
 800cea0:	b40e      	push	{r1, r2, r3}
 800cea2:	b510      	push	{r4, lr}
 800cea4:	b09f      	sub	sp, #124	; 0x7c
 800cea6:	ac21      	add	r4, sp, #132	; 0x84
 800cea8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ceac:	f854 2b04 	ldr.w	r2, [r4], #4
 800ceb0:	9201      	str	r2, [sp, #4]
 800ceb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ceb6:	9004      	str	r0, [sp, #16]
 800ceb8:	9008      	str	r0, [sp, #32]
 800ceba:	f7f3 f993 	bl	80001e4 <strlen>
 800cebe:	4b0c      	ldr	r3, [pc, #48]	; (800cef0 <siscanf+0x50>)
 800cec0:	9005      	str	r0, [sp, #20]
 800cec2:	9009      	str	r0, [sp, #36]	; 0x24
 800cec4:	930d      	str	r3, [sp, #52]	; 0x34
 800cec6:	480b      	ldr	r0, [pc, #44]	; (800cef4 <siscanf+0x54>)
 800cec8:	9a01      	ldr	r2, [sp, #4]
 800ceca:	6800      	ldr	r0, [r0, #0]
 800cecc:	9403      	str	r4, [sp, #12]
 800cece:	2300      	movs	r3, #0
 800ced0:	9311      	str	r3, [sp, #68]	; 0x44
 800ced2:	9316      	str	r3, [sp, #88]	; 0x58
 800ced4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ced8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cedc:	a904      	add	r1, sp, #16
 800cede:	4623      	mov	r3, r4
 800cee0:	f003 fc00 	bl	80106e4 <__ssvfiscanf_r>
 800cee4:	b01f      	add	sp, #124	; 0x7c
 800cee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceea:	b003      	add	sp, #12
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	0800cf1b 	.word	0x0800cf1b
 800cef4:	20000020 	.word	0x20000020

0800cef8 <__sread>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	460c      	mov	r4, r1
 800cefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf00:	f003 feba 	bl	8010c78 <_read_r>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	bfab      	itete	ge
 800cf08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf0a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf0c:	181b      	addge	r3, r3, r0
 800cf0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf12:	bfac      	ite	ge
 800cf14:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf16:	81a3      	strhlt	r3, [r4, #12]
 800cf18:	bd10      	pop	{r4, pc}

0800cf1a <__seofread>:
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	4770      	bx	lr

0800cf1e <__swrite>:
 800cf1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	461f      	mov	r7, r3
 800cf24:	898b      	ldrh	r3, [r1, #12]
 800cf26:	05db      	lsls	r3, r3, #23
 800cf28:	4605      	mov	r5, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	d505      	bpl.n	800cf3c <__swrite+0x1e>
 800cf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf34:	2302      	movs	r3, #2
 800cf36:	2200      	movs	r2, #0
 800cf38:	f002 fc32 	bl	800f7a0 <_lseek_r>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	4632      	mov	r2, r6
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf52:	f001 b9b1 	b.w	800e2b8 <_write_r>

0800cf56 <__sseek>:
 800cf56:	b510      	push	{r4, lr}
 800cf58:	460c      	mov	r4, r1
 800cf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5e:	f002 fc1f 	bl	800f7a0 <_lseek_r>
 800cf62:	1c43      	adds	r3, r0, #1
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	bf15      	itete	ne
 800cf68:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf72:	81a3      	strheq	r3, [r4, #12]
 800cf74:	bf18      	it	ne
 800cf76:	81a3      	strhne	r3, [r4, #12]
 800cf78:	bd10      	pop	{r4, pc}

0800cf7a <__sclose>:
 800cf7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7e:	f001 b9ad 	b.w	800e2dc <_close_r>

0800cf82 <strchr>:
 800cf82:	b2c9      	uxtb	r1, r1
 800cf84:	4603      	mov	r3, r0
 800cf86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8a:	b11a      	cbz	r2, 800cf94 <strchr+0x12>
 800cf8c:	428a      	cmp	r2, r1
 800cf8e:	d1f9      	bne.n	800cf84 <strchr+0x2>
 800cf90:	4618      	mov	r0, r3
 800cf92:	4770      	bx	lr
 800cf94:	2900      	cmp	r1, #0
 800cf96:	bf18      	it	ne
 800cf98:	2300      	movne	r3, #0
 800cf9a:	e7f9      	b.n	800cf90 <strchr+0xe>

0800cf9c <strcpy>:
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfa2:	f803 2b01 	strb.w	r2, [r3], #1
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	d1f9      	bne.n	800cf9e <strcpy+0x2>
 800cfaa:	4770      	bx	lr

0800cfac <strstr>:
 800cfac:	780a      	ldrb	r2, [r1, #0]
 800cfae:	b570      	push	{r4, r5, r6, lr}
 800cfb0:	b96a      	cbnz	r2, 800cfce <strstr+0x22>
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d109      	bne.n	800cfcc <strstr+0x20>
 800cfb8:	460c      	mov	r4, r1
 800cfba:	4605      	mov	r5, r0
 800cfbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d0f6      	beq.n	800cfb2 <strstr+0x6>
 800cfc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cfc8:	429e      	cmp	r6, r3
 800cfca:	d0f7      	beq.n	800cfbc <strstr+0x10>
 800cfcc:	3001      	adds	r0, #1
 800cfce:	7803      	ldrb	r3, [r0, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1ef      	bne.n	800cfb4 <strstr+0x8>
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	e7ec      	b.n	800cfb2 <strstr+0x6>

0800cfd8 <sulp>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	460d      	mov	r5, r1
 800cfde:	ec45 4b10 	vmov	d0, r4, r5
 800cfe2:	4616      	mov	r6, r2
 800cfe4:	f002 ff82 	bl	800feec <__ulp>
 800cfe8:	ec51 0b10 	vmov	r0, r1, d0
 800cfec:	b17e      	cbz	r6, 800d00e <sulp+0x36>
 800cfee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	dd09      	ble.n	800d00e <sulp+0x36>
 800cffa:	051b      	lsls	r3, r3, #20
 800cffc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d000:	2400      	movs	r4, #0
 800d002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d006:	4622      	mov	r2, r4
 800d008:	462b      	mov	r3, r5
 800d00a:	f7f3 fb05 	bl	8000618 <__aeabi_dmul>
 800d00e:	bd70      	pop	{r4, r5, r6, pc}

0800d010 <_strtod_l>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	ed2d 8b02 	vpush	{d8}
 800d018:	b09d      	sub	sp, #116	; 0x74
 800d01a:	461f      	mov	r7, r3
 800d01c:	2300      	movs	r3, #0
 800d01e:	9318      	str	r3, [sp, #96]	; 0x60
 800d020:	4ba2      	ldr	r3, [pc, #648]	; (800d2ac <_strtod_l+0x29c>)
 800d022:	9213      	str	r2, [sp, #76]	; 0x4c
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	9305      	str	r3, [sp, #20]
 800d028:	4604      	mov	r4, r0
 800d02a:	4618      	mov	r0, r3
 800d02c:	4688      	mov	r8, r1
 800d02e:	f7f3 f8d9 	bl	80001e4 <strlen>
 800d032:	f04f 0a00 	mov.w	sl, #0
 800d036:	4605      	mov	r5, r0
 800d038:	f04f 0b00 	mov.w	fp, #0
 800d03c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d042:	781a      	ldrb	r2, [r3, #0]
 800d044:	2a2b      	cmp	r2, #43	; 0x2b
 800d046:	d04e      	beq.n	800d0e6 <_strtod_l+0xd6>
 800d048:	d83b      	bhi.n	800d0c2 <_strtod_l+0xb2>
 800d04a:	2a0d      	cmp	r2, #13
 800d04c:	d834      	bhi.n	800d0b8 <_strtod_l+0xa8>
 800d04e:	2a08      	cmp	r2, #8
 800d050:	d834      	bhi.n	800d0bc <_strtod_l+0xac>
 800d052:	2a00      	cmp	r2, #0
 800d054:	d03e      	beq.n	800d0d4 <_strtod_l+0xc4>
 800d056:	2300      	movs	r3, #0
 800d058:	930a      	str	r3, [sp, #40]	; 0x28
 800d05a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d05c:	7833      	ldrb	r3, [r6, #0]
 800d05e:	2b30      	cmp	r3, #48	; 0x30
 800d060:	f040 80b0 	bne.w	800d1c4 <_strtod_l+0x1b4>
 800d064:	7873      	ldrb	r3, [r6, #1]
 800d066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d06a:	2b58      	cmp	r3, #88	; 0x58
 800d06c:	d168      	bne.n	800d140 <_strtod_l+0x130>
 800d06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	ab18      	add	r3, sp, #96	; 0x60
 800d074:	9702      	str	r7, [sp, #8]
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	4a8d      	ldr	r2, [pc, #564]	; (800d2b0 <_strtod_l+0x2a0>)
 800d07a:	ab19      	add	r3, sp, #100	; 0x64
 800d07c:	a917      	add	r1, sp, #92	; 0x5c
 800d07e:	4620      	mov	r0, r4
 800d080:	f002 f834 	bl	800f0ec <__gethex>
 800d084:	f010 0707 	ands.w	r7, r0, #7
 800d088:	4605      	mov	r5, r0
 800d08a:	d005      	beq.n	800d098 <_strtod_l+0x88>
 800d08c:	2f06      	cmp	r7, #6
 800d08e:	d12c      	bne.n	800d0ea <_strtod_l+0xda>
 800d090:	3601      	adds	r6, #1
 800d092:	2300      	movs	r3, #0
 800d094:	9617      	str	r6, [sp, #92]	; 0x5c
 800d096:	930a      	str	r3, [sp, #40]	; 0x28
 800d098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f040 8590 	bne.w	800dbc0 <_strtod_l+0xbb0>
 800d0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0a2:	b1eb      	cbz	r3, 800d0e0 <_strtod_l+0xd0>
 800d0a4:	4652      	mov	r2, sl
 800d0a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0aa:	ec43 2b10 	vmov	d0, r2, r3
 800d0ae:	b01d      	add	sp, #116	; 0x74
 800d0b0:	ecbd 8b02 	vpop	{d8}
 800d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b8:	2a20      	cmp	r2, #32
 800d0ba:	d1cc      	bne.n	800d056 <_strtod_l+0x46>
 800d0bc:	3301      	adds	r3, #1
 800d0be:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0c0:	e7be      	b.n	800d040 <_strtod_l+0x30>
 800d0c2:	2a2d      	cmp	r2, #45	; 0x2d
 800d0c4:	d1c7      	bne.n	800d056 <_strtod_l+0x46>
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1c2      	bne.n	800d05a <_strtod_l+0x4a>
 800d0d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 856e 	bne.w	800dbbc <_strtod_l+0xbac>
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	e7e1      	b.n	800d0aa <_strtod_l+0x9a>
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	e7ee      	b.n	800d0c8 <_strtod_l+0xb8>
 800d0ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0ec:	b13a      	cbz	r2, 800d0fe <_strtod_l+0xee>
 800d0ee:	2135      	movs	r1, #53	; 0x35
 800d0f0:	a81a      	add	r0, sp, #104	; 0x68
 800d0f2:	f003 f806 	bl	8010102 <__copybits>
 800d0f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f002 fbc5 	bl	800f888 <_Bfree>
 800d0fe:	3f01      	subs	r7, #1
 800d100:	2f04      	cmp	r7, #4
 800d102:	d806      	bhi.n	800d112 <_strtod_l+0x102>
 800d104:	e8df f007 	tbb	[pc, r7]
 800d108:	1714030a 	.word	0x1714030a
 800d10c:	0a          	.byte	0x0a
 800d10d:	00          	.byte	0x00
 800d10e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d112:	0728      	lsls	r0, r5, #28
 800d114:	d5c0      	bpl.n	800d098 <_strtod_l+0x88>
 800d116:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d11a:	e7bd      	b.n	800d098 <_strtod_l+0x88>
 800d11c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d12a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d12e:	e7f0      	b.n	800d112 <_strtod_l+0x102>
 800d130:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d2b4 <_strtod_l+0x2a4>
 800d134:	e7ed      	b.n	800d112 <_strtod_l+0x102>
 800d136:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d13a:	f04f 3aff 	mov.w	sl, #4294967295
 800d13e:	e7e8      	b.n	800d112 <_strtod_l+0x102>
 800d140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	9217      	str	r2, [sp, #92]	; 0x5c
 800d146:	785b      	ldrb	r3, [r3, #1]
 800d148:	2b30      	cmp	r3, #48	; 0x30
 800d14a:	d0f9      	beq.n	800d140 <_strtod_l+0x130>
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0a3      	beq.n	800d098 <_strtod_l+0x88>
 800d150:	2301      	movs	r3, #1
 800d152:	f04f 0900 	mov.w	r9, #0
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d15a:	9308      	str	r3, [sp, #32]
 800d15c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d160:	464f      	mov	r7, r9
 800d162:	220a      	movs	r2, #10
 800d164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d166:	7806      	ldrb	r6, [r0, #0]
 800d168:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d16c:	b2d9      	uxtb	r1, r3
 800d16e:	2909      	cmp	r1, #9
 800d170:	d92a      	bls.n	800d1c8 <_strtod_l+0x1b8>
 800d172:	9905      	ldr	r1, [sp, #20]
 800d174:	462a      	mov	r2, r5
 800d176:	f003 fde3 	bl	8010d40 <strncmp>
 800d17a:	b398      	cbz	r0, 800d1e4 <_strtod_l+0x1d4>
 800d17c:	2000      	movs	r0, #0
 800d17e:	4632      	mov	r2, r6
 800d180:	463d      	mov	r5, r7
 800d182:	9005      	str	r0, [sp, #20]
 800d184:	4603      	mov	r3, r0
 800d186:	2a65      	cmp	r2, #101	; 0x65
 800d188:	d001      	beq.n	800d18e <_strtod_l+0x17e>
 800d18a:	2a45      	cmp	r2, #69	; 0x45
 800d18c:	d118      	bne.n	800d1c0 <_strtod_l+0x1b0>
 800d18e:	b91d      	cbnz	r5, 800d198 <_strtod_l+0x188>
 800d190:	9a04      	ldr	r2, [sp, #16]
 800d192:	4302      	orrs	r2, r0
 800d194:	d09e      	beq.n	800d0d4 <_strtod_l+0xc4>
 800d196:	2500      	movs	r5, #0
 800d198:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d19c:	f108 0201 	add.w	r2, r8, #1
 800d1a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d1a6:	2a2b      	cmp	r2, #43	; 0x2b
 800d1a8:	d075      	beq.n	800d296 <_strtod_l+0x286>
 800d1aa:	2a2d      	cmp	r2, #45	; 0x2d
 800d1ac:	d07b      	beq.n	800d2a6 <_strtod_l+0x296>
 800d1ae:	f04f 0c00 	mov.w	ip, #0
 800d1b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d1b6:	2909      	cmp	r1, #9
 800d1b8:	f240 8082 	bls.w	800d2c0 <_strtod_l+0x2b0>
 800d1bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d1c0:	2600      	movs	r6, #0
 800d1c2:	e09d      	b.n	800d300 <_strtod_l+0x2f0>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e7c4      	b.n	800d152 <_strtod_l+0x142>
 800d1c8:	2f08      	cmp	r7, #8
 800d1ca:	bfd8      	it	le
 800d1cc:	9907      	ldrle	r1, [sp, #28]
 800d1ce:	f100 0001 	add.w	r0, r0, #1
 800d1d2:	bfda      	itte	le
 800d1d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1d8:	9307      	strle	r3, [sp, #28]
 800d1da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d1de:	3701      	adds	r7, #1
 800d1e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d1e2:	e7bf      	b.n	800d164 <_strtod_l+0x154>
 800d1e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1e6:	195a      	adds	r2, r3, r5
 800d1e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1ea:	5d5a      	ldrb	r2, [r3, r5]
 800d1ec:	2f00      	cmp	r7, #0
 800d1ee:	d037      	beq.n	800d260 <_strtod_l+0x250>
 800d1f0:	9005      	str	r0, [sp, #20]
 800d1f2:	463d      	mov	r5, r7
 800d1f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d1f8:	2b09      	cmp	r3, #9
 800d1fa:	d912      	bls.n	800d222 <_strtod_l+0x212>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e7c2      	b.n	800d186 <_strtod_l+0x176>
 800d200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	9217      	str	r2, [sp, #92]	; 0x5c
 800d206:	785a      	ldrb	r2, [r3, #1]
 800d208:	3001      	adds	r0, #1
 800d20a:	2a30      	cmp	r2, #48	; 0x30
 800d20c:	d0f8      	beq.n	800d200 <_strtod_l+0x1f0>
 800d20e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d212:	2b08      	cmp	r3, #8
 800d214:	f200 84d9 	bhi.w	800dbca <_strtod_l+0xbba>
 800d218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d21a:	9005      	str	r0, [sp, #20]
 800d21c:	2000      	movs	r0, #0
 800d21e:	9308      	str	r3, [sp, #32]
 800d220:	4605      	mov	r5, r0
 800d222:	3a30      	subs	r2, #48	; 0x30
 800d224:	f100 0301 	add.w	r3, r0, #1
 800d228:	d014      	beq.n	800d254 <_strtod_l+0x244>
 800d22a:	9905      	ldr	r1, [sp, #20]
 800d22c:	4419      	add	r1, r3
 800d22e:	9105      	str	r1, [sp, #20]
 800d230:	462b      	mov	r3, r5
 800d232:	eb00 0e05 	add.w	lr, r0, r5
 800d236:	210a      	movs	r1, #10
 800d238:	4573      	cmp	r3, lr
 800d23a:	d113      	bne.n	800d264 <_strtod_l+0x254>
 800d23c:	182b      	adds	r3, r5, r0
 800d23e:	2b08      	cmp	r3, #8
 800d240:	f105 0501 	add.w	r5, r5, #1
 800d244:	4405      	add	r5, r0
 800d246:	dc1c      	bgt.n	800d282 <_strtod_l+0x272>
 800d248:	9907      	ldr	r1, [sp, #28]
 800d24a:	230a      	movs	r3, #10
 800d24c:	fb03 2301 	mla	r3, r3, r1, r2
 800d250:	9307      	str	r3, [sp, #28]
 800d252:	2300      	movs	r3, #0
 800d254:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d256:	1c51      	adds	r1, r2, #1
 800d258:	9117      	str	r1, [sp, #92]	; 0x5c
 800d25a:	7852      	ldrb	r2, [r2, #1]
 800d25c:	4618      	mov	r0, r3
 800d25e:	e7c9      	b.n	800d1f4 <_strtod_l+0x1e4>
 800d260:	4638      	mov	r0, r7
 800d262:	e7d2      	b.n	800d20a <_strtod_l+0x1fa>
 800d264:	2b08      	cmp	r3, #8
 800d266:	dc04      	bgt.n	800d272 <_strtod_l+0x262>
 800d268:	9e07      	ldr	r6, [sp, #28]
 800d26a:	434e      	muls	r6, r1
 800d26c:	9607      	str	r6, [sp, #28]
 800d26e:	3301      	adds	r3, #1
 800d270:	e7e2      	b.n	800d238 <_strtod_l+0x228>
 800d272:	f103 0c01 	add.w	ip, r3, #1
 800d276:	f1bc 0f10 	cmp.w	ip, #16
 800d27a:	bfd8      	it	le
 800d27c:	fb01 f909 	mulle.w	r9, r1, r9
 800d280:	e7f5      	b.n	800d26e <_strtod_l+0x25e>
 800d282:	2d10      	cmp	r5, #16
 800d284:	bfdc      	itt	le
 800d286:	230a      	movle	r3, #10
 800d288:	fb03 2909 	mlale	r9, r3, r9, r2
 800d28c:	e7e1      	b.n	800d252 <_strtod_l+0x242>
 800d28e:	2300      	movs	r3, #0
 800d290:	9305      	str	r3, [sp, #20]
 800d292:	2301      	movs	r3, #1
 800d294:	e77c      	b.n	800d190 <_strtod_l+0x180>
 800d296:	f04f 0c00 	mov.w	ip, #0
 800d29a:	f108 0202 	add.w	r2, r8, #2
 800d29e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d2a4:	e785      	b.n	800d1b2 <_strtod_l+0x1a2>
 800d2a6:	f04f 0c01 	mov.w	ip, #1
 800d2aa:	e7f6      	b.n	800d29a <_strtod_l+0x28a>
 800d2ac:	08011e4c 	.word	0x08011e4c
 800d2b0:	08011bc8 	.word	0x08011bc8
 800d2b4:	7ff00000 	.word	0x7ff00000
 800d2b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2ba:	1c51      	adds	r1, r2, #1
 800d2bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d2be:	7852      	ldrb	r2, [r2, #1]
 800d2c0:	2a30      	cmp	r2, #48	; 0x30
 800d2c2:	d0f9      	beq.n	800d2b8 <_strtod_l+0x2a8>
 800d2c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d2c8:	2908      	cmp	r1, #8
 800d2ca:	f63f af79 	bhi.w	800d1c0 <_strtod_l+0x1b0>
 800d2ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d2d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2d4:	9206      	str	r2, [sp, #24]
 800d2d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2d8:	1c51      	adds	r1, r2, #1
 800d2da:	9117      	str	r1, [sp, #92]	; 0x5c
 800d2dc:	7852      	ldrb	r2, [r2, #1]
 800d2de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d2e2:	2e09      	cmp	r6, #9
 800d2e4:	d937      	bls.n	800d356 <_strtod_l+0x346>
 800d2e6:	9e06      	ldr	r6, [sp, #24]
 800d2e8:	1b89      	subs	r1, r1, r6
 800d2ea:	2908      	cmp	r1, #8
 800d2ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d2f0:	dc02      	bgt.n	800d2f8 <_strtod_l+0x2e8>
 800d2f2:	4576      	cmp	r6, lr
 800d2f4:	bfa8      	it	ge
 800d2f6:	4676      	movge	r6, lr
 800d2f8:	f1bc 0f00 	cmp.w	ip, #0
 800d2fc:	d000      	beq.n	800d300 <_strtod_l+0x2f0>
 800d2fe:	4276      	negs	r6, r6
 800d300:	2d00      	cmp	r5, #0
 800d302:	d14d      	bne.n	800d3a0 <_strtod_l+0x390>
 800d304:	9904      	ldr	r1, [sp, #16]
 800d306:	4301      	orrs	r1, r0
 800d308:	f47f aec6 	bne.w	800d098 <_strtod_l+0x88>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f47f aee1 	bne.w	800d0d4 <_strtod_l+0xc4>
 800d312:	2a69      	cmp	r2, #105	; 0x69
 800d314:	d027      	beq.n	800d366 <_strtod_l+0x356>
 800d316:	dc24      	bgt.n	800d362 <_strtod_l+0x352>
 800d318:	2a49      	cmp	r2, #73	; 0x49
 800d31a:	d024      	beq.n	800d366 <_strtod_l+0x356>
 800d31c:	2a4e      	cmp	r2, #78	; 0x4e
 800d31e:	f47f aed9 	bne.w	800d0d4 <_strtod_l+0xc4>
 800d322:	499f      	ldr	r1, [pc, #636]	; (800d5a0 <_strtod_l+0x590>)
 800d324:	a817      	add	r0, sp, #92	; 0x5c
 800d326:	f002 f939 	bl	800f59c <__match>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f aed2 	beq.w	800d0d4 <_strtod_l+0xc4>
 800d330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b28      	cmp	r3, #40	; 0x28
 800d336:	d12d      	bne.n	800d394 <_strtod_l+0x384>
 800d338:	499a      	ldr	r1, [pc, #616]	; (800d5a4 <_strtod_l+0x594>)
 800d33a:	aa1a      	add	r2, sp, #104	; 0x68
 800d33c:	a817      	add	r0, sp, #92	; 0x5c
 800d33e:	f002 f941 	bl	800f5c4 <__hexnan>
 800d342:	2805      	cmp	r0, #5
 800d344:	d126      	bne.n	800d394 <_strtod_l+0x384>
 800d346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d348:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d34c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d350:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d354:	e6a0      	b.n	800d098 <_strtod_l+0x88>
 800d356:	210a      	movs	r1, #10
 800d358:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d35c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d360:	e7b9      	b.n	800d2d6 <_strtod_l+0x2c6>
 800d362:	2a6e      	cmp	r2, #110	; 0x6e
 800d364:	e7db      	b.n	800d31e <_strtod_l+0x30e>
 800d366:	4990      	ldr	r1, [pc, #576]	; (800d5a8 <_strtod_l+0x598>)
 800d368:	a817      	add	r0, sp, #92	; 0x5c
 800d36a:	f002 f917 	bl	800f59c <__match>
 800d36e:	2800      	cmp	r0, #0
 800d370:	f43f aeb0 	beq.w	800d0d4 <_strtod_l+0xc4>
 800d374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d376:	498d      	ldr	r1, [pc, #564]	; (800d5ac <_strtod_l+0x59c>)
 800d378:	3b01      	subs	r3, #1
 800d37a:	a817      	add	r0, sp, #92	; 0x5c
 800d37c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d37e:	f002 f90d 	bl	800f59c <__match>
 800d382:	b910      	cbnz	r0, 800d38a <_strtod_l+0x37a>
 800d384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d386:	3301      	adds	r3, #1
 800d388:	9317      	str	r3, [sp, #92]	; 0x5c
 800d38a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d5bc <_strtod_l+0x5ac>
 800d38e:	f04f 0a00 	mov.w	sl, #0
 800d392:	e681      	b.n	800d098 <_strtod_l+0x88>
 800d394:	4886      	ldr	r0, [pc, #536]	; (800d5b0 <_strtod_l+0x5a0>)
 800d396:	f003 fc83 	bl	8010ca0 <nan>
 800d39a:	ec5b ab10 	vmov	sl, fp, d0
 800d39e:	e67b      	b.n	800d098 <_strtod_l+0x88>
 800d3a0:	9b05      	ldr	r3, [sp, #20]
 800d3a2:	9807      	ldr	r0, [sp, #28]
 800d3a4:	1af3      	subs	r3, r6, r3
 800d3a6:	2f00      	cmp	r7, #0
 800d3a8:	bf08      	it	eq
 800d3aa:	462f      	moveq	r7, r5
 800d3ac:	2d10      	cmp	r5, #16
 800d3ae:	9306      	str	r3, [sp, #24]
 800d3b0:	46a8      	mov	r8, r5
 800d3b2:	bfa8      	it	ge
 800d3b4:	f04f 0810 	movge.w	r8, #16
 800d3b8:	f7f3 f8b4 	bl	8000524 <__aeabi_ui2d>
 800d3bc:	2d09      	cmp	r5, #9
 800d3be:	4682      	mov	sl, r0
 800d3c0:	468b      	mov	fp, r1
 800d3c2:	dd13      	ble.n	800d3ec <_strtod_l+0x3dc>
 800d3c4:	4b7b      	ldr	r3, [pc, #492]	; (800d5b4 <_strtod_l+0x5a4>)
 800d3c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d3ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d3ce:	f7f3 f923 	bl	8000618 <__aeabi_dmul>
 800d3d2:	4682      	mov	sl, r0
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	468b      	mov	fp, r1
 800d3d8:	f7f3 f8a4 	bl	8000524 <__aeabi_ui2d>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f7f2 ff62 	bl	80002ac <__adddf3>
 800d3e8:	4682      	mov	sl, r0
 800d3ea:	468b      	mov	fp, r1
 800d3ec:	2d0f      	cmp	r5, #15
 800d3ee:	dc38      	bgt.n	800d462 <_strtod_l+0x452>
 800d3f0:	9b06      	ldr	r3, [sp, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f43f ae50 	beq.w	800d098 <_strtod_l+0x88>
 800d3f8:	dd24      	ble.n	800d444 <_strtod_l+0x434>
 800d3fa:	2b16      	cmp	r3, #22
 800d3fc:	dc0b      	bgt.n	800d416 <_strtod_l+0x406>
 800d3fe:	496d      	ldr	r1, [pc, #436]	; (800d5b4 <_strtod_l+0x5a4>)
 800d400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d408:	4652      	mov	r2, sl
 800d40a:	465b      	mov	r3, fp
 800d40c:	f7f3 f904 	bl	8000618 <__aeabi_dmul>
 800d410:	4682      	mov	sl, r0
 800d412:	468b      	mov	fp, r1
 800d414:	e640      	b.n	800d098 <_strtod_l+0x88>
 800d416:	9a06      	ldr	r2, [sp, #24]
 800d418:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d41c:	4293      	cmp	r3, r2
 800d41e:	db20      	blt.n	800d462 <_strtod_l+0x452>
 800d420:	4c64      	ldr	r4, [pc, #400]	; (800d5b4 <_strtod_l+0x5a4>)
 800d422:	f1c5 050f 	rsb	r5, r5, #15
 800d426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d42a:	4652      	mov	r2, sl
 800d42c:	465b      	mov	r3, fp
 800d42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d432:	f7f3 f8f1 	bl	8000618 <__aeabi_dmul>
 800d436:	9b06      	ldr	r3, [sp, #24]
 800d438:	1b5d      	subs	r5, r3, r5
 800d43a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d43e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d442:	e7e3      	b.n	800d40c <_strtod_l+0x3fc>
 800d444:	9b06      	ldr	r3, [sp, #24]
 800d446:	3316      	adds	r3, #22
 800d448:	db0b      	blt.n	800d462 <_strtod_l+0x452>
 800d44a:	9b05      	ldr	r3, [sp, #20]
 800d44c:	1b9e      	subs	r6, r3, r6
 800d44e:	4b59      	ldr	r3, [pc, #356]	; (800d5b4 <_strtod_l+0x5a4>)
 800d450:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d454:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d458:	4650      	mov	r0, sl
 800d45a:	4659      	mov	r1, fp
 800d45c:	f7f3 fa06 	bl	800086c <__aeabi_ddiv>
 800d460:	e7d6      	b.n	800d410 <_strtod_l+0x400>
 800d462:	9b06      	ldr	r3, [sp, #24]
 800d464:	eba5 0808 	sub.w	r8, r5, r8
 800d468:	4498      	add	r8, r3
 800d46a:	f1b8 0f00 	cmp.w	r8, #0
 800d46e:	dd74      	ble.n	800d55a <_strtod_l+0x54a>
 800d470:	f018 030f 	ands.w	r3, r8, #15
 800d474:	d00a      	beq.n	800d48c <_strtod_l+0x47c>
 800d476:	494f      	ldr	r1, [pc, #316]	; (800d5b4 <_strtod_l+0x5a4>)
 800d478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d47c:	4652      	mov	r2, sl
 800d47e:	465b      	mov	r3, fp
 800d480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d484:	f7f3 f8c8 	bl	8000618 <__aeabi_dmul>
 800d488:	4682      	mov	sl, r0
 800d48a:	468b      	mov	fp, r1
 800d48c:	f038 080f 	bics.w	r8, r8, #15
 800d490:	d04f      	beq.n	800d532 <_strtod_l+0x522>
 800d492:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d496:	dd22      	ble.n	800d4de <_strtod_l+0x4ce>
 800d498:	2500      	movs	r5, #0
 800d49a:	462e      	mov	r6, r5
 800d49c:	9507      	str	r5, [sp, #28]
 800d49e:	9505      	str	r5, [sp, #20]
 800d4a0:	2322      	movs	r3, #34	; 0x22
 800d4a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d5bc <_strtod_l+0x5ac>
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	f04f 0a00 	mov.w	sl, #0
 800d4ac:	9b07      	ldr	r3, [sp, #28]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f43f adf2 	beq.w	800d098 <_strtod_l+0x88>
 800d4b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f002 f9e6 	bl	800f888 <_Bfree>
 800d4bc:	9905      	ldr	r1, [sp, #20]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f002 f9e2 	bl	800f888 <_Bfree>
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f002 f9de 	bl	800f888 <_Bfree>
 800d4cc:	9907      	ldr	r1, [sp, #28]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f002 f9da 	bl	800f888 <_Bfree>
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f002 f9d6 	bl	800f888 <_Bfree>
 800d4dc:	e5dc      	b.n	800d098 <_strtod_l+0x88>
 800d4de:	4b36      	ldr	r3, [pc, #216]	; (800d5b8 <_strtod_l+0x5a8>)
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	4659      	mov	r1, fp
 800d4ec:	4699      	mov	r9, r3
 800d4ee:	f1b8 0f01 	cmp.w	r8, #1
 800d4f2:	dc21      	bgt.n	800d538 <_strtod_l+0x528>
 800d4f4:	b10b      	cbz	r3, 800d4fa <_strtod_l+0x4ea>
 800d4f6:	4682      	mov	sl, r0
 800d4f8:	468b      	mov	fp, r1
 800d4fa:	4b2f      	ldr	r3, [pc, #188]	; (800d5b8 <_strtod_l+0x5a8>)
 800d4fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d500:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d504:	4652      	mov	r2, sl
 800d506:	465b      	mov	r3, fp
 800d508:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d50c:	f7f3 f884 	bl	8000618 <__aeabi_dmul>
 800d510:	4b2a      	ldr	r3, [pc, #168]	; (800d5bc <_strtod_l+0x5ac>)
 800d512:	460a      	mov	r2, r1
 800d514:	400b      	ands	r3, r1
 800d516:	492a      	ldr	r1, [pc, #168]	; (800d5c0 <_strtod_l+0x5b0>)
 800d518:	428b      	cmp	r3, r1
 800d51a:	4682      	mov	sl, r0
 800d51c:	d8bc      	bhi.n	800d498 <_strtod_l+0x488>
 800d51e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d522:	428b      	cmp	r3, r1
 800d524:	bf86      	itte	hi
 800d526:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d5c4 <_strtod_l+0x5b4>
 800d52a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d52e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d532:	2300      	movs	r3, #0
 800d534:	9304      	str	r3, [sp, #16]
 800d536:	e084      	b.n	800d642 <_strtod_l+0x632>
 800d538:	f018 0f01 	tst.w	r8, #1
 800d53c:	d005      	beq.n	800d54a <_strtod_l+0x53a>
 800d53e:	9b04      	ldr	r3, [sp, #16]
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	f7f3 f868 	bl	8000618 <__aeabi_dmul>
 800d548:	2301      	movs	r3, #1
 800d54a:	9a04      	ldr	r2, [sp, #16]
 800d54c:	3208      	adds	r2, #8
 800d54e:	f109 0901 	add.w	r9, r9, #1
 800d552:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d556:	9204      	str	r2, [sp, #16]
 800d558:	e7c9      	b.n	800d4ee <_strtod_l+0x4de>
 800d55a:	d0ea      	beq.n	800d532 <_strtod_l+0x522>
 800d55c:	f1c8 0800 	rsb	r8, r8, #0
 800d560:	f018 020f 	ands.w	r2, r8, #15
 800d564:	d00a      	beq.n	800d57c <_strtod_l+0x56c>
 800d566:	4b13      	ldr	r3, [pc, #76]	; (800d5b4 <_strtod_l+0x5a4>)
 800d568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d56c:	4650      	mov	r0, sl
 800d56e:	4659      	mov	r1, fp
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f3 f97a 	bl	800086c <__aeabi_ddiv>
 800d578:	4682      	mov	sl, r0
 800d57a:	468b      	mov	fp, r1
 800d57c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d580:	d0d7      	beq.n	800d532 <_strtod_l+0x522>
 800d582:	f1b8 0f1f 	cmp.w	r8, #31
 800d586:	dd1f      	ble.n	800d5c8 <_strtod_l+0x5b8>
 800d588:	2500      	movs	r5, #0
 800d58a:	462e      	mov	r6, r5
 800d58c:	9507      	str	r5, [sp, #28]
 800d58e:	9505      	str	r5, [sp, #20]
 800d590:	2322      	movs	r3, #34	; 0x22
 800d592:	f04f 0a00 	mov.w	sl, #0
 800d596:	f04f 0b00 	mov.w	fp, #0
 800d59a:	6023      	str	r3, [r4, #0]
 800d59c:	e786      	b.n	800d4ac <_strtod_l+0x49c>
 800d59e:	bf00      	nop
 800d5a0:	08011b9d 	.word	0x08011b9d
 800d5a4:	08011bdc 	.word	0x08011bdc
 800d5a8:	08011b95 	.word	0x08011b95
 800d5ac:	08011d58 	.word	0x08011d58
 800d5b0:	08012083 	.word	0x08012083
 800d5b4:	08011f48 	.word	0x08011f48
 800d5b8:	08011f20 	.word	0x08011f20
 800d5bc:	7ff00000 	.word	0x7ff00000
 800d5c0:	7ca00000 	.word	0x7ca00000
 800d5c4:	7fefffff 	.word	0x7fefffff
 800d5c8:	f018 0310 	ands.w	r3, r8, #16
 800d5cc:	bf18      	it	ne
 800d5ce:	236a      	movne	r3, #106	; 0x6a
 800d5d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d980 <_strtod_l+0x970>
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	4650      	mov	r0, sl
 800d5d8:	4659      	mov	r1, fp
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f018 0f01 	tst.w	r8, #1
 800d5e0:	d004      	beq.n	800d5ec <_strtod_l+0x5dc>
 800d5e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d5e6:	f7f3 f817 	bl	8000618 <__aeabi_dmul>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d5f0:	f109 0908 	add.w	r9, r9, #8
 800d5f4:	d1f2      	bne.n	800d5dc <_strtod_l+0x5cc>
 800d5f6:	b10b      	cbz	r3, 800d5fc <_strtod_l+0x5ec>
 800d5f8:	4682      	mov	sl, r0
 800d5fa:	468b      	mov	fp, r1
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	b1c3      	cbz	r3, 800d632 <_strtod_l+0x622>
 800d600:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d604:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d608:	2b00      	cmp	r3, #0
 800d60a:	4659      	mov	r1, fp
 800d60c:	dd11      	ble.n	800d632 <_strtod_l+0x622>
 800d60e:	2b1f      	cmp	r3, #31
 800d610:	f340 8124 	ble.w	800d85c <_strtod_l+0x84c>
 800d614:	2b34      	cmp	r3, #52	; 0x34
 800d616:	bfde      	ittt	le
 800d618:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d61c:	f04f 33ff 	movle.w	r3, #4294967295
 800d620:	fa03 f202 	lslle.w	r2, r3, r2
 800d624:	f04f 0a00 	mov.w	sl, #0
 800d628:	bfcc      	ite	gt
 800d62a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d62e:	ea02 0b01 	andle.w	fp, r2, r1
 800d632:	2200      	movs	r2, #0
 800d634:	2300      	movs	r3, #0
 800d636:	4650      	mov	r0, sl
 800d638:	4659      	mov	r1, fp
 800d63a:	f7f3 fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d1a2      	bne.n	800d588 <_strtod_l+0x578>
 800d642:	9b07      	ldr	r3, [sp, #28]
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	9908      	ldr	r1, [sp, #32]
 800d648:	462b      	mov	r3, r5
 800d64a:	463a      	mov	r2, r7
 800d64c:	4620      	mov	r0, r4
 800d64e:	f002 f983 	bl	800f958 <__s2b>
 800d652:	9007      	str	r0, [sp, #28]
 800d654:	2800      	cmp	r0, #0
 800d656:	f43f af1f 	beq.w	800d498 <_strtod_l+0x488>
 800d65a:	9b05      	ldr	r3, [sp, #20]
 800d65c:	1b9e      	subs	r6, r3, r6
 800d65e:	9b06      	ldr	r3, [sp, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	bfb4      	ite	lt
 800d664:	4633      	movlt	r3, r6
 800d666:	2300      	movge	r3, #0
 800d668:	930c      	str	r3, [sp, #48]	; 0x30
 800d66a:	9b06      	ldr	r3, [sp, #24]
 800d66c:	2500      	movs	r5, #0
 800d66e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d672:	9312      	str	r3, [sp, #72]	; 0x48
 800d674:	462e      	mov	r6, r5
 800d676:	9b07      	ldr	r3, [sp, #28]
 800d678:	4620      	mov	r0, r4
 800d67a:	6859      	ldr	r1, [r3, #4]
 800d67c:	f002 f8c4 	bl	800f808 <_Balloc>
 800d680:	9005      	str	r0, [sp, #20]
 800d682:	2800      	cmp	r0, #0
 800d684:	f43f af0c 	beq.w	800d4a0 <_strtod_l+0x490>
 800d688:	9b07      	ldr	r3, [sp, #28]
 800d68a:	691a      	ldr	r2, [r3, #16]
 800d68c:	3202      	adds	r2, #2
 800d68e:	f103 010c 	add.w	r1, r3, #12
 800d692:	0092      	lsls	r2, r2, #2
 800d694:	300c      	adds	r0, #12
 800d696:	f7fe fadb 	bl	800bc50 <memcpy>
 800d69a:	ec4b ab10 	vmov	d0, sl, fp
 800d69e:	aa1a      	add	r2, sp, #104	; 0x68
 800d6a0:	a919      	add	r1, sp, #100	; 0x64
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f002 fc9e 	bl	800ffe4 <__d2b>
 800d6a8:	ec4b ab18 	vmov	d8, sl, fp
 800d6ac:	9018      	str	r0, [sp, #96]	; 0x60
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	f43f aef6 	beq.w	800d4a0 <_strtod_l+0x490>
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f002 f9e8 	bl	800fa8c <__i2b>
 800d6bc:	4606      	mov	r6, r0
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f43f aeee 	beq.w	800d4a0 <_strtod_l+0x490>
 800d6c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6c6:	9904      	ldr	r1, [sp, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bfab      	itete	ge
 800d6cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d6ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d6d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d6d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d6d6:	bfac      	ite	ge
 800d6d8:	eb03 0902 	addge.w	r9, r3, r2
 800d6dc:	1ad7      	sublt	r7, r2, r3
 800d6de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d6e0:	eba3 0801 	sub.w	r8, r3, r1
 800d6e4:	4490      	add	r8, r2
 800d6e6:	4ba1      	ldr	r3, [pc, #644]	; (800d96c <_strtod_l+0x95c>)
 800d6e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6ec:	4598      	cmp	r8, r3
 800d6ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d6f2:	f280 80c7 	bge.w	800d884 <_strtod_l+0x874>
 800d6f6:	eba3 0308 	sub.w	r3, r3, r8
 800d6fa:	2b1f      	cmp	r3, #31
 800d6fc:	eba2 0203 	sub.w	r2, r2, r3
 800d700:	f04f 0101 	mov.w	r1, #1
 800d704:	f300 80b1 	bgt.w	800d86a <_strtod_l+0x85a>
 800d708:	fa01 f303 	lsl.w	r3, r1, r3
 800d70c:	930d      	str	r3, [sp, #52]	; 0x34
 800d70e:	2300      	movs	r3, #0
 800d710:	9308      	str	r3, [sp, #32]
 800d712:	eb09 0802 	add.w	r8, r9, r2
 800d716:	9b04      	ldr	r3, [sp, #16]
 800d718:	45c1      	cmp	r9, r8
 800d71a:	4417      	add	r7, r2
 800d71c:	441f      	add	r7, r3
 800d71e:	464b      	mov	r3, r9
 800d720:	bfa8      	it	ge
 800d722:	4643      	movge	r3, r8
 800d724:	42bb      	cmp	r3, r7
 800d726:	bfa8      	it	ge
 800d728:	463b      	movge	r3, r7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	bfc2      	ittt	gt
 800d72e:	eba8 0803 	subgt.w	r8, r8, r3
 800d732:	1aff      	subgt	r7, r7, r3
 800d734:	eba9 0903 	subgt.w	r9, r9, r3
 800d738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dd17      	ble.n	800d76e <_strtod_l+0x75e>
 800d73e:	4631      	mov	r1, r6
 800d740:	461a      	mov	r2, r3
 800d742:	4620      	mov	r0, r4
 800d744:	f002 fa62 	bl	800fc0c <__pow5mult>
 800d748:	4606      	mov	r6, r0
 800d74a:	2800      	cmp	r0, #0
 800d74c:	f43f aea8 	beq.w	800d4a0 <_strtod_l+0x490>
 800d750:	4601      	mov	r1, r0
 800d752:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d754:	4620      	mov	r0, r4
 800d756:	f002 f9af 	bl	800fab8 <__multiply>
 800d75a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f43f ae9f 	beq.w	800d4a0 <_strtod_l+0x490>
 800d762:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d764:	4620      	mov	r0, r4
 800d766:	f002 f88f 	bl	800f888 <_Bfree>
 800d76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d76c:	9318      	str	r3, [sp, #96]	; 0x60
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	f300 808c 	bgt.w	800d88e <_strtod_l+0x87e>
 800d776:	9b06      	ldr	r3, [sp, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dd08      	ble.n	800d78e <_strtod_l+0x77e>
 800d77c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d77e:	9905      	ldr	r1, [sp, #20]
 800d780:	4620      	mov	r0, r4
 800d782:	f002 fa43 	bl	800fc0c <__pow5mult>
 800d786:	9005      	str	r0, [sp, #20]
 800d788:	2800      	cmp	r0, #0
 800d78a:	f43f ae89 	beq.w	800d4a0 <_strtod_l+0x490>
 800d78e:	2f00      	cmp	r7, #0
 800d790:	dd08      	ble.n	800d7a4 <_strtod_l+0x794>
 800d792:	9905      	ldr	r1, [sp, #20]
 800d794:	463a      	mov	r2, r7
 800d796:	4620      	mov	r0, r4
 800d798:	f002 fa92 	bl	800fcc0 <__lshift>
 800d79c:	9005      	str	r0, [sp, #20]
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	f43f ae7e 	beq.w	800d4a0 <_strtod_l+0x490>
 800d7a4:	f1b9 0f00 	cmp.w	r9, #0
 800d7a8:	dd08      	ble.n	800d7bc <_strtod_l+0x7ac>
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	464a      	mov	r2, r9
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f002 fa86 	bl	800fcc0 <__lshift>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	f43f ae72 	beq.w	800d4a0 <_strtod_l+0x490>
 800d7bc:	9a05      	ldr	r2, [sp, #20]
 800d7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f002 fb09 	bl	800fdd8 <__mdiff>
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	f43f ae69 	beq.w	800d4a0 <_strtod_l+0x490>
 800d7ce:	68c3      	ldr	r3, [r0, #12]
 800d7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60c3      	str	r3, [r0, #12]
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	f002 fae2 	bl	800fda0 <__mcmp>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	da60      	bge.n	800d8a2 <_strtod_l+0x892>
 800d7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d7e6:	f040 8082 	bne.w	800d8ee <_strtod_l+0x8de>
 800d7ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d17d      	bne.n	800d8ee <_strtod_l+0x8de>
 800d7f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7f6:	0d1b      	lsrs	r3, r3, #20
 800d7f8:	051b      	lsls	r3, r3, #20
 800d7fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d7fe:	d976      	bls.n	800d8ee <_strtod_l+0x8de>
 800d800:	696b      	ldr	r3, [r5, #20]
 800d802:	b913      	cbnz	r3, 800d80a <_strtod_l+0x7fa>
 800d804:	692b      	ldr	r3, [r5, #16]
 800d806:	2b01      	cmp	r3, #1
 800d808:	dd71      	ble.n	800d8ee <_strtod_l+0x8de>
 800d80a:	4629      	mov	r1, r5
 800d80c:	2201      	movs	r2, #1
 800d80e:	4620      	mov	r0, r4
 800d810:	f002 fa56 	bl	800fcc0 <__lshift>
 800d814:	4631      	mov	r1, r6
 800d816:	4605      	mov	r5, r0
 800d818:	f002 fac2 	bl	800fda0 <__mcmp>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	dd66      	ble.n	800d8ee <_strtod_l+0x8de>
 800d820:	9904      	ldr	r1, [sp, #16]
 800d822:	4a53      	ldr	r2, [pc, #332]	; (800d970 <_strtod_l+0x960>)
 800d824:	465b      	mov	r3, fp
 800d826:	2900      	cmp	r1, #0
 800d828:	f000 8081 	beq.w	800d92e <_strtod_l+0x91e>
 800d82c:	ea02 010b 	and.w	r1, r2, fp
 800d830:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d834:	dc7b      	bgt.n	800d92e <_strtod_l+0x91e>
 800d836:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d83a:	f77f aea9 	ble.w	800d590 <_strtod_l+0x580>
 800d83e:	4b4d      	ldr	r3, [pc, #308]	; (800d974 <_strtod_l+0x964>)
 800d840:	4650      	mov	r0, sl
 800d842:	4659      	mov	r1, fp
 800d844:	2200      	movs	r2, #0
 800d846:	f7f2 fee7 	bl	8000618 <__aeabi_dmul>
 800d84a:	460b      	mov	r3, r1
 800d84c:	4303      	orrs	r3, r0
 800d84e:	bf08      	it	eq
 800d850:	2322      	moveq	r3, #34	; 0x22
 800d852:	4682      	mov	sl, r0
 800d854:	468b      	mov	fp, r1
 800d856:	bf08      	it	eq
 800d858:	6023      	streq	r3, [r4, #0]
 800d85a:	e62b      	b.n	800d4b4 <_strtod_l+0x4a4>
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295
 800d860:	fa02 f303 	lsl.w	r3, r2, r3
 800d864:	ea03 0a0a 	and.w	sl, r3, sl
 800d868:	e6e3      	b.n	800d632 <_strtod_l+0x622>
 800d86a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d86e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d872:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d876:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d87a:	fa01 f308 	lsl.w	r3, r1, r8
 800d87e:	9308      	str	r3, [sp, #32]
 800d880:	910d      	str	r1, [sp, #52]	; 0x34
 800d882:	e746      	b.n	800d712 <_strtod_l+0x702>
 800d884:	2300      	movs	r3, #0
 800d886:	9308      	str	r3, [sp, #32]
 800d888:	2301      	movs	r3, #1
 800d88a:	930d      	str	r3, [sp, #52]	; 0x34
 800d88c:	e741      	b.n	800d712 <_strtod_l+0x702>
 800d88e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d890:	4642      	mov	r2, r8
 800d892:	4620      	mov	r0, r4
 800d894:	f002 fa14 	bl	800fcc0 <__lshift>
 800d898:	9018      	str	r0, [sp, #96]	; 0x60
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f47f af6b 	bne.w	800d776 <_strtod_l+0x766>
 800d8a0:	e5fe      	b.n	800d4a0 <_strtod_l+0x490>
 800d8a2:	465f      	mov	r7, fp
 800d8a4:	d16e      	bne.n	800d984 <_strtod_l+0x974>
 800d8a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8ac:	b342      	cbz	r2, 800d900 <_strtod_l+0x8f0>
 800d8ae:	4a32      	ldr	r2, [pc, #200]	; (800d978 <_strtod_l+0x968>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d128      	bne.n	800d906 <_strtod_l+0x8f6>
 800d8b4:	9b04      	ldr	r3, [sp, #16]
 800d8b6:	4651      	mov	r1, sl
 800d8b8:	b1eb      	cbz	r3, 800d8f6 <_strtod_l+0x8e6>
 800d8ba:	4b2d      	ldr	r3, [pc, #180]	; (800d970 <_strtod_l+0x960>)
 800d8bc:	403b      	ands	r3, r7
 800d8be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c6:	d819      	bhi.n	800d8fc <_strtod_l+0x8ec>
 800d8c8:	0d1b      	lsrs	r3, r3, #20
 800d8ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d2:	4299      	cmp	r1, r3
 800d8d4:	d117      	bne.n	800d906 <_strtod_l+0x8f6>
 800d8d6:	4b29      	ldr	r3, [pc, #164]	; (800d97c <_strtod_l+0x96c>)
 800d8d8:	429f      	cmp	r7, r3
 800d8da:	d102      	bne.n	800d8e2 <_strtod_l+0x8d2>
 800d8dc:	3101      	adds	r1, #1
 800d8de:	f43f addf 	beq.w	800d4a0 <_strtod_l+0x490>
 800d8e2:	4b23      	ldr	r3, [pc, #140]	; (800d970 <_strtod_l+0x960>)
 800d8e4:	403b      	ands	r3, r7
 800d8e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d8ea:	f04f 0a00 	mov.w	sl, #0
 800d8ee:	9b04      	ldr	r3, [sp, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1a4      	bne.n	800d83e <_strtod_l+0x82e>
 800d8f4:	e5de      	b.n	800d4b4 <_strtod_l+0x4a4>
 800d8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fa:	e7ea      	b.n	800d8d2 <_strtod_l+0x8c2>
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	e7e8      	b.n	800d8d2 <_strtod_l+0x8c2>
 800d900:	ea53 030a 	orrs.w	r3, r3, sl
 800d904:	d08c      	beq.n	800d820 <_strtod_l+0x810>
 800d906:	9b08      	ldr	r3, [sp, #32]
 800d908:	b1db      	cbz	r3, 800d942 <_strtod_l+0x932>
 800d90a:	423b      	tst	r3, r7
 800d90c:	d0ef      	beq.n	800d8ee <_strtod_l+0x8de>
 800d90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d910:	9a04      	ldr	r2, [sp, #16]
 800d912:	4650      	mov	r0, sl
 800d914:	4659      	mov	r1, fp
 800d916:	b1c3      	cbz	r3, 800d94a <_strtod_l+0x93a>
 800d918:	f7ff fb5e 	bl	800cfd8 <sulp>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	ec51 0b18 	vmov	r0, r1, d8
 800d924:	f7f2 fcc2 	bl	80002ac <__adddf3>
 800d928:	4682      	mov	sl, r0
 800d92a:	468b      	mov	fp, r1
 800d92c:	e7df      	b.n	800d8ee <_strtod_l+0x8de>
 800d92e:	4013      	ands	r3, r2
 800d930:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d934:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d938:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d93c:	f04f 3aff 	mov.w	sl, #4294967295
 800d940:	e7d5      	b.n	800d8ee <_strtod_l+0x8de>
 800d942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d944:	ea13 0f0a 	tst.w	r3, sl
 800d948:	e7e0      	b.n	800d90c <_strtod_l+0x8fc>
 800d94a:	f7ff fb45 	bl	800cfd8 <sulp>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	ec51 0b18 	vmov	r0, r1, d8
 800d956:	f7f2 fca7 	bl	80002a8 <__aeabi_dsub>
 800d95a:	2200      	movs	r2, #0
 800d95c:	2300      	movs	r3, #0
 800d95e:	4682      	mov	sl, r0
 800d960:	468b      	mov	fp, r1
 800d962:	f7f3 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d966:	2800      	cmp	r0, #0
 800d968:	d0c1      	beq.n	800d8ee <_strtod_l+0x8de>
 800d96a:	e611      	b.n	800d590 <_strtod_l+0x580>
 800d96c:	fffffc02 	.word	0xfffffc02
 800d970:	7ff00000 	.word	0x7ff00000
 800d974:	39500000 	.word	0x39500000
 800d978:	000fffff 	.word	0x000fffff
 800d97c:	7fefffff 	.word	0x7fefffff
 800d980:	08011bf0 	.word	0x08011bf0
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	f002 fb88 	bl	801009c <__ratio>
 800d98c:	ec59 8b10 	vmov	r8, r9, d0
 800d990:	ee10 0a10 	vmov	r0, s0
 800d994:	2200      	movs	r2, #0
 800d996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d99a:	4649      	mov	r1, r9
 800d99c:	f7f3 f8b8 	bl	8000b10 <__aeabi_dcmple>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d07a      	beq.n	800da9a <_strtod_l+0xa8a>
 800d9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d04a      	beq.n	800da40 <_strtod_l+0xa30>
 800d9aa:	4b95      	ldr	r3, [pc, #596]	; (800dc00 <_strtod_l+0xbf0>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dc00 <_strtod_l+0xbf0>
 800d9b6:	f04f 0800 	mov.w	r8, #0
 800d9ba:	4b92      	ldr	r3, [pc, #584]	; (800dc04 <_strtod_l+0xbf4>)
 800d9bc:	403b      	ands	r3, r7
 800d9be:	930d      	str	r3, [sp, #52]	; 0x34
 800d9c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9c2:	4b91      	ldr	r3, [pc, #580]	; (800dc08 <_strtod_l+0xbf8>)
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	f040 80b0 	bne.w	800db2a <_strtod_l+0xb1a>
 800d9ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d9d2:	ec4b ab10 	vmov	d0, sl, fp
 800d9d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d9da:	f002 fa87 	bl	800feec <__ulp>
 800d9de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9e2:	ec53 2b10 	vmov	r2, r3, d0
 800d9e6:	f7f2 fe17 	bl	8000618 <__aeabi_dmul>
 800d9ea:	4652      	mov	r2, sl
 800d9ec:	465b      	mov	r3, fp
 800d9ee:	f7f2 fc5d 	bl	80002ac <__adddf3>
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4983      	ldr	r1, [pc, #524]	; (800dc04 <_strtod_l+0xbf4>)
 800d9f6:	4a85      	ldr	r2, [pc, #532]	; (800dc0c <_strtod_l+0xbfc>)
 800d9f8:	4019      	ands	r1, r3
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	d960      	bls.n	800dac2 <_strtod_l+0xab2>
 800da00:	ee18 3a90 	vmov	r3, s17
 800da04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da08:	4293      	cmp	r3, r2
 800da0a:	d104      	bne.n	800da16 <_strtod_l+0xa06>
 800da0c:	ee18 3a10 	vmov	r3, s16
 800da10:	3301      	adds	r3, #1
 800da12:	f43f ad45 	beq.w	800d4a0 <_strtod_l+0x490>
 800da16:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dc18 <_strtod_l+0xc08>
 800da1a:	f04f 3aff 	mov.w	sl, #4294967295
 800da1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da20:	4620      	mov	r0, r4
 800da22:	f001 ff31 	bl	800f888 <_Bfree>
 800da26:	9905      	ldr	r1, [sp, #20]
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 ff2d 	bl	800f888 <_Bfree>
 800da2e:	4631      	mov	r1, r6
 800da30:	4620      	mov	r0, r4
 800da32:	f001 ff29 	bl	800f888 <_Bfree>
 800da36:	4629      	mov	r1, r5
 800da38:	4620      	mov	r0, r4
 800da3a:	f001 ff25 	bl	800f888 <_Bfree>
 800da3e:	e61a      	b.n	800d676 <_strtod_l+0x666>
 800da40:	f1ba 0f00 	cmp.w	sl, #0
 800da44:	d11b      	bne.n	800da7e <_strtod_l+0xa6e>
 800da46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da4a:	b9f3      	cbnz	r3, 800da8a <_strtod_l+0xa7a>
 800da4c:	4b6c      	ldr	r3, [pc, #432]	; (800dc00 <_strtod_l+0xbf0>)
 800da4e:	2200      	movs	r2, #0
 800da50:	4640      	mov	r0, r8
 800da52:	4649      	mov	r1, r9
 800da54:	f7f3 f852 	bl	8000afc <__aeabi_dcmplt>
 800da58:	b9d0      	cbnz	r0, 800da90 <_strtod_l+0xa80>
 800da5a:	4640      	mov	r0, r8
 800da5c:	4649      	mov	r1, r9
 800da5e:	4b6c      	ldr	r3, [pc, #432]	; (800dc10 <_strtod_l+0xc00>)
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fdd9 	bl	8000618 <__aeabi_dmul>
 800da66:	4680      	mov	r8, r0
 800da68:	4689      	mov	r9, r1
 800da6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800da72:	9315      	str	r3, [sp, #84]	; 0x54
 800da74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da7c:	e79d      	b.n	800d9ba <_strtod_l+0x9aa>
 800da7e:	f1ba 0f01 	cmp.w	sl, #1
 800da82:	d102      	bne.n	800da8a <_strtod_l+0xa7a>
 800da84:	2f00      	cmp	r7, #0
 800da86:	f43f ad83 	beq.w	800d590 <_strtod_l+0x580>
 800da8a:	4b62      	ldr	r3, [pc, #392]	; (800dc14 <_strtod_l+0xc04>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	e78e      	b.n	800d9ae <_strtod_l+0x99e>
 800da90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dc10 <_strtod_l+0xc00>
 800da94:	f04f 0800 	mov.w	r8, #0
 800da98:	e7e7      	b.n	800da6a <_strtod_l+0xa5a>
 800da9a:	4b5d      	ldr	r3, [pc, #372]	; (800dc10 <_strtod_l+0xc00>)
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	2200      	movs	r2, #0
 800daa2:	f7f2 fdb9 	bl	8000618 <__aeabi_dmul>
 800daa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa8:	4680      	mov	r8, r0
 800daaa:	4689      	mov	r9, r1
 800daac:	b933      	cbnz	r3, 800dabc <_strtod_l+0xaac>
 800daae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dab2:	900e      	str	r0, [sp, #56]	; 0x38
 800dab4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800daba:	e7dd      	b.n	800da78 <_strtod_l+0xa68>
 800dabc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dac0:	e7f9      	b.n	800dab6 <_strtod_l+0xaa6>
 800dac2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dac6:	9b04      	ldr	r3, [sp, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1a8      	bne.n	800da1e <_strtod_l+0xa0e>
 800dacc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dad2:	0d1b      	lsrs	r3, r3, #20
 800dad4:	051b      	lsls	r3, r3, #20
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d1a1      	bne.n	800da1e <_strtod_l+0xa0e>
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f3 f8fb 	bl	8000cd8 <__aeabi_d2lz>
 800dae2:	f7f2 fd6b 	bl	80005bc <__aeabi_l2d>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fbdb 	bl	80002a8 <__aeabi_dsub>
 800daf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800daf8:	ea43 030a 	orr.w	r3, r3, sl
 800dafc:	4313      	orrs	r3, r2
 800dafe:	4680      	mov	r8, r0
 800db00:	4689      	mov	r9, r1
 800db02:	d055      	beq.n	800dbb0 <_strtod_l+0xba0>
 800db04:	a336      	add	r3, pc, #216	; (adr r3, 800dbe0 <_strtod_l+0xbd0>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f7f2 fff7 	bl	8000afc <__aeabi_dcmplt>
 800db0e:	2800      	cmp	r0, #0
 800db10:	f47f acd0 	bne.w	800d4b4 <_strtod_l+0x4a4>
 800db14:	a334      	add	r3, pc, #208	; (adr r3, 800dbe8 <_strtod_l+0xbd8>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f3 f80b 	bl	8000b38 <__aeabi_dcmpgt>
 800db22:	2800      	cmp	r0, #0
 800db24:	f43f af7b 	beq.w	800da1e <_strtod_l+0xa0e>
 800db28:	e4c4      	b.n	800d4b4 <_strtod_l+0x4a4>
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	b333      	cbz	r3, 800db7c <_strtod_l+0xb6c>
 800db2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db34:	d822      	bhi.n	800db7c <_strtod_l+0xb6c>
 800db36:	a32e      	add	r3, pc, #184	; (adr r3, 800dbf0 <_strtod_l+0xbe0>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	4640      	mov	r0, r8
 800db3e:	4649      	mov	r1, r9
 800db40:	f7f2 ffe6 	bl	8000b10 <__aeabi_dcmple>
 800db44:	b1a0      	cbz	r0, 800db70 <_strtod_l+0xb60>
 800db46:	4649      	mov	r1, r9
 800db48:	4640      	mov	r0, r8
 800db4a:	f7f3 f83d 	bl	8000bc8 <__aeabi_d2uiz>
 800db4e:	2801      	cmp	r0, #1
 800db50:	bf38      	it	cc
 800db52:	2001      	movcc	r0, #1
 800db54:	f7f2 fce6 	bl	8000524 <__aeabi_ui2d>
 800db58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db5a:	4680      	mov	r8, r0
 800db5c:	4689      	mov	r9, r1
 800db5e:	bb23      	cbnz	r3, 800dbaa <_strtod_l+0xb9a>
 800db60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db64:	9010      	str	r0, [sp, #64]	; 0x40
 800db66:	9311      	str	r3, [sp, #68]	; 0x44
 800db68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	9309      	str	r3, [sp, #36]	; 0x24
 800db7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db80:	eeb0 0a48 	vmov.f32	s0, s16
 800db84:	eef0 0a68 	vmov.f32	s1, s17
 800db88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db8c:	f002 f9ae 	bl	800feec <__ulp>
 800db90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db94:	ec53 2b10 	vmov	r2, r3, d0
 800db98:	f7f2 fd3e 	bl	8000618 <__aeabi_dmul>
 800db9c:	ec53 2b18 	vmov	r2, r3, d8
 800dba0:	f7f2 fb84 	bl	80002ac <__adddf3>
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	e78d      	b.n	800dac6 <_strtod_l+0xab6>
 800dbaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dbae:	e7db      	b.n	800db68 <_strtod_l+0xb58>
 800dbb0:	a311      	add	r3, pc, #68	; (adr r3, 800dbf8 <_strtod_l+0xbe8>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 ffa1 	bl	8000afc <__aeabi_dcmplt>
 800dbba:	e7b2      	b.n	800db22 <_strtod_l+0xb12>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	930a      	str	r3, [sp, #40]	; 0x28
 800dbc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dbc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	f7ff ba6b 	b.w	800d0a0 <_strtod_l+0x90>
 800dbca:	2a65      	cmp	r2, #101	; 0x65
 800dbcc:	f43f ab5f 	beq.w	800d28e <_strtod_l+0x27e>
 800dbd0:	2a45      	cmp	r2, #69	; 0x45
 800dbd2:	f43f ab5c 	beq.w	800d28e <_strtod_l+0x27e>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f7ff bb94 	b.w	800d304 <_strtod_l+0x2f4>
 800dbdc:	f3af 8000 	nop.w
 800dbe0:	94a03595 	.word	0x94a03595
 800dbe4:	3fdfffff 	.word	0x3fdfffff
 800dbe8:	35afe535 	.word	0x35afe535
 800dbec:	3fe00000 	.word	0x3fe00000
 800dbf0:	ffc00000 	.word	0xffc00000
 800dbf4:	41dfffff 	.word	0x41dfffff
 800dbf8:	94a03595 	.word	0x94a03595
 800dbfc:	3fcfffff 	.word	0x3fcfffff
 800dc00:	3ff00000 	.word	0x3ff00000
 800dc04:	7ff00000 	.word	0x7ff00000
 800dc08:	7fe00000 	.word	0x7fe00000
 800dc0c:	7c9fffff 	.word	0x7c9fffff
 800dc10:	3fe00000 	.word	0x3fe00000
 800dc14:	bff00000 	.word	0xbff00000
 800dc18:	7fefffff 	.word	0x7fefffff

0800dc1c <_strtod_r>:
 800dc1c:	4b01      	ldr	r3, [pc, #4]	; (800dc24 <_strtod_r+0x8>)
 800dc1e:	f7ff b9f7 	b.w	800d010 <_strtod_l>
 800dc22:	bf00      	nop
 800dc24:	200000ec 	.word	0x200000ec

0800dc28 <_strtol_l.constprop.0>:
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc2e:	d001      	beq.n	800dc34 <_strtol_l.constprop.0+0xc>
 800dc30:	2b24      	cmp	r3, #36	; 0x24
 800dc32:	d906      	bls.n	800dc42 <_strtol_l.constprop.0+0x1a>
 800dc34:	f7fd ffe2 	bl	800bbfc <__errno>
 800dc38:	2316      	movs	r3, #22
 800dc3a:	6003      	str	r3, [r0, #0]
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd28 <_strtol_l.constprop.0+0x100>
 800dc46:	460d      	mov	r5, r1
 800dc48:	462e      	mov	r6, r5
 800dc4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dc52:	f017 0708 	ands.w	r7, r7, #8
 800dc56:	d1f7      	bne.n	800dc48 <_strtol_l.constprop.0+0x20>
 800dc58:	2c2d      	cmp	r4, #45	; 0x2d
 800dc5a:	d132      	bne.n	800dcc2 <_strtol_l.constprop.0+0x9a>
 800dc5c:	782c      	ldrb	r4, [r5, #0]
 800dc5e:	2701      	movs	r7, #1
 800dc60:	1cb5      	adds	r5, r6, #2
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d05b      	beq.n	800dd1e <_strtol_l.constprop.0+0xf6>
 800dc66:	2b10      	cmp	r3, #16
 800dc68:	d109      	bne.n	800dc7e <_strtol_l.constprop.0+0x56>
 800dc6a:	2c30      	cmp	r4, #48	; 0x30
 800dc6c:	d107      	bne.n	800dc7e <_strtol_l.constprop.0+0x56>
 800dc6e:	782c      	ldrb	r4, [r5, #0]
 800dc70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc74:	2c58      	cmp	r4, #88	; 0x58
 800dc76:	d14d      	bne.n	800dd14 <_strtol_l.constprop.0+0xec>
 800dc78:	786c      	ldrb	r4, [r5, #1]
 800dc7a:	2310      	movs	r3, #16
 800dc7c:	3502      	adds	r5, #2
 800dc7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dc82:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc86:	f04f 0c00 	mov.w	ip, #0
 800dc8a:	fbb8 f9f3 	udiv	r9, r8, r3
 800dc8e:	4666      	mov	r6, ip
 800dc90:	fb03 8a19 	mls	sl, r3, r9, r8
 800dc94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dc98:	f1be 0f09 	cmp.w	lr, #9
 800dc9c:	d816      	bhi.n	800dccc <_strtol_l.constprop.0+0xa4>
 800dc9e:	4674      	mov	r4, lr
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	dd24      	ble.n	800dcee <_strtol_l.constprop.0+0xc6>
 800dca4:	f1bc 0f00 	cmp.w	ip, #0
 800dca8:	db1e      	blt.n	800dce8 <_strtol_l.constprop.0+0xc0>
 800dcaa:	45b1      	cmp	r9, r6
 800dcac:	d31c      	bcc.n	800dce8 <_strtol_l.constprop.0+0xc0>
 800dcae:	d101      	bne.n	800dcb4 <_strtol_l.constprop.0+0x8c>
 800dcb0:	45a2      	cmp	sl, r4
 800dcb2:	db19      	blt.n	800dce8 <_strtol_l.constprop.0+0xc0>
 800dcb4:	fb06 4603 	mla	r6, r6, r3, r4
 800dcb8:	f04f 0c01 	mov.w	ip, #1
 800dcbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcc0:	e7e8      	b.n	800dc94 <_strtol_l.constprop.0+0x6c>
 800dcc2:	2c2b      	cmp	r4, #43	; 0x2b
 800dcc4:	bf04      	itt	eq
 800dcc6:	782c      	ldrbeq	r4, [r5, #0]
 800dcc8:	1cb5      	addeq	r5, r6, #2
 800dcca:	e7ca      	b.n	800dc62 <_strtol_l.constprop.0+0x3a>
 800dccc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dcd0:	f1be 0f19 	cmp.w	lr, #25
 800dcd4:	d801      	bhi.n	800dcda <_strtol_l.constprop.0+0xb2>
 800dcd6:	3c37      	subs	r4, #55	; 0x37
 800dcd8:	e7e2      	b.n	800dca0 <_strtol_l.constprop.0+0x78>
 800dcda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dcde:	f1be 0f19 	cmp.w	lr, #25
 800dce2:	d804      	bhi.n	800dcee <_strtol_l.constprop.0+0xc6>
 800dce4:	3c57      	subs	r4, #87	; 0x57
 800dce6:	e7db      	b.n	800dca0 <_strtol_l.constprop.0+0x78>
 800dce8:	f04f 3cff 	mov.w	ip, #4294967295
 800dcec:	e7e6      	b.n	800dcbc <_strtol_l.constprop.0+0x94>
 800dcee:	f1bc 0f00 	cmp.w	ip, #0
 800dcf2:	da05      	bge.n	800dd00 <_strtol_l.constprop.0+0xd8>
 800dcf4:	2322      	movs	r3, #34	; 0x22
 800dcf6:	6003      	str	r3, [r0, #0]
 800dcf8:	4646      	mov	r6, r8
 800dcfa:	b942      	cbnz	r2, 800dd0e <_strtol_l.constprop.0+0xe6>
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	e79e      	b.n	800dc3e <_strtol_l.constprop.0+0x16>
 800dd00:	b107      	cbz	r7, 800dd04 <_strtol_l.constprop.0+0xdc>
 800dd02:	4276      	negs	r6, r6
 800dd04:	2a00      	cmp	r2, #0
 800dd06:	d0f9      	beq.n	800dcfc <_strtol_l.constprop.0+0xd4>
 800dd08:	f1bc 0f00 	cmp.w	ip, #0
 800dd0c:	d000      	beq.n	800dd10 <_strtol_l.constprop.0+0xe8>
 800dd0e:	1e69      	subs	r1, r5, #1
 800dd10:	6011      	str	r1, [r2, #0]
 800dd12:	e7f3      	b.n	800dcfc <_strtol_l.constprop.0+0xd4>
 800dd14:	2430      	movs	r4, #48	; 0x30
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1b1      	bne.n	800dc7e <_strtol_l.constprop.0+0x56>
 800dd1a:	2308      	movs	r3, #8
 800dd1c:	e7af      	b.n	800dc7e <_strtol_l.constprop.0+0x56>
 800dd1e:	2c30      	cmp	r4, #48	; 0x30
 800dd20:	d0a5      	beq.n	800dc6e <_strtol_l.constprop.0+0x46>
 800dd22:	230a      	movs	r3, #10
 800dd24:	e7ab      	b.n	800dc7e <_strtol_l.constprop.0+0x56>
 800dd26:	bf00      	nop
 800dd28:	08011c55 	.word	0x08011c55

0800dd2c <_strtol_r>:
 800dd2c:	f7ff bf7c 	b.w	800dc28 <_strtol_l.constprop.0>

0800dd30 <strtol>:
 800dd30:	4613      	mov	r3, r2
 800dd32:	460a      	mov	r2, r1
 800dd34:	4601      	mov	r1, r0
 800dd36:	4802      	ldr	r0, [pc, #8]	; (800dd40 <strtol+0x10>)
 800dd38:	6800      	ldr	r0, [r0, #0]
 800dd3a:	f7ff bf75 	b.w	800dc28 <_strtol_l.constprop.0>
 800dd3e:	bf00      	nop
 800dd40:	20000020 	.word	0x20000020

0800dd44 <_strtoul_l.constprop.0>:
 800dd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4f36      	ldr	r7, [pc, #216]	; (800de24 <_strtoul_l.constprop.0+0xe0>)
 800dd4a:	4686      	mov	lr, r0
 800dd4c:	460d      	mov	r5, r1
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd54:	5de6      	ldrb	r6, [r4, r7]
 800dd56:	f016 0608 	ands.w	r6, r6, #8
 800dd5a:	d1f8      	bne.n	800dd4e <_strtoul_l.constprop.0+0xa>
 800dd5c:	2c2d      	cmp	r4, #45	; 0x2d
 800dd5e:	d12f      	bne.n	800ddc0 <_strtoul_l.constprop.0+0x7c>
 800dd60:	782c      	ldrb	r4, [r5, #0]
 800dd62:	2601      	movs	r6, #1
 800dd64:	1c85      	adds	r5, r0, #2
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d057      	beq.n	800de1a <_strtoul_l.constprop.0+0xd6>
 800dd6a:	2b10      	cmp	r3, #16
 800dd6c:	d109      	bne.n	800dd82 <_strtoul_l.constprop.0+0x3e>
 800dd6e:	2c30      	cmp	r4, #48	; 0x30
 800dd70:	d107      	bne.n	800dd82 <_strtoul_l.constprop.0+0x3e>
 800dd72:	7828      	ldrb	r0, [r5, #0]
 800dd74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dd78:	2858      	cmp	r0, #88	; 0x58
 800dd7a:	d149      	bne.n	800de10 <_strtoul_l.constprop.0+0xcc>
 800dd7c:	786c      	ldrb	r4, [r5, #1]
 800dd7e:	2310      	movs	r3, #16
 800dd80:	3502      	adds	r5, #2
 800dd82:	f04f 38ff 	mov.w	r8, #4294967295
 800dd86:	2700      	movs	r7, #0
 800dd88:	fbb8 f8f3 	udiv	r8, r8, r3
 800dd8c:	fb03 f908 	mul.w	r9, r3, r8
 800dd90:	ea6f 0909 	mvn.w	r9, r9
 800dd94:	4638      	mov	r0, r7
 800dd96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd9a:	f1bc 0f09 	cmp.w	ip, #9
 800dd9e:	d814      	bhi.n	800ddca <_strtoul_l.constprop.0+0x86>
 800dda0:	4664      	mov	r4, ip
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	dd22      	ble.n	800ddec <_strtoul_l.constprop.0+0xa8>
 800dda6:	2f00      	cmp	r7, #0
 800dda8:	db1d      	blt.n	800dde6 <_strtoul_l.constprop.0+0xa2>
 800ddaa:	4580      	cmp	r8, r0
 800ddac:	d31b      	bcc.n	800dde6 <_strtoul_l.constprop.0+0xa2>
 800ddae:	d101      	bne.n	800ddb4 <_strtoul_l.constprop.0+0x70>
 800ddb0:	45a1      	cmp	r9, r4
 800ddb2:	db18      	blt.n	800dde6 <_strtoul_l.constprop.0+0xa2>
 800ddb4:	fb00 4003 	mla	r0, r0, r3, r4
 800ddb8:	2701      	movs	r7, #1
 800ddba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddbe:	e7ea      	b.n	800dd96 <_strtoul_l.constprop.0+0x52>
 800ddc0:	2c2b      	cmp	r4, #43	; 0x2b
 800ddc2:	bf04      	itt	eq
 800ddc4:	782c      	ldrbeq	r4, [r5, #0]
 800ddc6:	1c85      	addeq	r5, r0, #2
 800ddc8:	e7cd      	b.n	800dd66 <_strtoul_l.constprop.0+0x22>
 800ddca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ddce:	f1bc 0f19 	cmp.w	ip, #25
 800ddd2:	d801      	bhi.n	800ddd8 <_strtoul_l.constprop.0+0x94>
 800ddd4:	3c37      	subs	r4, #55	; 0x37
 800ddd6:	e7e4      	b.n	800dda2 <_strtoul_l.constprop.0+0x5e>
 800ddd8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dddc:	f1bc 0f19 	cmp.w	ip, #25
 800dde0:	d804      	bhi.n	800ddec <_strtoul_l.constprop.0+0xa8>
 800dde2:	3c57      	subs	r4, #87	; 0x57
 800dde4:	e7dd      	b.n	800dda2 <_strtoul_l.constprop.0+0x5e>
 800dde6:	f04f 37ff 	mov.w	r7, #4294967295
 800ddea:	e7e6      	b.n	800ddba <_strtoul_l.constprop.0+0x76>
 800ddec:	2f00      	cmp	r7, #0
 800ddee:	da07      	bge.n	800de00 <_strtoul_l.constprop.0+0xbc>
 800ddf0:	2322      	movs	r3, #34	; 0x22
 800ddf2:	f8ce 3000 	str.w	r3, [lr]
 800ddf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfa:	b932      	cbnz	r2, 800de0a <_strtoul_l.constprop.0+0xc6>
 800ddfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de00:	b106      	cbz	r6, 800de04 <_strtoul_l.constprop.0+0xc0>
 800de02:	4240      	negs	r0, r0
 800de04:	2a00      	cmp	r2, #0
 800de06:	d0f9      	beq.n	800ddfc <_strtoul_l.constprop.0+0xb8>
 800de08:	b107      	cbz	r7, 800de0c <_strtoul_l.constprop.0+0xc8>
 800de0a:	1e69      	subs	r1, r5, #1
 800de0c:	6011      	str	r1, [r2, #0]
 800de0e:	e7f5      	b.n	800ddfc <_strtoul_l.constprop.0+0xb8>
 800de10:	2430      	movs	r4, #48	; 0x30
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1b5      	bne.n	800dd82 <_strtoul_l.constprop.0+0x3e>
 800de16:	2308      	movs	r3, #8
 800de18:	e7b3      	b.n	800dd82 <_strtoul_l.constprop.0+0x3e>
 800de1a:	2c30      	cmp	r4, #48	; 0x30
 800de1c:	d0a9      	beq.n	800dd72 <_strtoul_l.constprop.0+0x2e>
 800de1e:	230a      	movs	r3, #10
 800de20:	e7af      	b.n	800dd82 <_strtoul_l.constprop.0+0x3e>
 800de22:	bf00      	nop
 800de24:	08011c55 	.word	0x08011c55

0800de28 <_strtoul_r>:
 800de28:	f7ff bf8c 	b.w	800dd44 <_strtoul_l.constprop.0>

0800de2c <strtoul>:
 800de2c:	4613      	mov	r3, r2
 800de2e:	460a      	mov	r2, r1
 800de30:	4601      	mov	r1, r0
 800de32:	4802      	ldr	r0, [pc, #8]	; (800de3c <strtoul+0x10>)
 800de34:	6800      	ldr	r0, [r0, #0]
 800de36:	f7ff bf85 	b.w	800dd44 <_strtoul_l.constprop.0>
 800de3a:	bf00      	nop
 800de3c:	20000020 	.word	0x20000020

0800de40 <__tzcalc_limits>:
 800de40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	4605      	mov	r5, r0
 800de46:	f001 fc9d 	bl	800f784 <__gettzinfo>
 800de4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800de4e:	429d      	cmp	r5, r3
 800de50:	f340 8099 	ble.w	800df86 <__tzcalc_limits+0x146>
 800de54:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800de58:	18ac      	adds	r4, r5, r2
 800de5a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800de5e:	f240 126d 	movw	r2, #365	; 0x16d
 800de62:	10a4      	asrs	r4, r4, #2
 800de64:	fb02 4403 	mla	r4, r2, r3, r4
 800de68:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800de6c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800de70:	fb93 f3f2 	sdiv	r3, r3, r2
 800de74:	441c      	add	r4, r3
 800de76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800de7a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800de7e:	fb95 fcf3 	sdiv	ip, r5, r3
 800de82:	fb03 5c1c 	mls	ip, r3, ip, r5
 800de86:	186a      	adds	r2, r5, r1
 800de88:	fabc f68c 	clz	r6, ip
 800de8c:	fbb2 f2f3 	udiv	r2, r2, r3
 800de90:	f005 0303 	and.w	r3, r5, #3
 800de94:	4414      	add	r4, r2
 800de96:	2264      	movs	r2, #100	; 0x64
 800de98:	6045      	str	r5, [r0, #4]
 800de9a:	fb95 f7f2 	sdiv	r7, r5, r2
 800de9e:	0976      	lsrs	r6, r6, #5
 800dea0:	fb02 5717 	mls	r7, r2, r7, r5
 800dea4:	4601      	mov	r1, r0
 800dea6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	f04f 0a07 	mov.w	sl, #7
 800deb0:	7a0d      	ldrb	r5, [r1, #8]
 800deb2:	694b      	ldr	r3, [r1, #20]
 800deb4:	2d4a      	cmp	r5, #74	; 0x4a
 800deb6:	d12d      	bne.n	800df14 <__tzcalc_limits+0xd4>
 800deb8:	9a00      	ldr	r2, [sp, #0]
 800deba:	eb04 0e03 	add.w	lr, r4, r3
 800debe:	b902      	cbnz	r2, 800dec2 <__tzcalc_limits+0x82>
 800dec0:	b917      	cbnz	r7, 800dec8 <__tzcalc_limits+0x88>
 800dec2:	f1bc 0f00 	cmp.w	ip, #0
 800dec6:	d123      	bne.n	800df10 <__tzcalc_limits+0xd0>
 800dec8:	2b3b      	cmp	r3, #59	; 0x3b
 800deca:	bfd4      	ite	le
 800decc:	2300      	movle	r3, #0
 800dece:	2301      	movgt	r3, #1
 800ded0:	4473      	add	r3, lr
 800ded2:	3b01      	subs	r3, #1
 800ded4:	698d      	ldr	r5, [r1, #24]
 800ded6:	4a2d      	ldr	r2, [pc, #180]	; (800df8c <__tzcalc_limits+0x14c>)
 800ded8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800dedc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800dee0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800dee2:	18ed      	adds	r5, r5, r3
 800dee4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800dee8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800deec:	3128      	adds	r1, #40	; 0x28
 800deee:	458b      	cmp	fp, r1
 800def0:	d1de      	bne.n	800deb0 <__tzcalc_limits+0x70>
 800def2:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800def6:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800defa:	428c      	cmp	r4, r1
 800defc:	eb72 0303 	sbcs.w	r3, r2, r3
 800df00:	bfb4      	ite	lt
 800df02:	2301      	movlt	r3, #1
 800df04:	2300      	movge	r3, #0
 800df06:	6003      	str	r3, [r0, #0]
 800df08:	2001      	movs	r0, #1
 800df0a:	b003      	add	sp, #12
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	2300      	movs	r3, #0
 800df12:	e7dd      	b.n	800ded0 <__tzcalc_limits+0x90>
 800df14:	2d44      	cmp	r5, #68	; 0x44
 800df16:	d101      	bne.n	800df1c <__tzcalc_limits+0xdc>
 800df18:	4423      	add	r3, r4
 800df1a:	e7db      	b.n	800ded4 <__tzcalc_limits+0x94>
 800df1c:	9a00      	ldr	r2, [sp, #0]
 800df1e:	bb62      	cbnz	r2, 800df7a <__tzcalc_limits+0x13a>
 800df20:	2f00      	cmp	r7, #0
 800df22:	bf0c      	ite	eq
 800df24:	4635      	moveq	r5, r6
 800df26:	2501      	movne	r5, #1
 800df28:	68ca      	ldr	r2, [r1, #12]
 800df2a:	9201      	str	r2, [sp, #4]
 800df2c:	4a18      	ldr	r2, [pc, #96]	; (800df90 <__tzcalc_limits+0x150>)
 800df2e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800df32:	fb09 2505 	mla	r5, r9, r5, r2
 800df36:	46a6      	mov	lr, r4
 800df38:	f04f 0800 	mov.w	r8, #0
 800df3c:	3d04      	subs	r5, #4
 800df3e:	9a01      	ldr	r2, [sp, #4]
 800df40:	f108 0801 	add.w	r8, r8, #1
 800df44:	4542      	cmp	r2, r8
 800df46:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800df4a:	dc18      	bgt.n	800df7e <__tzcalc_limits+0x13e>
 800df4c:	f10e 0504 	add.w	r5, lr, #4
 800df50:	fb95 f8fa 	sdiv	r8, r5, sl
 800df54:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800df58:	eba5 0808 	sub.w	r8, r5, r8
 800df5c:	ebb3 0808 	subs.w	r8, r3, r8
 800df60:	690b      	ldr	r3, [r1, #16]
 800df62:	f103 33ff 	add.w	r3, r3, #4294967295
 800df66:	bf48      	it	mi
 800df68:	f108 0807 	addmi.w	r8, r8, #7
 800df6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800df70:	4443      	add	r3, r8
 800df72:	454b      	cmp	r3, r9
 800df74:	da05      	bge.n	800df82 <__tzcalc_limits+0x142>
 800df76:	4473      	add	r3, lr
 800df78:	e7ac      	b.n	800ded4 <__tzcalc_limits+0x94>
 800df7a:	4635      	mov	r5, r6
 800df7c:	e7d4      	b.n	800df28 <__tzcalc_limits+0xe8>
 800df7e:	44ce      	add	lr, r9
 800df80:	e7dd      	b.n	800df3e <__tzcalc_limits+0xfe>
 800df82:	3b07      	subs	r3, #7
 800df84:	e7f5      	b.n	800df72 <__tzcalc_limits+0x132>
 800df86:	2000      	movs	r0, #0
 800df88:	e7bf      	b.n	800df0a <__tzcalc_limits+0xca>
 800df8a:	bf00      	nop
 800df8c:	00015180 	.word	0x00015180
 800df90:	08011e60 	.word	0x08011e60

0800df94 <__tz_lock>:
 800df94:	4801      	ldr	r0, [pc, #4]	; (800df9c <__tz_lock+0x8>)
 800df96:	f001 bbfe 	b.w	800f796 <__retarget_lock_acquire>
 800df9a:	bf00      	nop
 800df9c:	200068b4 	.word	0x200068b4

0800dfa0 <__tz_unlock>:
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__tz_unlock+0x8>)
 800dfa2:	f001 bbfa 	b.w	800f79a <__retarget_lock_release>
 800dfa6:	bf00      	nop
 800dfa8:	200068b4 	.word	0x200068b4

0800dfac <_tzset_unlocked>:
 800dfac:	4b01      	ldr	r3, [pc, #4]	; (800dfb4 <_tzset_unlocked+0x8>)
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	f000 b802 	b.w	800dfb8 <_tzset_unlocked_r>
 800dfb4:	20000020 	.word	0x20000020

0800dfb8 <_tzset_unlocked_r>:
 800dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfbc:	b08d      	sub	sp, #52	; 0x34
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	f001 fbe0 	bl	800f784 <__gettzinfo>
 800dfc4:	49b0      	ldr	r1, [pc, #704]	; (800e288 <_tzset_unlocked_r+0x2d0>)
 800dfc6:	4eb1      	ldr	r6, [pc, #708]	; (800e28c <_tzset_unlocked_r+0x2d4>)
 800dfc8:	4605      	mov	r5, r0
 800dfca:	4638      	mov	r0, r7
 800dfcc:	f001 fbd2 	bl	800f774 <_getenv_r>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	b970      	cbnz	r0, 800dff2 <_tzset_unlocked_r+0x3a>
 800dfd4:	4bae      	ldr	r3, [pc, #696]	; (800e290 <_tzset_unlocked_r+0x2d8>)
 800dfd6:	4aaf      	ldr	r2, [pc, #700]	; (800e294 <_tzset_unlocked_r+0x2dc>)
 800dfd8:	6018      	str	r0, [r3, #0]
 800dfda:	4baf      	ldr	r3, [pc, #700]	; (800e298 <_tzset_unlocked_r+0x2e0>)
 800dfdc:	6018      	str	r0, [r3, #0]
 800dfde:	4baf      	ldr	r3, [pc, #700]	; (800e29c <_tzset_unlocked_r+0x2e4>)
 800dfe0:	6830      	ldr	r0, [r6, #0]
 800dfe2:	e9c3 2200 	strd	r2, r2, [r3]
 800dfe6:	f001 fbf5 	bl	800f7d4 <free>
 800dfea:	6034      	str	r4, [r6, #0]
 800dfec:	b00d      	add	sp, #52	; 0x34
 800dfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff2:	6831      	ldr	r1, [r6, #0]
 800dff4:	2900      	cmp	r1, #0
 800dff6:	d162      	bne.n	800e0be <_tzset_unlocked_r+0x106>
 800dff8:	6830      	ldr	r0, [r6, #0]
 800dffa:	f001 fbeb 	bl	800f7d4 <free>
 800dffe:	4620      	mov	r0, r4
 800e000:	f7f2 f8f0 	bl	80001e4 <strlen>
 800e004:	1c41      	adds	r1, r0, #1
 800e006:	4638      	mov	r0, r7
 800e008:	f002 f942 	bl	8010290 <_malloc_r>
 800e00c:	6030      	str	r0, [r6, #0]
 800e00e:	2800      	cmp	r0, #0
 800e010:	d15a      	bne.n	800e0c8 <_tzset_unlocked_r+0x110>
 800e012:	7823      	ldrb	r3, [r4, #0]
 800e014:	4aa2      	ldr	r2, [pc, #648]	; (800e2a0 <_tzset_unlocked_r+0x2e8>)
 800e016:	49a3      	ldr	r1, [pc, #652]	; (800e2a4 <_tzset_unlocked_r+0x2ec>)
 800e018:	2b3a      	cmp	r3, #58	; 0x3a
 800e01a:	bf08      	it	eq
 800e01c:	3401      	addeq	r4, #1
 800e01e:	ae0a      	add	r6, sp, #40	; 0x28
 800e020:	4633      	mov	r3, r6
 800e022:	4620      	mov	r0, r4
 800e024:	f7fe ff3c 	bl	800cea0 <siscanf>
 800e028:	2800      	cmp	r0, #0
 800e02a:	dddf      	ble.n	800dfec <_tzset_unlocked_r+0x34>
 800e02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e02e:	18e7      	adds	r7, r4, r3
 800e030:	5ce3      	ldrb	r3, [r4, r3]
 800e032:	2b2d      	cmp	r3, #45	; 0x2d
 800e034:	d14c      	bne.n	800e0d0 <_tzset_unlocked_r+0x118>
 800e036:	3701      	adds	r7, #1
 800e038:	f04f 38ff 	mov.w	r8, #4294967295
 800e03c:	f10d 0a20 	add.w	sl, sp, #32
 800e040:	f10d 0b1e 	add.w	fp, sp, #30
 800e044:	2400      	movs	r4, #0
 800e046:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e04a:	4997      	ldr	r1, [pc, #604]	; (800e2a8 <_tzset_unlocked_r+0x2f0>)
 800e04c:	9603      	str	r6, [sp, #12]
 800e04e:	f8cd b000 	str.w	fp, [sp]
 800e052:	4633      	mov	r3, r6
 800e054:	aa07      	add	r2, sp, #28
 800e056:	4638      	mov	r0, r7
 800e058:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e05c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e060:	f7fe ff1e 	bl	800cea0 <siscanf>
 800e064:	42a0      	cmp	r0, r4
 800e066:	ddc1      	ble.n	800dfec <_tzset_unlocked_r+0x34>
 800e068:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e06c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e070:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800e2b4 <_tzset_unlocked_r+0x2fc>
 800e074:	213c      	movs	r1, #60	; 0x3c
 800e076:	fb01 3302 	mla	r3, r1, r2, r3
 800e07a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e07e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e082:	fb01 3302 	mla	r3, r1, r2, r3
 800e086:	fb08 f303 	mul.w	r3, r8, r3
 800e08a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e29c <_tzset_unlocked_r+0x2e4>
 800e08e:	62ab      	str	r3, [r5, #40]	; 0x28
 800e090:	4b83      	ldr	r3, [pc, #524]	; (800e2a0 <_tzset_unlocked_r+0x2e8>)
 800e092:	f8c8 3000 	str.w	r3, [r8]
 800e096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e098:	4982      	ldr	r1, [pc, #520]	; (800e2a4 <_tzset_unlocked_r+0x2ec>)
 800e09a:	441f      	add	r7, r3
 800e09c:	464a      	mov	r2, r9
 800e09e:	4633      	mov	r3, r6
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f7fe fefd 	bl	800cea0 <siscanf>
 800e0a6:	42a0      	cmp	r0, r4
 800e0a8:	dc18      	bgt.n	800e0dc <_tzset_unlocked_r+0x124>
 800e0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0b2:	4b77      	ldr	r3, [pc, #476]	; (800e290 <_tzset_unlocked_r+0x2d8>)
 800e0b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	4b77      	ldr	r3, [pc, #476]	; (800e298 <_tzset_unlocked_r+0x2e0>)
 800e0ba:	601c      	str	r4, [r3, #0]
 800e0bc:	e796      	b.n	800dfec <_tzset_unlocked_r+0x34>
 800e0be:	f7f2 f887 	bl	80001d0 <strcmp>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d198      	bne.n	800dff8 <_tzset_unlocked_r+0x40>
 800e0c6:	e791      	b.n	800dfec <_tzset_unlocked_r+0x34>
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	f7fe ff67 	bl	800cf9c <strcpy>
 800e0ce:	e7a0      	b.n	800e012 <_tzset_unlocked_r+0x5a>
 800e0d0:	2b2b      	cmp	r3, #43	; 0x2b
 800e0d2:	bf08      	it	eq
 800e0d4:	3701      	addeq	r7, #1
 800e0d6:	f04f 0801 	mov.w	r8, #1
 800e0da:	e7af      	b.n	800e03c <_tzset_unlocked_r+0x84>
 800e0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0de:	f8c8 9004 	str.w	r9, [r8, #4]
 800e0e2:	18fc      	adds	r4, r7, r3
 800e0e4:	5cfb      	ldrb	r3, [r7, r3]
 800e0e6:	2b2d      	cmp	r3, #45	; 0x2d
 800e0e8:	f040 808b 	bne.w	800e202 <_tzset_unlocked_r+0x24a>
 800e0ec:	3401      	adds	r4, #1
 800e0ee:	f04f 37ff 	mov.w	r7, #4294967295
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e0f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e0fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e100:	930a      	str	r3, [sp, #40]	; 0x28
 800e102:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e106:	e9cd b600 	strd	fp, r6, [sp]
 800e10a:	4967      	ldr	r1, [pc, #412]	; (800e2a8 <_tzset_unlocked_r+0x2f0>)
 800e10c:	4633      	mov	r3, r6
 800e10e:	aa07      	add	r2, sp, #28
 800e110:	4620      	mov	r0, r4
 800e112:	f7fe fec5 	bl	800cea0 <siscanf>
 800e116:	2800      	cmp	r0, #0
 800e118:	dc78      	bgt.n	800e20c <_tzset_unlocked_r+0x254>
 800e11a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e11c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800e120:	652b      	str	r3, [r5, #80]	; 0x50
 800e122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e124:	462f      	mov	r7, r5
 800e126:	441c      	add	r4, r3
 800e128:	f04f 0900 	mov.w	r9, #0
 800e12c:	7823      	ldrb	r3, [r4, #0]
 800e12e:	2b2c      	cmp	r3, #44	; 0x2c
 800e130:	bf08      	it	eq
 800e132:	3401      	addeq	r4, #1
 800e134:	f894 8000 	ldrb.w	r8, [r4]
 800e138:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800e13c:	d178      	bne.n	800e230 <_tzset_unlocked_r+0x278>
 800e13e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e142:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e146:	ab09      	add	r3, sp, #36	; 0x24
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	4958      	ldr	r1, [pc, #352]	; (800e2ac <_tzset_unlocked_r+0x2f4>)
 800e14c:	9603      	str	r6, [sp, #12]
 800e14e:	4633      	mov	r3, r6
 800e150:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e154:	4620      	mov	r0, r4
 800e156:	f7fe fea3 	bl	800cea0 <siscanf>
 800e15a:	2803      	cmp	r0, #3
 800e15c:	f47f af46 	bne.w	800dfec <_tzset_unlocked_r+0x34>
 800e160:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e164:	1e4b      	subs	r3, r1, #1
 800e166:	2b0b      	cmp	r3, #11
 800e168:	f63f af40 	bhi.w	800dfec <_tzset_unlocked_r+0x34>
 800e16c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e170:	1e53      	subs	r3, r2, #1
 800e172:	2b04      	cmp	r3, #4
 800e174:	f63f af3a 	bhi.w	800dfec <_tzset_unlocked_r+0x34>
 800e178:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e17c:	2b06      	cmp	r3, #6
 800e17e:	f63f af35 	bhi.w	800dfec <_tzset_unlocked_r+0x34>
 800e182:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e186:	f887 8008 	strb.w	r8, [r7, #8]
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e18e:	eb04 0803 	add.w	r8, r4, r3
 800e192:	2302      	movs	r3, #2
 800e194:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e198:	2300      	movs	r3, #0
 800e19a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e19e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a4:	f898 3000 	ldrb.w	r3, [r8]
 800e1a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e1aa:	d109      	bne.n	800e1c0 <_tzset_unlocked_r+0x208>
 800e1ac:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e1b0:	e9cd b600 	strd	fp, r6, [sp]
 800e1b4:	493e      	ldr	r1, [pc, #248]	; (800e2b0 <_tzset_unlocked_r+0x2f8>)
 800e1b6:	4633      	mov	r3, r6
 800e1b8:	aa07      	add	r2, sp, #28
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f7fe fe70 	bl	800cea0 <siscanf>
 800e1c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e1c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e1c8:	213c      	movs	r1, #60	; 0x3c
 800e1ca:	fb01 3302 	mla	r3, r1, r2, r3
 800e1ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e1d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e1d6:	fb01 3302 	mla	r3, r1, r2, r3
 800e1da:	61bb      	str	r3, [r7, #24]
 800e1dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e1de:	3728      	adds	r7, #40	; 0x28
 800e1e0:	4444      	add	r4, r8
 800e1e2:	f1b9 0f00 	cmp.w	r9, #0
 800e1e6:	d020      	beq.n	800e22a <_tzset_unlocked_r+0x272>
 800e1e8:	6868      	ldr	r0, [r5, #4]
 800e1ea:	f7ff fe29 	bl	800de40 <__tzcalc_limits>
 800e1ee:	4b28      	ldr	r3, [pc, #160]	; (800e290 <_tzset_unlocked_r+0x2d8>)
 800e1f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e1f6:	1a9b      	subs	r3, r3, r2
 800e1f8:	4a27      	ldr	r2, [pc, #156]	; (800e298 <_tzset_unlocked_r+0x2e0>)
 800e1fa:	bf18      	it	ne
 800e1fc:	2301      	movne	r3, #1
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	e6f4      	b.n	800dfec <_tzset_unlocked_r+0x34>
 800e202:	2b2b      	cmp	r3, #43	; 0x2b
 800e204:	bf08      	it	eq
 800e206:	3401      	addeq	r4, #1
 800e208:	2701      	movs	r7, #1
 800e20a:	e772      	b.n	800e0f2 <_tzset_unlocked_r+0x13a>
 800e20c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e210:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e214:	213c      	movs	r1, #60	; 0x3c
 800e216:	fb01 3302 	mla	r3, r1, r2, r3
 800e21a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e21e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e222:	fb01 3302 	mla	r3, r1, r2, r3
 800e226:	437b      	muls	r3, r7
 800e228:	e77a      	b.n	800e120 <_tzset_unlocked_r+0x168>
 800e22a:	f04f 0901 	mov.w	r9, #1
 800e22e:	e77d      	b.n	800e12c <_tzset_unlocked_r+0x174>
 800e230:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800e234:	bf06      	itte	eq
 800e236:	3401      	addeq	r4, #1
 800e238:	4643      	moveq	r3, r8
 800e23a:	2344      	movne	r3, #68	; 0x44
 800e23c:	220a      	movs	r2, #10
 800e23e:	a90b      	add	r1, sp, #44	; 0x2c
 800e240:	4620      	mov	r0, r4
 800e242:	9305      	str	r3, [sp, #20]
 800e244:	f7ff fdf2 	bl	800de2c <strtoul>
 800e248:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e24c:	9b05      	ldr	r3, [sp, #20]
 800e24e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e252:	45a0      	cmp	r8, r4
 800e254:	d114      	bne.n	800e280 <_tzset_unlocked_r+0x2c8>
 800e256:	234d      	movs	r3, #77	; 0x4d
 800e258:	f1b9 0f00 	cmp.w	r9, #0
 800e25c:	d107      	bne.n	800e26e <_tzset_unlocked_r+0x2b6>
 800e25e:	722b      	strb	r3, [r5, #8]
 800e260:	2103      	movs	r1, #3
 800e262:	2302      	movs	r3, #2
 800e264:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800e268:	f8c5 9014 	str.w	r9, [r5, #20]
 800e26c:	e791      	b.n	800e192 <_tzset_unlocked_r+0x1da>
 800e26e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800e272:	220b      	movs	r2, #11
 800e274:	2301      	movs	r3, #1
 800e276:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800e27a:	2300      	movs	r3, #0
 800e27c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e27e:	e788      	b.n	800e192 <_tzset_unlocked_r+0x1da>
 800e280:	b280      	uxth	r0, r0
 800e282:	723b      	strb	r3, [r7, #8]
 800e284:	6178      	str	r0, [r7, #20]
 800e286:	e784      	b.n	800e192 <_tzset_unlocked_r+0x1da>
 800e288:	08011c18 	.word	0x08011c18
 800e28c:	200068a4 	.word	0x200068a4
 800e290:	200068ac 	.word	0x200068ac
 800e294:	08011c1b 	.word	0x08011c1b
 800e298:	200068a8 	.word	0x200068a8
 800e29c:	20000084 	.word	0x20000084
 800e2a0:	20006897 	.word	0x20006897
 800e2a4:	08011c1f 	.word	0x08011c1f
 800e2a8:	08011c42 	.word	0x08011c42
 800e2ac:	08011c2e 	.word	0x08011c2e
 800e2b0:	08011c41 	.word	0x08011c41
 800e2b4:	2000688c 	.word	0x2000688c

0800e2b8 <_write_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d07      	ldr	r5, [pc, #28]	; (800e2d8 <_write_r+0x20>)
 800e2bc:	4604      	mov	r4, r0
 800e2be:	4608      	mov	r0, r1
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	602a      	str	r2, [r5, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f7f4 ffab 	bl	8003222 <_write>
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	d102      	bne.n	800e2d6 <_write_r+0x1e>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	b103      	cbz	r3, 800e2d6 <_write_r+0x1e>
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	200068c0 	.word	0x200068c0

0800e2dc <_close_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d06      	ldr	r5, [pc, #24]	; (800e2f8 <_close_r+0x1c>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	602b      	str	r3, [r5, #0]
 800e2e8:	f7f4 ffb7 	bl	800325a <_close>
 800e2ec:	1c43      	adds	r3, r0, #1
 800e2ee:	d102      	bne.n	800e2f6 <_close_r+0x1a>
 800e2f0:	682b      	ldr	r3, [r5, #0]
 800e2f2:	b103      	cbz	r3, 800e2f6 <_close_r+0x1a>
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	200068c0 	.word	0x200068c0

0800e2fc <div>:
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	b510      	push	{r4, lr}
 800e300:	fb91 f4f2 	sdiv	r4, r1, r2
 800e304:	fb02 1314 	mls	r3, r2, r4, r1
 800e308:	db06      	blt.n	800e318 <div+0x1c>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	da01      	bge.n	800e312 <div+0x16>
 800e30e:	3401      	adds	r4, #1
 800e310:	1a9b      	subs	r3, r3, r2
 800e312:	e9c0 4300 	strd	r4, r3, [r0]
 800e316:	bd10      	pop	{r4, pc}
 800e318:	2b00      	cmp	r3, #0
 800e31a:	bfc4      	itt	gt
 800e31c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e320:	189b      	addgt	r3, r3, r2
 800e322:	e7f6      	b.n	800e312 <div+0x16>

0800e324 <quorem>:
 800e324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e328:	6903      	ldr	r3, [r0, #16]
 800e32a:	690c      	ldr	r4, [r1, #16]
 800e32c:	42a3      	cmp	r3, r4
 800e32e:	4607      	mov	r7, r0
 800e330:	f2c0 8081 	blt.w	800e436 <quorem+0x112>
 800e334:	3c01      	subs	r4, #1
 800e336:	f101 0814 	add.w	r8, r1, #20
 800e33a:	f100 0514 	add.w	r5, r0, #20
 800e33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e34c:	3301      	adds	r3, #1
 800e34e:	429a      	cmp	r2, r3
 800e350:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e354:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e358:	fbb2 f6f3 	udiv	r6, r2, r3
 800e35c:	d331      	bcc.n	800e3c2 <quorem+0x9e>
 800e35e:	f04f 0e00 	mov.w	lr, #0
 800e362:	4640      	mov	r0, r8
 800e364:	46ac      	mov	ip, r5
 800e366:	46f2      	mov	sl, lr
 800e368:	f850 2b04 	ldr.w	r2, [r0], #4
 800e36c:	b293      	uxth	r3, r2
 800e36e:	fb06 e303 	mla	r3, r6, r3, lr
 800e372:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e376:	b29b      	uxth	r3, r3
 800e378:	ebaa 0303 	sub.w	r3, sl, r3
 800e37c:	f8dc a000 	ldr.w	sl, [ip]
 800e380:	0c12      	lsrs	r2, r2, #16
 800e382:	fa13 f38a 	uxtah	r3, r3, sl
 800e386:	fb06 e202 	mla	r2, r6, r2, lr
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	9b00      	ldr	r3, [sp, #0]
 800e38e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e392:	b292      	uxth	r2, r2
 800e394:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e39c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3a0:	4581      	cmp	r9, r0
 800e3a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3a6:	f84c 3b04 	str.w	r3, [ip], #4
 800e3aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3ae:	d2db      	bcs.n	800e368 <quorem+0x44>
 800e3b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3b4:	b92b      	cbnz	r3, 800e3c2 <quorem+0x9e>
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	429d      	cmp	r5, r3
 800e3bc:	461a      	mov	r2, r3
 800e3be:	d32e      	bcc.n	800e41e <quorem+0xfa>
 800e3c0:	613c      	str	r4, [r7, #16]
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	f001 fcec 	bl	800fda0 <__mcmp>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	db24      	blt.n	800e416 <quorem+0xf2>
 800e3cc:	3601      	adds	r6, #1
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f04f 0c00 	mov.w	ip, #0
 800e3d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3d8:	f8d0 e000 	ldr.w	lr, [r0]
 800e3dc:	b293      	uxth	r3, r2
 800e3de:	ebac 0303 	sub.w	r3, ip, r3
 800e3e2:	0c12      	lsrs	r2, r2, #16
 800e3e4:	fa13 f38e 	uxtah	r3, r3, lr
 800e3e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e3ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3f6:	45c1      	cmp	r9, r8
 800e3f8:	f840 3b04 	str.w	r3, [r0], #4
 800e3fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e400:	d2e8      	bcs.n	800e3d4 <quorem+0xb0>
 800e402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e40a:	b922      	cbnz	r2, 800e416 <quorem+0xf2>
 800e40c:	3b04      	subs	r3, #4
 800e40e:	429d      	cmp	r5, r3
 800e410:	461a      	mov	r2, r3
 800e412:	d30a      	bcc.n	800e42a <quorem+0x106>
 800e414:	613c      	str	r4, [r7, #16]
 800e416:	4630      	mov	r0, r6
 800e418:	b003      	add	sp, #12
 800e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41e:	6812      	ldr	r2, [r2, #0]
 800e420:	3b04      	subs	r3, #4
 800e422:	2a00      	cmp	r2, #0
 800e424:	d1cc      	bne.n	800e3c0 <quorem+0x9c>
 800e426:	3c01      	subs	r4, #1
 800e428:	e7c7      	b.n	800e3ba <quorem+0x96>
 800e42a:	6812      	ldr	r2, [r2, #0]
 800e42c:	3b04      	subs	r3, #4
 800e42e:	2a00      	cmp	r2, #0
 800e430:	d1f0      	bne.n	800e414 <quorem+0xf0>
 800e432:	3c01      	subs	r4, #1
 800e434:	e7eb      	b.n	800e40e <quorem+0xea>
 800e436:	2000      	movs	r0, #0
 800e438:	e7ee      	b.n	800e418 <quorem+0xf4>
 800e43a:	0000      	movs	r0, r0
 800e43c:	0000      	movs	r0, r0
	...

0800e440 <_dtoa_r>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	ed2d 8b04 	vpush	{d8-d9}
 800e448:	ec57 6b10 	vmov	r6, r7, d0
 800e44c:	b093      	sub	sp, #76	; 0x4c
 800e44e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e450:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e454:	9106      	str	r1, [sp, #24]
 800e456:	ee10 aa10 	vmov	sl, s0
 800e45a:	4604      	mov	r4, r0
 800e45c:	9209      	str	r2, [sp, #36]	; 0x24
 800e45e:	930c      	str	r3, [sp, #48]	; 0x30
 800e460:	46bb      	mov	fp, r7
 800e462:	b975      	cbnz	r5, 800e482 <_dtoa_r+0x42>
 800e464:	2010      	movs	r0, #16
 800e466:	f001 f9ad 	bl	800f7c4 <malloc>
 800e46a:	4602      	mov	r2, r0
 800e46c:	6260      	str	r0, [r4, #36]	; 0x24
 800e46e:	b920      	cbnz	r0, 800e47a <_dtoa_r+0x3a>
 800e470:	4ba7      	ldr	r3, [pc, #668]	; (800e710 <_dtoa_r+0x2d0>)
 800e472:	21ea      	movs	r1, #234	; 0xea
 800e474:	48a7      	ldr	r0, [pc, #668]	; (800e714 <_dtoa_r+0x2d4>)
 800e476:	f002 fcbf 	bl	8010df8 <__assert_func>
 800e47a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e47e:	6005      	str	r5, [r0, #0]
 800e480:	60c5      	str	r5, [r0, #12]
 800e482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e484:	6819      	ldr	r1, [r3, #0]
 800e486:	b151      	cbz	r1, 800e49e <_dtoa_r+0x5e>
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	604a      	str	r2, [r1, #4]
 800e48c:	2301      	movs	r3, #1
 800e48e:	4093      	lsls	r3, r2
 800e490:	608b      	str	r3, [r1, #8]
 800e492:	4620      	mov	r0, r4
 800e494:	f001 f9f8 	bl	800f888 <_Bfree>
 800e498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	1e3b      	subs	r3, r7, #0
 800e4a0:	bfaa      	itet	ge
 800e4a2:	2300      	movge	r3, #0
 800e4a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e4a8:	f8c8 3000 	strge.w	r3, [r8]
 800e4ac:	4b9a      	ldr	r3, [pc, #616]	; (800e718 <_dtoa_r+0x2d8>)
 800e4ae:	bfbc      	itt	lt
 800e4b0:	2201      	movlt	r2, #1
 800e4b2:	f8c8 2000 	strlt.w	r2, [r8]
 800e4b6:	ea33 030b 	bics.w	r3, r3, fp
 800e4ba:	d11b      	bne.n	800e4f4 <_dtoa_r+0xb4>
 800e4bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4be:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4c8:	4333      	orrs	r3, r6
 800e4ca:	f000 8592 	beq.w	800eff2 <_dtoa_r+0xbb2>
 800e4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d0:	b963      	cbnz	r3, 800e4ec <_dtoa_r+0xac>
 800e4d2:	4b92      	ldr	r3, [pc, #584]	; (800e71c <_dtoa_r+0x2dc>)
 800e4d4:	e022      	b.n	800e51c <_dtoa_r+0xdc>
 800e4d6:	4b92      	ldr	r3, [pc, #584]	; (800e720 <_dtoa_r+0x2e0>)
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	3308      	adds	r3, #8
 800e4dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4de:	6013      	str	r3, [r2, #0]
 800e4e0:	9801      	ldr	r0, [sp, #4]
 800e4e2:	b013      	add	sp, #76	; 0x4c
 800e4e4:	ecbd 8b04 	vpop	{d8-d9}
 800e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ec:	4b8b      	ldr	r3, [pc, #556]	; (800e71c <_dtoa_r+0x2dc>)
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	3303      	adds	r3, #3
 800e4f2:	e7f3      	b.n	800e4dc <_dtoa_r+0x9c>
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	4650      	mov	r0, sl
 800e4fa:	4659      	mov	r1, fp
 800e4fc:	f7f2 faf4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e500:	ec4b ab19 	vmov	d9, sl, fp
 800e504:	4680      	mov	r8, r0
 800e506:	b158      	cbz	r0, 800e520 <_dtoa_r+0xe0>
 800e508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e50a:	2301      	movs	r3, #1
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e510:	2b00      	cmp	r3, #0
 800e512:	f000 856b 	beq.w	800efec <_dtoa_r+0xbac>
 800e516:	4883      	ldr	r0, [pc, #524]	; (800e724 <_dtoa_r+0x2e4>)
 800e518:	6018      	str	r0, [r3, #0]
 800e51a:	1e43      	subs	r3, r0, #1
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	e7df      	b.n	800e4e0 <_dtoa_r+0xa0>
 800e520:	ec4b ab10 	vmov	d0, sl, fp
 800e524:	aa10      	add	r2, sp, #64	; 0x40
 800e526:	a911      	add	r1, sp, #68	; 0x44
 800e528:	4620      	mov	r0, r4
 800e52a:	f001 fd5b 	bl	800ffe4 <__d2b>
 800e52e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e532:	ee08 0a10 	vmov	s16, r0
 800e536:	2d00      	cmp	r5, #0
 800e538:	f000 8084 	beq.w	800e644 <_dtoa_r+0x204>
 800e53c:	ee19 3a90 	vmov	r3, s19
 800e540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e544:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e548:	4656      	mov	r6, sl
 800e54a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e54e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e552:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e556:	4b74      	ldr	r3, [pc, #464]	; (800e728 <_dtoa_r+0x2e8>)
 800e558:	2200      	movs	r2, #0
 800e55a:	4630      	mov	r0, r6
 800e55c:	4639      	mov	r1, r7
 800e55e:	f7f1 fea3 	bl	80002a8 <__aeabi_dsub>
 800e562:	a365      	add	r3, pc, #404	; (adr r3, 800e6f8 <_dtoa_r+0x2b8>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f2 f856 	bl	8000618 <__aeabi_dmul>
 800e56c:	a364      	add	r3, pc, #400	; (adr r3, 800e700 <_dtoa_r+0x2c0>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	f7f1 fe9b 	bl	80002ac <__adddf3>
 800e576:	4606      	mov	r6, r0
 800e578:	4628      	mov	r0, r5
 800e57a:	460f      	mov	r7, r1
 800e57c:	f7f1 ffe2 	bl	8000544 <__aeabi_i2d>
 800e580:	a361      	add	r3, pc, #388	; (adr r3, 800e708 <_dtoa_r+0x2c8>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	f7f2 f847 	bl	8000618 <__aeabi_dmul>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	f7f1 fe8b 	bl	80002ac <__adddf3>
 800e596:	4606      	mov	r6, r0
 800e598:	460f      	mov	r7, r1
 800e59a:	f7f2 faed 	bl	8000b78 <__aeabi_d2iz>
 800e59e:	2200      	movs	r2, #0
 800e5a0:	9000      	str	r0, [sp, #0]
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	f7f2 faa8 	bl	8000afc <__aeabi_dcmplt>
 800e5ac:	b150      	cbz	r0, 800e5c4 <_dtoa_r+0x184>
 800e5ae:	9800      	ldr	r0, [sp, #0]
 800e5b0:	f7f1 ffc8 	bl	8000544 <__aeabi_i2d>
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	463b      	mov	r3, r7
 800e5b8:	f7f2 fa96 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5bc:	b910      	cbnz	r0, 800e5c4 <_dtoa_r+0x184>
 800e5be:	9b00      	ldr	r3, [sp, #0]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	9b00      	ldr	r3, [sp, #0]
 800e5c6:	2b16      	cmp	r3, #22
 800e5c8:	d85a      	bhi.n	800e680 <_dtoa_r+0x240>
 800e5ca:	9a00      	ldr	r2, [sp, #0]
 800e5cc:	4b57      	ldr	r3, [pc, #348]	; (800e72c <_dtoa_r+0x2ec>)
 800e5ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	ec51 0b19 	vmov	r0, r1, d9
 800e5da:	f7f2 fa8f 	bl	8000afc <__aeabi_dcmplt>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d050      	beq.n	800e684 <_dtoa_r+0x244>
 800e5e2:	9b00      	ldr	r3, [sp, #0]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5ee:	1b5d      	subs	r5, r3, r5
 800e5f0:	1e6b      	subs	r3, r5, #1
 800e5f2:	9305      	str	r3, [sp, #20]
 800e5f4:	bf45      	ittet	mi
 800e5f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e5fa:	9304      	strmi	r3, [sp, #16]
 800e5fc:	2300      	movpl	r3, #0
 800e5fe:	2300      	movmi	r3, #0
 800e600:	bf4c      	ite	mi
 800e602:	9305      	strmi	r3, [sp, #20]
 800e604:	9304      	strpl	r3, [sp, #16]
 800e606:	9b00      	ldr	r3, [sp, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	db3d      	blt.n	800e688 <_dtoa_r+0x248>
 800e60c:	9b05      	ldr	r3, [sp, #20]
 800e60e:	9a00      	ldr	r2, [sp, #0]
 800e610:	920a      	str	r2, [sp, #40]	; 0x28
 800e612:	4413      	add	r3, r2
 800e614:	9305      	str	r3, [sp, #20]
 800e616:	2300      	movs	r3, #0
 800e618:	9307      	str	r3, [sp, #28]
 800e61a:	9b06      	ldr	r3, [sp, #24]
 800e61c:	2b09      	cmp	r3, #9
 800e61e:	f200 8089 	bhi.w	800e734 <_dtoa_r+0x2f4>
 800e622:	2b05      	cmp	r3, #5
 800e624:	bfc4      	itt	gt
 800e626:	3b04      	subgt	r3, #4
 800e628:	9306      	strgt	r3, [sp, #24]
 800e62a:	9b06      	ldr	r3, [sp, #24]
 800e62c:	f1a3 0302 	sub.w	r3, r3, #2
 800e630:	bfcc      	ite	gt
 800e632:	2500      	movgt	r5, #0
 800e634:	2501      	movle	r5, #1
 800e636:	2b03      	cmp	r3, #3
 800e638:	f200 8087 	bhi.w	800e74a <_dtoa_r+0x30a>
 800e63c:	e8df f003 	tbb	[pc, r3]
 800e640:	59383a2d 	.word	0x59383a2d
 800e644:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e648:	441d      	add	r5, r3
 800e64a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e64e:	2b20      	cmp	r3, #32
 800e650:	bfc1      	itttt	gt
 800e652:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e656:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e65a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e65e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e662:	bfda      	itte	le
 800e664:	f1c3 0320 	rsble	r3, r3, #32
 800e668:	fa06 f003 	lslle.w	r0, r6, r3
 800e66c:	4318      	orrgt	r0, r3
 800e66e:	f7f1 ff59 	bl	8000524 <__aeabi_ui2d>
 800e672:	2301      	movs	r3, #1
 800e674:	4606      	mov	r6, r0
 800e676:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e67a:	3d01      	subs	r5, #1
 800e67c:	930e      	str	r3, [sp, #56]	; 0x38
 800e67e:	e76a      	b.n	800e556 <_dtoa_r+0x116>
 800e680:	2301      	movs	r3, #1
 800e682:	e7b2      	b.n	800e5ea <_dtoa_r+0x1aa>
 800e684:	900b      	str	r0, [sp, #44]	; 0x2c
 800e686:	e7b1      	b.n	800e5ec <_dtoa_r+0x1ac>
 800e688:	9b04      	ldr	r3, [sp, #16]
 800e68a:	9a00      	ldr	r2, [sp, #0]
 800e68c:	1a9b      	subs	r3, r3, r2
 800e68e:	9304      	str	r3, [sp, #16]
 800e690:	4253      	negs	r3, r2
 800e692:	9307      	str	r3, [sp, #28]
 800e694:	2300      	movs	r3, #0
 800e696:	930a      	str	r3, [sp, #40]	; 0x28
 800e698:	e7bf      	b.n	800e61a <_dtoa_r+0x1da>
 800e69a:	2300      	movs	r3, #0
 800e69c:	9308      	str	r3, [sp, #32]
 800e69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dc55      	bgt.n	800e750 <_dtoa_r+0x310>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e6ae:	e00c      	b.n	800e6ca <_dtoa_r+0x28a>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e7f3      	b.n	800e69c <_dtoa_r+0x25c>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6b8:	9308      	str	r3, [sp, #32]
 800e6ba:	9b00      	ldr	r3, [sp, #0]
 800e6bc:	4413      	add	r3, r2
 800e6be:	9302      	str	r3, [sp, #8]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	9303      	str	r3, [sp, #12]
 800e6c6:	bfb8      	it	lt
 800e6c8:	2301      	movlt	r3, #1
 800e6ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	6042      	str	r2, [r0, #4]
 800e6d0:	2204      	movs	r2, #4
 800e6d2:	f102 0614 	add.w	r6, r2, #20
 800e6d6:	429e      	cmp	r6, r3
 800e6d8:	6841      	ldr	r1, [r0, #4]
 800e6da:	d93d      	bls.n	800e758 <_dtoa_r+0x318>
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f001 f893 	bl	800f808 <_Balloc>
 800e6e2:	9001      	str	r0, [sp, #4]
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d13b      	bne.n	800e760 <_dtoa_r+0x320>
 800e6e8:	4b11      	ldr	r3, [pc, #68]	; (800e730 <_dtoa_r+0x2f0>)
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e6f0:	e6c0      	b.n	800e474 <_dtoa_r+0x34>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e7df      	b.n	800e6b6 <_dtoa_r+0x276>
 800e6f6:	bf00      	nop
 800e6f8:	636f4361 	.word	0x636f4361
 800e6fc:	3fd287a7 	.word	0x3fd287a7
 800e700:	8b60c8b3 	.word	0x8b60c8b3
 800e704:	3fc68a28 	.word	0x3fc68a28
 800e708:	509f79fb 	.word	0x509f79fb
 800e70c:	3fd34413 	.word	0x3fd34413
 800e710:	08011d62 	.word	0x08011d62
 800e714:	08011d79 	.word	0x08011d79
 800e718:	7ff00000 	.word	0x7ff00000
 800e71c:	08011d5e 	.word	0x08011d5e
 800e720:	08011d55 	.word	0x08011d55
 800e724:	08012032 	.word	0x08012032
 800e728:	3ff80000 	.word	0x3ff80000
 800e72c:	08011f48 	.word	0x08011f48
 800e730:	08011dd4 	.word	0x08011dd4
 800e734:	2501      	movs	r5, #1
 800e736:	2300      	movs	r3, #0
 800e738:	9306      	str	r3, [sp, #24]
 800e73a:	9508      	str	r5, [sp, #32]
 800e73c:	f04f 33ff 	mov.w	r3, #4294967295
 800e740:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e744:	2200      	movs	r2, #0
 800e746:	2312      	movs	r3, #18
 800e748:	e7b0      	b.n	800e6ac <_dtoa_r+0x26c>
 800e74a:	2301      	movs	r3, #1
 800e74c:	9308      	str	r3, [sp, #32]
 800e74e:	e7f5      	b.n	800e73c <_dtoa_r+0x2fc>
 800e750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e752:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e756:	e7b8      	b.n	800e6ca <_dtoa_r+0x28a>
 800e758:	3101      	adds	r1, #1
 800e75a:	6041      	str	r1, [r0, #4]
 800e75c:	0052      	lsls	r2, r2, #1
 800e75e:	e7b8      	b.n	800e6d2 <_dtoa_r+0x292>
 800e760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e762:	9a01      	ldr	r2, [sp, #4]
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	9b03      	ldr	r3, [sp, #12]
 800e768:	2b0e      	cmp	r3, #14
 800e76a:	f200 809d 	bhi.w	800e8a8 <_dtoa_r+0x468>
 800e76e:	2d00      	cmp	r5, #0
 800e770:	f000 809a 	beq.w	800e8a8 <_dtoa_r+0x468>
 800e774:	9b00      	ldr	r3, [sp, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	dd32      	ble.n	800e7e0 <_dtoa_r+0x3a0>
 800e77a:	4ab7      	ldr	r2, [pc, #732]	; (800ea58 <_dtoa_r+0x618>)
 800e77c:	f003 030f 	and.w	r3, r3, #15
 800e780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e784:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	05d8      	lsls	r0, r3, #23
 800e78c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e790:	d516      	bpl.n	800e7c0 <_dtoa_r+0x380>
 800e792:	4bb2      	ldr	r3, [pc, #712]	; (800ea5c <_dtoa_r+0x61c>)
 800e794:	ec51 0b19 	vmov	r0, r1, d9
 800e798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e79c:	f7f2 f866 	bl	800086c <__aeabi_ddiv>
 800e7a0:	f007 070f 	and.w	r7, r7, #15
 800e7a4:	4682      	mov	sl, r0
 800e7a6:	468b      	mov	fp, r1
 800e7a8:	2503      	movs	r5, #3
 800e7aa:	4eac      	ldr	r6, [pc, #688]	; (800ea5c <_dtoa_r+0x61c>)
 800e7ac:	b957      	cbnz	r7, 800e7c4 <_dtoa_r+0x384>
 800e7ae:	4642      	mov	r2, r8
 800e7b0:	464b      	mov	r3, r9
 800e7b2:	4650      	mov	r0, sl
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	f7f2 f859 	bl	800086c <__aeabi_ddiv>
 800e7ba:	4682      	mov	sl, r0
 800e7bc:	468b      	mov	fp, r1
 800e7be:	e028      	b.n	800e812 <_dtoa_r+0x3d2>
 800e7c0:	2502      	movs	r5, #2
 800e7c2:	e7f2      	b.n	800e7aa <_dtoa_r+0x36a>
 800e7c4:	07f9      	lsls	r1, r7, #31
 800e7c6:	d508      	bpl.n	800e7da <_dtoa_r+0x39a>
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e7d0:	f7f1 ff22 	bl	8000618 <__aeabi_dmul>
 800e7d4:	3501      	adds	r5, #1
 800e7d6:	4680      	mov	r8, r0
 800e7d8:	4689      	mov	r9, r1
 800e7da:	107f      	asrs	r7, r7, #1
 800e7dc:	3608      	adds	r6, #8
 800e7de:	e7e5      	b.n	800e7ac <_dtoa_r+0x36c>
 800e7e0:	f000 809b 	beq.w	800e91a <_dtoa_r+0x4da>
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	4f9d      	ldr	r7, [pc, #628]	; (800ea5c <_dtoa_r+0x61c>)
 800e7e8:	425e      	negs	r6, r3
 800e7ea:	4b9b      	ldr	r3, [pc, #620]	; (800ea58 <_dtoa_r+0x618>)
 800e7ec:	f006 020f 	and.w	r2, r6, #15
 800e7f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	ec51 0b19 	vmov	r0, r1, d9
 800e7fc:	f7f1 ff0c 	bl	8000618 <__aeabi_dmul>
 800e800:	1136      	asrs	r6, r6, #4
 800e802:	4682      	mov	sl, r0
 800e804:	468b      	mov	fp, r1
 800e806:	2300      	movs	r3, #0
 800e808:	2502      	movs	r5, #2
 800e80a:	2e00      	cmp	r6, #0
 800e80c:	d17a      	bne.n	800e904 <_dtoa_r+0x4c4>
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1d3      	bne.n	800e7ba <_dtoa_r+0x37a>
 800e812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 8082 	beq.w	800e91e <_dtoa_r+0x4de>
 800e81a:	4b91      	ldr	r3, [pc, #580]	; (800ea60 <_dtoa_r+0x620>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	4650      	mov	r0, sl
 800e820:	4659      	mov	r1, fp
 800e822:	f7f2 f96b 	bl	8000afc <__aeabi_dcmplt>
 800e826:	2800      	cmp	r0, #0
 800e828:	d079      	beq.n	800e91e <_dtoa_r+0x4de>
 800e82a:	9b03      	ldr	r3, [sp, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d076      	beq.n	800e91e <_dtoa_r+0x4de>
 800e830:	9b02      	ldr	r3, [sp, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	dd36      	ble.n	800e8a4 <_dtoa_r+0x464>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	4650      	mov	r0, sl
 800e83a:	4659      	mov	r1, fp
 800e83c:	1e5f      	subs	r7, r3, #1
 800e83e:	2200      	movs	r2, #0
 800e840:	4b88      	ldr	r3, [pc, #544]	; (800ea64 <_dtoa_r+0x624>)
 800e842:	f7f1 fee9 	bl	8000618 <__aeabi_dmul>
 800e846:	9e02      	ldr	r6, [sp, #8]
 800e848:	4682      	mov	sl, r0
 800e84a:	468b      	mov	fp, r1
 800e84c:	3501      	adds	r5, #1
 800e84e:	4628      	mov	r0, r5
 800e850:	f7f1 fe78 	bl	8000544 <__aeabi_i2d>
 800e854:	4652      	mov	r2, sl
 800e856:	465b      	mov	r3, fp
 800e858:	f7f1 fede 	bl	8000618 <__aeabi_dmul>
 800e85c:	4b82      	ldr	r3, [pc, #520]	; (800ea68 <_dtoa_r+0x628>)
 800e85e:	2200      	movs	r2, #0
 800e860:	f7f1 fd24 	bl	80002ac <__adddf3>
 800e864:	46d0      	mov	r8, sl
 800e866:	46d9      	mov	r9, fp
 800e868:	4682      	mov	sl, r0
 800e86a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e86e:	2e00      	cmp	r6, #0
 800e870:	d158      	bne.n	800e924 <_dtoa_r+0x4e4>
 800e872:	4b7e      	ldr	r3, [pc, #504]	; (800ea6c <_dtoa_r+0x62c>)
 800e874:	2200      	movs	r2, #0
 800e876:	4640      	mov	r0, r8
 800e878:	4649      	mov	r1, r9
 800e87a:	f7f1 fd15 	bl	80002a8 <__aeabi_dsub>
 800e87e:	4652      	mov	r2, sl
 800e880:	465b      	mov	r3, fp
 800e882:	4680      	mov	r8, r0
 800e884:	4689      	mov	r9, r1
 800e886:	f7f2 f957 	bl	8000b38 <__aeabi_dcmpgt>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	f040 8295 	bne.w	800edba <_dtoa_r+0x97a>
 800e890:	4652      	mov	r2, sl
 800e892:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e896:	4640      	mov	r0, r8
 800e898:	4649      	mov	r1, r9
 800e89a:	f7f2 f92f 	bl	8000afc <__aeabi_dcmplt>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f040 8289 	bne.w	800edb6 <_dtoa_r+0x976>
 800e8a4:	ec5b ab19 	vmov	sl, fp, d9
 800e8a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f2c0 8148 	blt.w	800eb40 <_dtoa_r+0x700>
 800e8b0:	9a00      	ldr	r2, [sp, #0]
 800e8b2:	2a0e      	cmp	r2, #14
 800e8b4:	f300 8144 	bgt.w	800eb40 <_dtoa_r+0x700>
 800e8b8:	4b67      	ldr	r3, [pc, #412]	; (800ea58 <_dtoa_r+0x618>)
 800e8ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f280 80d5 	bge.w	800ea74 <_dtoa_r+0x634>
 800e8ca:	9b03      	ldr	r3, [sp, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f300 80d1 	bgt.w	800ea74 <_dtoa_r+0x634>
 800e8d2:	f040 826f 	bne.w	800edb4 <_dtoa_r+0x974>
 800e8d6:	4b65      	ldr	r3, [pc, #404]	; (800ea6c <_dtoa_r+0x62c>)
 800e8d8:	2200      	movs	r2, #0
 800e8da:	4640      	mov	r0, r8
 800e8dc:	4649      	mov	r1, r9
 800e8de:	f7f1 fe9b 	bl	8000618 <__aeabi_dmul>
 800e8e2:	4652      	mov	r2, sl
 800e8e4:	465b      	mov	r3, fp
 800e8e6:	f7f2 f91d 	bl	8000b24 <__aeabi_dcmpge>
 800e8ea:	9e03      	ldr	r6, [sp, #12]
 800e8ec:	4637      	mov	r7, r6
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f040 8245 	bne.w	800ed7e <_dtoa_r+0x93e>
 800e8f4:	9d01      	ldr	r5, [sp, #4]
 800e8f6:	2331      	movs	r3, #49	; 0x31
 800e8f8:	f805 3b01 	strb.w	r3, [r5], #1
 800e8fc:	9b00      	ldr	r3, [sp, #0]
 800e8fe:	3301      	adds	r3, #1
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	e240      	b.n	800ed86 <_dtoa_r+0x946>
 800e904:	07f2      	lsls	r2, r6, #31
 800e906:	d505      	bpl.n	800e914 <_dtoa_r+0x4d4>
 800e908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e90c:	f7f1 fe84 	bl	8000618 <__aeabi_dmul>
 800e910:	3501      	adds	r5, #1
 800e912:	2301      	movs	r3, #1
 800e914:	1076      	asrs	r6, r6, #1
 800e916:	3708      	adds	r7, #8
 800e918:	e777      	b.n	800e80a <_dtoa_r+0x3ca>
 800e91a:	2502      	movs	r5, #2
 800e91c:	e779      	b.n	800e812 <_dtoa_r+0x3d2>
 800e91e:	9f00      	ldr	r7, [sp, #0]
 800e920:	9e03      	ldr	r6, [sp, #12]
 800e922:	e794      	b.n	800e84e <_dtoa_r+0x40e>
 800e924:	9901      	ldr	r1, [sp, #4]
 800e926:	4b4c      	ldr	r3, [pc, #304]	; (800ea58 <_dtoa_r+0x618>)
 800e928:	4431      	add	r1, r6
 800e92a:	910d      	str	r1, [sp, #52]	; 0x34
 800e92c:	9908      	ldr	r1, [sp, #32]
 800e92e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e932:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e936:	2900      	cmp	r1, #0
 800e938:	d043      	beq.n	800e9c2 <_dtoa_r+0x582>
 800e93a:	494d      	ldr	r1, [pc, #308]	; (800ea70 <_dtoa_r+0x630>)
 800e93c:	2000      	movs	r0, #0
 800e93e:	f7f1 ff95 	bl	800086c <__aeabi_ddiv>
 800e942:	4652      	mov	r2, sl
 800e944:	465b      	mov	r3, fp
 800e946:	f7f1 fcaf 	bl	80002a8 <__aeabi_dsub>
 800e94a:	9d01      	ldr	r5, [sp, #4]
 800e94c:	4682      	mov	sl, r0
 800e94e:	468b      	mov	fp, r1
 800e950:	4649      	mov	r1, r9
 800e952:	4640      	mov	r0, r8
 800e954:	f7f2 f910 	bl	8000b78 <__aeabi_d2iz>
 800e958:	4606      	mov	r6, r0
 800e95a:	f7f1 fdf3 	bl	8000544 <__aeabi_i2d>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4640      	mov	r0, r8
 800e964:	4649      	mov	r1, r9
 800e966:	f7f1 fc9f 	bl	80002a8 <__aeabi_dsub>
 800e96a:	3630      	adds	r6, #48	; 0x30
 800e96c:	f805 6b01 	strb.w	r6, [r5], #1
 800e970:	4652      	mov	r2, sl
 800e972:	465b      	mov	r3, fp
 800e974:	4680      	mov	r8, r0
 800e976:	4689      	mov	r9, r1
 800e978:	f7f2 f8c0 	bl	8000afc <__aeabi_dcmplt>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d163      	bne.n	800ea48 <_dtoa_r+0x608>
 800e980:	4642      	mov	r2, r8
 800e982:	464b      	mov	r3, r9
 800e984:	4936      	ldr	r1, [pc, #216]	; (800ea60 <_dtoa_r+0x620>)
 800e986:	2000      	movs	r0, #0
 800e988:	f7f1 fc8e 	bl	80002a8 <__aeabi_dsub>
 800e98c:	4652      	mov	r2, sl
 800e98e:	465b      	mov	r3, fp
 800e990:	f7f2 f8b4 	bl	8000afc <__aeabi_dcmplt>
 800e994:	2800      	cmp	r0, #0
 800e996:	f040 80b5 	bne.w	800eb04 <_dtoa_r+0x6c4>
 800e99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e99c:	429d      	cmp	r5, r3
 800e99e:	d081      	beq.n	800e8a4 <_dtoa_r+0x464>
 800e9a0:	4b30      	ldr	r3, [pc, #192]	; (800ea64 <_dtoa_r+0x624>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4650      	mov	r0, sl
 800e9a6:	4659      	mov	r1, fp
 800e9a8:	f7f1 fe36 	bl	8000618 <__aeabi_dmul>
 800e9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ea64 <_dtoa_r+0x624>)
 800e9ae:	4682      	mov	sl, r0
 800e9b0:	468b      	mov	fp, r1
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	4649      	mov	r1, r9
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f7f1 fe2e 	bl	8000618 <__aeabi_dmul>
 800e9bc:	4680      	mov	r8, r0
 800e9be:	4689      	mov	r9, r1
 800e9c0:	e7c6      	b.n	800e950 <_dtoa_r+0x510>
 800e9c2:	4650      	mov	r0, sl
 800e9c4:	4659      	mov	r1, fp
 800e9c6:	f7f1 fe27 	bl	8000618 <__aeabi_dmul>
 800e9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9cc:	9d01      	ldr	r5, [sp, #4]
 800e9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9d0:	4682      	mov	sl, r0
 800e9d2:	468b      	mov	fp, r1
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	f7f2 f8ce 	bl	8000b78 <__aeabi_d2iz>
 800e9dc:	4606      	mov	r6, r0
 800e9de:	f7f1 fdb1 	bl	8000544 <__aeabi_i2d>
 800e9e2:	3630      	adds	r6, #48	; 0x30
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4640      	mov	r0, r8
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	f7f1 fc5c 	bl	80002a8 <__aeabi_dsub>
 800e9f0:	f805 6b01 	strb.w	r6, [r5], #1
 800e9f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9f6:	429d      	cmp	r5, r3
 800e9f8:	4680      	mov	r8, r0
 800e9fa:	4689      	mov	r9, r1
 800e9fc:	f04f 0200 	mov.w	r2, #0
 800ea00:	d124      	bne.n	800ea4c <_dtoa_r+0x60c>
 800ea02:	4b1b      	ldr	r3, [pc, #108]	; (800ea70 <_dtoa_r+0x630>)
 800ea04:	4650      	mov	r0, sl
 800ea06:	4659      	mov	r1, fp
 800ea08:	f7f1 fc50 	bl	80002ac <__adddf3>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4640      	mov	r0, r8
 800ea12:	4649      	mov	r1, r9
 800ea14:	f7f2 f890 	bl	8000b38 <__aeabi_dcmpgt>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d173      	bne.n	800eb04 <_dtoa_r+0x6c4>
 800ea1c:	4652      	mov	r2, sl
 800ea1e:	465b      	mov	r3, fp
 800ea20:	4913      	ldr	r1, [pc, #76]	; (800ea70 <_dtoa_r+0x630>)
 800ea22:	2000      	movs	r0, #0
 800ea24:	f7f1 fc40 	bl	80002a8 <__aeabi_dsub>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4640      	mov	r0, r8
 800ea2e:	4649      	mov	r1, r9
 800ea30:	f7f2 f864 	bl	8000afc <__aeabi_dcmplt>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f43f af35 	beq.w	800e8a4 <_dtoa_r+0x464>
 800ea3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea3c:	1e6b      	subs	r3, r5, #1
 800ea3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea44:	2b30      	cmp	r3, #48	; 0x30
 800ea46:	d0f8      	beq.n	800ea3a <_dtoa_r+0x5fa>
 800ea48:	9700      	str	r7, [sp, #0]
 800ea4a:	e049      	b.n	800eae0 <_dtoa_r+0x6a0>
 800ea4c:	4b05      	ldr	r3, [pc, #20]	; (800ea64 <_dtoa_r+0x624>)
 800ea4e:	f7f1 fde3 	bl	8000618 <__aeabi_dmul>
 800ea52:	4680      	mov	r8, r0
 800ea54:	4689      	mov	r9, r1
 800ea56:	e7bd      	b.n	800e9d4 <_dtoa_r+0x594>
 800ea58:	08011f48 	.word	0x08011f48
 800ea5c:	08011f20 	.word	0x08011f20
 800ea60:	3ff00000 	.word	0x3ff00000
 800ea64:	40240000 	.word	0x40240000
 800ea68:	401c0000 	.word	0x401c0000
 800ea6c:	40140000 	.word	0x40140000
 800ea70:	3fe00000 	.word	0x3fe00000
 800ea74:	9d01      	ldr	r5, [sp, #4]
 800ea76:	4656      	mov	r6, sl
 800ea78:	465f      	mov	r7, fp
 800ea7a:	4642      	mov	r2, r8
 800ea7c:	464b      	mov	r3, r9
 800ea7e:	4630      	mov	r0, r6
 800ea80:	4639      	mov	r1, r7
 800ea82:	f7f1 fef3 	bl	800086c <__aeabi_ddiv>
 800ea86:	f7f2 f877 	bl	8000b78 <__aeabi_d2iz>
 800ea8a:	4682      	mov	sl, r0
 800ea8c:	f7f1 fd5a 	bl	8000544 <__aeabi_i2d>
 800ea90:	4642      	mov	r2, r8
 800ea92:	464b      	mov	r3, r9
 800ea94:	f7f1 fdc0 	bl	8000618 <__aeabi_dmul>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eaa4:	f7f1 fc00 	bl	80002a8 <__aeabi_dsub>
 800eaa8:	f805 6b01 	strb.w	r6, [r5], #1
 800eaac:	9e01      	ldr	r6, [sp, #4]
 800eaae:	9f03      	ldr	r7, [sp, #12]
 800eab0:	1bae      	subs	r6, r5, r6
 800eab2:	42b7      	cmp	r7, r6
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	d135      	bne.n	800eb26 <_dtoa_r+0x6e6>
 800eaba:	f7f1 fbf7 	bl	80002ac <__adddf3>
 800eabe:	4642      	mov	r2, r8
 800eac0:	464b      	mov	r3, r9
 800eac2:	4606      	mov	r6, r0
 800eac4:	460f      	mov	r7, r1
 800eac6:	f7f2 f837 	bl	8000b38 <__aeabi_dcmpgt>
 800eaca:	b9d0      	cbnz	r0, 800eb02 <_dtoa_r+0x6c2>
 800eacc:	4642      	mov	r2, r8
 800eace:	464b      	mov	r3, r9
 800ead0:	4630      	mov	r0, r6
 800ead2:	4639      	mov	r1, r7
 800ead4:	f7f2 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 800ead8:	b110      	cbz	r0, 800eae0 <_dtoa_r+0x6a0>
 800eada:	f01a 0f01 	tst.w	sl, #1
 800eade:	d110      	bne.n	800eb02 <_dtoa_r+0x6c2>
 800eae0:	4620      	mov	r0, r4
 800eae2:	ee18 1a10 	vmov	r1, s16
 800eae6:	f000 fecf 	bl	800f888 <_Bfree>
 800eaea:	2300      	movs	r3, #0
 800eaec:	9800      	ldr	r0, [sp, #0]
 800eaee:	702b      	strb	r3, [r5, #0]
 800eaf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	6018      	str	r0, [r3, #0]
 800eaf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f43f acf1 	beq.w	800e4e0 <_dtoa_r+0xa0>
 800eafe:	601d      	str	r5, [r3, #0]
 800eb00:	e4ee      	b.n	800e4e0 <_dtoa_r+0xa0>
 800eb02:	9f00      	ldr	r7, [sp, #0]
 800eb04:	462b      	mov	r3, r5
 800eb06:	461d      	mov	r5, r3
 800eb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb0c:	2a39      	cmp	r2, #57	; 0x39
 800eb0e:	d106      	bne.n	800eb1e <_dtoa_r+0x6de>
 800eb10:	9a01      	ldr	r2, [sp, #4]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d1f7      	bne.n	800eb06 <_dtoa_r+0x6c6>
 800eb16:	9901      	ldr	r1, [sp, #4]
 800eb18:	2230      	movs	r2, #48	; 0x30
 800eb1a:	3701      	adds	r7, #1
 800eb1c:	700a      	strb	r2, [r1, #0]
 800eb1e:	781a      	ldrb	r2, [r3, #0]
 800eb20:	3201      	adds	r2, #1
 800eb22:	701a      	strb	r2, [r3, #0]
 800eb24:	e790      	b.n	800ea48 <_dtoa_r+0x608>
 800eb26:	4ba6      	ldr	r3, [pc, #664]	; (800edc0 <_dtoa_r+0x980>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f7f1 fd75 	bl	8000618 <__aeabi_dmul>
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2300      	movs	r3, #0
 800eb32:	4606      	mov	r6, r0
 800eb34:	460f      	mov	r7, r1
 800eb36:	f7f1 ffd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d09d      	beq.n	800ea7a <_dtoa_r+0x63a>
 800eb3e:	e7cf      	b.n	800eae0 <_dtoa_r+0x6a0>
 800eb40:	9a08      	ldr	r2, [sp, #32]
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	f000 80d7 	beq.w	800ecf6 <_dtoa_r+0x8b6>
 800eb48:	9a06      	ldr	r2, [sp, #24]
 800eb4a:	2a01      	cmp	r2, #1
 800eb4c:	f300 80ba 	bgt.w	800ecc4 <_dtoa_r+0x884>
 800eb50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	f000 80b2 	beq.w	800ecbc <_dtoa_r+0x87c>
 800eb58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb5c:	9e07      	ldr	r6, [sp, #28]
 800eb5e:	9d04      	ldr	r5, [sp, #16]
 800eb60:	9a04      	ldr	r2, [sp, #16]
 800eb62:	441a      	add	r2, r3
 800eb64:	9204      	str	r2, [sp, #16]
 800eb66:	9a05      	ldr	r2, [sp, #20]
 800eb68:	2101      	movs	r1, #1
 800eb6a:	441a      	add	r2, r3
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	9205      	str	r2, [sp, #20]
 800eb70:	f000 ff8c 	bl	800fa8c <__i2b>
 800eb74:	4607      	mov	r7, r0
 800eb76:	2d00      	cmp	r5, #0
 800eb78:	dd0c      	ble.n	800eb94 <_dtoa_r+0x754>
 800eb7a:	9b05      	ldr	r3, [sp, #20]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	dd09      	ble.n	800eb94 <_dtoa_r+0x754>
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	9a04      	ldr	r2, [sp, #16]
 800eb84:	bfa8      	it	ge
 800eb86:	462b      	movge	r3, r5
 800eb88:	1ad2      	subs	r2, r2, r3
 800eb8a:	9204      	str	r2, [sp, #16]
 800eb8c:	9a05      	ldr	r2, [sp, #20]
 800eb8e:	1aed      	subs	r5, r5, r3
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	9305      	str	r3, [sp, #20]
 800eb94:	9b07      	ldr	r3, [sp, #28]
 800eb96:	b31b      	cbz	r3, 800ebe0 <_dtoa_r+0x7a0>
 800eb98:	9b08      	ldr	r3, [sp, #32]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 80af 	beq.w	800ecfe <_dtoa_r+0x8be>
 800eba0:	2e00      	cmp	r6, #0
 800eba2:	dd13      	ble.n	800ebcc <_dtoa_r+0x78c>
 800eba4:	4639      	mov	r1, r7
 800eba6:	4632      	mov	r2, r6
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f001 f82f 	bl	800fc0c <__pow5mult>
 800ebae:	ee18 2a10 	vmov	r2, s16
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	4607      	mov	r7, r0
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f000 ff7e 	bl	800fab8 <__multiply>
 800ebbc:	ee18 1a10 	vmov	r1, s16
 800ebc0:	4680      	mov	r8, r0
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f000 fe60 	bl	800f888 <_Bfree>
 800ebc8:	ee08 8a10 	vmov	s16, r8
 800ebcc:	9b07      	ldr	r3, [sp, #28]
 800ebce:	1b9a      	subs	r2, r3, r6
 800ebd0:	d006      	beq.n	800ebe0 <_dtoa_r+0x7a0>
 800ebd2:	ee18 1a10 	vmov	r1, s16
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f001 f818 	bl	800fc0c <__pow5mult>
 800ebdc:	ee08 0a10 	vmov	s16, r0
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 ff52 	bl	800fa8c <__i2b>
 800ebe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	4606      	mov	r6, r0
 800ebee:	f340 8088 	ble.w	800ed02 <_dtoa_r+0x8c2>
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f001 f808 	bl	800fc0c <__pow5mult>
 800ebfc:	9b06      	ldr	r3, [sp, #24]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	4606      	mov	r6, r0
 800ec02:	f340 8081 	ble.w	800ed08 <_dtoa_r+0x8c8>
 800ec06:	f04f 0800 	mov.w	r8, #0
 800ec0a:	6933      	ldr	r3, [r6, #16]
 800ec0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec10:	6918      	ldr	r0, [r3, #16]
 800ec12:	f000 feeb 	bl	800f9ec <__hi0bits>
 800ec16:	f1c0 0020 	rsb	r0, r0, #32
 800ec1a:	9b05      	ldr	r3, [sp, #20]
 800ec1c:	4418      	add	r0, r3
 800ec1e:	f010 001f 	ands.w	r0, r0, #31
 800ec22:	f000 8092 	beq.w	800ed4a <_dtoa_r+0x90a>
 800ec26:	f1c0 0320 	rsb	r3, r0, #32
 800ec2a:	2b04      	cmp	r3, #4
 800ec2c:	f340 808a 	ble.w	800ed44 <_dtoa_r+0x904>
 800ec30:	f1c0 001c 	rsb	r0, r0, #28
 800ec34:	9b04      	ldr	r3, [sp, #16]
 800ec36:	4403      	add	r3, r0
 800ec38:	9304      	str	r3, [sp, #16]
 800ec3a:	9b05      	ldr	r3, [sp, #20]
 800ec3c:	4403      	add	r3, r0
 800ec3e:	4405      	add	r5, r0
 800ec40:	9305      	str	r3, [sp, #20]
 800ec42:	9b04      	ldr	r3, [sp, #16]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	dd07      	ble.n	800ec58 <_dtoa_r+0x818>
 800ec48:	ee18 1a10 	vmov	r1, s16
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f001 f836 	bl	800fcc0 <__lshift>
 800ec54:	ee08 0a10 	vmov	s16, r0
 800ec58:	9b05      	ldr	r3, [sp, #20]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	dd05      	ble.n	800ec6a <_dtoa_r+0x82a>
 800ec5e:	4631      	mov	r1, r6
 800ec60:	461a      	mov	r2, r3
 800ec62:	4620      	mov	r0, r4
 800ec64:	f001 f82c 	bl	800fcc0 <__lshift>
 800ec68:	4606      	mov	r6, r0
 800ec6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d06e      	beq.n	800ed4e <_dtoa_r+0x90e>
 800ec70:	ee18 0a10 	vmov	r0, s16
 800ec74:	4631      	mov	r1, r6
 800ec76:	f001 f893 	bl	800fda0 <__mcmp>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	da67      	bge.n	800ed4e <_dtoa_r+0x90e>
 800ec7e:	9b00      	ldr	r3, [sp, #0]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	ee18 1a10 	vmov	r1, s16
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	220a      	movs	r2, #10
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fe1d 	bl	800f8cc <__multadd>
 800ec92:	9b08      	ldr	r3, [sp, #32]
 800ec94:	ee08 0a10 	vmov	s16, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f000 81b1 	beq.w	800f000 <_dtoa_r+0xbc0>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4639      	mov	r1, r7
 800eca2:	220a      	movs	r2, #10
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fe11 	bl	800f8cc <__multadd>
 800ecaa:	9b02      	ldr	r3, [sp, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	4607      	mov	r7, r0
 800ecb0:	f300 808e 	bgt.w	800edd0 <_dtoa_r+0x990>
 800ecb4:	9b06      	ldr	r3, [sp, #24]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	dc51      	bgt.n	800ed5e <_dtoa_r+0x91e>
 800ecba:	e089      	b.n	800edd0 <_dtoa_r+0x990>
 800ecbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecc2:	e74b      	b.n	800eb5c <_dtoa_r+0x71c>
 800ecc4:	9b03      	ldr	r3, [sp, #12]
 800ecc6:	1e5e      	subs	r6, r3, #1
 800ecc8:	9b07      	ldr	r3, [sp, #28]
 800ecca:	42b3      	cmp	r3, r6
 800eccc:	bfbf      	itttt	lt
 800ecce:	9b07      	ldrlt	r3, [sp, #28]
 800ecd0:	9607      	strlt	r6, [sp, #28]
 800ecd2:	1af2      	sublt	r2, r6, r3
 800ecd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ecd6:	bfb6      	itet	lt
 800ecd8:	189b      	addlt	r3, r3, r2
 800ecda:	1b9e      	subge	r6, r3, r6
 800ecdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ecde:	9b03      	ldr	r3, [sp, #12]
 800ece0:	bfb8      	it	lt
 800ece2:	2600      	movlt	r6, #0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfb7      	itett	lt
 800ece8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ecec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ecf0:	1a9d      	sublt	r5, r3, r2
 800ecf2:	2300      	movlt	r3, #0
 800ecf4:	e734      	b.n	800eb60 <_dtoa_r+0x720>
 800ecf6:	9e07      	ldr	r6, [sp, #28]
 800ecf8:	9d04      	ldr	r5, [sp, #16]
 800ecfa:	9f08      	ldr	r7, [sp, #32]
 800ecfc:	e73b      	b.n	800eb76 <_dtoa_r+0x736>
 800ecfe:	9a07      	ldr	r2, [sp, #28]
 800ed00:	e767      	b.n	800ebd2 <_dtoa_r+0x792>
 800ed02:	9b06      	ldr	r3, [sp, #24]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	dc18      	bgt.n	800ed3a <_dtoa_r+0x8fa>
 800ed08:	f1ba 0f00 	cmp.w	sl, #0
 800ed0c:	d115      	bne.n	800ed3a <_dtoa_r+0x8fa>
 800ed0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed12:	b993      	cbnz	r3, 800ed3a <_dtoa_r+0x8fa>
 800ed14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed18:	0d1b      	lsrs	r3, r3, #20
 800ed1a:	051b      	lsls	r3, r3, #20
 800ed1c:	b183      	cbz	r3, 800ed40 <_dtoa_r+0x900>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	3301      	adds	r3, #1
 800ed22:	9304      	str	r3, [sp, #16]
 800ed24:	9b05      	ldr	r3, [sp, #20]
 800ed26:	3301      	adds	r3, #1
 800ed28:	9305      	str	r3, [sp, #20]
 800ed2a:	f04f 0801 	mov.w	r8, #1
 800ed2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	f47f af6a 	bne.w	800ec0a <_dtoa_r+0x7ca>
 800ed36:	2001      	movs	r0, #1
 800ed38:	e76f      	b.n	800ec1a <_dtoa_r+0x7da>
 800ed3a:	f04f 0800 	mov.w	r8, #0
 800ed3e:	e7f6      	b.n	800ed2e <_dtoa_r+0x8ee>
 800ed40:	4698      	mov	r8, r3
 800ed42:	e7f4      	b.n	800ed2e <_dtoa_r+0x8ee>
 800ed44:	f43f af7d 	beq.w	800ec42 <_dtoa_r+0x802>
 800ed48:	4618      	mov	r0, r3
 800ed4a:	301c      	adds	r0, #28
 800ed4c:	e772      	b.n	800ec34 <_dtoa_r+0x7f4>
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	dc37      	bgt.n	800edc4 <_dtoa_r+0x984>
 800ed54:	9b06      	ldr	r3, [sp, #24]
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	dd34      	ble.n	800edc4 <_dtoa_r+0x984>
 800ed5a:	9b03      	ldr	r3, [sp, #12]
 800ed5c:	9302      	str	r3, [sp, #8]
 800ed5e:	9b02      	ldr	r3, [sp, #8]
 800ed60:	b96b      	cbnz	r3, 800ed7e <_dtoa_r+0x93e>
 800ed62:	4631      	mov	r1, r6
 800ed64:	2205      	movs	r2, #5
 800ed66:	4620      	mov	r0, r4
 800ed68:	f000 fdb0 	bl	800f8cc <__multadd>
 800ed6c:	4601      	mov	r1, r0
 800ed6e:	4606      	mov	r6, r0
 800ed70:	ee18 0a10 	vmov	r0, s16
 800ed74:	f001 f814 	bl	800fda0 <__mcmp>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	f73f adbb 	bgt.w	800e8f4 <_dtoa_r+0x4b4>
 800ed7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed80:	9d01      	ldr	r5, [sp, #4]
 800ed82:	43db      	mvns	r3, r3
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	f04f 0800 	mov.w	r8, #0
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f000 fd7b 	bl	800f888 <_Bfree>
 800ed92:	2f00      	cmp	r7, #0
 800ed94:	f43f aea4 	beq.w	800eae0 <_dtoa_r+0x6a0>
 800ed98:	f1b8 0f00 	cmp.w	r8, #0
 800ed9c:	d005      	beq.n	800edaa <_dtoa_r+0x96a>
 800ed9e:	45b8      	cmp	r8, r7
 800eda0:	d003      	beq.n	800edaa <_dtoa_r+0x96a>
 800eda2:	4641      	mov	r1, r8
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fd6f 	bl	800f888 <_Bfree>
 800edaa:	4639      	mov	r1, r7
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fd6b 	bl	800f888 <_Bfree>
 800edb2:	e695      	b.n	800eae0 <_dtoa_r+0x6a0>
 800edb4:	2600      	movs	r6, #0
 800edb6:	4637      	mov	r7, r6
 800edb8:	e7e1      	b.n	800ed7e <_dtoa_r+0x93e>
 800edba:	9700      	str	r7, [sp, #0]
 800edbc:	4637      	mov	r7, r6
 800edbe:	e599      	b.n	800e8f4 <_dtoa_r+0x4b4>
 800edc0:	40240000 	.word	0x40240000
 800edc4:	9b08      	ldr	r3, [sp, #32]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 80ca 	beq.w	800ef60 <_dtoa_r+0xb20>
 800edcc:	9b03      	ldr	r3, [sp, #12]
 800edce:	9302      	str	r3, [sp, #8]
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	dd05      	ble.n	800ede0 <_dtoa_r+0x9a0>
 800edd4:	4639      	mov	r1, r7
 800edd6:	462a      	mov	r2, r5
 800edd8:	4620      	mov	r0, r4
 800edda:	f000 ff71 	bl	800fcc0 <__lshift>
 800edde:	4607      	mov	r7, r0
 800ede0:	f1b8 0f00 	cmp.w	r8, #0
 800ede4:	d05b      	beq.n	800ee9e <_dtoa_r+0xa5e>
 800ede6:	6879      	ldr	r1, [r7, #4]
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fd0d 	bl	800f808 <_Balloc>
 800edee:	4605      	mov	r5, r0
 800edf0:	b928      	cbnz	r0, 800edfe <_dtoa_r+0x9be>
 800edf2:	4b87      	ldr	r3, [pc, #540]	; (800f010 <_dtoa_r+0xbd0>)
 800edf4:	4602      	mov	r2, r0
 800edf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800edfa:	f7ff bb3b 	b.w	800e474 <_dtoa_r+0x34>
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	3202      	adds	r2, #2
 800ee02:	0092      	lsls	r2, r2, #2
 800ee04:	f107 010c 	add.w	r1, r7, #12
 800ee08:	300c      	adds	r0, #12
 800ee0a:	f7fc ff21 	bl	800bc50 <memcpy>
 800ee0e:	2201      	movs	r2, #1
 800ee10:	4629      	mov	r1, r5
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 ff54 	bl	800fcc0 <__lshift>
 800ee18:	9b01      	ldr	r3, [sp, #4]
 800ee1a:	f103 0901 	add.w	r9, r3, #1
 800ee1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ee22:	4413      	add	r3, r2
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	f00a 0301 	and.w	r3, sl, #1
 800ee2a:	46b8      	mov	r8, r7
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	4607      	mov	r7, r0
 800ee30:	4631      	mov	r1, r6
 800ee32:	ee18 0a10 	vmov	r0, s16
 800ee36:	f7ff fa75 	bl	800e324 <quorem>
 800ee3a:	4641      	mov	r1, r8
 800ee3c:	9002      	str	r0, [sp, #8]
 800ee3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee42:	ee18 0a10 	vmov	r0, s16
 800ee46:	f000 ffab 	bl	800fda0 <__mcmp>
 800ee4a:	463a      	mov	r2, r7
 800ee4c:	9003      	str	r0, [sp, #12]
 800ee4e:	4631      	mov	r1, r6
 800ee50:	4620      	mov	r0, r4
 800ee52:	f000 ffc1 	bl	800fdd8 <__mdiff>
 800ee56:	68c2      	ldr	r2, [r0, #12]
 800ee58:	f109 3bff 	add.w	fp, r9, #4294967295
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	bb02      	cbnz	r2, 800eea2 <_dtoa_r+0xa62>
 800ee60:	4601      	mov	r1, r0
 800ee62:	ee18 0a10 	vmov	r0, s16
 800ee66:	f000 ff9b 	bl	800fda0 <__mcmp>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4620      	mov	r0, r4
 800ee70:	9207      	str	r2, [sp, #28]
 800ee72:	f000 fd09 	bl	800f888 <_Bfree>
 800ee76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ee7a:	ea43 0102 	orr.w	r1, r3, r2
 800ee7e:	9b04      	ldr	r3, [sp, #16]
 800ee80:	430b      	orrs	r3, r1
 800ee82:	464d      	mov	r5, r9
 800ee84:	d10f      	bne.n	800eea6 <_dtoa_r+0xa66>
 800ee86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee8a:	d02a      	beq.n	800eee2 <_dtoa_r+0xaa2>
 800ee8c:	9b03      	ldr	r3, [sp, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dd02      	ble.n	800ee98 <_dtoa_r+0xa58>
 800ee92:	9b02      	ldr	r3, [sp, #8]
 800ee94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ee98:	f88b a000 	strb.w	sl, [fp]
 800ee9c:	e775      	b.n	800ed8a <_dtoa_r+0x94a>
 800ee9e:	4638      	mov	r0, r7
 800eea0:	e7ba      	b.n	800ee18 <_dtoa_r+0x9d8>
 800eea2:	2201      	movs	r2, #1
 800eea4:	e7e2      	b.n	800ee6c <_dtoa_r+0xa2c>
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	db04      	blt.n	800eeb6 <_dtoa_r+0xa76>
 800eeac:	9906      	ldr	r1, [sp, #24]
 800eeae:	430b      	orrs	r3, r1
 800eeb0:	9904      	ldr	r1, [sp, #16]
 800eeb2:	430b      	orrs	r3, r1
 800eeb4:	d122      	bne.n	800eefc <_dtoa_r+0xabc>
 800eeb6:	2a00      	cmp	r2, #0
 800eeb8:	ddee      	ble.n	800ee98 <_dtoa_r+0xa58>
 800eeba:	ee18 1a10 	vmov	r1, s16
 800eebe:	2201      	movs	r2, #1
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 fefd 	bl	800fcc0 <__lshift>
 800eec6:	4631      	mov	r1, r6
 800eec8:	ee08 0a10 	vmov	s16, r0
 800eecc:	f000 ff68 	bl	800fda0 <__mcmp>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	dc03      	bgt.n	800eedc <_dtoa_r+0xa9c>
 800eed4:	d1e0      	bne.n	800ee98 <_dtoa_r+0xa58>
 800eed6:	f01a 0f01 	tst.w	sl, #1
 800eeda:	d0dd      	beq.n	800ee98 <_dtoa_r+0xa58>
 800eedc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eee0:	d1d7      	bne.n	800ee92 <_dtoa_r+0xa52>
 800eee2:	2339      	movs	r3, #57	; 0x39
 800eee4:	f88b 3000 	strb.w	r3, [fp]
 800eee8:	462b      	mov	r3, r5
 800eeea:	461d      	mov	r5, r3
 800eeec:	3b01      	subs	r3, #1
 800eeee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eef2:	2a39      	cmp	r2, #57	; 0x39
 800eef4:	d071      	beq.n	800efda <_dtoa_r+0xb9a>
 800eef6:	3201      	adds	r2, #1
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	e746      	b.n	800ed8a <_dtoa_r+0x94a>
 800eefc:	2a00      	cmp	r2, #0
 800eefe:	dd07      	ble.n	800ef10 <_dtoa_r+0xad0>
 800ef00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef04:	d0ed      	beq.n	800eee2 <_dtoa_r+0xaa2>
 800ef06:	f10a 0301 	add.w	r3, sl, #1
 800ef0a:	f88b 3000 	strb.w	r3, [fp]
 800ef0e:	e73c      	b.n	800ed8a <_dtoa_r+0x94a>
 800ef10:	9b05      	ldr	r3, [sp, #20]
 800ef12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ef16:	4599      	cmp	r9, r3
 800ef18:	d047      	beq.n	800efaa <_dtoa_r+0xb6a>
 800ef1a:	ee18 1a10 	vmov	r1, s16
 800ef1e:	2300      	movs	r3, #0
 800ef20:	220a      	movs	r2, #10
 800ef22:	4620      	mov	r0, r4
 800ef24:	f000 fcd2 	bl	800f8cc <__multadd>
 800ef28:	45b8      	cmp	r8, r7
 800ef2a:	ee08 0a10 	vmov	s16, r0
 800ef2e:	f04f 0300 	mov.w	r3, #0
 800ef32:	f04f 020a 	mov.w	r2, #10
 800ef36:	4641      	mov	r1, r8
 800ef38:	4620      	mov	r0, r4
 800ef3a:	d106      	bne.n	800ef4a <_dtoa_r+0xb0a>
 800ef3c:	f000 fcc6 	bl	800f8cc <__multadd>
 800ef40:	4680      	mov	r8, r0
 800ef42:	4607      	mov	r7, r0
 800ef44:	f109 0901 	add.w	r9, r9, #1
 800ef48:	e772      	b.n	800ee30 <_dtoa_r+0x9f0>
 800ef4a:	f000 fcbf 	bl	800f8cc <__multadd>
 800ef4e:	4639      	mov	r1, r7
 800ef50:	4680      	mov	r8, r0
 800ef52:	2300      	movs	r3, #0
 800ef54:	220a      	movs	r2, #10
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 fcb8 	bl	800f8cc <__multadd>
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	e7f1      	b.n	800ef44 <_dtoa_r+0xb04>
 800ef60:	9b03      	ldr	r3, [sp, #12]
 800ef62:	9302      	str	r3, [sp, #8]
 800ef64:	9d01      	ldr	r5, [sp, #4]
 800ef66:	ee18 0a10 	vmov	r0, s16
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	f7ff f9da 	bl	800e324 <quorem>
 800ef70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef74:	9b01      	ldr	r3, [sp, #4]
 800ef76:	f805 ab01 	strb.w	sl, [r5], #1
 800ef7a:	1aea      	subs	r2, r5, r3
 800ef7c:	9b02      	ldr	r3, [sp, #8]
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	dd09      	ble.n	800ef96 <_dtoa_r+0xb56>
 800ef82:	ee18 1a10 	vmov	r1, s16
 800ef86:	2300      	movs	r3, #0
 800ef88:	220a      	movs	r2, #10
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 fc9e 	bl	800f8cc <__multadd>
 800ef90:	ee08 0a10 	vmov	s16, r0
 800ef94:	e7e7      	b.n	800ef66 <_dtoa_r+0xb26>
 800ef96:	9b02      	ldr	r3, [sp, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	bfc8      	it	gt
 800ef9c:	461d      	movgt	r5, r3
 800ef9e:	9b01      	ldr	r3, [sp, #4]
 800efa0:	bfd8      	it	le
 800efa2:	2501      	movle	r5, #1
 800efa4:	441d      	add	r5, r3
 800efa6:	f04f 0800 	mov.w	r8, #0
 800efaa:	ee18 1a10 	vmov	r1, s16
 800efae:	2201      	movs	r2, #1
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 fe85 	bl	800fcc0 <__lshift>
 800efb6:	4631      	mov	r1, r6
 800efb8:	ee08 0a10 	vmov	s16, r0
 800efbc:	f000 fef0 	bl	800fda0 <__mcmp>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	dc91      	bgt.n	800eee8 <_dtoa_r+0xaa8>
 800efc4:	d102      	bne.n	800efcc <_dtoa_r+0xb8c>
 800efc6:	f01a 0f01 	tst.w	sl, #1
 800efca:	d18d      	bne.n	800eee8 <_dtoa_r+0xaa8>
 800efcc:	462b      	mov	r3, r5
 800efce:	461d      	mov	r5, r3
 800efd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efd4:	2a30      	cmp	r2, #48	; 0x30
 800efd6:	d0fa      	beq.n	800efce <_dtoa_r+0xb8e>
 800efd8:	e6d7      	b.n	800ed8a <_dtoa_r+0x94a>
 800efda:	9a01      	ldr	r2, [sp, #4]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d184      	bne.n	800eeea <_dtoa_r+0xaaa>
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	3301      	adds	r3, #1
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	2331      	movs	r3, #49	; 0x31
 800efe8:	7013      	strb	r3, [r2, #0]
 800efea:	e6ce      	b.n	800ed8a <_dtoa_r+0x94a>
 800efec:	4b09      	ldr	r3, [pc, #36]	; (800f014 <_dtoa_r+0xbd4>)
 800efee:	f7ff ba95 	b.w	800e51c <_dtoa_r+0xdc>
 800eff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f47f aa6e 	bne.w	800e4d6 <_dtoa_r+0x96>
 800effa:	4b07      	ldr	r3, [pc, #28]	; (800f018 <_dtoa_r+0xbd8>)
 800effc:	f7ff ba8e 	b.w	800e51c <_dtoa_r+0xdc>
 800f000:	9b02      	ldr	r3, [sp, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	dcae      	bgt.n	800ef64 <_dtoa_r+0xb24>
 800f006:	9b06      	ldr	r3, [sp, #24]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	f73f aea8 	bgt.w	800ed5e <_dtoa_r+0x91e>
 800f00e:	e7a9      	b.n	800ef64 <_dtoa_r+0xb24>
 800f010:	08011dd4 	.word	0x08011dd4
 800f014:	08012031 	.word	0x08012031
 800f018:	08011d55 	.word	0x08011d55

0800f01c <rshift>:
 800f01c:	6903      	ldr	r3, [r0, #16]
 800f01e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f026:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f02a:	f100 0414 	add.w	r4, r0, #20
 800f02e:	dd45      	ble.n	800f0bc <rshift+0xa0>
 800f030:	f011 011f 	ands.w	r1, r1, #31
 800f034:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f038:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f03c:	d10c      	bne.n	800f058 <rshift+0x3c>
 800f03e:	f100 0710 	add.w	r7, r0, #16
 800f042:	4629      	mov	r1, r5
 800f044:	42b1      	cmp	r1, r6
 800f046:	d334      	bcc.n	800f0b2 <rshift+0x96>
 800f048:	1a9b      	subs	r3, r3, r2
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	1eea      	subs	r2, r5, #3
 800f04e:	4296      	cmp	r6, r2
 800f050:	bf38      	it	cc
 800f052:	2300      	movcc	r3, #0
 800f054:	4423      	add	r3, r4
 800f056:	e015      	b.n	800f084 <rshift+0x68>
 800f058:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f05c:	f1c1 0820 	rsb	r8, r1, #32
 800f060:	40cf      	lsrs	r7, r1
 800f062:	f105 0e04 	add.w	lr, r5, #4
 800f066:	46a1      	mov	r9, r4
 800f068:	4576      	cmp	r6, lr
 800f06a:	46f4      	mov	ip, lr
 800f06c:	d815      	bhi.n	800f09a <rshift+0x7e>
 800f06e:	1a9a      	subs	r2, r3, r2
 800f070:	0092      	lsls	r2, r2, #2
 800f072:	3a04      	subs	r2, #4
 800f074:	3501      	adds	r5, #1
 800f076:	42ae      	cmp	r6, r5
 800f078:	bf38      	it	cc
 800f07a:	2200      	movcc	r2, #0
 800f07c:	18a3      	adds	r3, r4, r2
 800f07e:	50a7      	str	r7, [r4, r2]
 800f080:	b107      	cbz	r7, 800f084 <rshift+0x68>
 800f082:	3304      	adds	r3, #4
 800f084:	1b1a      	subs	r2, r3, r4
 800f086:	42a3      	cmp	r3, r4
 800f088:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f08c:	bf08      	it	eq
 800f08e:	2300      	moveq	r3, #0
 800f090:	6102      	str	r2, [r0, #16]
 800f092:	bf08      	it	eq
 800f094:	6143      	streq	r3, [r0, #20]
 800f096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f09a:	f8dc c000 	ldr.w	ip, [ip]
 800f09e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f0a2:	ea4c 0707 	orr.w	r7, ip, r7
 800f0a6:	f849 7b04 	str.w	r7, [r9], #4
 800f0aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0ae:	40cf      	lsrs	r7, r1
 800f0b0:	e7da      	b.n	800f068 <rshift+0x4c>
 800f0b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f0b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f0ba:	e7c3      	b.n	800f044 <rshift+0x28>
 800f0bc:	4623      	mov	r3, r4
 800f0be:	e7e1      	b.n	800f084 <rshift+0x68>

0800f0c0 <__hexdig_fun>:
 800f0c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f0c4:	2b09      	cmp	r3, #9
 800f0c6:	d802      	bhi.n	800f0ce <__hexdig_fun+0xe>
 800f0c8:	3820      	subs	r0, #32
 800f0ca:	b2c0      	uxtb	r0, r0
 800f0cc:	4770      	bx	lr
 800f0ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f0d2:	2b05      	cmp	r3, #5
 800f0d4:	d801      	bhi.n	800f0da <__hexdig_fun+0x1a>
 800f0d6:	3847      	subs	r0, #71	; 0x47
 800f0d8:	e7f7      	b.n	800f0ca <__hexdig_fun+0xa>
 800f0da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f0de:	2b05      	cmp	r3, #5
 800f0e0:	d801      	bhi.n	800f0e6 <__hexdig_fun+0x26>
 800f0e2:	3827      	subs	r0, #39	; 0x27
 800f0e4:	e7f1      	b.n	800f0ca <__hexdig_fun+0xa>
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	4770      	bx	lr
	...

0800f0ec <__gethex>:
 800f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f0:	ed2d 8b02 	vpush	{d8}
 800f0f4:	b089      	sub	sp, #36	; 0x24
 800f0f6:	ee08 0a10 	vmov	s16, r0
 800f0fa:	9304      	str	r3, [sp, #16]
 800f0fc:	4bb4      	ldr	r3, [pc, #720]	; (800f3d0 <__gethex+0x2e4>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	9301      	str	r3, [sp, #4]
 800f102:	4618      	mov	r0, r3
 800f104:	468b      	mov	fp, r1
 800f106:	4690      	mov	r8, r2
 800f108:	f7f1 f86c 	bl	80001e4 <strlen>
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	f8db 2000 	ldr.w	r2, [fp]
 800f112:	4403      	add	r3, r0
 800f114:	4682      	mov	sl, r0
 800f116:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f11a:	9305      	str	r3, [sp, #20]
 800f11c:	1c93      	adds	r3, r2, #2
 800f11e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f122:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f126:	32fe      	adds	r2, #254	; 0xfe
 800f128:	18d1      	adds	r1, r2, r3
 800f12a:	461f      	mov	r7, r3
 800f12c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f130:	9100      	str	r1, [sp, #0]
 800f132:	2830      	cmp	r0, #48	; 0x30
 800f134:	d0f8      	beq.n	800f128 <__gethex+0x3c>
 800f136:	f7ff ffc3 	bl	800f0c0 <__hexdig_fun>
 800f13a:	4604      	mov	r4, r0
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d13a      	bne.n	800f1b6 <__gethex+0xca>
 800f140:	9901      	ldr	r1, [sp, #4]
 800f142:	4652      	mov	r2, sl
 800f144:	4638      	mov	r0, r7
 800f146:	f001 fdfb 	bl	8010d40 <strncmp>
 800f14a:	4605      	mov	r5, r0
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d168      	bne.n	800f222 <__gethex+0x136>
 800f150:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f154:	eb07 060a 	add.w	r6, r7, sl
 800f158:	f7ff ffb2 	bl	800f0c0 <__hexdig_fun>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d062      	beq.n	800f226 <__gethex+0x13a>
 800f160:	4633      	mov	r3, r6
 800f162:	7818      	ldrb	r0, [r3, #0]
 800f164:	2830      	cmp	r0, #48	; 0x30
 800f166:	461f      	mov	r7, r3
 800f168:	f103 0301 	add.w	r3, r3, #1
 800f16c:	d0f9      	beq.n	800f162 <__gethex+0x76>
 800f16e:	f7ff ffa7 	bl	800f0c0 <__hexdig_fun>
 800f172:	2301      	movs	r3, #1
 800f174:	fab0 f480 	clz	r4, r0
 800f178:	0964      	lsrs	r4, r4, #5
 800f17a:	4635      	mov	r5, r6
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	463a      	mov	r2, r7
 800f180:	4616      	mov	r6, r2
 800f182:	3201      	adds	r2, #1
 800f184:	7830      	ldrb	r0, [r6, #0]
 800f186:	f7ff ff9b 	bl	800f0c0 <__hexdig_fun>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d1f8      	bne.n	800f180 <__gethex+0x94>
 800f18e:	9901      	ldr	r1, [sp, #4]
 800f190:	4652      	mov	r2, sl
 800f192:	4630      	mov	r0, r6
 800f194:	f001 fdd4 	bl	8010d40 <strncmp>
 800f198:	b980      	cbnz	r0, 800f1bc <__gethex+0xd0>
 800f19a:	b94d      	cbnz	r5, 800f1b0 <__gethex+0xc4>
 800f19c:	eb06 050a 	add.w	r5, r6, sl
 800f1a0:	462a      	mov	r2, r5
 800f1a2:	4616      	mov	r6, r2
 800f1a4:	3201      	adds	r2, #1
 800f1a6:	7830      	ldrb	r0, [r6, #0]
 800f1a8:	f7ff ff8a 	bl	800f0c0 <__hexdig_fun>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1f8      	bne.n	800f1a2 <__gethex+0xb6>
 800f1b0:	1bad      	subs	r5, r5, r6
 800f1b2:	00ad      	lsls	r5, r5, #2
 800f1b4:	e004      	b.n	800f1c0 <__gethex+0xd4>
 800f1b6:	2400      	movs	r4, #0
 800f1b8:	4625      	mov	r5, r4
 800f1ba:	e7e0      	b.n	800f17e <__gethex+0x92>
 800f1bc:	2d00      	cmp	r5, #0
 800f1be:	d1f7      	bne.n	800f1b0 <__gethex+0xc4>
 800f1c0:	7833      	ldrb	r3, [r6, #0]
 800f1c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1c6:	2b50      	cmp	r3, #80	; 0x50
 800f1c8:	d13b      	bne.n	800f242 <__gethex+0x156>
 800f1ca:	7873      	ldrb	r3, [r6, #1]
 800f1cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f1ce:	d02c      	beq.n	800f22a <__gethex+0x13e>
 800f1d0:	2b2d      	cmp	r3, #45	; 0x2d
 800f1d2:	d02e      	beq.n	800f232 <__gethex+0x146>
 800f1d4:	1c71      	adds	r1, r6, #1
 800f1d6:	f04f 0900 	mov.w	r9, #0
 800f1da:	7808      	ldrb	r0, [r1, #0]
 800f1dc:	f7ff ff70 	bl	800f0c0 <__hexdig_fun>
 800f1e0:	1e43      	subs	r3, r0, #1
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b18      	cmp	r3, #24
 800f1e6:	d82c      	bhi.n	800f242 <__gethex+0x156>
 800f1e8:	f1a0 0210 	sub.w	r2, r0, #16
 800f1ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f1f0:	f7ff ff66 	bl	800f0c0 <__hexdig_fun>
 800f1f4:	1e43      	subs	r3, r0, #1
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	2b18      	cmp	r3, #24
 800f1fa:	d91d      	bls.n	800f238 <__gethex+0x14c>
 800f1fc:	f1b9 0f00 	cmp.w	r9, #0
 800f200:	d000      	beq.n	800f204 <__gethex+0x118>
 800f202:	4252      	negs	r2, r2
 800f204:	4415      	add	r5, r2
 800f206:	f8cb 1000 	str.w	r1, [fp]
 800f20a:	b1e4      	cbz	r4, 800f246 <__gethex+0x15a>
 800f20c:	9b00      	ldr	r3, [sp, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bf14      	ite	ne
 800f212:	2700      	movne	r7, #0
 800f214:	2706      	moveq	r7, #6
 800f216:	4638      	mov	r0, r7
 800f218:	b009      	add	sp, #36	; 0x24
 800f21a:	ecbd 8b02 	vpop	{d8}
 800f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f222:	463e      	mov	r6, r7
 800f224:	4625      	mov	r5, r4
 800f226:	2401      	movs	r4, #1
 800f228:	e7ca      	b.n	800f1c0 <__gethex+0xd4>
 800f22a:	f04f 0900 	mov.w	r9, #0
 800f22e:	1cb1      	adds	r1, r6, #2
 800f230:	e7d3      	b.n	800f1da <__gethex+0xee>
 800f232:	f04f 0901 	mov.w	r9, #1
 800f236:	e7fa      	b.n	800f22e <__gethex+0x142>
 800f238:	230a      	movs	r3, #10
 800f23a:	fb03 0202 	mla	r2, r3, r2, r0
 800f23e:	3a10      	subs	r2, #16
 800f240:	e7d4      	b.n	800f1ec <__gethex+0x100>
 800f242:	4631      	mov	r1, r6
 800f244:	e7df      	b.n	800f206 <__gethex+0x11a>
 800f246:	1bf3      	subs	r3, r6, r7
 800f248:	3b01      	subs	r3, #1
 800f24a:	4621      	mov	r1, r4
 800f24c:	2b07      	cmp	r3, #7
 800f24e:	dc0b      	bgt.n	800f268 <__gethex+0x17c>
 800f250:	ee18 0a10 	vmov	r0, s16
 800f254:	f000 fad8 	bl	800f808 <_Balloc>
 800f258:	4604      	mov	r4, r0
 800f25a:	b940      	cbnz	r0, 800f26e <__gethex+0x182>
 800f25c:	4b5d      	ldr	r3, [pc, #372]	; (800f3d4 <__gethex+0x2e8>)
 800f25e:	4602      	mov	r2, r0
 800f260:	21de      	movs	r1, #222	; 0xde
 800f262:	485d      	ldr	r0, [pc, #372]	; (800f3d8 <__gethex+0x2ec>)
 800f264:	f001 fdc8 	bl	8010df8 <__assert_func>
 800f268:	3101      	adds	r1, #1
 800f26a:	105b      	asrs	r3, r3, #1
 800f26c:	e7ee      	b.n	800f24c <__gethex+0x160>
 800f26e:	f100 0914 	add.w	r9, r0, #20
 800f272:	f04f 0b00 	mov.w	fp, #0
 800f276:	f1ca 0301 	rsb	r3, sl, #1
 800f27a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f27e:	f8cd b000 	str.w	fp, [sp]
 800f282:	9306      	str	r3, [sp, #24]
 800f284:	42b7      	cmp	r7, r6
 800f286:	d340      	bcc.n	800f30a <__gethex+0x21e>
 800f288:	9802      	ldr	r0, [sp, #8]
 800f28a:	9b00      	ldr	r3, [sp, #0]
 800f28c:	f840 3b04 	str.w	r3, [r0], #4
 800f290:	eba0 0009 	sub.w	r0, r0, r9
 800f294:	1080      	asrs	r0, r0, #2
 800f296:	0146      	lsls	r6, r0, #5
 800f298:	6120      	str	r0, [r4, #16]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f000 fba6 	bl	800f9ec <__hi0bits>
 800f2a0:	1a30      	subs	r0, r6, r0
 800f2a2:	f8d8 6000 	ldr.w	r6, [r8]
 800f2a6:	42b0      	cmp	r0, r6
 800f2a8:	dd63      	ble.n	800f372 <__gethex+0x286>
 800f2aa:	1b87      	subs	r7, r0, r6
 800f2ac:	4639      	mov	r1, r7
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 ff4a 	bl	8010148 <__any_on>
 800f2b4:	4682      	mov	sl, r0
 800f2b6:	b1a8      	cbz	r0, 800f2e4 <__gethex+0x1f8>
 800f2b8:	1e7b      	subs	r3, r7, #1
 800f2ba:	1159      	asrs	r1, r3, #5
 800f2bc:	f003 021f 	and.w	r2, r3, #31
 800f2c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f2c4:	f04f 0a01 	mov.w	sl, #1
 800f2c8:	fa0a f202 	lsl.w	r2, sl, r2
 800f2cc:	420a      	tst	r2, r1
 800f2ce:	d009      	beq.n	800f2e4 <__gethex+0x1f8>
 800f2d0:	4553      	cmp	r3, sl
 800f2d2:	dd05      	ble.n	800f2e0 <__gethex+0x1f4>
 800f2d4:	1eb9      	subs	r1, r7, #2
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 ff36 	bl	8010148 <__any_on>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d145      	bne.n	800f36c <__gethex+0x280>
 800f2e0:	f04f 0a02 	mov.w	sl, #2
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7ff fe98 	bl	800f01c <rshift>
 800f2ec:	443d      	add	r5, r7
 800f2ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2f2:	42ab      	cmp	r3, r5
 800f2f4:	da4c      	bge.n	800f390 <__gethex+0x2a4>
 800f2f6:	ee18 0a10 	vmov	r0, s16
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f000 fac4 	bl	800f888 <_Bfree>
 800f300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f302:	2300      	movs	r3, #0
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	27a3      	movs	r7, #163	; 0xa3
 800f308:	e785      	b.n	800f216 <__gethex+0x12a>
 800f30a:	1e73      	subs	r3, r6, #1
 800f30c:	9a05      	ldr	r2, [sp, #20]
 800f30e:	9303      	str	r3, [sp, #12]
 800f310:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f314:	4293      	cmp	r3, r2
 800f316:	d019      	beq.n	800f34c <__gethex+0x260>
 800f318:	f1bb 0f20 	cmp.w	fp, #32
 800f31c:	d107      	bne.n	800f32e <__gethex+0x242>
 800f31e:	9b02      	ldr	r3, [sp, #8]
 800f320:	9a00      	ldr	r2, [sp, #0]
 800f322:	f843 2b04 	str.w	r2, [r3], #4
 800f326:	9302      	str	r3, [sp, #8]
 800f328:	2300      	movs	r3, #0
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	469b      	mov	fp, r3
 800f32e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f332:	f7ff fec5 	bl	800f0c0 <__hexdig_fun>
 800f336:	9b00      	ldr	r3, [sp, #0]
 800f338:	f000 000f 	and.w	r0, r0, #15
 800f33c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f340:	4303      	orrs	r3, r0
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	f10b 0b04 	add.w	fp, fp, #4
 800f348:	9b03      	ldr	r3, [sp, #12]
 800f34a:	e00d      	b.n	800f368 <__gethex+0x27c>
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	9a06      	ldr	r2, [sp, #24]
 800f350:	4413      	add	r3, r2
 800f352:	42bb      	cmp	r3, r7
 800f354:	d3e0      	bcc.n	800f318 <__gethex+0x22c>
 800f356:	4618      	mov	r0, r3
 800f358:	9901      	ldr	r1, [sp, #4]
 800f35a:	9307      	str	r3, [sp, #28]
 800f35c:	4652      	mov	r2, sl
 800f35e:	f001 fcef 	bl	8010d40 <strncmp>
 800f362:	9b07      	ldr	r3, [sp, #28]
 800f364:	2800      	cmp	r0, #0
 800f366:	d1d7      	bne.n	800f318 <__gethex+0x22c>
 800f368:	461e      	mov	r6, r3
 800f36a:	e78b      	b.n	800f284 <__gethex+0x198>
 800f36c:	f04f 0a03 	mov.w	sl, #3
 800f370:	e7b8      	b.n	800f2e4 <__gethex+0x1f8>
 800f372:	da0a      	bge.n	800f38a <__gethex+0x29e>
 800f374:	1a37      	subs	r7, r6, r0
 800f376:	4621      	mov	r1, r4
 800f378:	ee18 0a10 	vmov	r0, s16
 800f37c:	463a      	mov	r2, r7
 800f37e:	f000 fc9f 	bl	800fcc0 <__lshift>
 800f382:	1bed      	subs	r5, r5, r7
 800f384:	4604      	mov	r4, r0
 800f386:	f100 0914 	add.w	r9, r0, #20
 800f38a:	f04f 0a00 	mov.w	sl, #0
 800f38e:	e7ae      	b.n	800f2ee <__gethex+0x202>
 800f390:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f394:	42a8      	cmp	r0, r5
 800f396:	dd72      	ble.n	800f47e <__gethex+0x392>
 800f398:	1b45      	subs	r5, r0, r5
 800f39a:	42ae      	cmp	r6, r5
 800f39c:	dc36      	bgt.n	800f40c <__gethex+0x320>
 800f39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d02a      	beq.n	800f3fc <__gethex+0x310>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d02c      	beq.n	800f404 <__gethex+0x318>
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d11c      	bne.n	800f3e8 <__gethex+0x2fc>
 800f3ae:	42ae      	cmp	r6, r5
 800f3b0:	d11a      	bne.n	800f3e8 <__gethex+0x2fc>
 800f3b2:	2e01      	cmp	r6, #1
 800f3b4:	d112      	bne.n	800f3dc <__gethex+0x2f0>
 800f3b6:	9a04      	ldr	r2, [sp, #16]
 800f3b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3bc:	6013      	str	r3, [r2, #0]
 800f3be:	2301      	movs	r3, #1
 800f3c0:	6123      	str	r3, [r4, #16]
 800f3c2:	f8c9 3000 	str.w	r3, [r9]
 800f3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3c8:	2762      	movs	r7, #98	; 0x62
 800f3ca:	601c      	str	r4, [r3, #0]
 800f3cc:	e723      	b.n	800f216 <__gethex+0x12a>
 800f3ce:	bf00      	nop
 800f3d0:	08011e4c 	.word	0x08011e4c
 800f3d4:	08011dd4 	.word	0x08011dd4
 800f3d8:	08011de5 	.word	0x08011de5
 800f3dc:	1e71      	subs	r1, r6, #1
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f000 feb2 	bl	8010148 <__any_on>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d1e6      	bne.n	800f3b6 <__gethex+0x2ca>
 800f3e8:	ee18 0a10 	vmov	r0, s16
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	f000 fa4b 	bl	800f888 <_Bfree>
 800f3f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	6013      	str	r3, [r2, #0]
 800f3f8:	2750      	movs	r7, #80	; 0x50
 800f3fa:	e70c      	b.n	800f216 <__gethex+0x12a>
 800f3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1f2      	bne.n	800f3e8 <__gethex+0x2fc>
 800f402:	e7d8      	b.n	800f3b6 <__gethex+0x2ca>
 800f404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1d5      	bne.n	800f3b6 <__gethex+0x2ca>
 800f40a:	e7ed      	b.n	800f3e8 <__gethex+0x2fc>
 800f40c:	1e6f      	subs	r7, r5, #1
 800f40e:	f1ba 0f00 	cmp.w	sl, #0
 800f412:	d131      	bne.n	800f478 <__gethex+0x38c>
 800f414:	b127      	cbz	r7, 800f420 <__gethex+0x334>
 800f416:	4639      	mov	r1, r7
 800f418:	4620      	mov	r0, r4
 800f41a:	f000 fe95 	bl	8010148 <__any_on>
 800f41e:	4682      	mov	sl, r0
 800f420:	117b      	asrs	r3, r7, #5
 800f422:	2101      	movs	r1, #1
 800f424:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f428:	f007 071f 	and.w	r7, r7, #31
 800f42c:	fa01 f707 	lsl.w	r7, r1, r7
 800f430:	421f      	tst	r7, r3
 800f432:	4629      	mov	r1, r5
 800f434:	4620      	mov	r0, r4
 800f436:	bf18      	it	ne
 800f438:	f04a 0a02 	orrne.w	sl, sl, #2
 800f43c:	1b76      	subs	r6, r6, r5
 800f43e:	f7ff fded 	bl	800f01c <rshift>
 800f442:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f446:	2702      	movs	r7, #2
 800f448:	f1ba 0f00 	cmp.w	sl, #0
 800f44c:	d048      	beq.n	800f4e0 <__gethex+0x3f4>
 800f44e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f452:	2b02      	cmp	r3, #2
 800f454:	d015      	beq.n	800f482 <__gethex+0x396>
 800f456:	2b03      	cmp	r3, #3
 800f458:	d017      	beq.n	800f48a <__gethex+0x39e>
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d109      	bne.n	800f472 <__gethex+0x386>
 800f45e:	f01a 0f02 	tst.w	sl, #2
 800f462:	d006      	beq.n	800f472 <__gethex+0x386>
 800f464:	f8d9 0000 	ldr.w	r0, [r9]
 800f468:	ea4a 0a00 	orr.w	sl, sl, r0
 800f46c:	f01a 0f01 	tst.w	sl, #1
 800f470:	d10e      	bne.n	800f490 <__gethex+0x3a4>
 800f472:	f047 0710 	orr.w	r7, r7, #16
 800f476:	e033      	b.n	800f4e0 <__gethex+0x3f4>
 800f478:	f04f 0a01 	mov.w	sl, #1
 800f47c:	e7d0      	b.n	800f420 <__gethex+0x334>
 800f47e:	2701      	movs	r7, #1
 800f480:	e7e2      	b.n	800f448 <__gethex+0x35c>
 800f482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f484:	f1c3 0301 	rsb	r3, r3, #1
 800f488:	9315      	str	r3, [sp, #84]	; 0x54
 800f48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0f0      	beq.n	800f472 <__gethex+0x386>
 800f490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f494:	f104 0314 	add.w	r3, r4, #20
 800f498:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f49c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4a0:	f04f 0c00 	mov.w	ip, #0
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4ae:	d01c      	beq.n	800f4ea <__gethex+0x3fe>
 800f4b0:	3201      	adds	r2, #1
 800f4b2:	6002      	str	r2, [r0, #0]
 800f4b4:	2f02      	cmp	r7, #2
 800f4b6:	f104 0314 	add.w	r3, r4, #20
 800f4ba:	d13f      	bne.n	800f53c <__gethex+0x450>
 800f4bc:	f8d8 2000 	ldr.w	r2, [r8]
 800f4c0:	3a01      	subs	r2, #1
 800f4c2:	42b2      	cmp	r2, r6
 800f4c4:	d10a      	bne.n	800f4dc <__gethex+0x3f0>
 800f4c6:	1171      	asrs	r1, r6, #5
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4ce:	f006 061f 	and.w	r6, r6, #31
 800f4d2:	fa02 f606 	lsl.w	r6, r2, r6
 800f4d6:	421e      	tst	r6, r3
 800f4d8:	bf18      	it	ne
 800f4da:	4617      	movne	r7, r2
 800f4dc:	f047 0720 	orr.w	r7, r7, #32
 800f4e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4e2:	601c      	str	r4, [r3, #0]
 800f4e4:	9b04      	ldr	r3, [sp, #16]
 800f4e6:	601d      	str	r5, [r3, #0]
 800f4e8:	e695      	b.n	800f216 <__gethex+0x12a>
 800f4ea:	4299      	cmp	r1, r3
 800f4ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4f0:	d8d8      	bhi.n	800f4a4 <__gethex+0x3b8>
 800f4f2:	68a3      	ldr	r3, [r4, #8]
 800f4f4:	459b      	cmp	fp, r3
 800f4f6:	db19      	blt.n	800f52c <__gethex+0x440>
 800f4f8:	6861      	ldr	r1, [r4, #4]
 800f4fa:	ee18 0a10 	vmov	r0, s16
 800f4fe:	3101      	adds	r1, #1
 800f500:	f000 f982 	bl	800f808 <_Balloc>
 800f504:	4681      	mov	r9, r0
 800f506:	b918      	cbnz	r0, 800f510 <__gethex+0x424>
 800f508:	4b1a      	ldr	r3, [pc, #104]	; (800f574 <__gethex+0x488>)
 800f50a:	4602      	mov	r2, r0
 800f50c:	2184      	movs	r1, #132	; 0x84
 800f50e:	e6a8      	b.n	800f262 <__gethex+0x176>
 800f510:	6922      	ldr	r2, [r4, #16]
 800f512:	3202      	adds	r2, #2
 800f514:	f104 010c 	add.w	r1, r4, #12
 800f518:	0092      	lsls	r2, r2, #2
 800f51a:	300c      	adds	r0, #12
 800f51c:	f7fc fb98 	bl	800bc50 <memcpy>
 800f520:	4621      	mov	r1, r4
 800f522:	ee18 0a10 	vmov	r0, s16
 800f526:	f000 f9af 	bl	800f888 <_Bfree>
 800f52a:	464c      	mov	r4, r9
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f534:	6122      	str	r2, [r4, #16]
 800f536:	2201      	movs	r2, #1
 800f538:	615a      	str	r2, [r3, #20]
 800f53a:	e7bb      	b.n	800f4b4 <__gethex+0x3c8>
 800f53c:	6922      	ldr	r2, [r4, #16]
 800f53e:	455a      	cmp	r2, fp
 800f540:	dd0b      	ble.n	800f55a <__gethex+0x46e>
 800f542:	2101      	movs	r1, #1
 800f544:	4620      	mov	r0, r4
 800f546:	f7ff fd69 	bl	800f01c <rshift>
 800f54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f54e:	3501      	adds	r5, #1
 800f550:	42ab      	cmp	r3, r5
 800f552:	f6ff aed0 	blt.w	800f2f6 <__gethex+0x20a>
 800f556:	2701      	movs	r7, #1
 800f558:	e7c0      	b.n	800f4dc <__gethex+0x3f0>
 800f55a:	f016 061f 	ands.w	r6, r6, #31
 800f55e:	d0fa      	beq.n	800f556 <__gethex+0x46a>
 800f560:	4453      	add	r3, sl
 800f562:	f1c6 0620 	rsb	r6, r6, #32
 800f566:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f56a:	f000 fa3f 	bl	800f9ec <__hi0bits>
 800f56e:	42b0      	cmp	r0, r6
 800f570:	dbe7      	blt.n	800f542 <__gethex+0x456>
 800f572:	e7f0      	b.n	800f556 <__gethex+0x46a>
 800f574:	08011dd4 	.word	0x08011dd4

0800f578 <L_shift>:
 800f578:	f1c2 0208 	rsb	r2, r2, #8
 800f57c:	0092      	lsls	r2, r2, #2
 800f57e:	b570      	push	{r4, r5, r6, lr}
 800f580:	f1c2 0620 	rsb	r6, r2, #32
 800f584:	6843      	ldr	r3, [r0, #4]
 800f586:	6804      	ldr	r4, [r0, #0]
 800f588:	fa03 f506 	lsl.w	r5, r3, r6
 800f58c:	432c      	orrs	r4, r5
 800f58e:	40d3      	lsrs	r3, r2
 800f590:	6004      	str	r4, [r0, #0]
 800f592:	f840 3f04 	str.w	r3, [r0, #4]!
 800f596:	4288      	cmp	r0, r1
 800f598:	d3f4      	bcc.n	800f584 <L_shift+0xc>
 800f59a:	bd70      	pop	{r4, r5, r6, pc}

0800f59c <__match>:
 800f59c:	b530      	push	{r4, r5, lr}
 800f59e:	6803      	ldr	r3, [r0, #0]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5a6:	b914      	cbnz	r4, 800f5ae <__match+0x12>
 800f5a8:	6003      	str	r3, [r0, #0]
 800f5aa:	2001      	movs	r0, #1
 800f5ac:	bd30      	pop	{r4, r5, pc}
 800f5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f5b6:	2d19      	cmp	r5, #25
 800f5b8:	bf98      	it	ls
 800f5ba:	3220      	addls	r2, #32
 800f5bc:	42a2      	cmp	r2, r4
 800f5be:	d0f0      	beq.n	800f5a2 <__match+0x6>
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	e7f3      	b.n	800f5ac <__match+0x10>

0800f5c4 <__hexnan>:
 800f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	680b      	ldr	r3, [r1, #0]
 800f5ca:	115e      	asrs	r6, r3, #5
 800f5cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5d0:	f013 031f 	ands.w	r3, r3, #31
 800f5d4:	b087      	sub	sp, #28
 800f5d6:	bf18      	it	ne
 800f5d8:	3604      	addne	r6, #4
 800f5da:	2500      	movs	r5, #0
 800f5dc:	1f37      	subs	r7, r6, #4
 800f5de:	4690      	mov	r8, r2
 800f5e0:	6802      	ldr	r2, [r0, #0]
 800f5e2:	9301      	str	r3, [sp, #4]
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5ea:	46b9      	mov	r9, r7
 800f5ec:	463c      	mov	r4, r7
 800f5ee:	9502      	str	r5, [sp, #8]
 800f5f0:	46ab      	mov	fp, r5
 800f5f2:	7851      	ldrb	r1, [r2, #1]
 800f5f4:	1c53      	adds	r3, r2, #1
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	b341      	cbz	r1, 800f64c <__hexnan+0x88>
 800f5fa:	4608      	mov	r0, r1
 800f5fc:	9205      	str	r2, [sp, #20]
 800f5fe:	9104      	str	r1, [sp, #16]
 800f600:	f7ff fd5e 	bl	800f0c0 <__hexdig_fun>
 800f604:	2800      	cmp	r0, #0
 800f606:	d14f      	bne.n	800f6a8 <__hexnan+0xe4>
 800f608:	9904      	ldr	r1, [sp, #16]
 800f60a:	9a05      	ldr	r2, [sp, #20]
 800f60c:	2920      	cmp	r1, #32
 800f60e:	d818      	bhi.n	800f642 <__hexnan+0x7e>
 800f610:	9b02      	ldr	r3, [sp, #8]
 800f612:	459b      	cmp	fp, r3
 800f614:	dd13      	ble.n	800f63e <__hexnan+0x7a>
 800f616:	454c      	cmp	r4, r9
 800f618:	d206      	bcs.n	800f628 <__hexnan+0x64>
 800f61a:	2d07      	cmp	r5, #7
 800f61c:	dc04      	bgt.n	800f628 <__hexnan+0x64>
 800f61e:	462a      	mov	r2, r5
 800f620:	4649      	mov	r1, r9
 800f622:	4620      	mov	r0, r4
 800f624:	f7ff ffa8 	bl	800f578 <L_shift>
 800f628:	4544      	cmp	r4, r8
 800f62a:	d950      	bls.n	800f6ce <__hexnan+0x10a>
 800f62c:	2300      	movs	r3, #0
 800f62e:	f1a4 0904 	sub.w	r9, r4, #4
 800f632:	f844 3c04 	str.w	r3, [r4, #-4]
 800f636:	f8cd b008 	str.w	fp, [sp, #8]
 800f63a:	464c      	mov	r4, r9
 800f63c:	461d      	mov	r5, r3
 800f63e:	9a03      	ldr	r2, [sp, #12]
 800f640:	e7d7      	b.n	800f5f2 <__hexnan+0x2e>
 800f642:	2929      	cmp	r1, #41	; 0x29
 800f644:	d156      	bne.n	800f6f4 <__hexnan+0x130>
 800f646:	3202      	adds	r2, #2
 800f648:	f8ca 2000 	str.w	r2, [sl]
 800f64c:	f1bb 0f00 	cmp.w	fp, #0
 800f650:	d050      	beq.n	800f6f4 <__hexnan+0x130>
 800f652:	454c      	cmp	r4, r9
 800f654:	d206      	bcs.n	800f664 <__hexnan+0xa0>
 800f656:	2d07      	cmp	r5, #7
 800f658:	dc04      	bgt.n	800f664 <__hexnan+0xa0>
 800f65a:	462a      	mov	r2, r5
 800f65c:	4649      	mov	r1, r9
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff ff8a 	bl	800f578 <L_shift>
 800f664:	4544      	cmp	r4, r8
 800f666:	d934      	bls.n	800f6d2 <__hexnan+0x10e>
 800f668:	f1a8 0204 	sub.w	r2, r8, #4
 800f66c:	4623      	mov	r3, r4
 800f66e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f672:	f842 1f04 	str.w	r1, [r2, #4]!
 800f676:	429f      	cmp	r7, r3
 800f678:	d2f9      	bcs.n	800f66e <__hexnan+0xaa>
 800f67a:	1b3b      	subs	r3, r7, r4
 800f67c:	f023 0303 	bic.w	r3, r3, #3
 800f680:	3304      	adds	r3, #4
 800f682:	3401      	adds	r4, #1
 800f684:	3e03      	subs	r6, #3
 800f686:	42b4      	cmp	r4, r6
 800f688:	bf88      	it	hi
 800f68a:	2304      	movhi	r3, #4
 800f68c:	4443      	add	r3, r8
 800f68e:	2200      	movs	r2, #0
 800f690:	f843 2b04 	str.w	r2, [r3], #4
 800f694:	429f      	cmp	r7, r3
 800f696:	d2fb      	bcs.n	800f690 <__hexnan+0xcc>
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	b91b      	cbnz	r3, 800f6a4 <__hexnan+0xe0>
 800f69c:	4547      	cmp	r7, r8
 800f69e:	d127      	bne.n	800f6f0 <__hexnan+0x12c>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	603b      	str	r3, [r7, #0]
 800f6a4:	2005      	movs	r0, #5
 800f6a6:	e026      	b.n	800f6f6 <__hexnan+0x132>
 800f6a8:	3501      	adds	r5, #1
 800f6aa:	2d08      	cmp	r5, #8
 800f6ac:	f10b 0b01 	add.w	fp, fp, #1
 800f6b0:	dd06      	ble.n	800f6c0 <__hexnan+0xfc>
 800f6b2:	4544      	cmp	r4, r8
 800f6b4:	d9c3      	bls.n	800f63e <__hexnan+0x7a>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6bc:	2501      	movs	r5, #1
 800f6be:	3c04      	subs	r4, #4
 800f6c0:	6822      	ldr	r2, [r4, #0]
 800f6c2:	f000 000f 	and.w	r0, r0, #15
 800f6c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f6ca:	6022      	str	r2, [r4, #0]
 800f6cc:	e7b7      	b.n	800f63e <__hexnan+0x7a>
 800f6ce:	2508      	movs	r5, #8
 800f6d0:	e7b5      	b.n	800f63e <__hexnan+0x7a>
 800f6d2:	9b01      	ldr	r3, [sp, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0df      	beq.n	800f698 <__hexnan+0xd4>
 800f6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6dc:	f1c3 0320 	rsb	r3, r3, #32
 800f6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f6e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6e8:	401a      	ands	r2, r3
 800f6ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800f6ee:	e7d3      	b.n	800f698 <__hexnan+0xd4>
 800f6f0:	3f04      	subs	r7, #4
 800f6f2:	e7d1      	b.n	800f698 <__hexnan+0xd4>
 800f6f4:	2004      	movs	r0, #4
 800f6f6:	b007      	add	sp, #28
 800f6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6fc <_findenv_r>:
 800f6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f700:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f770 <_findenv_r+0x74>
 800f704:	4607      	mov	r7, r0
 800f706:	4689      	mov	r9, r1
 800f708:	4616      	mov	r6, r2
 800f70a:	f001 fb93 	bl	8010e34 <__env_lock>
 800f70e:	f8da 4000 	ldr.w	r4, [sl]
 800f712:	b134      	cbz	r4, 800f722 <_findenv_r+0x26>
 800f714:	464b      	mov	r3, r9
 800f716:	4698      	mov	r8, r3
 800f718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f71c:	b13a      	cbz	r2, 800f72e <_findenv_r+0x32>
 800f71e:	2a3d      	cmp	r2, #61	; 0x3d
 800f720:	d1f9      	bne.n	800f716 <_findenv_r+0x1a>
 800f722:	4638      	mov	r0, r7
 800f724:	f001 fb8c 	bl	8010e40 <__env_unlock>
 800f728:	2000      	movs	r0, #0
 800f72a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72e:	eba8 0809 	sub.w	r8, r8, r9
 800f732:	46a3      	mov	fp, r4
 800f734:	f854 0b04 	ldr.w	r0, [r4], #4
 800f738:	2800      	cmp	r0, #0
 800f73a:	d0f2      	beq.n	800f722 <_findenv_r+0x26>
 800f73c:	4642      	mov	r2, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	f001 fafe 	bl	8010d40 <strncmp>
 800f744:	2800      	cmp	r0, #0
 800f746:	d1f4      	bne.n	800f732 <_findenv_r+0x36>
 800f748:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f74c:	eb03 0508 	add.w	r5, r3, r8
 800f750:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f754:	2b3d      	cmp	r3, #61	; 0x3d
 800f756:	d1ec      	bne.n	800f732 <_findenv_r+0x36>
 800f758:	f8da 3000 	ldr.w	r3, [sl]
 800f75c:	ebab 0303 	sub.w	r3, fp, r3
 800f760:	109b      	asrs	r3, r3, #2
 800f762:	4638      	mov	r0, r7
 800f764:	6033      	str	r3, [r6, #0]
 800f766:	f001 fb6b 	bl	8010e40 <__env_unlock>
 800f76a:	1c68      	adds	r0, r5, #1
 800f76c:	e7dd      	b.n	800f72a <_findenv_r+0x2e>
 800f76e:	bf00      	nop
 800f770:	2000000c 	.word	0x2000000c

0800f774 <_getenv_r>:
 800f774:	b507      	push	{r0, r1, r2, lr}
 800f776:	aa01      	add	r2, sp, #4
 800f778:	f7ff ffc0 	bl	800f6fc <_findenv_r>
 800f77c:	b003      	add	sp, #12
 800f77e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f784 <__gettzinfo>:
 800f784:	4800      	ldr	r0, [pc, #0]	; (800f788 <__gettzinfo+0x4>)
 800f786:	4770      	bx	lr
 800f788:	20000090 	.word	0x20000090

0800f78c <_localeconv_r>:
 800f78c:	4800      	ldr	r0, [pc, #0]	; (800f790 <_localeconv_r+0x4>)
 800f78e:	4770      	bx	lr
 800f790:	200001dc 	.word	0x200001dc

0800f794 <__retarget_lock_init_recursive>:
 800f794:	4770      	bx	lr

0800f796 <__retarget_lock_acquire>:
 800f796:	4770      	bx	lr

0800f798 <__retarget_lock_acquire_recursive>:
 800f798:	4770      	bx	lr

0800f79a <__retarget_lock_release>:
 800f79a:	4770      	bx	lr

0800f79c <__retarget_lock_release_recursive>:
 800f79c:	4770      	bx	lr
	...

0800f7a0 <_lseek_r>:
 800f7a0:	b538      	push	{r3, r4, r5, lr}
 800f7a2:	4d07      	ldr	r5, [pc, #28]	; (800f7c0 <_lseek_r+0x20>)
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	4608      	mov	r0, r1
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	602a      	str	r2, [r5, #0]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	f7f3 fd7a 	bl	80032a8 <_lseek>
 800f7b4:	1c43      	adds	r3, r0, #1
 800f7b6:	d102      	bne.n	800f7be <_lseek_r+0x1e>
 800f7b8:	682b      	ldr	r3, [r5, #0]
 800f7ba:	b103      	cbz	r3, 800f7be <_lseek_r+0x1e>
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	bd38      	pop	{r3, r4, r5, pc}
 800f7c0:	200068c0 	.word	0x200068c0

0800f7c4 <malloc>:
 800f7c4:	4b02      	ldr	r3, [pc, #8]	; (800f7d0 <malloc+0xc>)
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	f000 bd61 	b.w	8010290 <_malloc_r>
 800f7ce:	bf00      	nop
 800f7d0:	20000020 	.word	0x20000020

0800f7d4 <free>:
 800f7d4:	4b02      	ldr	r3, [pc, #8]	; (800f7e0 <free+0xc>)
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	f000 bced 	b.w	80101b8 <_free_r>
 800f7de:	bf00      	nop
 800f7e0:	20000020 	.word	0x20000020

0800f7e4 <__ascii_mbtowc>:
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	b901      	cbnz	r1, 800f7ea <__ascii_mbtowc+0x6>
 800f7e8:	a901      	add	r1, sp, #4
 800f7ea:	b142      	cbz	r2, 800f7fe <__ascii_mbtowc+0x1a>
 800f7ec:	b14b      	cbz	r3, 800f802 <__ascii_mbtowc+0x1e>
 800f7ee:	7813      	ldrb	r3, [r2, #0]
 800f7f0:	600b      	str	r3, [r1, #0]
 800f7f2:	7812      	ldrb	r2, [r2, #0]
 800f7f4:	1e10      	subs	r0, r2, #0
 800f7f6:	bf18      	it	ne
 800f7f8:	2001      	movne	r0, #1
 800f7fa:	b002      	add	sp, #8
 800f7fc:	4770      	bx	lr
 800f7fe:	4610      	mov	r0, r2
 800f800:	e7fb      	b.n	800f7fa <__ascii_mbtowc+0x16>
 800f802:	f06f 0001 	mvn.w	r0, #1
 800f806:	e7f8      	b.n	800f7fa <__ascii_mbtowc+0x16>

0800f808 <_Balloc>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f80c:	4604      	mov	r4, r0
 800f80e:	460d      	mov	r5, r1
 800f810:	b976      	cbnz	r6, 800f830 <_Balloc+0x28>
 800f812:	2010      	movs	r0, #16
 800f814:	f7ff ffd6 	bl	800f7c4 <malloc>
 800f818:	4602      	mov	r2, r0
 800f81a:	6260      	str	r0, [r4, #36]	; 0x24
 800f81c:	b920      	cbnz	r0, 800f828 <_Balloc+0x20>
 800f81e:	4b18      	ldr	r3, [pc, #96]	; (800f880 <_Balloc+0x78>)
 800f820:	4818      	ldr	r0, [pc, #96]	; (800f884 <_Balloc+0x7c>)
 800f822:	2166      	movs	r1, #102	; 0x66
 800f824:	f001 fae8 	bl	8010df8 <__assert_func>
 800f828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f82c:	6006      	str	r6, [r0, #0]
 800f82e:	60c6      	str	r6, [r0, #12]
 800f830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f832:	68f3      	ldr	r3, [r6, #12]
 800f834:	b183      	cbz	r3, 800f858 <_Balloc+0x50>
 800f836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f83e:	b9b8      	cbnz	r0, 800f870 <_Balloc+0x68>
 800f840:	2101      	movs	r1, #1
 800f842:	fa01 f605 	lsl.w	r6, r1, r5
 800f846:	1d72      	adds	r2, r6, #5
 800f848:	0092      	lsls	r2, r2, #2
 800f84a:	4620      	mov	r0, r4
 800f84c:	f000 fc9d 	bl	801018a <_calloc_r>
 800f850:	b160      	cbz	r0, 800f86c <_Balloc+0x64>
 800f852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f856:	e00e      	b.n	800f876 <_Balloc+0x6e>
 800f858:	2221      	movs	r2, #33	; 0x21
 800f85a:	2104      	movs	r1, #4
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fc94 	bl	801018a <_calloc_r>
 800f862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f864:	60f0      	str	r0, [r6, #12]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e4      	bne.n	800f836 <_Balloc+0x2e>
 800f86c:	2000      	movs	r0, #0
 800f86e:	bd70      	pop	{r4, r5, r6, pc}
 800f870:	6802      	ldr	r2, [r0, #0]
 800f872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f876:	2300      	movs	r3, #0
 800f878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f87c:	e7f7      	b.n	800f86e <_Balloc+0x66>
 800f87e:	bf00      	nop
 800f880:	08011d62 	.word	0x08011d62
 800f884:	08011ec0 	.word	0x08011ec0

0800f888 <_Bfree>:
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f88c:	4605      	mov	r5, r0
 800f88e:	460c      	mov	r4, r1
 800f890:	b976      	cbnz	r6, 800f8b0 <_Bfree+0x28>
 800f892:	2010      	movs	r0, #16
 800f894:	f7ff ff96 	bl	800f7c4 <malloc>
 800f898:	4602      	mov	r2, r0
 800f89a:	6268      	str	r0, [r5, #36]	; 0x24
 800f89c:	b920      	cbnz	r0, 800f8a8 <_Bfree+0x20>
 800f89e:	4b09      	ldr	r3, [pc, #36]	; (800f8c4 <_Bfree+0x3c>)
 800f8a0:	4809      	ldr	r0, [pc, #36]	; (800f8c8 <_Bfree+0x40>)
 800f8a2:	218a      	movs	r1, #138	; 0x8a
 800f8a4:	f001 faa8 	bl	8010df8 <__assert_func>
 800f8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8ac:	6006      	str	r6, [r0, #0]
 800f8ae:	60c6      	str	r6, [r0, #12]
 800f8b0:	b13c      	cbz	r4, 800f8c2 <_Bfree+0x3a>
 800f8b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f8b4:	6862      	ldr	r2, [r4, #4]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8bc:	6021      	str	r1, [r4, #0]
 800f8be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8c2:	bd70      	pop	{r4, r5, r6, pc}
 800f8c4:	08011d62 	.word	0x08011d62
 800f8c8:	08011ec0 	.word	0x08011ec0

0800f8cc <__multadd>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	690d      	ldr	r5, [r1, #16]
 800f8d2:	4607      	mov	r7, r0
 800f8d4:	460c      	mov	r4, r1
 800f8d6:	461e      	mov	r6, r3
 800f8d8:	f101 0c14 	add.w	ip, r1, #20
 800f8dc:	2000      	movs	r0, #0
 800f8de:	f8dc 3000 	ldr.w	r3, [ip]
 800f8e2:	b299      	uxth	r1, r3
 800f8e4:	fb02 6101 	mla	r1, r2, r1, r6
 800f8e8:	0c1e      	lsrs	r6, r3, #16
 800f8ea:	0c0b      	lsrs	r3, r1, #16
 800f8ec:	fb02 3306 	mla	r3, r2, r6, r3
 800f8f0:	b289      	uxth	r1, r1
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8f8:	4285      	cmp	r5, r0
 800f8fa:	f84c 1b04 	str.w	r1, [ip], #4
 800f8fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f902:	dcec      	bgt.n	800f8de <__multadd+0x12>
 800f904:	b30e      	cbz	r6, 800f94a <__multadd+0x7e>
 800f906:	68a3      	ldr	r3, [r4, #8]
 800f908:	42ab      	cmp	r3, r5
 800f90a:	dc19      	bgt.n	800f940 <__multadd+0x74>
 800f90c:	6861      	ldr	r1, [r4, #4]
 800f90e:	4638      	mov	r0, r7
 800f910:	3101      	adds	r1, #1
 800f912:	f7ff ff79 	bl	800f808 <_Balloc>
 800f916:	4680      	mov	r8, r0
 800f918:	b928      	cbnz	r0, 800f926 <__multadd+0x5a>
 800f91a:	4602      	mov	r2, r0
 800f91c:	4b0c      	ldr	r3, [pc, #48]	; (800f950 <__multadd+0x84>)
 800f91e:	480d      	ldr	r0, [pc, #52]	; (800f954 <__multadd+0x88>)
 800f920:	21b5      	movs	r1, #181	; 0xb5
 800f922:	f001 fa69 	bl	8010df8 <__assert_func>
 800f926:	6922      	ldr	r2, [r4, #16]
 800f928:	3202      	adds	r2, #2
 800f92a:	f104 010c 	add.w	r1, r4, #12
 800f92e:	0092      	lsls	r2, r2, #2
 800f930:	300c      	adds	r0, #12
 800f932:	f7fc f98d 	bl	800bc50 <memcpy>
 800f936:	4621      	mov	r1, r4
 800f938:	4638      	mov	r0, r7
 800f93a:	f7ff ffa5 	bl	800f888 <_Bfree>
 800f93e:	4644      	mov	r4, r8
 800f940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f944:	3501      	adds	r5, #1
 800f946:	615e      	str	r6, [r3, #20]
 800f948:	6125      	str	r5, [r4, #16]
 800f94a:	4620      	mov	r0, r4
 800f94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f950:	08011dd4 	.word	0x08011dd4
 800f954:	08011ec0 	.word	0x08011ec0

0800f958 <__s2b>:
 800f958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f95c:	460c      	mov	r4, r1
 800f95e:	4615      	mov	r5, r2
 800f960:	461f      	mov	r7, r3
 800f962:	2209      	movs	r2, #9
 800f964:	3308      	adds	r3, #8
 800f966:	4606      	mov	r6, r0
 800f968:	fb93 f3f2 	sdiv	r3, r3, r2
 800f96c:	2100      	movs	r1, #0
 800f96e:	2201      	movs	r2, #1
 800f970:	429a      	cmp	r2, r3
 800f972:	db09      	blt.n	800f988 <__s2b+0x30>
 800f974:	4630      	mov	r0, r6
 800f976:	f7ff ff47 	bl	800f808 <_Balloc>
 800f97a:	b940      	cbnz	r0, 800f98e <__s2b+0x36>
 800f97c:	4602      	mov	r2, r0
 800f97e:	4b19      	ldr	r3, [pc, #100]	; (800f9e4 <__s2b+0x8c>)
 800f980:	4819      	ldr	r0, [pc, #100]	; (800f9e8 <__s2b+0x90>)
 800f982:	21ce      	movs	r1, #206	; 0xce
 800f984:	f001 fa38 	bl	8010df8 <__assert_func>
 800f988:	0052      	lsls	r2, r2, #1
 800f98a:	3101      	adds	r1, #1
 800f98c:	e7f0      	b.n	800f970 <__s2b+0x18>
 800f98e:	9b08      	ldr	r3, [sp, #32]
 800f990:	6143      	str	r3, [r0, #20]
 800f992:	2d09      	cmp	r5, #9
 800f994:	f04f 0301 	mov.w	r3, #1
 800f998:	6103      	str	r3, [r0, #16]
 800f99a:	dd16      	ble.n	800f9ca <__s2b+0x72>
 800f99c:	f104 0909 	add.w	r9, r4, #9
 800f9a0:	46c8      	mov	r8, r9
 800f9a2:	442c      	add	r4, r5
 800f9a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9a8:	4601      	mov	r1, r0
 800f9aa:	3b30      	subs	r3, #48	; 0x30
 800f9ac:	220a      	movs	r2, #10
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f7ff ff8c 	bl	800f8cc <__multadd>
 800f9b4:	45a0      	cmp	r8, r4
 800f9b6:	d1f5      	bne.n	800f9a4 <__s2b+0x4c>
 800f9b8:	f1a5 0408 	sub.w	r4, r5, #8
 800f9bc:	444c      	add	r4, r9
 800f9be:	1b2d      	subs	r5, r5, r4
 800f9c0:	1963      	adds	r3, r4, r5
 800f9c2:	42bb      	cmp	r3, r7
 800f9c4:	db04      	blt.n	800f9d0 <__s2b+0x78>
 800f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ca:	340a      	adds	r4, #10
 800f9cc:	2509      	movs	r5, #9
 800f9ce:	e7f6      	b.n	800f9be <__s2b+0x66>
 800f9d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	3b30      	subs	r3, #48	; 0x30
 800f9d8:	220a      	movs	r2, #10
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff ff76 	bl	800f8cc <__multadd>
 800f9e0:	e7ee      	b.n	800f9c0 <__s2b+0x68>
 800f9e2:	bf00      	nop
 800f9e4:	08011dd4 	.word	0x08011dd4
 800f9e8:	08011ec0 	.word	0x08011ec0

0800f9ec <__hi0bits>:
 800f9ec:	0c03      	lsrs	r3, r0, #16
 800f9ee:	041b      	lsls	r3, r3, #16
 800f9f0:	b9d3      	cbnz	r3, 800fa28 <__hi0bits+0x3c>
 800f9f2:	0400      	lsls	r0, r0, #16
 800f9f4:	2310      	movs	r3, #16
 800f9f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f9fa:	bf04      	itt	eq
 800f9fc:	0200      	lsleq	r0, r0, #8
 800f9fe:	3308      	addeq	r3, #8
 800fa00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa04:	bf04      	itt	eq
 800fa06:	0100      	lsleq	r0, r0, #4
 800fa08:	3304      	addeq	r3, #4
 800fa0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa0e:	bf04      	itt	eq
 800fa10:	0080      	lsleq	r0, r0, #2
 800fa12:	3302      	addeq	r3, #2
 800fa14:	2800      	cmp	r0, #0
 800fa16:	db05      	blt.n	800fa24 <__hi0bits+0x38>
 800fa18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa1c:	f103 0301 	add.w	r3, r3, #1
 800fa20:	bf08      	it	eq
 800fa22:	2320      	moveq	r3, #32
 800fa24:	4618      	mov	r0, r3
 800fa26:	4770      	bx	lr
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e7e4      	b.n	800f9f6 <__hi0bits+0xa>

0800fa2c <__lo0bits>:
 800fa2c:	6803      	ldr	r3, [r0, #0]
 800fa2e:	f013 0207 	ands.w	r2, r3, #7
 800fa32:	4601      	mov	r1, r0
 800fa34:	d00b      	beq.n	800fa4e <__lo0bits+0x22>
 800fa36:	07da      	lsls	r2, r3, #31
 800fa38:	d423      	bmi.n	800fa82 <__lo0bits+0x56>
 800fa3a:	0798      	lsls	r0, r3, #30
 800fa3c:	bf49      	itett	mi
 800fa3e:	085b      	lsrmi	r3, r3, #1
 800fa40:	089b      	lsrpl	r3, r3, #2
 800fa42:	2001      	movmi	r0, #1
 800fa44:	600b      	strmi	r3, [r1, #0]
 800fa46:	bf5c      	itt	pl
 800fa48:	600b      	strpl	r3, [r1, #0]
 800fa4a:	2002      	movpl	r0, #2
 800fa4c:	4770      	bx	lr
 800fa4e:	b298      	uxth	r0, r3
 800fa50:	b9a8      	cbnz	r0, 800fa7e <__lo0bits+0x52>
 800fa52:	0c1b      	lsrs	r3, r3, #16
 800fa54:	2010      	movs	r0, #16
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	b90a      	cbnz	r2, 800fa5e <__lo0bits+0x32>
 800fa5a:	3008      	adds	r0, #8
 800fa5c:	0a1b      	lsrs	r3, r3, #8
 800fa5e:	071a      	lsls	r2, r3, #28
 800fa60:	bf04      	itt	eq
 800fa62:	091b      	lsreq	r3, r3, #4
 800fa64:	3004      	addeq	r0, #4
 800fa66:	079a      	lsls	r2, r3, #30
 800fa68:	bf04      	itt	eq
 800fa6a:	089b      	lsreq	r3, r3, #2
 800fa6c:	3002      	addeq	r0, #2
 800fa6e:	07da      	lsls	r2, r3, #31
 800fa70:	d403      	bmi.n	800fa7a <__lo0bits+0x4e>
 800fa72:	085b      	lsrs	r3, r3, #1
 800fa74:	f100 0001 	add.w	r0, r0, #1
 800fa78:	d005      	beq.n	800fa86 <__lo0bits+0x5a>
 800fa7a:	600b      	str	r3, [r1, #0]
 800fa7c:	4770      	bx	lr
 800fa7e:	4610      	mov	r0, r2
 800fa80:	e7e9      	b.n	800fa56 <__lo0bits+0x2a>
 800fa82:	2000      	movs	r0, #0
 800fa84:	4770      	bx	lr
 800fa86:	2020      	movs	r0, #32
 800fa88:	4770      	bx	lr
	...

0800fa8c <__i2b>:
 800fa8c:	b510      	push	{r4, lr}
 800fa8e:	460c      	mov	r4, r1
 800fa90:	2101      	movs	r1, #1
 800fa92:	f7ff feb9 	bl	800f808 <_Balloc>
 800fa96:	4602      	mov	r2, r0
 800fa98:	b928      	cbnz	r0, 800faa6 <__i2b+0x1a>
 800fa9a:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <__i2b+0x24>)
 800fa9c:	4805      	ldr	r0, [pc, #20]	; (800fab4 <__i2b+0x28>)
 800fa9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800faa2:	f001 f9a9 	bl	8010df8 <__assert_func>
 800faa6:	2301      	movs	r3, #1
 800faa8:	6144      	str	r4, [r0, #20]
 800faaa:	6103      	str	r3, [r0, #16]
 800faac:	bd10      	pop	{r4, pc}
 800faae:	bf00      	nop
 800fab0:	08011dd4 	.word	0x08011dd4
 800fab4:	08011ec0 	.word	0x08011ec0

0800fab8 <__multiply>:
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	4691      	mov	r9, r2
 800fabe:	690a      	ldr	r2, [r1, #16]
 800fac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	bfb8      	it	lt
 800fac8:	460b      	movlt	r3, r1
 800faca:	460c      	mov	r4, r1
 800facc:	bfbc      	itt	lt
 800face:	464c      	movlt	r4, r9
 800fad0:	4699      	movlt	r9, r3
 800fad2:	6927      	ldr	r7, [r4, #16]
 800fad4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fad8:	68a3      	ldr	r3, [r4, #8]
 800fada:	6861      	ldr	r1, [r4, #4]
 800fadc:	eb07 060a 	add.w	r6, r7, sl
 800fae0:	42b3      	cmp	r3, r6
 800fae2:	b085      	sub	sp, #20
 800fae4:	bfb8      	it	lt
 800fae6:	3101      	addlt	r1, #1
 800fae8:	f7ff fe8e 	bl	800f808 <_Balloc>
 800faec:	b930      	cbnz	r0, 800fafc <__multiply+0x44>
 800faee:	4602      	mov	r2, r0
 800faf0:	4b44      	ldr	r3, [pc, #272]	; (800fc04 <__multiply+0x14c>)
 800faf2:	4845      	ldr	r0, [pc, #276]	; (800fc08 <__multiply+0x150>)
 800faf4:	f240 115d 	movw	r1, #349	; 0x15d
 800faf8:	f001 f97e 	bl	8010df8 <__assert_func>
 800fafc:	f100 0514 	add.w	r5, r0, #20
 800fb00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb04:	462b      	mov	r3, r5
 800fb06:	2200      	movs	r2, #0
 800fb08:	4543      	cmp	r3, r8
 800fb0a:	d321      	bcc.n	800fb50 <__multiply+0x98>
 800fb0c:	f104 0314 	add.w	r3, r4, #20
 800fb10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fb14:	f109 0314 	add.w	r3, r9, #20
 800fb18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb1c:	9202      	str	r2, [sp, #8]
 800fb1e:	1b3a      	subs	r2, r7, r4
 800fb20:	3a15      	subs	r2, #21
 800fb22:	f022 0203 	bic.w	r2, r2, #3
 800fb26:	3204      	adds	r2, #4
 800fb28:	f104 0115 	add.w	r1, r4, #21
 800fb2c:	428f      	cmp	r7, r1
 800fb2e:	bf38      	it	cc
 800fb30:	2204      	movcc	r2, #4
 800fb32:	9201      	str	r2, [sp, #4]
 800fb34:	9a02      	ldr	r2, [sp, #8]
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d80c      	bhi.n	800fb56 <__multiply+0x9e>
 800fb3c:	2e00      	cmp	r6, #0
 800fb3e:	dd03      	ble.n	800fb48 <__multiply+0x90>
 800fb40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d05a      	beq.n	800fbfe <__multiply+0x146>
 800fb48:	6106      	str	r6, [r0, #16]
 800fb4a:	b005      	add	sp, #20
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	f843 2b04 	str.w	r2, [r3], #4
 800fb54:	e7d8      	b.n	800fb08 <__multiply+0x50>
 800fb56:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb5a:	f1ba 0f00 	cmp.w	sl, #0
 800fb5e:	d024      	beq.n	800fbaa <__multiply+0xf2>
 800fb60:	f104 0e14 	add.w	lr, r4, #20
 800fb64:	46a9      	mov	r9, r5
 800fb66:	f04f 0c00 	mov.w	ip, #0
 800fb6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fb6e:	f8d9 1000 	ldr.w	r1, [r9]
 800fb72:	fa1f fb82 	uxth.w	fp, r2
 800fb76:	b289      	uxth	r1, r1
 800fb78:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb80:	f8d9 2000 	ldr.w	r2, [r9]
 800fb84:	4461      	add	r1, ip
 800fb86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb92:	b289      	uxth	r1, r1
 800fb94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb98:	4577      	cmp	r7, lr
 800fb9a:	f849 1b04 	str.w	r1, [r9], #4
 800fb9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fba2:	d8e2      	bhi.n	800fb6a <__multiply+0xb2>
 800fba4:	9a01      	ldr	r2, [sp, #4]
 800fba6:	f845 c002 	str.w	ip, [r5, r2]
 800fbaa:	9a03      	ldr	r2, [sp, #12]
 800fbac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	f1b9 0f00 	cmp.w	r9, #0
 800fbb6:	d020      	beq.n	800fbfa <__multiply+0x142>
 800fbb8:	6829      	ldr	r1, [r5, #0]
 800fbba:	f104 0c14 	add.w	ip, r4, #20
 800fbbe:	46ae      	mov	lr, r5
 800fbc0:	f04f 0a00 	mov.w	sl, #0
 800fbc4:	f8bc b000 	ldrh.w	fp, [ip]
 800fbc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fbcc:	fb09 220b 	mla	r2, r9, fp, r2
 800fbd0:	4492      	add	sl, r2
 800fbd2:	b289      	uxth	r1, r1
 800fbd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fbd8:	f84e 1b04 	str.w	r1, [lr], #4
 800fbdc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fbe0:	f8be 1000 	ldrh.w	r1, [lr]
 800fbe4:	0c12      	lsrs	r2, r2, #16
 800fbe6:	fb09 1102 	mla	r1, r9, r2, r1
 800fbea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fbee:	4567      	cmp	r7, ip
 800fbf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fbf4:	d8e6      	bhi.n	800fbc4 <__multiply+0x10c>
 800fbf6:	9a01      	ldr	r2, [sp, #4]
 800fbf8:	50a9      	str	r1, [r5, r2]
 800fbfa:	3504      	adds	r5, #4
 800fbfc:	e79a      	b.n	800fb34 <__multiply+0x7c>
 800fbfe:	3e01      	subs	r6, #1
 800fc00:	e79c      	b.n	800fb3c <__multiply+0x84>
 800fc02:	bf00      	nop
 800fc04:	08011dd4 	.word	0x08011dd4
 800fc08:	08011ec0 	.word	0x08011ec0

0800fc0c <__pow5mult>:
 800fc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc10:	4615      	mov	r5, r2
 800fc12:	f012 0203 	ands.w	r2, r2, #3
 800fc16:	4606      	mov	r6, r0
 800fc18:	460f      	mov	r7, r1
 800fc1a:	d007      	beq.n	800fc2c <__pow5mult+0x20>
 800fc1c:	4c25      	ldr	r4, [pc, #148]	; (800fcb4 <__pow5mult+0xa8>)
 800fc1e:	3a01      	subs	r2, #1
 800fc20:	2300      	movs	r3, #0
 800fc22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc26:	f7ff fe51 	bl	800f8cc <__multadd>
 800fc2a:	4607      	mov	r7, r0
 800fc2c:	10ad      	asrs	r5, r5, #2
 800fc2e:	d03d      	beq.n	800fcac <__pow5mult+0xa0>
 800fc30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc32:	b97c      	cbnz	r4, 800fc54 <__pow5mult+0x48>
 800fc34:	2010      	movs	r0, #16
 800fc36:	f7ff fdc5 	bl	800f7c4 <malloc>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	6270      	str	r0, [r6, #36]	; 0x24
 800fc3e:	b928      	cbnz	r0, 800fc4c <__pow5mult+0x40>
 800fc40:	4b1d      	ldr	r3, [pc, #116]	; (800fcb8 <__pow5mult+0xac>)
 800fc42:	481e      	ldr	r0, [pc, #120]	; (800fcbc <__pow5mult+0xb0>)
 800fc44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc48:	f001 f8d6 	bl	8010df8 <__assert_func>
 800fc4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc50:	6004      	str	r4, [r0, #0]
 800fc52:	60c4      	str	r4, [r0, #12]
 800fc54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc5c:	b94c      	cbnz	r4, 800fc72 <__pow5mult+0x66>
 800fc5e:	f240 2171 	movw	r1, #625	; 0x271
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7ff ff12 	bl	800fa8c <__i2b>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc6e:	4604      	mov	r4, r0
 800fc70:	6003      	str	r3, [r0, #0]
 800fc72:	f04f 0900 	mov.w	r9, #0
 800fc76:	07eb      	lsls	r3, r5, #31
 800fc78:	d50a      	bpl.n	800fc90 <__pow5mult+0x84>
 800fc7a:	4639      	mov	r1, r7
 800fc7c:	4622      	mov	r2, r4
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f7ff ff1a 	bl	800fab8 <__multiply>
 800fc84:	4639      	mov	r1, r7
 800fc86:	4680      	mov	r8, r0
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7ff fdfd 	bl	800f888 <_Bfree>
 800fc8e:	4647      	mov	r7, r8
 800fc90:	106d      	asrs	r5, r5, #1
 800fc92:	d00b      	beq.n	800fcac <__pow5mult+0xa0>
 800fc94:	6820      	ldr	r0, [r4, #0]
 800fc96:	b938      	cbnz	r0, 800fca8 <__pow5mult+0x9c>
 800fc98:	4622      	mov	r2, r4
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7ff ff0b 	bl	800fab8 <__multiply>
 800fca2:	6020      	str	r0, [r4, #0]
 800fca4:	f8c0 9000 	str.w	r9, [r0]
 800fca8:	4604      	mov	r4, r0
 800fcaa:	e7e4      	b.n	800fc76 <__pow5mult+0x6a>
 800fcac:	4638      	mov	r0, r7
 800fcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb2:	bf00      	nop
 800fcb4:	08012010 	.word	0x08012010
 800fcb8:	08011d62 	.word	0x08011d62
 800fcbc:	08011ec0 	.word	0x08011ec0

0800fcc0 <__lshift>:
 800fcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	6849      	ldr	r1, [r1, #4]
 800fcc8:	6923      	ldr	r3, [r4, #16]
 800fcca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	4607      	mov	r7, r0
 800fcd2:	4691      	mov	r9, r2
 800fcd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcd8:	f108 0601 	add.w	r6, r8, #1
 800fcdc:	42b3      	cmp	r3, r6
 800fcde:	db0b      	blt.n	800fcf8 <__lshift+0x38>
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7ff fd91 	bl	800f808 <_Balloc>
 800fce6:	4605      	mov	r5, r0
 800fce8:	b948      	cbnz	r0, 800fcfe <__lshift+0x3e>
 800fcea:	4602      	mov	r2, r0
 800fcec:	4b2a      	ldr	r3, [pc, #168]	; (800fd98 <__lshift+0xd8>)
 800fcee:	482b      	ldr	r0, [pc, #172]	; (800fd9c <__lshift+0xdc>)
 800fcf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fcf4:	f001 f880 	bl	8010df8 <__assert_func>
 800fcf8:	3101      	adds	r1, #1
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	e7ee      	b.n	800fcdc <__lshift+0x1c>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	f100 0114 	add.w	r1, r0, #20
 800fd04:	f100 0210 	add.w	r2, r0, #16
 800fd08:	4618      	mov	r0, r3
 800fd0a:	4553      	cmp	r3, sl
 800fd0c:	db37      	blt.n	800fd7e <__lshift+0xbe>
 800fd0e:	6920      	ldr	r0, [r4, #16]
 800fd10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd14:	f104 0314 	add.w	r3, r4, #20
 800fd18:	f019 091f 	ands.w	r9, r9, #31
 800fd1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fd24:	d02f      	beq.n	800fd86 <__lshift+0xc6>
 800fd26:	f1c9 0e20 	rsb	lr, r9, #32
 800fd2a:	468a      	mov	sl, r1
 800fd2c:	f04f 0c00 	mov.w	ip, #0
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	fa02 f209 	lsl.w	r2, r2, r9
 800fd36:	ea42 020c 	orr.w	r2, r2, ip
 800fd3a:	f84a 2b04 	str.w	r2, [sl], #4
 800fd3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd42:	4298      	cmp	r0, r3
 800fd44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fd48:	d8f2      	bhi.n	800fd30 <__lshift+0x70>
 800fd4a:	1b03      	subs	r3, r0, r4
 800fd4c:	3b15      	subs	r3, #21
 800fd4e:	f023 0303 	bic.w	r3, r3, #3
 800fd52:	3304      	adds	r3, #4
 800fd54:	f104 0215 	add.w	r2, r4, #21
 800fd58:	4290      	cmp	r0, r2
 800fd5a:	bf38      	it	cc
 800fd5c:	2304      	movcc	r3, #4
 800fd5e:	f841 c003 	str.w	ip, [r1, r3]
 800fd62:	f1bc 0f00 	cmp.w	ip, #0
 800fd66:	d001      	beq.n	800fd6c <__lshift+0xac>
 800fd68:	f108 0602 	add.w	r6, r8, #2
 800fd6c:	3e01      	subs	r6, #1
 800fd6e:	4638      	mov	r0, r7
 800fd70:	612e      	str	r6, [r5, #16]
 800fd72:	4621      	mov	r1, r4
 800fd74:	f7ff fd88 	bl	800f888 <_Bfree>
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd82:	3301      	adds	r3, #1
 800fd84:	e7c1      	b.n	800fd0a <__lshift+0x4a>
 800fd86:	3904      	subs	r1, #4
 800fd88:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd90:	4298      	cmp	r0, r3
 800fd92:	d8f9      	bhi.n	800fd88 <__lshift+0xc8>
 800fd94:	e7ea      	b.n	800fd6c <__lshift+0xac>
 800fd96:	bf00      	nop
 800fd98:	08011dd4 	.word	0x08011dd4
 800fd9c:	08011ec0 	.word	0x08011ec0

0800fda0 <__mcmp>:
 800fda0:	b530      	push	{r4, r5, lr}
 800fda2:	6902      	ldr	r2, [r0, #16]
 800fda4:	690c      	ldr	r4, [r1, #16]
 800fda6:	1b12      	subs	r2, r2, r4
 800fda8:	d10e      	bne.n	800fdc8 <__mcmp+0x28>
 800fdaa:	f100 0314 	add.w	r3, r0, #20
 800fdae:	3114      	adds	r1, #20
 800fdb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fdb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fdb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fdbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fdc0:	42a5      	cmp	r5, r4
 800fdc2:	d003      	beq.n	800fdcc <__mcmp+0x2c>
 800fdc4:	d305      	bcc.n	800fdd2 <__mcmp+0x32>
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	4610      	mov	r0, r2
 800fdca:	bd30      	pop	{r4, r5, pc}
 800fdcc:	4283      	cmp	r3, r0
 800fdce:	d3f3      	bcc.n	800fdb8 <__mcmp+0x18>
 800fdd0:	e7fa      	b.n	800fdc8 <__mcmp+0x28>
 800fdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd6:	e7f7      	b.n	800fdc8 <__mcmp+0x28>

0800fdd8 <__mdiff>:
 800fdd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	460c      	mov	r4, r1
 800fdde:	4606      	mov	r6, r0
 800fde0:	4611      	mov	r1, r2
 800fde2:	4620      	mov	r0, r4
 800fde4:	4690      	mov	r8, r2
 800fde6:	f7ff ffdb 	bl	800fda0 <__mcmp>
 800fdea:	1e05      	subs	r5, r0, #0
 800fdec:	d110      	bne.n	800fe10 <__mdiff+0x38>
 800fdee:	4629      	mov	r1, r5
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f7ff fd09 	bl	800f808 <_Balloc>
 800fdf6:	b930      	cbnz	r0, 800fe06 <__mdiff+0x2e>
 800fdf8:	4b3a      	ldr	r3, [pc, #232]	; (800fee4 <__mdiff+0x10c>)
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	f240 2132 	movw	r1, #562	; 0x232
 800fe00:	4839      	ldr	r0, [pc, #228]	; (800fee8 <__mdiff+0x110>)
 800fe02:	f000 fff9 	bl	8010df8 <__assert_func>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe10:	bfa4      	itt	ge
 800fe12:	4643      	movge	r3, r8
 800fe14:	46a0      	movge	r8, r4
 800fe16:	4630      	mov	r0, r6
 800fe18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe1c:	bfa6      	itte	ge
 800fe1e:	461c      	movge	r4, r3
 800fe20:	2500      	movge	r5, #0
 800fe22:	2501      	movlt	r5, #1
 800fe24:	f7ff fcf0 	bl	800f808 <_Balloc>
 800fe28:	b920      	cbnz	r0, 800fe34 <__mdiff+0x5c>
 800fe2a:	4b2e      	ldr	r3, [pc, #184]	; (800fee4 <__mdiff+0x10c>)
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe32:	e7e5      	b.n	800fe00 <__mdiff+0x28>
 800fe34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe38:	6926      	ldr	r6, [r4, #16]
 800fe3a:	60c5      	str	r5, [r0, #12]
 800fe3c:	f104 0914 	add.w	r9, r4, #20
 800fe40:	f108 0514 	add.w	r5, r8, #20
 800fe44:	f100 0e14 	add.w	lr, r0, #20
 800fe48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fe4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fe50:	f108 0210 	add.w	r2, r8, #16
 800fe54:	46f2      	mov	sl, lr
 800fe56:	2100      	movs	r1, #0
 800fe58:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe60:	fa1f f883 	uxth.w	r8, r3
 800fe64:	fa11 f18b 	uxtah	r1, r1, fp
 800fe68:	0c1b      	lsrs	r3, r3, #16
 800fe6a:	eba1 0808 	sub.w	r8, r1, r8
 800fe6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe76:	fa1f f888 	uxth.w	r8, r8
 800fe7a:	1419      	asrs	r1, r3, #16
 800fe7c:	454e      	cmp	r6, r9
 800fe7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe82:	f84a 3b04 	str.w	r3, [sl], #4
 800fe86:	d8e7      	bhi.n	800fe58 <__mdiff+0x80>
 800fe88:	1b33      	subs	r3, r6, r4
 800fe8a:	3b15      	subs	r3, #21
 800fe8c:	f023 0303 	bic.w	r3, r3, #3
 800fe90:	3304      	adds	r3, #4
 800fe92:	3415      	adds	r4, #21
 800fe94:	42a6      	cmp	r6, r4
 800fe96:	bf38      	it	cc
 800fe98:	2304      	movcc	r3, #4
 800fe9a:	441d      	add	r5, r3
 800fe9c:	4473      	add	r3, lr
 800fe9e:	469e      	mov	lr, r3
 800fea0:	462e      	mov	r6, r5
 800fea2:	4566      	cmp	r6, ip
 800fea4:	d30e      	bcc.n	800fec4 <__mdiff+0xec>
 800fea6:	f10c 0203 	add.w	r2, ip, #3
 800feaa:	1b52      	subs	r2, r2, r5
 800feac:	f022 0203 	bic.w	r2, r2, #3
 800feb0:	3d03      	subs	r5, #3
 800feb2:	45ac      	cmp	ip, r5
 800feb4:	bf38      	it	cc
 800feb6:	2200      	movcc	r2, #0
 800feb8:	441a      	add	r2, r3
 800feba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800febe:	b17b      	cbz	r3, 800fee0 <__mdiff+0x108>
 800fec0:	6107      	str	r7, [r0, #16]
 800fec2:	e7a3      	b.n	800fe0c <__mdiff+0x34>
 800fec4:	f856 8b04 	ldr.w	r8, [r6], #4
 800fec8:	fa11 f288 	uxtah	r2, r1, r8
 800fecc:	1414      	asrs	r4, r2, #16
 800fece:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fed2:	b292      	uxth	r2, r2
 800fed4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fed8:	f84e 2b04 	str.w	r2, [lr], #4
 800fedc:	1421      	asrs	r1, r4, #16
 800fede:	e7e0      	b.n	800fea2 <__mdiff+0xca>
 800fee0:	3f01      	subs	r7, #1
 800fee2:	e7ea      	b.n	800feba <__mdiff+0xe2>
 800fee4:	08011dd4 	.word	0x08011dd4
 800fee8:	08011ec0 	.word	0x08011ec0

0800feec <__ulp>:
 800feec:	b082      	sub	sp, #8
 800feee:	ed8d 0b00 	vstr	d0, [sp]
 800fef2:	9b01      	ldr	r3, [sp, #4]
 800fef4:	4912      	ldr	r1, [pc, #72]	; (800ff40 <__ulp+0x54>)
 800fef6:	4019      	ands	r1, r3
 800fef8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fefc:	2900      	cmp	r1, #0
 800fefe:	dd05      	ble.n	800ff0c <__ulp+0x20>
 800ff00:	2200      	movs	r2, #0
 800ff02:	460b      	mov	r3, r1
 800ff04:	ec43 2b10 	vmov	d0, r2, r3
 800ff08:	b002      	add	sp, #8
 800ff0a:	4770      	bx	lr
 800ff0c:	4249      	negs	r1, r1
 800ff0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff16:	f04f 0200 	mov.w	r2, #0
 800ff1a:	f04f 0300 	mov.w	r3, #0
 800ff1e:	da04      	bge.n	800ff2a <__ulp+0x3e>
 800ff20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff24:	fa41 f300 	asr.w	r3, r1, r0
 800ff28:	e7ec      	b.n	800ff04 <__ulp+0x18>
 800ff2a:	f1a0 0114 	sub.w	r1, r0, #20
 800ff2e:	291e      	cmp	r1, #30
 800ff30:	bfda      	itte	le
 800ff32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ff36:	fa20 f101 	lsrle.w	r1, r0, r1
 800ff3a:	2101      	movgt	r1, #1
 800ff3c:	460a      	mov	r2, r1
 800ff3e:	e7e1      	b.n	800ff04 <__ulp+0x18>
 800ff40:	7ff00000 	.word	0x7ff00000

0800ff44 <__b2d>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	6905      	ldr	r5, [r0, #16]
 800ff48:	f100 0714 	add.w	r7, r0, #20
 800ff4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ff50:	1f2e      	subs	r6, r5, #4
 800ff52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7ff fd48 	bl	800f9ec <__hi0bits>
 800ff5c:	f1c0 0320 	rsb	r3, r0, #32
 800ff60:	280a      	cmp	r0, #10
 800ff62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ffe0 <__b2d+0x9c>
 800ff66:	600b      	str	r3, [r1, #0]
 800ff68:	dc14      	bgt.n	800ff94 <__b2d+0x50>
 800ff6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ff6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ff72:	42b7      	cmp	r7, r6
 800ff74:	ea41 030c 	orr.w	r3, r1, ip
 800ff78:	bf34      	ite	cc
 800ff7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff7e:	2100      	movcs	r1, #0
 800ff80:	3015      	adds	r0, #21
 800ff82:	fa04 f000 	lsl.w	r0, r4, r0
 800ff86:	fa21 f10e 	lsr.w	r1, r1, lr
 800ff8a:	ea40 0201 	orr.w	r2, r0, r1
 800ff8e:	ec43 2b10 	vmov	d0, r2, r3
 800ff92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff94:	42b7      	cmp	r7, r6
 800ff96:	bf3a      	itte	cc
 800ff98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ffa0:	2100      	movcs	r1, #0
 800ffa2:	380b      	subs	r0, #11
 800ffa4:	d017      	beq.n	800ffd6 <__b2d+0x92>
 800ffa6:	f1c0 0c20 	rsb	ip, r0, #32
 800ffaa:	fa04 f500 	lsl.w	r5, r4, r0
 800ffae:	42be      	cmp	r6, r7
 800ffb0:	fa21 f40c 	lsr.w	r4, r1, ip
 800ffb4:	ea45 0504 	orr.w	r5, r5, r4
 800ffb8:	bf8c      	ite	hi
 800ffba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ffbe:	2400      	movls	r4, #0
 800ffc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ffc4:	fa01 f000 	lsl.w	r0, r1, r0
 800ffc8:	fa24 f40c 	lsr.w	r4, r4, ip
 800ffcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ffd0:	ea40 0204 	orr.w	r2, r0, r4
 800ffd4:	e7db      	b.n	800ff8e <__b2d+0x4a>
 800ffd6:	ea44 030c 	orr.w	r3, r4, ip
 800ffda:	460a      	mov	r2, r1
 800ffdc:	e7d7      	b.n	800ff8e <__b2d+0x4a>
 800ffde:	bf00      	nop
 800ffe0:	3ff00000 	.word	0x3ff00000

0800ffe4 <__d2b>:
 800ffe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffe8:	4689      	mov	r9, r1
 800ffea:	2101      	movs	r1, #1
 800ffec:	ec57 6b10 	vmov	r6, r7, d0
 800fff0:	4690      	mov	r8, r2
 800fff2:	f7ff fc09 	bl	800f808 <_Balloc>
 800fff6:	4604      	mov	r4, r0
 800fff8:	b930      	cbnz	r0, 8010008 <__d2b+0x24>
 800fffa:	4602      	mov	r2, r0
 800fffc:	4b25      	ldr	r3, [pc, #148]	; (8010094 <__d2b+0xb0>)
 800fffe:	4826      	ldr	r0, [pc, #152]	; (8010098 <__d2b+0xb4>)
 8010000:	f240 310a 	movw	r1, #778	; 0x30a
 8010004:	f000 fef8 	bl	8010df8 <__assert_func>
 8010008:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801000c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010010:	bb35      	cbnz	r5, 8010060 <__d2b+0x7c>
 8010012:	2e00      	cmp	r6, #0
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	d028      	beq.n	801006a <__d2b+0x86>
 8010018:	4668      	mov	r0, sp
 801001a:	9600      	str	r6, [sp, #0]
 801001c:	f7ff fd06 	bl	800fa2c <__lo0bits>
 8010020:	9900      	ldr	r1, [sp, #0]
 8010022:	b300      	cbz	r0, 8010066 <__d2b+0x82>
 8010024:	9a01      	ldr	r2, [sp, #4]
 8010026:	f1c0 0320 	rsb	r3, r0, #32
 801002a:	fa02 f303 	lsl.w	r3, r2, r3
 801002e:	430b      	orrs	r3, r1
 8010030:	40c2      	lsrs	r2, r0
 8010032:	6163      	str	r3, [r4, #20]
 8010034:	9201      	str	r2, [sp, #4]
 8010036:	9b01      	ldr	r3, [sp, #4]
 8010038:	61a3      	str	r3, [r4, #24]
 801003a:	2b00      	cmp	r3, #0
 801003c:	bf14      	ite	ne
 801003e:	2202      	movne	r2, #2
 8010040:	2201      	moveq	r2, #1
 8010042:	6122      	str	r2, [r4, #16]
 8010044:	b1d5      	cbz	r5, 801007c <__d2b+0x98>
 8010046:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801004a:	4405      	add	r5, r0
 801004c:	f8c9 5000 	str.w	r5, [r9]
 8010050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010054:	f8c8 0000 	str.w	r0, [r8]
 8010058:	4620      	mov	r0, r4
 801005a:	b003      	add	sp, #12
 801005c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010064:	e7d5      	b.n	8010012 <__d2b+0x2e>
 8010066:	6161      	str	r1, [r4, #20]
 8010068:	e7e5      	b.n	8010036 <__d2b+0x52>
 801006a:	a801      	add	r0, sp, #4
 801006c:	f7ff fcde 	bl	800fa2c <__lo0bits>
 8010070:	9b01      	ldr	r3, [sp, #4]
 8010072:	6163      	str	r3, [r4, #20]
 8010074:	2201      	movs	r2, #1
 8010076:	6122      	str	r2, [r4, #16]
 8010078:	3020      	adds	r0, #32
 801007a:	e7e3      	b.n	8010044 <__d2b+0x60>
 801007c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010080:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010084:	f8c9 0000 	str.w	r0, [r9]
 8010088:	6918      	ldr	r0, [r3, #16]
 801008a:	f7ff fcaf 	bl	800f9ec <__hi0bits>
 801008e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010092:	e7df      	b.n	8010054 <__d2b+0x70>
 8010094:	08011dd4 	.word	0x08011dd4
 8010098:	08011ec0 	.word	0x08011ec0

0801009c <__ratio>:
 801009c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100a0:	4688      	mov	r8, r1
 80100a2:	4669      	mov	r1, sp
 80100a4:	4681      	mov	r9, r0
 80100a6:	f7ff ff4d 	bl	800ff44 <__b2d>
 80100aa:	a901      	add	r1, sp, #4
 80100ac:	4640      	mov	r0, r8
 80100ae:	ec55 4b10 	vmov	r4, r5, d0
 80100b2:	f7ff ff47 	bl	800ff44 <__b2d>
 80100b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80100be:	eba3 0c02 	sub.w	ip, r3, r2
 80100c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100c6:	1a9b      	subs	r3, r3, r2
 80100c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80100cc:	ec51 0b10 	vmov	r0, r1, d0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bfd6      	itet	le
 80100d4:	460a      	movle	r2, r1
 80100d6:	462a      	movgt	r2, r5
 80100d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100dc:	468b      	mov	fp, r1
 80100de:	462f      	mov	r7, r5
 80100e0:	bfd4      	ite	le
 80100e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80100e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100ea:	4620      	mov	r0, r4
 80100ec:	ee10 2a10 	vmov	r2, s0
 80100f0:	465b      	mov	r3, fp
 80100f2:	4639      	mov	r1, r7
 80100f4:	f7f0 fbba 	bl	800086c <__aeabi_ddiv>
 80100f8:	ec41 0b10 	vmov	d0, r0, r1
 80100fc:	b003      	add	sp, #12
 80100fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010102 <__copybits>:
 8010102:	3901      	subs	r1, #1
 8010104:	b570      	push	{r4, r5, r6, lr}
 8010106:	1149      	asrs	r1, r1, #5
 8010108:	6914      	ldr	r4, [r2, #16]
 801010a:	3101      	adds	r1, #1
 801010c:	f102 0314 	add.w	r3, r2, #20
 8010110:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010114:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010118:	1f05      	subs	r5, r0, #4
 801011a:	42a3      	cmp	r3, r4
 801011c:	d30c      	bcc.n	8010138 <__copybits+0x36>
 801011e:	1aa3      	subs	r3, r4, r2
 8010120:	3b11      	subs	r3, #17
 8010122:	f023 0303 	bic.w	r3, r3, #3
 8010126:	3211      	adds	r2, #17
 8010128:	42a2      	cmp	r2, r4
 801012a:	bf88      	it	hi
 801012c:	2300      	movhi	r3, #0
 801012e:	4418      	add	r0, r3
 8010130:	2300      	movs	r3, #0
 8010132:	4288      	cmp	r0, r1
 8010134:	d305      	bcc.n	8010142 <__copybits+0x40>
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	f853 6b04 	ldr.w	r6, [r3], #4
 801013c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010140:	e7eb      	b.n	801011a <__copybits+0x18>
 8010142:	f840 3b04 	str.w	r3, [r0], #4
 8010146:	e7f4      	b.n	8010132 <__copybits+0x30>

08010148 <__any_on>:
 8010148:	f100 0214 	add.w	r2, r0, #20
 801014c:	6900      	ldr	r0, [r0, #16]
 801014e:	114b      	asrs	r3, r1, #5
 8010150:	4298      	cmp	r0, r3
 8010152:	b510      	push	{r4, lr}
 8010154:	db11      	blt.n	801017a <__any_on+0x32>
 8010156:	dd0a      	ble.n	801016e <__any_on+0x26>
 8010158:	f011 011f 	ands.w	r1, r1, #31
 801015c:	d007      	beq.n	801016e <__any_on+0x26>
 801015e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010162:	fa24 f001 	lsr.w	r0, r4, r1
 8010166:	fa00 f101 	lsl.w	r1, r0, r1
 801016a:	428c      	cmp	r4, r1
 801016c:	d10b      	bne.n	8010186 <__any_on+0x3e>
 801016e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010172:	4293      	cmp	r3, r2
 8010174:	d803      	bhi.n	801017e <__any_on+0x36>
 8010176:	2000      	movs	r0, #0
 8010178:	bd10      	pop	{r4, pc}
 801017a:	4603      	mov	r3, r0
 801017c:	e7f7      	b.n	801016e <__any_on+0x26>
 801017e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010182:	2900      	cmp	r1, #0
 8010184:	d0f5      	beq.n	8010172 <__any_on+0x2a>
 8010186:	2001      	movs	r0, #1
 8010188:	e7f6      	b.n	8010178 <__any_on+0x30>

0801018a <_calloc_r>:
 801018a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801018c:	fba1 2402 	umull	r2, r4, r1, r2
 8010190:	b94c      	cbnz	r4, 80101a6 <_calloc_r+0x1c>
 8010192:	4611      	mov	r1, r2
 8010194:	9201      	str	r2, [sp, #4]
 8010196:	f000 f87b 	bl	8010290 <_malloc_r>
 801019a:	9a01      	ldr	r2, [sp, #4]
 801019c:	4605      	mov	r5, r0
 801019e:	b930      	cbnz	r0, 80101ae <_calloc_r+0x24>
 80101a0:	4628      	mov	r0, r5
 80101a2:	b003      	add	sp, #12
 80101a4:	bd30      	pop	{r4, r5, pc}
 80101a6:	220c      	movs	r2, #12
 80101a8:	6002      	str	r2, [r0, #0]
 80101aa:	2500      	movs	r5, #0
 80101ac:	e7f8      	b.n	80101a0 <_calloc_r+0x16>
 80101ae:	4621      	mov	r1, r4
 80101b0:	f7fb fd5c 	bl	800bc6c <memset>
 80101b4:	e7f4      	b.n	80101a0 <_calloc_r+0x16>
	...

080101b8 <_free_r>:
 80101b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101ba:	2900      	cmp	r1, #0
 80101bc:	d044      	beq.n	8010248 <_free_r+0x90>
 80101be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101c2:	9001      	str	r0, [sp, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f1a1 0404 	sub.w	r4, r1, #4
 80101ca:	bfb8      	it	lt
 80101cc:	18e4      	addlt	r4, r4, r3
 80101ce:	f001 f821 	bl	8011214 <__malloc_lock>
 80101d2:	4a1e      	ldr	r2, [pc, #120]	; (801024c <_free_r+0x94>)
 80101d4:	9801      	ldr	r0, [sp, #4]
 80101d6:	6813      	ldr	r3, [r2, #0]
 80101d8:	b933      	cbnz	r3, 80101e8 <_free_r+0x30>
 80101da:	6063      	str	r3, [r4, #4]
 80101dc:	6014      	str	r4, [r2, #0]
 80101de:	b003      	add	sp, #12
 80101e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101e4:	f001 b81c 	b.w	8011220 <__malloc_unlock>
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	d908      	bls.n	80101fe <_free_r+0x46>
 80101ec:	6825      	ldr	r5, [r4, #0]
 80101ee:	1961      	adds	r1, r4, r5
 80101f0:	428b      	cmp	r3, r1
 80101f2:	bf01      	itttt	eq
 80101f4:	6819      	ldreq	r1, [r3, #0]
 80101f6:	685b      	ldreq	r3, [r3, #4]
 80101f8:	1949      	addeq	r1, r1, r5
 80101fa:	6021      	streq	r1, [r4, #0]
 80101fc:	e7ed      	b.n	80101da <_free_r+0x22>
 80101fe:	461a      	mov	r2, r3
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	b10b      	cbz	r3, 8010208 <_free_r+0x50>
 8010204:	42a3      	cmp	r3, r4
 8010206:	d9fa      	bls.n	80101fe <_free_r+0x46>
 8010208:	6811      	ldr	r1, [r2, #0]
 801020a:	1855      	adds	r5, r2, r1
 801020c:	42a5      	cmp	r5, r4
 801020e:	d10b      	bne.n	8010228 <_free_r+0x70>
 8010210:	6824      	ldr	r4, [r4, #0]
 8010212:	4421      	add	r1, r4
 8010214:	1854      	adds	r4, r2, r1
 8010216:	42a3      	cmp	r3, r4
 8010218:	6011      	str	r1, [r2, #0]
 801021a:	d1e0      	bne.n	80101de <_free_r+0x26>
 801021c:	681c      	ldr	r4, [r3, #0]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	6053      	str	r3, [r2, #4]
 8010222:	4421      	add	r1, r4
 8010224:	6011      	str	r1, [r2, #0]
 8010226:	e7da      	b.n	80101de <_free_r+0x26>
 8010228:	d902      	bls.n	8010230 <_free_r+0x78>
 801022a:	230c      	movs	r3, #12
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	e7d6      	b.n	80101de <_free_r+0x26>
 8010230:	6825      	ldr	r5, [r4, #0]
 8010232:	1961      	adds	r1, r4, r5
 8010234:	428b      	cmp	r3, r1
 8010236:	bf04      	itt	eq
 8010238:	6819      	ldreq	r1, [r3, #0]
 801023a:	685b      	ldreq	r3, [r3, #4]
 801023c:	6063      	str	r3, [r4, #4]
 801023e:	bf04      	itt	eq
 8010240:	1949      	addeq	r1, r1, r5
 8010242:	6021      	streq	r1, [r4, #0]
 8010244:	6054      	str	r4, [r2, #4]
 8010246:	e7ca      	b.n	80101de <_free_r+0x26>
 8010248:	b003      	add	sp, #12
 801024a:	bd30      	pop	{r4, r5, pc}
 801024c:	200068b8 	.word	0x200068b8

08010250 <sbrk_aligned>:
 8010250:	b570      	push	{r4, r5, r6, lr}
 8010252:	4e0e      	ldr	r6, [pc, #56]	; (801028c <sbrk_aligned+0x3c>)
 8010254:	460c      	mov	r4, r1
 8010256:	6831      	ldr	r1, [r6, #0]
 8010258:	4605      	mov	r5, r0
 801025a:	b911      	cbnz	r1, 8010262 <sbrk_aligned+0x12>
 801025c:	f000 fd28 	bl	8010cb0 <_sbrk_r>
 8010260:	6030      	str	r0, [r6, #0]
 8010262:	4621      	mov	r1, r4
 8010264:	4628      	mov	r0, r5
 8010266:	f000 fd23 	bl	8010cb0 <_sbrk_r>
 801026a:	1c43      	adds	r3, r0, #1
 801026c:	d00a      	beq.n	8010284 <sbrk_aligned+0x34>
 801026e:	1cc4      	adds	r4, r0, #3
 8010270:	f024 0403 	bic.w	r4, r4, #3
 8010274:	42a0      	cmp	r0, r4
 8010276:	d007      	beq.n	8010288 <sbrk_aligned+0x38>
 8010278:	1a21      	subs	r1, r4, r0
 801027a:	4628      	mov	r0, r5
 801027c:	f000 fd18 	bl	8010cb0 <_sbrk_r>
 8010280:	3001      	adds	r0, #1
 8010282:	d101      	bne.n	8010288 <sbrk_aligned+0x38>
 8010284:	f04f 34ff 	mov.w	r4, #4294967295
 8010288:	4620      	mov	r0, r4
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	200068bc 	.word	0x200068bc

08010290 <_malloc_r>:
 8010290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010294:	1ccd      	adds	r5, r1, #3
 8010296:	f025 0503 	bic.w	r5, r5, #3
 801029a:	3508      	adds	r5, #8
 801029c:	2d0c      	cmp	r5, #12
 801029e:	bf38      	it	cc
 80102a0:	250c      	movcc	r5, #12
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	4607      	mov	r7, r0
 80102a6:	db01      	blt.n	80102ac <_malloc_r+0x1c>
 80102a8:	42a9      	cmp	r1, r5
 80102aa:	d905      	bls.n	80102b8 <_malloc_r+0x28>
 80102ac:	230c      	movs	r3, #12
 80102ae:	603b      	str	r3, [r7, #0]
 80102b0:	2600      	movs	r6, #0
 80102b2:	4630      	mov	r0, r6
 80102b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b8:	4e2e      	ldr	r6, [pc, #184]	; (8010374 <_malloc_r+0xe4>)
 80102ba:	f000 ffab 	bl	8011214 <__malloc_lock>
 80102be:	6833      	ldr	r3, [r6, #0]
 80102c0:	461c      	mov	r4, r3
 80102c2:	bb34      	cbnz	r4, 8010312 <_malloc_r+0x82>
 80102c4:	4629      	mov	r1, r5
 80102c6:	4638      	mov	r0, r7
 80102c8:	f7ff ffc2 	bl	8010250 <sbrk_aligned>
 80102cc:	1c43      	adds	r3, r0, #1
 80102ce:	4604      	mov	r4, r0
 80102d0:	d14d      	bne.n	801036e <_malloc_r+0xde>
 80102d2:	6834      	ldr	r4, [r6, #0]
 80102d4:	4626      	mov	r6, r4
 80102d6:	2e00      	cmp	r6, #0
 80102d8:	d140      	bne.n	801035c <_malloc_r+0xcc>
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	4631      	mov	r1, r6
 80102de:	4638      	mov	r0, r7
 80102e0:	eb04 0803 	add.w	r8, r4, r3
 80102e4:	f000 fce4 	bl	8010cb0 <_sbrk_r>
 80102e8:	4580      	cmp	r8, r0
 80102ea:	d13a      	bne.n	8010362 <_malloc_r+0xd2>
 80102ec:	6821      	ldr	r1, [r4, #0]
 80102ee:	3503      	adds	r5, #3
 80102f0:	1a6d      	subs	r5, r5, r1
 80102f2:	f025 0503 	bic.w	r5, r5, #3
 80102f6:	3508      	adds	r5, #8
 80102f8:	2d0c      	cmp	r5, #12
 80102fa:	bf38      	it	cc
 80102fc:	250c      	movcc	r5, #12
 80102fe:	4629      	mov	r1, r5
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff ffa5 	bl	8010250 <sbrk_aligned>
 8010306:	3001      	adds	r0, #1
 8010308:	d02b      	beq.n	8010362 <_malloc_r+0xd2>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	442b      	add	r3, r5
 801030e:	6023      	str	r3, [r4, #0]
 8010310:	e00e      	b.n	8010330 <_malloc_r+0xa0>
 8010312:	6822      	ldr	r2, [r4, #0]
 8010314:	1b52      	subs	r2, r2, r5
 8010316:	d41e      	bmi.n	8010356 <_malloc_r+0xc6>
 8010318:	2a0b      	cmp	r2, #11
 801031a:	d916      	bls.n	801034a <_malloc_r+0xba>
 801031c:	1961      	adds	r1, r4, r5
 801031e:	42a3      	cmp	r3, r4
 8010320:	6025      	str	r5, [r4, #0]
 8010322:	bf18      	it	ne
 8010324:	6059      	strne	r1, [r3, #4]
 8010326:	6863      	ldr	r3, [r4, #4]
 8010328:	bf08      	it	eq
 801032a:	6031      	streq	r1, [r6, #0]
 801032c:	5162      	str	r2, [r4, r5]
 801032e:	604b      	str	r3, [r1, #4]
 8010330:	4638      	mov	r0, r7
 8010332:	f104 060b 	add.w	r6, r4, #11
 8010336:	f000 ff73 	bl	8011220 <__malloc_unlock>
 801033a:	f026 0607 	bic.w	r6, r6, #7
 801033e:	1d23      	adds	r3, r4, #4
 8010340:	1af2      	subs	r2, r6, r3
 8010342:	d0b6      	beq.n	80102b2 <_malloc_r+0x22>
 8010344:	1b9b      	subs	r3, r3, r6
 8010346:	50a3      	str	r3, [r4, r2]
 8010348:	e7b3      	b.n	80102b2 <_malloc_r+0x22>
 801034a:	6862      	ldr	r2, [r4, #4]
 801034c:	42a3      	cmp	r3, r4
 801034e:	bf0c      	ite	eq
 8010350:	6032      	streq	r2, [r6, #0]
 8010352:	605a      	strne	r2, [r3, #4]
 8010354:	e7ec      	b.n	8010330 <_malloc_r+0xa0>
 8010356:	4623      	mov	r3, r4
 8010358:	6864      	ldr	r4, [r4, #4]
 801035a:	e7b2      	b.n	80102c2 <_malloc_r+0x32>
 801035c:	4634      	mov	r4, r6
 801035e:	6876      	ldr	r6, [r6, #4]
 8010360:	e7b9      	b.n	80102d6 <_malloc_r+0x46>
 8010362:	230c      	movs	r3, #12
 8010364:	603b      	str	r3, [r7, #0]
 8010366:	4638      	mov	r0, r7
 8010368:	f000 ff5a 	bl	8011220 <__malloc_unlock>
 801036c:	e7a1      	b.n	80102b2 <_malloc_r+0x22>
 801036e:	6025      	str	r5, [r4, #0]
 8010370:	e7de      	b.n	8010330 <_malloc_r+0xa0>
 8010372:	bf00      	nop
 8010374:	200068b8 	.word	0x200068b8

08010378 <__ssputs_r>:
 8010378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801037c:	688e      	ldr	r6, [r1, #8]
 801037e:	429e      	cmp	r6, r3
 8010380:	4682      	mov	sl, r0
 8010382:	460c      	mov	r4, r1
 8010384:	4690      	mov	r8, r2
 8010386:	461f      	mov	r7, r3
 8010388:	d838      	bhi.n	80103fc <__ssputs_r+0x84>
 801038a:	898a      	ldrh	r2, [r1, #12]
 801038c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010390:	d032      	beq.n	80103f8 <__ssputs_r+0x80>
 8010392:	6825      	ldr	r5, [r4, #0]
 8010394:	6909      	ldr	r1, [r1, #16]
 8010396:	eba5 0901 	sub.w	r9, r5, r1
 801039a:	6965      	ldr	r5, [r4, #20]
 801039c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103a4:	3301      	adds	r3, #1
 80103a6:	444b      	add	r3, r9
 80103a8:	106d      	asrs	r5, r5, #1
 80103aa:	429d      	cmp	r5, r3
 80103ac:	bf38      	it	cc
 80103ae:	461d      	movcc	r5, r3
 80103b0:	0553      	lsls	r3, r2, #21
 80103b2:	d531      	bpl.n	8010418 <__ssputs_r+0xa0>
 80103b4:	4629      	mov	r1, r5
 80103b6:	f7ff ff6b 	bl	8010290 <_malloc_r>
 80103ba:	4606      	mov	r6, r0
 80103bc:	b950      	cbnz	r0, 80103d4 <__ssputs_r+0x5c>
 80103be:	230c      	movs	r3, #12
 80103c0:	f8ca 3000 	str.w	r3, [sl]
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ca:	81a3      	strh	r3, [r4, #12]
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d4:	6921      	ldr	r1, [r4, #16]
 80103d6:	464a      	mov	r2, r9
 80103d8:	f7fb fc3a 	bl	800bc50 <memcpy>
 80103dc:	89a3      	ldrh	r3, [r4, #12]
 80103de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80103e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103e6:	81a3      	strh	r3, [r4, #12]
 80103e8:	6126      	str	r6, [r4, #16]
 80103ea:	6165      	str	r5, [r4, #20]
 80103ec:	444e      	add	r6, r9
 80103ee:	eba5 0509 	sub.w	r5, r5, r9
 80103f2:	6026      	str	r6, [r4, #0]
 80103f4:	60a5      	str	r5, [r4, #8]
 80103f6:	463e      	mov	r6, r7
 80103f8:	42be      	cmp	r6, r7
 80103fa:	d900      	bls.n	80103fe <__ssputs_r+0x86>
 80103fc:	463e      	mov	r6, r7
 80103fe:	6820      	ldr	r0, [r4, #0]
 8010400:	4632      	mov	r2, r6
 8010402:	4641      	mov	r1, r8
 8010404:	f000 feeb 	bl	80111de <memmove>
 8010408:	68a3      	ldr	r3, [r4, #8]
 801040a:	1b9b      	subs	r3, r3, r6
 801040c:	60a3      	str	r3, [r4, #8]
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	4433      	add	r3, r6
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	2000      	movs	r0, #0
 8010416:	e7db      	b.n	80103d0 <__ssputs_r+0x58>
 8010418:	462a      	mov	r2, r5
 801041a:	f000 ff07 	bl	801122c <_realloc_r>
 801041e:	4606      	mov	r6, r0
 8010420:	2800      	cmp	r0, #0
 8010422:	d1e1      	bne.n	80103e8 <__ssputs_r+0x70>
 8010424:	6921      	ldr	r1, [r4, #16]
 8010426:	4650      	mov	r0, sl
 8010428:	f7ff fec6 	bl	80101b8 <_free_r>
 801042c:	e7c7      	b.n	80103be <__ssputs_r+0x46>
	...

08010430 <_svfiprintf_r>:
 8010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010434:	4698      	mov	r8, r3
 8010436:	898b      	ldrh	r3, [r1, #12]
 8010438:	061b      	lsls	r3, r3, #24
 801043a:	b09d      	sub	sp, #116	; 0x74
 801043c:	4607      	mov	r7, r0
 801043e:	460d      	mov	r5, r1
 8010440:	4614      	mov	r4, r2
 8010442:	d50e      	bpl.n	8010462 <_svfiprintf_r+0x32>
 8010444:	690b      	ldr	r3, [r1, #16]
 8010446:	b963      	cbnz	r3, 8010462 <_svfiprintf_r+0x32>
 8010448:	2140      	movs	r1, #64	; 0x40
 801044a:	f7ff ff21 	bl	8010290 <_malloc_r>
 801044e:	6028      	str	r0, [r5, #0]
 8010450:	6128      	str	r0, [r5, #16]
 8010452:	b920      	cbnz	r0, 801045e <_svfiprintf_r+0x2e>
 8010454:	230c      	movs	r3, #12
 8010456:	603b      	str	r3, [r7, #0]
 8010458:	f04f 30ff 	mov.w	r0, #4294967295
 801045c:	e0d1      	b.n	8010602 <_svfiprintf_r+0x1d2>
 801045e:	2340      	movs	r3, #64	; 0x40
 8010460:	616b      	str	r3, [r5, #20]
 8010462:	2300      	movs	r3, #0
 8010464:	9309      	str	r3, [sp, #36]	; 0x24
 8010466:	2320      	movs	r3, #32
 8010468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801046c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010470:	2330      	movs	r3, #48	; 0x30
 8010472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801061c <_svfiprintf_r+0x1ec>
 8010476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801047a:	f04f 0901 	mov.w	r9, #1
 801047e:	4623      	mov	r3, r4
 8010480:	469a      	mov	sl, r3
 8010482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010486:	b10a      	cbz	r2, 801048c <_svfiprintf_r+0x5c>
 8010488:	2a25      	cmp	r2, #37	; 0x25
 801048a:	d1f9      	bne.n	8010480 <_svfiprintf_r+0x50>
 801048c:	ebba 0b04 	subs.w	fp, sl, r4
 8010490:	d00b      	beq.n	80104aa <_svfiprintf_r+0x7a>
 8010492:	465b      	mov	r3, fp
 8010494:	4622      	mov	r2, r4
 8010496:	4629      	mov	r1, r5
 8010498:	4638      	mov	r0, r7
 801049a:	f7ff ff6d 	bl	8010378 <__ssputs_r>
 801049e:	3001      	adds	r0, #1
 80104a0:	f000 80aa 	beq.w	80105f8 <_svfiprintf_r+0x1c8>
 80104a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104a6:	445a      	add	r2, fp
 80104a8:	9209      	str	r2, [sp, #36]	; 0x24
 80104aa:	f89a 3000 	ldrb.w	r3, [sl]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 80a2 	beq.w	80105f8 <_svfiprintf_r+0x1c8>
 80104b4:	2300      	movs	r3, #0
 80104b6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104be:	f10a 0a01 	add.w	sl, sl, #1
 80104c2:	9304      	str	r3, [sp, #16]
 80104c4:	9307      	str	r3, [sp, #28]
 80104c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104ca:	931a      	str	r3, [sp, #104]	; 0x68
 80104cc:	4654      	mov	r4, sl
 80104ce:	2205      	movs	r2, #5
 80104d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104d4:	4851      	ldr	r0, [pc, #324]	; (801061c <_svfiprintf_r+0x1ec>)
 80104d6:	f7ef fe93 	bl	8000200 <memchr>
 80104da:	9a04      	ldr	r2, [sp, #16]
 80104dc:	b9d8      	cbnz	r0, 8010516 <_svfiprintf_r+0xe6>
 80104de:	06d0      	lsls	r0, r2, #27
 80104e0:	bf44      	itt	mi
 80104e2:	2320      	movmi	r3, #32
 80104e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104e8:	0711      	lsls	r1, r2, #28
 80104ea:	bf44      	itt	mi
 80104ec:	232b      	movmi	r3, #43	; 0x2b
 80104ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104f2:	f89a 3000 	ldrb.w	r3, [sl]
 80104f6:	2b2a      	cmp	r3, #42	; 0x2a
 80104f8:	d015      	beq.n	8010526 <_svfiprintf_r+0xf6>
 80104fa:	9a07      	ldr	r2, [sp, #28]
 80104fc:	4654      	mov	r4, sl
 80104fe:	2000      	movs	r0, #0
 8010500:	f04f 0c0a 	mov.w	ip, #10
 8010504:	4621      	mov	r1, r4
 8010506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801050a:	3b30      	subs	r3, #48	; 0x30
 801050c:	2b09      	cmp	r3, #9
 801050e:	d94e      	bls.n	80105ae <_svfiprintf_r+0x17e>
 8010510:	b1b0      	cbz	r0, 8010540 <_svfiprintf_r+0x110>
 8010512:	9207      	str	r2, [sp, #28]
 8010514:	e014      	b.n	8010540 <_svfiprintf_r+0x110>
 8010516:	eba0 0308 	sub.w	r3, r0, r8
 801051a:	fa09 f303 	lsl.w	r3, r9, r3
 801051e:	4313      	orrs	r3, r2
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	46a2      	mov	sl, r4
 8010524:	e7d2      	b.n	80104cc <_svfiprintf_r+0x9c>
 8010526:	9b03      	ldr	r3, [sp, #12]
 8010528:	1d19      	adds	r1, r3, #4
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	9103      	str	r1, [sp, #12]
 801052e:	2b00      	cmp	r3, #0
 8010530:	bfbb      	ittet	lt
 8010532:	425b      	neglt	r3, r3
 8010534:	f042 0202 	orrlt.w	r2, r2, #2
 8010538:	9307      	strge	r3, [sp, #28]
 801053a:	9307      	strlt	r3, [sp, #28]
 801053c:	bfb8      	it	lt
 801053e:	9204      	strlt	r2, [sp, #16]
 8010540:	7823      	ldrb	r3, [r4, #0]
 8010542:	2b2e      	cmp	r3, #46	; 0x2e
 8010544:	d10c      	bne.n	8010560 <_svfiprintf_r+0x130>
 8010546:	7863      	ldrb	r3, [r4, #1]
 8010548:	2b2a      	cmp	r3, #42	; 0x2a
 801054a:	d135      	bne.n	80105b8 <_svfiprintf_r+0x188>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	1d1a      	adds	r2, r3, #4
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	9203      	str	r2, [sp, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	bfb8      	it	lt
 8010558:	f04f 33ff 	movlt.w	r3, #4294967295
 801055c:	3402      	adds	r4, #2
 801055e:	9305      	str	r3, [sp, #20]
 8010560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801062c <_svfiprintf_r+0x1fc>
 8010564:	7821      	ldrb	r1, [r4, #0]
 8010566:	2203      	movs	r2, #3
 8010568:	4650      	mov	r0, sl
 801056a:	f7ef fe49 	bl	8000200 <memchr>
 801056e:	b140      	cbz	r0, 8010582 <_svfiprintf_r+0x152>
 8010570:	2340      	movs	r3, #64	; 0x40
 8010572:	eba0 000a 	sub.w	r0, r0, sl
 8010576:	fa03 f000 	lsl.w	r0, r3, r0
 801057a:	9b04      	ldr	r3, [sp, #16]
 801057c:	4303      	orrs	r3, r0
 801057e:	3401      	adds	r4, #1
 8010580:	9304      	str	r3, [sp, #16]
 8010582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010586:	4826      	ldr	r0, [pc, #152]	; (8010620 <_svfiprintf_r+0x1f0>)
 8010588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801058c:	2206      	movs	r2, #6
 801058e:	f7ef fe37 	bl	8000200 <memchr>
 8010592:	2800      	cmp	r0, #0
 8010594:	d038      	beq.n	8010608 <_svfiprintf_r+0x1d8>
 8010596:	4b23      	ldr	r3, [pc, #140]	; (8010624 <_svfiprintf_r+0x1f4>)
 8010598:	bb1b      	cbnz	r3, 80105e2 <_svfiprintf_r+0x1b2>
 801059a:	9b03      	ldr	r3, [sp, #12]
 801059c:	3307      	adds	r3, #7
 801059e:	f023 0307 	bic.w	r3, r3, #7
 80105a2:	3308      	adds	r3, #8
 80105a4:	9303      	str	r3, [sp, #12]
 80105a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a8:	4433      	add	r3, r6
 80105aa:	9309      	str	r3, [sp, #36]	; 0x24
 80105ac:	e767      	b.n	801047e <_svfiprintf_r+0x4e>
 80105ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80105b2:	460c      	mov	r4, r1
 80105b4:	2001      	movs	r0, #1
 80105b6:	e7a5      	b.n	8010504 <_svfiprintf_r+0xd4>
 80105b8:	2300      	movs	r3, #0
 80105ba:	3401      	adds	r4, #1
 80105bc:	9305      	str	r3, [sp, #20]
 80105be:	4619      	mov	r1, r3
 80105c0:	f04f 0c0a 	mov.w	ip, #10
 80105c4:	4620      	mov	r0, r4
 80105c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105ca:	3a30      	subs	r2, #48	; 0x30
 80105cc:	2a09      	cmp	r2, #9
 80105ce:	d903      	bls.n	80105d8 <_svfiprintf_r+0x1a8>
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d0c5      	beq.n	8010560 <_svfiprintf_r+0x130>
 80105d4:	9105      	str	r1, [sp, #20]
 80105d6:	e7c3      	b.n	8010560 <_svfiprintf_r+0x130>
 80105d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80105dc:	4604      	mov	r4, r0
 80105de:	2301      	movs	r3, #1
 80105e0:	e7f0      	b.n	80105c4 <_svfiprintf_r+0x194>
 80105e2:	ab03      	add	r3, sp, #12
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	462a      	mov	r2, r5
 80105e8:	4b0f      	ldr	r3, [pc, #60]	; (8010628 <_svfiprintf_r+0x1f8>)
 80105ea:	a904      	add	r1, sp, #16
 80105ec:	4638      	mov	r0, r7
 80105ee:	f7fb fe57 	bl	800c2a0 <_printf_float>
 80105f2:	1c42      	adds	r2, r0, #1
 80105f4:	4606      	mov	r6, r0
 80105f6:	d1d6      	bne.n	80105a6 <_svfiprintf_r+0x176>
 80105f8:	89ab      	ldrh	r3, [r5, #12]
 80105fa:	065b      	lsls	r3, r3, #25
 80105fc:	f53f af2c 	bmi.w	8010458 <_svfiprintf_r+0x28>
 8010600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010602:	b01d      	add	sp, #116	; 0x74
 8010604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010608:	ab03      	add	r3, sp, #12
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	462a      	mov	r2, r5
 801060e:	4b06      	ldr	r3, [pc, #24]	; (8010628 <_svfiprintf_r+0x1f8>)
 8010610:	a904      	add	r1, sp, #16
 8010612:	4638      	mov	r0, r7
 8010614:	f7fc f8e8 	bl	800c7e8 <_printf_i>
 8010618:	e7eb      	b.n	80105f2 <_svfiprintf_r+0x1c2>
 801061a:	bf00      	nop
 801061c:	0801201c 	.word	0x0801201c
 8010620:	08012026 	.word	0x08012026
 8010624:	0800c2a1 	.word	0x0800c2a1
 8010628:	08010379 	.word	0x08010379
 801062c:	08012022 	.word	0x08012022

08010630 <_sungetc_r>:
 8010630:	b538      	push	{r3, r4, r5, lr}
 8010632:	1c4b      	adds	r3, r1, #1
 8010634:	4614      	mov	r4, r2
 8010636:	d103      	bne.n	8010640 <_sungetc_r+0x10>
 8010638:	f04f 35ff 	mov.w	r5, #4294967295
 801063c:	4628      	mov	r0, r5
 801063e:	bd38      	pop	{r3, r4, r5, pc}
 8010640:	8993      	ldrh	r3, [r2, #12]
 8010642:	f023 0320 	bic.w	r3, r3, #32
 8010646:	8193      	strh	r3, [r2, #12]
 8010648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801064a:	6852      	ldr	r2, [r2, #4]
 801064c:	b2cd      	uxtb	r5, r1
 801064e:	b18b      	cbz	r3, 8010674 <_sungetc_r+0x44>
 8010650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010652:	4293      	cmp	r3, r2
 8010654:	dd08      	ble.n	8010668 <_sungetc_r+0x38>
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	1e5a      	subs	r2, r3, #1
 801065a:	6022      	str	r2, [r4, #0]
 801065c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010660:	6863      	ldr	r3, [r4, #4]
 8010662:	3301      	adds	r3, #1
 8010664:	6063      	str	r3, [r4, #4]
 8010666:	e7e9      	b.n	801063c <_sungetc_r+0xc>
 8010668:	4621      	mov	r1, r4
 801066a:	f000 fb7d 	bl	8010d68 <__submore>
 801066e:	2800      	cmp	r0, #0
 8010670:	d0f1      	beq.n	8010656 <_sungetc_r+0x26>
 8010672:	e7e1      	b.n	8010638 <_sungetc_r+0x8>
 8010674:	6921      	ldr	r1, [r4, #16]
 8010676:	6823      	ldr	r3, [r4, #0]
 8010678:	b151      	cbz	r1, 8010690 <_sungetc_r+0x60>
 801067a:	4299      	cmp	r1, r3
 801067c:	d208      	bcs.n	8010690 <_sungetc_r+0x60>
 801067e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010682:	42a9      	cmp	r1, r5
 8010684:	d104      	bne.n	8010690 <_sungetc_r+0x60>
 8010686:	3b01      	subs	r3, #1
 8010688:	3201      	adds	r2, #1
 801068a:	6023      	str	r3, [r4, #0]
 801068c:	6062      	str	r2, [r4, #4]
 801068e:	e7d5      	b.n	801063c <_sungetc_r+0xc>
 8010690:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010698:	6363      	str	r3, [r4, #52]	; 0x34
 801069a:	2303      	movs	r3, #3
 801069c:	63a3      	str	r3, [r4, #56]	; 0x38
 801069e:	4623      	mov	r3, r4
 80106a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	2301      	movs	r3, #1
 80106a8:	e7dc      	b.n	8010664 <_sungetc_r+0x34>

080106aa <__ssrefill_r>:
 80106aa:	b510      	push	{r4, lr}
 80106ac:	460c      	mov	r4, r1
 80106ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80106b0:	b169      	cbz	r1, 80106ce <__ssrefill_r+0x24>
 80106b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106b6:	4299      	cmp	r1, r3
 80106b8:	d001      	beq.n	80106be <__ssrefill_r+0x14>
 80106ba:	f7ff fd7d 	bl	80101b8 <_free_r>
 80106be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106c0:	6063      	str	r3, [r4, #4]
 80106c2:	2000      	movs	r0, #0
 80106c4:	6360      	str	r0, [r4, #52]	; 0x34
 80106c6:	b113      	cbz	r3, 80106ce <__ssrefill_r+0x24>
 80106c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80106ca:	6023      	str	r3, [r4, #0]
 80106cc:	bd10      	pop	{r4, pc}
 80106ce:	6923      	ldr	r3, [r4, #16]
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	2300      	movs	r3, #0
 80106d4:	6063      	str	r3, [r4, #4]
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	f043 0320 	orr.w	r3, r3, #32
 80106dc:	81a3      	strh	r3, [r4, #12]
 80106de:	f04f 30ff 	mov.w	r0, #4294967295
 80106e2:	e7f3      	b.n	80106cc <__ssrefill_r+0x22>

080106e4 <__ssvfiscanf_r>:
 80106e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	460c      	mov	r4, r1
 80106ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80106ee:	2100      	movs	r1, #0
 80106f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80106f4:	49a6      	ldr	r1, [pc, #664]	; (8010990 <__ssvfiscanf_r+0x2ac>)
 80106f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80106f8:	f10d 0804 	add.w	r8, sp, #4
 80106fc:	49a5      	ldr	r1, [pc, #660]	; (8010994 <__ssvfiscanf_r+0x2b0>)
 80106fe:	4fa6      	ldr	r7, [pc, #664]	; (8010998 <__ssvfiscanf_r+0x2b4>)
 8010700:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801099c <__ssvfiscanf_r+0x2b8>
 8010704:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010708:	4606      	mov	r6, r0
 801070a:	91a1      	str	r1, [sp, #644]	; 0x284
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	7813      	ldrb	r3, [r2, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	f000 815a 	beq.w	80109ca <__ssvfiscanf_r+0x2e6>
 8010716:	5dd9      	ldrb	r1, [r3, r7]
 8010718:	f011 0108 	ands.w	r1, r1, #8
 801071c:	f102 0501 	add.w	r5, r2, #1
 8010720:	d019      	beq.n	8010756 <__ssvfiscanf_r+0x72>
 8010722:	6863      	ldr	r3, [r4, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	dd0f      	ble.n	8010748 <__ssvfiscanf_r+0x64>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	781a      	ldrb	r2, [r3, #0]
 801072c:	5cba      	ldrb	r2, [r7, r2]
 801072e:	0712      	lsls	r2, r2, #28
 8010730:	d401      	bmi.n	8010736 <__ssvfiscanf_r+0x52>
 8010732:	462a      	mov	r2, r5
 8010734:	e7eb      	b.n	801070e <__ssvfiscanf_r+0x2a>
 8010736:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010738:	3201      	adds	r2, #1
 801073a:	9245      	str	r2, [sp, #276]	; 0x114
 801073c:	6862      	ldr	r2, [r4, #4]
 801073e:	3301      	adds	r3, #1
 8010740:	3a01      	subs	r2, #1
 8010742:	6062      	str	r2, [r4, #4]
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	e7ec      	b.n	8010722 <__ssvfiscanf_r+0x3e>
 8010748:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801074a:	4621      	mov	r1, r4
 801074c:	4630      	mov	r0, r6
 801074e:	4798      	blx	r3
 8010750:	2800      	cmp	r0, #0
 8010752:	d0e9      	beq.n	8010728 <__ssvfiscanf_r+0x44>
 8010754:	e7ed      	b.n	8010732 <__ssvfiscanf_r+0x4e>
 8010756:	2b25      	cmp	r3, #37	; 0x25
 8010758:	d012      	beq.n	8010780 <__ssvfiscanf_r+0x9c>
 801075a:	469a      	mov	sl, r3
 801075c:	6863      	ldr	r3, [r4, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	f340 8091 	ble.w	8010886 <__ssvfiscanf_r+0x1a2>
 8010764:	6822      	ldr	r2, [r4, #0]
 8010766:	7813      	ldrb	r3, [r2, #0]
 8010768:	4553      	cmp	r3, sl
 801076a:	f040 812e 	bne.w	80109ca <__ssvfiscanf_r+0x2e6>
 801076e:	6863      	ldr	r3, [r4, #4]
 8010770:	3b01      	subs	r3, #1
 8010772:	6063      	str	r3, [r4, #4]
 8010774:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010776:	3201      	adds	r2, #1
 8010778:	3301      	adds	r3, #1
 801077a:	6022      	str	r2, [r4, #0]
 801077c:	9345      	str	r3, [sp, #276]	; 0x114
 801077e:	e7d8      	b.n	8010732 <__ssvfiscanf_r+0x4e>
 8010780:	9141      	str	r1, [sp, #260]	; 0x104
 8010782:	9143      	str	r1, [sp, #268]	; 0x10c
 8010784:	7853      	ldrb	r3, [r2, #1]
 8010786:	2b2a      	cmp	r3, #42	; 0x2a
 8010788:	bf02      	ittt	eq
 801078a:	2310      	moveq	r3, #16
 801078c:	1c95      	addeq	r5, r2, #2
 801078e:	9341      	streq	r3, [sp, #260]	; 0x104
 8010790:	220a      	movs	r2, #10
 8010792:	46aa      	mov	sl, r5
 8010794:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010798:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801079c:	2b09      	cmp	r3, #9
 801079e:	d91d      	bls.n	80107dc <__ssvfiscanf_r+0xf8>
 80107a0:	487e      	ldr	r0, [pc, #504]	; (801099c <__ssvfiscanf_r+0x2b8>)
 80107a2:	2203      	movs	r2, #3
 80107a4:	f7ef fd2c 	bl	8000200 <memchr>
 80107a8:	b140      	cbz	r0, 80107bc <__ssvfiscanf_r+0xd8>
 80107aa:	2301      	movs	r3, #1
 80107ac:	eba0 0009 	sub.w	r0, r0, r9
 80107b0:	fa03 f000 	lsl.w	r0, r3, r0
 80107b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80107b6:	4318      	orrs	r0, r3
 80107b8:	9041      	str	r0, [sp, #260]	; 0x104
 80107ba:	4655      	mov	r5, sl
 80107bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80107c0:	2b78      	cmp	r3, #120	; 0x78
 80107c2:	d806      	bhi.n	80107d2 <__ssvfiscanf_r+0xee>
 80107c4:	2b57      	cmp	r3, #87	; 0x57
 80107c6:	d810      	bhi.n	80107ea <__ssvfiscanf_r+0x106>
 80107c8:	2b25      	cmp	r3, #37	; 0x25
 80107ca:	d0c6      	beq.n	801075a <__ssvfiscanf_r+0x76>
 80107cc:	d856      	bhi.n	801087c <__ssvfiscanf_r+0x198>
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d064      	beq.n	801089c <__ssvfiscanf_r+0x1b8>
 80107d2:	2303      	movs	r3, #3
 80107d4:	9347      	str	r3, [sp, #284]	; 0x11c
 80107d6:	230a      	movs	r3, #10
 80107d8:	9342      	str	r3, [sp, #264]	; 0x108
 80107da:	e071      	b.n	80108c0 <__ssvfiscanf_r+0x1dc>
 80107dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80107de:	fb02 1103 	mla	r1, r2, r3, r1
 80107e2:	3930      	subs	r1, #48	; 0x30
 80107e4:	9143      	str	r1, [sp, #268]	; 0x10c
 80107e6:	4655      	mov	r5, sl
 80107e8:	e7d3      	b.n	8010792 <__ssvfiscanf_r+0xae>
 80107ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80107ee:	2a20      	cmp	r2, #32
 80107f0:	d8ef      	bhi.n	80107d2 <__ssvfiscanf_r+0xee>
 80107f2:	a101      	add	r1, pc, #4	; (adr r1, 80107f8 <__ssvfiscanf_r+0x114>)
 80107f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80107f8:	080108ab 	.word	0x080108ab
 80107fc:	080107d3 	.word	0x080107d3
 8010800:	080107d3 	.word	0x080107d3
 8010804:	08010909 	.word	0x08010909
 8010808:	080107d3 	.word	0x080107d3
 801080c:	080107d3 	.word	0x080107d3
 8010810:	080107d3 	.word	0x080107d3
 8010814:	080107d3 	.word	0x080107d3
 8010818:	080107d3 	.word	0x080107d3
 801081c:	080107d3 	.word	0x080107d3
 8010820:	080107d3 	.word	0x080107d3
 8010824:	0801091f 	.word	0x0801091f
 8010828:	080108f5 	.word	0x080108f5
 801082c:	08010883 	.word	0x08010883
 8010830:	08010883 	.word	0x08010883
 8010834:	08010883 	.word	0x08010883
 8010838:	080107d3 	.word	0x080107d3
 801083c:	080108f9 	.word	0x080108f9
 8010840:	080107d3 	.word	0x080107d3
 8010844:	080107d3 	.word	0x080107d3
 8010848:	080107d3 	.word	0x080107d3
 801084c:	080107d3 	.word	0x080107d3
 8010850:	0801092f 	.word	0x0801092f
 8010854:	08010901 	.word	0x08010901
 8010858:	080108a3 	.word	0x080108a3
 801085c:	080107d3 	.word	0x080107d3
 8010860:	080107d3 	.word	0x080107d3
 8010864:	0801092b 	.word	0x0801092b
 8010868:	080107d3 	.word	0x080107d3
 801086c:	080108f5 	.word	0x080108f5
 8010870:	080107d3 	.word	0x080107d3
 8010874:	080107d3 	.word	0x080107d3
 8010878:	080108ab 	.word	0x080108ab
 801087c:	3b45      	subs	r3, #69	; 0x45
 801087e:	2b02      	cmp	r3, #2
 8010880:	d8a7      	bhi.n	80107d2 <__ssvfiscanf_r+0xee>
 8010882:	2305      	movs	r3, #5
 8010884:	e01b      	b.n	80108be <__ssvfiscanf_r+0x1da>
 8010886:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010888:	4621      	mov	r1, r4
 801088a:	4630      	mov	r0, r6
 801088c:	4798      	blx	r3
 801088e:	2800      	cmp	r0, #0
 8010890:	f43f af68 	beq.w	8010764 <__ssvfiscanf_r+0x80>
 8010894:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010896:	2800      	cmp	r0, #0
 8010898:	f040 808d 	bne.w	80109b6 <__ssvfiscanf_r+0x2d2>
 801089c:	f04f 30ff 	mov.w	r0, #4294967295
 80108a0:	e08f      	b.n	80109c2 <__ssvfiscanf_r+0x2de>
 80108a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80108a4:	f042 0220 	orr.w	r2, r2, #32
 80108a8:	9241      	str	r2, [sp, #260]	; 0x104
 80108aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80108ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108b0:	9241      	str	r2, [sp, #260]	; 0x104
 80108b2:	2210      	movs	r2, #16
 80108b4:	2b6f      	cmp	r3, #111	; 0x6f
 80108b6:	9242      	str	r2, [sp, #264]	; 0x108
 80108b8:	bf34      	ite	cc
 80108ba:	2303      	movcc	r3, #3
 80108bc:	2304      	movcs	r3, #4
 80108be:	9347      	str	r3, [sp, #284]	; 0x11c
 80108c0:	6863      	ldr	r3, [r4, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dd42      	ble.n	801094c <__ssvfiscanf_r+0x268>
 80108c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80108c8:	0659      	lsls	r1, r3, #25
 80108ca:	d404      	bmi.n	80108d6 <__ssvfiscanf_r+0x1f2>
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	781a      	ldrb	r2, [r3, #0]
 80108d0:	5cba      	ldrb	r2, [r7, r2]
 80108d2:	0712      	lsls	r2, r2, #28
 80108d4:	d441      	bmi.n	801095a <__ssvfiscanf_r+0x276>
 80108d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80108d8:	2b02      	cmp	r3, #2
 80108da:	dc50      	bgt.n	801097e <__ssvfiscanf_r+0x29a>
 80108dc:	466b      	mov	r3, sp
 80108de:	4622      	mov	r2, r4
 80108e0:	a941      	add	r1, sp, #260	; 0x104
 80108e2:	4630      	mov	r0, r6
 80108e4:	f000 f876 	bl	80109d4 <_scanf_chars>
 80108e8:	2801      	cmp	r0, #1
 80108ea:	d06e      	beq.n	80109ca <__ssvfiscanf_r+0x2e6>
 80108ec:	2802      	cmp	r0, #2
 80108ee:	f47f af20 	bne.w	8010732 <__ssvfiscanf_r+0x4e>
 80108f2:	e7cf      	b.n	8010894 <__ssvfiscanf_r+0x1b0>
 80108f4:	220a      	movs	r2, #10
 80108f6:	e7dd      	b.n	80108b4 <__ssvfiscanf_r+0x1d0>
 80108f8:	2300      	movs	r3, #0
 80108fa:	9342      	str	r3, [sp, #264]	; 0x108
 80108fc:	2303      	movs	r3, #3
 80108fe:	e7de      	b.n	80108be <__ssvfiscanf_r+0x1da>
 8010900:	2308      	movs	r3, #8
 8010902:	9342      	str	r3, [sp, #264]	; 0x108
 8010904:	2304      	movs	r3, #4
 8010906:	e7da      	b.n	80108be <__ssvfiscanf_r+0x1da>
 8010908:	4629      	mov	r1, r5
 801090a:	4640      	mov	r0, r8
 801090c:	f000 f9e0 	bl	8010cd0 <__sccl>
 8010910:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010916:	9341      	str	r3, [sp, #260]	; 0x104
 8010918:	4605      	mov	r5, r0
 801091a:	2301      	movs	r3, #1
 801091c:	e7cf      	b.n	80108be <__ssvfiscanf_r+0x1da>
 801091e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010924:	9341      	str	r3, [sp, #260]	; 0x104
 8010926:	2300      	movs	r3, #0
 8010928:	e7c9      	b.n	80108be <__ssvfiscanf_r+0x1da>
 801092a:	2302      	movs	r3, #2
 801092c:	e7c7      	b.n	80108be <__ssvfiscanf_r+0x1da>
 801092e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010930:	06c3      	lsls	r3, r0, #27
 8010932:	f53f aefe 	bmi.w	8010732 <__ssvfiscanf_r+0x4e>
 8010936:	9b00      	ldr	r3, [sp, #0]
 8010938:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801093a:	1d19      	adds	r1, r3, #4
 801093c:	9100      	str	r1, [sp, #0]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f010 0f01 	tst.w	r0, #1
 8010944:	bf14      	ite	ne
 8010946:	801a      	strhne	r2, [r3, #0]
 8010948:	601a      	streq	r2, [r3, #0]
 801094a:	e6f2      	b.n	8010732 <__ssvfiscanf_r+0x4e>
 801094c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801094e:	4621      	mov	r1, r4
 8010950:	4630      	mov	r0, r6
 8010952:	4798      	blx	r3
 8010954:	2800      	cmp	r0, #0
 8010956:	d0b6      	beq.n	80108c6 <__ssvfiscanf_r+0x1e2>
 8010958:	e79c      	b.n	8010894 <__ssvfiscanf_r+0x1b0>
 801095a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801095c:	3201      	adds	r2, #1
 801095e:	9245      	str	r2, [sp, #276]	; 0x114
 8010960:	6862      	ldr	r2, [r4, #4]
 8010962:	3a01      	subs	r2, #1
 8010964:	2a00      	cmp	r2, #0
 8010966:	6062      	str	r2, [r4, #4]
 8010968:	dd02      	ble.n	8010970 <__ssvfiscanf_r+0x28c>
 801096a:	3301      	adds	r3, #1
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	e7ad      	b.n	80108cc <__ssvfiscanf_r+0x1e8>
 8010970:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010972:	4621      	mov	r1, r4
 8010974:	4630      	mov	r0, r6
 8010976:	4798      	blx	r3
 8010978:	2800      	cmp	r0, #0
 801097a:	d0a7      	beq.n	80108cc <__ssvfiscanf_r+0x1e8>
 801097c:	e78a      	b.n	8010894 <__ssvfiscanf_r+0x1b0>
 801097e:	2b04      	cmp	r3, #4
 8010980:	dc0e      	bgt.n	80109a0 <__ssvfiscanf_r+0x2bc>
 8010982:	466b      	mov	r3, sp
 8010984:	4622      	mov	r2, r4
 8010986:	a941      	add	r1, sp, #260	; 0x104
 8010988:	4630      	mov	r0, r6
 801098a:	f000 f87d 	bl	8010a88 <_scanf_i>
 801098e:	e7ab      	b.n	80108e8 <__ssvfiscanf_r+0x204>
 8010990:	08010631 	.word	0x08010631
 8010994:	080106ab 	.word	0x080106ab
 8010998:	08011c55 	.word	0x08011c55
 801099c:	08012022 	.word	0x08012022
 80109a0:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <__ssvfiscanf_r+0x2ec>)
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f43f aec5 	beq.w	8010732 <__ssvfiscanf_r+0x4e>
 80109a8:	466b      	mov	r3, sp
 80109aa:	4622      	mov	r2, r4
 80109ac:	a941      	add	r1, sp, #260	; 0x104
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7fc f840 	bl	800ca34 <_scanf_float>
 80109b4:	e798      	b.n	80108e8 <__ssvfiscanf_r+0x204>
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80109bc:	bf18      	it	ne
 80109be:	f04f 30ff 	movne.w	r0, #4294967295
 80109c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80109c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80109cc:	e7f9      	b.n	80109c2 <__ssvfiscanf_r+0x2de>
 80109ce:	bf00      	nop
 80109d0:	0800ca35 	.word	0x0800ca35

080109d4 <_scanf_chars>:
 80109d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d8:	4615      	mov	r5, r2
 80109da:	688a      	ldr	r2, [r1, #8]
 80109dc:	4680      	mov	r8, r0
 80109de:	460c      	mov	r4, r1
 80109e0:	b932      	cbnz	r2, 80109f0 <_scanf_chars+0x1c>
 80109e2:	698a      	ldr	r2, [r1, #24]
 80109e4:	2a00      	cmp	r2, #0
 80109e6:	bf0c      	ite	eq
 80109e8:	2201      	moveq	r2, #1
 80109ea:	f04f 32ff 	movne.w	r2, #4294967295
 80109ee:	608a      	str	r2, [r1, #8]
 80109f0:	6822      	ldr	r2, [r4, #0]
 80109f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010a84 <_scanf_chars+0xb0>
 80109f6:	06d1      	lsls	r1, r2, #27
 80109f8:	bf5f      	itttt	pl
 80109fa:	681a      	ldrpl	r2, [r3, #0]
 80109fc:	1d11      	addpl	r1, r2, #4
 80109fe:	6019      	strpl	r1, [r3, #0]
 8010a00:	6816      	ldrpl	r6, [r2, #0]
 8010a02:	2700      	movs	r7, #0
 8010a04:	69a0      	ldr	r0, [r4, #24]
 8010a06:	b188      	cbz	r0, 8010a2c <_scanf_chars+0x58>
 8010a08:	2801      	cmp	r0, #1
 8010a0a:	d107      	bne.n	8010a1c <_scanf_chars+0x48>
 8010a0c:	682a      	ldr	r2, [r5, #0]
 8010a0e:	7811      	ldrb	r1, [r2, #0]
 8010a10:	6962      	ldr	r2, [r4, #20]
 8010a12:	5c52      	ldrb	r2, [r2, r1]
 8010a14:	b952      	cbnz	r2, 8010a2c <_scanf_chars+0x58>
 8010a16:	2f00      	cmp	r7, #0
 8010a18:	d031      	beq.n	8010a7e <_scanf_chars+0xaa>
 8010a1a:	e022      	b.n	8010a62 <_scanf_chars+0x8e>
 8010a1c:	2802      	cmp	r0, #2
 8010a1e:	d120      	bne.n	8010a62 <_scanf_chars+0x8e>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010a28:	071b      	lsls	r3, r3, #28
 8010a2a:	d41a      	bmi.n	8010a62 <_scanf_chars+0x8e>
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	06da      	lsls	r2, r3, #27
 8010a30:	bf5e      	ittt	pl
 8010a32:	682b      	ldrpl	r3, [r5, #0]
 8010a34:	781b      	ldrbpl	r3, [r3, #0]
 8010a36:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010a3a:	682a      	ldr	r2, [r5, #0]
 8010a3c:	686b      	ldr	r3, [r5, #4]
 8010a3e:	3201      	adds	r2, #1
 8010a40:	602a      	str	r2, [r5, #0]
 8010a42:	68a2      	ldr	r2, [r4, #8]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	3a01      	subs	r2, #1
 8010a48:	606b      	str	r3, [r5, #4]
 8010a4a:	3701      	adds	r7, #1
 8010a4c:	60a2      	str	r2, [r4, #8]
 8010a4e:	b142      	cbz	r2, 8010a62 <_scanf_chars+0x8e>
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	dcd7      	bgt.n	8010a04 <_scanf_chars+0x30>
 8010a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	4798      	blx	r3
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d0d0      	beq.n	8010a04 <_scanf_chars+0x30>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	f013 0310 	ands.w	r3, r3, #16
 8010a68:	d105      	bne.n	8010a76 <_scanf_chars+0xa2>
 8010a6a:	68e2      	ldr	r2, [r4, #12]
 8010a6c:	3201      	adds	r2, #1
 8010a6e:	60e2      	str	r2, [r4, #12]
 8010a70:	69a2      	ldr	r2, [r4, #24]
 8010a72:	b102      	cbz	r2, 8010a76 <_scanf_chars+0xa2>
 8010a74:	7033      	strb	r3, [r6, #0]
 8010a76:	6923      	ldr	r3, [r4, #16]
 8010a78:	443b      	add	r3, r7
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a82:	bf00      	nop
 8010a84:	08011c55 	.word	0x08011c55

08010a88 <_scanf_i>:
 8010a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	4698      	mov	r8, r3
 8010a8e:	4b76      	ldr	r3, [pc, #472]	; (8010c68 <_scanf_i+0x1e0>)
 8010a90:	460c      	mov	r4, r1
 8010a92:	4682      	mov	sl, r0
 8010a94:	4616      	mov	r6, r2
 8010a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	ab03      	add	r3, sp, #12
 8010a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010aa2:	4b72      	ldr	r3, [pc, #456]	; (8010c6c <_scanf_i+0x1e4>)
 8010aa4:	69a1      	ldr	r1, [r4, #24]
 8010aa6:	4a72      	ldr	r2, [pc, #456]	; (8010c70 <_scanf_i+0x1e8>)
 8010aa8:	2903      	cmp	r1, #3
 8010aaa:	bf18      	it	ne
 8010aac:	461a      	movne	r2, r3
 8010aae:	68a3      	ldr	r3, [r4, #8]
 8010ab0:	9201      	str	r2, [sp, #4]
 8010ab2:	1e5a      	subs	r2, r3, #1
 8010ab4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010ab8:	bf88      	it	hi
 8010aba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010abe:	4627      	mov	r7, r4
 8010ac0:	bf82      	ittt	hi
 8010ac2:	eb03 0905 	addhi.w	r9, r3, r5
 8010ac6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010aca:	60a3      	strhi	r3, [r4, #8]
 8010acc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010ad0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010ad4:	bf98      	it	ls
 8010ad6:	f04f 0900 	movls.w	r9, #0
 8010ada:	6023      	str	r3, [r4, #0]
 8010adc:	463d      	mov	r5, r7
 8010ade:	f04f 0b00 	mov.w	fp, #0
 8010ae2:	6831      	ldr	r1, [r6, #0]
 8010ae4:	ab03      	add	r3, sp, #12
 8010ae6:	7809      	ldrb	r1, [r1, #0]
 8010ae8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010aec:	2202      	movs	r2, #2
 8010aee:	f7ef fb87 	bl	8000200 <memchr>
 8010af2:	b328      	cbz	r0, 8010b40 <_scanf_i+0xb8>
 8010af4:	f1bb 0f01 	cmp.w	fp, #1
 8010af8:	d159      	bne.n	8010bae <_scanf_i+0x126>
 8010afa:	6862      	ldr	r2, [r4, #4]
 8010afc:	b92a      	cbnz	r2, 8010b0a <_scanf_i+0x82>
 8010afe:	6822      	ldr	r2, [r4, #0]
 8010b00:	2308      	movs	r3, #8
 8010b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b06:	6063      	str	r3, [r4, #4]
 8010b08:	6022      	str	r2, [r4, #0]
 8010b0a:	6822      	ldr	r2, [r4, #0]
 8010b0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010b10:	6022      	str	r2, [r4, #0]
 8010b12:	68a2      	ldr	r2, [r4, #8]
 8010b14:	1e51      	subs	r1, r2, #1
 8010b16:	60a1      	str	r1, [r4, #8]
 8010b18:	b192      	cbz	r2, 8010b40 <_scanf_i+0xb8>
 8010b1a:	6832      	ldr	r2, [r6, #0]
 8010b1c:	1c51      	adds	r1, r2, #1
 8010b1e:	6031      	str	r1, [r6, #0]
 8010b20:	7812      	ldrb	r2, [r2, #0]
 8010b22:	f805 2b01 	strb.w	r2, [r5], #1
 8010b26:	6872      	ldr	r2, [r6, #4]
 8010b28:	3a01      	subs	r2, #1
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	6072      	str	r2, [r6, #4]
 8010b2e:	dc07      	bgt.n	8010b40 <_scanf_i+0xb8>
 8010b30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010b34:	4631      	mov	r1, r6
 8010b36:	4650      	mov	r0, sl
 8010b38:	4790      	blx	r2
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	f040 8085 	bne.w	8010c4a <_scanf_i+0x1c2>
 8010b40:	f10b 0b01 	add.w	fp, fp, #1
 8010b44:	f1bb 0f03 	cmp.w	fp, #3
 8010b48:	d1cb      	bne.n	8010ae2 <_scanf_i+0x5a>
 8010b4a:	6863      	ldr	r3, [r4, #4]
 8010b4c:	b90b      	cbnz	r3, 8010b52 <_scanf_i+0xca>
 8010b4e:	230a      	movs	r3, #10
 8010b50:	6063      	str	r3, [r4, #4]
 8010b52:	6863      	ldr	r3, [r4, #4]
 8010b54:	4947      	ldr	r1, [pc, #284]	; (8010c74 <_scanf_i+0x1ec>)
 8010b56:	6960      	ldr	r0, [r4, #20]
 8010b58:	1ac9      	subs	r1, r1, r3
 8010b5a:	f000 f8b9 	bl	8010cd0 <__sccl>
 8010b5e:	f04f 0b00 	mov.w	fp, #0
 8010b62:	68a3      	ldr	r3, [r4, #8]
 8010b64:	6822      	ldr	r2, [r4, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d03d      	beq.n	8010be6 <_scanf_i+0x15e>
 8010b6a:	6831      	ldr	r1, [r6, #0]
 8010b6c:	6960      	ldr	r0, [r4, #20]
 8010b6e:	f891 c000 	ldrb.w	ip, [r1]
 8010b72:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d035      	beq.n	8010be6 <_scanf_i+0x15e>
 8010b7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010b7e:	d124      	bne.n	8010bca <_scanf_i+0x142>
 8010b80:	0510      	lsls	r0, r2, #20
 8010b82:	d522      	bpl.n	8010bca <_scanf_i+0x142>
 8010b84:	f10b 0b01 	add.w	fp, fp, #1
 8010b88:	f1b9 0f00 	cmp.w	r9, #0
 8010b8c:	d003      	beq.n	8010b96 <_scanf_i+0x10e>
 8010b8e:	3301      	adds	r3, #1
 8010b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8010b94:	60a3      	str	r3, [r4, #8]
 8010b96:	6873      	ldr	r3, [r6, #4]
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	6073      	str	r3, [r6, #4]
 8010b9e:	dd1b      	ble.n	8010bd8 <_scanf_i+0x150>
 8010ba0:	6833      	ldr	r3, [r6, #0]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	6033      	str	r3, [r6, #0]
 8010ba6:	68a3      	ldr	r3, [r4, #8]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	60a3      	str	r3, [r4, #8]
 8010bac:	e7d9      	b.n	8010b62 <_scanf_i+0xda>
 8010bae:	f1bb 0f02 	cmp.w	fp, #2
 8010bb2:	d1ae      	bne.n	8010b12 <_scanf_i+0x8a>
 8010bb4:	6822      	ldr	r2, [r4, #0]
 8010bb6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010bba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010bbe:	d1bf      	bne.n	8010b40 <_scanf_i+0xb8>
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	6063      	str	r3, [r4, #4]
 8010bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010bc8:	e7a2      	b.n	8010b10 <_scanf_i+0x88>
 8010bca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010bce:	6022      	str	r2, [r4, #0]
 8010bd0:	780b      	ldrb	r3, [r1, #0]
 8010bd2:	f805 3b01 	strb.w	r3, [r5], #1
 8010bd6:	e7de      	b.n	8010b96 <_scanf_i+0x10e>
 8010bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4650      	mov	r0, sl
 8010be0:	4798      	blx	r3
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d0df      	beq.n	8010ba6 <_scanf_i+0x11e>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	05db      	lsls	r3, r3, #23
 8010bea:	d50d      	bpl.n	8010c08 <_scanf_i+0x180>
 8010bec:	42bd      	cmp	r5, r7
 8010bee:	d909      	bls.n	8010c04 <_scanf_i+0x17c>
 8010bf0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010bf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bf8:	4632      	mov	r2, r6
 8010bfa:	4650      	mov	r0, sl
 8010bfc:	4798      	blx	r3
 8010bfe:	f105 39ff 	add.w	r9, r5, #4294967295
 8010c02:	464d      	mov	r5, r9
 8010c04:	42bd      	cmp	r5, r7
 8010c06:	d02d      	beq.n	8010c64 <_scanf_i+0x1dc>
 8010c08:	6822      	ldr	r2, [r4, #0]
 8010c0a:	f012 0210 	ands.w	r2, r2, #16
 8010c0e:	d113      	bne.n	8010c38 <_scanf_i+0x1b0>
 8010c10:	702a      	strb	r2, [r5, #0]
 8010c12:	6863      	ldr	r3, [r4, #4]
 8010c14:	9e01      	ldr	r6, [sp, #4]
 8010c16:	4639      	mov	r1, r7
 8010c18:	4650      	mov	r0, sl
 8010c1a:	47b0      	blx	r6
 8010c1c:	6821      	ldr	r1, [r4, #0]
 8010c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c22:	f011 0f20 	tst.w	r1, #32
 8010c26:	d013      	beq.n	8010c50 <_scanf_i+0x1c8>
 8010c28:	1d1a      	adds	r2, r3, #4
 8010c2a:	f8c8 2000 	str.w	r2, [r8]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	6018      	str	r0, [r3, #0]
 8010c32:	68e3      	ldr	r3, [r4, #12]
 8010c34:	3301      	adds	r3, #1
 8010c36:	60e3      	str	r3, [r4, #12]
 8010c38:	1bed      	subs	r5, r5, r7
 8010c3a:	44ab      	add	fp, r5
 8010c3c:	6925      	ldr	r5, [r4, #16]
 8010c3e:	445d      	add	r5, fp
 8010c40:	6125      	str	r5, [r4, #16]
 8010c42:	2000      	movs	r0, #0
 8010c44:	b007      	add	sp, #28
 8010c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4a:	f04f 0b00 	mov.w	fp, #0
 8010c4e:	e7ca      	b.n	8010be6 <_scanf_i+0x15e>
 8010c50:	1d1a      	adds	r2, r3, #4
 8010c52:	f8c8 2000 	str.w	r2, [r8]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f011 0f01 	tst.w	r1, #1
 8010c5c:	bf14      	ite	ne
 8010c5e:	8018      	strhne	r0, [r3, #0]
 8010c60:	6018      	streq	r0, [r3, #0]
 8010c62:	e7e6      	b.n	8010c32 <_scanf_i+0x1aa>
 8010c64:	2001      	movs	r0, #1
 8010c66:	e7ed      	b.n	8010c44 <_scanf_i+0x1bc>
 8010c68:	080119c0 	.word	0x080119c0
 8010c6c:	0800de29 	.word	0x0800de29
 8010c70:	0800dd2d 	.word	0x0800dd2d
 8010c74:	08012046 	.word	0x08012046

08010c78 <_read_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	4d07      	ldr	r5, [pc, #28]	; (8010c98 <_read_r+0x20>)
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	4608      	mov	r0, r1
 8010c80:	4611      	mov	r1, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	602a      	str	r2, [r5, #0]
 8010c86:	461a      	mov	r2, r3
 8010c88:	f7f2 faae 	bl	80031e8 <_read>
 8010c8c:	1c43      	adds	r3, r0, #1
 8010c8e:	d102      	bne.n	8010c96 <_read_r+0x1e>
 8010c90:	682b      	ldr	r3, [r5, #0]
 8010c92:	b103      	cbz	r3, 8010c96 <_read_r+0x1e>
 8010c94:	6023      	str	r3, [r4, #0]
 8010c96:	bd38      	pop	{r3, r4, r5, pc}
 8010c98:	200068c0 	.word	0x200068c0
 8010c9c:	00000000 	.word	0x00000000

08010ca0 <nan>:
 8010ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ca8 <nan+0x8>
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	00000000 	.word	0x00000000
 8010cac:	7ff80000 	.word	0x7ff80000

08010cb0 <_sbrk_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d06      	ldr	r5, [pc, #24]	; (8010ccc <_sbrk_r+0x1c>)
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4608      	mov	r0, r1
 8010cba:	602b      	str	r3, [r5, #0]
 8010cbc:	f7f2 fb02 	bl	80032c4 <_sbrk>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_sbrk_r+0x1a>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_sbrk_r+0x1a>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	200068c0 	.word	0x200068c0

08010cd0 <__sccl>:
 8010cd0:	b570      	push	{r4, r5, r6, lr}
 8010cd2:	780b      	ldrb	r3, [r1, #0]
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	2b5e      	cmp	r3, #94	; 0x5e
 8010cd8:	bf0b      	itete	eq
 8010cda:	784b      	ldrbeq	r3, [r1, #1]
 8010cdc:	1c48      	addne	r0, r1, #1
 8010cde:	1c88      	addeq	r0, r1, #2
 8010ce0:	2200      	movne	r2, #0
 8010ce2:	bf08      	it	eq
 8010ce4:	2201      	moveq	r2, #1
 8010ce6:	1e61      	subs	r1, r4, #1
 8010ce8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010cec:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010cf0:	42a9      	cmp	r1, r5
 8010cf2:	d1fb      	bne.n	8010cec <__sccl+0x1c>
 8010cf4:	b90b      	cbnz	r3, 8010cfa <__sccl+0x2a>
 8010cf6:	3801      	subs	r0, #1
 8010cf8:	bd70      	pop	{r4, r5, r6, pc}
 8010cfa:	f082 0201 	eor.w	r2, r2, #1
 8010cfe:	54e2      	strb	r2, [r4, r3]
 8010d00:	4605      	mov	r5, r0
 8010d02:	4628      	mov	r0, r5
 8010d04:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010d08:	292d      	cmp	r1, #45	; 0x2d
 8010d0a:	d006      	beq.n	8010d1a <__sccl+0x4a>
 8010d0c:	295d      	cmp	r1, #93	; 0x5d
 8010d0e:	d0f3      	beq.n	8010cf8 <__sccl+0x28>
 8010d10:	b909      	cbnz	r1, 8010d16 <__sccl+0x46>
 8010d12:	4628      	mov	r0, r5
 8010d14:	e7f0      	b.n	8010cf8 <__sccl+0x28>
 8010d16:	460b      	mov	r3, r1
 8010d18:	e7f1      	b.n	8010cfe <__sccl+0x2e>
 8010d1a:	786e      	ldrb	r6, [r5, #1]
 8010d1c:	2e5d      	cmp	r6, #93	; 0x5d
 8010d1e:	d0fa      	beq.n	8010d16 <__sccl+0x46>
 8010d20:	42b3      	cmp	r3, r6
 8010d22:	dcf8      	bgt.n	8010d16 <__sccl+0x46>
 8010d24:	3502      	adds	r5, #2
 8010d26:	4619      	mov	r1, r3
 8010d28:	3101      	adds	r1, #1
 8010d2a:	428e      	cmp	r6, r1
 8010d2c:	5462      	strb	r2, [r4, r1]
 8010d2e:	dcfb      	bgt.n	8010d28 <__sccl+0x58>
 8010d30:	1af1      	subs	r1, r6, r3
 8010d32:	3901      	subs	r1, #1
 8010d34:	1c58      	adds	r0, r3, #1
 8010d36:	42b3      	cmp	r3, r6
 8010d38:	bfa8      	it	ge
 8010d3a:	2100      	movge	r1, #0
 8010d3c:	1843      	adds	r3, r0, r1
 8010d3e:	e7e0      	b.n	8010d02 <__sccl+0x32>

08010d40 <strncmp>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	b17a      	cbz	r2, 8010d64 <strncmp+0x24>
 8010d44:	4603      	mov	r3, r0
 8010d46:	3901      	subs	r1, #1
 8010d48:	1884      	adds	r4, r0, r2
 8010d4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d52:	4290      	cmp	r0, r2
 8010d54:	d101      	bne.n	8010d5a <strncmp+0x1a>
 8010d56:	42a3      	cmp	r3, r4
 8010d58:	d101      	bne.n	8010d5e <strncmp+0x1e>
 8010d5a:	1a80      	subs	r0, r0, r2
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	d1f3      	bne.n	8010d4a <strncmp+0xa>
 8010d62:	e7fa      	b.n	8010d5a <strncmp+0x1a>
 8010d64:	4610      	mov	r0, r2
 8010d66:	e7f9      	b.n	8010d5c <strncmp+0x1c>

08010d68 <__submore>:
 8010d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d74:	4299      	cmp	r1, r3
 8010d76:	d11d      	bne.n	8010db4 <__submore+0x4c>
 8010d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d7c:	f7ff fa88 	bl	8010290 <_malloc_r>
 8010d80:	b918      	cbnz	r0, 8010d8a <__submore+0x22>
 8010d82:	f04f 30ff 	mov.w	r0, #4294967295
 8010d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010d94:	6360      	str	r0, [r4, #52]	; 0x34
 8010d96:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010d9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010d9e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010da2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010da6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010daa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010dae:	6020      	str	r0, [r4, #0]
 8010db0:	2000      	movs	r0, #0
 8010db2:	e7e8      	b.n	8010d86 <__submore+0x1e>
 8010db4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010db6:	0077      	lsls	r7, r6, #1
 8010db8:	463a      	mov	r2, r7
 8010dba:	f000 fa37 	bl	801122c <_realloc_r>
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d0de      	beq.n	8010d82 <__submore+0x1a>
 8010dc4:	eb00 0806 	add.w	r8, r0, r6
 8010dc8:	4601      	mov	r1, r0
 8010dca:	4632      	mov	r2, r6
 8010dcc:	4640      	mov	r0, r8
 8010dce:	f7fa ff3f 	bl	800bc50 <memcpy>
 8010dd2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010dd6:	f8c4 8000 	str.w	r8, [r4]
 8010dda:	e7e9      	b.n	8010db0 <__submore+0x48>

08010ddc <__ascii_wctomb>:
 8010ddc:	b149      	cbz	r1, 8010df2 <__ascii_wctomb+0x16>
 8010dde:	2aff      	cmp	r2, #255	; 0xff
 8010de0:	bf85      	ittet	hi
 8010de2:	238a      	movhi	r3, #138	; 0x8a
 8010de4:	6003      	strhi	r3, [r0, #0]
 8010de6:	700a      	strbls	r2, [r1, #0]
 8010de8:	f04f 30ff 	movhi.w	r0, #4294967295
 8010dec:	bf98      	it	ls
 8010dee:	2001      	movls	r0, #1
 8010df0:	4770      	bx	lr
 8010df2:	4608      	mov	r0, r1
 8010df4:	4770      	bx	lr
	...

08010df8 <__assert_func>:
 8010df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dfa:	4614      	mov	r4, r2
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	4b09      	ldr	r3, [pc, #36]	; (8010e24 <__assert_func+0x2c>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4605      	mov	r5, r0
 8010e04:	68d8      	ldr	r0, [r3, #12]
 8010e06:	b14c      	cbz	r4, 8010e1c <__assert_func+0x24>
 8010e08:	4b07      	ldr	r3, [pc, #28]	; (8010e28 <__assert_func+0x30>)
 8010e0a:	9100      	str	r1, [sp, #0]
 8010e0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e10:	4906      	ldr	r1, [pc, #24]	; (8010e2c <__assert_func+0x34>)
 8010e12:	462b      	mov	r3, r5
 8010e14:	f000 f9b2 	bl	801117c <fiprintf>
 8010e18:	f000 fc50 	bl	80116bc <abort>
 8010e1c:	4b04      	ldr	r3, [pc, #16]	; (8010e30 <__assert_func+0x38>)
 8010e1e:	461c      	mov	r4, r3
 8010e20:	e7f3      	b.n	8010e0a <__assert_func+0x12>
 8010e22:	bf00      	nop
 8010e24:	20000020 	.word	0x20000020
 8010e28:	08012048 	.word	0x08012048
 8010e2c:	08012055 	.word	0x08012055
 8010e30:	08012083 	.word	0x08012083

08010e34 <__env_lock>:
 8010e34:	4801      	ldr	r0, [pc, #4]	; (8010e3c <__env_lock+0x8>)
 8010e36:	f7fe bcaf 	b.w	800f798 <__retarget_lock_acquire_recursive>
 8010e3a:	bf00      	nop
 8010e3c:	200068b0 	.word	0x200068b0

08010e40 <__env_unlock>:
 8010e40:	4801      	ldr	r0, [pc, #4]	; (8010e48 <__env_unlock+0x8>)
 8010e42:	f7fe bcab 	b.w	800f79c <__retarget_lock_release_recursive>
 8010e46:	bf00      	nop
 8010e48:	200068b0 	.word	0x200068b0

08010e4c <__sflush_r>:
 8010e4c:	898a      	ldrh	r2, [r1, #12]
 8010e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e52:	4605      	mov	r5, r0
 8010e54:	0710      	lsls	r0, r2, #28
 8010e56:	460c      	mov	r4, r1
 8010e58:	d458      	bmi.n	8010f0c <__sflush_r+0xc0>
 8010e5a:	684b      	ldr	r3, [r1, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dc05      	bgt.n	8010e6c <__sflush_r+0x20>
 8010e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	dc02      	bgt.n	8010e6c <__sflush_r+0x20>
 8010e66:	2000      	movs	r0, #0
 8010e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e6e:	2e00      	cmp	r6, #0
 8010e70:	d0f9      	beq.n	8010e66 <__sflush_r+0x1a>
 8010e72:	2300      	movs	r3, #0
 8010e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e78:	682f      	ldr	r7, [r5, #0]
 8010e7a:	602b      	str	r3, [r5, #0]
 8010e7c:	d032      	beq.n	8010ee4 <__sflush_r+0x98>
 8010e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	075a      	lsls	r2, r3, #29
 8010e84:	d505      	bpl.n	8010e92 <__sflush_r+0x46>
 8010e86:	6863      	ldr	r3, [r4, #4]
 8010e88:	1ac0      	subs	r0, r0, r3
 8010e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e8c:	b10b      	cbz	r3, 8010e92 <__sflush_r+0x46>
 8010e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e90:	1ac0      	subs	r0, r0, r3
 8010e92:	2300      	movs	r3, #0
 8010e94:	4602      	mov	r2, r0
 8010e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e98:	6a21      	ldr	r1, [r4, #32]
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	47b0      	blx	r6
 8010e9e:	1c43      	adds	r3, r0, #1
 8010ea0:	89a3      	ldrh	r3, [r4, #12]
 8010ea2:	d106      	bne.n	8010eb2 <__sflush_r+0x66>
 8010ea4:	6829      	ldr	r1, [r5, #0]
 8010ea6:	291d      	cmp	r1, #29
 8010ea8:	d82c      	bhi.n	8010f04 <__sflush_r+0xb8>
 8010eaa:	4a2a      	ldr	r2, [pc, #168]	; (8010f54 <__sflush_r+0x108>)
 8010eac:	40ca      	lsrs	r2, r1
 8010eae:	07d6      	lsls	r6, r2, #31
 8010eb0:	d528      	bpl.n	8010f04 <__sflush_r+0xb8>
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	6062      	str	r2, [r4, #4]
 8010eb6:	04d9      	lsls	r1, r3, #19
 8010eb8:	6922      	ldr	r2, [r4, #16]
 8010eba:	6022      	str	r2, [r4, #0]
 8010ebc:	d504      	bpl.n	8010ec8 <__sflush_r+0x7c>
 8010ebe:	1c42      	adds	r2, r0, #1
 8010ec0:	d101      	bne.n	8010ec6 <__sflush_r+0x7a>
 8010ec2:	682b      	ldr	r3, [r5, #0]
 8010ec4:	b903      	cbnz	r3, 8010ec8 <__sflush_r+0x7c>
 8010ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8010ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eca:	602f      	str	r7, [r5, #0]
 8010ecc:	2900      	cmp	r1, #0
 8010ece:	d0ca      	beq.n	8010e66 <__sflush_r+0x1a>
 8010ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ed4:	4299      	cmp	r1, r3
 8010ed6:	d002      	beq.n	8010ede <__sflush_r+0x92>
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f7ff f96d 	bl	80101b8 <_free_r>
 8010ede:	2000      	movs	r0, #0
 8010ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8010ee2:	e7c1      	b.n	8010e68 <__sflush_r+0x1c>
 8010ee4:	6a21      	ldr	r1, [r4, #32]
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	4628      	mov	r0, r5
 8010eea:	47b0      	blx	r6
 8010eec:	1c41      	adds	r1, r0, #1
 8010eee:	d1c7      	bne.n	8010e80 <__sflush_r+0x34>
 8010ef0:	682b      	ldr	r3, [r5, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d0c4      	beq.n	8010e80 <__sflush_r+0x34>
 8010ef6:	2b1d      	cmp	r3, #29
 8010ef8:	d001      	beq.n	8010efe <__sflush_r+0xb2>
 8010efa:	2b16      	cmp	r3, #22
 8010efc:	d101      	bne.n	8010f02 <__sflush_r+0xb6>
 8010efe:	602f      	str	r7, [r5, #0]
 8010f00:	e7b1      	b.n	8010e66 <__sflush_r+0x1a>
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f08:	81a3      	strh	r3, [r4, #12]
 8010f0a:	e7ad      	b.n	8010e68 <__sflush_r+0x1c>
 8010f0c:	690f      	ldr	r7, [r1, #16]
 8010f0e:	2f00      	cmp	r7, #0
 8010f10:	d0a9      	beq.n	8010e66 <__sflush_r+0x1a>
 8010f12:	0793      	lsls	r3, r2, #30
 8010f14:	680e      	ldr	r6, [r1, #0]
 8010f16:	bf08      	it	eq
 8010f18:	694b      	ldreq	r3, [r1, #20]
 8010f1a:	600f      	str	r7, [r1, #0]
 8010f1c:	bf18      	it	ne
 8010f1e:	2300      	movne	r3, #0
 8010f20:	eba6 0807 	sub.w	r8, r6, r7
 8010f24:	608b      	str	r3, [r1, #8]
 8010f26:	f1b8 0f00 	cmp.w	r8, #0
 8010f2a:	dd9c      	ble.n	8010e66 <__sflush_r+0x1a>
 8010f2c:	6a21      	ldr	r1, [r4, #32]
 8010f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f30:	4643      	mov	r3, r8
 8010f32:	463a      	mov	r2, r7
 8010f34:	4628      	mov	r0, r5
 8010f36:	47b0      	blx	r6
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	dc06      	bgt.n	8010f4a <__sflush_r+0xfe>
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f42:	81a3      	strh	r3, [r4, #12]
 8010f44:	f04f 30ff 	mov.w	r0, #4294967295
 8010f48:	e78e      	b.n	8010e68 <__sflush_r+0x1c>
 8010f4a:	4407      	add	r7, r0
 8010f4c:	eba8 0800 	sub.w	r8, r8, r0
 8010f50:	e7e9      	b.n	8010f26 <__sflush_r+0xda>
 8010f52:	bf00      	nop
 8010f54:	20400001 	.word	0x20400001

08010f58 <_fflush_r>:
 8010f58:	b538      	push	{r3, r4, r5, lr}
 8010f5a:	690b      	ldr	r3, [r1, #16]
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	460c      	mov	r4, r1
 8010f60:	b913      	cbnz	r3, 8010f68 <_fflush_r+0x10>
 8010f62:	2500      	movs	r5, #0
 8010f64:	4628      	mov	r0, r5
 8010f66:	bd38      	pop	{r3, r4, r5, pc}
 8010f68:	b118      	cbz	r0, 8010f72 <_fflush_r+0x1a>
 8010f6a:	6983      	ldr	r3, [r0, #24]
 8010f6c:	b90b      	cbnz	r3, 8010f72 <_fflush_r+0x1a>
 8010f6e:	f000 f887 	bl	8011080 <__sinit>
 8010f72:	4b14      	ldr	r3, [pc, #80]	; (8010fc4 <_fflush_r+0x6c>)
 8010f74:	429c      	cmp	r4, r3
 8010f76:	d11b      	bne.n	8010fb0 <_fflush_r+0x58>
 8010f78:	686c      	ldr	r4, [r5, #4]
 8010f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d0ef      	beq.n	8010f62 <_fflush_r+0xa>
 8010f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f84:	07d0      	lsls	r0, r2, #31
 8010f86:	d404      	bmi.n	8010f92 <_fflush_r+0x3a>
 8010f88:	0599      	lsls	r1, r3, #22
 8010f8a:	d402      	bmi.n	8010f92 <_fflush_r+0x3a>
 8010f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f8e:	f7fe fc03 	bl	800f798 <__retarget_lock_acquire_recursive>
 8010f92:	4628      	mov	r0, r5
 8010f94:	4621      	mov	r1, r4
 8010f96:	f7ff ff59 	bl	8010e4c <__sflush_r>
 8010f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f9c:	07da      	lsls	r2, r3, #31
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	d4e0      	bmi.n	8010f64 <_fflush_r+0xc>
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	059b      	lsls	r3, r3, #22
 8010fa6:	d4dd      	bmi.n	8010f64 <_fflush_r+0xc>
 8010fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010faa:	f7fe fbf7 	bl	800f79c <__retarget_lock_release_recursive>
 8010fae:	e7d9      	b.n	8010f64 <_fflush_r+0xc>
 8010fb0:	4b05      	ldr	r3, [pc, #20]	; (8010fc8 <_fflush_r+0x70>)
 8010fb2:	429c      	cmp	r4, r3
 8010fb4:	d101      	bne.n	8010fba <_fflush_r+0x62>
 8010fb6:	68ac      	ldr	r4, [r5, #8]
 8010fb8:	e7df      	b.n	8010f7a <_fflush_r+0x22>
 8010fba:	4b04      	ldr	r3, [pc, #16]	; (8010fcc <_fflush_r+0x74>)
 8010fbc:	429c      	cmp	r4, r3
 8010fbe:	bf08      	it	eq
 8010fc0:	68ec      	ldreq	r4, [r5, #12]
 8010fc2:	e7da      	b.n	8010f7a <_fflush_r+0x22>
 8010fc4:	080120a4 	.word	0x080120a4
 8010fc8:	080120c4 	.word	0x080120c4
 8010fcc:	08012084 	.word	0x08012084

08010fd0 <std>:
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	b510      	push	{r4, lr}
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8010fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fde:	6083      	str	r3, [r0, #8]
 8010fe0:	8181      	strh	r1, [r0, #12]
 8010fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8010fe4:	81c2      	strh	r2, [r0, #14]
 8010fe6:	6183      	str	r3, [r0, #24]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	2208      	movs	r2, #8
 8010fec:	305c      	adds	r0, #92	; 0x5c
 8010fee:	f7fa fe3d 	bl	800bc6c <memset>
 8010ff2:	4b05      	ldr	r3, [pc, #20]	; (8011008 <std+0x38>)
 8010ff4:	6263      	str	r3, [r4, #36]	; 0x24
 8010ff6:	4b05      	ldr	r3, [pc, #20]	; (801100c <std+0x3c>)
 8010ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ffa:	4b05      	ldr	r3, [pc, #20]	; (8011010 <std+0x40>)
 8010ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ffe:	4b05      	ldr	r3, [pc, #20]	; (8011014 <std+0x44>)
 8011000:	6224      	str	r4, [r4, #32]
 8011002:	6323      	str	r3, [r4, #48]	; 0x30
 8011004:	bd10      	pop	{r4, pc}
 8011006:	bf00      	nop
 8011008:	0800cef9 	.word	0x0800cef9
 801100c:	0800cf1f 	.word	0x0800cf1f
 8011010:	0800cf57 	.word	0x0800cf57
 8011014:	0800cf7b 	.word	0x0800cf7b

08011018 <_cleanup_r>:
 8011018:	4901      	ldr	r1, [pc, #4]	; (8011020 <_cleanup_r+0x8>)
 801101a:	f000 b8c1 	b.w	80111a0 <_fwalk_reent>
 801101e:	bf00      	nop
 8011020:	08010f59 	.word	0x08010f59

08011024 <__sfmoreglue>:
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	2268      	movs	r2, #104	; 0x68
 8011028:	1e4d      	subs	r5, r1, #1
 801102a:	4355      	muls	r5, r2
 801102c:	460e      	mov	r6, r1
 801102e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011032:	f7ff f92d 	bl	8010290 <_malloc_r>
 8011036:	4604      	mov	r4, r0
 8011038:	b140      	cbz	r0, 801104c <__sfmoreglue+0x28>
 801103a:	2100      	movs	r1, #0
 801103c:	e9c0 1600 	strd	r1, r6, [r0]
 8011040:	300c      	adds	r0, #12
 8011042:	60a0      	str	r0, [r4, #8]
 8011044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011048:	f7fa fe10 	bl	800bc6c <memset>
 801104c:	4620      	mov	r0, r4
 801104e:	bd70      	pop	{r4, r5, r6, pc}

08011050 <__sfp_lock_acquire>:
 8011050:	4801      	ldr	r0, [pc, #4]	; (8011058 <__sfp_lock_acquire+0x8>)
 8011052:	f7fe bba1 	b.w	800f798 <__retarget_lock_acquire_recursive>
 8011056:	bf00      	nop
 8011058:	200068b2 	.word	0x200068b2

0801105c <__sfp_lock_release>:
 801105c:	4801      	ldr	r0, [pc, #4]	; (8011064 <__sfp_lock_release+0x8>)
 801105e:	f7fe bb9d 	b.w	800f79c <__retarget_lock_release_recursive>
 8011062:	bf00      	nop
 8011064:	200068b2 	.word	0x200068b2

08011068 <__sinit_lock_acquire>:
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <__sinit_lock_acquire+0x8>)
 801106a:	f7fe bb95 	b.w	800f798 <__retarget_lock_acquire_recursive>
 801106e:	bf00      	nop
 8011070:	200068b3 	.word	0x200068b3

08011074 <__sinit_lock_release>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__sinit_lock_release+0x8>)
 8011076:	f7fe bb91 	b.w	800f79c <__retarget_lock_release_recursive>
 801107a:	bf00      	nop
 801107c:	200068b3 	.word	0x200068b3

08011080 <__sinit>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4604      	mov	r4, r0
 8011084:	f7ff fff0 	bl	8011068 <__sinit_lock_acquire>
 8011088:	69a3      	ldr	r3, [r4, #24]
 801108a:	b11b      	cbz	r3, 8011094 <__sinit+0x14>
 801108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011090:	f7ff bff0 	b.w	8011074 <__sinit_lock_release>
 8011094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011098:	6523      	str	r3, [r4, #80]	; 0x50
 801109a:	4b13      	ldr	r3, [pc, #76]	; (80110e8 <__sinit+0x68>)
 801109c:	4a13      	ldr	r2, [pc, #76]	; (80110ec <__sinit+0x6c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80110a2:	42a3      	cmp	r3, r4
 80110a4:	bf04      	itt	eq
 80110a6:	2301      	moveq	r3, #1
 80110a8:	61a3      	streq	r3, [r4, #24]
 80110aa:	4620      	mov	r0, r4
 80110ac:	f000 f820 	bl	80110f0 <__sfp>
 80110b0:	6060      	str	r0, [r4, #4]
 80110b2:	4620      	mov	r0, r4
 80110b4:	f000 f81c 	bl	80110f0 <__sfp>
 80110b8:	60a0      	str	r0, [r4, #8]
 80110ba:	4620      	mov	r0, r4
 80110bc:	f000 f818 	bl	80110f0 <__sfp>
 80110c0:	2200      	movs	r2, #0
 80110c2:	60e0      	str	r0, [r4, #12]
 80110c4:	2104      	movs	r1, #4
 80110c6:	6860      	ldr	r0, [r4, #4]
 80110c8:	f7ff ff82 	bl	8010fd0 <std>
 80110cc:	68a0      	ldr	r0, [r4, #8]
 80110ce:	2201      	movs	r2, #1
 80110d0:	2109      	movs	r1, #9
 80110d2:	f7ff ff7d 	bl	8010fd0 <std>
 80110d6:	68e0      	ldr	r0, [r4, #12]
 80110d8:	2202      	movs	r2, #2
 80110da:	2112      	movs	r1, #18
 80110dc:	f7ff ff78 	bl	8010fd0 <std>
 80110e0:	2301      	movs	r3, #1
 80110e2:	61a3      	str	r3, [r4, #24]
 80110e4:	e7d2      	b.n	801108c <__sinit+0xc>
 80110e6:	bf00      	nop
 80110e8:	08011b2c 	.word	0x08011b2c
 80110ec:	08011019 	.word	0x08011019

080110f0 <__sfp>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	4607      	mov	r7, r0
 80110f4:	f7ff ffac 	bl	8011050 <__sfp_lock_acquire>
 80110f8:	4b1e      	ldr	r3, [pc, #120]	; (8011174 <__sfp+0x84>)
 80110fa:	681e      	ldr	r6, [r3, #0]
 80110fc:	69b3      	ldr	r3, [r6, #24]
 80110fe:	b913      	cbnz	r3, 8011106 <__sfp+0x16>
 8011100:	4630      	mov	r0, r6
 8011102:	f7ff ffbd 	bl	8011080 <__sinit>
 8011106:	3648      	adds	r6, #72	; 0x48
 8011108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801110c:	3b01      	subs	r3, #1
 801110e:	d503      	bpl.n	8011118 <__sfp+0x28>
 8011110:	6833      	ldr	r3, [r6, #0]
 8011112:	b30b      	cbz	r3, 8011158 <__sfp+0x68>
 8011114:	6836      	ldr	r6, [r6, #0]
 8011116:	e7f7      	b.n	8011108 <__sfp+0x18>
 8011118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801111c:	b9d5      	cbnz	r5, 8011154 <__sfp+0x64>
 801111e:	4b16      	ldr	r3, [pc, #88]	; (8011178 <__sfp+0x88>)
 8011120:	60e3      	str	r3, [r4, #12]
 8011122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011126:	6665      	str	r5, [r4, #100]	; 0x64
 8011128:	f7fe fb34 	bl	800f794 <__retarget_lock_init_recursive>
 801112c:	f7ff ff96 	bl	801105c <__sfp_lock_release>
 8011130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011138:	6025      	str	r5, [r4, #0]
 801113a:	61a5      	str	r5, [r4, #24]
 801113c:	2208      	movs	r2, #8
 801113e:	4629      	mov	r1, r5
 8011140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011144:	f7fa fd92 	bl	800bc6c <memset>
 8011148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801114c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011150:	4620      	mov	r0, r4
 8011152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011154:	3468      	adds	r4, #104	; 0x68
 8011156:	e7d9      	b.n	801110c <__sfp+0x1c>
 8011158:	2104      	movs	r1, #4
 801115a:	4638      	mov	r0, r7
 801115c:	f7ff ff62 	bl	8011024 <__sfmoreglue>
 8011160:	4604      	mov	r4, r0
 8011162:	6030      	str	r0, [r6, #0]
 8011164:	2800      	cmp	r0, #0
 8011166:	d1d5      	bne.n	8011114 <__sfp+0x24>
 8011168:	f7ff ff78 	bl	801105c <__sfp_lock_release>
 801116c:	230c      	movs	r3, #12
 801116e:	603b      	str	r3, [r7, #0]
 8011170:	e7ee      	b.n	8011150 <__sfp+0x60>
 8011172:	bf00      	nop
 8011174:	08011b2c 	.word	0x08011b2c
 8011178:	ffff0001 	.word	0xffff0001

0801117c <fiprintf>:
 801117c:	b40e      	push	{r1, r2, r3}
 801117e:	b503      	push	{r0, r1, lr}
 8011180:	4601      	mov	r1, r0
 8011182:	ab03      	add	r3, sp, #12
 8011184:	4805      	ldr	r0, [pc, #20]	; (801119c <fiprintf+0x20>)
 8011186:	f853 2b04 	ldr.w	r2, [r3], #4
 801118a:	6800      	ldr	r0, [r0, #0]
 801118c:	9301      	str	r3, [sp, #4]
 801118e:	f000 f8a5 	bl	80112dc <_vfiprintf_r>
 8011192:	b002      	add	sp, #8
 8011194:	f85d eb04 	ldr.w	lr, [sp], #4
 8011198:	b003      	add	sp, #12
 801119a:	4770      	bx	lr
 801119c:	20000020 	.word	0x20000020

080111a0 <_fwalk_reent>:
 80111a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111a4:	4606      	mov	r6, r0
 80111a6:	4688      	mov	r8, r1
 80111a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111ac:	2700      	movs	r7, #0
 80111ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111b2:	f1b9 0901 	subs.w	r9, r9, #1
 80111b6:	d505      	bpl.n	80111c4 <_fwalk_reent+0x24>
 80111b8:	6824      	ldr	r4, [r4, #0]
 80111ba:	2c00      	cmp	r4, #0
 80111bc:	d1f7      	bne.n	80111ae <_fwalk_reent+0xe>
 80111be:	4638      	mov	r0, r7
 80111c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c4:	89ab      	ldrh	r3, [r5, #12]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d907      	bls.n	80111da <_fwalk_reent+0x3a>
 80111ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111ce:	3301      	adds	r3, #1
 80111d0:	d003      	beq.n	80111da <_fwalk_reent+0x3a>
 80111d2:	4629      	mov	r1, r5
 80111d4:	4630      	mov	r0, r6
 80111d6:	47c0      	blx	r8
 80111d8:	4307      	orrs	r7, r0
 80111da:	3568      	adds	r5, #104	; 0x68
 80111dc:	e7e9      	b.n	80111b2 <_fwalk_reent+0x12>

080111de <memmove>:
 80111de:	4288      	cmp	r0, r1
 80111e0:	b510      	push	{r4, lr}
 80111e2:	eb01 0402 	add.w	r4, r1, r2
 80111e6:	d902      	bls.n	80111ee <memmove+0x10>
 80111e8:	4284      	cmp	r4, r0
 80111ea:	4623      	mov	r3, r4
 80111ec:	d807      	bhi.n	80111fe <memmove+0x20>
 80111ee:	1e43      	subs	r3, r0, #1
 80111f0:	42a1      	cmp	r1, r4
 80111f2:	d008      	beq.n	8011206 <memmove+0x28>
 80111f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111fc:	e7f8      	b.n	80111f0 <memmove+0x12>
 80111fe:	4402      	add	r2, r0
 8011200:	4601      	mov	r1, r0
 8011202:	428a      	cmp	r2, r1
 8011204:	d100      	bne.n	8011208 <memmove+0x2a>
 8011206:	bd10      	pop	{r4, pc}
 8011208:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801120c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011210:	e7f7      	b.n	8011202 <memmove+0x24>
	...

08011214 <__malloc_lock>:
 8011214:	4801      	ldr	r0, [pc, #4]	; (801121c <__malloc_lock+0x8>)
 8011216:	f7fe babf 	b.w	800f798 <__retarget_lock_acquire_recursive>
 801121a:	bf00      	nop
 801121c:	200068b1 	.word	0x200068b1

08011220 <__malloc_unlock>:
 8011220:	4801      	ldr	r0, [pc, #4]	; (8011228 <__malloc_unlock+0x8>)
 8011222:	f7fe babb 	b.w	800f79c <__retarget_lock_release_recursive>
 8011226:	bf00      	nop
 8011228:	200068b1 	.word	0x200068b1

0801122c <_realloc_r>:
 801122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011230:	4680      	mov	r8, r0
 8011232:	4614      	mov	r4, r2
 8011234:	460e      	mov	r6, r1
 8011236:	b921      	cbnz	r1, 8011242 <_realloc_r+0x16>
 8011238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801123c:	4611      	mov	r1, r2
 801123e:	f7ff b827 	b.w	8010290 <_malloc_r>
 8011242:	b92a      	cbnz	r2, 8011250 <_realloc_r+0x24>
 8011244:	f7fe ffb8 	bl	80101b8 <_free_r>
 8011248:	4625      	mov	r5, r4
 801124a:	4628      	mov	r0, r5
 801124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011250:	f000 faa0 	bl	8011794 <_malloc_usable_size_r>
 8011254:	4284      	cmp	r4, r0
 8011256:	4607      	mov	r7, r0
 8011258:	d802      	bhi.n	8011260 <_realloc_r+0x34>
 801125a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801125e:	d812      	bhi.n	8011286 <_realloc_r+0x5a>
 8011260:	4621      	mov	r1, r4
 8011262:	4640      	mov	r0, r8
 8011264:	f7ff f814 	bl	8010290 <_malloc_r>
 8011268:	4605      	mov	r5, r0
 801126a:	2800      	cmp	r0, #0
 801126c:	d0ed      	beq.n	801124a <_realloc_r+0x1e>
 801126e:	42bc      	cmp	r4, r7
 8011270:	4622      	mov	r2, r4
 8011272:	4631      	mov	r1, r6
 8011274:	bf28      	it	cs
 8011276:	463a      	movcs	r2, r7
 8011278:	f7fa fcea 	bl	800bc50 <memcpy>
 801127c:	4631      	mov	r1, r6
 801127e:	4640      	mov	r0, r8
 8011280:	f7fe ff9a 	bl	80101b8 <_free_r>
 8011284:	e7e1      	b.n	801124a <_realloc_r+0x1e>
 8011286:	4635      	mov	r5, r6
 8011288:	e7df      	b.n	801124a <_realloc_r+0x1e>

0801128a <__sfputc_r>:
 801128a:	6893      	ldr	r3, [r2, #8]
 801128c:	3b01      	subs	r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	b410      	push	{r4}
 8011292:	6093      	str	r3, [r2, #8]
 8011294:	da08      	bge.n	80112a8 <__sfputc_r+0x1e>
 8011296:	6994      	ldr	r4, [r2, #24]
 8011298:	42a3      	cmp	r3, r4
 801129a:	db01      	blt.n	80112a0 <__sfputc_r+0x16>
 801129c:	290a      	cmp	r1, #10
 801129e:	d103      	bne.n	80112a8 <__sfputc_r+0x1e>
 80112a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a4:	f000 b94a 	b.w	801153c <__swbuf_r>
 80112a8:	6813      	ldr	r3, [r2, #0]
 80112aa:	1c58      	adds	r0, r3, #1
 80112ac:	6010      	str	r0, [r2, #0]
 80112ae:	7019      	strb	r1, [r3, #0]
 80112b0:	4608      	mov	r0, r1
 80112b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112b6:	4770      	bx	lr

080112b8 <__sfputs_r>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	4606      	mov	r6, r0
 80112bc:	460f      	mov	r7, r1
 80112be:	4614      	mov	r4, r2
 80112c0:	18d5      	adds	r5, r2, r3
 80112c2:	42ac      	cmp	r4, r5
 80112c4:	d101      	bne.n	80112ca <__sfputs_r+0x12>
 80112c6:	2000      	movs	r0, #0
 80112c8:	e007      	b.n	80112da <__sfputs_r+0x22>
 80112ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ce:	463a      	mov	r2, r7
 80112d0:	4630      	mov	r0, r6
 80112d2:	f7ff ffda 	bl	801128a <__sfputc_r>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	d1f3      	bne.n	80112c2 <__sfputs_r+0xa>
 80112da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112dc <_vfiprintf_r>:
 80112dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e0:	460d      	mov	r5, r1
 80112e2:	b09d      	sub	sp, #116	; 0x74
 80112e4:	4614      	mov	r4, r2
 80112e6:	4698      	mov	r8, r3
 80112e8:	4606      	mov	r6, r0
 80112ea:	b118      	cbz	r0, 80112f4 <_vfiprintf_r+0x18>
 80112ec:	6983      	ldr	r3, [r0, #24]
 80112ee:	b90b      	cbnz	r3, 80112f4 <_vfiprintf_r+0x18>
 80112f0:	f7ff fec6 	bl	8011080 <__sinit>
 80112f4:	4b89      	ldr	r3, [pc, #548]	; (801151c <_vfiprintf_r+0x240>)
 80112f6:	429d      	cmp	r5, r3
 80112f8:	d11b      	bne.n	8011332 <_vfiprintf_r+0x56>
 80112fa:	6875      	ldr	r5, [r6, #4]
 80112fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112fe:	07d9      	lsls	r1, r3, #31
 8011300:	d405      	bmi.n	801130e <_vfiprintf_r+0x32>
 8011302:	89ab      	ldrh	r3, [r5, #12]
 8011304:	059a      	lsls	r2, r3, #22
 8011306:	d402      	bmi.n	801130e <_vfiprintf_r+0x32>
 8011308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801130a:	f7fe fa45 	bl	800f798 <__retarget_lock_acquire_recursive>
 801130e:	89ab      	ldrh	r3, [r5, #12]
 8011310:	071b      	lsls	r3, r3, #28
 8011312:	d501      	bpl.n	8011318 <_vfiprintf_r+0x3c>
 8011314:	692b      	ldr	r3, [r5, #16]
 8011316:	b9eb      	cbnz	r3, 8011354 <_vfiprintf_r+0x78>
 8011318:	4629      	mov	r1, r5
 801131a:	4630      	mov	r0, r6
 801131c:	f000 f960 	bl	80115e0 <__swsetup_r>
 8011320:	b1c0      	cbz	r0, 8011354 <_vfiprintf_r+0x78>
 8011322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011324:	07dc      	lsls	r4, r3, #31
 8011326:	d50e      	bpl.n	8011346 <_vfiprintf_r+0x6a>
 8011328:	f04f 30ff 	mov.w	r0, #4294967295
 801132c:	b01d      	add	sp, #116	; 0x74
 801132e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011332:	4b7b      	ldr	r3, [pc, #492]	; (8011520 <_vfiprintf_r+0x244>)
 8011334:	429d      	cmp	r5, r3
 8011336:	d101      	bne.n	801133c <_vfiprintf_r+0x60>
 8011338:	68b5      	ldr	r5, [r6, #8]
 801133a:	e7df      	b.n	80112fc <_vfiprintf_r+0x20>
 801133c:	4b79      	ldr	r3, [pc, #484]	; (8011524 <_vfiprintf_r+0x248>)
 801133e:	429d      	cmp	r5, r3
 8011340:	bf08      	it	eq
 8011342:	68f5      	ldreq	r5, [r6, #12]
 8011344:	e7da      	b.n	80112fc <_vfiprintf_r+0x20>
 8011346:	89ab      	ldrh	r3, [r5, #12]
 8011348:	0598      	lsls	r0, r3, #22
 801134a:	d4ed      	bmi.n	8011328 <_vfiprintf_r+0x4c>
 801134c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801134e:	f7fe fa25 	bl	800f79c <__retarget_lock_release_recursive>
 8011352:	e7e9      	b.n	8011328 <_vfiprintf_r+0x4c>
 8011354:	2300      	movs	r3, #0
 8011356:	9309      	str	r3, [sp, #36]	; 0x24
 8011358:	2320      	movs	r3, #32
 801135a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801135e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011362:	2330      	movs	r3, #48	; 0x30
 8011364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011528 <_vfiprintf_r+0x24c>
 8011368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801136c:	f04f 0901 	mov.w	r9, #1
 8011370:	4623      	mov	r3, r4
 8011372:	469a      	mov	sl, r3
 8011374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011378:	b10a      	cbz	r2, 801137e <_vfiprintf_r+0xa2>
 801137a:	2a25      	cmp	r2, #37	; 0x25
 801137c:	d1f9      	bne.n	8011372 <_vfiprintf_r+0x96>
 801137e:	ebba 0b04 	subs.w	fp, sl, r4
 8011382:	d00b      	beq.n	801139c <_vfiprintf_r+0xc0>
 8011384:	465b      	mov	r3, fp
 8011386:	4622      	mov	r2, r4
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f7ff ff94 	bl	80112b8 <__sfputs_r>
 8011390:	3001      	adds	r0, #1
 8011392:	f000 80aa 	beq.w	80114ea <_vfiprintf_r+0x20e>
 8011396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011398:	445a      	add	r2, fp
 801139a:	9209      	str	r2, [sp, #36]	; 0x24
 801139c:	f89a 3000 	ldrb.w	r3, [sl]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f000 80a2 	beq.w	80114ea <_vfiprintf_r+0x20e>
 80113a6:	2300      	movs	r3, #0
 80113a8:	f04f 32ff 	mov.w	r2, #4294967295
 80113ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113b0:	f10a 0a01 	add.w	sl, sl, #1
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	9307      	str	r3, [sp, #28]
 80113b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113bc:	931a      	str	r3, [sp, #104]	; 0x68
 80113be:	4654      	mov	r4, sl
 80113c0:	2205      	movs	r2, #5
 80113c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113c6:	4858      	ldr	r0, [pc, #352]	; (8011528 <_vfiprintf_r+0x24c>)
 80113c8:	f7ee ff1a 	bl	8000200 <memchr>
 80113cc:	9a04      	ldr	r2, [sp, #16]
 80113ce:	b9d8      	cbnz	r0, 8011408 <_vfiprintf_r+0x12c>
 80113d0:	06d1      	lsls	r1, r2, #27
 80113d2:	bf44      	itt	mi
 80113d4:	2320      	movmi	r3, #32
 80113d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113da:	0713      	lsls	r3, r2, #28
 80113dc:	bf44      	itt	mi
 80113de:	232b      	movmi	r3, #43	; 0x2b
 80113e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113e4:	f89a 3000 	ldrb.w	r3, [sl]
 80113e8:	2b2a      	cmp	r3, #42	; 0x2a
 80113ea:	d015      	beq.n	8011418 <_vfiprintf_r+0x13c>
 80113ec:	9a07      	ldr	r2, [sp, #28]
 80113ee:	4654      	mov	r4, sl
 80113f0:	2000      	movs	r0, #0
 80113f2:	f04f 0c0a 	mov.w	ip, #10
 80113f6:	4621      	mov	r1, r4
 80113f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113fc:	3b30      	subs	r3, #48	; 0x30
 80113fe:	2b09      	cmp	r3, #9
 8011400:	d94e      	bls.n	80114a0 <_vfiprintf_r+0x1c4>
 8011402:	b1b0      	cbz	r0, 8011432 <_vfiprintf_r+0x156>
 8011404:	9207      	str	r2, [sp, #28]
 8011406:	e014      	b.n	8011432 <_vfiprintf_r+0x156>
 8011408:	eba0 0308 	sub.w	r3, r0, r8
 801140c:	fa09 f303 	lsl.w	r3, r9, r3
 8011410:	4313      	orrs	r3, r2
 8011412:	9304      	str	r3, [sp, #16]
 8011414:	46a2      	mov	sl, r4
 8011416:	e7d2      	b.n	80113be <_vfiprintf_r+0xe2>
 8011418:	9b03      	ldr	r3, [sp, #12]
 801141a:	1d19      	adds	r1, r3, #4
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	9103      	str	r1, [sp, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	bfbb      	ittet	lt
 8011424:	425b      	neglt	r3, r3
 8011426:	f042 0202 	orrlt.w	r2, r2, #2
 801142a:	9307      	strge	r3, [sp, #28]
 801142c:	9307      	strlt	r3, [sp, #28]
 801142e:	bfb8      	it	lt
 8011430:	9204      	strlt	r2, [sp, #16]
 8011432:	7823      	ldrb	r3, [r4, #0]
 8011434:	2b2e      	cmp	r3, #46	; 0x2e
 8011436:	d10c      	bne.n	8011452 <_vfiprintf_r+0x176>
 8011438:	7863      	ldrb	r3, [r4, #1]
 801143a:	2b2a      	cmp	r3, #42	; 0x2a
 801143c:	d135      	bne.n	80114aa <_vfiprintf_r+0x1ce>
 801143e:	9b03      	ldr	r3, [sp, #12]
 8011440:	1d1a      	adds	r2, r3, #4
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	9203      	str	r2, [sp, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfb8      	it	lt
 801144a:	f04f 33ff 	movlt.w	r3, #4294967295
 801144e:	3402      	adds	r4, #2
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011538 <_vfiprintf_r+0x25c>
 8011456:	7821      	ldrb	r1, [r4, #0]
 8011458:	2203      	movs	r2, #3
 801145a:	4650      	mov	r0, sl
 801145c:	f7ee fed0 	bl	8000200 <memchr>
 8011460:	b140      	cbz	r0, 8011474 <_vfiprintf_r+0x198>
 8011462:	2340      	movs	r3, #64	; 0x40
 8011464:	eba0 000a 	sub.w	r0, r0, sl
 8011468:	fa03 f000 	lsl.w	r0, r3, r0
 801146c:	9b04      	ldr	r3, [sp, #16]
 801146e:	4303      	orrs	r3, r0
 8011470:	3401      	adds	r4, #1
 8011472:	9304      	str	r3, [sp, #16]
 8011474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011478:	482c      	ldr	r0, [pc, #176]	; (801152c <_vfiprintf_r+0x250>)
 801147a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801147e:	2206      	movs	r2, #6
 8011480:	f7ee febe 	bl	8000200 <memchr>
 8011484:	2800      	cmp	r0, #0
 8011486:	d03f      	beq.n	8011508 <_vfiprintf_r+0x22c>
 8011488:	4b29      	ldr	r3, [pc, #164]	; (8011530 <_vfiprintf_r+0x254>)
 801148a:	bb1b      	cbnz	r3, 80114d4 <_vfiprintf_r+0x1f8>
 801148c:	9b03      	ldr	r3, [sp, #12]
 801148e:	3307      	adds	r3, #7
 8011490:	f023 0307 	bic.w	r3, r3, #7
 8011494:	3308      	adds	r3, #8
 8011496:	9303      	str	r3, [sp, #12]
 8011498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801149a:	443b      	add	r3, r7
 801149c:	9309      	str	r3, [sp, #36]	; 0x24
 801149e:	e767      	b.n	8011370 <_vfiprintf_r+0x94>
 80114a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80114a4:	460c      	mov	r4, r1
 80114a6:	2001      	movs	r0, #1
 80114a8:	e7a5      	b.n	80113f6 <_vfiprintf_r+0x11a>
 80114aa:	2300      	movs	r3, #0
 80114ac:	3401      	adds	r4, #1
 80114ae:	9305      	str	r3, [sp, #20]
 80114b0:	4619      	mov	r1, r3
 80114b2:	f04f 0c0a 	mov.w	ip, #10
 80114b6:	4620      	mov	r0, r4
 80114b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114bc:	3a30      	subs	r2, #48	; 0x30
 80114be:	2a09      	cmp	r2, #9
 80114c0:	d903      	bls.n	80114ca <_vfiprintf_r+0x1ee>
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d0c5      	beq.n	8011452 <_vfiprintf_r+0x176>
 80114c6:	9105      	str	r1, [sp, #20]
 80114c8:	e7c3      	b.n	8011452 <_vfiprintf_r+0x176>
 80114ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80114ce:	4604      	mov	r4, r0
 80114d0:	2301      	movs	r3, #1
 80114d2:	e7f0      	b.n	80114b6 <_vfiprintf_r+0x1da>
 80114d4:	ab03      	add	r3, sp, #12
 80114d6:	9300      	str	r3, [sp, #0]
 80114d8:	462a      	mov	r2, r5
 80114da:	4b16      	ldr	r3, [pc, #88]	; (8011534 <_vfiprintf_r+0x258>)
 80114dc:	a904      	add	r1, sp, #16
 80114de:	4630      	mov	r0, r6
 80114e0:	f7fa fede 	bl	800c2a0 <_printf_float>
 80114e4:	4607      	mov	r7, r0
 80114e6:	1c78      	adds	r0, r7, #1
 80114e8:	d1d6      	bne.n	8011498 <_vfiprintf_r+0x1bc>
 80114ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114ec:	07d9      	lsls	r1, r3, #31
 80114ee:	d405      	bmi.n	80114fc <_vfiprintf_r+0x220>
 80114f0:	89ab      	ldrh	r3, [r5, #12]
 80114f2:	059a      	lsls	r2, r3, #22
 80114f4:	d402      	bmi.n	80114fc <_vfiprintf_r+0x220>
 80114f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114f8:	f7fe f950 	bl	800f79c <__retarget_lock_release_recursive>
 80114fc:	89ab      	ldrh	r3, [r5, #12]
 80114fe:	065b      	lsls	r3, r3, #25
 8011500:	f53f af12 	bmi.w	8011328 <_vfiprintf_r+0x4c>
 8011504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011506:	e711      	b.n	801132c <_vfiprintf_r+0x50>
 8011508:	ab03      	add	r3, sp, #12
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	462a      	mov	r2, r5
 801150e:	4b09      	ldr	r3, [pc, #36]	; (8011534 <_vfiprintf_r+0x258>)
 8011510:	a904      	add	r1, sp, #16
 8011512:	4630      	mov	r0, r6
 8011514:	f7fb f968 	bl	800c7e8 <_printf_i>
 8011518:	e7e4      	b.n	80114e4 <_vfiprintf_r+0x208>
 801151a:	bf00      	nop
 801151c:	080120a4 	.word	0x080120a4
 8011520:	080120c4 	.word	0x080120c4
 8011524:	08012084 	.word	0x08012084
 8011528:	0801201c 	.word	0x0801201c
 801152c:	08012026 	.word	0x08012026
 8011530:	0800c2a1 	.word	0x0800c2a1
 8011534:	080112b9 	.word	0x080112b9
 8011538:	08012022 	.word	0x08012022

0801153c <__swbuf_r>:
 801153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153e:	460e      	mov	r6, r1
 8011540:	4614      	mov	r4, r2
 8011542:	4605      	mov	r5, r0
 8011544:	b118      	cbz	r0, 801154e <__swbuf_r+0x12>
 8011546:	6983      	ldr	r3, [r0, #24]
 8011548:	b90b      	cbnz	r3, 801154e <__swbuf_r+0x12>
 801154a:	f7ff fd99 	bl	8011080 <__sinit>
 801154e:	4b21      	ldr	r3, [pc, #132]	; (80115d4 <__swbuf_r+0x98>)
 8011550:	429c      	cmp	r4, r3
 8011552:	d12b      	bne.n	80115ac <__swbuf_r+0x70>
 8011554:	686c      	ldr	r4, [r5, #4]
 8011556:	69a3      	ldr	r3, [r4, #24]
 8011558:	60a3      	str	r3, [r4, #8]
 801155a:	89a3      	ldrh	r3, [r4, #12]
 801155c:	071a      	lsls	r2, r3, #28
 801155e:	d52f      	bpl.n	80115c0 <__swbuf_r+0x84>
 8011560:	6923      	ldr	r3, [r4, #16]
 8011562:	b36b      	cbz	r3, 80115c0 <__swbuf_r+0x84>
 8011564:	6923      	ldr	r3, [r4, #16]
 8011566:	6820      	ldr	r0, [r4, #0]
 8011568:	1ac0      	subs	r0, r0, r3
 801156a:	6963      	ldr	r3, [r4, #20]
 801156c:	b2f6      	uxtb	r6, r6
 801156e:	4283      	cmp	r3, r0
 8011570:	4637      	mov	r7, r6
 8011572:	dc04      	bgt.n	801157e <__swbuf_r+0x42>
 8011574:	4621      	mov	r1, r4
 8011576:	4628      	mov	r0, r5
 8011578:	f7ff fcee 	bl	8010f58 <_fflush_r>
 801157c:	bb30      	cbnz	r0, 80115cc <__swbuf_r+0x90>
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	3b01      	subs	r3, #1
 8011582:	60a3      	str	r3, [r4, #8]
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	1c5a      	adds	r2, r3, #1
 8011588:	6022      	str	r2, [r4, #0]
 801158a:	701e      	strb	r6, [r3, #0]
 801158c:	6963      	ldr	r3, [r4, #20]
 801158e:	3001      	adds	r0, #1
 8011590:	4283      	cmp	r3, r0
 8011592:	d004      	beq.n	801159e <__swbuf_r+0x62>
 8011594:	89a3      	ldrh	r3, [r4, #12]
 8011596:	07db      	lsls	r3, r3, #31
 8011598:	d506      	bpl.n	80115a8 <__swbuf_r+0x6c>
 801159a:	2e0a      	cmp	r6, #10
 801159c:	d104      	bne.n	80115a8 <__swbuf_r+0x6c>
 801159e:	4621      	mov	r1, r4
 80115a0:	4628      	mov	r0, r5
 80115a2:	f7ff fcd9 	bl	8010f58 <_fflush_r>
 80115a6:	b988      	cbnz	r0, 80115cc <__swbuf_r+0x90>
 80115a8:	4638      	mov	r0, r7
 80115aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115ac:	4b0a      	ldr	r3, [pc, #40]	; (80115d8 <__swbuf_r+0x9c>)
 80115ae:	429c      	cmp	r4, r3
 80115b0:	d101      	bne.n	80115b6 <__swbuf_r+0x7a>
 80115b2:	68ac      	ldr	r4, [r5, #8]
 80115b4:	e7cf      	b.n	8011556 <__swbuf_r+0x1a>
 80115b6:	4b09      	ldr	r3, [pc, #36]	; (80115dc <__swbuf_r+0xa0>)
 80115b8:	429c      	cmp	r4, r3
 80115ba:	bf08      	it	eq
 80115bc:	68ec      	ldreq	r4, [r5, #12]
 80115be:	e7ca      	b.n	8011556 <__swbuf_r+0x1a>
 80115c0:	4621      	mov	r1, r4
 80115c2:	4628      	mov	r0, r5
 80115c4:	f000 f80c 	bl	80115e0 <__swsetup_r>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d0cb      	beq.n	8011564 <__swbuf_r+0x28>
 80115cc:	f04f 37ff 	mov.w	r7, #4294967295
 80115d0:	e7ea      	b.n	80115a8 <__swbuf_r+0x6c>
 80115d2:	bf00      	nop
 80115d4:	080120a4 	.word	0x080120a4
 80115d8:	080120c4 	.word	0x080120c4
 80115dc:	08012084 	.word	0x08012084

080115e0 <__swsetup_r>:
 80115e0:	4b32      	ldr	r3, [pc, #200]	; (80116ac <__swsetup_r+0xcc>)
 80115e2:	b570      	push	{r4, r5, r6, lr}
 80115e4:	681d      	ldr	r5, [r3, #0]
 80115e6:	4606      	mov	r6, r0
 80115e8:	460c      	mov	r4, r1
 80115ea:	b125      	cbz	r5, 80115f6 <__swsetup_r+0x16>
 80115ec:	69ab      	ldr	r3, [r5, #24]
 80115ee:	b913      	cbnz	r3, 80115f6 <__swsetup_r+0x16>
 80115f0:	4628      	mov	r0, r5
 80115f2:	f7ff fd45 	bl	8011080 <__sinit>
 80115f6:	4b2e      	ldr	r3, [pc, #184]	; (80116b0 <__swsetup_r+0xd0>)
 80115f8:	429c      	cmp	r4, r3
 80115fa:	d10f      	bne.n	801161c <__swsetup_r+0x3c>
 80115fc:	686c      	ldr	r4, [r5, #4]
 80115fe:	89a3      	ldrh	r3, [r4, #12]
 8011600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011604:	0719      	lsls	r1, r3, #28
 8011606:	d42c      	bmi.n	8011662 <__swsetup_r+0x82>
 8011608:	06dd      	lsls	r5, r3, #27
 801160a:	d411      	bmi.n	8011630 <__swsetup_r+0x50>
 801160c:	2309      	movs	r3, #9
 801160e:	6033      	str	r3, [r6, #0]
 8011610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011614:	81a3      	strh	r3, [r4, #12]
 8011616:	f04f 30ff 	mov.w	r0, #4294967295
 801161a:	e03e      	b.n	801169a <__swsetup_r+0xba>
 801161c:	4b25      	ldr	r3, [pc, #148]	; (80116b4 <__swsetup_r+0xd4>)
 801161e:	429c      	cmp	r4, r3
 8011620:	d101      	bne.n	8011626 <__swsetup_r+0x46>
 8011622:	68ac      	ldr	r4, [r5, #8]
 8011624:	e7eb      	b.n	80115fe <__swsetup_r+0x1e>
 8011626:	4b24      	ldr	r3, [pc, #144]	; (80116b8 <__swsetup_r+0xd8>)
 8011628:	429c      	cmp	r4, r3
 801162a:	bf08      	it	eq
 801162c:	68ec      	ldreq	r4, [r5, #12]
 801162e:	e7e6      	b.n	80115fe <__swsetup_r+0x1e>
 8011630:	0758      	lsls	r0, r3, #29
 8011632:	d512      	bpl.n	801165a <__swsetup_r+0x7a>
 8011634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011636:	b141      	cbz	r1, 801164a <__swsetup_r+0x6a>
 8011638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801163c:	4299      	cmp	r1, r3
 801163e:	d002      	beq.n	8011646 <__swsetup_r+0x66>
 8011640:	4630      	mov	r0, r6
 8011642:	f7fe fdb9 	bl	80101b8 <_free_r>
 8011646:	2300      	movs	r3, #0
 8011648:	6363      	str	r3, [r4, #52]	; 0x34
 801164a:	89a3      	ldrh	r3, [r4, #12]
 801164c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011650:	81a3      	strh	r3, [r4, #12]
 8011652:	2300      	movs	r3, #0
 8011654:	6063      	str	r3, [r4, #4]
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	89a3      	ldrh	r3, [r4, #12]
 801165c:	f043 0308 	orr.w	r3, r3, #8
 8011660:	81a3      	strh	r3, [r4, #12]
 8011662:	6923      	ldr	r3, [r4, #16]
 8011664:	b94b      	cbnz	r3, 801167a <__swsetup_r+0x9a>
 8011666:	89a3      	ldrh	r3, [r4, #12]
 8011668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011670:	d003      	beq.n	801167a <__swsetup_r+0x9a>
 8011672:	4621      	mov	r1, r4
 8011674:	4630      	mov	r0, r6
 8011676:	f000 f84d 	bl	8011714 <__smakebuf_r>
 801167a:	89a0      	ldrh	r0, [r4, #12]
 801167c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011680:	f010 0301 	ands.w	r3, r0, #1
 8011684:	d00a      	beq.n	801169c <__swsetup_r+0xbc>
 8011686:	2300      	movs	r3, #0
 8011688:	60a3      	str	r3, [r4, #8]
 801168a:	6963      	ldr	r3, [r4, #20]
 801168c:	425b      	negs	r3, r3
 801168e:	61a3      	str	r3, [r4, #24]
 8011690:	6923      	ldr	r3, [r4, #16]
 8011692:	b943      	cbnz	r3, 80116a6 <__swsetup_r+0xc6>
 8011694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011698:	d1ba      	bne.n	8011610 <__swsetup_r+0x30>
 801169a:	bd70      	pop	{r4, r5, r6, pc}
 801169c:	0781      	lsls	r1, r0, #30
 801169e:	bf58      	it	pl
 80116a0:	6963      	ldrpl	r3, [r4, #20]
 80116a2:	60a3      	str	r3, [r4, #8]
 80116a4:	e7f4      	b.n	8011690 <__swsetup_r+0xb0>
 80116a6:	2000      	movs	r0, #0
 80116a8:	e7f7      	b.n	801169a <__swsetup_r+0xba>
 80116aa:	bf00      	nop
 80116ac:	20000020 	.word	0x20000020
 80116b0:	080120a4 	.word	0x080120a4
 80116b4:	080120c4 	.word	0x080120c4
 80116b8:	08012084 	.word	0x08012084

080116bc <abort>:
 80116bc:	b508      	push	{r3, lr}
 80116be:	2006      	movs	r0, #6
 80116c0:	f000 f898 	bl	80117f4 <raise>
 80116c4:	2001      	movs	r0, #1
 80116c6:	f7f1 fd85 	bl	80031d4 <_exit>

080116ca <__swhatbuf_r>:
 80116ca:	b570      	push	{r4, r5, r6, lr}
 80116cc:	460e      	mov	r6, r1
 80116ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d2:	2900      	cmp	r1, #0
 80116d4:	b096      	sub	sp, #88	; 0x58
 80116d6:	4614      	mov	r4, r2
 80116d8:	461d      	mov	r5, r3
 80116da:	da08      	bge.n	80116ee <__swhatbuf_r+0x24>
 80116dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80116e0:	2200      	movs	r2, #0
 80116e2:	602a      	str	r2, [r5, #0]
 80116e4:	061a      	lsls	r2, r3, #24
 80116e6:	d410      	bmi.n	801170a <__swhatbuf_r+0x40>
 80116e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116ec:	e00e      	b.n	801170c <__swhatbuf_r+0x42>
 80116ee:	466a      	mov	r2, sp
 80116f0:	f000 f89c 	bl	801182c <_fstat_r>
 80116f4:	2800      	cmp	r0, #0
 80116f6:	dbf1      	blt.n	80116dc <__swhatbuf_r+0x12>
 80116f8:	9a01      	ldr	r2, [sp, #4]
 80116fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011702:	425a      	negs	r2, r3
 8011704:	415a      	adcs	r2, r3
 8011706:	602a      	str	r2, [r5, #0]
 8011708:	e7ee      	b.n	80116e8 <__swhatbuf_r+0x1e>
 801170a:	2340      	movs	r3, #64	; 0x40
 801170c:	2000      	movs	r0, #0
 801170e:	6023      	str	r3, [r4, #0]
 8011710:	b016      	add	sp, #88	; 0x58
 8011712:	bd70      	pop	{r4, r5, r6, pc}

08011714 <__smakebuf_r>:
 8011714:	898b      	ldrh	r3, [r1, #12]
 8011716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011718:	079d      	lsls	r5, r3, #30
 801171a:	4606      	mov	r6, r0
 801171c:	460c      	mov	r4, r1
 801171e:	d507      	bpl.n	8011730 <__smakebuf_r+0x1c>
 8011720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011724:	6023      	str	r3, [r4, #0]
 8011726:	6123      	str	r3, [r4, #16]
 8011728:	2301      	movs	r3, #1
 801172a:	6163      	str	r3, [r4, #20]
 801172c:	b002      	add	sp, #8
 801172e:	bd70      	pop	{r4, r5, r6, pc}
 8011730:	ab01      	add	r3, sp, #4
 8011732:	466a      	mov	r2, sp
 8011734:	f7ff ffc9 	bl	80116ca <__swhatbuf_r>
 8011738:	9900      	ldr	r1, [sp, #0]
 801173a:	4605      	mov	r5, r0
 801173c:	4630      	mov	r0, r6
 801173e:	f7fe fda7 	bl	8010290 <_malloc_r>
 8011742:	b948      	cbnz	r0, 8011758 <__smakebuf_r+0x44>
 8011744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011748:	059a      	lsls	r2, r3, #22
 801174a:	d4ef      	bmi.n	801172c <__smakebuf_r+0x18>
 801174c:	f023 0303 	bic.w	r3, r3, #3
 8011750:	f043 0302 	orr.w	r3, r3, #2
 8011754:	81a3      	strh	r3, [r4, #12]
 8011756:	e7e3      	b.n	8011720 <__smakebuf_r+0xc>
 8011758:	4b0d      	ldr	r3, [pc, #52]	; (8011790 <__smakebuf_r+0x7c>)
 801175a:	62b3      	str	r3, [r6, #40]	; 0x28
 801175c:	89a3      	ldrh	r3, [r4, #12]
 801175e:	6020      	str	r0, [r4, #0]
 8011760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011764:	81a3      	strh	r3, [r4, #12]
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	6163      	str	r3, [r4, #20]
 801176a:	9b01      	ldr	r3, [sp, #4]
 801176c:	6120      	str	r0, [r4, #16]
 801176e:	b15b      	cbz	r3, 8011788 <__smakebuf_r+0x74>
 8011770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011774:	4630      	mov	r0, r6
 8011776:	f000 f86b 	bl	8011850 <_isatty_r>
 801177a:	b128      	cbz	r0, 8011788 <__smakebuf_r+0x74>
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	f023 0303 	bic.w	r3, r3, #3
 8011782:	f043 0301 	orr.w	r3, r3, #1
 8011786:	81a3      	strh	r3, [r4, #12]
 8011788:	89a0      	ldrh	r0, [r4, #12]
 801178a:	4305      	orrs	r5, r0
 801178c:	81a5      	strh	r5, [r4, #12]
 801178e:	e7cd      	b.n	801172c <__smakebuf_r+0x18>
 8011790:	08011019 	.word	0x08011019

08011794 <_malloc_usable_size_r>:
 8011794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011798:	1f18      	subs	r0, r3, #4
 801179a:	2b00      	cmp	r3, #0
 801179c:	bfbc      	itt	lt
 801179e:	580b      	ldrlt	r3, [r1, r0]
 80117a0:	18c0      	addlt	r0, r0, r3
 80117a2:	4770      	bx	lr

080117a4 <_raise_r>:
 80117a4:	291f      	cmp	r1, #31
 80117a6:	b538      	push	{r3, r4, r5, lr}
 80117a8:	4604      	mov	r4, r0
 80117aa:	460d      	mov	r5, r1
 80117ac:	d904      	bls.n	80117b8 <_raise_r+0x14>
 80117ae:	2316      	movs	r3, #22
 80117b0:	6003      	str	r3, [r0, #0]
 80117b2:	f04f 30ff 	mov.w	r0, #4294967295
 80117b6:	bd38      	pop	{r3, r4, r5, pc}
 80117b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117ba:	b112      	cbz	r2, 80117c2 <_raise_r+0x1e>
 80117bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117c0:	b94b      	cbnz	r3, 80117d6 <_raise_r+0x32>
 80117c2:	4620      	mov	r0, r4
 80117c4:	f000 f830 	bl	8011828 <_getpid_r>
 80117c8:	462a      	mov	r2, r5
 80117ca:	4601      	mov	r1, r0
 80117cc:	4620      	mov	r0, r4
 80117ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117d2:	f000 b817 	b.w	8011804 <_kill_r>
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d00a      	beq.n	80117f0 <_raise_r+0x4c>
 80117da:	1c59      	adds	r1, r3, #1
 80117dc:	d103      	bne.n	80117e6 <_raise_r+0x42>
 80117de:	2316      	movs	r3, #22
 80117e0:	6003      	str	r3, [r0, #0]
 80117e2:	2001      	movs	r0, #1
 80117e4:	e7e7      	b.n	80117b6 <_raise_r+0x12>
 80117e6:	2400      	movs	r4, #0
 80117e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117ec:	4628      	mov	r0, r5
 80117ee:	4798      	blx	r3
 80117f0:	2000      	movs	r0, #0
 80117f2:	e7e0      	b.n	80117b6 <_raise_r+0x12>

080117f4 <raise>:
 80117f4:	4b02      	ldr	r3, [pc, #8]	; (8011800 <raise+0xc>)
 80117f6:	4601      	mov	r1, r0
 80117f8:	6818      	ldr	r0, [r3, #0]
 80117fa:	f7ff bfd3 	b.w	80117a4 <_raise_r>
 80117fe:	bf00      	nop
 8011800:	20000020 	.word	0x20000020

08011804 <_kill_r>:
 8011804:	b538      	push	{r3, r4, r5, lr}
 8011806:	4d07      	ldr	r5, [pc, #28]	; (8011824 <_kill_r+0x20>)
 8011808:	2300      	movs	r3, #0
 801180a:	4604      	mov	r4, r0
 801180c:	4608      	mov	r0, r1
 801180e:	4611      	mov	r1, r2
 8011810:	602b      	str	r3, [r5, #0]
 8011812:	f7f1 fccf 	bl	80031b4 <_kill>
 8011816:	1c43      	adds	r3, r0, #1
 8011818:	d102      	bne.n	8011820 <_kill_r+0x1c>
 801181a:	682b      	ldr	r3, [r5, #0]
 801181c:	b103      	cbz	r3, 8011820 <_kill_r+0x1c>
 801181e:	6023      	str	r3, [r4, #0]
 8011820:	bd38      	pop	{r3, r4, r5, pc}
 8011822:	bf00      	nop
 8011824:	200068c0 	.word	0x200068c0

08011828 <_getpid_r>:
 8011828:	f7f1 bcbc 	b.w	80031a4 <_getpid>

0801182c <_fstat_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	4d07      	ldr	r5, [pc, #28]	; (801184c <_fstat_r+0x20>)
 8011830:	2300      	movs	r3, #0
 8011832:	4604      	mov	r4, r0
 8011834:	4608      	mov	r0, r1
 8011836:	4611      	mov	r1, r2
 8011838:	602b      	str	r3, [r5, #0]
 801183a:	f7f1 fd1a 	bl	8003272 <_fstat>
 801183e:	1c43      	adds	r3, r0, #1
 8011840:	d102      	bne.n	8011848 <_fstat_r+0x1c>
 8011842:	682b      	ldr	r3, [r5, #0]
 8011844:	b103      	cbz	r3, 8011848 <_fstat_r+0x1c>
 8011846:	6023      	str	r3, [r4, #0]
 8011848:	bd38      	pop	{r3, r4, r5, pc}
 801184a:	bf00      	nop
 801184c:	200068c0 	.word	0x200068c0

08011850 <_isatty_r>:
 8011850:	b538      	push	{r3, r4, r5, lr}
 8011852:	4d06      	ldr	r5, [pc, #24]	; (801186c <_isatty_r+0x1c>)
 8011854:	2300      	movs	r3, #0
 8011856:	4604      	mov	r4, r0
 8011858:	4608      	mov	r0, r1
 801185a:	602b      	str	r3, [r5, #0]
 801185c:	f7f1 fd19 	bl	8003292 <_isatty>
 8011860:	1c43      	adds	r3, r0, #1
 8011862:	d102      	bne.n	801186a <_isatty_r+0x1a>
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	b103      	cbz	r3, 801186a <_isatty_r+0x1a>
 8011868:	6023      	str	r3, [r4, #0]
 801186a:	bd38      	pop	{r3, r4, r5, pc}
 801186c:	200068c0 	.word	0x200068c0

08011870 <_init>:
 8011870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011872:	bf00      	nop
 8011874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011876:	bc08      	pop	{r3}
 8011878:	469e      	mov	lr, r3
 801187a:	4770      	bx	lr

0801187c <_fini>:
 801187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187e:	bf00      	nop
 8011880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011882:	bc08      	pop	{r3}
 8011884:	469e      	mov	lr, r3
 8011886:	4770      	bx	lr
